
SCU_SMPS_test_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001211c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08012370  08012370  00013370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128b0  080128b0  00014208  2**0
                  CONTENTS
  4 .ARM          00000008  080128b0  080128b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128b8  080128b8  00014208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128b8  080128b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128bc  080128bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080128c0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b08  20000208  08012ac8  00014208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007d10  08012ac8  00014d10  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5fa  00000000  00000000  0001423e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003506  00000000  00000000  0002f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00032d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d64  00000000  00000000  00033eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b7c  00000000  00000000  00034c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b47b  00000000  00000000  00069790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141b62  00000000  00000000  00084c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c676d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a04  00000000  00000000  001c67b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001cc1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000208 	.word	0x20000208
 800026c:	00000000 	.word	0x00000000
 8000270:	08012354 	.word	0x08012354

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000020c 	.word	0x2000020c
 800028c:	08012354 	.word	0x08012354

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
const float A = 3.9083e-3;
const float B = -5.775e-7;
float temperature;

// Function to handle ADC operations
uint8_t ADC_operation() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
#if 1
	// Loop through each ADC and channel
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e017      	b.n	8000fbc <ADC_operation+0x3c>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e008      	b.n	8000fa4 <ADC_operation+0x24>
		{
			ADC_READ(ADC_idx, Chn_idx);  // Read ADC value
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f81d 	bl	8000fd8 <ADC_READ>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	71bb      	strb	r3, [r7, #6]
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d9f3      	bls.n	8000f92 <ADC_operation+0x12>
		}

		if(SRAM_check)
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <ADC_operation+0x54>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <ADC_operation+0x36>
			SRAM_operation();
 8000fb2:	f001 f965 	bl	8002280 <SRAM_operation>
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d9e4      	bls.n	8000f8c <ADC_operation+0xc>
	}
	SRAM_check  = 1;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <ADC_operation+0x54>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		}
		if(ADC_idx == 2)
			SRAM_operation();
	}
#endif
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000284 	.word	0x20000284

08000fd8 <ADC_READ>:
#endif

#if 1

uint16_t ADC_READ(uint8_t adc_num,uint8_t channel)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b092      	sub	sp, #72	@ 0x48
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	//	uint8_t txd_buf[30]={0};
	//	uint8_t status;
	//	uint16_t sensor_value = 0x7FFF;

	uint8_t rxd_buf[30]={0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	831a      	strh	r2, [r3, #24]
	uint8_t wirestatus=0;
 8001000:	2300      	movs	r3, #0
 8001002:	72fb      	strb	r3, [r7, #11]
	float resistance = 0;
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sum = 0;           // Sum for averaging
 800100a:	2300      	movs	r3, #0
 800100c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint16_t adchex=0;
 800100e:	2300      	movs	r3, #0
 8001010:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	float average = 0.0;        // Average value
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c


	txd_buf[0] = 0x40; // To write data from 0 register
 800101a:	4b94      	ldr	r3, [pc, #592]	@ (800126c <ADC_READ+0x294>)
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x11;	//	Number of register to write
 8001020:	4b92      	ldr	r3, [pc, #584]	@ (800126c <ADC_READ+0x294>)
 8001022:	2211      	movs	r2, #17
 8001024:	705a      	strb	r2, [r3, #1]
	// Register 0x00: Device ID (read-only, value is reserved or device-specific)
	txd_buf[2] = 0x0C; // Device ID
 8001026:	4b91      	ldr	r3, [pc, #580]	@ (800126c <ADC_READ+0x294>)
 8001028:	220c      	movs	r2, #12
 800102a:	709a      	strb	r2, [r3, #2]

	// Register 0x01: STATUS (status flags and ready indicator, typically read-only)
	txd_buf[3] = 0x00; // Placeholder, this is usually not written as it’s read-only
 800102c:	4b8f      	ldr	r3, [pc, #572]	@ (800126c <ADC_READ+0x294>)
 800102e:	2200      	movs	r2, #0
 8001030:	70da      	strb	r2, [r3, #3]

	// Register 0x02: INPMUX (input multiplexer configuration for RTD leg selection)
	txd_buf[4] = 0x76; // Configures the input multiplexer (MUXP and MUXN) for specific RTD connections
 8001032:	4b8e      	ldr	r3, [pc, #568]	@ (800126c <ADC_READ+0x294>)
 8001034:	2276      	movs	r2, #118	@ 0x76
 8001036:	711a      	strb	r2, [r3, #4]

	// Register 0x03: PGA (programmable gain amplifier configuration)
	txd_buf[5] = 0xEA; // Sets PGA gain = 1, enabling precise low-signal measurement
 8001038:	4b8c      	ldr	r3, [pc, #560]	@ (800126c <ADC_READ+0x294>)
 800103a:	22ea      	movs	r2, #234	@ 0xea
 800103c:	715a      	strb	r2, [r3, #5]

	// Register 0x04: DATARATE (data rate and conversion settings)
	txd_buf[6] = 0x1E; // Sets data rate to 4000 SPS and other configurations
 800103e:	4b8b      	ldr	r3, [pc, #556]	@ (800126c <ADC_READ+0x294>)
 8001040:	221e      	movs	r2, #30
 8001042:	719a      	strb	r2, [r3, #6]

	// Register 0x05: REF (reference voltage configuration)
	txd_buf[7] = 0x82; // Reference configuration (enable internal/external reference, etc.)
 8001044:	4b89      	ldr	r3, [pc, #548]	@ (800126c <ADC_READ+0x294>)
 8001046:	2282      	movs	r2, #130	@ 0x82
 8001048:	71da      	strb	r2, [r3, #7]

	// Register 0x06: IDACMAG (IDAC magnitude configuration)
	txd_buf[8] = 0x87; // Configures excitation current for RTD measurement
 800104a:	4b88      	ldr	r3, [pc, #544]	@ (800126c <ADC_READ+0x294>)
 800104c:	2287      	movs	r2, #135	@ 0x87
 800104e:	721a      	strb	r2, [r3, #8]

	// Register 0x07: IDACMUX (routes IDAC currents to specific pins)
	txd_buf[9] = 0xFB; // Routes IDAC currents to appropriate RTD pins
 8001050:	4b86      	ldr	r3, [pc, #536]	@ (800126c <ADC_READ+0x294>)
 8001052:	22fb      	movs	r2, #251	@ 0xfb
 8001054:	725a      	strb	r2, [r3, #9]

	// Register 0x08: VBIAS (voltage bias configuration)
	txd_buf[10] = 0x00; // Disables voltage bias
 8001056:	4b85      	ldr	r3, [pc, #532]	@ (800126c <ADC_READ+0x294>)
 8001058:	2200      	movs	r2, #0
 800105a:	729a      	strb	r2, [r3, #10]

	// Register 0x09: SYS (system configuration, including timeout and calibration settings)
	txd_buf[11] = 0x10; // Configures timeout and calibration sample averaging
 800105c:	4b83      	ldr	r3, [pc, #524]	@ (800126c <ADC_READ+0x294>)
 800105e:	2210      	movs	r2, #16
 8001060:	72da      	strb	r2, [r3, #11]

	// Registers 0x0A to 0x0F: Reserved or calibration-related (placeholders in this code)
	txd_buf[12] = 0x00; // Placeholder
 8001062:	4b82      	ldr	r3, [pc, #520]	@ (800126c <ADC_READ+0x294>)
 8001064:	2200      	movs	r2, #0
 8001066:	731a      	strb	r2, [r3, #12]
	txd_buf[13] = 0x00; // Placeholder
 8001068:	4b80      	ldr	r3, [pc, #512]	@ (800126c <ADC_READ+0x294>)
 800106a:	2200      	movs	r2, #0
 800106c:	735a      	strb	r2, [r3, #13]
	txd_buf[14] = 0x00; // Placeholder
 800106e:	4b7f      	ldr	r3, [pc, #508]	@ (800126c <ADC_READ+0x294>)
 8001070:	2200      	movs	r2, #0
 8001072:	739a      	strb	r2, [r3, #14]
	txd_buf[15] = 0x00; // Placeholder
 8001074:	4b7d      	ldr	r3, [pc, #500]	@ (800126c <ADC_READ+0x294>)
 8001076:	2200      	movs	r2, #0
 8001078:	73da      	strb	r2, [r3, #15]
	txd_buf[16] = 0x00; // Placeholder
 800107a:	4b7c      	ldr	r3, [pc, #496]	@ (800126c <ADC_READ+0x294>)
 800107c:	2200      	movs	r2, #0
 800107e:	741a      	strb	r2, [r3, #16]

	// Register 0x10: GPIODAT (GPIO data configuration)
	txd_buf[17] = 0x40; // Configures GPIO pin states
 8001080:	4b7a      	ldr	r3, [pc, #488]	@ (800126c <ADC_READ+0x294>)
 8001082:	2240      	movs	r2, #64	@ 0x40
 8001084:	745a      	strb	r2, [r3, #17]

	// Registers 0x11 to 0x14: Placeholder or unused
	txd_buf[18] = 0x00; // Placeholder
 8001086:	4b79      	ldr	r3, [pc, #484]	@ (800126c <ADC_READ+0x294>)
 8001088:	2200      	movs	r2, #0
 800108a:	749a      	strb	r2, [r3, #18]
	txd_buf[19] = 0x00; // Placeholder
 800108c:	4b77      	ldr	r3, [pc, #476]	@ (800126c <ADC_READ+0x294>)
 800108e:	2200      	movs	r2, #0
 8001090:	74da      	strb	r2, [r3, #19]
	txd_buf[20] = 0x00; // Placeholder
 8001092:	4b76      	ldr	r3, [pc, #472]	@ (800126c <ADC_READ+0x294>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]

	// Note: txd_buf[18] is redundantly assigned. The last assignment will overwrite earlier ones.
	txd_buf[18] = 0x00; // Redundant; ensure this matches intended use.
 8001098:	4b74      	ldr	r3, [pc, #464]	@ (800126c <ADC_READ+0x294>)
 800109a:	2200      	movs	r2, #0
 800109c:	749a      	strb	r2, [r3, #18]

	switch(channel)
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d827      	bhi.n	80010f4 <ADC_READ+0x11c>
 80010a4:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <ADC_READ+0xd4>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010cb 	.word	0x080010cb
 80010b4:	080010d9 	.word	0x080010d9
 80010b8:	080010e7 	.word	0x080010e7
	{
	case CHANNEL_1:
		txd_buf[4] = 0x43;// Input MUX for RTD legs selection (MUX configuration)
 80010bc:	4b6b      	ldr	r3, [pc, #428]	@ (800126c <ADC_READ+0x294>)
 80010be:	2243      	movs	r2, #67	@ 0x43
 80010c0:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf5; // IDAC MUX
 80010c2:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <ADC_READ+0x294>)
 80010c4:	22f5      	movs	r2, #245	@ 0xf5
 80010c6:	725a      	strb	r2, [r3, #9]
		break;
 80010c8:	e014      	b.n	80010f4 <ADC_READ+0x11c>

	case CHANNEL_2:
		txd_buf[4] = 0x10; // Input MUX for RTD legs selection (MUX configuration)
 80010ca:	4b68      	ldr	r3, [pc, #416]	@ (800126c <ADC_READ+0x294>)
 80010cc:	2210      	movs	r2, #16
 80010ce:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf2; // IDAC MUX
 80010d0:	4b66      	ldr	r3, [pc, #408]	@ (800126c <ADC_READ+0x294>)
 80010d2:	22f2      	movs	r2, #242	@ 0xf2
 80010d4:	725a      	strb	r2, [r3, #9]
		break;
 80010d6:	e00d      	b.n	80010f4 <ADC_READ+0x11c>

	case CHANNEL_3:
		txd_buf[4] = 0x9A; // Input MUX for RTD legs selection (MUX configuration)
 80010d8:	4b64      	ldr	r3, [pc, #400]	@ (800126c <ADC_READ+0x294>)
 80010da:	229a      	movs	r2, #154	@ 0x9a
 80010dc:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf8; // IDAC MUX
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <ADC_READ+0x294>)
 80010e0:	22f8      	movs	r2, #248	@ 0xf8
 80010e2:	725a      	strb	r2, [r3, #9]
		break;
 80010e4:	e006      	b.n	80010f4 <ADC_READ+0x11c>
	case CHANNEL_4:
		txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 80010e6:	4b61      	ldr	r3, [pc, #388]	@ (800126c <ADC_READ+0x294>)
 80010e8:	2276      	movs	r2, #118	@ 0x76
 80010ea:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xfb;// IDAC MUX
 80010ec:	4b5f      	ldr	r3, [pc, #380]	@ (800126c <ADC_READ+0x294>)
 80010ee:	22fb      	movs	r2, #251	@ 0xfb
 80010f0:	725a      	strb	r2, [r3, #9]
		break;
 80010f2:	bf00      	nop
	}

	switch(adc_num)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	f000 8426 	beq.w	8001948 <ADC_READ+0x970>
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	f300 861c 	bgt.w	8001d3a <ADC_READ+0xd62>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <ADC_READ+0x138>
 8001106:	2b01      	cmp	r3, #1
 8001108:	f000 81e9 	beq.w	80014de <ADC_READ+0x506>
 800110c:	f000 be15 	b.w	8001d3a <ADC_READ+0xd62>
	{
	case ADC_1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4856      	ldr	r0, [pc, #344]	@ (8001270 <ADC_READ+0x298>)
 8001116:	f003 ff39 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001120:	4853      	ldr	r0, [pc, #332]	@ (8001270 <ADC_READ+0x298>)
 8001122:	f003 ff33 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4852      	ldr	r0, [pc, #328]	@ (8001274 <ADC_READ+0x29c>)
 800112c:	f003 ff2e 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2104      	movs	r1, #4
 8001134:	484f      	ldr	r0, [pc, #316]	@ (8001274 <ADC_READ+0x29c>)
 8001136:	f003 ff29 	bl	8004f8c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	484c      	ldr	r0, [pc, #304]	@ (8001270 <ADC_READ+0x298>)
 8001140:	f003 ff24 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2213      	movs	r2, #19
 800114a:	4948      	ldr	r1, [pc, #288]	@ (800126c <ADC_READ+0x294>)
 800114c:	484a      	ldr	r0, [pc, #296]	@ (8001278 <ADC_READ+0x2a0>)
 800114e:	f00a ffc1 	bl	800c0d4 <HAL_SPI_Transmit>
		HAL_Delay(1); // don't touch
 8001152:	2001      	movs	r0, #1
 8001154:	f003 fb6e 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	2140      	movs	r1, #64	@ 0x40
 800115c:	4844      	ldr	r0, [pc, #272]	@ (8001270 <ADC_READ+0x298>)
 800115e:	f003 ff15 	bl	8004f8c <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001168:	4841      	ldr	r0, [pc, #260]	@ (8001270 <ADC_READ+0x298>)
 800116a:	f003 ff0f 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_Delay(1); // don't touch
 800116e:	2001      	movs	r0, #1
 8001170:	f003 fb60 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	483d      	ldr	r0, [pc, #244]	@ (8001270 <ADC_READ+0x298>)
 800117a:	f003 ff07 	bl	8004f8c <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19; // self offset calibration
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <ADC_READ+0x294>)
 8001180:	2219      	movs	r2, #25
 8001182:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	4938      	ldr	r1, [pc, #224]	@ (800126c <ADC_READ+0x294>)
 800118c:	483a      	ldr	r0, [pc, #232]	@ (8001278 <ADC_READ+0x2a0>)
 800118e:	f00a ffa1 	bl	800c0d4 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4836      	ldr	r0, [pc, #216]	@ (8001270 <ADC_READ+0x298>)
 8001198:	f003 fef8 	bl	8004f8c <HAL_GPIO_WritePin>

		HAL_Delay(wait_time);
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <ADC_READ+0x2a4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fb47 	bl	8004834 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	@ 0x40
 80011aa:	4831      	ldr	r0, [pc, #196]	@ (8001270 <ADC_READ+0x298>)
 80011ac:	f003 feee 	bl	8004f8c <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <ADC_READ+0x294>)
 80011b2:	2213      	movs	r2, #19
 80011b4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011ba:	e070      	b.n	800129e <ADC_READ+0x2c6>
		{
			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80011bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c0:	2201      	movs	r2, #1
 80011c2:	492a      	ldr	r1, [pc, #168]	@ (800126c <ADC_READ+0x294>)
 80011c4:	482c      	ldr	r0, [pc, #176]	@ (8001278 <ADC_READ+0x2a0>)
 80011c6:	f00a ff85 	bl	800c0d4 <HAL_SPI_Transmit>
			HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fb32 	bl	8004834 <HAL_Delay>
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1[i], 0x2, 0xFFFF);
 80011d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001280 <ADC_READ+0x2a8>)
 80011d6:	1899      	adds	r1, r3, r2
 80011d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011dc:	2202      	movs	r2, #2
 80011de:	4826      	ldr	r0, [pc, #152]	@ (8001278 <ADC_READ+0x2a0>)
 80011e0:	f00b f98e 	bl	800c500 <HAL_SPI_Receive>
			HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fb25 	bl	8004834 <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_1[i] = (reg_data_ADC_1[i] >> 8) | (reg_data_ADC_1[i] << 8);
 80011ea:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <ADC_READ+0x2a8>)
 80011ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4921      	ldr	r1, [pc, #132]	@ (8001280 <ADC_READ+0x2a8>)
 80011fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	b299      	uxth	r1, r3
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <ADC_READ+0x2a8>)
 800120c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800120e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 8001212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd37      	ble.n	8001288 <ADC_READ+0x2b0>
			{
				if(((reg_data_ADC_1[i]-reg_data_ADC_1[i-1])<2)||((reg_data_ADC_1[i-1]-reg_data_ADC_1[i])<2))
 8001218:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <ADC_READ+0x2a8>)
 800121a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800121c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001220:	4619      	mov	r1, r3
 8001222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001224:	3b01      	subs	r3, #1
 8001226:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <ADC_READ+0x2a8>)
 8001228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122c:	1acb      	subs	r3, r1, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	dd0c      	ble.n	800124c <ADC_READ+0x274>
 8001232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001234:	3b01      	subs	r3, #1
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <ADC_READ+0x2a8>)
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	4619      	mov	r1, r3
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <ADC_READ+0x2a8>)
 8001240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	dc08      	bgt.n	800125e <ADC_READ+0x286>
				{
					sum += reg_data_ADC_1[i];
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <ADC_READ+0x2a8>)
 800124e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001254:	461a      	mov	r2, r3
 8001256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001258:	4413      	add	r3, r2
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
 800125c:	e01c      	b.n	8001298 <ADC_READ+0x2c0>
				}
				else
				{
					diff_count++;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <ADC_READ+0x2ac>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <ADC_READ+0x2ac>)
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e015      	b.n	8001298 <ADC_READ+0x2c0>
 800126c:	20000224 	.word	0x20000224
 8001270:	42021400 	.word	0x42021400
 8001274:	42020800 	.word	0x42020800
 8001278:	20007810 	.word	0x20007810
 800127c:	20000000 	.word	0x20000000
 8001280:	20000248 	.word	0x20000248
 8001284:	20000285 	.word	0x20000285
				}
			}
			else
			{
				sum += reg_data_ADC_1[i];
 8001288:	4ac5      	ldr	r2, [pc, #788]	@ (80015a0 <ADC_READ+0x5c8>)
 800128a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800128c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001290:	461a      	mov	r2, r3
 8001292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001294:	4413      	add	r3, r2
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 8001298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129a:	3301      	adds	r3, #1
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800129e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	dd8b      	ble.n	80011bc <ADC_READ+0x1e4>
			}

		}

		if(diff_count > 5) sum =0;
 80012a4:	4bbf      	ldr	r3, [pc, #764]	@ (80015a4 <ADC_READ+0x5cc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d901      	bls.n	80012b0 <ADC_READ+0x2d8>
 80012ac:	2300      	movs	r3, #0
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 80012b0:	4bbc      	ldr	r3, [pc, #752]	@ (80015a4 <ADC_READ+0x5cc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_1[i];  // Add to sum for averaging
	}
#endif

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	48bb      	ldr	r0, [pc, #748]	@ (80015a8 <ADC_READ+0x5d0>)
 80012bc:	f003 fe66 	bl	8004f8c <HAL_GPIO_WritePin>

	average = sum / 10.0;
 80012c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80012c2:	f7ff f92f 	bl	8000524 <__aeabi_ui2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4bb8      	ldr	r3, [pc, #736]	@ (80015ac <ADC_READ+0x5d4>)
 80012cc:	f7ff face 	bl	800086c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc76 	bl	8000bc8 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adchex  = sum / 10;
 80012e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012e2:	4ab3      	ldr	r2, [pc, #716]	@ (80015b0 <ADC_READ+0x5d8>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 80012ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 80015b4 <ADC_READ+0x5dc>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80012fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001302:	eddf 6aad 	vldr	s13, [pc, #692]	@ 80015b8 <ADC_READ+0x5e0>
 8001306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	//Callendar-Van Dusen Equation
	if (resistance >= R0) {  // Above 0°C
 800130e:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80015bc <ADC_READ+0x5e4>
 8001312:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	db50      	blt.n	80013c2 <ADC_READ+0x3ea>
		temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001320:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 80015c0 <ADC_READ+0x5e8>
 8001324:	eef1 7a67 	vneg.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f91b 	bl	8000568 <__aeabi_f2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80015c0 <ADC_READ+0x5e8>
 800133a:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 80015c0 <ADC_READ+0x5e8>
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80015c4 <ADC_READ+0x5ec>
 8001346:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800134a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800134e:	eddf 5a9b 	vldr	s11, [pc, #620]	@ 80015bc <ADC_READ+0x5e4>
 8001352:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800135a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800135e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136a:	ee17 0a90 	vmov	r0, s15
 800136e:	f7ff f8fb 	bl	8000568 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	ec43 2b10 	vmov	d0, r2, r3
 800137a:	f010 fee1 	bl	8012140 <sqrt>
 800137e:	ec53 2b10 	vmov	r2, r3, d0
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7fe ff91 	bl	80002ac <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4614      	mov	r4, r2
 8001390:	461d      	mov	r5, r3
 8001392:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 80015c4 <ADC_READ+0x5ec>
 8001396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8e3 	bl	8000568 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7ff fa5f 	bl	800086c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc07 	bl	8000bc8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <ADC_READ+0x5f0>)
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e017      	b.n	80013f2 <ADC_READ+0x41a>
	}
	else
	{  // Below 0°C, use simpler approximation
		temperature = (resistance - R0) / 0.385;
 80013c2:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80015bc <ADC_READ+0x5e4>
 80013c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	ee17 0a90 	vmov	r0, s15
 80013d2:	f7ff f8c9 	bl	8000568 <__aeabi_f2d>
 80013d6:	a370      	add	r3, pc, #448	@ (adr r3, 8001598 <ADC_READ+0x5c0>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa46 	bl	800086c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbee 	bl	8000bc8 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a76      	ldr	r2, [pc, #472]	@ (80015c8 <ADC_READ+0x5f0>)
 80013f0:	6013      	str	r3, [r2, #0]
	}

	if(rxd_buf[7]==txd_buf[9])
 80013f2:	7cfa      	ldrb	r2, [r7, #19]
 80013f4:	4b75      	ldr	r3, [pc, #468]	@ (80015cc <ADC_READ+0x5f4>)
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <ADC_READ+0x442>
	{
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001402:	4873      	ldr	r0, [pc, #460]	@ (80015d0 <ADC_READ+0x5f8>)
 8001404:	f003 fdc2 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f003 fa13 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001414:	486e      	ldr	r0, [pc, #440]	@ (80015d0 <ADC_READ+0x5f8>)
 8001416:	f003 fdb9 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
#endif

#ifdef WIREBREAK

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2140      	movs	r1, #64	@ 0x40
 800141e:	4862      	ldr	r0, [pc, #392]	@ (80015a8 <ADC_READ+0x5d0>)
 8001420:	f003 fdb4 	bl	8004f8c <HAL_GPIO_WritePin>
	txd_buf[0] = 0x21;
 8001424:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <ADC_READ+0x5f4>)
 8001426:	2221      	movs	r2, #33	@ 0x21
 8001428:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x00;
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <ADC_READ+0x5f4>)
 800142c:	2200      	movs	r2, #0
 800142e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFFFF);
 8001430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001434:	2202      	movs	r2, #2
 8001436:	4965      	ldr	r1, [pc, #404]	@ (80015cc <ADC_READ+0x5f4>)
 8001438:	4866      	ldr	r0, [pc, #408]	@ (80015d4 <ADC_READ+0x5fc>)
 800143a:	f00a fe4b 	bl	800c0d4 <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_SPI_Receive(&hspi5, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800143e:	f107 010b 	add.w	r1, r7, #11
 8001442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001446:	2201      	movs	r2, #1
 8001448:	4862      	ldr	r0, [pc, #392]	@ (80015d4 <ADC_READ+0x5fc>)
 800144a:	f00b f859 	bl	800c500 <HAL_SPI_Receive>
//	HAL_Delay(1);

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	4855      	ldr	r0, [pc, #340]	@ (80015a8 <ADC_READ+0x5d0>)
 8001454:	f003 fd9a 	bl	8004f8c <HAL_GPIO_WritePin>

	if (wire_break(wirestatus))
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fca0 	bl	8001da0 <wire_break>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00e      	beq.n	8001484 <ADC_READ+0x4ac>
	{
		wirestatus=0;
 8001466:	2300      	movs	r3, #0
 8001468:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800146a:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <ADC_READ+0x5f0>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
		adchex =0;
 8001472:	2300      	movs	r3, #0
 8001474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 8001478:	2214      	movs	r2, #20
 800147a:	2100      	movs	r1, #0
 800147c:	4848      	ldr	r0, [pc, #288]	@ (80015a0 <ADC_READ+0x5c8>)
 800147e:	f00e fd6a 	bl	800ff56 <memset>
 8001482:	e015      	b.n	80014b0 <ADC_READ+0x4d8>
	}
	else if(check_sensor_validity(adchex))
 8001484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fc71 	bl	8001d70 <check_sensor_validity>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <ADC_READ+0x4d8>
	{
		wirestatus=0;
 8001494:	2300      	movs	r3, #0
 8001496:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 8001498:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <ADC_READ+0x5f0>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
		adchex =0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 80014a6:	2214      	movs	r2, #20
 80014a8:	2100      	movs	r1, #0
 80014aa:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <ADC_READ+0x5c8>)
 80014ac:	f00e fd53 	bl	800ff56 <memset>
	}
	wirestatus=0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	72fb      	strb	r3, [r7, #11]

#endif
	temp_sensor[adc_num][channel] = temperature ;
 80014b4:	79f9      	ldrb	r1, [r7, #7]
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	4a43      	ldr	r2, [pc, #268]	@ (80015c8 <ADC_READ+0x5f0>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4846      	ldr	r0, [pc, #280]	@ (80015d8 <ADC_READ+0x600>)
 80014be:	0089      	lsls	r1, r1, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4403      	add	r3, r0
 80014c6:	601a      	str	r2, [r3, #0]
	sensor_hex[adc_num][channel] = 	adchex ;
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	4943      	ldr	r1, [pc, #268]	@ (80015dc <ADC_READ+0x604>)
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80014d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	//		sensor_value =	sum / 10;
	break;
 80014da:	f000 bc2e 	b.w	8001d3a <ADC_READ+0xd62>

	case ADC_2:

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e4:	483e      	ldr	r0, [pc, #248]	@ (80015e0 <ADC_READ+0x608>)
 80014e6:	f003 fd51 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2140      	movs	r1, #64	@ 0x40
 80014ee:	483d      	ldr	r0, [pc, #244]	@ (80015e4 <ADC_READ+0x60c>)
 80014f0:	f003 fd4c 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014fa:	483a      	ldr	r0, [pc, #232]	@ (80015e4 <ADC_READ+0x60c>)
 80014fc:	f003 fd46 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001506:	4837      	ldr	r0, [pc, #220]	@ (80015e4 <ADC_READ+0x60c>)
 8001508:	f003 fd40 	bl	8004f8c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001512:	4833      	ldr	r0, [pc, #204]	@ (80015e0 <ADC_READ+0x608>)
 8001514:	f003 fd3a 	bl	8004f8c <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	2213      	movs	r2, #19
 800151e:	492b      	ldr	r1, [pc, #172]	@ (80015cc <ADC_READ+0x5f4>)
 8001520:	4831      	ldr	r0, [pc, #196]	@ (80015e8 <ADC_READ+0x610>)
 8001522:	f00a fdd7 	bl	800c0d4 <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f003 f984 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001532:	482b      	ldr	r0, [pc, #172]	@ (80015e0 <ADC_READ+0x608>)
 8001534:	f003 fd2a 	bl	8004f8c <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2140      	movs	r1, #64	@ 0x40
 800153c:	4829      	ldr	r0, [pc, #164]	@ (80015e4 <ADC_READ+0x60c>)
 800153e:	f003 fd25 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f003 f976 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800154e:	4824      	ldr	r0, [pc, #144]	@ (80015e0 <ADC_READ+0x608>)
 8001550:	f003 fd1c 	bl	8004f8c <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <ADC_READ+0x5f4>)
 8001556:	2219      	movs	r2, #25
 8001558:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2201      	movs	r2, #1
 8001560:	491a      	ldr	r1, [pc, #104]	@ (80015cc <ADC_READ+0x5f4>)
 8001562:	4821      	ldr	r0, [pc, #132]	@ (80015e8 <ADC_READ+0x610>)
 8001564:	f00a fdb6 	bl	800c0d4 <HAL_SPI_Transmit>
//		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800156e:	481c      	ldr	r0, [pc, #112]	@ (80015e0 <ADC_READ+0x608>)
 8001570:	f003 fd0c 	bl	8004f8c <HAL_GPIO_WritePin>


		HAL_Delay(wait_time);
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <ADC_READ+0x614>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f003 f95b 	bl	8004834 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001584:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <ADC_READ+0x608>)
 8001586:	f003 fd01 	bl	8004f8c <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <ADC_READ+0x5f4>)
 800158c:	2213      	movs	r2, #19
 800158e:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 10; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001594:	e08f      	b.n	80016b6 <ADC_READ+0x6de>
 8001596:	bf00      	nop
 8001598:	0a3d70a4 	.word	0x0a3d70a4
 800159c:	3fd8a3d7 	.word	0x3fd8a3d7
 80015a0:	20000248 	.word	0x20000248
 80015a4:	20000285 	.word	0x20000285
 80015a8:	42021400 	.word	0x42021400
 80015ac:	40240000 	.word	0x40240000
 80015b0:	cccccccd 	.word	0xcccccccd
 80015b4:	44fa0000 	.word	0x44fa0000
 80015b8:	477fff00 	.word	0x477fff00
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	3b801132 	.word	0x3b801132
 80015c4:	b51b057f 	.word	0xb51b057f
 80015c8:	20000244 	.word	0x20000244
 80015cc:	20000224 	.word	0x20000224
 80015d0:	42021000 	.word	0x42021000
 80015d4:	20007810 	.word	0x20007810
 80015d8:	20000288 	.word	0x20000288
 80015dc:	200002b8 	.word	0x200002b8
 80015e0:	42020400 	.word	0x42020400
 80015e4:	42021800 	.word	0x42021800
 80015e8:	200076f0 	.word	0x200076f0
 80015ec:	20000000 	.word	0x20000000
		{
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80015f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f4:	2201      	movs	r2, #1
 80015f6:	49c4      	ldr	r1, [pc, #784]	@ (8001908 <ADC_READ+0x930>)
 80015f8:	48c4      	ldr	r0, [pc, #784]	@ (800190c <ADC_READ+0x934>)
 80015fa:	f00a fd6b 	bl	800c0d4 <HAL_SPI_Transmit>
			HAL_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f003 f918 	bl	8004834 <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2[i], 0x2, 0xFFFF);
 8001604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4ac1      	ldr	r2, [pc, #772]	@ (8001910 <ADC_READ+0x938>)
 800160a:	1899      	adds	r1, r3, r2
 800160c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001610:	2202      	movs	r2, #2
 8001612:	48be      	ldr	r0, [pc, #760]	@ (800190c <ADC_READ+0x934>)
 8001614:	f00a ff74 	bl	800c500 <HAL_SPI_Receive>
			HAL_Delay(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f003 f90b 	bl	8004834 <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_2[i] = (reg_data_ADC_2[i] >> 8) | (reg_data_ADC_2[i] << 8);
 800161e:	4abc      	ldr	r2, [pc, #752]	@ (8001910 <ADC_READ+0x938>)
 8001620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21a      	sxth	r2, r3
 800162c:	49b8      	ldr	r1, [pc, #736]	@ (8001910 <ADC_READ+0x938>)
 800162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	b299      	uxth	r1, r3
 800163e:	4ab4      	ldr	r2, [pc, #720]	@ (8001910 <ADC_READ+0x938>)
 8001640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 8001646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001648:	2b00      	cmp	r3, #0
 800164a:	dd29      	ble.n	80016a0 <ADC_READ+0x6c8>
			{
				if(((reg_data_ADC_2[i]-reg_data_ADC_2[i-1])<2)||((reg_data_ADC_2[i-1]-reg_data_ADC_2[i])<2))
 800164c:	4ab0      	ldr	r2, [pc, #704]	@ (8001910 <ADC_READ+0x938>)
 800164e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001654:	4619      	mov	r1, r3
 8001656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001658:	3b01      	subs	r3, #1
 800165a:	4aad      	ldr	r2, [pc, #692]	@ (8001910 <ADC_READ+0x938>)
 800165c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	dd0c      	ble.n	8001680 <ADC_READ+0x6a8>
 8001666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001668:	3b01      	subs	r3, #1
 800166a:	4aa9      	ldr	r2, [pc, #676]	@ (8001910 <ADC_READ+0x938>)
 800166c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001670:	4619      	mov	r1, r3
 8001672:	4aa7      	ldr	r2, [pc, #668]	@ (8001910 <ADC_READ+0x938>)
 8001674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167a:	1acb      	subs	r3, r1, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	dc08      	bgt.n	8001692 <ADC_READ+0x6ba>
				{
					sum += reg_data_ADC_2[i];
 8001680:	4aa3      	ldr	r2, [pc, #652]	@ (8001910 <ADC_READ+0x938>)
 8001682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001688:	461a      	mov	r2, r3
 800168a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800168c:	4413      	add	r3, r2
 800168e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001690:	e00e      	b.n	80016b0 <ADC_READ+0x6d8>
				}
				else
				{
					diff_count++;
 8001692:	4ba0      	ldr	r3, [pc, #640]	@ (8001914 <ADC_READ+0x93c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b9e      	ldr	r3, [pc, #632]	@ (8001914 <ADC_READ+0x93c>)
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <ADC_READ+0x6d8>
				}
			}
			else
			{
				sum += reg_data_ADC_2[i];
 80016a0:	4a9b      	ldr	r2, [pc, #620]	@ (8001910 <ADC_READ+0x938>)
 80016a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a8:	461a      	mov	r2, r3
 80016aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ac:	4413      	add	r3, r2
 80016ae:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 80016b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b2:	3301      	adds	r3, #1
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	dd99      	ble.n	80015f0 <ADC_READ+0x618>
			}

		}

		if(diff_count > 5) sum =0;
 80016bc:	4b95      	ldr	r3, [pc, #596]	@ (8001914 <ADC_READ+0x93c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d901      	bls.n	80016c8 <ADC_READ+0x6f0>
 80016c4:	2300      	movs	r3, #0
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 80016c8:	4b92      	ldr	r3, [pc, #584]	@ (8001914 <ADC_READ+0x93c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_2[i];  // Add to sum for averaging
}
#endif

adchex =  sum / 10;
 80016ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016d0:	4a91      	ldr	r2, [pc, #580]	@ (8001918 <ADC_READ+0x940>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 80016dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80016de:	f7fe ff21 	bl	8000524 <__aeabi_ui2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b8d      	ldr	r3, [pc, #564]	@ (800191c <ADC_READ+0x944>)
 80016e8:	f7ff f8c0 	bl	800086c <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa68 	bl	8000bc8 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001702:	4887      	ldr	r0, [pc, #540]	@ (8001920 <ADC_READ+0x948>)
 8001704:	f003 fc42 	bl	8004f8c <HAL_GPIO_WritePin>

resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001708:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800170c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001924 <ADC_READ+0x94c>
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001718:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800171c:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8001928 <ADC_READ+0x950>
 8001720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001724:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 8001728:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800192c <ADC_READ+0x954>
 800172c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	db50      	blt.n	80017dc <ADC_READ+0x804>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800173a:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 8001930 <ADC_READ+0x958>
 800173e:	eef1 7a67 	vneg.f32	s15, s15
 8001742:	ee17 3a90 	vmov	r3, s15
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff0e 	bl	8000568 <__aeabi_f2d>
 800174c:	4604      	mov	r4, r0
 800174e:	460d      	mov	r5, r1
 8001750:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001930 <ADC_READ+0x958>
 8001754:	eddf 7a76 	vldr	s15, [pc, #472]	@ 8001930 <ADC_READ+0x958>
 8001758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175c:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001934 <ADC_READ+0x95c>
 8001760:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001764:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001768:	eddf 5a70 	vldr	s11, [pc, #448]	@ 800192c <ADC_READ+0x954>
 800176c:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001774:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001778:	ee76 7a67 	vsub.f32	s15, s12, s15
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001784:	ee17 0a90 	vmov	r0, s15
 8001788:	f7fe feee 	bl	8000568 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	ec43 2b10 	vmov	d0, r2, r3
 8001794:	f010 fcd4 	bl	8012140 <sqrt>
 8001798:	ec53 2b10 	vmov	r2, r3, d0
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd84 	bl	80002ac <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8001934 <ADC_READ+0x95c>
 80017b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017b4:	ee17 0a90 	vmov	r0, s15
 80017b8:	f7fe fed6 	bl	8000568 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7ff f852 	bl	800086c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9fa 	bl	8000bc8 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a58      	ldr	r2, [pc, #352]	@ (8001938 <ADC_READ+0x960>)
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e017      	b.n	800180c <ADC_READ+0x834>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 80017dc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800192c <ADC_READ+0x954>
 80017e0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e8:	ee17 0a90 	vmov	r0, s15
 80017ec:	f7fe febc 	bl	8000568 <__aeabi_f2d>
 80017f0:	a343      	add	r3, pc, #268	@ (adr r3, 8001900 <ADC_READ+0x928>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7ff f839 	bl	800086c <__aeabi_ddiv>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9e1 	bl	8000bc8 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	4a4b      	ldr	r2, [pc, #300]	@ (8001938 <ADC_READ+0x960>)
 800180a:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9] )
 800180c:	7cfa      	ldrb	r2, [r7, #19]
 800180e:	4b3e      	ldr	r3, [pc, #248]	@ (8001908 <ADC_READ+0x930>)
 8001810:	7a5b      	ldrb	r3, [r3, #9]
 8001812:	429a      	cmp	r2, r3
 8001814:	d10e      	bne.n	8001834 <ADC_READ+0x85c>
{
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 1); // Toggle LED for visual feedback
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181c:	4847      	ldr	r0, [pc, #284]	@ (800193c <ADC_READ+0x964>)
 800181e:	f003 fbb5 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f003 f806 	bl	8004834 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800182e:	4843      	ldr	r0, [pc, #268]	@ (800193c <ADC_READ+0x964>)
 8001830:	f003 fbac 	bl	8004f8c <HAL_GPIO_WritePin>
HAL_Delay(20);
#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800183a:	4839      	ldr	r0, [pc, #228]	@ (8001920 <ADC_READ+0x948>)
 800183c:	f003 fba6 	bl	8004f8c <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <ADC_READ+0x930>)
 8001842:	2221      	movs	r2, #33	@ 0x21
 8001844:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 8001846:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <ADC_READ+0x930>)
 8001848:	2200      	movs	r2, #0
 800184a:	705a      	strb	r2, [r3, #1]

HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800184c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001850:	2202      	movs	r2, #2
 8001852:	492d      	ldr	r1, [pc, #180]	@ (8001908 <ADC_READ+0x930>)
 8001854:	482d      	ldr	r0, [pc, #180]	@ (800190c <ADC_READ+0x934>)
 8001856:	f00a fc3d 	bl	800c0d4 <HAL_SPI_Transmit>
//HAL_Delay(1);
HAL_SPI_Receive(&hspi2, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800185a:	f107 010b 	add.w	r1, r7, #11
 800185e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001862:	2201      	movs	r2, #1
 8001864:	4829      	ldr	r0, [pc, #164]	@ (800190c <ADC_READ+0x934>)
 8001866:	f00a fe4b 	bl	800c500 <HAL_SPI_Receive>
//HAL_Delay(1);

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001870:	482b      	ldr	r0, [pc, #172]	@ (8001920 <ADC_READ+0x948>)
 8001872:	f003 fb8b 	bl	8004f8c <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fa91 	bl	8001da0 <wire_break>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <ADC_READ+0x8ca>
{
	wirestatus=0;
 8001884:	2300      	movs	r3, #0
 8001886:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001888:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <ADC_READ+0x960>)
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
	adchex=0;
 8001890:	2300      	movs	r3, #0
 8001892:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 8001896:	2214      	movs	r2, #20
 8001898:	2100      	movs	r1, #0
 800189a:	481d      	ldr	r0, [pc, #116]	@ (8001910 <ADC_READ+0x938>)
 800189c:	f00e fb5b 	bl	800ff56 <memset>
 80018a0:	e015      	b.n	80018ce <ADC_READ+0x8f6>
}
else if(check_sensor_validity(adchex))
 80018a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fa62 	bl	8001d70 <check_sensor_validity>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <ADC_READ+0x8f6>
{
	wirestatus=0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <ADC_READ+0x960>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
	adchex =0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 80018c4:	2214      	movs	r2, #20
 80018c6:	2100      	movs	r1, #0
 80018c8:	4811      	ldr	r0, [pc, #68]	@ (8001910 <ADC_READ+0x938>)
 80018ca:	f00e fb44 	bl	800ff56 <memset>
}
wirestatus=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 80018d2:	79f9      	ldrb	r1, [r7, #7]
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <ADC_READ+0x960>)
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4819      	ldr	r0, [pc, #100]	@ (8001940 <ADC_READ+0x968>)
 80018dc:	0089      	lsls	r1, r1, #2
 80018de:	440b      	add	r3, r1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	4916      	ldr	r1, [pc, #88]	@ (8001944 <ADC_READ+0x96c>)
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80018f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 80018f8:	e21f      	b.n	8001d3a <ADC_READ+0xd62>
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w
 8001900:	0a3d70a4 	.word	0x0a3d70a4
 8001904:	3fd8a3d7 	.word	0x3fd8a3d7
 8001908:	20000224 	.word	0x20000224
 800190c:	200076f0 	.word	0x200076f0
 8001910:	2000025c 	.word	0x2000025c
 8001914:	20000285 	.word	0x20000285
 8001918:	cccccccd 	.word	0xcccccccd
 800191c:	40240000 	.word	0x40240000
 8001920:	42020400 	.word	0x42020400
 8001924:	44fa0000 	.word	0x44fa0000
 8001928:	477fff00 	.word	0x477fff00
 800192c:	42c80000 	.word	0x42c80000
 8001930:	3b801132 	.word	0x3b801132
 8001934:	b51b057f 	.word	0xb51b057f
 8001938:	20000244 	.word	0x20000244
 800193c:	42021000 	.word	0x42021000
 8001940:	20000288 	.word	0x20000288
 8001944:	200002b8 	.word	0x200002b8

case ADC_3:

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2110      	movs	r1, #16
 800194c:	48a5      	ldr	r0, [pc, #660]	@ (8001be4 <ADC_READ+0xc0c>)
 800194e:	f003 fb1d 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001958:	48a3      	ldr	r0, [pc, #652]	@ (8001be8 <ADC_READ+0xc10>)
 800195a:	f003 fb17 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001964:	48a0      	ldr	r0, [pc, #640]	@ (8001be8 <ADC_READ+0xc10>)
 8001966:	f003 fb11 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001970:	489d      	ldr	r0, [pc, #628]	@ (8001be8 <ADC_READ+0xc10>)
 8001972:	f003 fb0b 	bl	8004f8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2110      	movs	r1, #16
 800197a:	489a      	ldr	r0, [pc, #616]	@ (8001be4 <ADC_READ+0xc0c>)
 800197c:	f003 fb06 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2213      	movs	r2, #19
 8001986:	4999      	ldr	r1, [pc, #612]	@ (8001bec <ADC_READ+0xc14>)
 8001988:	4899      	ldr	r0, [pc, #612]	@ (8001bf0 <ADC_READ+0xc18>)
 800198a:	f00a fba3 	bl	800c0d4 <HAL_SPI_Transmit>
	HAL_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f002 ff50 	bl	8004834 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001994:	2201      	movs	r2, #1
 8001996:	2110      	movs	r1, #16
 8001998:	4892      	ldr	r0, [pc, #584]	@ (8001be4 <ADC_READ+0xc0c>)
 800199a:	f003 faf7 	bl	8004f8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019a4:	4890      	ldr	r0, [pc, #576]	@ (8001be8 <ADC_READ+0xc10>)
 80019a6:	f003 faf1 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f002 ff42 	bl	8004834 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	488b      	ldr	r0, [pc, #556]	@ (8001be4 <ADC_READ+0xc0c>)
 80019b6:	f003 fae9 	bl	8004f8c <HAL_GPIO_WritePin>
	txd_buf[0] = 0x19;
 80019ba:	4b8c      	ldr	r3, [pc, #560]	@ (8001bec <ADC_READ+0xc14>)
 80019bc:	2219      	movs	r2, #25
 80019be:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	2201      	movs	r2, #1
 80019c6:	4989      	ldr	r1, [pc, #548]	@ (8001bec <ADC_READ+0xc14>)
 80019c8:	4889      	ldr	r0, [pc, #548]	@ (8001bf0 <ADC_READ+0xc18>)
 80019ca:	f00a fb83 	bl	800c0d4 <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2110      	movs	r1, #16
 80019d2:	4884      	ldr	r0, [pc, #528]	@ (8001be4 <ADC_READ+0xc0c>)
 80019d4:	f003 fada 	bl	8004f8c <HAL_GPIO_WritePin>

	HAL_Delay(wait_time);
 80019d8:	4b86      	ldr	r3, [pc, #536]	@ (8001bf4 <ADC_READ+0xc1c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ff29 	bl	8004834 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2110      	movs	r1, #16
 80019e6:	487f      	ldr	r0, [pc, #508]	@ (8001be4 <ADC_READ+0xc0c>)
 80019e8:	f003 fad0 	bl	8004f8c <HAL_GPIO_WritePin>
	txd_buf[0] = 0x13;
 80019ec:	4b7f      	ldr	r3, [pc, #508]	@ (8001bec <ADC_READ+0xc14>)
 80019ee:	2213      	movs	r2, #19
 80019f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f6:	e062      	b.n	8001abe <ADC_READ+0xae6>
	{
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80019f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019fc:	2201      	movs	r2, #1
 80019fe:	497b      	ldr	r1, [pc, #492]	@ (8001bec <ADC_READ+0xc14>)
 8001a00:	487b      	ldr	r0, [pc, #492]	@ (8001bf0 <ADC_READ+0xc18>)
 8001a02:	f00a fb67 	bl	800c0d4 <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f002 ff14 	bl	8004834 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3[i], 0x2, 0xFFFF);
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4a79      	ldr	r2, [pc, #484]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a12:	1899      	adds	r1, r3, r2
 8001a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4875      	ldr	r0, [pc, #468]	@ (8001bf0 <ADC_READ+0xc18>)
 8001a1c:	f00a fd70 	bl	800c500 <HAL_SPI_Receive>
		HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f002 ff07 	bl	8004834 <HAL_Delay>
		// Byte-wise flip
		reg_data_ADC_3[i] = (reg_data_ADC_3[i] >> 8) | (reg_data_ADC_3[i] << 8);
 8001a26:	4a74      	ldr	r2, [pc, #464]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4970      	ldr	r1, [pc, #448]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	b299      	uxth	r1, r3
 8001a46:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
		if(i > 0)
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd29      	ble.n	8001aa8 <ADC_READ+0xad0>
		{
			if(((reg_data_ADC_3[i]-reg_data_ADC_3[i-1])<2)||((reg_data_ADC_3[i-1]-reg_data_ADC_3[i])<2))
 8001a54:	4a68      	ldr	r2, [pc, #416]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a65      	ldr	r2, [pc, #404]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a68:	1acb      	subs	r3, r1, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	dd0c      	ble.n	8001a88 <ADC_READ+0xab0>
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a70:	3b01      	subs	r3, #1
 8001a72:	4a61      	ldr	r2, [pc, #388]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a82:	1acb      	subs	r3, r1, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	dc08      	bgt.n	8001a9a <ADC_READ+0xac2>
			{
				sum += reg_data_ADC_3[i];
 8001a88:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a94:	4413      	add	r3, r2
 8001a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a98:	e00e      	b.n	8001ab8 <ADC_READ+0xae0>
			}
			else
			{
				diff_count++;
 8001a9a:	4b58      	ldr	r3, [pc, #352]	@ (8001bfc <ADC_READ+0xc24>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <ADC_READ+0xc24>)
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <ADC_READ+0xae0>
			}
		}
		else
		{
			sum += reg_data_ADC_3[i];
 8001aa8:	4a53      	ldr	r2, [pc, #332]	@ (8001bf8 <ADC_READ+0xc20>)
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab4:	4413      	add	r3, r2
 8001ab6:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 10; i++)
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aba:	3301      	adds	r3, #1
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	dd99      	ble.n	80019f8 <ADC_READ+0xa20>
		}

	}

	if(diff_count > 5) sum =0;
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <ADC_READ+0xc24>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d901      	bls.n	8001ad0 <ADC_READ+0xaf8>
 8001acc:	2300      	movs	r3, #0
 8001ace:	647b      	str	r3, [r7, #68]	@ 0x44
	diff_count=0;
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <ADC_READ+0xc24>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
#else

	sum += reg_data_ADC_3[i];  // Add to sum for averaging
}
#endif
adchex = sum / 10;
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad8:	4a49      	ldr	r2, [pc, #292]	@ (8001c00 <ADC_READ+0xc28>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	08db      	lsrs	r3, r3, #3
 8001ae0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 8001ae4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ae6:	f7fe fd1d 	bl	8000524 <__aeabi_ui2d>
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b45      	ldr	r3, [pc, #276]	@ (8001c04 <ADC_READ+0xc2c>)
 8001af0:	f7fe febc 	bl	800086c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f864 	bl	8000bc8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2110      	movs	r1, #16
 8001b08:	4836      	ldr	r0, [pc, #216]	@ (8001be4 <ADC_READ+0xc0c>)
 8001b0a:	f003 fa3f 	bl	8004f8c <HAL_GPIO_WritePin>
resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001b0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b12:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001c08 <ADC_READ+0xc30>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b22:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001c0c <ADC_READ+0xc34>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 8001b2e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001c1c <ADC_READ+0xc44>
 8001b32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	db6f      	blt.n	8001c20 <ADC_READ+0xc48>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001b40:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8001c10 <ADC_READ+0xc38>
 8001b44:	eef1 7a67 	vneg.f32	s15, s15
 8001b48:	ee17 3a90 	vmov	r3, s15
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd0b 	bl	8000568 <__aeabi_f2d>
 8001b52:	4604      	mov	r4, r0
 8001b54:	460d      	mov	r5, r1
 8001b56:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001c10 <ADC_READ+0xc38>
 8001b5a:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8001c10 <ADC_READ+0xc38>
 8001b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b62:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001c14 <ADC_READ+0xc3c>
 8001b66:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6e:	eddf 5a2b 	vldr	s11, [pc, #172]	@ 8001c1c <ADC_READ+0xc44>
 8001b72:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b7a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001b7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8a:	ee17 0a90 	vmov	r0, s15
 8001b8e:	f7fe fceb 	bl	8000568 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ec43 2b10 	vmov	d0, r2, r3
 8001b9a:	f010 fad1 	bl	8012140 <sqrt>
 8001b9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fb81 	bl	80002ac <__adddf3>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001c14 <ADC_READ+0xc3c>
 8001bb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bba:	ee17 0a90 	vmov	r0, s15
 8001bbe:	f7fe fcd3 	bl	8000568 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fe4f 	bl	800086c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe fff7 	bl	8000bc8 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <ADC_READ+0xc40>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e036      	b.n	8001c50 <ADC_READ+0xc78>
 8001be2:	bf00      	nop
 8001be4:	42020c00 	.word	0x42020c00
 8001be8:	42020000 	.word	0x42020000
 8001bec:	20000224 	.word	0x20000224
 8001bf0:	20007780 	.word	0x20007780
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000270 	.word	0x20000270
 8001bfc:	20000285 	.word	0x20000285
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	40240000 	.word	0x40240000
 8001c08:	44fa0000 	.word	0x44fa0000
 8001c0c:	477fff00 	.word	0x477fff00
 8001c10:	3b801132 	.word	0x3b801132
 8001c14:	b51b057f 	.word	0xb51b057f
 8001c18:	20000244 	.word	0x20000244
 8001c1c:	42c80000 	.word	0x42c80000
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 8001c20:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8001c1c <ADC_READ+0xc44>
 8001c24:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2c:	ee17 0a90 	vmov	r0, s15
 8001c30:	f7fe fc9a 	bl	8000568 <__aeabi_f2d>
 8001c34:	a34c      	add	r3, pc, #304	@ (adr r3, 8001d68 <ADC_READ+0xd90>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fe17 	bl	800086c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffbf 	bl	8000bc8 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d48 <ADC_READ+0xd70>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9])
 8001c50:	7cfa      	ldrb	r2, [r7, #19]
 8001c52:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <ADC_READ+0xd74>)
 8001c54:	7a5b      	ldrb	r3, [r3, #9]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d10e      	bne.n	8001c78 <ADC_READ+0xca0>
{
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 1); // Toggle LED for visual feedback
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c60:	483b      	ldr	r0, [pc, #236]	@ (8001d50 <ADC_READ+0xd78>)
 8001c62:	f003 f993 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f002 fde4 	bl	8004834 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c72:	4837      	ldr	r0, [pc, #220]	@ (8001d50 <ADC_READ+0xd78>)
 8001c74:	f003 f98a 	bl	8004f8c <HAL_GPIO_WritePin>

#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	4835      	ldr	r0, [pc, #212]	@ (8001d54 <ADC_READ+0xd7c>)
 8001c7e:	f003 f985 	bl	8004f8c <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 8001c82:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <ADC_READ+0xd74>)
 8001c84:	2221      	movs	r2, #33	@ 0x21
 8001c86:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 8001c88:	4b30      	ldr	r3, [pc, #192]	@ (8001d4c <ADC_READ+0xd74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFFFF);
 8001c8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c92:	2202      	movs	r2, #2
 8001c94:	492d      	ldr	r1, [pc, #180]	@ (8001d4c <ADC_READ+0xd74>)
 8001c96:	4830      	ldr	r0, [pc, #192]	@ (8001d58 <ADC_READ+0xd80>)
 8001c98:	f00a fa1c 	bl	800c0d4 <HAL_SPI_Transmit>

HAL_SPI_Receive(&hspi3, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 8001c9c:	f107 010b 	add.w	r1, r7, #11
 8001ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	482c      	ldr	r0, [pc, #176]	@ (8001d58 <ADC_READ+0xd80>)
 8001ca8:	f00a fc2a 	bl	800c500 <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4828      	ldr	r0, [pc, #160]	@ (8001d54 <ADC_READ+0xd7c>)
 8001cb2:	f003 f96b 	bl	8004f8c <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f871 	bl	8001da0 <wire_break>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <ADC_READ+0xd0a>
{
	wirestatus=0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <ADC_READ+0xd70>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
	adchex=0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8001cd6:	2214      	movs	r2, #20
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4820      	ldr	r0, [pc, #128]	@ (8001d5c <ADC_READ+0xd84>)
 8001cdc:	f00e f93b 	bl	800ff56 <memset>
 8001ce0:	e015      	b.n	8001d0e <ADC_READ+0xd36>
}
else if(check_sensor_validity(adchex))
 8001ce2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f842 	bl	8001d70 <check_sensor_validity>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <ADC_READ+0xd36>
{
	wirestatus=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <ADC_READ+0xd70>)
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
	adchex =0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8001d04:	2214      	movs	r2, #20
 8001d06:	2100      	movs	r1, #0
 8001d08:	4814      	ldr	r0, [pc, #80]	@ (8001d5c <ADC_READ+0xd84>)
 8001d0a:	f00e f924 	bl	800ff56 <memset>
}
wirestatus=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 8001d12:	79f9      	ldrb	r1, [r7, #7]
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <ADC_READ+0xd70>)
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	4811      	ldr	r0, [pc, #68]	@ (8001d60 <ADC_READ+0xd88>)
 8001d1c:	0089      	lsls	r1, r1, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 8001d26:	79fa      	ldrb	r2, [r7, #7]
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	490e      	ldr	r1, [pc, #56]	@ (8001d64 <ADC_READ+0xd8c>)
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001d34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 8001d38:	bf00      	nop
}
//	return sensor_value;
return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3748      	adds	r7, #72	@ 0x48
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}
 8001d44:	f3af 8000 	nop.w
 8001d48:	20000244 	.word	0x20000244
 8001d4c:	20000224 	.word	0x20000224
 8001d50:	42021000 	.word	0x42021000
 8001d54:	42020c00 	.word	0x42020c00
 8001d58:	20007780 	.word	0x20007780
 8001d5c:	20000270 	.word	0x20000270
 8001d60:	20000288 	.word	0x20000288
 8001d64:	200002b8 	.word	0x200002b8
 8001d68:	0a3d70a4 	.word	0x0a3d70a4
 8001d6c:	3fd8a3d7 	.word	0x3fd8a3d7

08001d70 <check_sensor_validity>:
	check_channel = 0 ;
}
#endif

uint8_t check_sensor_validity(uint16_t data)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	80fb      	strh	r3, [r7, #6]

	if(data<ADC_MIN_VAL || data>ADC_MAX_VAL)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d904      	bls.n	8001d8e <check_sensor_validity+0x1e>
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	f246 6266 	movw	r2, #26214	@ 0x6666
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <check_sensor_validity+0x22>
		return 1 ;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <check_sensor_validity+0x24>

	else
		return 0 ;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <wire_break>:

uint8_t wire_break(uint8_t flag)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	uint8_t FL_REF =0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]

	if(txd_buf[7] == 0xC2)//0xC2
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <wire_break+0x7c>)
 8001db0:	79db      	ldrb	r3, [r3, #7]
 8001db2:	2bc2      	cmp	r3, #194	@ 0xc2
 8001db4:	d102      	bne.n	8001dbc <wire_break+0x1c>
	{
		FL_REF= 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e008      	b.n	8001dce <wire_break+0x2e>
	}
	else if(txd_buf[7] == 0x82)//0x82
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <wire_break+0x7c>)
 8001dbe:	79db      	ldrb	r3, [r3, #7]
 8001dc0:	2b82      	cmp	r3, #130	@ 0x82
 8001dc2:	d102      	bne.n	8001dca <wire_break+0x2a>
	{
		FL_REF= 2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <wire_break+0x2e>
	}
	else
	{
		FL_REF=0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
	}

	switch(FL_REF)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d002      	beq.n	8001dda <wire_break+0x3a>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d00a      	beq.n	8001dee <wire_break+0x4e>
 8001dd8:	e013      	b.n	8001e02 <wire_break+0x62>
	{
	case 1:
		if(0x01 == flag)  //0x29 w/o interface card :  0x01  with interface card
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <wire_break+0x44>
			return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e014      	b.n	8001e0e <wire_break+0x6e>

		else if(0x00 == flag) //0x00 w/o interface card :  0x00  with interface card
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <wire_break+0x66>
			return 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e00f      	b.n	8001e0e <wire_break+0x6e>

		break;
	case 2:
		if(0x3 == flag) //0x2b w/o interface card :  0x03  with interface card
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d101      	bne.n	8001df8 <wire_break+0x58>
			return 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e00a      	b.n	8001e0e <wire_break+0x6e>

		else if(0x2 == flag) //0x2 w/o interface card :  0x02  with interface card
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d105      	bne.n	8001e0a <wire_break+0x6a>
			return 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e005      	b.n	8001e0e <wire_break+0x6e>

		break;
	default:
		return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e003      	b.n	8001e0e <wire_break+0x6e>
		break;
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <wire_break+0x6c>
		break;
 8001e0a:	bf00      	nop
		break;
	}
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000224 	.word	0x20000224

08001e20 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af02      	add	r7, sp, #8
	static uint16_t nand_mismatch = 0;

	HAL_GPIO_TogglePin(GPIOE, LED5_Pin);  // Toggle status LED
 8001e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e2a:	4864      	ldr	r0, [pc, #400]	@ (8001fbc <NAND_operation+0x19c>)
 8001e2c:	f003 f8c6 	bl	8004fbc <HAL_GPIO_TogglePin>
	// Move to the next block if all pages in the current block have been written
	if (nand_address.Page > 127)
 8001e30:	4b63      	ldr	r3, [pc, #396]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e36:	d90b      	bls.n	8001e50 <NAND_operation+0x30>
	{
		get_Good_NAND_block();
 8001e38:	f000 f9e4 	bl	8002204 <get_Good_NAND_block>
		nand_address.Page = 0;
 8001e3c:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]
		HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8001e42:	495f      	ldr	r1, [pc, #380]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001e44:	485f      	ldr	r0, [pc, #380]	@ (8001fc4 <NAND_operation+0x1a4>)
 8001e46:	f003 ff47 	bl	8005cd8 <HAL_NAND_Erase_Block>
		HAL_Delay(100);
 8001e4a:	2064      	movs	r0, #100	@ 0x64
 8001e4c:	f002 fcf2 	bl	8004834 <HAL_Delay>
	}

	memset(read_data, 0, 8192);
 8001e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e54:	2100      	movs	r1, #0
 8001e56:	485c      	ldr	r0, [pc, #368]	@ (8001fc8 <NAND_operation+0x1a8>)
 8001e58:	f00e f87d 	bl	800ff56 <memset>
	memset(NAND_data, 0, 8192);
 8001e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e60:	2100      	movs	r1, #0
 8001e62:	485a      	ldr	r0, [pc, #360]	@ (8001fcc <NAND_operation+0x1ac>)
 8001e64:	f00e f877 	bl	800ff56 <memset>

	// Prepare data for NAND write
	get_NAND_data(NAND_data);
 8001e68:	4858      	ldr	r0, [pc, #352]	@ (8001fcc <NAND_operation+0x1ac>)
 8001e6a:	f000 fbf1 	bl	8002650 <get_NAND_data>

//	HAL_UART_Transmit(&huart5, (uint8_t *)&NAND_data, 8192,HAL_MAX_DELAY);
//	HAL_Delay(100);
	// Write data to NAND flash
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4a56      	ldr	r2, [pc, #344]	@ (8001fcc <NAND_operation+0x1ac>)
 8001e72:	4953      	ldr	r1, [pc, #332]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001e74:	4853      	ldr	r0, [pc, #332]	@ (8001fc4 <NAND_operation+0x1a4>)
 8001e76:	f003 fafb 	bl	8005470 <HAL_NAND_Write_Page_8b>

	// Read data back from NAND flash for verification
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4a52      	ldr	r2, [pc, #328]	@ (8001fc8 <NAND_operation+0x1a8>)
 8001e7e:	4950      	ldr	r1, [pc, #320]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001e80:	4850      	ldr	r0, [pc, #320]	@ (8001fc4 <NAND_operation+0x1a4>)
 8001e82:	f003 f99b 	bl	80051bc <HAL_NAND_Read_Page_8b>
//	HAL_UART_Transmit(&huart5, read_data, sizeof(read_data),HAL_MAX_DELAY);
	//	HAL_Delay(20);
	// Calculate bit difference between written and read data
	uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 8001e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e8a:	494f      	ldr	r1, [pc, #316]	@ (8001fc8 <NAND_operation+0x1a8>)
 8001e8c:	484f      	ldr	r0, [pc, #316]	@ (8001fcc <NAND_operation+0x1ac>)
 8001e8e:	f000 f934 	bl	80020fa <calculate_hamming_distance>
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]

	// Check if data read matches data written
	if (bit_difference <50) // Data matches
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b31      	cmp	r3, #49	@ 0x31
 8001e9a:	d813      	bhi.n	8001ec4 <NAND_operation+0xa4>
	{
		if (nand_address.Page == 0)
 8001e9c:	4b48      	ldr	r3, [pc, #288]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <NAND_operation+0x96>
		{
			set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 8001ea4:	4b46      	ldr	r3, [pc, #280]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001ea6:	8818      	ldrh	r0, [r3, #0]
 8001ea8:	4b45      	ldr	r3, [pc, #276]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001eaa:	8899      	ldrh	r1, [r3, #4]
 8001eac:	4b44      	ldr	r3, [pc, #272]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001eae:	885a      	ldrh	r2, [r3, #2]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f000 f8cd 	bl	8002050 <set_NAND_block_status>
		}
		nand_address.Page++;
 8001eb6:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	e024      	b.n	8001f0e <NAND_operation+0xee>

	}
	else // Data mismatch - possible bad block
	{
		nand_mismatch++;
 8001ec4:	4b42      	ldr	r3, [pc, #264]	@ (8001fd0 <NAND_operation+0x1b0>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <NAND_operation+0x1b0>)
 8001ece:	801a      	strh	r2, [r3, #0]
		sprintf(buff, "nand_mismatch: %d\n\r", nand_mismatch);
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd0 <NAND_operation+0x1b0>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	493f      	ldr	r1, [pc, #252]	@ (8001fd4 <NAND_operation+0x1b4>)
 8001ed8:	483f      	ldr	r0, [pc, #252]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001eda:	f00d ffd9 	bl	800fe90 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 8001ede:	483e      	ldr	r0, [pc, #248]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001ee0:	f7fe f9d6 	bl	8000290 <strlen>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	493a      	ldr	r1, [pc, #232]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001eee:	483b      	ldr	r0, [pc, #236]	@ (8001fdc <NAND_operation+0x1bc>)
 8001ef0:	f00a fed8 	bl	800cca4 <HAL_UART_Transmit>
		memset(&buff,0,100);
 8001ef4:	2264      	movs	r2, #100	@ 0x64
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4837      	ldr	r0, [pc, #220]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001efa:	f00e f82c 	bl	800ff56 <memset>
		bad_block_check_counter = 0 ;
 8001efe:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <NAND_operation+0x1c0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	801a      	strh	r2, [r3, #0]
		handle_bad_block(); // Call function to handle the bad block scenario
 8001f04:	f000 f922 	bl	800214c <handle_bad_block>
		bad_block_check_counter = 0;
 8001f08:	4b35      	ldr	r3, [pc, #212]	@ (8001fe0 <NAND_operation+0x1c0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	801a      	strh	r2, [r3, #0]
	}

	nand_update = 1;
 8001f0e:	4b35      	ldr	r3, [pc, #212]	@ (8001fe4 <NAND_operation+0x1c4>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
	update_NAND_addr();
 8001f14:	f000 fc40 	bl	8002798 <update_NAND_addr>
	update_NAND_CyclicAddr();
 8001f18:	f000 fc50 	bl	80027bc <update_NAND_CyclicAddr>

	sprintf(buff, "nand_mismatch: %d\n\r", nand_mismatch);
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <NAND_operation+0x1b0>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	492c      	ldr	r1, [pc, #176]	@ (8001fd4 <NAND_operation+0x1b4>)
 8001f24:	482c      	ldr	r0, [pc, #176]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f26:	f00d ffb3 	bl	800fe90 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 8001f2a:	482b      	ldr	r0, [pc, #172]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f2c:	f7fe f9b0 	bl	8000290 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	4927      	ldr	r1, [pc, #156]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f3a:	4828      	ldr	r0, [pc, #160]	@ (8001fdc <NAND_operation+0x1bc>)
 8001f3c:	f00a feb2 	bl	800cca4 <HAL_UART_Transmit>
	memset(&buff,0,100);
 8001f40:	2264      	movs	r2, #100	@ 0x64
 8001f42:	2100      	movs	r1, #0
 8001f44:	4824      	ldr	r0, [pc, #144]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f46:	f00e f806 	bl	800ff56 <memset>

	sprintf(buff, "nand address: Page=%u, Plane=%u, Block=%u\n\r",
	        nand_address.Page, nand_address.Plane, nand_address.Block);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
	sprintf(buff, "nand address: Page=%u, Plane=%u, Block=%u\n\r",
 8001f4e:	461a      	mov	r2, r3
	        nand_address.Page, nand_address.Plane, nand_address.Block);
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001f52:	885b      	ldrh	r3, [r3, #2]
	sprintf(buff, "nand address: Page=%u, Plane=%u, Block=%u\n\r",
 8001f54:	4619      	mov	r1, r3
	        nand_address.Page, nand_address.Plane, nand_address.Block);
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <NAND_operation+0x1a0>)
 8001f58:	889b      	ldrh	r3, [r3, #4]
	sprintf(buff, "nand address: Page=%u, Plane=%u, Block=%u\n\r",
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4922      	ldr	r1, [pc, #136]	@ (8001fe8 <NAND_operation+0x1c8>)
 8001f60:	481d      	ldr	r0, [pc, #116]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f62:	f00d ff95 	bl	800fe90 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 8001f66:	481c      	ldr	r0, [pc, #112]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f68:	f7fe f992 	bl	8000290 <strlen>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	4918      	ldr	r1, [pc, #96]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f76:	4819      	ldr	r0, [pc, #100]	@ (8001fdc <NAND_operation+0x1bc>)
 8001f78:	f00a fe94 	bl	800cca4 <HAL_UART_Transmit>
	memset(&buff,0,100);
 8001f7c:	2264      	movs	r2, #100	@ 0x64
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4815      	ldr	r0, [pc, #84]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f82:	f00d ffe8 	bl	800ff56 <memset>

	sprintf(buff, "nand_cyclic_run: %d\n\r", nand_cyclic_run);
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <NAND_operation+0x1cc>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4918      	ldr	r1, [pc, #96]	@ (8001ff0 <NAND_operation+0x1d0>)
 8001f8e:	4812      	ldr	r0, [pc, #72]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f90:	f00d ff7e 	bl	800fe90 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 8001f94:	4810      	ldr	r0, [pc, #64]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001f96:	f7fe f97b 	bl	8000290 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	490d      	ldr	r1, [pc, #52]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001fa4:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <NAND_operation+0x1bc>)
 8001fa6:	f00a fe7d 	bl	800cca4 <HAL_UART_Transmit>
	memset(&buff,0,100);
 8001faa:	2264      	movs	r2, #100	@ 0x64
 8001fac:	2100      	movs	r1, #0
 8001fae:	480a      	ldr	r0, [pc, #40]	@ (8001fd8 <NAND_operation+0x1b8>)
 8001fb0:	f00d ffd1 	bl	800ff56 <memset>

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	42021000 	.word	0x42021000
 8001fc0:	200002e8 	.word	0x200002e8
 8001fc4:	20007b48 	.word	0x20007b48
 8001fc8:	200002f4 	.word	0x200002f4
 8001fcc:	200022f4 	.word	0x200022f4
 8001fd0:	2000551c 	.word	0x2000551c
 8001fd4:	08012370 	.word	0x08012370
 8001fd8:	200054b8 	.word	0x200054b8
 8001fdc:	20007934 	.word	0x20007934
 8001fe0:	200054b6 	.word	0x200054b6
 8001fe4:	200054b4 	.word	0x200054b4
 8001fe8:	08012384 	.word	0x08012384
 8001fec:	200054b5 	.word	0x200054b5
 8001ff0:	080123b0 	.word	0x080123b0

08001ff4 <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0

	for (uint16_t i = 0; i < 4096; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	80fb      	strh	r3, [r7, #6]
 8001ffe:	e016      	b.n	800202e <get_NAND_block_status+0x3a>
	{
		nand_address.Block = i;
 8002000:	4a0f      	ldr	r2, [pc, #60]	@ (8002040 <get_NAND_block_status+0x4c>)
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	8093      	strh	r3, [r2, #4]
		HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 8002006:	2301      	movs	r3, #1
 8002008:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <get_NAND_block_status+0x50>)
 800200a:	490d      	ldr	r1, [pc, #52]	@ (8002040 <get_NAND_block_status+0x4c>)
 800200c:	480e      	ldr	r0, [pc, #56]	@ (8002048 <get_NAND_block_status+0x54>)
 800200e:	f003 fb87 	bl	8005720 <HAL_NAND_Read_SpareArea_8b>
		nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <get_NAND_block_status+0x50>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2bff      	cmp	r3, #255	@ 0xff
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2da      	uxtb	r2, r3
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	4611      	mov	r1, r2
 8002024:	4a09      	ldr	r2, [pc, #36]	@ (800204c <get_NAND_block_status+0x58>)
 8002026:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4096; i++)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	3301      	adds	r3, #1
 800202c:	80fb      	strh	r3, [r7, #6]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002034:	d3e4      	bcc.n	8002000 <get_NAND_block_status+0xc>
//	{
//		nand_address.Block=0;
//		nand_address.Page=0;
//		nand_address.Plane=0;
//	}
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200002e8 	.word	0x200002e8
 8002044:	200042f4 	.word	0x200042f4
 8002048:	20007b48 	.word	0x20007b48
 800204c:	200044b4 	.word	0x200044b4

08002050 <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	4604      	mov	r4, r0
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4623      	mov	r3, r4
 8002060:	80fb      	strh	r3, [r7, #6]
 8002062:	4603      	mov	r3, r0
 8002064:	80bb      	strh	r3, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]
 800206a:	4613      	mov	r3, r2
 800206c:	707b      	strb	r3, [r7, #1]
	NAND_AddressTypeDef nand_address_block = {0, block, plane};
 800206e:	2300      	movs	r3, #0
 8002070:	813b      	strh	r3, [r7, #8]
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	81bb      	strh	r3, [r7, #12]
	HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 800207a:	f107 0108 	add.w	r1, r7, #8
 800207e:	2301      	movs	r3, #1
 8002080:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <set_NAND_block_status+0x68>)
 8002082:	480e      	ldr	r0, [pc, #56]	@ (80020bc <set_NAND_block_status+0x6c>)
 8002084:	f003 fb4c 	bl	8005720 <HAL_NAND_Read_SpareArea_8b>

	spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <set_NAND_block_status+0x42>
 800208e:	22ff      	movs	r2, #255	@ 0xff
 8002090:	e000      	b.n	8002094 <set_NAND_block_status+0x44>
 8002092:	2200      	movs	r2, #0
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <set_NAND_block_status+0x68>)
 8002096:	701a      	strb	r2, [r3, #0]
	nand_block_status[block] = block_state;          // Update block status array
 8002098:	88bb      	ldrh	r3, [r7, #4]
 800209a:	4909      	ldr	r1, [pc, #36]	@ (80020c0 <set_NAND_block_status+0x70>)
 800209c:	787a      	ldrb	r2, [r7, #1]
 800209e:	54ca      	strb	r2, [r1, r3]
	HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 80020a0:	f107 0108 	add.w	r1, r7, #8
 80020a4:	2301      	movs	r3, #1
 80020a6:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <set_NAND_block_status+0x68>)
 80020a8:	4804      	ldr	r0, [pc, #16]	@ (80020bc <set_NAND_block_status+0x6c>)
 80020aa:	f003 fca4 	bl	80059f6 <HAL_NAND_Write_SpareArea_8b>
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200042f4 	.word	0x200042f4
 80020bc:	20007b48 	.word	0x20007b48
 80020c0:	200044b4 	.word	0x200044b4

080020c4 <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
	while (byte)
 80020d2:	e008      	b.n	80020e6 <count_set_bits+0x22>
	{
		count += byte & 1;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
		byte >>= 1;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	085b      	lsrs	r3, r3, #1
 80020e4:	71fb      	strb	r3, [r7, #7]
	while (byte)
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f3      	bne.n	80020d4 <count_set_bits+0x10>
	}
	return count;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
	int differing_bits = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	e013      	b.n	8002138 <calculate_hamming_distance+0x3e>
	{
		differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	440b      	add	r3, r1
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4053      	eors	r3, r2
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ffcd 	bl	80020c4 <count_set_bits>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4413      	add	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	3301      	adds	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3e7      	bcc.n	8002110 <calculate_hamming_distance+0x16>
	}
	return differing_bits;
 8002140:	697b      	ldr	r3, [r7, #20]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	nand_address.Page = 0;
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <handle_bad_block+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	801a      	strh	r2, [r3, #0]
	HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8002156:	4926      	ldr	r1, [pc, #152]	@ (80021f0 <handle_bad_block+0xa4>)
 8002158:	4826      	ldr	r0, [pc, #152]	@ (80021f4 <handle_bad_block+0xa8>)
 800215a:	f003 fdbd 	bl	8005cd8 <HAL_NAND_Erase_Block>
	HAL_Delay(100);
 800215e:	2064      	movs	r0, #100	@ 0x64
 8002160:	f002 fb68 	bl	8004834 <HAL_Delay>
	if(bad_block_check_counter++ > 4094 )
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <handle_bad_block+0xac>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	b291      	uxth	r1, r2
 800216c:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <handle_bad_block+0xac>)
 800216e:	8011      	strh	r1, [r2, #0]
 8002170:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002174:	4293      	cmp	r3, r2
 8002176:	d838      	bhi.n	80021ea <handle_bad_block+0x9e>
	{
		return ;
	}
	// Attempt to rewrite data after erasing the block
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8002178:	2301      	movs	r3, #1
 800217a:	4a20      	ldr	r2, [pc, #128]	@ (80021fc <handle_bad_block+0xb0>)
 800217c:	491c      	ldr	r1, [pc, #112]	@ (80021f0 <handle_bad_block+0xa4>)
 800217e:	481d      	ldr	r0, [pc, #116]	@ (80021f4 <handle_bad_block+0xa8>)
 8002180:	f003 f976 	bl	8005470 <HAL_NAND_Write_Page_8b>
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 8002184:	2301      	movs	r3, #1
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <handle_bad_block+0xb4>)
 8002188:	4919      	ldr	r1, [pc, #100]	@ (80021f0 <handle_bad_block+0xa4>)
 800218a:	481a      	ldr	r0, [pc, #104]	@ (80021f4 <handle_bad_block+0xa8>)
 800218c:	f003 f816 	bl	80051bc <HAL_NAND_Read_Page_8b>

	// Verify written data again
	if (calculate_hamming_distance(NAND_data, read_data, 8192) < 50) // Data matches
 8002190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002194:	491a      	ldr	r1, [pc, #104]	@ (8002200 <handle_bad_block+0xb4>)
 8002196:	4819      	ldr	r0, [pc, #100]	@ (80021fc <handle_bad_block+0xb0>)
 8002198:	f7ff ffaf 	bl	80020fa <calculate_hamming_distance>
 800219c:	4603      	mov	r3, r0
 800219e:	2b31      	cmp	r3, #49	@ 0x31
 80021a0:	dc0f      	bgt.n	80021c2 <handle_bad_block+0x76>
	{

		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1);
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <handle_bad_block+0xa4>)
 80021a4:	8818      	ldrh	r0, [r3, #0]
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <handle_bad_block+0xa4>)
 80021a8:	8899      	ldrh	r1, [r3, #4]
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <handle_bad_block+0xa4>)
 80021ac:	885a      	ldrh	r2, [r3, #2]
 80021ae:	2301      	movs	r3, #1
 80021b0:	f7ff ff4e 	bl	8002050 <set_NAND_block_status>

		nand_address.Page++;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <handle_bad_block+0xa4>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <handle_bad_block+0xa4>)
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e014      	b.n	80021ec <handle_bad_block+0xa0>
	}
	else // Mark block as bad and attempt to move data
	{
		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <handle_bad_block+0xa4>)
 80021c4:	8818      	ldrh	r0, [r3, #0]
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <handle_bad_block+0xa4>)
 80021c8:	8899      	ldrh	r1, [r3, #4]
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <handle_bad_block+0xa4>)
 80021cc:	885a      	ldrh	r2, [r3, #2]
 80021ce:	2300      	movs	r3, #0
 80021d0:	f7ff ff3e 	bl	8002050 <set_NAND_block_status>
		nand_address.Page = 0;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <handle_bad_block+0xa4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
		get_Good_NAND_block();
 80021da:	f000 f813 	bl	8002204 <get_Good_NAND_block>
		handle_bad_block();
 80021de:	f7ff ffb5 	bl	800214c <handle_bad_block>
		HAL_Delay(10);
 80021e2:	200a      	movs	r0, #10
 80021e4:	f002 fb26 	bl	8004834 <HAL_Delay>
 80021e8:	e000      	b.n	80021ec <handle_bad_block+0xa0>
		return ;
 80021ea:	bf00      	nop
	}
}
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002e8 	.word	0x200002e8
 80021f4:	20007b48 	.word	0x20007b48
 80021f8:	200054b6 	.word	0x200054b6
 80021fc:	200022f4 	.word	0x200022f4
 8002200:	200002f4 	.word	0x200002f4

08002204 <get_Good_NAND_block>:

void get_Good_NAND_block()
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 8002208:	e010      	b.n	800222c <get_Good_NAND_block+0x28>
	{
		nand_address.Block++;
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <get_Good_NAND_block+0x70>)
 800220c:	889b      	ldrh	r3, [r3, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <get_Good_NAND_block+0x70>)
 8002214:	809a      	strh	r2, [r3, #4]
		// Handle block wrapping around in case of overflow
		if (nand_address.Block > 4095)
 8002216:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <get_Good_NAND_block+0x70>)
 8002218:	889b      	ldrh	r3, [r3, #4]
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800221e:	d305      	bcc.n	800222c <get_Good_NAND_block+0x28>
		{
			nand_address.Block = 0;
 8002220:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <get_Good_NAND_block+0x70>)
 8002222:	2200      	movs	r2, #0
 8002224:	809a      	strh	r2, [r3, #4]
			nand_cyclic_run = 1;
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <get_Good_NAND_block+0x74>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 800222c:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <get_Good_NAND_block+0x70>)
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002234:	4293      	cmp	r3, r2
 8002236:	d806      	bhi.n	8002246 <get_Good_NAND_block+0x42>
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <get_Good_NAND_block+0x70>)
 800223a:	889b      	ldrh	r3, [r3, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	4a0f      	ldr	r2, [pc, #60]	@ (800227c <get_Good_NAND_block+0x78>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0e1      	beq.n	800220a <get_Good_NAND_block+0x6>
		}
	}
	nand_address.Block++;
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <get_Good_NAND_block+0x70>)
 8002248:	889b      	ldrh	r3, [r3, #4]
 800224a:	3301      	adds	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <get_Good_NAND_block+0x70>)
 8002250:	809a      	strh	r2, [r3, #4]
	if (nand_address.Block > 4095)
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <get_Good_NAND_block+0x70>)
 8002254:	889b      	ldrh	r3, [r3, #4]
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225a:	d305      	bcc.n	8002268 <get_Good_NAND_block+0x64>
	{
		nand_address.Block = 0;
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <get_Good_NAND_block+0x70>)
 800225e:	2200      	movs	r2, #0
 8002260:	809a      	strh	r2, [r3, #4]
		nand_cyclic_run = 1;
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <get_Good_NAND_block+0x74>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
	}
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200002e8 	.word	0x200002e8
 8002278:	200054b5 	.word	0x200054b5
 800227c:	200044b4 	.word	0x200044b4

08002280 <SRAM_operation>:
/*
 * SRAM_operation
 * Reads time data from SRAM, updates temperature readings, and writes formatted
 * data back to SRAM. Checks for time changes and triggers NAND update if necessary.
 */
uint8_t SRAM_operation() {
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	b0d7      	sub	sp, #348	@ 0x15c
 8002286:	af34      	add	r7, sp, #208	@ 0xd0

	uint8_t time_data[8] = {0};
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	// Read current second from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data, 7);
 8002294:	4ba7      	ldr	r3, [pc, #668]	@ (8002534 <SRAM_operation+0x2b4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800229e:	2307      	movs	r3, #7
 80022a0:	48a5      	ldr	r0, [pc, #660]	@ (8002538 <SRAM_operation+0x2b8>)
 80022a2:	f00a fc11 	bl	800cac8 <HAL_SRAM_Read_8b>
	//	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)unused_sramAddr, (uint8_t *)&unused, 1);
	// Check if the second has changed
	if (time_data[0] != old_sec) {
 80022a6:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80022aa:	4ba4      	ldr	r3, [pc, #656]	@ (800253c <SRAM_operation+0x2bc>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	f000 81a9 	beq.w	8002606 <SRAM_operation+0x386>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 1); // Toggle LED for visual feedback
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022ba:	48a1      	ldr	r0, [pc, #644]	@ (8002540 <SRAM_operation+0x2c0>)
 80022bc:	f002 fe66 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f002 fab7 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022cc:	489c      	ldr	r0, [pc, #624]	@ (8002540 <SRAM_operation+0x2c0>)
 80022ce:	f002 fe5d 	bl	8004f8c <HAL_GPIO_WritePin>
#if 1
		// Format temperature and time data into the buffer
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 80022d2:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80022d6:	2100      	movs	r1, #0
 80022d8:	489a      	ldr	r0, [pc, #616]	@ (8002544 <SRAM_operation+0x2c4>)
 80022da:	f00d fe3c 	bl	800ff56 <memset>
		SRAMopt.Startbyte=SoF;
 80022de:	4b9a      	ldr	r3, [pc, #616]	@ (8002548 <SRAM_operation+0x2c8>)
 80022e0:	2240      	movs	r2, #64	@ 0x40
 80022e2:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
				"{\"TS1\": \"%.2f#%X\", \"TS2\": \"%.2f#%X\", \"TS3\": \"%.2f#%X\", \"TS4\": \"%.2f#%X\", \"TS5\": \"%.2f#%X\", "
				"\"TS6\": \"%.2f#%X\", \"TS7\": \"%.2f#%X\", \"TS8\": \"%.2f#%X\", \"TS9\": \"%.2f#%X\", \"TS10\": \"%.2f#%X\", "
				"\"TS11\": \"%.2f#%X\", \"TS12\": \"%.2f#%X\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"} \n\r",
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 80022e4:	4b99      	ldr	r3, [pc, #612]	@ (800254c <SRAM_operation+0x2cc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f93d 	bl	8000568 <__aeabi_f2d>
 80022ee:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 80022f2:	4b97      	ldr	r3, [pc, #604]	@ (8002550 <SRAM_operation+0x2d0>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022f6:	677b      	str	r3, [r7, #116]	@ 0x74
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 80022f8:	4b94      	ldr	r3, [pc, #592]	@ (800254c <SRAM_operation+0x2cc>)
 80022fa:	685b      	ldr	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f933 	bl	8000568 <__aeabi_f2d>
 8002302:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002306:	4b92      	ldr	r3, [pc, #584]	@ (8002550 <SRAM_operation+0x2d0>)
 8002308:	885b      	ldrh	r3, [r3, #2]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800230a:	673b      	str	r3, [r7, #112]	@ 0x70
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800230c:	4b8f      	ldr	r3, [pc, #572]	@ (800254c <SRAM_operation+0x2cc>)
 800230e:	689b      	ldr	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f929 	bl	8000568 <__aeabi_f2d>
 8002316:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800231a:	4b8d      	ldr	r3, [pc, #564]	@ (8002550 <SRAM_operation+0x2d0>)
 800231c:	889b      	ldrh	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800231e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002320:	4b8a      	ldr	r3, [pc, #552]	@ (800254c <SRAM_operation+0x2cc>)
 8002322:	68db      	ldr	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f91f 	bl	8000568 <__aeabi_f2d>
 800232a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800232e:	4b88      	ldr	r3, [pc, #544]	@ (8002550 <SRAM_operation+0x2d0>)
 8002330:	88db      	ldrh	r3, [r3, #6]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002332:	65bb      	str	r3, [r7, #88]	@ 0x58
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002334:	4b85      	ldr	r3, [pc, #532]	@ (800254c <SRAM_operation+0x2cc>)
 8002336:	691b      	ldr	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f915 	bl	8000568 <__aeabi_f2d>
 800233e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002342:	4b83      	ldr	r3, [pc, #524]	@ (8002550 <SRAM_operation+0x2d0>)
 8002344:	891b      	ldrh	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002346:	647b      	str	r3, [r7, #68]	@ 0x44
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002348:	4b80      	ldr	r3, [pc, #512]	@ (800254c <SRAM_operation+0x2cc>)
 800234a:	695b      	ldr	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f90b 	bl	8000568 <__aeabi_f2d>
 8002352:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002356:	4b7e      	ldr	r3, [pc, #504]	@ (8002550 <SRAM_operation+0x2d0>)
 8002358:	895b      	ldrh	r3, [r3, #10]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800235a:	643b      	str	r3, [r7, #64]	@ 0x40
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800235c:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <SRAM_operation+0x2cc>)
 800235e:	699b      	ldr	r3, [r3, #24]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f901 	bl	8000568 <__aeabi_f2d>
 8002366:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800236a:	4b79      	ldr	r3, [pc, #484]	@ (8002550 <SRAM_operation+0x2d0>)
 800236c:	899b      	ldrh	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002370:	4b76      	ldr	r3, [pc, #472]	@ (800254c <SRAM_operation+0x2cc>)
 8002372:	69db      	ldr	r3, [r3, #28]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8f7 	bl	8000568 <__aeabi_f2d>
 800237a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800237e:	4b74      	ldr	r3, [pc, #464]	@ (8002550 <SRAM_operation+0x2d0>)
 8002380:	89db      	ldrh	r3, [r3, #14]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8002384:	4b71      	ldr	r3, [pc, #452]	@ (800254c <SRAM_operation+0x2cc>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8ed 	bl	8000568 <__aeabi_f2d>
 800238e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8002392:	4b6f      	ldr	r3, [pc, #444]	@ (8002550 <SRAM_operation+0x2d0>)
 8002394:	8a1b      	ldrh	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002396:	617b      	str	r3, [r7, #20]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8002398:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <SRAM_operation+0x2cc>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8e3 	bl	8000568 <__aeabi_f2d>
 80023a2:	4682      	mov	sl, r0
 80023a4:	468b      	mov	fp, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80023a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002550 <SRAM_operation+0x2d0>)
 80023a8:	8a5b      	ldrh	r3, [r3, #18]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023aa:	613b      	str	r3, [r7, #16]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80023ac:	4b67      	ldr	r3, [pc, #412]	@ (800254c <SRAM_operation+0x2cc>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8d9 	bl	8000568 <__aeabi_f2d>
 80023b6:	4680      	mov	r8, r0
 80023b8:	4689      	mov	r9, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80023ba:	4b65      	ldr	r3, [pc, #404]	@ (8002550 <SRAM_operation+0x2d0>)
 80023bc:	8a9b      	ldrh	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023be:	60fb      	str	r3, [r7, #12]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80023c0:	4b62      	ldr	r3, [pc, #392]	@ (800254c <SRAM_operation+0x2cc>)
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8cf 	bl	8000568 <__aeabi_f2d>
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80023ce:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <SRAM_operation+0x2d0>)
 80023d0:	8adb      	ldrh	r3, [r3, #22]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023d2:	60bb      	str	r3, [r7, #8]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80023d4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023d8:	607b      	str	r3, [r7, #4]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80023da:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023de:	461e      	mov	r6, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80023e0:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023e4:	4618      	mov	r0, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80023e6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023ea:	4619      	mov	r1, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80023ec:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023f0:	461a      	mov	r2, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80023f2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80023f6:	9332      	str	r3, [sp, #200]	@ 0xc8
 80023f8:	9231      	str	r2, [sp, #196]	@ 0xc4
 80023fa:	9130      	str	r1, [sp, #192]	@ 0xc0
 80023fc:	902f      	str	r0, [sp, #188]	@ 0xbc
 80023fe:	962e      	str	r6, [sp, #184]	@ 0xb8
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	912d      	str	r1, [sp, #180]	@ 0xb4
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	912c      	str	r1, [sp, #176]	@ 0xb0
 8002408:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8002410:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	9124      	str	r1, [sp, #144]	@ 0x90
 8002418:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
 800241c:	6979      	ldr	r1, [r7, #20]
 800241e:	9120      	str	r1, [sp, #128]	@ 0x80
 8002420:	ed97 7b06 	vldr	d7, [r7, #24]
 8002424:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8002428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800242a:	911c      	str	r1, [sp, #112]	@ 0x70
 800242c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002430:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 8002434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002436:	9118      	str	r1, [sp, #96]	@ 0x60
 8002438:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800243c:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8002440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002442:	9114      	str	r1, [sp, #80]	@ 0x50
 8002444:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002448:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800244c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800244e:	9110      	str	r1, [sp, #64]	@ 0x40
 8002450:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002454:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002458:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800245a:	910c      	str	r1, [sp, #48]	@ 0x30
 800245c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002460:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002464:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002466:	9108      	str	r1, [sp, #32]
 8002468:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800246c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002470:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002472:	9104      	str	r1, [sp, #16]
 8002474:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8002478:	ed8d 7b02 	vstr	d7, [sp, #8]
 800247c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002484:	4933      	ldr	r1, [pc, #204]	@ (8002554 <SRAM_operation+0x2d4>)
 8002486:	482f      	ldr	r0, [pc, #188]	@ (8002544 <SRAM_operation+0x2c4>)
 8002488:	f00d fd02 	bl	800fe90 <siprintf>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <SRAM_operation+0x2c8>)
 8002492:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-3]=EoF;
 8002496:	4b2c      	ldr	r3, [pc, #176]	@ (8002548 <SRAM_operation+0x2c8>)
 8002498:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800249c:	3b03      	subs	r3, #3
 800249e:	4a2a      	ldr	r2, [pc, #168]	@ (8002548 <SRAM_operation+0x2c8>)
 80024a0:	4413      	add	r3, r2
 80024a2:	2224      	movs	r2, #36	@ 0x24
 80024a4:	705a      	strb	r2, [r3, #1]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt.SRAM_buffer,((SRAMopt.Idxcount)+1));
		strncat(WRITE_DATA, (uint8_t *)&SRAMopt.SRAM_buffer,((SRAMopt.Idxcount)+1));
#endif

		// Write the buffer to SRAM
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <SRAM_operation+0x2d8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <SRAM_operation+0x2c8>)
 80024ae:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a24      	ldr	r2, [pc, #144]	@ (8002548 <SRAM_operation+0x2c8>)
 80024b6:	4820      	ldr	r0, [pc, #128]	@ (8002538 <SRAM_operation+0x2b8>)
 80024b8:	f00a fb60 	bl	800cb7c <HAL_SRAM_Write_8b>
		strncat(WRITE_DATA, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 80024bc:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <SRAM_operation+0x2c8>)
 80024be:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80024c2:	3301      	adds	r3, #1
 80024c4:	461a      	mov	r2, r3
 80024c6:	4920      	ldr	r1, [pc, #128]	@ (8002548 <SRAM_operation+0x2c8>)
 80024c8:	4824      	ldr	r0, [pc, #144]	@ (800255c <SRAM_operation+0x2dc>)
 80024ca:	f00d fd4c 	bl	800ff66 <strncat>

		// Update SRAM location and size counter
		sram_location += ((SRAMopt.Idxcount)+1);
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <SRAM_operation+0x2c8>)
 80024d0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <SRAM_operation+0x2d8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	3301      	adds	r3, #1
 80024de:	4a1e      	ldr	r2, [pc, #120]	@ (8002558 <SRAM_operation+0x2d8>)
 80024e0:	6013      	str	r3, [r2, #0]
		size_counter  += ((SRAMopt.Idxcount)+1);
 80024e2:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <SRAM_operation+0x2c8>)
 80024e4:	f8b3 2162 	ldrh.w	r2, [r3, #354]	@ 0x162
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <SRAM_operation+0x2e0>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <SRAM_operation+0x2e0>)
 80024f6:	801a      	strh	r2, [r3, #0]

#if 1
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	2102      	movs	r1, #2
 80024fc:	4819      	ldr	r0, [pc, #100]	@ (8002564 <SRAM_operation+0x2e4>)
 80024fe:	f002 fd45 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	2104      	movs	r1, #4
 8002506:	4817      	ldr	r0, [pc, #92]	@ (8002564 <SRAM_operation+0x2e4>)
 8002508:	f002 fd40 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800250c:	2201      	movs	r2, #1
 800250e:	2101      	movs	r1, #1
 8002510:	4814      	ldr	r0, [pc, #80]	@ (8002564 <SRAM_operation+0x2e4>)
 8002512:	f002 fd3b 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002516:	2002      	movs	r0, #2
 8002518:	f002 f98c 	bl	8004834 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart8, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800251c:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <SRAM_operation+0x2c8>)
 800251e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8002522:	3301      	adds	r3, #1
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	4907      	ldr	r1, [pc, #28]	@ (8002548 <SRAM_operation+0x2c8>)
 800252a:	480f      	ldr	r0, [pc, #60]	@ (8002568 <SRAM_operation+0x2e8>)
 800252c:	f00a fc58 	bl	800cde0 <HAL_UART_Transmit_IT>
 8002530:	e01c      	b.n	800256c <SRAM_operation+0x2ec>
 8002532:	bf00      	nop
 8002534:	20000018 	.word	0x20000018
 8002538:	20007af0 	.word	0x20007af0
 800253c:	20005520 	.word	0x20005520
 8002540:	42021000 	.word	0x42021000
 8002544:	20007589 	.word	0x20007589
 8002548:	20007588 	.word	0x20007588
 800254c:	20000288 	.word	0x20000288
 8002550:	200002b8 	.word	0x200002b8
 8002554:	080123c8 	.word	0x080123c8
 8002558:	20000004 	.word	0x20000004
 800255c:	20005524 	.word	0x20005524
 8002560:	2000551e 	.word	0x2000551e
 8002564:	42020000 	.word	0x42020000
 8002568:	200079c8 	.word	0x200079c8
		HAL_UART_Transmit_IT(&huart10,(uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <SRAM_operation+0x3a4>)
 800256e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8002572:	3301      	adds	r3, #1
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	492a      	ldr	r1, [pc, #168]	@ (8002624 <SRAM_operation+0x3a4>)
 800257a:	482b      	ldr	r0, [pc, #172]	@ (8002628 <SRAM_operation+0x3a8>)
 800257c:	f00a fc30 	bl	800cde0 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <SRAM_operation+0x3a4>)
 8002582:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8002586:	3301      	adds	r3, #1
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4925      	ldr	r1, [pc, #148]	@ (8002624 <SRAM_operation+0x3a4>)
 800258e:	4827      	ldr	r0, [pc, #156]	@ (800262c <SRAM_operation+0x3ac>)
 8002590:	f00a fc26 	bl	800cde0 <HAL_UART_Transmit_IT>
		//		HAL_UART_Transmit_IT(&huart5, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
		HAL_Delay(100);
 8002594:	2064      	movs	r0, #100	@ 0x64
 8002596:	f002 f94d 	bl	8004834 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	2101      	movs	r1, #1
 800259e:	4824      	ldr	r0, [pc, #144]	@ (8002630 <SRAM_operation+0x3b0>)
 80025a0:	f002 fcf4 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2102      	movs	r1, #2
 80025a8:	4821      	ldr	r0, [pc, #132]	@ (8002630 <SRAM_operation+0x3b0>)
 80025aa:	f002 fcef 	bl	8004f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2104      	movs	r1, #4
 80025b2:	481f      	ldr	r0, [pc, #124]	@ (8002630 <SRAM_operation+0x3b0>)
 80025b4:	f002 fcea 	bl	8004f8c <HAL_GPIO_WritePin>
#endif

		// Check if the buffer exceeds the NAND page size
		if (size_counter + ((SRAMopt.Idxcount)+1) > NAND_PAGE_SIZE) {
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <SRAM_operation+0x3b4>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <SRAM_operation+0x3a4>)
 80025c0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80025c4:	3301      	adds	r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025cc:	dd15      	ble.n	80025fa <SRAM_operation+0x37a>
			sram_location = sram_base_location;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <SRAM_operation+0x3b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1a      	ldr	r2, [pc, #104]	@ (800263c <SRAM_operation+0x3bc>)
 80025d4:	6013      	str	r3, [r2, #0]
			memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 80025d6:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80025da:	2100      	movs	r1, #0
 80025dc:	4818      	ldr	r0, [pc, #96]	@ (8002640 <SRAM_operation+0x3c0>)
 80025de:	f00d fcba 	bl	800ff56 <memset>
			SRAMopt.Idxcount=0;
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <SRAM_operation+0x3a4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
			NAND_operation();
 80025ea:	f7ff fc19 	bl	8001e20 <NAND_operation>
			memset(WRITE_DATA,0,8192);
 80025ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f2:	2100      	movs	r1, #0
 80025f4:	4813      	ldr	r0, [pc, #76]	@ (8002644 <SRAM_operation+0x3c4>)
 80025f6:	f00d fcae 	bl	800ff56 <memset>
		}

		update_SRAM_Addr();   /*********** update the sram last address at location 0x6000000e ************/
 80025fa:	f000 f905 	bl	8002808 <update_SRAM_Addr>

		// Update old_sec to current second
		old_sec = time_data[0];
 80025fe:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <SRAM_operation+0x3c8>)
 8002604:	701a      	strb	r2, [r3, #0]
	}

	// If time setting flag is set, call time_setter
	if (time_set) {
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <SRAM_operation+0x3cc>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <SRAM_operation+0x398>
		time_set = 0;
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <SRAM_operation+0x3cc>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
		time_setter();
 8002614:	f000 f94c 	bl	80028b0 <time_setter>
	}
	return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	378c      	adds	r7, #140	@ 0x8c
 800261e:	46bd      	mov	sp, r7
 8002620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002624:	20007588 	.word	0x20007588
 8002628:	20007a5c 	.word	0x20007a5c
 800262c:	200078a0 	.word	0x200078a0
 8002630:	42020000 	.word	0x42020000
 8002634:	2000551e 	.word	0x2000551e
 8002638:	20000008 	.word	0x20000008
 800263c:	20000004 	.word	0x20000004
 8002640:	20007589 	.word	0x20007589
 8002644:	20005524 	.word	0x20005524
 8002648:	20005520 	.word	0x20005520
 800264c:	20007bae 	.word	0x20007bae

08002650 <get_NAND_data>:

/*
 * get_NAND_data
 * Reads a full page of data from SRAM into sram_data buffer and clears SRAM.
 */
void get_NAND_data(uint8_t *sram_data) {
 8002650:	b580      	push	{r7, lr}
 8002652:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	f843 0c0c 	str.w	r0, [r3, #-12]
	uint8_t CLEAN_DATA[8192] = {0};
 8002662:	f107 0310 	add.w	r3, r7, #16
 8002666:	461a      	mov	r2, r3
 8002668:	2300      	movs	r3, #0
 800266a:	f842 3c04 	str.w	r3, [r2, #-4]
 800266e:	4610      	mov	r0, r2
 8002670:	f641 73fc 	movw	r3, #8188	@ 0x1ffc
 8002674:	461a      	mov	r2, r3
 8002676:	2100      	movs	r1, #0
 8002678:	f00d fc6d 	bl	800ff56 <memset>
	uint16_t bit_difference;
	static uint16_t sram_mismatch = 0 ;
	// Read NAND page from SRAM


	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 800267c:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <get_NAND_data+0xd8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	461a      	mov	r2, r3
 8002688:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800268c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8002690:	4826      	ldr	r0, [pc, #152]	@ (800272c <get_NAND_data+0xdc>)
 8002692:	f00a fa19 	bl	800cac8 <HAL_SRAM_Read_8b>
	bit_difference = calculate_hamming_distance(sram_data, WRITE_DATA, 8192);
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800269e:	4924      	ldr	r1, [pc, #144]	@ (8002730 <get_NAND_data+0xe0>)
 80026a0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 80026a4:	f7ff fd29 	bl	80020fa <calculate_hamming_distance>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80026ae:	f102 020e 	add.w	r2, r2, #14
 80026b2:	8013      	strh	r3, [r2, #0]
	if(bit_difference > 0)
 80026b4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80026b8:	f103 030e 	add.w	r3, r3, #14
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d021      	beq.n	8002706 <get_NAND_data+0xb6>
	{
		sram_mismatch++;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <get_NAND_data+0xe4>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <get_NAND_data+0xe4>)
 80026cc:	801a      	strh	r2, [r3, #0]
		sprintf(buff_1, "sram_mismatch: %d  bit_difference: %d \n\r", sram_mismatch,bit_difference);
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <get_NAND_data+0xe4>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80026d8:	f103 030e 	add.w	r3, r3, #14
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	4916      	ldr	r1, [pc, #88]	@ (8002738 <get_NAND_data+0xe8>)
 80026e0:	4816      	ldr	r0, [pc, #88]	@ (800273c <get_NAND_data+0xec>)
 80026e2:	f00d fbd5 	bl	800fe90 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t *)buff_1, strlen(buff_1), HAL_MAX_DELAY);
 80026e6:	4815      	ldr	r0, [pc, #84]	@ (800273c <get_NAND_data+0xec>)
 80026e8:	f7fd fdd2 	bl	8000290 <strlen>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	4911      	ldr	r1, [pc, #68]	@ (800273c <get_NAND_data+0xec>)
 80026f6:	4812      	ldr	r0, [pc, #72]	@ (8002740 <get_NAND_data+0xf0>)
 80026f8:	f00a fad4 	bl	800cca4 <HAL_UART_Transmit>
		memset(&buff_1,0,100);
 80026fc:	2264      	movs	r2, #100	@ 0x64
 80026fe:	2100      	movs	r1, #0
 8002700:	480e      	ldr	r0, [pc, #56]	@ (800273c <get_NAND_data+0xec>)
 8002702:	f00d fc28 	bl	800ff56 <memset>
	}
	//HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
	// Clear the SRAM location
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <get_NAND_data+0xd8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	f107 0210 	add.w	r2, r7, #16
 8002710:	3a04      	subs	r2, #4
 8002712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <get_NAND_data+0xdc>)
 8002718:	f00a fa30 	bl	800cb7c <HAL_SRAM_Write_8b>
}
 800271c:	bf00      	nop
 800271e:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000008 	.word	0x20000008
 800272c:	20007af0 	.word	0x20007af0
 8002730:	20005524 	.word	0x20005524
 8002734:	200076ec 	.word	0x200076ec
 8002738:	080124d0 	.word	0x080124d0
 800273c:	20007524 	.word	0x20007524
 8002740:	20007934 	.word	0x20007934

08002744 <get_NAND_address>:

/*
 * get_NAND_address
 * Reads the current NAND address from SRAM.
 */
uint8_t get_NAND_address(void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_Last_Loc, (uint8_t *)&nand_address, sizeof(nand_address));
 8002748:	4b10      	ldr	r3, [pc, #64]	@ (800278c <get_NAND_address+0x48>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	2306      	movs	r3, #6
 8002750:	4a0f      	ldr	r2, [pc, #60]	@ (8002790 <get_NAND_address+0x4c>)
 8002752:	4810      	ldr	r0, [pc, #64]	@ (8002794 <get_NAND_address+0x50>)
 8002754:	f00a f9b8 	bl	800cac8 <HAL_SRAM_Read_8b>
	//	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
	if(nand_address.Page > MAX_PAGE)
 8002758:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <get_NAND_address+0x4c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	2b7f      	cmp	r3, #127	@ 0x7f
 800275e:	d902      	bls.n	8002766 <get_NAND_address+0x22>
		nand_address.Page=0;
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <get_NAND_address+0x4c>)
 8002762:	2200      	movs	r2, #0
 8002764:	801a      	strh	r2, [r3, #0]
	if(nand_address.Block > MAX_BLOCK)
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <get_NAND_address+0x4c>)
 8002768:	889b      	ldrh	r3, [r3, #4]
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276e:	d302      	bcc.n	8002776 <get_NAND_address+0x32>
		nand_address.Block=0;
 8002770:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <get_NAND_address+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	809a      	strh	r2, [r3, #4]
	if(nand_address.Plane > 2)
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <get_NAND_address+0x4c>)
 8002778:	885b      	ldrh	r3, [r3, #2]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <get_NAND_address+0x40>
		nand_address.Plane=0;
 800277e:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <get_NAND_address+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	805a      	strh	r2, [r3, #2]

	return 0;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000000c 	.word	0x2000000c
 8002790:	200002e8 	.word	0x200002e8
 8002794:	20007af0 	.word	0x20007af0

08002798 <update_NAND_addr>:

/*
 * update_NAND_addr
 * Writes the current NAND address to SRAM.
 */
void update_NAND_addr() {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	//	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_Last_Loc, (uint8_t *)&nand_address, sizeof(nand_address));
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <update_NAND_addr+0x18>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	2306      	movs	r3, #6
 80027a4:	4a03      	ldr	r2, [pc, #12]	@ (80027b4 <update_NAND_addr+0x1c>)
 80027a6:	4804      	ldr	r0, [pc, #16]	@ (80027b8 <update_NAND_addr+0x20>)
 80027a8:	f00a f9e8 	bl	800cb7c <HAL_SRAM_Write_8b>
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	200002e8 	.word	0x200002e8
 80027b8:	20007af0 	.word	0x20007af0

080027bc <update_NAND_CyclicAddr>:

/*
 * update_NAND_CyclicAddr
 * Writes the current nand_cyclic_run to SRAM.
 */
void update_NAND_CyclicAddr() {
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <update_NAND_CyclicAddr+0x18>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	2301      	movs	r3, #1
 80027c8:	4a03      	ldr	r2, [pc, #12]	@ (80027d8 <update_NAND_CyclicAddr+0x1c>)
 80027ca:	4804      	ldr	r0, [pc, #16]	@ (80027dc <update_NAND_CyclicAddr+0x20>)
 80027cc:	f00a f9d6 	bl	800cb7c <HAL_SRAM_Write_8b>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000010 	.word	0x20000010
 80027d8:	200054b5 	.word	0x200054b5
 80027dc:	20007af0 	.word	0x20007af0

080027e0 <get_NAND_CyclicAddr>:

/*
 * get_NAND_CyclicAddr
 * Reads the last nand_cyclic_run from SRAM.
 */
uint8_t get_NAND_CyclicAddr(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <get_NAND_CyclicAddr+0x1c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	2301      	movs	r3, #1
 80027ec:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <get_NAND_CyclicAddr+0x20>)
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <get_NAND_CyclicAddr+0x24>)
 80027f0:	f00a f96a 	bl	800cac8 <HAL_SRAM_Read_8b>
	return nand_cyclic_run;
 80027f4:	4b02      	ldr	r3, [pc, #8]	@ (8002800 <get_NAND_CyclicAddr+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000010 	.word	0x20000010
 8002800:	200054b5 	.word	0x200054b5
 8002804:	20007af0 	.word	0x20007af0

08002808 <update_SRAM_Addr>:

/*
 * update_SRAM_Addr
 * Writes the current size_counter to SRAM.
 */
void update_SRAM_Addr() {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <update_SRAM_Addr+0x2c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	2302      	movs	r3, #2
 8002814:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <update_SRAM_Addr+0x30>)
 8002816:	4809      	ldr	r0, [pc, #36]	@ (800283c <update_SRAM_Addr+0x34>)
 8002818:	f00a f9b0 	bl	800cb7c <HAL_SRAM_Write_8b>
	if (nand_update==1)
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <update_SRAM_Addr+0x38>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <update_SRAM_Addr+0x28>
	{
		nand_update=0;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <update_SRAM_Addr+0x38>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
		size_counter=0;
 800282a:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <update_SRAM_Addr+0x30>)
 800282c:	2200      	movs	r2, #0
 800282e:	801a      	strh	r2, [r3, #0]
	}
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000014 	.word	0x20000014
 8002838:	2000551e 	.word	0x2000551e
 800283c:	20007af0 	.word	0x20007af0
 8002840:	200054b4 	.word	0x200054b4

08002844 <get_SRAM_Addr>:

/*
 * get_SRAM_Addr
 * Reads the last size_counter from SRAM.
 */
uint32_t get_SRAM_Addr(void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
	//	_sSRAM_LastAddr SRAM_LastAddr;
	uint32_t last_update_location = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
	//	memset(&SRAM_LastAddr,0,sizeof(SRAM_LastAddr));
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800284e:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <get_SRAM_Addr+0x5c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	2302      	movs	r3, #2
 8002856:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <get_SRAM_Addr+0x60>)
 8002858:	4813      	ldr	r0, [pc, #76]	@ (80028a8 <get_SRAM_Addr+0x64>)
 800285a:	f00a f935 	bl	800cac8 <HAL_SRAM_Read_8b>

	if(size_counter==0){
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <get_SRAM_Addr+0x60>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <get_SRAM_Addr+0x28>
		return sram_base_location;
 8002866:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <get_SRAM_Addr+0x68>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e015      	b.n	8002898 <get_SRAM_Addr+0x54>
	}
	else if((size_counter+251) > NAND_PAGE_SIZE){
 800286c:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <get_SRAM_Addr+0x60>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	f641 7205 	movw	r2, #7941	@ 0x1f05
 8002874:	4293      	cmp	r3, r2
 8002876:	d907      	bls.n	8002888 <get_SRAM_Addr+0x44>
		size_counter=0;
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <get_SRAM_Addr+0x60>)
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]
		update_SRAM_Addr();
 800287e:	f7ff ffc3 	bl	8002808 <update_SRAM_Addr>
		return sram_base_location;
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <get_SRAM_Addr+0x68>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e007      	b.n	8002898 <get_SRAM_Addr+0x54>
	}
	else{
		last_update_location = (sram_base_location + size_counter);
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <get_SRAM_Addr+0x60>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <get_SRAM_Addr+0x68>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	607b      	str	r3, [r7, #4]
	}
	//	SRAM_LastAddr.sram_count= size_counter;
	//	SRAM_LastAddr.last_update_location = (sram_base_location + size_counter);

	return last_update_location;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000014 	.word	0x20000014
 80028a4:	2000551e 	.word	0x2000551e
 80028a8:	20007af0 	.word	0x20007af0
 80028ac:	20000008 	.word	0x20000008

080028b0 <time_setter>:

/*
 * time_setter
 * Sets the time in SRAM using the format "SDD-MM-YYYY HH:MM:SS E".
 */
void time_setter() {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
	uint8_t day, month, year, hours, minutes, seconds;
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	@ D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  $
	// Parse the time string if it follows the expected format
	if (time_str[0] == '@' && time_str[20] == '$' &&
 80028b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa4 <time_setter+0x1f4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b40      	cmp	r3, #64	@ 0x40
 80028bc:	f040 80ed 	bne.w	8002a9a <time_setter+0x1ea>
 80028c0:	4b78      	ldr	r3, [pc, #480]	@ (8002aa4 <time_setter+0x1f4>)
 80028c2:	7d1b      	ldrb	r3, [r3, #20]
 80028c4:	2b24      	cmp	r3, #36	@ 0x24
 80028c6:	f040 80e8 	bne.w	8002a9a <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <time_setter+0x1f4>)
 80028cc:	795b      	ldrb	r3, [r3, #5]
	if (time_str[0] == '@' && time_str[20] == '$' &&
 80028ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80028d0:	f040 80e3 	bne.w	8002a9a <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 80028d4:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <time_setter+0x1f4>)
 80028d6:	7a1b      	ldrb	r3, [r3, #8]
 80028d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80028da:	f040 80de 	bne.w	8002a9a <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 80028de:	4b71      	ldr	r3, [pc, #452]	@ (8002aa4 <time_setter+0x1f4>)
 80028e0:	7adb      	ldrb	r3, [r3, #11]
			time_str[5] == '-' && time_str[8] == '-' &&
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	f040 80d9 	bne.w	8002a9a <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 80028e8:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa4 <time_setter+0x1f4>)
 80028ea:	7b9b      	ldrb	r3, [r3, #14]
 80028ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80028ee:	f040 80d4 	bne.w	8002a9a <time_setter+0x1ea>
 80028f2:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <time_setter+0x1f4>)
 80028f4:	7c5b      	ldrb	r3, [r3, #17]
 80028f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80028f8:	f040 80cf 	bne.w	8002a9a <time_setter+0x1ea>

		// Extract date and time components from time_str
		month = (time_str[6] - '0') * 16 + (time_str[7] - '0');
 80028fc:	4b69      	ldr	r3, [pc, #420]	@ (8002aa4 <time_setter+0x1f4>)
 80028fe:	799b      	ldrb	r3, [r3, #6]
 8002900:	3b30      	subs	r3, #48	@ 0x30
 8002902:	b2db      	uxtb	r3, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b66      	ldr	r3, [pc, #408]	@ (8002aa4 <time_setter+0x1f4>)
 800290a:	79db      	ldrb	r3, [r3, #7]
 800290c:	4413      	add	r3, r2
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3b30      	subs	r3, #48	@ 0x30
 8002912:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - '0') * 16 + (time_str[4] - '0');
 8002914:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <time_setter+0x1f4>)
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	3b30      	subs	r3, #48	@ 0x30
 800291a:	b2db      	uxtb	r3, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b60      	ldr	r3, [pc, #384]	@ (8002aa4 <time_setter+0x1f4>)
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	4413      	add	r3, r2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3b30      	subs	r3, #48	@ 0x30
 800292a:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - '0') * 16 + (time_str[10] - '0');
 800292c:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa4 <time_setter+0x1f4>)
 800292e:	7a5b      	ldrb	r3, [r3, #9]
 8002930:	3b30      	subs	r3, #48	@ 0x30
 8002932:	b2db      	uxtb	r3, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	b2da      	uxtb	r2, r3
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <time_setter+0x1f4>)
 800293a:	7a9b      	ldrb	r3, [r3, #10]
 800293c:	4413      	add	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3b30      	subs	r3, #48	@ 0x30
 8002942:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - '0') * 16 + (time_str[16] - '0');
 8002944:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <time_setter+0x1f4>)
 8002946:	7bdb      	ldrb	r3, [r3, #15]
 8002948:	3b30      	subs	r3, #48	@ 0x30
 800294a:	b2db      	uxtb	r3, r3
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b54      	ldr	r3, [pc, #336]	@ (8002aa4 <time_setter+0x1f4>)
 8002952:	7c1b      	ldrb	r3, [r3, #16]
 8002954:	4413      	add	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3b30      	subs	r3, #48	@ 0x30
 800295a:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - '0') * 16 + (time_str[13] - '0');
 800295c:	4b51      	ldr	r3, [pc, #324]	@ (8002aa4 <time_setter+0x1f4>)
 800295e:	7b1b      	ldrb	r3, [r3, #12]
 8002960:	3b30      	subs	r3, #48	@ 0x30
 8002962:	b2db      	uxtb	r3, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <time_setter+0x1f4>)
 800296a:	7b5b      	ldrb	r3, [r3, #13]
 800296c:	4413      	add	r3, r2
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3b30      	subs	r3, #48	@ 0x30
 8002972:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - '0') * 16 + (time_str[19] - '0');
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <time_setter+0x1f4>)
 8002976:	7c9b      	ldrb	r3, [r3, #18]
 8002978:	3b30      	subs	r3, #48	@ 0x30
 800297a:	b2db      	uxtb	r3, r3
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b48      	ldr	r3, [pc, #288]	@ (8002aa4 <time_setter+0x1f4>)
 8002982:	7cdb      	ldrb	r3, [r3, #19]
 8002984:	4413      	add	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3b30      	subs	r3, #48	@ 0x30
 800298a:	70bb      	strb	r3, [r7, #2]

		// Write time components to SRAM
		sramAddr = 0x60000000 | 0x7FFF8;
 800298c:	4b46      	ldr	r3, [pc, #280]	@ (8002aa8 <time_setter+0x1f8>)
 800298e:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <time_setter+0x1fc>)
 8002990:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <time_setter+0x200>)
 8002994:	2280      	movs	r2, #128	@ 0x80
 8002996:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002998:	4b43      	ldr	r3, [pc, #268]	@ (8002aa8 <time_setter+0x1f8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	4b45      	ldr	r3, [pc, #276]	@ (8002ab4 <time_setter+0x204>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a43      	ldr	r2, [pc, #268]	@ (8002ab0 <time_setter+0x200>)
 80029a4:	4844      	ldr	r0, [pc, #272]	@ (8002ab8 <time_setter+0x208>)
 80029a6:	f00a f8e9 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF9;
 80029aa:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa8 <time_setter+0x1f8>)
 80029ac:	4a43      	ldr	r2, [pc, #268]	@ (8002abc <time_setter+0x20c>)
 80029ae:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 80029b0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ab0 <time_setter+0x200>)
 80029b2:	78bb      	ldrb	r3, [r7, #2]
 80029b4:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80029b6:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa8 <time_setter+0x1f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab4 <time_setter+0x204>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ab0 <time_setter+0x200>)
 80029c2:	483d      	ldr	r0, [pc, #244]	@ (8002ab8 <time_setter+0x208>)
 80029c4:	f00a f8da 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 80029c8:	4b37      	ldr	r3, [pc, #220]	@ (8002aa8 <time_setter+0x1f8>)
 80029ca:	4a3d      	ldr	r2, [pc, #244]	@ (8002ac0 <time_setter+0x210>)
 80029cc:	601a      	str	r2, [r3, #0]
		pSrcBuffer = minutes;
 80029ce:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <time_setter+0x200>)
 80029d0:	793b      	ldrb	r3, [r7, #4]
 80029d2:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80029d4:	4b34      	ldr	r3, [pc, #208]	@ (8002aa8 <time_setter+0x1f8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <time_setter+0x204>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a34      	ldr	r2, [pc, #208]	@ (8002ab0 <time_setter+0x200>)
 80029e0:	4835      	ldr	r0, [pc, #212]	@ (8002ab8 <time_setter+0x208>)
 80029e2:	f00a f8cb 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 80029e6:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <time_setter+0x1f8>)
 80029e8:	4a36      	ldr	r2, [pc, #216]	@ (8002ac4 <time_setter+0x214>)
 80029ea:	601a      	str	r2, [r3, #0]
		pSrcBuffer = hours;
 80029ec:	4a30      	ldr	r2, [pc, #192]	@ (8002ab0 <time_setter+0x200>)
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80029f2:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa8 <time_setter+0x1f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab4 <time_setter+0x204>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab0 <time_setter+0x200>)
 80029fe:	482e      	ldr	r0, [pc, #184]	@ (8002ab8 <time_setter+0x208>)
 8002a00:	f00a f8bc 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 8002a04:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <time_setter+0x1f8>)
 8002a06:	4a30      	ldr	r2, [pc, #192]	@ (8002ac8 <time_setter+0x218>)
 8002a08:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 8002a0a:	4b29      	ldr	r3, [pc, #164]	@ (8002ab0 <time_setter+0x200>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <time_setter+0x1f8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4b27      	ldr	r3, [pc, #156]	@ (8002ab4 <time_setter+0x204>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a25      	ldr	r2, [pc, #148]	@ (8002ab0 <time_setter+0x200>)
 8002a1c:	4826      	ldr	r0, [pc, #152]	@ (8002ab8 <time_setter+0x208>)
 8002a1e:	f00a f8ad 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 8002a22:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <time_setter+0x1f8>)
 8002a24:	4a29      	ldr	r2, [pc, #164]	@ (8002acc <time_setter+0x21c>)
 8002a26:	601a      	str	r2, [r3, #0]
		pSrcBuffer = day;
 8002a28:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <time_setter+0x200>)
 8002a2a:	797b      	ldrb	r3, [r7, #5]
 8002a2c:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <time_setter+0x1f8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <time_setter+0x204>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <time_setter+0x200>)
 8002a3a:	481f      	ldr	r0, [pc, #124]	@ (8002ab8 <time_setter+0x208>)
 8002a3c:	f00a f89e 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <time_setter+0x1f8>)
 8002a42:	4a23      	ldr	r2, [pc, #140]	@ (8002ad0 <time_setter+0x220>)
 8002a44:	601a      	str	r2, [r3, #0]
		pSrcBuffer = month;
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <time_setter+0x200>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002a4c:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <time_setter+0x1f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <time_setter+0x204>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <time_setter+0x200>)
 8002a58:	4817      	ldr	r0, [pc, #92]	@ (8002ab8 <time_setter+0x208>)
 8002a5a:	f00a f88f 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <time_setter+0x1f8>)
 8002a60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <time_setter+0x224>)
 8002a62:	601a      	str	r2, [r3, #0]
		pSrcBuffer = year;
 8002a64:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <time_setter+0x200>)
 8002a66:	79bb      	ldrb	r3, [r7, #6]
 8002a68:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <time_setter+0x1f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <time_setter+0x204>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <time_setter+0x200>)
 8002a76:	4810      	ldr	r0, [pc, #64]	@ (8002ab8 <time_setter+0x208>)
 8002a78:	f00a f880 	bl	800cb7c <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF8;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <time_setter+0x1f8>)
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <time_setter+0x1fc>)
 8002a80:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <time_setter+0x200>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002a88:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <time_setter+0x1f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <time_setter+0x204>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a07      	ldr	r2, [pc, #28]	@ (8002ab0 <time_setter+0x200>)
 8002a94:	4808      	ldr	r0, [pc, #32]	@ (8002ab8 <time_setter+0x208>)
 8002a96:	f00a f871 	bl	800cb7c <HAL_SRAM_Write_8b>
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20007b8c 	.word	0x20007b8c
 8002aa8:	20007b88 	.word	0x20007b88
 8002aac:	6007fff8 	.word	0x6007fff8
 8002ab0:	2000001c 	.word	0x2000001c
 8002ab4:	20000020 	.word	0x20000020
 8002ab8:	20007af0 	.word	0x20007af0
 8002abc:	6007fff9 	.word	0x6007fff9
 8002ac0:	6007fffa 	.word	0x6007fffa
 8002ac4:	6007fffb 	.word	0x6007fffb
 8002ac8:	6007fffc 	.word	0x6007fffc
 8002acc:	6007fffd 	.word	0x6007fffd
 8002ad0:	6007fffe 	.word	0x6007fffe
 8002ad4:	6007ffff 	.word	0x6007ffff

08002ad8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8002ade:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ae0:	f001 fdea 	bl	80046b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ae4:	f000 f84c 	bl	8002b80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ae8:	f000 fbce 	bl	8003288 <MX_GPIO_Init>
	MX_FMC_Init();
 8002aec:	f000 fb00 	bl	80030f0 <MX_FMC_Init>
	MX_SPI2_Init();
 8002af0:	f000 f8ca 	bl	8002c88 <MX_SPI2_Init>
	MX_SPI3_Init();
 8002af4:	f000 f91e 	bl	8002d34 <MX_SPI3_Init>
	MX_SPI5_Init();
 8002af8:	f000 f972 	bl	8002de0 <MX_SPI5_Init>
	MX_UART4_Init();
 8002afc:	f000 f9c6 	bl	8002e8c <MX_UART4_Init>
	MX_UART5_Init();
 8002b00:	f000 fa10 	bl	8002f24 <MX_UART5_Init>
	MX_UART8_Init();
 8002b04:	f000 fa5a 	bl	8002fbc <MX_UART8_Init>
	MX_USART10_UART_Init();
 8002b08:	f000 faa6 	bl	8003058 <MX_USART10_UART_Init>
	MX_ICACHE_Init();
 8002b0c:	f000 f8a8 	bl	8002c60 <MX_ICACHE_Init>
//	HAL_Delay(wait);
	/* USER CODE BEGIN 2 */

	UART_InitAllHandlers();
 8002b10:	f000 fd6a 	bl	80035e8 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 8002b14:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <main+0x90>)
 8002b16:	4a15      	ldr	r2, [pc, #84]	@ (8002b6c <main+0x94>)
 8002b18:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <main+0x98>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <main+0x90>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	2301      	movs	r3, #1
 8002b28:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <main+0x98>)
 8002b2a:	4812      	ldr	r0, [pc, #72]	@ (8002b74 <main+0x9c>)
 8002b2c:	f00a f826 	bl	800cb7c <HAL_SRAM_Write_8b>
//	HAL_Delay(wait);
	HAL_NAND_Reset(&hnand1);
 8002b30:	4811      	ldr	r0, [pc, #68]	@ (8002b78 <main+0xa0>)
 8002b32:	f002 fb09 	bl	8005148 <HAL_NAND_Reset>
//	HAL_Delay(wait);
	get_NAND_block_status();
 8002b36:	f7ff fa5d 	bl	8001ff4 <get_NAND_block_status>
//	HAL_Delay(wait);
	get_NAND_address();
 8002b3a:	f7ff fe03 	bl	8002744 <get_NAND_address>
//	HAL_Delay(wait);
	get_NAND_CyclicAddr();
 8002b3e:	f7ff fe4f 	bl	80027e0 <get_NAND_CyclicAddr>
//	HAL_Delay(wait);
	sram_location = get_SRAM_Addr();
 8002b42:	f7ff fe7f 	bl	8002844 <get_SRAM_Addr>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <main+0xa4>)
 8002b4a:	6013      	str	r3, [r2, #0]
//	HAL_Delay(wait);
	uint8_t SRAM_clean[8192] = {0};
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	3304      	adds	r3, #4
 8002b54:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f00d f9fb 	bl	800ff56 <memset>
		}
#endif

#if 1

		ADC_operation();
 8002b60:	f7fe fa0e 	bl	8000f80 <ADC_operation>
 8002b64:	e7fc      	b.n	8002b60 <main+0x88>
 8002b66:	bf00      	nop
 8002b68:	20007b88 	.word	0x20007b88
 8002b6c:	6007fff8 	.word	0x6007fff8
 8002b70:	2000001c 	.word	0x2000001c
 8002b74:	20007af0 	.word	0x20007af0
 8002b78:	20007b48 	.word	0x20007b48
 8002b7c:	20000004 	.word	0x20000004

08002b80 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09c      	sub	sp, #112	@ 0x70
 8002b84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	2250      	movs	r2, #80	@ 0x50
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f00d f9e1 	bl	800ff56 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b94:	f107 0308 	add.w	r3, r7, #8
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
 8002ba4:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c58 <SystemClock_Config+0xd8>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <SystemClock_Config+0xd8>)
 8002bac:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002bb0:	6113      	str	r3, [r2, #16]
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <SystemClock_Config+0xd8>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002bbe:	bf00      	nop
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <SystemClock_Config+0xd8>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d1f9      	bne.n	8002bc0 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002bde:	2304      	movs	r3, #4
 8002be0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002be2:	2350      	movs	r3, #80	@ 0x50
 8002be4:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002be6:	2302      	movs	r3, #2
 8002be8:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bea:	2302      	movs	r3, #2
 8002bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bfe:	f107 0320 	add.w	r3, r7, #32
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 f92a 	bl	8005e5c <HAL_RCC_OscConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002c0e:	f000 ff5e 	bl	8003ace <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c12:	231f      	movs	r3, #31
 8002c14:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c16:	2303      	movs	r3, #3
 8002c18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c2a:	f107 0308 	add.w	r3, r7, #8
 8002c2e:	2105      	movs	r1, #5
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fd4b 	bl	80066cc <HAL_RCC_ClockConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002c3c:	f000 ff47 	bl	8003ace <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <SystemClock_Config+0xdc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <SystemClock_Config+0xdc>)
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3770      	adds	r7, #112	@ 0x70
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	44020800 	.word	0x44020800
 8002c5c:	40022000 	.word	0x40022000

08002c60 <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002c64:	2000      	movs	r0, #0
 8002c66:	f002 f9f5 	bl	8005054 <HAL_ICACHE_ConfigAssociativityMode>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 8002c70:	f000 ff2d 	bl	8003ace <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 8002c74:	f002 fa0e 	bl	8005094 <HAL_ICACHE_Enable>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 8002c7e:	f000 ff26 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002c8c:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002c8e:	4a28      	ldr	r2, [pc, #160]	@ (8002d30 <MX_SPI2_Init+0xa8>)
 8002c90:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002c94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c98:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9a:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca0:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca6:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cb2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cb6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002cba:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002cc2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd0:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ce2:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ce8:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002cee:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d18:	4804      	ldr	r0, [pc, #16]	@ (8002d2c <MX_SPI2_Init+0xa4>)
 8002d1a:	f009 f86b 	bl	800bdf4 <HAL_SPI_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 8002d24:	f000 fed3 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200076f0 	.word	0x200076f0
 8002d30:	40003800 	.word	0x40003800

08002d34 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d3a:	4a28      	ldr	r2, [pc, #160]	@ (8002ddc <MX_SPI3_Init+0xa8>)
 8002d3c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d44:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d4c:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d4e:	2207      	movs	r2, #7
 8002d50:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d5e:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d66:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d6e:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d76:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d94:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002da0:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002db8:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002dc4:	4804      	ldr	r0, [pc, #16]	@ (8002dd8 <MX_SPI3_Init+0xa4>)
 8002dc6:	f009 f815 	bl	800bdf4 <HAL_SPI_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 8002dd0:	f000 fe7d 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20007780 	.word	0x20007780
 8002ddc:	40003c00 	.word	0x40003c00

08002de0 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8002de4:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002de6:	4a28      	ldr	r2, [pc, #160]	@ (8002e88 <MX_SPI5_Init+0xa8>)
 8002de8:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8002dea:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002dec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002df0:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df8:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfe:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e04:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e0a:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e12:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002e1a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e22:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e28:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e40:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e52:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002e64:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002e70:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <MX_SPI5_Init+0xa4>)
 8002e72:	f008 ffbf 	bl	800bdf4 <HAL_SPI_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 8002e7c:	f000 fe27 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20007810 	.word	0x20007810
 8002e88:	44002000 	.word	0x44002000

08002e8c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002e90:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002e92:	4a23      	ldr	r2, [pc, #140]	@ (8002f20 <MX_UART4_Init+0x94>)
 8002e94:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002e96:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002e98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e9c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb6:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ebc:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec2:	4b16      	ldr	r3, [pc, #88]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ece:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ed4:	4811      	ldr	r0, [pc, #68]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ed6:	f009 fe95 	bl	800cc04 <HAL_UART_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8002ee0:	f000 fdf5 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	480d      	ldr	r0, [pc, #52]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002ee8:	f00c f831 	bl	800ef4e <HAL_UARTEx_SetTxFifoThreshold>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 8002ef2:	f000 fdec 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4808      	ldr	r0, [pc, #32]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002efa:	f00c f866 	bl	800efca <HAL_UARTEx_SetRxFifoThreshold>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 8002f04:	f000 fde3 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f08:	4804      	ldr	r0, [pc, #16]	@ (8002f1c <MX_UART4_Init+0x90>)
 8002f0a:	f00b ffe7 	bl	800eedc <HAL_UARTEx_DisableFifoMode>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8002f14:	f000 fddb 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200078a0 	.word	0x200078a0
 8002f20:	40004c00 	.word	0x40004c00

08002f24 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8002f28:	4b22      	ldr	r3, [pc, #136]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f2a:	4a23      	ldr	r2, [pc, #140]	@ (8002fb8 <MX_UART5_Init+0x94>)
 8002f2c:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f34:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002f36:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f54:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f60:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f66:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f6c:	4811      	ldr	r0, [pc, #68]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f6e:	f009 fe49 	bl	800cc04 <HAL_UART_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8002f78:	f000 fda9 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	480d      	ldr	r0, [pc, #52]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f80:	f00b ffe5 	bl	800ef4e <HAL_UARTEx_SetTxFifoThreshold>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 8002f8a:	f000 fda0 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4808      	ldr	r0, [pc, #32]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002f92:	f00c f81a 	bl	800efca <HAL_UARTEx_SetRxFifoThreshold>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 8002f9c:	f000 fd97 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002fa0:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <MX_UART5_Init+0x90>)
 8002fa2:	f00b ff9b 	bl	800eedc <HAL_UARTEx_DisableFifoMode>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 8002fac:	f000 fd8f 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20007934 	.word	0x20007934
 8002fb8:	40005000 	.word	0x40005000

08002fbc <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8002fc0:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fc2:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <MX_UART8_Init+0x98>)
 8002fc4:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fcc:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fec:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <MX_UART8_Init+0x94>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ff2:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <MX_UART8_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <MX_UART8_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ffe:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <MX_UART8_Init+0x94>)
 8003000:	2200      	movs	r2, #0
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8003004:	4812      	ldr	r0, [pc, #72]	@ (8003050 <MX_UART8_Init+0x94>)
 8003006:	f009 fdfd 	bl	800cc04 <HAL_UART_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8003010:	f000 fd5d 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003014:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8003018:	480d      	ldr	r0, [pc, #52]	@ (8003050 <MX_UART8_Init+0x94>)
 800301a:	f00b ff98 	bl	800ef4e <HAL_UARTEx_SetTxFifoThreshold>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 8003024:	f000 fd53 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003028:	2100      	movs	r1, #0
 800302a:	4809      	ldr	r0, [pc, #36]	@ (8003050 <MX_UART8_Init+0x94>)
 800302c:	f00b ffcd 	bl	800efca <HAL_UARTEx_SetRxFifoThreshold>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 8003036:	f000 fd4a 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	@ (8003050 <MX_UART8_Init+0x94>)
 800303c:	f00b ff4e 	bl	800eedc <HAL_UARTEx_DisableFifoMode>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 8003046:	f000 fd42 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200079c8 	.word	0x200079c8
 8003054:	40007c00 	.word	0x40007c00

08003058 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 800305c:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 800305e:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <MX_USART10_UART_Init+0x94>)
 8003060:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 8003062:	4b21      	ldr	r3, [pc, #132]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 8003064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003068:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800306a:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 8003076:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 800307c:	4b1a      	ldr	r3, [pc, #104]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 800307e:	220c      	movs	r2, #12
 8003080:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003088:	4b17      	ldr	r3, [pc, #92]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 8003090:	2200      	movs	r2, #0
 8003092:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003094:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 8003096:	2200      	movs	r2, #0
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800309a:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 800309c:	2200      	movs	r2, #0
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 80030a0:	4811      	ldr	r0, [pc, #68]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 80030a2:	f009 fdaf 	bl	800cc04 <HAL_UART_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 80030ac:	f000 fd0f 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b0:	2100      	movs	r1, #0
 80030b2:	480d      	ldr	r0, [pc, #52]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 80030b4:	f00b ff4b 	bl	800ef4e <HAL_UARTEx_SetTxFifoThreshold>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 80030be:	f000 fd06 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c2:	2100      	movs	r1, #0
 80030c4:	4808      	ldr	r0, [pc, #32]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 80030c6:	f00b ff80 	bl	800efca <HAL_UARTEx_SetRxFifoThreshold>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 80030d0:	f000 fcfd 	bl	8003ace <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80030d4:	4804      	ldr	r0, [pc, #16]	@ (80030e8 <MX_USART10_UART_Init+0x90>)
 80030d6:	f00b ff01 	bl	800eedc <HAL_UARTEx_DisableFifoMode>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 80030e0:	f000 fcf5 	bl	8003ace <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20007a5c 	.word	0x20007a5c
 80030ec:	40006800 	.word	0x40006800

080030f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b090      	sub	sp, #64	@ 0x40
 80030f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 80030f6:	f107 0320 	add.w	r3, r7, #32
 80030fa:	2220      	movs	r2, #32
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f00c ff29 	bl	800ff56 <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8003112:	463b      	mov	r3, r7
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800311e:	4b55      	ldr	r3, [pc, #340]	@ (8003274 <MX_FMC_Init+0x184>)
 8003120:	4a55      	ldr	r2, [pc, #340]	@ (8003278 <MX_FMC_Init+0x188>)
 8003122:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <MX_FMC_Init+0x184>)
 8003126:	4a55      	ldr	r2, [pc, #340]	@ (800327c <MX_FMC_Init+0x18c>)
 8003128:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800312a:	4b52      	ldr	r3, [pc, #328]	@ (8003274 <MX_FMC_Init+0x184>)
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <MX_FMC_Init+0x184>)
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003136:	4b4f      	ldr	r3, [pc, #316]	@ (8003274 <MX_FMC_Init+0x184>)
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800313c:	4b4d      	ldr	r3, [pc, #308]	@ (8003274 <MX_FMC_Init+0x184>)
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003142:	4b4c      	ldr	r3, [pc, #304]	@ (8003274 <MX_FMC_Init+0x184>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003148:	4b4a      	ldr	r3, [pc, #296]	@ (8003274 <MX_FMC_Init+0x184>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800314e:	4b49      	ldr	r3, [pc, #292]	@ (8003274 <MX_FMC_Init+0x184>)
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8003154:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <MX_FMC_Init+0x184>)
 8003156:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800315c:	4b45      	ldr	r3, [pc, #276]	@ (8003274 <MX_FMC_Init+0x184>)
 800315e:	2200      	movs	r2, #0
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003162:	4b44      	ldr	r3, [pc, #272]	@ (8003274 <MX_FMC_Init+0x184>)
 8003164:	2200      	movs	r2, #0
 8003166:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003168:	4b42      	ldr	r3, [pc, #264]	@ (8003274 <MX_FMC_Init+0x184>)
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800316e:	4b41      	ldr	r3, [pc, #260]	@ (8003274 <MX_FMC_Init+0x184>)
 8003170:	2200      	movs	r2, #0
 8003172:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003174:	4b3f      	ldr	r3, [pc, #252]	@ (8003274 <MX_FMC_Init+0x184>)
 8003176:	2200      	movs	r2, #0
 8003178:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <MX_FMC_Init+0x184>)
 800317c:	2200      	movs	r2, #0
 800317e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 8003180:	4b3c      	ldr	r3, [pc, #240]	@ (8003274 <MX_FMC_Init+0x184>)
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <MX_FMC_Init+0x184>)
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 800318c:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <MX_FMC_Init+0x184>)
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 8003194:	230f      	movs	r3, #15
 8003196:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 8003198:	230f      	movs	r3, #15
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 800319c:	23ff      	movs	r3, #255	@ 0xff
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 80031a0:	2303      	movs	r3, #3
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 80031a4:	230f      	movs	r3, #15
 80031a6:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 80031a8:	2310      	movs	r3, #16
 80031aa:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 80031ac:	2311      	movs	r3, #17
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80031b0:	2300      	movs	r3, #0
 80031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
//	Timing.DataLatency = 0;          // Not applicable for asynchronous SRAM
//	Timing.AccessMode = FMC_ACCESS_MODE_A;

	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80031b4:	f107 0320 	add.w	r3, r7, #32
 80031b8:	2200      	movs	r2, #0
 80031ba:	4619      	mov	r1, r3
 80031bc:	482d      	ldr	r0, [pc, #180]	@ (8003274 <MX_FMC_Init+0x184>)
 80031be:	f009 fc33 	bl	800ca28 <HAL_SRAM_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 80031c8:	f000 fc81 	bl	8003ace <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 80031cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <MX_FMC_Init+0x190>)
 80031ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003284 <MX_FMC_Init+0x194>)
 80031d0:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 80031d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <MX_FMC_Init+0x190>)
 80031d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031d8:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80031da:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <MX_FMC_Init+0x190>)
 80031dc:	2202      	movs	r2, #2
 80031de:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80031e0:	4b27      	ldr	r3, [pc, #156]	@ (8003280 <MX_FMC_Init+0x190>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80031e6:	4b26      	ldr	r3, [pc, #152]	@ (8003280 <MX_FMC_Init+0x190>)
 80031e8:	2240      	movs	r2, #64	@ 0x40
 80031ea:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 80031ec:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <MX_FMC_Init+0x190>)
 80031ee:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80031f2:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 80031f4:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <MX_FMC_Init+0x190>)
 80031f6:	220f      	movs	r2, #15
 80031f8:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 80031fa:	4b21      	ldr	r3, [pc, #132]	@ (8003280 <MX_FMC_Init+0x190>)
 80031fc:	220f      	movs	r2, #15
 80031fe:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 8003200:	4b1f      	ldr	r3, [pc, #124]	@ (8003280 <MX_FMC_Init+0x190>)
 8003202:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 8003208:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <MX_FMC_Init+0x190>)
 800320a:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 8003210:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <MX_FMC_Init+0x190>)
 8003212:	2280      	movs	r2, #128	@ 0x80
 8003214:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 8003216:	4b1a      	ldr	r3, [pc, #104]	@ (8003280 <MX_FMC_Init+0x190>)
 8003218:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800321c:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 800321e:	4b18      	ldr	r3, [pc, #96]	@ (8003280 <MX_FMC_Init+0x190>)
 8003220:	2202      	movs	r2, #2
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 8003224:	4b16      	ldr	r3, [pc, #88]	@ (8003280 <MX_FMC_Init+0x190>)
 8003226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = ENABLE;
 800322c:	4b14      	ldr	r3, [pc, #80]	@ (8003280 <MX_FMC_Init+0x190>)
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 8003234:	2313      	movs	r3, #19
 8003236:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 8003238:	2313      	movs	r3, #19
 800323a:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 800323c:	2306      	movs	r3, #6
 800323e:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 8003240:	2303      	movs	r3, #3
 8003242:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 8003244:	2313      	movs	r3, #19
 8003246:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 8003248:	2313      	movs	r3, #19
 800324a:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 800324c:	230a      	movs	r3, #10
 800324e:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 8003250:	2309      	movs	r3, #9
 8003252:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8003254:	463a      	mov	r2, r7
 8003256:	f107 0310 	add.w	r3, r7, #16
 800325a:	4619      	mov	r1, r3
 800325c:	4808      	ldr	r0, [pc, #32]	@ (8003280 <MX_FMC_Init+0x190>)
 800325e:	f001 ff29 	bl	80050b4 <HAL_NAND_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 8003268:	f000 fc31 	bl	8003ace <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800326c:	bf00      	nop
 800326e:	3740      	adds	r7, #64	@ 0x40
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20007af0 	.word	0x20007af0
 8003278:	47000400 	.word	0x47000400
 800327c:	47000504 	.word	0x47000504
 8003280:	20007b48 	.word	0x20007b48
 8003284:	47000480 	.word	0x47000480

08003288 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	@ 0x38
 800328c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800329e:	4bc2      	ldr	r3, [pc, #776]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a4:	4ac0      	ldr	r2, [pc, #768]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032a6:	f043 0310 	orr.w	r3, r3, #16
 80032aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032ae:	4bbe      	ldr	r3, [pc, #760]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	4bba      	ldr	r3, [pc, #744]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c2:	4ab9      	ldr	r2, [pc, #740]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032cc:	4bb6      	ldr	r3, [pc, #728]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80032da:	4bb3      	ldr	r3, [pc, #716]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e0:	4ab1      	ldr	r2, [pc, #708]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032e2:	f043 0320 	orr.w	r3, r3, #32
 80032e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032ea:	4baf      	ldr	r3, [pc, #700]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80032f8:	4bab      	ldr	r3, [pc, #684]	@ (80035a8 <MX_GPIO_Init+0x320>)
 80032fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032fe:	4aaa      	ldr	r2, [pc, #680]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003308:	4ba7      	ldr	r3, [pc, #668]	@ (80035a8 <MX_GPIO_Init+0x320>)
 800330a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	4ba4      	ldr	r3, [pc, #656]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331c:	4aa2      	ldr	r2, [pc, #648]	@ (80035a8 <MX_GPIO_Init+0x320>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003326:	4ba0      	ldr	r3, [pc, #640]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003334:	4b9c      	ldr	r3, [pc, #624]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800333a:	4a9b      	ldr	r2, [pc, #620]	@ (80035a8 <MX_GPIO_Init+0x320>)
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003344:	4b98      	ldr	r3, [pc, #608]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003352:	4b95      	ldr	r3, [pc, #596]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003358:	4a93      	ldr	r2, [pc, #588]	@ (80035a8 <MX_GPIO_Init+0x320>)
 800335a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800335e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003362:	4b91      	ldr	r3, [pc, #580]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003370:	4b8d      	ldr	r3, [pc, #564]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003376:	4a8c      	ldr	r2, [pc, #560]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003380:	4b89      	ldr	r3, [pc, #548]	@ (80035a8 <MX_GPIO_Init+0x320>)
 8003382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
 8003390:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8003394:	4885      	ldr	r0, [pc, #532]	@ (80035ac <MX_GPIO_Init+0x324>)
 8003396:	f001 fdf9 	bl	8004f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 800339a:	2200      	movs	r2, #0
 800339c:	2104      	movs	r1, #4
 800339e:	4884      	ldr	r0, [pc, #528]	@ (80035b0 <MX_GPIO_Init+0x328>)
 80033a0:	f001 fdf4 	bl	8004f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 80033a4:	2200      	movs	r2, #0
 80033a6:	f241 4167 	movw	r1, #5223	@ 0x1467
 80033aa:	4882      	ldr	r0, [pc, #520]	@ (80035b4 <MX_GPIO_Init+0x32c>)
 80033ac:	f001 fdee 	bl	8004f8c <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 80033b0:	2200      	movs	r2, #0
 80033b2:	f640 0103 	movw	r1, #2051	@ 0x803
 80033b6:	4880      	ldr	r0, [pc, #512]	@ (80035b8 <MX_GPIO_Init+0x330>)
 80033b8:	f001 fde8 	bl	8004f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80033c2:	487e      	ldr	r0, [pc, #504]	@ (80035bc <MX_GPIO_Init+0x334>)
 80033c4:	f001 fde2 	bl	8004f8c <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80033c8:	2201      	movs	r2, #1
 80033ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033ce:	487a      	ldr	r0, [pc, #488]	@ (80035b8 <MX_GPIO_Init+0x330>)
 80033d0:	f001 fddc 	bl	8004f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80033da:	4879      	ldr	r0, [pc, #484]	@ (80035c0 <MX_GPIO_Init+0x338>)
 80033dc:	f001 fdd6 	bl	8004f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2110      	movs	r1, #16
 80033e4:	4877      	ldr	r0, [pc, #476]	@ (80035c4 <MX_GPIO_Init+0x33c>)
 80033e6:	f001 fdd1 	bl	8004f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 80033ea:	2370      	movs	r3, #112	@ 0x70
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	486f      	ldr	r0, [pc, #444]	@ (80035bc <MX_GPIO_Init+0x334>)
 80033fe:	f001 fc73 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 8003402:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003408:	2301      	movs	r3, #1
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003410:	2303      	movs	r3, #3
 8003412:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	4864      	ldr	r0, [pc, #400]	@ (80035ac <MX_GPIO_Init+0x324>)
 800341c:	f001 fc64 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 8003420:	2302      	movs	r3, #2
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003424:	4b68      	ldr	r3, [pc, #416]	@ (80035c8 <MX_GPIO_Init+0x340>)
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	485f      	ldr	r0, [pc, #380]	@ (80035b0 <MX_GPIO_Init+0x328>)
 8003434:	f001 fc58 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 8003438:	2304      	movs	r3, #4
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343c:	2301      	movs	r3, #1
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8003448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800344c:	4619      	mov	r1, r3
 800344e:	4858      	ldr	r0, [pc, #352]	@ (80035b0 <MX_GPIO_Init+0x328>)
 8003450:	f001 fc4a 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8003454:	2367      	movs	r3, #103	@ 0x67
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003458:	2301      	movs	r3, #1
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003468:	4619      	mov	r1, r3
 800346a:	4852      	ldr	r0, [pc, #328]	@ (80035b4 <MX_GPIO_Init+0x32c>)
 800346c:	f001 fc3c 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 8003470:	2303      	movs	r3, #3
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003484:	4619      	mov	r1, r3
 8003486:	484c      	ldr	r0, [pc, #304]	@ (80035b8 <MX_GPIO_Init+0x330>)
 8003488:	f001 fc2e 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 800348c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003492:	2301      	movs	r3, #1
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	4841      	ldr	r0, [pc, #260]	@ (80035ac <MX_GPIO_Init+0x324>)
 80034a6:	f001 fc1f 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80034aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	483e      	ldr	r0, [pc, #248]	@ (80035bc <MX_GPIO_Init+0x334>)
 80034c4:	f001 fc10 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 80034c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ce:	2301      	movs	r3, #1
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d6:	2303      	movs	r3, #3
 80034d8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034de:	4619      	mov	r1, r3
 80034e0:	4835      	ldr	r0, [pc, #212]	@ (80035b8 <MX_GPIO_Init+0x330>)
 80034e2:	f001 fc01 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 80034e6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034fc:	4619      	mov	r1, r3
 80034fe:	4830      	ldr	r0, [pc, #192]	@ (80035c0 <MX_GPIO_Init+0x338>)
 8003500:	f001 fbf2 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003508:	4b2f      	ldr	r3, [pc, #188]	@ (80035c8 <MX_GPIO_Init+0x340>)
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 8003510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003514:	4619      	mov	r1, r3
 8003516:	482a      	ldr	r0, [pc, #168]	@ (80035c0 <MX_GPIO_Init+0x338>)
 8003518:	f001 fbe6 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 800351c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003522:	2301      	movs	r3, #1
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352a:	2303      	movs	r3, #3
 800352c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003532:	4619      	mov	r1, r3
 8003534:	481f      	ldr	r0, [pc, #124]	@ (80035b4 <MX_GPIO_Init+0x32c>)
 8003536:	f001 fbd7 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 800353a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003540:	4b21      	ldr	r3, [pc, #132]	@ (80035c8 <MX_GPIO_Init+0x340>)
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8003548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354c:	4619      	mov	r1, r3
 800354e:	4819      	ldr	r0, [pc, #100]	@ (80035b4 <MX_GPIO_Init+0x32c>)
 8003550:	f001 fbca 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 8003554:	230c      	movs	r3, #12
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003558:	2300      	movs	r3, #0
 800355a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003564:	4619      	mov	r1, r3
 8003566:	4817      	ldr	r0, [pc, #92]	@ (80035c4 <MX_GPIO_Init+0x33c>)
 8003568:	f001 fbbe 	bl	8004ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 800356c:	2310      	movs	r3, #16
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003570:	2301      	movs	r3, #1
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 800357c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003580:	4619      	mov	r1, r3
 8003582:	4810      	ldr	r0, [pc, #64]	@ (80035c4 <MX_GPIO_Init+0x33c>)
 8003584:	f001 fbb0 	bl	8004ce8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2100      	movs	r1, #0
 800358c:	200c      	movs	r0, #12
 800358e:	f001 fa2d 	bl	80049ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003592:	200c      	movs	r0, #12
 8003594:	f001 fa44 	bl	8004a20 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2100      	movs	r1, #0
 800359c:	2012      	movs	r0, #18
 800359e:	f001 fa25 	bl	80049ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80035a2:	2012      	movs	r0, #18
 80035a4:	e012      	b.n	80035cc <MX_GPIO_Init+0x344>
 80035a6:	bf00      	nop
 80035a8:	44020c00 	.word	0x44020c00
 80035ac:	42021400 	.word	0x42021400
 80035b0:	42020800 	.word	0x42020800
 80035b4:	42020000 	.word	0x42020000
 80035b8:	42020400 	.word	0x42020400
 80035bc:	42021000 	.word	0x42021000
 80035c0:	42021800 	.word	0x42021800
 80035c4:	42020c00 	.word	0x42020c00
 80035c8:	10210000 	.word	0x10210000
 80035cc:	f001 fa28 	bl	8004a20 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	2016      	movs	r0, #22
 80035d6:	f001 fa09 	bl	80049ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 80035da:	2016      	movs	r0, #22
 80035dc:	f001 fa20 	bl	8004a20 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80035e0:	bf00      	nop
 80035e2:	3738      	adds	r7, #56	@ 0x38
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */


void UART_InitAllHandlers(void) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 80035ec:	2201      	movs	r2, #1
 80035ee:	490a      	ldr	r1, [pc, #40]	@ (8003618 <UART_InitAllHandlers+0x30>)
 80035f0:	480a      	ldr	r0, [pc, #40]	@ (800361c <UART_InitAllHandlers+0x34>)
 80035f2:	f009 fc99 	bl	800cf28 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 80035f6:	2201      	movs	r2, #1
 80035f8:	4909      	ldr	r1, [pc, #36]	@ (8003620 <UART_InitAllHandlers+0x38>)
 80035fa:	480a      	ldr	r0, [pc, #40]	@ (8003624 <UART_InitAllHandlers+0x3c>)
 80035fc:	f009 fc94 	bl	800cf28 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], sizeof(uart3_rx_buffer));
 8003600:	2201      	movs	r2, #1
 8003602:	4909      	ldr	r1, [pc, #36]	@ (8003628 <UART_InitAllHandlers+0x40>)
 8003604:	4809      	ldr	r0, [pc, #36]	@ (800362c <UART_InitAllHandlers+0x44>)
 8003606:	f009 fc8f 	bl	800cf28 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 800360a:	2201      	movs	r2, #1
 800360c:	4908      	ldr	r1, [pc, #32]	@ (8003630 <UART_InitAllHandlers+0x48>)
 800360e:	4809      	ldr	r0, [pc, #36]	@ (8003634 <UART_InitAllHandlers+0x4c>)
 8003610:	f009 fc8a 	bl	800cf28 <HAL_UART_Receive_IT>
}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20007ba8 	.word	0x20007ba8
 800361c:	200078a0 	.word	0x200078a0
 8003620:	20007bac 	.word	0x20007bac
 8003624:	200079c8 	.word	0x200079c8
 8003628:	20007bb0 	.word	0x20007bb0
 800362c:	20007934 	.word	0x20007934
 8003630:	20007bb4 	.word	0x20007bb4
 8003634:	20007a5c 	.word	0x20007a5c

08003638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a9b      	ldr	r2, [pc, #620]	@ (80038b4 <HAL_UART_RxCpltCallback+0x27c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d169      	bne.n	800371e <HAL_UART_RxCpltCallback+0xe6>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 800364a:	2201      	movs	r2, #1
 800364c:	499a      	ldr	r1, [pc, #616]	@ (80038b8 <HAL_UART_RxCpltCallback+0x280>)
 800364e:	489b      	ldr	r0, [pc, #620]	@ (80038bc <HAL_UART_RxCpltCallback+0x284>)
 8003650:	f009 fc6a 	bl	800cf28 <HAL_UART_Receive_IT>

		if(uart1_rx_buffer[0] == '#')//T
 8003654:	4b98      	ldr	r3, [pc, #608]	@ (80038b8 <HAL_UART_RxCpltCallback+0x280>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b23      	cmp	r3, #35	@ 0x23
 800365a:	d10e      	bne.n	800367a <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 800365c:	4b98      	ldr	r3, [pc, #608]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	b2d1      	uxtb	r1, r2
 8003664:	4a96      	ldr	r2, [pc, #600]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 8003666:	7011      	strb	r1, [r2, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b93      	ldr	r3, [pc, #588]	@ (80038b8 <HAL_UART_RxCpltCallback+0x280>)
 800366c:	7819      	ldrb	r1, [r3, #0]
 800366e:	4b95      	ldr	r3, [pc, #596]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003670:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8003672:	4b95      	ldr	r3, [pc, #596]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e018      	b.n	80036ac <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 800367a:	4b93      	ldr	r3, [pc, #588]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d114      	bne.n	80036ac <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 8003682:	4b8f      	ldr	r3, [pc, #572]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	b2d1      	uxtb	r1, r2
 800368a:	4a8d      	ldr	r2, [pc, #564]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800368c:	7011      	strb	r1, [r2, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	4b89      	ldr	r3, [pc, #548]	@ (80038b8 <HAL_UART_RxCpltCallback+0x280>)
 8003692:	7819      	ldrb	r1, [r3, #0]
 8003694:	4b8b      	ldr	r3, [pc, #556]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003696:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003698:	4b89      	ldr	r3, [pc, #548]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d905      	bls.n	80036ac <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 80036a0:	4b87      	ldr	r3, [pc, #540]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80036a6:	4b88      	ldr	r3, [pc, #544]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer[0] == '$')
 80036ac:	4b86      	ldr	r3, [pc, #536]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 81e8 	bne.w	8003a86 <HAL_UART_RxCpltCallback+0x44e>
 80036b6:	4b80      	ldr	r3, [pc, #512]	@ (80038b8 <HAL_UART_RxCpltCallback+0x280>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b24      	cmp	r3, #36	@ 0x24
 80036bc:	f040 81e3 	bne.w	8003a86 <HAL_UART_RxCpltCallback+0x44e>
		{
			if(command_str[command_str_index-1] == '$')
 80036c0:	4b7f      	ldr	r3, [pc, #508]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	4a7f      	ldr	r2, [pc, #508]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 80036c8:	5cd3      	ldrb	r3, [r2, r3]
 80036ca:	2b24      	cmp	r3, #36	@ 0x24
 80036cc:	d109      	bne.n	80036e2 <HAL_UART_RxCpltCallback+0xaa>
			{
				ATP_test  = 1;
 80036ce:	4b7f      	ldr	r3, [pc, #508]	@ (80038cc <HAL_UART_RxCpltCallback+0x294>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80036d4:	4b7a      	ldr	r3, [pc, #488]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80036da:	4b7b      	ldr	r3, [pc, #492]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
			}
		}
	}

}
 80036e0:	e1d1      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='9'))
 80036e2:	4b78      	ldr	r3, [pc, #480]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	2b32      	cmp	r3, #50	@ 0x32
 80036e8:	d10d      	bne.n	8003706 <HAL_UART_RxCpltCallback+0xce>
 80036ea:	4b76      	ldr	r3, [pc, #472]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 80036ec:	789b      	ldrb	r3, [r3, #2]
 80036ee:	2b39      	cmp	r3, #57	@ 0x39
 80036f0:	d109      	bne.n	8003706 <HAL_UART_RxCpltCallback+0xce>
				ATP_test  = 1;
 80036f2:	4b76      	ldr	r3, [pc, #472]	@ (80038cc <HAL_UART_RxCpltCallback+0x294>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80036f8:	4b71      	ldr	r3, [pc, #452]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80036fe:	4b72      	ldr	r3, [pc, #456]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e1bf      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8003706:	4b6e      	ldr	r3, [pc, #440]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800370c:	4b6e      	ldr	r3, [pc, #440]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003712:	220f      	movs	r2, #15
 8003714:	2100      	movs	r1, #0
 8003716:	486b      	ldr	r0, [pc, #428]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003718:	f00c fc1d 	bl	800ff56 <memset>
}
 800371c:	e1b3      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == UART5) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6b      	ldr	r2, [pc, #428]	@ (80038d0 <HAL_UART_RxCpltCallback+0x298>)
 8003724:	4293      	cmp	r3, r2
 8003726:	f040 80e3 	bne.w	80038f0 <HAL_UART_RxCpltCallback+0x2b8>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], 1);
 800372a:	2201      	movs	r2, #1
 800372c:	4969      	ldr	r1, [pc, #420]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 800372e:	486a      	ldr	r0, [pc, #424]	@ (80038d8 <HAL_UART_RxCpltCallback+0x2a0>)
 8003730:	f009 fbfa 	bl	800cf28 <HAL_UART_Receive_IT>
		if(uart3_rx_buffer[0] == '@' )//S
 8003734:	4b67      	ldr	r3, [pc, #412]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	d111      	bne.n	8003760 <HAL_UART_RxCpltCallback+0x128>
			time_str_length=0;
 800373c:	4b67      	ldr	r3, [pc, #412]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer[0];
 8003742:	4b66      	ldr	r3, [pc, #408]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	b2d1      	uxtb	r1, r2
 800374a:	4a64      	ldr	r2, [pc, #400]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 800374c:	7011      	strb	r1, [r2, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4b60      	ldr	r3, [pc, #384]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 8003752:	7819      	ldrb	r1, [r3, #0]
 8003754:	4b62      	ldr	r3, [pc, #392]	@ (80038e0 <HAL_UART_RxCpltCallback+0x2a8>)
 8003756:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 8003758:	4b62      	ldr	r3, [pc, #392]	@ (80038e4 <HAL_UART_RxCpltCallback+0x2ac>)
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e018      	b.n	8003792 <HAL_UART_RxCpltCallback+0x15a>
		else if(time_rcv==1)
 8003760:	4b60      	ldr	r3, [pc, #384]	@ (80038e4 <HAL_UART_RxCpltCallback+0x2ac>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d114      	bne.n	8003792 <HAL_UART_RxCpltCallback+0x15a>
			time_str[time_str_length++] = uart3_rx_buffer[0];
 8003768:	4b5c      	ldr	r3, [pc, #368]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	b2d1      	uxtb	r1, r2
 8003770:	4a5a      	ldr	r2, [pc, #360]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 8003772:	7011      	strb	r1, [r2, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b57      	ldr	r3, [pc, #348]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 8003778:	7819      	ldrb	r1, [r3, #0]
 800377a:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_UART_RxCpltCallback+0x2a8>)
 800377c:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 800377e:	4b57      	ldr	r3, [pc, #348]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b16      	cmp	r3, #22
 8003784:	d905      	bls.n	8003792 <HAL_UART_RxCpltCallback+0x15a>
				time_str_length = 0 ;
 8003786:	4b55      	ldr	r3, [pc, #340]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 800378c:	4b55      	ldr	r3, [pc, #340]	@ (80038e4 <HAL_UART_RxCpltCallback+0x2ac>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer[0] == '$' )//E
 8003792:	4b50      	ldr	r3, [pc, #320]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b24      	cmp	r3, #36	@ 0x24
 8003798:	d112      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x188>
			if(time_str_length == 21)
 800379a:	4b50      	ldr	r3, [pc, #320]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b15      	cmp	r3, #21
 80037a0:	d103      	bne.n	80037aa <HAL_UART_RxCpltCallback+0x172>
				time_set = 1;
 80037a2:	4b51      	ldr	r3, [pc, #324]	@ (80038e8 <HAL_UART_RxCpltCallback+0x2b0>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e00a      	b.n	80037c0 <HAL_UART_RxCpltCallback+0x188>
				time_rcv = 0 ;
 80037aa:	4b4e      	ldr	r3, [pc, #312]	@ (80038e4 <HAL_UART_RxCpltCallback+0x2ac>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 80037b0:	4b4a      	ldr	r3, [pc, #296]	@ (80038dc <HAL_UART_RxCpltCallback+0x2a4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 80037b6:	2219      	movs	r2, #25
 80037b8:	2100      	movs	r1, #0
 80037ba:	4849      	ldr	r0, [pc, #292]	@ (80038e0 <HAL_UART_RxCpltCallback+0x2a8>)
 80037bc:	f00c fbcb 	bl	800ff56 <memset>
		if(uart3_rx_buffer[0] == '#')//T
 80037c0:	4b44      	ldr	r3, [pc, #272]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b23      	cmp	r3, #35	@ 0x23
 80037c6:	d10e      	bne.n	80037e6 <HAL_UART_RxCpltCallback+0x1ae>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 80037c8:	4b3d      	ldr	r3, [pc, #244]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	b2d1      	uxtb	r1, r2
 80037d0:	4a3b      	ldr	r2, [pc, #236]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80037d2:	7011      	strb	r1, [r2, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b3f      	ldr	r3, [pc, #252]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 80037d8:	7819      	ldrb	r1, [r3, #0]
 80037da:	4b3a      	ldr	r3, [pc, #232]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 80037dc:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80037de:	4b3a      	ldr	r3, [pc, #232]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e018      	b.n	8003818 <HAL_UART_RxCpltCallback+0x1e0>
		else if(command_rcv==1)
 80037e6:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d114      	bne.n	8003818 <HAL_UART_RxCpltCallback+0x1e0>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 80037ee:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	b2d1      	uxtb	r1, r2
 80037f6:	4a32      	ldr	r2, [pc, #200]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 80037f8:	7011      	strb	r1, [r2, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b35      	ldr	r3, [pc, #212]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 80037fe:	7819      	ldrb	r1, [r3, #0]
 8003800:	4b30      	ldr	r3, [pc, #192]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003802:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003804:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d905      	bls.n	8003818 <HAL_UART_RxCpltCallback+0x1e0>
				command_str_index = 0 ;
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003812:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer[0] == '$')
 8003818:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	f040 8132 	bne.w	8003a86 <HAL_UART_RxCpltCallback+0x44e>
 8003822:	4b2c      	ldr	r3, [pc, #176]	@ (80038d4 <HAL_UART_RxCpltCallback+0x29c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b24      	cmp	r3, #36	@ 0x24
 8003828:	f040 812d 	bne.w	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			if(command_str_index < 4)
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d812      	bhi.n	800385a <HAL_UART_RxCpltCallback+0x222>
				memcpy(nand_stop_read_CMD,command_str,command_str_index); // #*$
 8003834:	4b22      	ldr	r3, [pc, #136]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4922      	ldr	r1, [pc, #136]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 800383c:	482b      	ldr	r0, [pc, #172]	@ (80038ec <HAL_UART_RxCpltCallback+0x2b4>)
 800383e:	f00c fc2a 	bl	8010096 <memcpy>
				memset(command_str,0,sizeof(command_str));
 8003842:	220f      	movs	r2, #15
 8003844:	2100      	movs	r1, #0
 8003846:	481f      	ldr	r0, [pc, #124]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003848:	f00c fb85 	bl	800ff56 <memset>
				command_str_index = 0 ;
 800384c:	4b1c      	ldr	r3, [pc, #112]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003852:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
}
 8003858:	e115      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			else if(command_str_index == 4)
 800385a:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d109      	bne.n	8003876 <HAL_UART_RxCpltCallback+0x23e>
				ATP_test  = 1;
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <HAL_UART_RxCpltCallback+0x294>)
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003868:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800386e:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
}
 8003874:	e107      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 8003876:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b32      	cmp	r3, #50	@ 0x32
 800387c:	d10d      	bne.n	800389a <HAL_UART_RxCpltCallback+0x262>
 800387e:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 8003880:	789b      	ldrb	r3, [r3, #2]
 8003882:	2b36      	cmp	r3, #54	@ 0x36
 8003884:	d109      	bne.n	800389a <HAL_UART_RxCpltCallback+0x262>
				ATP_test  = 1;
 8003886:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_UART_RxCpltCallback+0x294>)
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 800388c:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003892:	4b0d      	ldr	r3, [pc, #52]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e0f5      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 800389a:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <HAL_UART_RxCpltCallback+0x288>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_UART_RxCpltCallback+0x290>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80038a6:	220f      	movs	r2, #15
 80038a8:	2100      	movs	r1, #0
 80038aa:	4806      	ldr	r0, [pc, #24]	@ (80038c4 <HAL_UART_RxCpltCallback+0x28c>)
 80038ac:	f00c fb53 	bl	800ff56 <memset>
}
 80038b0:	e0e9      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
 80038b2:	bf00      	nop
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	20007ba8 	.word	0x20007ba8
 80038bc:	200078a0 	.word	0x200078a0
 80038c0:	200002e4 	.word	0x200002e4
 80038c4:	200002d0 	.word	0x200002d0
 80038c8:	20007ba6 	.word	0x20007ba6
 80038cc:	200002e5 	.word	0x200002e5
 80038d0:	40005000 	.word	0x40005000
 80038d4:	20007bb0 	.word	0x20007bb0
 80038d8:	20007934 	.word	0x20007934
 80038dc:	20007ba5 	.word	0x20007ba5
 80038e0:	20007b8c 	.word	0x20007b8c
 80038e4:	20007bad 	.word	0x20007bad
 80038e8:	20007bae 	.word	0x20007bae
 80038ec:	200002f0 	.word	0x200002f0
	else if (huart->Instance == UART8) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a66      	ldr	r2, [pc, #408]	@ (8003a90 <HAL_UART_RxCpltCallback+0x458>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d158      	bne.n	80039ac <HAL_UART_RxCpltCallback+0x374>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 80038fa:	2201      	movs	r2, #1
 80038fc:	4965      	ldr	r1, [pc, #404]	@ (8003a94 <HAL_UART_RxCpltCallback+0x45c>)
 80038fe:	4866      	ldr	r0, [pc, #408]	@ (8003a98 <HAL_UART_RxCpltCallback+0x460>)
 8003900:	f009 fb12 	bl	800cf28 <HAL_UART_Receive_IT>
		if(uart2_rx_buffer[0] == '#')//T
 8003904:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <HAL_UART_RxCpltCallback+0x45c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b23      	cmp	r3, #35	@ 0x23
 800390a:	d10e      	bne.n	800392a <HAL_UART_RxCpltCallback+0x2f2>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 800390c:	4b63      	ldr	r3, [pc, #396]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	b2d1      	uxtb	r1, r2
 8003914:	4a61      	ldr	r2, [pc, #388]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003916:	7011      	strb	r1, [r2, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4b5e      	ldr	r3, [pc, #376]	@ (8003a94 <HAL_UART_RxCpltCallback+0x45c>)
 800391c:	7819      	ldrb	r1, [r3, #0]
 800391e:	4b60      	ldr	r3, [pc, #384]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003920:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8003922:	4b60      	ldr	r3, [pc, #384]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e018      	b.n	800395c <HAL_UART_RxCpltCallback+0x324>
		else if(command_rcv==1)
 800392a:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d114      	bne.n	800395c <HAL_UART_RxCpltCallback+0x324>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 8003932:	4b5a      	ldr	r3, [pc, #360]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	b2d1      	uxtb	r1, r2
 800393a:	4a58      	ldr	r2, [pc, #352]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 800393c:	7011      	strb	r1, [r2, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <HAL_UART_RxCpltCallback+0x45c>)
 8003942:	7819      	ldrb	r1, [r3, #0]
 8003944:	4b56      	ldr	r3, [pc, #344]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003946:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003948:	4b54      	ldr	r3, [pc, #336]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b0f      	cmp	r3, #15
 800394e:	d905      	bls.n	800395c <HAL_UART_RxCpltCallback+0x324>
				command_str_index = 0 ;
 8003950:	4b52      	ldr	r3, [pc, #328]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003956:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer[0] == '$')
 800395c:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 8090 	bne.w	8003a86 <HAL_UART_RxCpltCallback+0x44e>
 8003966:	4b4b      	ldr	r3, [pc, #300]	@ (8003a94 <HAL_UART_RxCpltCallback+0x45c>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b24      	cmp	r3, #36	@ 0x24
 800396c:	f040 808b 	bne.w	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 8003970:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	2b32      	cmp	r3, #50	@ 0x32
 8003976:	d10d      	bne.n	8003994 <HAL_UART_RxCpltCallback+0x35c>
 8003978:	4b49      	ldr	r3, [pc, #292]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	2b37      	cmp	r3, #55	@ 0x37
 800397e:	d109      	bne.n	8003994 <HAL_UART_RxCpltCallback+0x35c>
				ATP_test  = 1;
 8003980:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <HAL_UART_RxCpltCallback+0x470>)
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003986:	4b45      	ldr	r3, [pc, #276]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800398c:	4b45      	ldr	r3, [pc, #276]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e078      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800399a:	4b42      	ldr	r3, [pc, #264]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80039a0:	220f      	movs	r2, #15
 80039a2:	2100      	movs	r1, #0
 80039a4:	483e      	ldr	r0, [pc, #248]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 80039a6:	f00c fad6 	bl	800ff56 <memset>
}
 80039aa:	e06c      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == USART10) {
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3e      	ldr	r2, [pc, #248]	@ (8003aac <HAL_UART_RxCpltCallback+0x474>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d167      	bne.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 80039b6:	2201      	movs	r2, #1
 80039b8:	493d      	ldr	r1, [pc, #244]	@ (8003ab0 <HAL_UART_RxCpltCallback+0x478>)
 80039ba:	483e      	ldr	r0, [pc, #248]	@ (8003ab4 <HAL_UART_RxCpltCallback+0x47c>)
 80039bc:	f009 fab4 	bl	800cf28 <HAL_UART_Receive_IT>
		if(uart4_rx_buffer[0] == '#')//T
 80039c0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_UART_RxCpltCallback+0x478>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b23      	cmp	r3, #35	@ 0x23
 80039c6:	d10e      	bne.n	80039e6 <HAL_UART_RxCpltCallback+0x3ae>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 80039c8:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	b2d1      	uxtb	r1, r2
 80039d0:	4a32      	ldr	r2, [pc, #200]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 80039d2:	7011      	strb	r1, [r2, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <HAL_UART_RxCpltCallback+0x478>)
 80039d8:	7819      	ldrb	r1, [r3, #0]
 80039da:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 80039dc:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80039de:	4b31      	ldr	r3, [pc, #196]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e018      	b.n	8003a18 <HAL_UART_RxCpltCallback+0x3e0>
		else if(command_rcv==1)
 80039e6:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d114      	bne.n	8003a18 <HAL_UART_RxCpltCallback+0x3e0>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 80039ee:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	b2d1      	uxtb	r1, r2
 80039f6:	4a29      	ldr	r2, [pc, #164]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 80039f8:	7011      	strb	r1, [r2, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab0 <HAL_UART_RxCpltCallback+0x478>)
 80039fe:	7819      	ldrb	r1, [r3, #0]
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003a02:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b0f      	cmp	r3, #15
 8003a0a:	d905      	bls.n	8003a18 <HAL_UART_RxCpltCallback+0x3e0>
				command_str_index = 0 ;
 8003a0c:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003a12:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer[0] == '$')
 8003a18:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d132      	bne.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
 8003a20:	4b23      	ldr	r3, [pc, #140]	@ (8003ab0 <HAL_UART_RxCpltCallback+0x478>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b24      	cmp	r3, #36	@ 0x24
 8003a26:	d12e      	bne.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			if(command_str[command_str_index-1] == '$')
 8003a28:	4b1c      	ldr	r3, [pc, #112]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	2b24      	cmp	r3, #36	@ 0x24
 8003a34:	d109      	bne.n	8003a4a <HAL_UART_RxCpltCallback+0x412>
				ATP_test  = 1;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa8 <HAL_UART_RxCpltCallback+0x470>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003a3c:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003a42:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
}
 8003a48:	e01d      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b32      	cmp	r3, #50	@ 0x32
 8003a50:	d10d      	bne.n	8003a6e <HAL_UART_RxCpltCallback+0x436>
 8003a52:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003a54:	789b      	ldrb	r3, [r3, #2]
 8003a56:	2b38      	cmp	r3, #56	@ 0x38
 8003a58:	d109      	bne.n	8003a6e <HAL_UART_RxCpltCallback+0x436>
				ATP_test  = 1;
 8003a5a:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <HAL_UART_RxCpltCallback+0x470>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003a60:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e00b      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_UART_RxCpltCallback+0x464>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_UART_RxCpltCallback+0x46c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4808      	ldr	r0, [pc, #32]	@ (8003aa0 <HAL_UART_RxCpltCallback+0x468>)
 8003a80:	f00c fa69 	bl	800ff56 <memset>
}
 8003a84:	e7ff      	b.n	8003a86 <HAL_UART_RxCpltCallback+0x44e>
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40007c00 	.word	0x40007c00
 8003a94:	20007bac 	.word	0x20007bac
 8003a98:	200079c8 	.word	0x200079c8
 8003a9c:	200002e4 	.word	0x200002e4
 8003aa0:	200002d0 	.word	0x200002d0
 8003aa4:	20007ba6 	.word	0x20007ba6
 8003aa8:	200002e5 	.word	0x200002e5
 8003aac:	40006800 	.word	0x40006800
 8003ab0:	20007bb4 	.word	0x20007bb4
 8003ab4:	20007a5c 	.word	0x20007a5c

08003ab8 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad2:	b672      	cpsid	i
}
 8003ad4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <Error_Handler+0x8>

08003ada <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0d0      	sub	sp, #320	@ 0x140
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003af2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003af6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b0c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003b10:	4618      	mov	r0, r3
 8003b12:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003b16:	461a      	mov	r2, r3
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f00c fa1c 	bl	800ff56 <memset>
  if(hspi->Instance==SPI2)
 8003b1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a9c      	ldr	r2, [pc, #624]	@ (8003d9c <HAL_SPI_MspInit+0x2b4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d15f      	bne.n	8003bf0 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003b30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b34:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8003b44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b52:	f107 0320 	add.w	r3, r7, #32
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 f8fa 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8003b62:	f7ff ffb4 	bl	8003ace <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b66:	4b8e      	ldr	r3, [pc, #568]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b6c:	4a8c      	ldr	r2, [pc, #560]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003b76:	4b8a      	ldr	r3, [pc, #552]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b7c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003b80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b8e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003b92:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b94:	4b82      	ldr	r3, [pc, #520]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b9a:	4a81      	ldr	r2, [pc, #516]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003baa:	f003 0202 	and.w	r2, r3, #2
 8003bae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003bb2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003bbc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003bc0:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 8003bc2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003bc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bdc:	2305      	movs	r3, #5
 8003bde:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003be6:	4619      	mov	r1, r3
 8003be8:	486e      	ldr	r0, [pc, #440]	@ (8003da4 <HAL_SPI_MspInit+0x2bc>)
 8003bea:	f001 f87d 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003bee:	e0d0      	b.n	8003d92 <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 8003bf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003bf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8003da8 <HAL_SPI_MspInit+0x2c0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d15f      	bne.n	8003cc2 <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003c02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c06:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003c0a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8003c16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c24:	f107 0320 	add.w	r3, r7, #32
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 f891 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8003c34:	f7ff ff4b 	bl	8003ace <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c38:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c3e:	4a58      	ldr	r2, [pc, #352]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c44:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003c48:	4b55      	ldr	r3, [pc, #340]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c4e:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8003c52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c64:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c66:	4b4e      	ldr	r3, [pc, #312]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c76:	4b4a      	ldr	r3, [pc, #296]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c7c:	f003 0204 	and.w	r2, r3, #4
 8003c80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c84:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c92:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 8003c94:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003c98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003cae:	2306      	movs	r3, #6
 8003cb0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003cb8:	4619      	mov	r1, r3
 8003cba:	483c      	ldr	r0, [pc, #240]	@ (8003dac <HAL_SPI_MspInit+0x2c4>)
 8003cbc:	f001 f814 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003cc0:	e067      	b.n	8003d92 <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 8003cc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003cc6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a38      	ldr	r2, [pc, #224]	@ (8003db0 <HAL_SPI_MspInit+0x2c8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d15e      	bne.n	8003d92 <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003cd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003cd8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003cdc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 8003ce8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003cec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cf6:	f107 0320 	add.w	r3, r7, #32
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 f828 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8003d06:	f7ff fee2 	bl	8003ace <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d0a:	4b25      	ldr	r3, [pc, #148]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003d0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d10:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003d12:	f043 0320 	orr.w	r3, r3, #32
 8003d16:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003d1a:	4b21      	ldr	r3, [pc, #132]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003d1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d20:	f003 0220 	and.w	r2, r3, #32
 8003d24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d36:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d38:	4b19      	ldr	r3, [pc, #100]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003d40:	f043 0320 	orr.w	r3, r3, #32
 8003d44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d48:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <HAL_SPI_MspInit+0x2b8>)
 8003d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d4e:	f003 0220 	and.w	r2, r3, #32
 8003d52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d60:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d64:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 8003d66:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003d6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d80:	2305      	movs	r3, #5
 8003d82:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d86:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4809      	ldr	r0, [pc, #36]	@ (8003db4 <HAL_SPI_MspInit+0x2cc>)
 8003d8e:	f000 ffab 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003d92:	bf00      	nop
 8003d94:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40003800 	.word	0x40003800
 8003da0:	44020c00 	.word	0x44020c00
 8003da4:	42020400 	.word	0x42020400
 8003da8:	40003c00 	.word	0x40003c00
 8003dac:	42020800 	.word	0x42020800
 8003db0:	44002000 	.word	0x44002000
 8003db4:	42021400 	.word	0x42021400

08003db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b0d2      	sub	sp, #328	@ 0x148
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003dc2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003dc6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ddc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003de0:	4618      	mov	r0, r3
 8003de2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003de6:	461a      	mov	r2, r3
 8003de8:	2100      	movs	r1, #0
 8003dea:	f00c f8b4 	bl	800ff56 <memset>
  if(huart->Instance==UART4)
 8003dee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003df2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4aa4      	ldr	r2, [pc, #656]	@ (800408c <HAL_UART_MspInit+0x2d4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d166      	bne.n	8003ece <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003e00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e04:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003e08:	f04f 0208 	mov.w	r2, #8
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003e14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e18:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e24:	4618      	mov	r0, r3
 8003e26:	f002 ff93 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8003e30:	f7ff fe4d 	bl	8003ace <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e34:	4b96      	ldr	r3, [pc, #600]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e3a:	4a95      	ldr	r2, [pc, #596]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003e3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e40:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003e44:	4b92      	ldr	r3, [pc, #584]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e4a:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8003e4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e52:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e60:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	4b8b      	ldr	r3, [pc, #556]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e68:	4a89      	ldr	r2, [pc, #548]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e72:	4b87      	ldr	r3, [pc, #540]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e78:	f003 0202 	and.w	r2, r3, #2
 8003e7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e80:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e8e:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 8003e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e94:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4877      	ldr	r0, [pc, #476]	@ (8004094 <HAL_UART_MspInit+0x2dc>)
 8003eb8:	f000 ff16 	bl	8004ce8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	203d      	movs	r0, #61	@ 0x3d
 8003ec2:	f000 fd93 	bl	80049ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003ec6:	203d      	movs	r0, #61	@ 0x3d
 8003ec8:	f000 fdaa 	bl	8004a20 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE END USART10_MspInit 1 */
  }

}
 8003ecc:	e159      	b.n	8004182 <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 8003ece:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ed2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6f      	ldr	r2, [pc, #444]	@ (8004098 <HAL_UART_MspInit+0x2e0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d165      	bne.n	8003fac <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003ee0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ee4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003ee8:	f04f 0210 	mov.w	r2, #16
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003ef4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ef8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 ff23 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003f10:	f7ff fddd 	bl	8003ace <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f14:	4b5e      	ldr	r3, [pc, #376]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f1a:	4a5d      	ldr	r2, [pc, #372]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003f1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f20:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f24:	4b5a      	ldr	r3, [pc, #360]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f2a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003f2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f40:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b53      	ldr	r3, [pc, #332]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f48:	4a51      	ldr	r2, [pc, #324]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f52:	4b4f      	ldr	r3, [pc, #316]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f58:	f003 0202 	and.w	r2, r3, #2
 8003f5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f60:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f6e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 8003f70:	2360      	movs	r3, #96	@ 0x60
 8003f72:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003f88:	230e      	movs	r3, #14
 8003f8a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003f92:	4619      	mov	r1, r3
 8003f94:	483f      	ldr	r0, [pc, #252]	@ (8004094 <HAL_UART_MspInit+0x2dc>)
 8003f96:	f000 fea7 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	203e      	movs	r0, #62	@ 0x3e
 8003fa0:	f000 fd24 	bl	80049ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003fa4:	203e      	movs	r0, #62	@ 0x3e
 8003fa6:	f000 fd3b 	bl	8004a20 <HAL_NVIC_EnableIRQ>
}
 8003faa:	e0ea      	b.n	8004182 <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 8003fac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fb0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a38      	ldr	r2, [pc, #224]	@ (800409c <HAL_UART_MspInit+0x2e4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d172      	bne.n	80040a4 <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003fbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fc2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003fc6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8003fd2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003fda:	2200      	movs	r2, #0
 8003fdc:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 feb4 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8003fee:	f7ff fd6e 	bl	8003ace <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003ff2:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ff8:	4a25      	ldr	r2, [pc, #148]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8003ffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ffe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004002:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8004004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004008:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800400c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004010:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800401a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800401e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004020:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8004022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004026:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004030:	4b17      	ldr	r3, [pc, #92]	@ (8004090 <HAL_UART_MspInit+0x2d8>)
 8004032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004036:	f003 0210 	and.w	r2, r3, #16
 800403a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800403e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004048:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800404c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 800404e:	2303      	movs	r3, #3
 8004050:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004066:	2308      	movs	r3, #8
 8004068:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800406c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004070:	4619      	mov	r1, r3
 8004072:	480b      	ldr	r0, [pc, #44]	@ (80040a0 <HAL_UART_MspInit+0x2e8>)
 8004074:	f000 fe38 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004078:	2200      	movs	r2, #0
 800407a:	2100      	movs	r1, #0
 800407c:	2063      	movs	r0, #99	@ 0x63
 800407e:	f000 fcb5 	bl	80049ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004082:	2063      	movs	r0, #99	@ 0x63
 8004084:	f000 fccc 	bl	8004a20 <HAL_NVIC_EnableIRQ>
}
 8004088:	e07b      	b.n	8004182 <HAL_UART_MspInit+0x3ca>
 800408a:	bf00      	nop
 800408c:	40004c00 	.word	0x40004c00
 8004090:	44020c00 	.word	0x44020c00
 8004094:	42020400 	.word	0x42020400
 8004098:	40005000 	.word	0x40005000
 800409c:	40007c00 	.word	0x40007c00
 80040a0:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 80040a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a36      	ldr	r2, [pc, #216]	@ (800418c <HAL_UART_MspInit+0x3d4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d165      	bne.n	8004182 <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80040b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040ba:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80040be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 80040ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040dc:	4618      	mov	r0, r3
 80040de:	f002 fe37 	bl	8006d50 <HAL_RCCEx_PeriphCLKConfig>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_UART_MspInit+0x334>
      Error_Handler();
 80040e8:	f7ff fcf1 	bl	8003ace <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 80040ec:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <HAL_UART_MspInit+0x3d8>)
 80040ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f2:	4a27      	ldr	r2, [pc, #156]	@ (8004190 <HAL_UART_MspInit+0x3d8>)
 80040f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040f8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80040fc:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_UART_MspInit+0x3d8>)
 80040fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004102:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8004106:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800410a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004114:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004118:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800411a:	4b1d      	ldr	r3, [pc, #116]	@ (8004190 <HAL_UART_MspInit+0x3d8>)
 800411c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004120:	4a1b      	ldr	r2, [pc, #108]	@ (8004190 <HAL_UART_MspInit+0x3d8>)
 8004122:	f043 0310 	orr.w	r3, r3, #16
 8004126:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800412a:	4b19      	ldr	r3, [pc, #100]	@ (8004190 <HAL_UART_MspInit+0x3d8>)
 800412c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004130:	f003 0210 	and.w	r2, r3, #16
 8004134:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004138:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004142:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004146:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8004148:	230c      	movs	r3, #12
 800414a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8004160:	2307      	movs	r3, #7
 8004162:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004166:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800416a:	4619      	mov	r1, r3
 800416c:	4809      	ldr	r0, [pc, #36]	@ (8004194 <HAL_UART_MspInit+0x3dc>)
 800416e:	f000 fdbb 	bl	8004ce8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	2056      	movs	r0, #86	@ 0x56
 8004178:	f000 fc38 	bl	80049ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 800417c:	2056      	movs	r0, #86	@ 0x56
 800417e:	f000 fc4f 	bl	8004a20 <HAL_NVIC_EnableIRQ>
}
 8004182:	bf00      	nop
 8004184:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40006800 	.word	0x40006800
 8004190:	44020c00 	.word	0x44020c00
 8004194:	42021000 	.word	0x42021000

08004198 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80041ac:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_FMC_MspInit+0x124>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d17f      	bne.n	80042b4 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 80041b4:	4b41      	ldr	r3, [pc, #260]	@ (80042bc <HAL_FMC_MspInit+0x124>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80041ba:	4b41      	ldr	r3, [pc, #260]	@ (80042c0 <HAL_FMC_MspInit+0x128>)
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c0:	4a3f      	ldr	r2, [pc, #252]	@ (80042c0 <HAL_FMC_MspInit+0x128>)
 80041c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80041ca:	4b3d      	ldr	r3, [pc, #244]	@ (80042c0 <HAL_FMC_MspInit+0x128>)
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80041d8:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 80041dc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041de:	2302      	movs	r3, #2
 80041e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e6:	2303      	movs	r3, #3
 80041e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041ea:	230c      	movs	r3, #12
 80041ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4834      	ldr	r0, [pc, #208]	@ (80042c4 <HAL_FMC_MspInit+0x12c>)
 80041f4:	f000 fd78 	bl	8004ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004204:	2303      	movs	r3, #3
 8004206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8004208:	230d      	movs	r3, #13
 800420a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	4619      	mov	r1, r3
 8004210:	482d      	ldr	r0, [pc, #180]	@ (80042c8 <HAL_FMC_MspInit+0x130>)
 8004212:	f000 fd69 	bl	8004ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004216:	233f      	movs	r3, #63	@ 0x3f
 8004218:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004222:	2303      	movs	r3, #3
 8004224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004226:	230c      	movs	r3, #12
 8004228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4827      	ldr	r0, [pc, #156]	@ (80042cc <HAL_FMC_MspInit+0x134>)
 8004230:	f000 fd5a 	bl	8004ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004234:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8004238:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004242:	2303      	movs	r3, #3
 8004244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004246:	230c      	movs	r3, #12
 8004248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4820      	ldr	r0, [pc, #128]	@ (80042d0 <HAL_FMC_MspInit+0x138>)
 8004250:	f000 fd4a 	bl	8004ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004254:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8004258:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004262:	2303      	movs	r3, #3
 8004264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004266:	230c      	movs	r3, #12
 8004268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4819      	ldr	r0, [pc, #100]	@ (80042d4 <HAL_FMC_MspInit+0x13c>)
 8004270:	f000 fd3a 	bl	8004ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004274:	23c0      	movs	r3, #192	@ 0xc0
 8004276:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8004284:	2309      	movs	r3, #9
 8004286:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4812      	ldr	r0, [pc, #72]	@ (80042d8 <HAL_FMC_MspInit+0x140>)
 800428e:	f000 fd2b 	bl	8004ce8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004296:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	2302      	movs	r3, #2
 800429a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a0:	2303      	movs	r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042a4:	230c      	movs	r3, #12
 80042a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4806      	ldr	r0, [pc, #24]	@ (80042c8 <HAL_FMC_MspInit+0x130>)
 80042ae:	f000 fd1b 	bl	8004ce8 <HAL_GPIO_Init>
 80042b2:	e000      	b.n	80042b6 <HAL_FMC_MspInit+0x11e>
    return;
 80042b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20007bb8 	.word	0x20007bb8
 80042c0:	44020c00 	.word	0x44020c00
 80042c4:	42021400 	.word	0x42021400
 80042c8:	42020000 	.word	0x42020000
 80042cc:	42021800 	.word	0x42021800
 80042d0:	42021000 	.word	0x42021000
 80042d4:	42020c00 	.word	0x42020c00
 80042d8:	42020800 	.word	0x42020800

080042dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80042e4:	f7ff ff58 	bl	8004198 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80042f8:	f7ff ff4e 	bl	8004198 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <NMI_Handler+0x4>

0800430c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <HardFault_Handler+0x4>

08004314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <MemManage_Handler+0x4>

0800431c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <BusFault_Handler+0x4>

08004324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <UsageFault_Handler+0x4>

0800432c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800435a:	f000 fa4b 	bl	80047f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}

08004362 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 8004366:	2002      	movs	r0, #2
 8004368:	f000 fe42 	bl	8004ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}

08004370 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 8004374:	2080      	movs	r0, #128	@ 0x80
 8004376:	f000 fe3b 	bl	8004ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}

0800437e <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 8004382:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004386:	f000 fe33 	bl	8004ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004394:	4802      	ldr	r0, [pc, #8]	@ (80043a0 <UART4_IRQHandler+0x10>)
 8004396:	f008 fe29 	bl	800cfec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200078a0 	.word	0x200078a0

080043a4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80043a8:	4802      	ldr	r0, [pc, #8]	@ (80043b4 <UART5_IRQHandler+0x10>)
 80043aa:	f008 fe1f 	bl	800cfec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20007934 	.word	0x20007934

080043b8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80043bc:	4802      	ldr	r0, [pc, #8]	@ (80043c8 <UART8_IRQHandler+0x10>)
 80043be:	f008 fe15 	bl	800cfec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200079c8 	.word	0x200079c8

080043cc <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 80043d0:	4802      	ldr	r0, [pc, #8]	@ (80043dc <USART10_IRQHandler+0x10>)
 80043d2:	f008 fe0b 	bl	800cfec <HAL_UART_IRQHandler>
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20007a5c 	.word	0x20007a5c

080043e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return 1;
 80043e4:	2301      	movs	r3, #1
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <_kill>:

int _kill(int pid, int sig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043fa:	f00b fe11 	bl	8010020 <__errno>
 80043fe:	4603      	mov	r3, r0
 8004400:	2216      	movs	r2, #22
 8004402:	601a      	str	r2, [r3, #0]
  return -1;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <_exit>:

void _exit (int status)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004418:	f04f 31ff 	mov.w	r1, #4294967295
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ffe7 	bl	80043f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004422:	bf00      	nop
 8004424:	e7fd      	b.n	8004422 <_exit+0x12>

08004426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e00a      	b.n	800444e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004438:	f3af 8000 	nop.w
 800443c:	4601      	mov	r1, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	60ba      	str	r2, [r7, #8]
 8004444:	b2ca      	uxtb	r2, r1
 8004446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3301      	adds	r3, #1
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	dbf0      	blt.n	8004438 <_read+0x12>
  }

  return len;
 8004456:	687b      	ldr	r3, [r7, #4]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e009      	b.n	8004486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	60ba      	str	r2, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	3301      	adds	r3, #1
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	dbf1      	blt.n	8004472 <_write+0x12>
  }
  return len;
 800448e:	687b      	ldr	r3, [r7, #4]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_close>:

int _close(int file)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044c0:	605a      	str	r2, [r3, #4]
  return 0;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <_isatty>:

int _isatty(int file)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004508:	4a14      	ldr	r2, [pc, #80]	@ (800455c <_sbrk+0x5c>)
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <_sbrk+0x60>)
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004514:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <_sbrk+0x64>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800451c:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <_sbrk+0x64>)
 800451e:	4a12      	ldr	r2, [pc, #72]	@ (8004568 <_sbrk+0x68>)
 8004520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <_sbrk+0x64>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d207      	bcs.n	8004540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004530:	f00b fd76 	bl	8010020 <__errno>
 8004534:	4603      	mov	r3, r0
 8004536:	220c      	movs	r2, #12
 8004538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	e009      	b.n	8004554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004540:	4b08      	ldr	r3, [pc, #32]	@ (8004564 <_sbrk+0x64>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004546:	4b07      	ldr	r3, [pc, #28]	@ (8004564 <_sbrk+0x64>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	4a05      	ldr	r2, [pc, #20]	@ (8004564 <_sbrk+0x64>)
 8004550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200a0000 	.word	0x200a0000
 8004560:	00000400 	.word	0x00000400
 8004564:	20007bbc 	.word	0x20007bbc
 8004568:	20007d10 	.word	0x20007d10

0800456c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004572:	4b35      	ldr	r3, [pc, #212]	@ (8004648 <SystemInit+0xdc>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	4a33      	ldr	r2, [pc, #204]	@ (8004648 <SystemInit+0xdc>)
 800457a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800457e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8004582:	4b32      	ldr	r3, [pc, #200]	@ (800464c <SystemInit+0xe0>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004588:	4b30      	ldr	r3, [pc, #192]	@ (800464c <SystemInit+0xe0>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800458e:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <SystemInit+0xe0>)
 8004590:	2200      	movs	r2, #0
 8004592:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8004594:	4b2d      	ldr	r3, [pc, #180]	@ (800464c <SystemInit+0xe0>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	492c      	ldr	r1, [pc, #176]	@ (800464c <SystemInit+0xe0>)
 800459a:	4b2d      	ldr	r3, [pc, #180]	@ (8004650 <SystemInit+0xe4>)
 800459c:	4013      	ands	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80045a0:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <SystemInit+0xe0>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80045a6:	4b29      	ldr	r3, [pc, #164]	@ (800464c <SystemInit+0xe0>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80045ac:	4b27      	ldr	r3, [pc, #156]	@ (800464c <SystemInit+0xe0>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80045b2:	4b26      	ldr	r3, [pc, #152]	@ (800464c <SystemInit+0xe0>)
 80045b4:	4a27      	ldr	r2, [pc, #156]	@ (8004654 <SystemInit+0xe8>)
 80045b6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80045b8:	4b24      	ldr	r3, [pc, #144]	@ (800464c <SystemInit+0xe0>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80045be:	4b23      	ldr	r3, [pc, #140]	@ (800464c <SystemInit+0xe0>)
 80045c0:	4a24      	ldr	r2, [pc, #144]	@ (8004654 <SystemInit+0xe8>)
 80045c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80045c4:	4b21      	ldr	r3, [pc, #132]	@ (800464c <SystemInit+0xe0>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80045ca:	4b20      	ldr	r3, [pc, #128]	@ (800464c <SystemInit+0xe0>)
 80045cc:	4a21      	ldr	r2, [pc, #132]	@ (8004654 <SystemInit+0xe8>)
 80045ce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80045d0:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <SystemInit+0xe0>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80045d6:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <SystemInit+0xe0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <SystemInit+0xe0>)
 80045dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80045e2:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <SystemInit+0xe0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045e8:	4b17      	ldr	r3, [pc, #92]	@ (8004648 <SystemInit+0xdc>)
 80045ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80045ee:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <SystemInit+0xec>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80045f8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8004600:	d003      	beq.n	800460a <SystemInit+0x9e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004608:	d117      	bne.n	800463a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800460a:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <SystemInit+0xec>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <SystemInit+0xec>)
 8004618:	4a10      	ldr	r2, [pc, #64]	@ (800465c <SystemInit+0xf0>)
 800461a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800461c:	4b0e      	ldr	r3, [pc, #56]	@ (8004658 <SystemInit+0xec>)
 800461e:	4a10      	ldr	r2, [pc, #64]	@ (8004660 <SystemInit+0xf4>)
 8004620:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004622:	4b0d      	ldr	r3, [pc, #52]	@ (8004658 <SystemInit+0xec>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	4a0c      	ldr	r2, [pc, #48]	@ (8004658 <SystemInit+0xec>)
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800462e:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <SystemInit+0xec>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4a09      	ldr	r2, [pc, #36]	@ (8004658 <SystemInit+0xec>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	61d3      	str	r3, [r2, #28]
  }
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000ed00 	.word	0xe000ed00
 800464c:	44020c00 	.word	0x44020c00
 8004650:	eae2eae3 	.word	0xeae2eae3
 8004654:	01010280 	.word	0x01010280
 8004658:	40022000 	.word	0x40022000
 800465c:	08192a3b 	.word	0x08192a3b
 8004660:	4c5d6e7f 	.word	0x4c5d6e7f

08004664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004664:	480d      	ldr	r0, [pc, #52]	@ (800469c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004668:	f7ff ff80 	bl	800456c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800466c:	480c      	ldr	r0, [pc, #48]	@ (80046a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800466e:	490d      	ldr	r1, [pc, #52]	@ (80046a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004670:	4a0d      	ldr	r2, [pc, #52]	@ (80046a8 <LoopForever+0xe>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004674:	e002      	b.n	800467c <LoopCopyDataInit>

08004676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800467a:	3304      	adds	r3, #4

0800467c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800467c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800467e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004680:	d3f9      	bcc.n	8004676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004682:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004684:	4c0a      	ldr	r4, [pc, #40]	@ (80046b0 <LoopForever+0x16>)
  movs r3, #0
 8004686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004688:	e001      	b.n	800468e <LoopFillZerobss>

0800468a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800468a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800468c:	3204      	adds	r2, #4

0800468e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800468e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004690:	d3fb      	bcc.n	800468a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004692:	f00b fccb 	bl	801002c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004696:	f7fe fa1f 	bl	8002ad8 <main>

0800469a <LoopForever>:

LoopForever:
    b LoopForever
 800469a:	e7fe      	b.n	800469a <LoopForever>
  ldr   r0, =_estack
 800469c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80046a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a4:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80046a8:	080128c0 	.word	0x080128c0
  ldr r2, =_sbss
 80046ac:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80046b0:	20007d10 	.word	0x20007d10

080046b4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046b4:	e7fe      	b.n	80046b4 <ADC1_IRQHandler>
	...

080046b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046bc:	2003      	movs	r0, #3
 80046be:	f000 f98a 	bl	80049d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046c2:	f002 f9bb 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 80046c6:	4602      	mov	r2, r0
 80046c8:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <HAL_Init+0x44>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	490b      	ldr	r1, [pc, #44]	@ (8004700 <HAL_Init+0x48>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
 80046d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <HAL_Init+0x4c>)
 80046da:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80046dc:	2004      	movs	r0, #4
 80046de:	f000 f9cf 	bl	8004a80 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046e2:	200f      	movs	r0, #15
 80046e4:	f000 f810 	bl	8004708 <HAL_InitTick>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e002      	b.n	80046f8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046f2:	f7ff f9f2 	bl	8003ada <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	44020c00 	.word	0x44020c00
 8004700:	080124fc 	.word	0x080124fc
 8004704:	20000024 	.word	0x20000024

08004708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004714:	4b33      	ldr	r3, [pc, #204]	@ (80047e4 <HAL_InitTick+0xdc>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e05c      	b.n	80047da <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004720:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_InitTick+0xe0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d10c      	bne.n	8004746 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800472c:	4b2f      	ldr	r3, [pc, #188]	@ (80047ec <HAL_InitTick+0xe4>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b2c      	ldr	r3, [pc, #176]	@ (80047e4 <HAL_InitTick+0xdc>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800473a:	fbb3 f3f1 	udiv	r3, r3, r1
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e037      	b.n	80047b6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8004746:	f000 f9f3 	bl	8004b30 <HAL_SYSTICK_GetCLKSourceConfig>
 800474a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d023      	beq.n	800479a <HAL_InitTick+0x92>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d82d      	bhi.n	80047b4 <HAL_InitTick+0xac>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_InitTick+0x5e>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d00d      	beq.n	8004780 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8004764:	e026      	b.n	80047b4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <HAL_InitTick+0xe4>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <HAL_InitTick+0xdc>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8004774:	fbb3 f3f1 	udiv	r3, r3, r1
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	60fb      	str	r3, [r7, #12]
        break;
 800477e:	e01a      	b.n	80047b6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004780:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <HAL_InitTick+0xdc>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800478a:	fbb3 f3f2 	udiv	r3, r3, r2
 800478e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	60fb      	str	r3, [r7, #12]
        break;
 8004798:	e00d      	b.n	80047b6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800479a:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <HAL_InitTick+0xdc>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	60fb      	str	r3, [r7, #12]
        break;
 80047b2:	e000      	b.n	80047b6 <HAL_InitTick+0xae>
        break;
 80047b4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f940 	bl	8004a3c <HAL_SYSTICK_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e009      	b.n	80047da <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047c6:	2200      	movs	r2, #0
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	f000 f90d 	bl	80049ec <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80047d2:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <HAL_InitTick+0xe8>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	2000002c 	.word	0x2000002c
 80047e8:	e000e010 	.word	0xe000e010
 80047ec:	20000024 	.word	0x20000024
 80047f0:	20000028 	.word	0x20000028

080047f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_IncTick+0x20>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_IncTick+0x24>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4413      	add	r3, r2
 8004804:	4a04      	ldr	r2, [pc, #16]	@ (8004818 <HAL_IncTick+0x24>)
 8004806:	6013      	str	r3, [r2, #0]
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000002c 	.word	0x2000002c
 8004818:	20007bc0 	.word	0x20007bc0

0800481c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return uwTick;
 8004820:	4b03      	ldr	r3, [pc, #12]	@ (8004830 <HAL_GetTick+0x14>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20007bc0 	.word	0x20007bc0

08004834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7ff ffee 	bl	800481c <HAL_GetTick>
 8004840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d005      	beq.n	800485a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800484e:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <HAL_Delay+0x44>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800485a:	bf00      	nop
 800485c:	f7ff ffde 	bl	800481c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d8f7      	bhi.n	800485c <HAL_Delay+0x28>
  {
  }
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2000002c 	.word	0x2000002c

0800487c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800488c:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <__NVIC_SetPriorityGrouping+0x44>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004898:	4013      	ands	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ae:	4a04      	ldr	r2, [pc, #16]	@ (80048c0 <__NVIC_SetPriorityGrouping+0x44>)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	60d3      	str	r3, [r2, #12]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	e000ed00 	.word	0xe000ed00

080048c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <__NVIC_GetPriorityGrouping+0x18>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	f003 0307 	and.w	r3, r3, #7
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	db0b      	blt.n	800490a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	f003 021f 	and.w	r2, r3, #31
 80048f8:	4907      	ldr	r1, [pc, #28]	@ (8004918 <__NVIC_EnableIRQ+0x38>)
 80048fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	2001      	movs	r0, #1
 8004902:	fa00 f202 	lsl.w	r2, r0, r2
 8004906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	e000e100 	.word	0xe000e100

0800491c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492c:	2b00      	cmp	r3, #0
 800492e:	db0a      	blt.n	8004946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	490c      	ldr	r1, [pc, #48]	@ (8004968 <__NVIC_SetPriority+0x4c>)
 8004936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	440b      	add	r3, r1
 8004940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004944:	e00a      	b.n	800495c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4908      	ldr	r1, [pc, #32]	@ (800496c <__NVIC_SetPriority+0x50>)
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	3b04      	subs	r3, #4
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	440b      	add	r3, r1
 800495a:	761a      	strb	r2, [r3, #24]
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000e100 	.word	0xe000e100
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f1c3 0307 	rsb	r3, r3, #7
 800498a:	2b04      	cmp	r3, #4
 800498c:	bf28      	it	cs
 800498e:	2304      	movcs	r3, #4
 8004990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3304      	adds	r3, #4
 8004996:	2b06      	cmp	r3, #6
 8004998:	d902      	bls.n	80049a0 <NVIC_EncodePriority+0x30>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3b03      	subs	r3, #3
 800499e:	e000      	b.n	80049a2 <NVIC_EncodePriority+0x32>
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43da      	mvns	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	401a      	ands	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b8:	f04f 31ff 	mov.w	r1, #4294967295
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	43d9      	mvns	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c8:	4313      	orrs	r3, r2
         );
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3724      	adds	r7, #36	@ 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff4c 	bl	800487c <__NVIC_SetPriorityGrouping>
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049fa:	f7ff ff63 	bl	80048c4 <__NVIC_GetPriorityGrouping>
 80049fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f7ff ffb3 	bl	8004970 <NVIC_EncodePriority>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ff82 	bl	800491c <__NVIC_SetPriority>
}
 8004a18:	bf00      	nop
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ff56 	bl	80048e0 <__NVIC_EnableIRQ>
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a4c:	d301      	bcc.n	8004a52 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e00d      	b.n	8004a6e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004a52:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <HAL_SYSTICK_Config+0x40>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004a5a:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <HAL_SYSTICK_Config+0x40>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004a60:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <HAL_SYSTICK_Config+0x40>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a05      	ldr	r2, [pc, #20]	@ (8004a7c <HAL_SYSTICK_Config+0x40>)
 8004a66:	f043 0303 	orr.w	r3, r3, #3
 8004a6a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000e010 	.word	0xe000e010

08004a80 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d844      	bhi.n	8004b18 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ab7 	.word	0x08004ab7
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004af7 	.word	0x08004af7
 8004aa0:	08004b19 	.word	0x08004b19
 8004aa4:	08004aa9 	.word	0x08004aa9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004aae:	f043 0304 	orr.w	r3, r3, #4
 8004ab2:	6013      	str	r3, [r2, #0]
      break;
 8004ab4:	e031      	b.n	8004b1a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004abc:	f023 0304 	bic.w	r3, r3, #4
 8004ac0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ac8:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004aca:	f023 030c 	bic.w	r3, r3, #12
 8004ace:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004ad2:	e022      	b.n	8004b1a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004ad4:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004ae0:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ae2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ae6:	f023 030c 	bic.w	r3, r3, #12
 8004aea:	4a10      	ldr	r2, [pc, #64]	@ (8004b2c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004aec:	f043 0304 	orr.w	r3, r3, #4
 8004af0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004af4:	e011      	b.n	8004b1a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004af6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a0b      	ldr	r2, [pc, #44]	@ (8004b28 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004b04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b08:	f023 030c 	bic.w	r3, r3, #12
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004b0e:	f043 0308 	orr.w	r3, r3, #8
 8004b12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004b16:	e000      	b.n	8004b1a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004b18:	bf00      	nop
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	e000e010 	.word	0xe000e010
 8004b2c:	44020c00 	.word	0x44020c00

08004b30 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004b36:	4b17      	ldr	r3, [pc, #92]	@ (8004b94 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004b42:	2304      	movs	r3, #4
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	e01e      	b.n	8004b86 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8004b48:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8004b4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d00f      	beq.n	8004b7a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d80f      	bhi.n	8004b80 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d003      	beq.n	8004b74 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004b6c:	e008      	b.n	8004b80 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
        break;
 8004b72:	e008      	b.n	8004b86 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004b74:	2301      	movs	r3, #1
 8004b76:	607b      	str	r3, [r7, #4]
        break;
 8004b78:	e005      	b.n	8004b86 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	607b      	str	r3, [r7, #4]
        break;
 8004b7e:	e002      	b.n	8004b86 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004b80:	2300      	movs	r3, #0
 8004b82:	607b      	str	r3, [r7, #4]
        break;
 8004b84:	bf00      	nop
    }
  }
  return systick_source;
 8004b86:	687b      	ldr	r3, [r7, #4]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000e010 	.word	0xe000e010
 8004b98:	44020c00 	.word	0x44020c00

08004b9c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004ba4:	f7ff fe3a 	bl	800481c <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e06b      	b.n	8004c8c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d008      	beq.n	8004bd2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e05c      	b.n	8004c8c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0204 	orr.w	r2, r2, #4
 8004be0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2205      	movs	r2, #5
 8004be6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004bea:	e020      	b.n	8004c2e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004bec:	f7ff fe16 	bl	800481c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d919      	bls.n	8004c2e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1e:	2201      	movs	r2, #1
 8004c20:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e02e      	b.n	8004c8c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0d7      	beq.n	8004bec <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0202 	orr.w	r2, r2, #2
 8004c4a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004c5c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c76:	2201      	movs	r2, #1
 8004c78:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e019      	b.n	8004cda <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e00e      	b.n	8004cda <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cd2:	f043 0304 	orr.w	r3, r3, #4
 8004cd6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004cf6:	e136      	b.n	8004f66 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8128 	beq.w	8004f60 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x38>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b12      	cmp	r3, #18
 8004d1e:	d125      	bne.n	8004d6c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	08da      	lsrs	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3208      	adds	r2, #8
 8004d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	220f      	movs	r2, #15
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4013      	ands	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	08da      	lsrs	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3208      	adds	r2, #8
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2203      	movs	r2, #3
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4013      	ands	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 0203 	and.w	r2, r3, #3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d00b      	beq.n	8004dc0 <HAL_GPIO_Init+0xd8>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d007      	beq.n	8004dc0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004db4:	2b11      	cmp	r3, #17
 8004db6:	d003      	beq.n	8004dc0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b12      	cmp	r3, #18
 8004dbe:	d130      	bne.n	8004e22 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004df6:	2201      	movs	r2, #1
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4013      	ands	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 0201 	and.w	r2, r3, #1
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d017      	beq.n	8004e5a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2203      	movs	r2, #3
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d07c      	beq.n	8004f60 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004e66:	4a47      	ldr	r2, [pc, #284]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	3318      	adds	r3, #24
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4013      	ands	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0a9a      	lsrs	r2, r3, #10
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f88 <HAL_GPIO_Init+0x2a0>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	f002 0203 	and.w	r2, r2, #3
 8004e98:	00d2      	lsls	r2, r2, #3
 8004e9a:	4093      	lsls	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004ea2:	4938      	ldr	r1, [pc, #224]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004eb0:	4b34      	ldr	r3, [pc, #208]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004eda:	4b2a      	ldr	r3, [pc, #168]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004efe:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004f04:	4b1f      	ldr	r3, [pc, #124]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4013      	ands	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004f2a:	4a16      	ldr	r2, [pc, #88]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004f32:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4013      	ands	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004f58:	4a0a      	ldr	r2, [pc, #40]	@ (8004f84 <HAL_GPIO_Init+0x29c>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3301      	adds	r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f47f aec1 	bne.w	8004cf8 <HAL_GPIO_Init+0x10>
  }
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	44022000 	.word	0x44022000
 8004f88:	002f7f7f 	.word	0x002f7f7f

08004f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f9c:	787b      	ldrb	r3, [r7, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fa8:	e002      	b.n	8004fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	041a      	lsls	r2, r3, #16
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	43d9      	mvns	r1, r3
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	400b      	ands	r3, r1
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	619a      	str	r2, [r3, #24]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8005038 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005006:	4a0c      	ldr	r2, [pc, #48]	@ (8005038 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f814 	bl	800503c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005014:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005020:	4a05      	ldr	r2, [pc, #20]	@ (8005038 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fd45 	bl	8003ab8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	44022000 	.word	0x44022000

0800503c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
 8005070:	e007      	b.n	8005082 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005072:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 0204 	bic.w	r2, r3, #4
 800507a:	4905      	ldr	r1, [pc, #20]	@ (8005090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40030400 	.word	0x40030400

08005094 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_ICACHE_Enable+0x1c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_ICACHE_Enable+0x1c>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40030400 	.word	0x40030400

080050b4 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e037      	b.n	800513a <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff f906 	bl	80042f0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f00a f94e 	bl	800f390 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	461a      	mov	r2, r3
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	f00a f970 	bl	800f3e4 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	461a      	mov	r2, r3
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	f00a f985 	bl	800f41e <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0204 	orr.w	r2, r2, #4
 8005122:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005124:	4b07      	ldr	r3, [pc, #28]	@ (8005144 <HAL_NAND_Init+0x90>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a06      	ldr	r2, [pc, #24]	@ (8005144 <HAL_NAND_Init+0x90>)
 800512a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800512e:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	47000400 	.word	0x47000400

08005148 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d101      	bne.n	8005160 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
 800515e:	e027      	b.n	80051b0 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d120      	bne.n	80051ae <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_NAND_Reset+0x32>
 8005176:	2302      	movs	r3, #2
 8005178:	e01a      	b.n	80051b0 <HAL_NAND_Reset+0x68>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800518a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800518e:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005196:	22ff      	movs	r2, #255	@ 0xff
 8005198:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1

}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	@ 0x30
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d101      	bne.n	80051e6 <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
 80051e4:	e140      	b.n	8005468 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	f040 8139 	bne.w	8005466 <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_NAND_Read_Page_8b+0x46>
 80051fe:	2302      	movs	r3, #2
 8005200:	e132      	b.n	8005468 <HAL_NAND_Read_Page_8b+0x2ac>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005212:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005216:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	889b      	ldrh	r3, [r3, #4]
 8005222:	461a      	mov	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	885b      	ldrh	r3, [r3, #2]
 8005228:	4618      	mov	r0, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	fb00 f303 	mul.w	r3, r0, r3
 8005232:	4413      	add	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	440b      	add	r3, r1
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005240:	e0fa      	b.n	8005438 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800524c:	f3bf 8f4f 	dsb	sy
}
 8005250:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525a:	d848      	bhi.n	80052ee <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d21a      	bcs.n	80052a4 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005278:	f3bf 8f4f 	dsb	sy
}
 800527c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800528a:	f3bf 8f4f 	dsb	sy
}
 800528e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	0a1a      	lsrs	r2, r3, #8
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800529e:	f3bf 8f4f 	dsb	sy
}
 80052a2:	e07d      	b.n	80053a0 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052ae:	f3bf 8f4f 	dsb	sy
}
 80052b2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052c0:	f3bf 8f4f 	dsb	sy
}
 80052c4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	0a1a      	lsrs	r2, r3, #8
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052d4:	f3bf 8f4f 	dsb	sy
}
 80052d8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	0c1a      	lsrs	r2, r3, #16
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052e8:	f3bf 8f4f 	dsb	sy
}
 80052ec:	e058      	b.n	80053a0 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fe:	d222      	bcs.n	8005346 <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800530a:	f3bf 8f4f 	dsb	sy
}
 800530e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800531a:	f3bf 8f4f 	dsb	sy
}
 800531e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800532c:	f3bf 8f4f 	dsb	sy
}
 8005330:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	0a1a      	lsrs	r2, r3, #8
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005340:	f3bf 8f4f 	dsb	sy
}
 8005344:	e02c      	b.n	80053a0 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005350:	f3bf 8f4f 	dsb	sy
}
 8005354:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005360:	f3bf 8f4f 	dsb	sy
}
 8005364:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005372:	f3bf 8f4f 	dsb	sy
}
 8005376:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	0a1a      	lsrs	r2, r3, #8
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005386:	f3bf 8f4f 	dsb	sy
}
 800538a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	0c1a      	lsrs	r2, r3, #16
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800539a:	f3bf 8f4f 	dsb	sy
}
 800539e:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a6:	2230      	movs	r2, #48	@ 0x30
 80053a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053aa:	f3bf 8f4f 	dsb	sy
}
 80053ae:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d123      	bne.n	8005402 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053ba:	f7ff fa2f 	bl	800481c <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80053c0:	e011      	b.n	80053e6 <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80053c2:	f7ff fa2b 	bl	800481c <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053d0:	d909      	bls.n	80053e6 <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2203      	movs	r2, #3
 80053d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e040      	b.n	8005468 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fd13 	bl	8005e12 <HAL_NAND_Read_Status>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d1e7      	bne.n	80053c2 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053fc:	f3bf 8f4f 	dsb	sy
}
 8005400:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005402:	2300      	movs	r3, #0
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005406:	e009      	b.n	800541c <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	701a      	strb	r2, [r3, #0]
        buff++;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3301      	adds	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005418:	3301      	adds	r3, #1
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d3f0      	bcc.n	8005408 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	3301      	adds	r3, #1
 800542a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	3b01      	subs	r3, #1
 8005430:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	3301      	adds	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_NAND_Read_Page_8b+0x296>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544c:	429a      	cmp	r2, r3
 800544e:	f4ff aef8 	bcc.w	8005242 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e000      	b.n	8005468 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
}
 8005468:	4618      	mov	r0, r3
 800546a:	3730      	adds	r7, #48	@ 0x30
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	@ 0x30
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d101      	bne.n	800549a <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005496:	2302      	movs	r3, #2
 8005498:	e13e      	b.n	8005718 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	f040 8137 	bne.w	8005716 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_NAND_Write_Page_8b+0x46>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e130      	b.n	8005718 <HAL_NAND_Write_Page_8b+0x2a8>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80054c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054ca:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	889b      	ldrh	r3, [r3, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	885b      	ldrh	r3, [r3, #2]
 80054dc:	4618      	mov	r0, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	fb00 f303 	mul.w	r3, r0, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054ec:	fb02 f303 	mul.w	r3, r2, r3
 80054f0:	440b      	add	r3, r1
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80054f4:	e0f8      	b.n	80056e8 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005500:	f3bf 8f4f 	dsb	sy
}
 8005504:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550c:	2280      	movs	r2, #128	@ 0x80
 800550e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005510:	f3bf 8f4f 	dsb	sy
}
 8005514:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800551e:	d848      	bhi.n	80055b2 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005530:	d21a      	bcs.n	8005568 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800553c:	f3bf 8f4f 	dsb	sy
}
 8005540:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800554e:	f3bf 8f4f 	dsb	sy
}
 8005552:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	0a1a      	lsrs	r2, r3, #8
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005562:	f3bf 8f4f 	dsb	sy
}
 8005566:	e07d      	b.n	8005664 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005572:	f3bf 8f4f 	dsb	sy
}
 8005576:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005584:	f3bf 8f4f 	dsb	sy
}
 8005588:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	0a1a      	lsrs	r2, r3, #8
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005598:	f3bf 8f4f 	dsb	sy
}
 800559c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	0c1a      	lsrs	r2, r3, #16
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055ac:	f3bf 8f4f 	dsb	sy
}
 80055b0:	e058      	b.n	8005664 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c2:	d222      	bcs.n	800560a <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055ce:	f3bf 8f4f 	dsb	sy
}
 80055d2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055de:	f3bf 8f4f 	dsb	sy
}
 80055e2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055f0:	f3bf 8f4f 	dsb	sy
}
 80055f4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	0a1a      	lsrs	r2, r3, #8
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005604:	f3bf 8f4f 	dsb	sy
}
 8005608:	e02c      	b.n	8005664 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005614:	f3bf 8f4f 	dsb	sy
}
 8005618:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005624:	f3bf 8f4f 	dsb	sy
}
 8005628:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005636:	f3bf 8f4f 	dsb	sy
}
 800563a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	0a1a      	lsrs	r2, r3, #8
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800564a:	f3bf 8f4f 	dsb	sy
}
 800564e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	0c1a      	lsrs	r2, r3, #16
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800565e:	f3bf 8f4f 	dsb	sy
}
 8005662:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005664:	2300      	movs	r3, #0
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005668:	e00c      	b.n	8005684 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	7812      	ldrb	r2, [r2, #0]
 8005670:	701a      	strb	r2, [r3, #0]
        buff++;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3301      	adds	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005678:	f3bf 8f4f 	dsb	sy
}
 800567c:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	3301      	adds	r3, #1
 8005682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800568a:	429a      	cmp	r2, r3
 800568c:	d3ed      	bcc.n	800566a <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005694:	2210      	movs	r2, #16
 8005696:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005698:	f3bf 8f4f 	dsb	sy
}
 800569c:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 800569e:	f7ff f8bd 	bl	800481c <HAL_GetTick>
 80056a2:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80056a4:	e011      	b.n	80056ca <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80056a6:	f7ff f8b9 	bl	800481c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056b4:	d909      	bls.n	80056ca <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2203      	movs	r2, #3
 80056ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e026      	b.n	8005718 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fba1 	bl	8005e12 <HAL_NAND_Read_Status>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b40      	cmp	r3, #64	@ 0x40
 80056d4:	d1e7      	bne.n	80056a6 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	3301      	adds	r3, #1
 80056da:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	3b01      	subs	r3, #1
 80056e0:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	3301      	adds	r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_NAND_Write_Page_8b+0x292>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056fc:	429a      	cmp	r2, r3
 80056fe:	f4ff aefa 	bcc.w	80054f6 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
}
 8005718:	4618      	mov	r0, r3
 800571a:	3730      	adds	r7, #48	@ 0x30
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	@ 0x30
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d101      	bne.n	800574a <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
 8005748:	e151      	b.n	80059ee <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	f040 814a 	bne.w	80059ec <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_NAND_Read_SpareArea_8b+0x46>
 8005762:	2302      	movs	r3, #2
 8005764:	e143      	b.n	80059ee <HAL_NAND_Read_SpareArea_8b+0x2ce>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005776:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800577a:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	4619      	mov	r1, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	889b      	ldrh	r3, [r3, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	885b      	ldrh	r3, [r3, #2]
 800578c:	4618      	mov	r0, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	fb00 f303 	mul.w	r3, r0, r3
 8005796:	4413      	add	r3, r2
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	440b      	add	r3, r1
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80057aa:	e108      	b.n	80059be <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b4:	d850      	bhi.n	8005858 <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057bc:	2250      	movs	r2, #80	@ 0x50
 80057be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057c0:	f3bf 8f4f 	dsb	sy
}
 80057c4:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d6:	d21a      	bcs.n	800580e <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057e2:	f3bf 8f4f 	dsb	sy
}
 80057e6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057f4:	f3bf 8f4f 	dsb	sy
}
 80057f8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	0a1a      	lsrs	r2, r3, #8
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005808:	f3bf 8f4f 	dsb	sy
}
 800580c:	e08b      	b.n	8005926 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005818:	f3bf 8f4f 	dsb	sy
}
 800581c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800582a:	f3bf 8f4f 	dsb	sy
}
 800582e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	0a1a      	lsrs	r2, r3, #8
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800583e:	f3bf 8f4f 	dsb	sy
}
 8005842:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	0c1a      	lsrs	r2, r3, #16
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005852:	f3bf 8f4f 	dsb	sy
}
 8005856:	e066      	b.n	8005926 <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005862:	f3bf 8f4f 	dsb	sy
}
 8005866:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005878:	d225      	bcs.n	80058c6 <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005886:	f3bf 8f4f 	dsb	sy
}
 800588a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	0a1a      	lsrs	r2, r3, #8
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800589a:	f3bf 8f4f 	dsb	sy
}
 800589e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058ac:	f3bf 8f4f 	dsb	sy
}
 80058b0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	0a1a      	lsrs	r2, r3, #8
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058c0:	f3bf 8f4f 	dsb	sy
}
 80058c4:	e02f      	b.n	8005926 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058d2:	f3bf 8f4f 	dsb	sy
}
 80058d6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	0a1a      	lsrs	r2, r3, #8
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058e6:	f3bf 8f4f 	dsb	sy
}
 80058ea:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058f8:	f3bf 8f4f 	dsb	sy
}
 80058fc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	0a1a      	lsrs	r2, r3, #8
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800590c:	f3bf 8f4f 	dsb	sy
}
 8005910:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	0c1a      	lsrs	r2, r3, #16
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005920:	f3bf 8f4f 	dsb	sy
}
 8005924:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592c:	2230      	movs	r2, #48	@ 0x30
 800592e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005930:	f3bf 8f4f 	dsb	sy
}
 8005934:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d123      	bne.n	8005988 <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005940:	f7fe ff6c 	bl	800481c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005946:	e011      	b.n	800596c <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005948:	f7fe ff68 	bl	800481c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005956:	d909      	bls.n	800596c <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2203      	movs	r2, #3
 800595c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e040      	b.n	80059ee <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fa50 	bl	8005e12 <HAL_NAND_Read_Status>
 8005972:	4603      	mov	r3, r0
 8005974:	2b40      	cmp	r3, #64	@ 0x40
 8005976:	d1e7      	bne.n	8005948 <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005982:	f3bf 8f4f 	dsb	sy
}
 8005986:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005988:	2300      	movs	r3, #0
 800598a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800598c:	e009      	b.n	80059a2 <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	701a      	strb	r2, [r3, #0]
        buff++;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3301      	adds	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 800599c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599e:	3301      	adds	r3, #1
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d3f0      	bcc.n	800598e <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	3301      	adds	r3, #1
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	3301      	adds	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <HAL_NAND_Read_SpareArea_8b+0x2b8>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
 80059d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d2:	429a      	cmp	r2, r3
 80059d4:	f4ff aeea 	bcc.w	80057ac <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e000      	b.n	80059ee <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3730      	adds	r7, #48	@ 0x30
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b08c      	sub	sp, #48	@ 0x30
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d101      	bne.n	8005a20 <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e157      	b.n	8005cd0 <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	f040 8150 	bne.w	8005cce <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_NAND_Write_SpareArea_8b+0x46>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e149      	b.n	8005cd0 <HAL_NAND_Write_SpareArea_8b+0x2da>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005a4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a50:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	4619      	mov	r1, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	889b      	ldrh	r3, [r3, #4]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	885b      	ldrh	r3, [r3, #2]
 8005a62:	4618      	mov	r0, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a68:	fb00 f303 	mul.w	r3, r0, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	440b      	add	r3, r1
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005a80:	e10e      	b.n	8005ca0 <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8a:	d858      	bhi.n	8005b3e <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a92:	2250      	movs	r2, #80	@ 0x50
 8005a94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a96:	f3bf 8f4f 	dsb	sy
}
 8005a9a:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa2:	2280      	movs	r2, #128	@ 0x80
 8005aa4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005aa6:	f3bf 8f4f 	dsb	sy
}
 8005aaa:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abc:	d21a      	bcs.n	8005af4 <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ac8:	f3bf 8f4f 	dsb	sy
}
 8005acc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ada:	f3bf 8f4f 	dsb	sy
}
 8005ade:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	0a1a      	lsrs	r2, r3, #8
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005aee:	f3bf 8f4f 	dsb	sy
}
 8005af2:	e093      	b.n	8005c1c <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005afe:	f3bf 8f4f 	dsb	sy
}
 8005b02:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b10:	f3bf 8f4f 	dsb	sy
}
 8005b14:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	0a1a      	lsrs	r2, r3, #8
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b24:	f3bf 8f4f 	dsb	sy
}
 8005b28:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	0c1a      	lsrs	r2, r3, #16
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b38:	f3bf 8f4f 	dsb	sy
}
 8005b3c:	e06e      	b.n	8005c1c <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b48:	f3bf 8f4f 	dsb	sy
}
 8005b4c:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b54:	2280      	movs	r2, #128	@ 0x80
 8005b56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b58:	f3bf 8f4f 	dsb	sy
}
 8005b5c:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6e:	d225      	bcs.n	8005bbc <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b7c:	f3bf 8f4f 	dsb	sy
}
 8005b80:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	0a1a      	lsrs	r2, r3, #8
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b90:	f3bf 8f4f 	dsb	sy
}
 8005b94:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ba2:	f3bf 8f4f 	dsb	sy
}
 8005ba6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	0a1a      	lsrs	r2, r3, #8
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bb6:	f3bf 8f4f 	dsb	sy
}
 8005bba:	e02f      	b.n	8005c1c <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bc8:	f3bf 8f4f 	dsb	sy
}
 8005bcc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	0a1a      	lsrs	r2, r3, #8
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bdc:	f3bf 8f4f 	dsb	sy
}
 8005be0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bee:	f3bf 8f4f 	dsb	sy
}
 8005bf2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	0a1a      	lsrs	r2, r3, #8
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c02:	f3bf 8f4f 	dsb	sy
}
 8005c06:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	0c1a      	lsrs	r2, r3, #16
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c16:	f3bf 8f4f 	dsb	sy
}
 8005c1a:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c20:	e00c      	b.n	8005c3c <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	701a      	strb	r2, [r3, #0]
        buff++;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c30:	f3bf 8f4f 	dsb	sy
}
 8005c34:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c38:	3301      	adds	r3, #1
 8005c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d3ed      	bcc.n	8005c22 <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c50:	f3bf 8f4f 	dsb	sy
}
 8005c54:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005c56:	f7fe fde1 	bl	800481c <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005c5c:	e011      	b.n	8005c82 <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005c5e:	f7fe fddd 	bl	800481c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c6c:	d909      	bls.n	8005c82 <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2203      	movs	r2, #3
 8005c72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e026      	b.n	8005cd0 <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f8c5 	bl	8005e12 <HAL_NAND_Read_Status>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d1e7      	bne.n	8005c5e <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	3301      	adds	r3, #1
 8005c92:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <HAL_NAND_Write_SpareArea_8b+0x2c4>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f4ff aee4 	bcc.w	8005a82 <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3730      	adds	r7, #48	@ 0x30
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d101      	bne.n	8005cf2 <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e089      	b.n	8005e06 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	f040 8082 	bne.w	8005e04 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_NAND_Erase_Block+0x36>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e07b      	b.n	8005e06 <HAL_NAND_Erase_Block+0x12e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005d1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d22:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d2a:	2260      	movs	r2, #96	@ 0x60
 8005d2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d2e:	f3bf 8f4f 	dsb	sy
}
 8005d32:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	889b      	ldrh	r3, [r3, #4]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	885b      	ldrh	r3, [r3, #2]
 8005d44:	4618      	mov	r0, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	fb00 f303 	mul.w	r3, r0, r3
 8005d4e:	440b      	add	r3, r1
 8005d50:	b2d9      	uxtb	r1, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	fb11 f303 	smulbb	r3, r1, r3
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005d64:	4413      	add	r3, r2
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d6a:	f3bf 8f4f 	dsb	sy
}
 8005d6e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	889b      	ldrh	r3, [r3, #4]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	885b      	ldrh	r3, [r3, #2]
 8005d80:	4618      	mov	r0, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	fb00 f303 	mul.w	r3, r0, r3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	440b      	add	r3, r1
 8005d96:	0a1a      	lsrs	r2, r3, #8
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005da2:	f3bf 8f4f 	dsb	sy
}
 8005da6:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	889b      	ldrh	r3, [r3, #4]
 8005db2:	461a      	mov	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	885b      	ldrh	r3, [r3, #2]
 8005db8:	4618      	mov	r0, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	fb00 f303 	mul.w	r3, r0, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	440b      	add	r3, r1
 8005dce:	0c1a      	lsrs	r2, r3, #16
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dda:	f3bf 8f4f 	dsb	sy
}
 8005dde:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de6:	22d0      	movs	r2, #208	@ 0xd0
 8005de8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dea:	f3bf 8f4f 	dsb	sy
}
 8005dee:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8005e1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e26:	2270      	movs	r2, #112	@ 0x70
 8005e28:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e007      	b.n	8005e50 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005e4a:	2340      	movs	r3, #64	@ 0x40
 8005e4c:	e000      	b.n	8005e50 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005e4e:	2300      	movs	r3, #0
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f000 bc28 	b.w	80066c0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e70:	4b94      	ldr	r3, [pc, #592]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f003 0318 	and.w	r3, r3, #24
 8005e78:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005e7a:	4b92      	ldr	r3, [pc, #584]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05b      	beq.n	8005f48 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d005      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x46>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b18      	cmp	r3, #24
 8005e9a:	d114      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d111      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f000 bc08 	b.w	80066c0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005eb0:	4b84      	ldr	r3, [pc, #528]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	041b      	lsls	r3, r3, #16
 8005ebe:	4981      	ldr	r1, [pc, #516]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005ec4:	e040      	b.n	8005f48 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d023      	beq.n	8005f16 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ece:	4b7d      	ldr	r3, [pc, #500]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fe fc9f 	bl	800481c <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005ee2:	f7fe fc9b 	bl	800481c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e3e5      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005ef4:	4b73      	ldr	r3, [pc, #460]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005f00:	4b70      	ldr	r3, [pc, #448]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	496d      	ldr	r1, [pc, #436]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	618b      	str	r3, [r1, #24]
 8005f14:	e018      	b.n	8005f48 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f16:	4b6b      	ldr	r3, [pc, #428]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a6a      	ldr	r2, [pc, #424]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fe fc7b 	bl	800481c <HAL_GetTick>
 8005f26:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005f2a:	f7fe fc77 	bl	800481c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e3c1      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005f3c:	4b61      	ldr	r3, [pc, #388]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a0 	beq.w	8006096 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_OscConfig+0x10c>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2b18      	cmp	r3, #24
 8005f60:	d109      	bne.n	8005f76 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8092 	bne.w	8006096 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e3a4      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCC_OscConfig+0x132>
 8005f80:	4b50      	ldr	r3, [pc, #320]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a4f      	ldr	r2, [pc, #316]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e058      	b.n	8006040 <HAL_RCC_OscConfig+0x1e4>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d112      	bne.n	8005fbc <HAL_RCC_OscConfig+0x160>
 8005f96:	4b4b      	ldr	r3, [pc, #300]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b48      	ldr	r3, [pc, #288]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a47      	ldr	r2, [pc, #284]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fa8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b45      	ldr	r3, [pc, #276]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a44      	ldr	r2, [pc, #272]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e041      	b.n	8006040 <HAL_RCC_OscConfig+0x1e4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fc4:	d112      	bne.n	8005fec <HAL_RCC_OscConfig+0x190>
 8005fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3e      	ldr	r2, [pc, #248]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b39      	ldr	r3, [pc, #228]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a38      	ldr	r2, [pc, #224]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e029      	b.n	8006040 <HAL_RCC_OscConfig+0x1e4>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005ff4:	d112      	bne.n	800601c <HAL_RCC_OscConfig+0x1c0>
 8005ff6:	4b33      	ldr	r3, [pc, #204]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a32      	ldr	r2, [pc, #200]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b30      	ldr	r3, [pc, #192]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2f      	ldr	r2, [pc, #188]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	4b2d      	ldr	r3, [pc, #180]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2c      	ldr	r2, [pc, #176]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e011      	b.n	8006040 <HAL_RCC_OscConfig+0x1e4>
 800601c:	4b29      	ldr	r3, [pc, #164]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a28      	ldr	r2, [pc, #160]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	4b26      	ldr	r3, [pc, #152]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a25      	ldr	r2, [pc, #148]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 800602e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	4b23      	ldr	r3, [pc, #140]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 800603a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800603e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fe fbe8 	bl	800481c <HAL_GetTick>
 800604c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006050:	f7fe fbe4 	bl	800481c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	@ 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e32e      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006062:	4b18      	ldr	r3, [pc, #96]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x1f4>
 800606e:	e012      	b.n	8006096 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fe fbd4 	bl	800481c <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006078:	f7fe fbd0 	bl	800481c <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	@ 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e31a      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <HAL_RCC_OscConfig+0x268>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 809a 	beq.w	80061d8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d005      	beq.n	80060b6 <HAL_RCC_OscConfig+0x25a>
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b18      	cmp	r3, #24
 80060ae:	d149      	bne.n	8006144 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d146      	bne.n	8006144 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e2fe      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
 80060c2:	bf00      	nop
 80060c4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d11c      	bne.n	8006108 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80060ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0218 	and.w	r2, r3, #24
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d014      	beq.n	8006108 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80060de:	4b96      	ldr	r3, [pc, #600]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 0218 	bic.w	r2, r3, #24
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	4993      	ldr	r1, [pc, #588]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80060f0:	f000 fdd0 	bl	8006c94 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060f4:	4b91      	ldr	r3, [pc, #580]	@ (800633c <HAL_RCC_OscConfig+0x4e0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fb05 	bl	8004708 <HAL_InitTick>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e2db      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fe fb88 	bl	800481c <HAL_GetTick>
 800610c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006110:	f7fe fb84 	bl	800481c <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e2ce      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006122:	4b85      	ldr	r3, [pc, #532]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800612e:	4b82      	ldr	r3, [pc, #520]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	497e      	ldr	r1, [pc, #504]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006142:	e049      	b.n	80061d8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d02c      	beq.n	80061a6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800614c:	4b7a      	ldr	r3, [pc, #488]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 0218 	bic.w	r2, r3, #24
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	4977      	ldr	r1, [pc, #476]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800615e:	4b76      	ldr	r3, [pc, #472]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a75      	ldr	r2, [pc, #468]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616a:	f7fe fb57 	bl	800481c <HAL_GetTick>
 800616e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006172:	f7fe fb53 	bl	800481c <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e29d      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006184:	4b6c      	ldr	r3, [pc, #432]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006190:	4b69      	ldr	r3, [pc, #420]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	4966      	ldr	r1, [pc, #408]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	610b      	str	r3, [r1, #16]
 80061a4:	e018      	b.n	80061d8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061a6:	4b64      	ldr	r3, [pc, #400]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a63      	ldr	r2, [pc, #396]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fe fb33 	bl	800481c <HAL_GetTick>
 80061b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80061ba:	f7fe fb2f 	bl	800481c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e279      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061cc:	4b5a      	ldr	r3, [pc, #360]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f0      	bne.n	80061ba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d03c      	beq.n	800625e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01c      	beq.n	8006226 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ec:	4b52      	ldr	r3, [pc, #328]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f2:	4a51      	ldr	r2, [pc, #324]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fc:	f7fe fb0e 	bl	800481c <HAL_GetTick>
 8006200:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006204:	f7fe fb0a 	bl	800481c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e254      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006216:	4b48      	ldr	r3, [pc, #288]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800621c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0ef      	beq.n	8006204 <HAL_RCC_OscConfig+0x3a8>
 8006224:	e01b      	b.n	800625e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006226:	4b44      	ldr	r3, [pc, #272]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800622c:	4a42      	ldr	r2, [pc, #264]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800622e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006232:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006236:	f7fe faf1 	bl	800481c <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800623e:	f7fe faed 	bl	800481c <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e237      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006250:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ef      	bne.n	800623e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80d2 	beq.w	8006410 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800626c:	4b34      	ldr	r3, [pc, #208]	@ (8006340 <HAL_RCC_OscConfig+0x4e4>)
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d118      	bne.n	80062aa <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006278:	4b31      	ldr	r3, [pc, #196]	@ (8006340 <HAL_RCC_OscConfig+0x4e4>)
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	4a30      	ldr	r2, [pc, #192]	@ (8006340 <HAL_RCC_OscConfig+0x4e4>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006284:	f7fe faca 	bl	800481c <HAL_GetTick>
 8006288:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628c:	f7fe fac6 	bl	800481c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e210      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800629e:	4b28      	ldr	r3, [pc, #160]	@ (8006340 <HAL_RCC_OscConfig+0x4e4>)
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d108      	bne.n	80062c4 <HAL_RCC_OscConfig+0x468>
 80062b2:	4b21      	ldr	r3, [pc, #132]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062c2:	e074      	b.n	80063ae <HAL_RCC_OscConfig+0x552>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d118      	bne.n	80062fe <HAL_RCC_OscConfig+0x4a2>
 80062cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d2:	4a19      	ldr	r2, [pc, #100]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062dc:	4b16      	ldr	r3, [pc, #88]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062e2:	4a15      	ldr	r2, [pc, #84]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062ec:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062f2:	4a11      	ldr	r2, [pc, #68]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062f4:	f023 0304 	bic.w	r3, r3, #4
 80062f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062fc:	e057      	b.n	80063ae <HAL_RCC_OscConfig+0x552>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b05      	cmp	r3, #5
 8006304:	d11e      	bne.n	8006344 <HAL_RCC_OscConfig+0x4e8>
 8006306:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800630c:	4a0a      	ldr	r2, [pc, #40]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006316:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800631c:	4a06      	ldr	r2, [pc, #24]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800631e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006322:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006326:	4b04      	ldr	r3, [pc, #16]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800632c:	4a02      	ldr	r2, [pc, #8]	@ (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006336:	e03a      	b.n	80063ae <HAL_RCC_OscConfig+0x552>
 8006338:	44020c00 	.word	0x44020c00
 800633c:	20000028 	.word	0x20000028
 8006340:	44020800 	.word	0x44020800
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b85      	cmp	r3, #133	@ 0x85
 800634a:	d118      	bne.n	800637e <HAL_RCC_OscConfig+0x522>
 800634c:	4ba2      	ldr	r3, [pc, #648]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800634e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006352:	4aa1      	ldr	r2, [pc, #644]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006354:	f043 0304 	orr.w	r3, r3, #4
 8006358:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800635c:	4b9e      	ldr	r3, [pc, #632]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800635e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006362:	4a9d      	ldr	r2, [pc, #628]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006368:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800636c:	4b9a      	ldr	r3, [pc, #616]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800636e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006372:	4a99      	ldr	r2, [pc, #612]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800637c:	e017      	b.n	80063ae <HAL_RCC_OscConfig+0x552>
 800637e:	4b96      	ldr	r3, [pc, #600]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006384:	4a94      	ldr	r2, [pc, #592]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800638e:	4b92      	ldr	r3, [pc, #584]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006394:	4a90      	ldr	r2, [pc, #576]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006396:	f023 0304 	bic.w	r3, r3, #4
 800639a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800639e:	4b8e      	ldr	r3, [pc, #568]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80063a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063a4:	4a8c      	ldr	r2, [pc, #560]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80063a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fe fa31 	bl	800481c <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063bc:	e00a      	b.n	80063d4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fe fa2d 	bl	800481c <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e175      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d4:	4b80      	ldr	r3, [pc, #512]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80063d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0ed      	beq.n	80063be <HAL_RCC_OscConfig+0x562>
 80063e2:	e015      	b.n	8006410 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fe fa1a 	bl	800481c <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fe fa16 	bl	800481c <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e15e      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006402:	4b75      	ldr	r3, [pc, #468]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ed      	bne.n	80063ec <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d036      	beq.n	800648a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d019      	beq.n	8006458 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006424:	4b6c      	ldr	r3, [pc, #432]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6b      	ldr	r2, [pc, #428]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800642a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800642e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fe f9f4 	bl	800481c <HAL_GetTick>
 8006434:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006438:	f7fe f9f0 	bl	800481c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e13a      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800644a:	4b63      	ldr	r3, [pc, #396]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x5dc>
 8006456:	e018      	b.n	800648a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006458:	4b5f      	ldr	r3, [pc, #380]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a5e      	ldr	r2, [pc, #376]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800645e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006462:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006464:	f7fe f9da 	bl	800481c <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800646c:	f7fe f9d6 	bl	800481c <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e120      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800647e:	4b56      	ldr	r3, [pc, #344]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8115 	beq.w	80066be <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b18      	cmp	r3, #24
 8006498:	f000 80af 	beq.w	80065fa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	f040 8086 	bne.w	80065b2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80064a6:	4b4c      	ldr	r3, [pc, #304]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4b      	ldr	r2, [pc, #300]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80064ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fe f9b3 	bl	800481c <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80064ba:	f7fe f9af 	bl	800481c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0f9      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064cc:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80064d8:	4b3f      	ldr	r3, [pc, #252]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064ec:	0212      	lsls	r2, r2, #8
 80064ee:	430a      	orrs	r2, r1
 80064f0:	4939      	ldr	r1, [pc, #228]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fa:	3b01      	subs	r3, #1
 80064fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006504:	3b01      	subs	r3, #1
 8006506:	025b      	lsls	r3, r3, #9
 8006508:	b29b      	uxth	r3, r3
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006510:	3b01      	subs	r3, #1
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	3b01      	subs	r3, #1
 8006520:	061b      	lsls	r3, r3, #24
 8006522:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006526:	492c      	ldr	r1, [pc, #176]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006528:	4313      	orrs	r3, r2
 800652a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800652c:	4b2a      	ldr	r3, [pc, #168]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	4a29      	ldr	r2, [pc, #164]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006532:	f023 0310 	bic.w	r3, r3, #16
 8006536:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653c:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006542:	4b25      	ldr	r3, [pc, #148]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	4a24      	ldr	r2, [pc, #144]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006548:	f043 0310 	orr.w	r3, r3, #16
 800654c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800654e:	4b22      	ldr	r3, [pc, #136]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	f023 020c 	bic.w	r2, r3, #12
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	491f      	ldr	r1, [pc, #124]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800655c:	4313      	orrs	r3, r2
 800655e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006560:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f023 0220 	bic.w	r2, r3, #32
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656c:	491a      	ldr	r1, [pc, #104]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 800656e:	4313      	orrs	r3, r2
 8006570:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006572:	4b19      	ldr	r3, [pc, #100]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	4a18      	ldr	r2, [pc, #96]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800657c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800657e:	4b16      	ldr	r3, [pc, #88]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 8006584:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658a:	f7fe f947 	bl	800481c <HAL_GetTick>
 800658e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006592:	f7fe f943 	bl	800481c <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e08d      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80065a4:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x736>
 80065b0:	e085      	b.n	80066be <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80065b2:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <HAL_RCC_OscConfig+0x77c>)
 80065b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fe f92d 	bl	800481c <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80065c4:	e00a      	b.n	80065dc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80065c6:	f7fe f929 	bl	800481c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d903      	bls.n	80065dc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e073      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
 80065d8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80065dc:	4b3a      	ldr	r3, [pc, #232]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1ee      	bne.n	80065c6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80065e8:	4b37      	ldr	r3, [pc, #220]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	4a36      	ldr	r2, [pc, #216]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80065ee:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	6293      	str	r3, [r2, #40]	@ 0x28
 80065f8:	e061      	b.n	80066be <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80065fa:	4b33      	ldr	r3, [pc, #204]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006600:	4b31      	ldr	r3, [pc, #196]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 8006602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006604:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	2b01      	cmp	r3, #1
 800660c:	d031      	beq.n	8006672 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 0203 	and.w	r2, r3, #3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d12a      	bne.n	8006672 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006628:	429a      	cmp	r2, r3
 800662a:	d122      	bne.n	8006672 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006636:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006638:	429a      	cmp	r2, r3
 800663a:	d11a      	bne.n	8006672 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	0a5b      	lsrs	r3, r3, #9
 8006640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800664a:	429a      	cmp	r2, r3
 800664c:	d111      	bne.n	8006672 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800665c:	429a      	cmp	r2, r3
 800665e:	d108      	bne.n	8006672 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	0e1b      	lsrs	r3, r3, #24
 8006664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800666e:	429a      	cmp	r2, r3
 8006670:	d001      	beq.n	8006676 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e024      	b.n	80066c0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006676:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006684:	429a      	cmp	r2, r3
 8006686:	d01a      	beq.n	80066be <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006688:	4b0f      	ldr	r3, [pc, #60]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	4a0e      	ldr	r2, [pc, #56]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fe f8c2 	bl	800481c <HAL_GetTick>
 8006698:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800669a:	bf00      	nop
 800669c:	f7fe f8be 	bl	800481c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d0f9      	beq.n	800669c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ac:	4a06      	ldr	r2, [pc, #24]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	4a04      	ldr	r2, [pc, #16]	@ (80066c8 <HAL_RCC_OscConfig+0x86c>)
 80066b8:	f043 0310 	orr.w	r3, r3, #16
 80066bc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	44020c00 	.word	0x44020c00

080066cc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e19e      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e0:	4b83      	ldr	r3, [pc, #524]	@ (80068f0 <HAL_RCC_ClockConfig+0x224>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d910      	bls.n	8006710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	4b80      	ldr	r3, [pc, #512]	@ (80068f0 <HAL_RCC_ClockConfig+0x224>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f023 020f 	bic.w	r2, r3, #15
 80066f6:	497e      	ldr	r1, [pc, #504]	@ (80068f0 <HAL_RCC_ClockConfig+0x224>)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	4b7c      	ldr	r3, [pc, #496]	@ (80068f0 <HAL_RCC_ClockConfig+0x224>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e186      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b00      	cmp	r3, #0
 800671a:	d012      	beq.n	8006742 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	4b74      	ldr	r3, [pc, #464]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800672a:	429a      	cmp	r2, r3
 800672c:	d909      	bls.n	8006742 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800672e:	4b71      	ldr	r3, [pc, #452]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	496d      	ldr	r1, [pc, #436]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 800673e:	4313      	orrs	r3, r2
 8006740:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d012      	beq.n	8006774 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	4b68      	ldr	r3, [pc, #416]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800675c:	429a      	cmp	r2, r3
 800675e:	d909      	bls.n	8006774 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006760:	4b64      	ldr	r3, [pc, #400]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	4961      	ldr	r1, [pc, #388]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006770:	4313      	orrs	r3, r2
 8006772:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	4b5b      	ldr	r3, [pc, #364]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800678c:	429a      	cmp	r2, r3
 800678e:	d908      	bls.n	80067a2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006790:	4b58      	ldr	r3, [pc, #352]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4955      	ldr	r1, [pc, #340]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d010      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	4b50      	ldr	r3, [pc, #320]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d908      	bls.n	80067d0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80067be:	4b4d      	ldr	r3, [pc, #308]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f023 020f 	bic.w	r2, r3, #15
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	494a      	ldr	r1, [pc, #296]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8093 	beq.w	8006904 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d107      	bne.n	80067f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80067e6:	4b43      	ldr	r3, [pc, #268]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d121      	bne.n	8006836 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e113      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d107      	bne.n	800680e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067fe:	4b3d      	ldr	r3, [pc, #244]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d115      	bne.n	8006836 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e107      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d107      	bne.n	8006826 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006816:	4b37      	ldr	r3, [pc, #220]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e0fb      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006826:	4b33      	ldr	r3, [pc, #204]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0f3      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006836:	4b2f      	ldr	r3, [pc, #188]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f023 0203 	bic.w	r2, r3, #3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	492c      	ldr	r1, [pc, #176]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006844:	4313      	orrs	r3, r2
 8006846:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006848:	f7fd ffe8 	bl	800481c <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d112      	bne.n	800687c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006856:	e00a      	b.n	800686e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006858:	f7fd ffe0 	bl	800481c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e0d7      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800686e:	4b21      	ldr	r3, [pc, #132]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 0318 	and.w	r3, r3, #24
 8006876:	2b18      	cmp	r3, #24
 8006878:	d1ee      	bne.n	8006858 <HAL_RCC_ClockConfig+0x18c>
 800687a:	e043      	b.n	8006904 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d112      	bne.n	80068aa <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006884:	e00a      	b.n	800689c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006886:	f7fd ffc9 	bl	800481c <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e0c0      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800689c:	4b15      	ldr	r3, [pc, #84]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f003 0318 	and.w	r3, r3, #24
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d1ee      	bne.n	8006886 <HAL_RCC_ClockConfig+0x1ba>
 80068a8:	e02c      	b.n	8006904 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d122      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80068b4:	f7fd ffb2 	bl	800481c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e0a9      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80068ca:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <HAL_RCC_ClockConfig+0x228>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0318 	and.w	r3, r3, #24
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d1ee      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x1e8>
 80068d6:	e015      	b.n	8006904 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80068d8:	f7fd ffa0 	bl	800481c <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d906      	bls.n	80068f8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e097      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80068f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f003 0318 	and.w	r3, r3, #24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e9      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	4b44      	ldr	r3, [pc, #272]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	429a      	cmp	r2, r3
 800691e:	d208      	bcs.n	8006932 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006920:	4b41      	ldr	r3, [pc, #260]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f023 020f 	bic.w	r2, r3, #15
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	493e      	ldr	r1, [pc, #248]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006932:	4b3e      	ldr	r3, [pc, #248]	@ (8006a2c <HAL_RCC_ClockConfig+0x360>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d210      	bcs.n	8006962 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006940:	4b3a      	ldr	r3, [pc, #232]	@ (8006a2c <HAL_RCC_ClockConfig+0x360>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f023 020f 	bic.w	r2, r3, #15
 8006948:	4938      	ldr	r1, [pc, #224]	@ (8006a2c <HAL_RCC_ClockConfig+0x360>)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	4313      	orrs	r3, r2
 800694e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006950:	4b36      	ldr	r3, [pc, #216]	@ (8006a2c <HAL_RCC_ClockConfig+0x360>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d001      	beq.n	8006962 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e05d      	b.n	8006a1e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	4b2d      	ldr	r3, [pc, #180]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800697a:	429a      	cmp	r2, r3
 800697c:	d208      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800697e:	4b2a      	ldr	r3, [pc, #168]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4927      	ldr	r1, [pc, #156]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d012      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b21      	ldr	r3, [pc, #132]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d209      	bcs.n	80069c2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80069ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	491a      	ldr	r1, [pc, #104]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d012      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	4b15      	ldr	r3, [pc, #84]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069dc:	429a      	cmp	r2, r3
 80069de:	d209      	bcs.n	80069f4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80069e0:	4b11      	ldr	r3, [pc, #68]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	490e      	ldr	r1, [pc, #56]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80069f4:	f000 f822 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <HAL_RCC_ClockConfig+0x35c>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	490b      	ldr	r1, [pc, #44]	@ (8006a30 <HAL_RCC_ClockConfig+0x364>)
 8006a04:	5ccb      	ldrb	r3, [r1, r3]
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a34 <HAL_RCC_ClockConfig+0x368>)
 8006a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <HAL_RCC_ClockConfig+0x36c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd fe78 	bl	8004708 <HAL_InitTick>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	44020c00 	.word	0x44020c00
 8006a2c:	40022000 	.word	0x40022000
 8006a30:	080124fc 	.word	0x080124fc
 8006a34:	20000024 	.word	0x20000024
 8006a38:	20000028 	.word	0x20000028

08006a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	@ 0x24
 8006a40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006a42:	4b8c      	ldr	r3, [pc, #560]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0318 	and.w	r3, r3, #24
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d102      	bne.n	8006a54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a4e:	4b8a      	ldr	r3, [pc, #552]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	e107      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a54:	4b87      	ldr	r3, [pc, #540]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f003 0318 	and.w	r3, r3, #24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d112      	bne.n	8006a86 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006a60:	4b84      	ldr	r3, [pc, #528]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a6c:	4b81      	ldr	r3, [pc, #516]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	4a81      	ldr	r2, [pc, #516]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0x240>)
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e0f1      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006a80:	4b7e      	ldr	r3, [pc, #504]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0x240>)
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	e0ee      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a86:	4b7b      	ldr	r3, [pc, #492]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f003 0318 	and.w	r3, r3, #24
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d102      	bne.n	8006a98 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a92:	4b7b      	ldr	r3, [pc, #492]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0x244>)
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e0e5      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a98:	4b76      	ldr	r3, [pc, #472]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f003 0318 	and.w	r3, r3, #24
 8006aa0:	2b18      	cmp	r3, #24
 8006aa2:	f040 80dd 	bne.w	8006c60 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006aa6:	4b73      	ldr	r3, [pc, #460]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006ab0:	4b70      	ldr	r3, [pc, #448]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006abc:	4b6d      	ldr	r3, [pc, #436]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	091b      	lsrs	r3, r3, #4
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006acc:	08db      	lsrs	r3, r3, #3
 8006ace:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	ee07 3a90 	vmov	s15, r3
 8006adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80b7 	beq.w	8006c5a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d003      	beq.n	8006afa <HAL_RCC_GetSysClockFreq+0xbe>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d056      	beq.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x16a>
 8006af8:	e077      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006afa:	4b5e      	ldr	r3, [pc, #376]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02d      	beq.n	8006b62 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b06:	4b5b      	ldr	r3, [pc, #364]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	08db      	lsrs	r3, r3, #3
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	4a5a      	ldr	r2, [pc, #360]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0x240>)
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b30:	4b50      	ldr	r3, [pc, #320]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b44:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x248>
 8006b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006b60:	e065      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006c88 <HAL_RCC_GetSysClockFreq+0x24c>
 8006b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b74:	4b3f      	ldr	r3, [pc, #252]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b84:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b88:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x248>
 8006b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006ba4:	e043      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006c8c <HAL_RCC_GetSysClockFreq+0x250>
 8006bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bcc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x248>
 8006bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006be8:	e021      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c90 <HAL_RCC_GetSysClockFreq+0x254>
 8006bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c10:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x248>
 8006c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c28:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006c2c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006c2e:	4b11      	ldr	r3, [pc, #68]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	0a5b      	lsrs	r3, r3, #9
 8006c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c38:	3301      	adds	r3, #1
 8006c3a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c46:	edd7 6a06 	vldr	s13, [r7, #24]
 8006c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c52:	ee17 3a90 	vmov	r3, s15
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e004      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e001      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006c60:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0x240>)
 8006c62:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3724      	adds	r7, #36	@ 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	44020c00 	.word	0x44020c00
 8006c78:	003d0900 	.word	0x003d0900
 8006c7c:	03d09000 	.word	0x03d09000
 8006c80:	017d7840 	.word	0x017d7840
 8006c84:	46000000 	.word	0x46000000
 8006c88:	4c742400 	.word	0x4c742400
 8006c8c:	4bbebc20 	.word	0x4bbebc20
 8006c90:	4a742400 	.word	0x4a742400

08006c94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c98:	f7ff fed0 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b08      	ldr	r3, [pc, #32]	@ (8006cc0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ca2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ca6:	4907      	ldr	r1, [pc, #28]	@ (8006cc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8006ca8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006caa:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	4a05      	ldr	r2, [pc, #20]	@ (8006cc8 <HAL_RCC_GetHCLKFreq+0x34>)
 8006cb4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006cb6:	4b04      	ldr	r3, [pc, #16]	@ (8006cc8 <HAL_RCC_GetHCLKFreq+0x34>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	44020c00 	.word	0x44020c00
 8006cc4:	080124fc 	.word	0x080124fc
 8006cc8:	20000024 	.word	0x20000024

08006ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006cd0:	f7ff ffe0 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b06      	ldr	r3, [pc, #24]	@ (8006cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	4904      	ldr	r1, [pc, #16]	@ (8006cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ce2:	5ccb      	ldrb	r3, [r1, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	44020c00 	.word	0x44020c00
 8006cf4:	0801250c 	.word	0x0801250c

08006cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006cfc:	f7ff ffca 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	4904      	ldr	r1, [pc, #16]	@ (8006d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d0e:	5ccb      	ldrb	r3, [r1, r3]
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	44020c00 	.word	0x44020c00
 8006d20:	0801250c 	.word	0x0801250c

08006d24 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006d28:	f7ff ffb4 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	0b1b      	lsrs	r3, r3, #12
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	4904      	ldr	r1, [pc, #16]	@ (8006d4c <HAL_RCC_GetPCLK3Freq+0x28>)
 8006d3a:	5ccb      	ldrb	r3, [r1, r3]
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	44020c00 	.word	0x44020c00
 8006d4c:	0801250c 	.word	0x0801250c

08006d50 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d54:	b0d8      	sub	sp, #352	@ 0x160
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006d74:	2500      	movs	r5, #0
 8006d76:	ea54 0305 	orrs.w	r3, r4, r5
 8006d7a:	d00b      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006d7c:	4bcd      	ldr	r3, [pc, #820]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d82:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8c:	4ac9      	ldr	r2, [pc, #804]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f002 0801 	and.w	r8, r2, #1
 8006da0:	f04f 0900 	mov.w	r9, #0
 8006da4:	ea58 0309 	orrs.w	r3, r8, r9
 8006da8:	d042      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d823      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006db4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006dd5 	.word	0x08006dd5
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006e05 	.word	0x08006e05
 8006dcc:	08006e05 	.word	0x08006e05
 8006dd0:	08006e05 	.word	0x08006e05
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dd8:	3308      	adds	r3, #8
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f004 feda 	bl	800bb94 <RCCEx_PLL2_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006de6:	e00e      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dec:	3330      	adds	r3, #48	@ 0x30
 8006dee:	4618      	mov	r0, r3
 8006df0:	f004 ff68 	bl	800bcc4 <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006e0e:	4ba9      	ldr	r3, [pc, #676]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e14:	f023 0107 	bic.w	r1, r3, #7
 8006e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1e:	4aa5      	ldr	r2, [pc, #660]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e26:	e003      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f002 0a02 	and.w	sl, r2, #2
 8006e3c:	f04f 0b00 	mov.w	fp, #0
 8006e40:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e44:	f000 8088 	beq.w	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));


    switch (pPeriphClkInit->Usart2ClockSelection)
 8006e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e4e:	2b28      	cmp	r3, #40	@ 0x28
 8006e50:	d868      	bhi.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e52:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006f2d 	.word	0x08006f2d
 8006e5c:	08006f25 	.word	0x08006f25
 8006e60:	08006f25 	.word	0x08006f25
 8006e64:	08006f25 	.word	0x08006f25
 8006e68:	08006f25 	.word	0x08006f25
 8006e6c:	08006f25 	.word	0x08006f25
 8006e70:	08006f25 	.word	0x08006f25
 8006e74:	08006f25 	.word	0x08006f25
 8006e78:	08006efd 	.word	0x08006efd
 8006e7c:	08006f25 	.word	0x08006f25
 8006e80:	08006f25 	.word	0x08006f25
 8006e84:	08006f25 	.word	0x08006f25
 8006e88:	08006f25 	.word	0x08006f25
 8006e8c:	08006f25 	.word	0x08006f25
 8006e90:	08006f25 	.word	0x08006f25
 8006e94:	08006f25 	.word	0x08006f25
 8006e98:	08006f11 	.word	0x08006f11
 8006e9c:	08006f25 	.word	0x08006f25
 8006ea0:	08006f25 	.word	0x08006f25
 8006ea4:	08006f25 	.word	0x08006f25
 8006ea8:	08006f25 	.word	0x08006f25
 8006eac:	08006f25 	.word	0x08006f25
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006f25 	.word	0x08006f25
 8006eb8:	08006f2d 	.word	0x08006f2d
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08006f25 	.word	0x08006f25
 8006ec8:	08006f25 	.word	0x08006f25
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006f25 	.word	0x08006f25
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006f25 	.word	0x08006f25
 8006ee0:	08006f25 	.word	0x08006f25
 8006ee4:	08006f25 	.word	0x08006f25
 8006ee8:	08006f25 	.word	0x08006f25
 8006eec:	08006f25 	.word	0x08006f25
 8006ef0:	08006f25 	.word	0x08006f25
 8006ef4:	08006f25 	.word	0x08006f25
 8006ef8:	08006f2d 	.word	0x08006f2d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f00:	3308      	adds	r3, #8
 8006f02:	4618      	mov	r0, r3
 8006f04:	f004 fe46 	bl	800bb94 <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006f0e:	e00e      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f14:	3330      	adds	r3, #48	@ 0x30
 8006f16:	4618      	mov	r0, r3
 8006f18:	f004 fed4 	bl	800bcc4 <RCCEx_PLL3_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006f22:	e004      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f2a:	e000      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10c      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006f36:	4b5f      	ldr	r3, [pc, #380]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f3c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f46:	4a5b      	ldr	r2, [pc, #364]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f4e:	e003      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f002 0304 	and.w	r3, r2, #4
 8006f64:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006f6e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8006f72:	460b      	mov	r3, r1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	d04e      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f7e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006f82:	d02c      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006f84:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006f88:	d825      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8e:	d028      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f94:	d81f      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f98:	d025      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f9c:	d81b      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f9e:	2b80      	cmp	r3, #128	@ 0x80
 8006fa0:	d00f      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006fa2:	2b80      	cmp	r3, #128	@ 0x80
 8006fa4:	d817      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01f      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006faa:	2b40      	cmp	r3, #64	@ 0x40
 8006fac:	d113      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f004 fded 	bl	800bb94 <RCCEx_PLL2_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006fc0:	e014      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc6:	3330      	adds	r3, #48	@ 0x30
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f004 fe7b 	bl	800bcc4 <RCCEx_PLL3_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006fd4:	e00a      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006fde:	bf00      	nop
 8006fe0:	e004      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10c      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ffa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007004:	4a2b      	ldr	r2, [pc, #172]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007006:	430b      	orrs	r3, r1
 8007008:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007012:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f002 0308 	and.w	r3, r2, #8
 8007022:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007026:	2300      	movs	r3, #0
 8007028:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800702c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8007030:	460b      	mov	r3, r1
 8007032:	4313      	orrs	r3, r2
 8007034:	d056      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800703a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800703c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007040:	d031      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007042:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007046:	d82a      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800704c:	d02d      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800704e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007052:	d824      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007054:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007058:	d029      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800705a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800705e:	d81e      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007064:	d011      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706a:	d818      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d023      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007074:	d113      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007076:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800707a:	3308      	adds	r3, #8
 800707c:	4618      	mov	r0, r3
 800707e:	f004 fd89 	bl	800bb94 <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007088:	e017      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800708a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800708e:	3330      	adds	r3, #48	@ 0x30
 8007090:	4618      	mov	r0, r3
 8007092:	f004 fe17 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800709c:	e00d      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070a4:	e009      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80070a6:	bf00      	nop
 80070a8:	e007      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80070aa:	bf00      	nop
 80070ac:	e005      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80070ae:	bf00      	nop
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80070b2:	bf00      	nop
 80070b4:	44020c00 	.word	0x44020c00
        break;
 80070b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10c      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80070c2:	4bbb      	ldr	r3, [pc, #748]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80070c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80070c8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80070cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070d2:	4ab7      	ldr	r2, [pc, #732]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80070d4:	430b      	orrs	r3, r1
 80070d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80070da:	e003      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f002 0310 	and.w	r3, r2, #16
 80070f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80070fa:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80070fe:	460b      	mov	r3, r1
 8007100:	4313      	orrs	r3, r2
 8007102:	d053      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800710e:	d031      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007110:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007114:	d82a      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711a:	d02d      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007120:	d824      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007126:	d029      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007128:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800712c:	d81e      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007132:	d011      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007138:	d818      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d020      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007142:	d113      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007148:	3308      	adds	r3, #8
 800714a:	4618      	mov	r0, r3
 800714c:	f004 fd22 	bl	800bb94 <RCCEx_PLL2_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007156:	e014      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007158:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800715c:	3330      	adds	r3, #48	@ 0x30
 800715e:	4618      	mov	r0, r3
 8007160:	f004 fdb0 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800716a:	e00a      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007172:	e006      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007174:	bf00      	nop
 8007176:	e004      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007178:	bf00      	nop
 800717a:	e002      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800717c:	bf00      	nop
 800717e:	e000      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007182:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10c      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800718a:	4b89      	ldr	r3, [pc, #548]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800718c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007190:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800719a:	4a85      	ldr	r2, [pc, #532]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800719c:	430b      	orrs	r3, r1
 800719e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f002 0320 	and.w	r3, r2, #32
 80071b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80071c2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	d053      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80071cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80071d6:	d031      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80071d8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80071dc:	d82a      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80071de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071e2:	d02d      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80071e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071e8:	d824      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80071ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80071ee:	d029      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80071f0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80071f4:	d81e      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80071f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071fa:	d011      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007200:	d818      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d020      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800720a:	d113      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800720c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007210:	3308      	adds	r3, #8
 8007212:	4618      	mov	r0, r3
 8007214:	f004 fcbe 	bl	800bb94 <RCCEx_PLL2_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800721e:	e014      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007224:	3330      	adds	r3, #48	@ 0x30
 8007226:	4618      	mov	r0, r3
 8007228:	f004 fd4c 	bl	800bcc4 <RCCEx_PLL3_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8007232:	e00a      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800723a:	e006      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800723c:	bf00      	nop
 800723e:	e004      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007240:	bf00      	nop
 8007242:	e002      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007244:	bf00      	nop
 8007246:	e000      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10c      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007252:	4b57      	ldr	r3, [pc, #348]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007254:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007258:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800725c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007262:	4a53      	ldr	r2, [pc, #332]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007264:	430b      	orrs	r3, r1
 8007266:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007270:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007274:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007280:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007284:	2300      	movs	r3, #0
 8007286:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800728a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800728e:	460b      	mov	r3, r1
 8007290:	4313      	orrs	r3, r2
 8007292:	d053      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8007294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800729e:	d031      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80072a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80072a4:	d82a      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072aa:	d02d      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80072ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072b0:	d824      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80072b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80072b6:	d029      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80072b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80072bc:	d81e      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80072be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80072c2:	d011      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80072c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80072c8:	d818      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d020      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072d2:	d113      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d8:	3308      	adds	r3, #8
 80072da:	4618      	mov	r0, r3
 80072dc:	f004 fc5a 	bl	800bb94 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80072e6:	e014      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ec:	3330      	adds	r3, #48	@ 0x30
 80072ee:	4618      	mov	r0, r3
 80072f0:	f004 fce8 	bl	800bcc4 <RCCEx_PLL3_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80072fa:	e00a      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007302:	e006      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007304:	bf00      	nop
 8007306:	e004      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007308:	bf00      	nop
 800730a:	e002      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800730c:	bf00      	nop
 800730e:	e000      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007312:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10c      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800731a:	4b25      	ldr	r3, [pc, #148]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800731c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007320:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007324:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732a:	4a21      	ldr	r2, [pc, #132]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800732c:	430b      	orrs	r3, r1
 800732e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007332:	e003      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007338:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800733c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007348:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800734c:	2300      	movs	r3, #0
 800734e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007352:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007356:	460b      	mov	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	d055      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800735c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007362:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007366:	d033      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007368:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800736c:	d82c      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800736e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007372:	d02f      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007378:	d826      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800737a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800737e:	d02b      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007380:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007384:	d820      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800738a:	d013      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800738c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007390:	d81a      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d022      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800739a:	d115      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800739c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073a0:	3308      	adds	r3, #8
 80073a2:	4618      	mov	r0, r3
 80073a4:	f004 fbf6 	bl	800bb94 <RCCEx_PLL2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80073ae:	e016      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80073b0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073b8:	3330      	adds	r3, #48	@ 0x30
 80073ba:	4618      	mov	r0, r3
 80073bc:	f004 fc82 	bl	800bcc4 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80073c6:	e00a      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073ce:	e006      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80073d0:	bf00      	nop
 80073d2:	e004      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80073d4:	bf00      	nop
 80073d6:	e002      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80073d8:	bf00      	nop
 80073da:	e000      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80073dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10c      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80073e6:	4bbb      	ldr	r3, [pc, #748]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80073e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80073ec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80073f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073f6:	4ab7      	ldr	r2, [pc, #732]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80073f8:	430b      	orrs	r3, r1
 80073fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80073fe:	e003      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007404:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007414:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007418:	2300      	movs	r3, #0
 800741a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800741e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007422:	460b      	mov	r3, r1
 8007424:	4313      	orrs	r3, r2
 8007426:	d053      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800742c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800742e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007432:	d031      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007434:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007438:	d82a      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800743a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800743e:	d02d      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007444:	d824      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007446:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800744a:	d029      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800744c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007450:	d81e      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007456:	d011      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007458:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800745c:	d818      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8007462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007466:	d113      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800746c:	3308      	adds	r3, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f004 fb90 	bl	800bb94 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800747a:	e014      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800747c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007480:	3330      	adds	r3, #48	@ 0x30
 8007482:	4618      	mov	r0, r3
 8007484:	f004 fc1e 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800748e:	e00a      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007496:	e006      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007498:	bf00      	nop
 800749a:	e004      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800749c:	bf00      	nop
 800749e:	e002      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80074a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10c      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80074ae:	4b89      	ldr	r3, [pc, #548]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80074b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074be:	4a85      	ldr	r2, [pc, #532]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80074c0:	430b      	orrs	r3, r1
 80074c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074c6:	e003      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80074d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80074dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80074e0:	2300      	movs	r3, #0
 80074e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80074e6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80074ea:	460b      	mov	r3, r1
 80074ec:	4313      	orrs	r3, r2
 80074ee:	d055      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80074f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80074fc:	d031      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80074fe:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007502:	d82a      	bhi.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007508:	d02d      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800750a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800750e:	d824      	bhi.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007510:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007514:	d029      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007516:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800751a:	d81e      	bhi.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800751c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007520:	d011      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007526:	d818      	bhi.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d020      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800752c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007530:	d113      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007532:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007536:	3308      	adds	r3, #8
 8007538:	4618      	mov	r0, r3
 800753a:	f004 fb2b 	bl	800bb94 <RCCEx_PLL2_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007544:	e014      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007546:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800754a:	3330      	adds	r3, #48	@ 0x30
 800754c:	4618      	mov	r0, r3
 800754e:	f004 fbb9 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007558:	e00a      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007560:	e006      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007562:	bf00      	nop
 8007564:	e004      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007566:	bf00      	nop
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800756e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007570:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10d      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007578:	4b56      	ldr	r3, [pc, #344]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800757a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800757e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8007582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758a:	4a52      	ldr	r2, [pc, #328]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800758c:	430b      	orrs	r3, r1
 800758e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007592:	e003      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007598:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800759c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80075a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075b2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d044      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80075bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c4:	2b05      	cmp	r3, #5
 80075c6:	d823      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80075c8:	a201      	add	r2, pc, #4	@ (adr r2, 80075d0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007619 	.word	0x08007619
 80075d4:	080075e9 	.word	0x080075e9
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007619 	.word	0x08007619
 80075e0:	08007619 	.word	0x08007619
 80075e4:	08007619 	.word	0x08007619
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ec:	3308      	adds	r3, #8
 80075ee:	4618      	mov	r0, r3
 80075f0:	f004 fad0 	bl	800bb94 <RCCEx_PLL2_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80075fa:	e00e      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007600:	3330      	adds	r3, #48	@ 0x30
 8007602:	4618      	mov	r0, r3
 8007604:	f004 fb5e 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800760e:	e004      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007616:	e000      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10d      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007622:	4b2c      	ldr	r3, [pc, #176]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007624:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007628:	f023 0107 	bic.w	r1, r3, #7
 800762c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007634:	4a27      	ldr	r2, [pc, #156]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007636:	430b      	orrs	r3, r1
 8007638:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800763c:	e003      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007642:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007652:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007656:	2300      	movs	r3, #0
 8007658:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800765c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007660:	460b      	mov	r3, r1
 8007662:	4313      	orrs	r3, r2
 8007664:	d04f      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007666:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766e:	2b50      	cmp	r3, #80	@ 0x50
 8007670:	d029      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007672:	2b50      	cmp	r3, #80	@ 0x50
 8007674:	d823      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007676:	2b40      	cmp	r3, #64	@ 0x40
 8007678:	d027      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800767a:	2b40      	cmp	r3, #64	@ 0x40
 800767c:	d81f      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800767e:	2b30      	cmp	r3, #48	@ 0x30
 8007680:	d025      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8007682:	2b30      	cmp	r3, #48	@ 0x30
 8007684:	d81b      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007686:	2b20      	cmp	r3, #32
 8007688:	d00f      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d817      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d022      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007692:	2b10      	cmp	r3, #16
 8007694:	d113      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769a:	3308      	adds	r3, #8
 800769c:	4618      	mov	r0, r3
 800769e:	f004 fa79 	bl	800bb94 <RCCEx_PLL2_Config>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80076a8:	e017      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ae:	3330      	adds	r3, #48	@ 0x30
 80076b0:	4618      	mov	r0, r3
 80076b2:	f004 fb07 	bl	800bcc4 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80076bc:	e00d      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076c4:	e009      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80076c6:	bf00      	nop
 80076c8:	e007      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80076ca:	bf00      	nop
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80076ce:	bf00      	nop
 80076d0:	e003      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80076d2:	bf00      	nop
 80076d4:	44020c00 	.word	0x44020c00
        break;
 80076d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10d      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80076e2:	4baf      	ldr	r3, [pc, #700]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80076e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076e8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80076ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f4:	4aaa      	ldr	r2, [pc, #680]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80076fc:	e003      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007702:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007706:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007712:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800771c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007720:	460b      	mov	r3, r1
 8007722:	4313      	orrs	r3, r2
 8007724:	d055      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007726:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800772a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800772e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007732:	d031      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007734:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007738:	d82a      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800773a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800773e:	d02d      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007740:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007744:	d824      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007746:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800774a:	d029      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800774c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007750:	d81e      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007756:	d011      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800775c:	d818      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d020      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007766:	d113      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800776c:	3308      	adds	r3, #8
 800776e:	4618      	mov	r0, r3
 8007770:	f004 fa10 	bl	800bb94 <RCCEx_PLL2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800777a:	e014      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800777c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007780:	3330      	adds	r3, #48	@ 0x30
 8007782:	4618      	mov	r0, r3
 8007784:	f004 fa9e 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800778e:	e00a      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007796:	e006      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007798:	bf00      	nop
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80077a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10d      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80077ae:	4b7c      	ldr	r3, [pc, #496]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80077b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80077b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077c0:	4a77      	ldr	r2, [pc, #476]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80077c2:	430b      	orrs	r3, r1
 80077c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80077de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077e2:	2300      	movs	r3, #0
 80077e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80077ec:	460b      	mov	r3, r1
 80077ee:	4313      	orrs	r3, r2
 80077f0:	d03d      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80077f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077fe:	d01b      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007804:	d814      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800780a:	d017      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800780c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007810:	d80e      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d014      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800781a:	d109      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800781c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007820:	3330      	adds	r3, #48	@ 0x30
 8007822:	4618      	mov	r0, r3
 8007824:	f004 fa4e 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800782e:	e008      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007836:	e004      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007838:	bf00      	nop
 800783a:	e002      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007842:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10d      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800784a:	4b55      	ldr	r3, [pc, #340]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800784c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007850:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785c:	4a50      	ldr	r2, [pc, #320]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800785e:	430b      	orrs	r3, r1
 8007860:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007864:	e003      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007866:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800786a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800786e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800787a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800787e:	2300      	movs	r3, #0
 8007880:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007884:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007888:	460b      	mov	r3, r1
 800788a:	4313      	orrs	r3, r2
 800788c:	d03d      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800788e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007896:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800789a:	d01b      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800789c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078a0:	d814      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80078a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078a6:	d017      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80078a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078ac:	d80e      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d014      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80078b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078b6:	d109      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078bc:	3330      	adds	r3, #48	@ 0x30
 80078be:	4618      	mov	r0, r3
 80078c0:	f004 fa00 	bl	800bcc4 <RCCEx_PLL3_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80078ca:	e008      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078d2:	e004      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80078d4:	bf00      	nop
 80078d6:	e002      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80078dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10d      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80078e6:	4b2e      	ldr	r3, [pc, #184]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80078e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078ec:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80078f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078f8:	4a29      	ldr	r2, [pc, #164]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80078fa:	430b      	orrs	r3, r1
 80078fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007900:	e003      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007906:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800790a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800791a:	2300      	movs	r3, #0
 800791c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007920:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007924:	460b      	mov	r3, r1
 8007926:	4313      	orrs	r3, r2
 8007928:	d040      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800792a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800792e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007932:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007936:	d01b      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007938:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800793c:	d814      	bhi.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800793e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007942:	d017      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007944:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007948:	d80e      	bhi.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d014      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800794e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007952:	d109      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007954:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007958:	3330      	adds	r3, #48	@ 0x30
 800795a:	4618      	mov	r0, r3
 800795c:	f004 f9b2 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007960:	4603      	mov	r3, r0
 8007962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007966:	e008      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800796e:	e004      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007970:	bf00      	nop
 8007972:	e002      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007974:	bf00      	nop
 8007976:	e000      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800797e:	2b00      	cmp	r3, #0
 8007980:	d110      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007982:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007984:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007988:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800798c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007994:	4a02      	ldr	r2, [pc, #8]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007996:	430b      	orrs	r3, r1
 8007998:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800799c:	e006      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800799e:	bf00      	nop
 80079a0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	2100      	movs	r1, #0
 80079b6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80079ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80079c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	d03d      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80079cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80079d8:	d01b      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80079da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80079de:	d814      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80079e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079e4:	d017      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80079e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079ea:	d80e      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d014      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80079f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079f4:	d109      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fa:	3330      	adds	r3, #48	@ 0x30
 80079fc:	4618      	mov	r0, r3
 80079fe:	f004 f961 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007a08:	e008      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a10:	e004      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007a12:	bf00      	nop
 8007a14:	e002      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007a16:	bf00      	nop
 8007a18:	e000      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10d      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007a24:	4bbe      	ldr	r3, [pc, #760]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007a26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a2a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a36:	4aba      	ldr	r2, [pc, #744]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a3e:	e003      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d035      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a74:	d015      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007a76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a7a:	d80e      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d012      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a84:	d109      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a8a:	3330      	adds	r3, #48	@ 0x30
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f004 f919 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007a98:	e006      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007aa0:	e002      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e000      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10d      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007ab0:	4b9b      	ldr	r3, [pc, #620]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ab6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ac2:	4a97      	ldr	r2, [pc, #604]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007aca:	e003      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ad0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	2100      	movs	r1, #0
 8007ade:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007aea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007af4:	4b8a      	ldr	r3, [pc, #552]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	4a89      	ldr	r2, [pc, #548]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007afa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007afe:	61d3      	str	r3, [r2, #28]
 8007b00:	4b87      	ldr	r3, [pc, #540]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b02:	69d9      	ldr	r1, [r3, #28]
 8007b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b08:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007b0c:	4a84      	ldr	r2, [pc, #528]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	d055      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b3a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007b3e:	d031      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007b40:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007b44:	d82a      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b4a:	d02d      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b50:	d824      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b56:	d029      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b5c:	d81e      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b62:	d011      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b68:	d818      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d020      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8007b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b72:	d113      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b78:	3308      	adds	r3, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f004 f80a 	bl	800bb94 <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007b86:	e014      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b8c:	3330      	adds	r3, #48	@ 0x30
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f004 f898 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ba2:	e006      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007ba4:	bf00      	nop
 8007ba6:	e004      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007ba8:	bf00      	nop
 8007baa:	e002      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10d      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007bba:	4b59      	ldr	r3, [pc, #356]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007bbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bc0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bcc:	4a54      	ldr	r2, [pc, #336]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007bd4:	e003      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bf4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	d055      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c0a:	d031      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007c0c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c10:	d82a      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c16:	d02d      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c1c:	d824      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c22:	d029      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007c24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c28:	d81e      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2e:	d011      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c34:	d818      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d020      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3e:	d113      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c44:	3308      	adds	r3, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f003 ffa4 	bl	800bb94 <RCCEx_PLL2_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007c52:	e014      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c58:	3330      	adds	r3, #48	@ 0x30
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f004 f832 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007c66:	e00a      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c6e:	e006      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007c70:	bf00      	nop
 8007c72:	e004      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10d      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007c86:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007c88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c98:	4a21      	ldr	r2, [pc, #132]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007ca0:	e003      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ca6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d057      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cd6:	d033      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cdc:	d82c      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ce2:	d02f      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ce8:	d826      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007cea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cee:	d02b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007cf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cf4:	d820      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cfa:	d013      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d00:	d81a      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d022      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d0a:	d115      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d10:	3308      	adds	r3, #8
 8007d12:	4618      	mov	r0, r3
 8007d14:	f003 ff3e 	bl	800bb94 <RCCEx_PLL2_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007d1e:	e016      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007d20:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d28:	3330      	adds	r3, #48	@ 0x30
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f003 ffca 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007d36:	e00a      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d3e:	e006      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007d40:	bf00      	nop
 8007d42:	e004      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007d44:	bf00      	nop
 8007d46:	e002      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007d48:	bf00      	nop
 8007d4a:	e000      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10d      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007d56:	4bbb      	ldr	r3, [pc, #748]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d68:	4ab6      	ldr	r2, [pc, #728]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007d70:	e003      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	2100      	movs	r1, #0
 8007d84:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d055      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007d9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007da2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007da6:	d031      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007da8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007dac:	d82a      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007db2:	d02d      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007db8:	d824      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007dba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dbe:	d029      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007dc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dc4:	d81e      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007dc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dca:	d011      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dd0:	d818      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dda:	d113      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007de0:	3308      	adds	r3, #8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f003 fed6 	bl	800bb94 <RCCEx_PLL2_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007dee:	e014      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007df4:	3330      	adds	r3, #48	@ 0x30
 8007df6:	4618      	mov	r0, r3
 8007df8:	f003 ff64 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007e02:	e00a      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e0a:	e006      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007e0c:	bf00      	nop
 8007e0e:	e004      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007e10:	bf00      	nop
 8007e12:	e002      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10d      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007e22:	4b88      	ldr	r3, [pc, #544]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007e24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007e28:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e34:	4a83      	ldr	r2, [pc, #524]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007e36:	430b      	orrs	r3, r1
 8007e38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007e3c:	e003      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e5c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e60:	460b      	mov	r3, r1
 8007e62:	4313      	orrs	r3, r2
 8007e64:	d055      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e6e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e72:	d031      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007e74:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e78:	d82a      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007e7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e7e:	d02d      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007e80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e84:	d824      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007e86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e8a:	d029      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007e8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e90:	d81e      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007e92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e96:	d011      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007e98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e9c:	d818      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d020      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ea6:	d113      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eac:	3308      	adds	r3, #8
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f003 fe70 	bl	800bb94 <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007eba:	e014      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ec0:	3330      	adds	r3, #48	@ 0x30
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f003 fefe 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007ece:	e00a      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ed6:	e006      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007ed8:	bf00      	nop
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007eee:	4b55      	ldr	r3, [pc, #340]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007ef0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ef4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f00:	4a50      	ldr	r2, [pc, #320]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007f02:	430b      	orrs	r3, r1
 8007f04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007f08:	e003      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8007f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f28:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	d055      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f3e:	d031      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8007f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f44:	d82a      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4a:	d02d      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f50:	d824      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007f52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f56:	d029      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007f58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f5c:	d81e      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f62:	d011      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f68:	d818      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d020      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f72:	d113      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f78:	3308      	adds	r3, #8
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f003 fe0a 	bl	800bb94 <RCCEx_PLL2_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007f86:	e014      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f8c:	3330      	adds	r3, #48	@ 0x30
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f003 fe98 	bl	800bcc4 <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007f9a:	e00a      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fa2:	e006      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007fa4:	bf00      	nop
 8007fa6:	e004      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007fa8:	bf00      	nop
 8007faa:	e002      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007fac:	bf00      	nop
 8007fae:	e000      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10d      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007fba:	4b22      	ldr	r3, [pc, #136]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007fbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007fc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007fd4:	e003      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007fea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ff4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d055      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008002:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008006:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800800a:	d035      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800800c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008010:	d82e      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008012:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008016:	d031      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008018:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800801c:	d828      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800801e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008022:	d01b      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008028:	d822      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800802e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008032:	d009      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008034:	e01c      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008036:	4b03      	ldr	r3, [pc, #12]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803a:	4a02      	ldr	r2, [pc, #8]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800803c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008040:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008042:	e01c      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008044:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800804c:	3308      	adds	r3, #8
 800804e:	4618      	mov	r0, r3
 8008050:	f003 fda0 	bl	800bb94 <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800805a:	e010      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800805c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008060:	3330      	adds	r3, #48	@ 0x30
 8008062:	4618      	mov	r0, r3
 8008064:	f003 fe2e 	bl	800bcc4 <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800806e:	e006      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008076:	e002      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008078:	bf00      	nop
 800807a:	e000      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800807c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008086:	4bc3      	ldr	r3, [pc, #780]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800808c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008094:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008098:	4abe      	ldr	r2, [pc, #760]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800809a:	430b      	orrs	r3, r1
 800809c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80080a0:	e003      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80080aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080ba:	2300      	movs	r3, #0
 80080bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080c4:	460b      	mov	r3, r1
 80080c6:	4313      	orrs	r3, r2
 80080c8:	d051      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80080ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80080d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080d6:	d033      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80080d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080dc:	d82c      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80080de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80080e2:	d02d      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80080e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80080e8:	d826      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80080ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ee:	d019      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80080f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080f4:	d820      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80080fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80080fe:	d007      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8008100:	e01a      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008102:	4ba4      	ldr	r3, [pc, #656]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	4aa3      	ldr	r2, [pc, #652]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800810c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800810e:	e018      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008114:	3308      	adds	r3, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f003 fd3c 	bl	800bb94 <RCCEx_PLL2_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008122:	e00e      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008128:	3330      	adds	r3, #48	@ 0x30
 800812a:	4618      	mov	r0, r3
 800812c:	f003 fdca 	bl	800bcc4 <RCCEx_PLL3_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008136:	e004      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800813e:	e000      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8008140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008142:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10d      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800814a:	4b92      	ldr	r3, [pc, #584]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800814c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008150:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008158:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800815c:	4a8d      	ldr	r2, [pc, #564]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800815e:	430b      	orrs	r3, r1
 8008160:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008164:	e003      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008166:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800816a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800816e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800817a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800817c:	2300      	movs	r3, #0
 800817e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008180:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d032      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800818a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800818e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008192:	2b05      	cmp	r3, #5
 8008194:	d80f      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8008196:	2b03      	cmp	r3, #3
 8008198:	d211      	bcs.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800819a:	2b01      	cmp	r3, #1
 800819c:	d911      	bls.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d109      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081a6:	3308      	adds	r3, #8
 80081a8:	4618      	mov	r0, r3
 80081aa:	f003 fcf3 	bl	800bb94 <RCCEx_PLL2_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081b4:	e006      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081bc:	e002      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80081c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10d      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80081cc:	4b71      	ldr	r3, [pc, #452]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081d2:	f023 0107 	bic.w	r1, r3, #7
 80081d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80081de:	4a6d      	ldr	r2, [pc, #436]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081e0:	430b      	orrs	r3, r1
 80081e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80081e6:	e003      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80081f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	2100      	movs	r1, #0
 80081fa:	6739      	str	r1, [r7, #112]	@ 0x70
 80081fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008200:	677b      	str	r3, [r7, #116]	@ 0x74
 8008202:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008206:	460b      	mov	r3, r1
 8008208:	4313      	orrs	r3, r2
 800820a:	d024      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800820c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8008218:	2b08      	cmp	r3, #8
 800821a:	d005      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008222:	e002      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8008232:	4b58      	ldr	r3, [pc, #352]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008238:	f023 0108 	bic.w	r1, r3, #8
 800823c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008244:	4a53      	ldr	r2, [pc, #332]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008246:	430b      	orrs	r3, r1
 8008248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800824c:	e003      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008252:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008264:	2300      	movs	r3, #0
 8008266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008268:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800826c:	460b      	mov	r3, r1
 800826e:	4313      	orrs	r3, r2
 8008270:	f000 80b9 	beq.w	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008274:	4b48      	ldr	r3, [pc, #288]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	4a47      	ldr	r2, [pc, #284]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800827a:	f043 0301 	orr.w	r3, r3, #1
 800827e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008280:	f7fc facc 	bl	800481c <HAL_GetTick>
 8008284:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008288:	e00b      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828a:	f7fc fac7 	bl	800481c <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d903      	bls.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082a0:	e005      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80082a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80082a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0ed      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80082ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 8093 	bne.w	80083de <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082b8:	4b36      	ldr	r3, [pc, #216]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082c2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80082c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d023      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80082ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082d2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80082d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01b      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082de:	4b2d      	ldr	r3, [pc, #180]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082e8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082ec:	4b29      	ldr	r3, [pc, #164]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f2:	4a28      	ldr	r2, [pc, #160]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082fc:	4b25      	ldr	r3, [pc, #148]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008302:	4a24      	ldr	r2, [pc, #144]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008308:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800830c:	4a21      	ldr	r2, [pc, #132]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800830e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008316:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d019      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008322:	f7fc fa7b 	bl	800481c <HAL_GetTick>
 8008326:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800832a:	e00d      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800832c:	f7fc fa76 	bl	800481c <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008336:	1ad2      	subs	r2, r2, r3
 8008338:	f241 3388 	movw	r3, #5000	@ 0x1388
 800833c:	429a      	cmp	r2, r3
 800833e:	d903      	bls.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008346:	e006      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008348:	4b12      	ldr	r3, [pc, #72]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800834a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0ea      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008356:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800835a:	2b00      	cmp	r3, #0
 800835c:	d13a      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800835e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008362:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800836a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800836e:	d115      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8008370:	4b08      	ldr	r3, [pc, #32]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008378:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800837c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008380:	091b      	lsrs	r3, r3, #4
 8008382:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008386:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800838a:	4a02      	ldr	r2, [pc, #8]	@ (8008394 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800838c:	430b      	orrs	r3, r1
 800838e:	61d3      	str	r3, [r2, #28]
 8008390:	e00a      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8008392:	bf00      	nop
 8008394:	44020c00 	.word	0x44020c00
 8008398:	44020800 	.word	0x44020800
 800839c:	4b9f      	ldr	r3, [pc, #636]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	4a9e      	ldr	r2, [pc, #632]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80083a6:	61d3      	str	r3, [r2, #28]
 80083a8:	4b9c      	ldr	r3, [pc, #624]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ae:	4a9b      	ldr	r2, [pc, #620]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083b8:	4b98      	ldr	r3, [pc, #608]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083ba:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80083be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80083c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ca:	4a94      	ldr	r2, [pc, #592]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083cc:	430b      	orrs	r3, r1
 80083ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083d2:	e008      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80083f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80083f4:	2300      	movs	r3, #0
 80083f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80083f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083fc:	460b      	mov	r3, r1
 80083fe:	4313      	orrs	r3, r2
 8008400:	d035      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008406:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800840a:	2b30      	cmp	r3, #48	@ 0x30
 800840c:	d014      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800840e:	2b30      	cmp	r3, #48	@ 0x30
 8008410:	d80e      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008412:	2b20      	cmp	r3, #32
 8008414:	d012      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008416:	2b20      	cmp	r3, #32
 8008418:	d80a      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d010      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800841e:	2b10      	cmp	r3, #16
 8008420:	d106      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008422:	4b7e      	ldr	r3, [pc, #504]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	4a7d      	ldr	r2, [pc, #500]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800842c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800842e:	e008      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008436:	e004      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008438:	bf00      	nop
 800843a:	e002      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800843c:	bf00      	nop
 800843e:	e000      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10d      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800844a:	4b74      	ldr	r3, [pc, #464]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800844c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008450:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008458:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800845c:	4a6f      	ldr	r2, [pc, #444]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800845e:	430b      	orrs	r3, r1
 8008460:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008464:	e003      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008466:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800846a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800846e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800847a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800847c:	2300      	movs	r3, #0
 800847e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008480:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008484:	460b      	mov	r3, r1
 8008486:	4313      	orrs	r3, r2
 8008488:	d033      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800848a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800848e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	d007      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800849a:	e010      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4b5f      	ldr	r3, [pc, #380]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800849e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a0:	4a5e      	ldr	r2, [pc, #376]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084a6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80084a8:	e00d      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084ae:	3308      	adds	r3, #8
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 fb6f 	bl	800bb94 <RCCEx_PLL2_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80084ce:	4b53      	ldr	r3, [pc, #332]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084d4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80084d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084dc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80084e0:	4a4e      	ldr	r2, [pc, #312]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80084e8:	e003      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80084f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80084fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008500:	2300      	movs	r3, #0
 8008502:	657b      	str	r3, [r7, #84]	@ 0x54
 8008504:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008508:	460b      	mov	r3, r1
 800850a:	4313      	orrs	r3, r2
 800850c:	d033      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800850e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008512:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800851a:	2b80      	cmp	r3, #128	@ 0x80
 800851c:	d007      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800851e:	e010      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008520:	4b3e      	ldr	r3, [pc, #248]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008524:	4a3d      	ldr	r2, [pc, #244]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800852a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800852c:	e00d      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800852e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008532:	3308      	adds	r3, #8
 8008534:	4618      	mov	r0, r3
 8008536:	f003 fb2d 	bl	800bb94 <RCCEx_PLL2_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008540:	e003      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10d      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8008552:	4b32      	ldr	r3, [pc, #200]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008558:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800855c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008560:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008564:	4a2d      	ldr	r2, [pc, #180]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008566:	430b      	orrs	r3, r1
 8008568:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800856c:	e003      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008572:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008584:	2300      	movs	r3, #0
 8008586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008588:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800858c:	460b      	mov	r3, r1
 800858e:	4313      	orrs	r3, r2
 8008590:	d04a      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8008592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800859a:	2b04      	cmp	r3, #4
 800859c:	d827      	bhi.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085b9 	.word	0x080085b9
 80085a8:	080085c7 	.word	0x080085c7
 80085ac:	080085db 	.word	0x080085db
 80085b0:	080085f7 	.word	0x080085f7
 80085b4:	080085f7 	.word	0x080085f7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b8:	4b18      	ldr	r3, [pc, #96]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085bc:	4a17      	ldr	r2, [pc, #92]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80085c4:	e018      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ca:	3308      	adds	r3, #8
 80085cc:	4618      	mov	r0, r3
 80085ce:	f003 fae1 	bl	800bb94 <RCCEx_PLL2_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80085d8:	e00e      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085de:	3330      	adds	r3, #48	@ 0x30
 80085e0:	4618      	mov	r0, r3
 80085e2:	f003 fb6f 	bl	800bcc4 <RCCEx_PLL3_Config>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80085ec:	e004      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085f4:	e000      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80085f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10f      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008600:	4b06      	ldr	r3, [pc, #24]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008606:	f023 0107 	bic.w	r1, r3, #7
 800860a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800860e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008612:	4a02      	ldr	r2, [pc, #8]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008614:	430b      	orrs	r3, r1
 8008616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800861a:	e005      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800861c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008620:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008624:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008634:	643b      	str	r3, [r7, #64]	@ 0x40
 8008636:	2300      	movs	r3, #0
 8008638:	647b      	str	r3, [r7, #68]	@ 0x44
 800863a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800863e:	460b      	mov	r3, r1
 8008640:	4313      	orrs	r3, r2
 8008642:	f000 8081 	beq.w	8008748 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800864a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800864e:	2b20      	cmp	r3, #32
 8008650:	d85f      	bhi.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8008652:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	080086dd 	.word	0x080086dd
 800865c:	08008713 	.word	0x08008713
 8008660:	08008713 	.word	0x08008713
 8008664:	08008713 	.word	0x08008713
 8008668:	08008713 	.word	0x08008713
 800866c:	08008713 	.word	0x08008713
 8008670:	08008713 	.word	0x08008713
 8008674:	08008713 	.word	0x08008713
 8008678:	080086eb 	.word	0x080086eb
 800867c:	08008713 	.word	0x08008713
 8008680:	08008713 	.word	0x08008713
 8008684:	08008713 	.word	0x08008713
 8008688:	08008713 	.word	0x08008713
 800868c:	08008713 	.word	0x08008713
 8008690:	08008713 	.word	0x08008713
 8008694:	08008713 	.word	0x08008713
 8008698:	080086ff 	.word	0x080086ff
 800869c:	08008713 	.word	0x08008713
 80086a0:	08008713 	.word	0x08008713
 80086a4:	08008713 	.word	0x08008713
 80086a8:	08008713 	.word	0x08008713
 80086ac:	08008713 	.word	0x08008713
 80086b0:	08008713 	.word	0x08008713
 80086b4:	08008713 	.word	0x08008713
 80086b8:	0800871b 	.word	0x0800871b
 80086bc:	08008713 	.word	0x08008713
 80086c0:	08008713 	.word	0x08008713
 80086c4:	08008713 	.word	0x08008713
 80086c8:	08008713 	.word	0x08008713
 80086cc:	08008713 	.word	0x08008713
 80086d0:	08008713 	.word	0x08008713
 80086d4:	08008713 	.word	0x08008713
 80086d8:	0800871b 	.word	0x0800871b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086dc:	4bab      	ldr	r3, [pc, #684]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e0:	4aaa      	ldr	r2, [pc, #680]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80086e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80086e8:	e018      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ee:	3308      	adds	r3, #8
 80086f0:	4618      	mov	r0, r3
 80086f2:	f003 fa4f 	bl	800bb94 <RCCEx_PLL2_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80086fc:	e00e      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008702:	3330      	adds	r3, #48	@ 0x30
 8008704:	4618      	mov	r0, r3
 8008706:	f003 fadd 	bl	800bcc4 <RCCEx_PLL3_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008710:	e004      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800871a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800871c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10d      	bne.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008724:	4b99      	ldr	r3, [pc, #612]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800872a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800872e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008732:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008736:	4a95      	ldr	r2, [pc, #596]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008738:	430b      	orrs	r3, r1
 800873a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800873e:	e003      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008740:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008744:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008754:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800875a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800875e:	460b      	mov	r3, r1
 8008760:	4313      	orrs	r3, r2
 8008762:	d04e      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800876c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008770:	d02e      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8008772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008776:	d827      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008778:	2bc0      	cmp	r3, #192	@ 0xc0
 800877a:	d02b      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800877c:	2bc0      	cmp	r3, #192	@ 0xc0
 800877e:	d823      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008780:	2b80      	cmp	r3, #128	@ 0x80
 8008782:	d017      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008784:	2b80      	cmp	r3, #128	@ 0x80
 8008786:	d81f      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800878c:	2b40      	cmp	r3, #64	@ 0x40
 800878e:	d007      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008790:	e01a      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008792:	4b7e      	ldr	r3, [pc, #504]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008796:	4a7d      	ldr	r2, [pc, #500]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800879c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800879e:	e01a      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087a4:	3308      	adds	r3, #8
 80087a6:	4618      	mov	r0, r3
 80087a8:	f003 f9f4 	bl	800bb94 <RCCEx_PLL2_Config>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80087b2:	e010      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087b8:	3330      	adds	r3, #48	@ 0x30
 80087ba:	4618      	mov	r0, r3
 80087bc:	f003 fa82 	bl	800bcc4 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80087c6:	e006      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80087ce:	e002      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80087d0:	bf00      	nop
 80087d2:	e000      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80087d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10d      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80087de:	4b6b      	ldr	r3, [pc, #428]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80087e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80087e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087f0:	4a66      	ldr	r2, [pc, #408]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80087f2:	430b      	orrs	r3, r1
 80087f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80087f8:	e003      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008810:	2300      	movs	r3, #0
 8008812:	637b      	str	r3, [r7, #52]	@ 0x34
 8008814:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008818:	460b      	mov	r3, r1
 800881a:	4313      	orrs	r3, r2
 800881c:	d055      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800881e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008822:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008826:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800882a:	d031      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800882c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008830:	d82a      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008836:	d02d      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800883c:	d824      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800883e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008842:	d029      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008844:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008848:	d81e      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800884a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800884e:	d011      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008854:	d818      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d020      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800885a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800885e:	d113      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008864:	3308      	adds	r3, #8
 8008866:	4618      	mov	r0, r3
 8008868:	f003 f994 	bl	800bb94 <RCCEx_PLL2_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008872:	e014      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008878:	3330      	adds	r3, #48	@ 0x30
 800887a:	4618      	mov	r0, r3
 800887c:	f003 fa22 	bl	800bcc4 <RCCEx_PLL3_Config>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008886:	e00a      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800888e:	e006      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008890:	bf00      	nop
 8008892:	e004      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008894:	bf00      	nop
 8008896:	e002      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008898:	bf00      	nop
 800889a:	e000      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800889c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10d      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80088a6:	4b39      	ldr	r3, [pc, #228]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80088a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80088b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80088b8:	4a34      	ldr	r2, [pc, #208]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80088ba:	430b      	orrs	r3, r1
 80088bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80088c0:	e003      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80088ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80088d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088d8:	2300      	movs	r3, #0
 80088da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80088e0:	460b      	mov	r3, r1
 80088e2:	4313      	orrs	r3, r2
 80088e4:	d058      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80088e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80088f2:	d031      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80088f4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80088f8:	d82a      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80088fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088fe:	d02d      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008904:	d824      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008906:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800890a:	d029      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800890c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008910:	d81e      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008916:	d011      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800891c:	d818      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d020      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008926:	d113      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800892c:	3308      	adds	r3, #8
 800892e:	4618      	mov	r0, r3
 8008930:	f003 f930 	bl	800bb94 <RCCEx_PLL2_Config>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800893a:	e014      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800893c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008940:	3330      	adds	r3, #48	@ 0x30
 8008942:	4618      	mov	r0, r3
 8008944:	f003 f9be 	bl	800bcc4 <RCCEx_PLL3_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800894e:	e00a      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008956:	e006      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008958:	bf00      	nop
 800895a:	e004      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800895c:	bf00      	nop
 800895e:	e002      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008966:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800896a:	2b00      	cmp	r3, #0
 800896c:	d110      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800896e:	4b07      	ldr	r3, [pc, #28]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008974:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800897c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008980:	4902      	ldr	r1, [pc, #8]	@ (800898c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008982:	4313      	orrs	r3, r2
 8008984:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008988:	e006      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800898a:	bf00      	nop
 800898c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008990:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008994:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	2100      	movs	r1, #0
 80089a2:	6239      	str	r1, [r7, #32]
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089ae:	460b      	mov	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	d055      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80089b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089bc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80089c0:	d031      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80089c2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80089c6:	d82a      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80089c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089cc:	d02d      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80089ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089d2:	d824      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80089d4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80089d8:	d029      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80089da:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80089de:	d81e      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e4:	d011      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80089e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ea:	d818      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d020      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80089f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089f4:	d113      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089fa:	3308      	adds	r3, #8
 80089fc:	4618      	mov	r0, r3
 80089fe:	f003 f8c9 	bl	800bb94 <RCCEx_PLL2_Config>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a08:	e014      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a0e:	3330      	adds	r3, #48	@ 0x30
 8008a10:	4618      	mov	r0, r3
 8008a12:	f003 f957 	bl	800bcc4 <RCCEx_PLL3_Config>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a1c:	e00a      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a24:	e006      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008a26:	bf00      	nop
 8008a28:	e004      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008a2a:	bf00      	nop
 8008a2c:	e002      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008a2e:	bf00      	nop
 8008a30:	e000      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10d      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008a3c:	4b88      	ldr	r3, [pc, #544]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a42:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a4e:	4984      	ldr	r1, [pc, #528]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008a56:	e003      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	61b9      	str	r1, [r7, #24]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a76:	460b      	mov	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	d03d      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d81c      	bhi.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008a88:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008acb 	.word	0x08008acb
 8008a94:	08008aa1 	.word	0x08008aa1
 8008a98:	08008aaf 	.word	0x08008aaf
 8008a9c:	08008acb 	.word	0x08008acb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa4:	4a6e      	ldr	r2, [pc, #440]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aaa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008aac:	e00e      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008aae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f003 f86d 	bl	800bb94 <RCCEx_PLL2_Config>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008ac0:	e004      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008ac8:	e000      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8008aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008acc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10d      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008ad4:	4b62      	ldr	r3, [pc, #392]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ad6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ada:	f023 0203 	bic.w	r2, r3, #3
 8008ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ae2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ae6:	495e      	ldr	r1, [pc, #376]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008aee:	e003      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008af4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	2100      	movs	r1, #0
 8008b02:	6139      	str	r1, [r7, #16]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4313      	orrs	r3, r2
 8008b12:	d03a      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b20:	d00e      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b26:	d815      	bhi.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d017      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b30:	d110      	bne.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b32:	4b4b      	ldr	r3, [pc, #300]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b36:	4a4a      	ldr	r2, [pc, #296]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008b3e:	e00e      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b44:	3308      	adds	r3, #8
 8008b46:	4618      	mov	r0, r3
 8008b48:	f003 f824 	bl	800bb94 <RCCEx_PLL2_Config>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008b52:	e004      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b5a:	e000      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10d      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008b66:	4b3e      	ldr	r3, [pc, #248]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b78:	4939      	ldr	r1, [pc, #228]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008b80:	e003      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	2100      	movs	r1, #0
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	d038      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008baa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008bae:	2b30      	cmp	r3, #48	@ 0x30
 8008bb0:	d01b      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008bb2:	2b30      	cmp	r3, #48	@ 0x30
 8008bb4:	d815      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d002      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d007      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008bbe:	e010      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc0:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	4a26      	ldr	r2, [pc, #152]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bcc:	e00e      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bd2:	3330      	adds	r3, #48	@ 0x30
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f003 f875 	bl	800bcc4 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008be0:	e004      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008be8:	e000      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10d      	bne.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c02:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008c06:	4916      	ldr	r1, [pc, #88]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008c0e:	e003      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	2100      	movs	r1, #0
 8008c22:	6039      	str	r1, [r7, #0]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	607b      	str	r3, [r7, #4]
 8008c2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4313      	orrs	r3, r2
 8008c32:	d00c      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008c34:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c42:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008c46:	4906      	ldr	r1, [pc, #24]	@ (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008c4e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c5e:	bf00      	nop
 8008c60:	44020c00 	.word	0x44020c00

08008c64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b08b      	sub	sp, #44	@ 0x2c
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008c6c:	4bad      	ldr	r3, [pc, #692]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c74:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008c76:	4bab      	ldr	r3, [pc, #684]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008c80:	4ba8      	ldr	r3, [pc, #672]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c84:	0a1b      	lsrs	r3, r3, #8
 8008c86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c8a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008c8c:	4ba5      	ldr	r3, [pc, #660]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008c96:	4ba3      	ldr	r3, [pc, #652]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	08db      	lsrs	r3, r3, #3
 8008c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8126 	beq.w	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d053      	beq.n	8008d68 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d86f      	bhi.n	8008da6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d003      	beq.n	8008cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d02b      	beq.n	8008d2a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8008cd2:	e068      	b.n	8008da6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cd4:	4b93      	ldr	r3, [pc, #588]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	08db      	lsrs	r3, r3, #3
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	4a92      	ldr	r2, [pc, #584]	@ (8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d08:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d0c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008d28:	e068      	b.n	8008dfc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d34:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008f30 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008d66:	e049      	b.n	8008dfc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d88:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008da4:	e02a      	b.n	8008dfc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008da6:	4b5f      	ldr	r3, [pc, #380]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	08db      	lsrs	r3, r3, #3
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	4a5d      	ldr	r2, [pc, #372]	@ (8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008db2:	fa22 f303 	lsr.w	r3, r2, r3
 8008db6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a04 	vldr	s12, [r7, #16]
 8008dde:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008dfa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dfc:	4b49      	ldr	r3, [pc, #292]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e08:	d121      	bne.n	8008e4e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008e0a:	4b46      	ldr	r3, [pc, #280]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d017      	beq.n	8008e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008e16:	4b43      	ldr	r3, [pc, #268]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e1a:	0a5b      	lsrs	r3, r3, #9
 8008e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008e30:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e3c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e006      	b.n	8008e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e002      	b.n	8008e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e54:	4b33      	ldr	r3, [pc, #204]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e60:	d121      	bne.n	8008ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008e62:	4b30      	ldr	r3, [pc, #192]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d017      	beq.n	8008e9e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e72:	0c1b      	lsrs	r3, r3, #16
 8008e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e78:	ee07 3a90 	vmov	s15, r3
 8008e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e84:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008e88:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e94:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	605a      	str	r2, [r3, #4]
 8008e9c:	e006      	b.n	8008eac <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	605a      	str	r2, [r3, #4]
 8008ea4:	e002      	b.n	8008eac <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eac:	4b1d      	ldr	r3, [pc, #116]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008eb8:	d121      	bne.n	8008efe <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008eba:	4b1a      	ldr	r3, [pc, #104]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d017      	beq.n	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008ec6:	4b17      	ldr	r3, [pc, #92]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eca:	0e1b      	lsrs	r3, r3, #24
 8008ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed0:	ee07 3a90 	vmov	s15, r3
 8008ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008edc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008ee0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eec:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008ef4:	e010      	b.n	8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	609a      	str	r2, [r3, #8]
}
 8008efc:	e00c      	b.n	8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	609a      	str	r2, [r3, #8]
}
 8008f04:	e008      	b.n	8008f18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	609a      	str	r2, [r3, #8]
}
 8008f18:	bf00      	nop
 8008f1a:	372c      	adds	r7, #44	@ 0x2c
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	44020c00 	.word	0x44020c00
 8008f28:	03d09000 	.word	0x03d09000
 8008f2c:	46000000 	.word	0x46000000
 8008f30:	4a742400 	.word	0x4a742400
 8008f34:	4bbebc20 	.word	0x4bbebc20

08008f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b08b      	sub	sp, #44	@ 0x2c
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008f40:	4bad      	ldr	r3, [pc, #692]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f48:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008f4a:	4bab      	ldr	r3, [pc, #684]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008f54:	4ba8      	ldr	r3, [pc, #672]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f58:	0a1b      	lsrs	r3, r3, #8
 8008f5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f5e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8008f60:	4ba5      	ldr	r3, [pc, #660]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	f003 0310 	and.w	r3, r3, #16
 8008f68:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008f6a:	4ba3      	ldr	r3, [pc, #652]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6e:	08db      	lsrs	r3, r3, #3
 8008f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 8126 	beq.w	80091da <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d053      	beq.n	800903c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d86f      	bhi.n	800907a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d003      	beq.n	8008fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d02b      	beq.n	8008ffe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8008fa6:	e068      	b.n	800907a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fa8:	4b93      	ldr	r3, [pc, #588]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	08db      	lsrs	r3, r3, #3
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	4a92      	ldr	r2, [pc, #584]	@ (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	ee07 3a90 	vmov	s15, r3
 8008fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fdc:	ed97 6a04 	vldr	s12, [r7, #16]
 8008fe0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008ffc:	e068      	b.n	80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009008:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800900c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a04 	vldr	s12, [r7, #16]
 800901e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800903a:	e049      	b.n	80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	ed97 6a04 	vldr	s12, [r7, #16]
 800905c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800906c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009074:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009078:	e02a      	b.n	80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800907a:	4b5f      	ldr	r3, [pc, #380]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	08db      	lsrs	r3, r3, #3
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	4a5d      	ldr	r2, [pc, #372]	@ (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009086:	fa22 f303 	lsr.w	r3, r2, r3
 800908a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	ee07 3a90 	vmov	s15, r3
 800909c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80090b2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80090b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80090ce:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090d0:	4b49      	ldr	r3, [pc, #292]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090dc:	d121      	bne.n	8009122 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80090de:	4b46      	ldr	r3, [pc, #280]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d017      	beq.n	800911a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80090ea:	4b43      	ldr	r3, [pc, #268]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80090ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ee:	0a5b      	lsrs	r3, r3, #9
 80090f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80090fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009100:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009104:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800910c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009110:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e006      	b.n	8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009128:	4b33      	ldr	r3, [pc, #204]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009130:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009134:	d121      	bne.n	800917a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009136:	4b30      	ldr	r3, [pc, #192]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d017      	beq.n	8009172 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009142:	4b2d      	ldr	r3, [pc, #180]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800914c:	ee07 3a90 	vmov	s15, r3
 8009150:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009154:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009158:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800915c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009168:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
 8009170:	e006      	b.n	8009180 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	605a      	str	r2, [r3, #4]
 8009178:	e002      	b.n	8009180 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009180:	4b1d      	ldr	r3, [pc, #116]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800918c:	d121      	bne.n	80091d2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800918e:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d017      	beq.n	80091ca <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800919a:	4b17      	ldr	r3, [pc, #92]	@ (80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800919c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919e:	0e1b      	lsrs	r3, r3, #24
 80091a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a4:	ee07 3a90 	vmov	s15, r3
 80091a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80091ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80091b4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80091b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80091c8:	e010      	b.n	80091ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	609a      	str	r2, [r3, #8]
}
 80091d0:	e00c      	b.n	80091ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	609a      	str	r2, [r3, #8]
}
 80091d8:	e008      	b.n	80091ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	609a      	str	r2, [r3, #8]
}
 80091ec:	bf00      	nop
 80091ee:	372c      	adds	r7, #44	@ 0x2c
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	44020c00 	.word	0x44020c00
 80091fc:	03d09000 	.word	0x03d09000
 8009200:	46000000 	.word	0x46000000
 8009204:	4a742400 	.word	0x4a742400
 8009208:	4bbebc20 	.word	0x4bbebc20

0800920c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800920c:	b480      	push	{r7}
 800920e:	b08b      	sub	sp, #44	@ 0x2c
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009214:	4bad      	ldr	r3, [pc, #692]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800921e:	4bab      	ldr	r3, [pc, #684]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009228:	4ba8      	ldr	r3, [pc, #672]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800922a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009232:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8009234:	4ba5      	ldr	r3, [pc, #660]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800923e:	4ba3      	ldr	r3, [pc, #652]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009242:	08db      	lsrs	r3, r3, #3
 8009244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	fb02 f303 	mul.w	r3, r2, r3
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8126 	beq.w	80094ae <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	2b03      	cmp	r3, #3
 8009266:	d053      	beq.n	8009310 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d86f      	bhi.n	800934e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d003      	beq.n	800927c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d02b      	beq.n	80092d2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800927a:	e068      	b.n	800934e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800927c:	4b93      	ldr	r3, [pc, #588]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	4a92      	ldr	r2, [pc, #584]	@ (80094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	ee07 3a90 	vmov	s15, r3
 80092ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80092b4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80092b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80092d0:	e068      	b.n	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092dc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80092e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80092f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80092f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800930e:	e049      	b.n	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800931e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009330:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009348:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800934c:	e02a      	b.n	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800934e:	4b5f      	ldr	r3, [pc, #380]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	08db      	lsrs	r3, r3, #3
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	4a5d      	ldr	r2, [pc, #372]	@ (80094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800935a:	fa22 f303 	lsr.w	r3, r2, r3
 800935e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009382:	ed97 6a04 	vldr	s12, [r7, #16]
 8009386:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800938a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80093a2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a4:	4b49      	ldr	r3, [pc, #292]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093b0:	d121      	bne.n	80093f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80093b2:	4b46      	ldr	r3, [pc, #280]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80093b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d017      	beq.n	80093ee <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80093be:	4b43      	ldr	r3, [pc, #268]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c2:	0a5b      	lsrs	r3, r3, #9
 80093c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80093d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80093d8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80093dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	e006      	b.n	80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	e002      	b.n	80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093fc:	4b33      	ldr	r3, [pc, #204]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009408:	d121      	bne.n	800944e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800940a:	4b30      	ldr	r3, [pc, #192]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800940c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d017      	beq.n	8009446 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009416:	4b2d      	ldr	r3, [pc, #180]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800941a:	0c1b      	lsrs	r3, r3, #16
 800941c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800942c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009430:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	605a      	str	r2, [r3, #4]
 8009444:	e006      	b.n	8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]
 800944c:	e002      	b.n	8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009454:	4b1d      	ldr	r3, [pc, #116]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800945c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009460:	d121      	bne.n	80094a6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009462:	4b1a      	ldr	r3, [pc, #104]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d017      	beq.n	800949e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800946e:	4b17      	ldr	r3, [pc, #92]	@ (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009472:	0e1b      	lsrs	r3, r3, #24
 8009474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009478:	ee07 3a90 	vmov	s15, r3
 800947c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8009480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009484:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009488:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800948c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009494:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800949c:	e010      	b.n	80094c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	609a      	str	r2, [r3, #8]
}
 80094a4:	e00c      	b.n	80094c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	609a      	str	r2, [r3, #8]
}
 80094ac:	e008      	b.n	80094c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	609a      	str	r2, [r3, #8]
}
 80094c0:	bf00      	nop
 80094c2:	372c      	adds	r7, #44	@ 0x2c
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	44020c00 	.word	0x44020c00
 80094d0:	03d09000 	.word	0x03d09000
 80094d4:	46000000 	.word	0x46000000
 80094d8:	4a742400 	.word	0x4a742400
 80094dc:	4bbebc20 	.word	0x4bbebc20

080094e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b08f      	sub	sp, #60	@ 0x3c
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80094ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ee:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80094f2:	4321      	orrs	r1, r4
 80094f4:	d150      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80094f6:	4b26      	ldr	r3, [pc, #152]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80094f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009500:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009502:	4b23      	ldr	r3, [pc, #140]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b02      	cmp	r3, #2
 800950e:	d108      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009516:	d104      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
 800951e:	f002 bb2a 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009522:	4b1b      	ldr	r3, [pc, #108]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800952c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009530:	d108      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009538:	d104      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800953a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009540:	f002 bb19 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009544:	4b12      	ldr	r3, [pc, #72]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800954c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009550:	d119      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009558:	d115      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800955a:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8009562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009566:	d30a      	bcc.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009568:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	0a1b      	lsrs	r3, r3, #8
 800956e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009572:	4a08      	ldr	r2, [pc, #32]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009574:	fbb2 f3f3 	udiv	r3, r2, r3
 8009578:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800957a:	f002 bafc 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009582:	f002 baf8 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	637b      	str	r3, [r7, #52]	@ 0x34
 800958a:	f002 baf4 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800958e:	bf00      	nop
 8009590:	44020c00 	.word	0x44020c00
 8009594:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800959c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80095a0:	ea50 0104 	orrs.w	r1, r0, r4
 80095a4:	f001 8275 	beq.w	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80095a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ac:	2801      	cmp	r0, #1
 80095ae:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80095b2:	f082 82dd 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ba:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80095be:	ea50 0104 	orrs.w	r1, r0, r4
 80095c2:	f001 816c 	beq.w	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80095c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ca:	2801      	cmp	r0, #1
 80095cc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80095d0:	f082 82ce 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095d8:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80095dc:	ea50 0104 	orrs.w	r1, r0, r4
 80095e0:	f001 8602 	beq.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80095e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095e8:	2801      	cmp	r0, #1
 80095ea:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80095ee:	f082 82bf 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095f6:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80095fa:	ea50 0104 	orrs.w	r1, r0, r4
 80095fe:	f001 854c 	beq.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009606:	2801      	cmp	r0, #1
 8009608:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800960c:	f082 82b0 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009614:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009618:	ea50 0104 	orrs.w	r1, r0, r4
 800961c:	f001 849e 	beq.w	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009624:	2801      	cmp	r0, #1
 8009626:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800962a:	f082 82a1 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800962e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009632:	f1a1 0420 	sub.w	r4, r1, #32
 8009636:	ea50 0104 	orrs.w	r1, r0, r4
 800963a:	f001 83e8 	beq.w	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800963e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009642:	2801      	cmp	r0, #1
 8009644:	f171 0120 	sbcs.w	r1, r1, #32
 8009648:	f082 8292 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800964c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009650:	f1a1 0410 	sub.w	r4, r1, #16
 8009654:	ea50 0104 	orrs.w	r1, r0, r4
 8009658:	f002 8256 	beq.w	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800965c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009660:	2801      	cmp	r0, #1
 8009662:	f171 0110 	sbcs.w	r1, r1, #16
 8009666:	f082 8283 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800966a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800966e:	f1a1 0408 	sub.w	r4, r1, #8
 8009672:	ea50 0104 	orrs.w	r1, r0, r4
 8009676:	f002 81cc 	beq.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800967a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800967e:	2801      	cmp	r0, #1
 8009680:	f171 0108 	sbcs.w	r1, r1, #8
 8009684:	f082 8274 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968c:	1f0c      	subs	r4, r1, #4
 800968e:	ea50 0104 	orrs.w	r1, r0, r4
 8009692:	f001 8648 	beq.w	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800969a:	2801      	cmp	r0, #1
 800969c:	f171 0104 	sbcs.w	r1, r1, #4
 80096a0:	f082 8266 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096a8:	1e8c      	subs	r4, r1, #2
 80096aa:	ea50 0104 	orrs.w	r1, r0, r4
 80096ae:	f002 8143 	beq.w	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80096b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096b6:	2801      	cmp	r0, #1
 80096b8:	f171 0102 	sbcs.w	r1, r1, #2
 80096bc:	f082 8258 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096c4:	1e4c      	subs	r4, r1, #1
 80096c6:	ea50 0104 	orrs.w	r1, r0, r4
 80096ca:	f002 80ce 	beq.w	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80096ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096d2:	2801      	cmp	r0, #1
 80096d4:	f171 0101 	sbcs.w	r1, r1, #1
 80096d8:	f082 824a 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096e0:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80096e4:	4321      	orrs	r1, r4
 80096e6:	f002 8059 	beq.w	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80096ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096ee:	4cd9      	ldr	r4, [pc, #868]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80096f0:	42a0      	cmp	r0, r4
 80096f2:	f171 0100 	sbcs.w	r1, r1, #0
 80096f6:	f082 823b 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096fe:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009702:	4321      	orrs	r1, r4
 8009704:	f001 87d9 	beq.w	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800970c:	4cd2      	ldr	r4, [pc, #840]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800970e:	42a0      	cmp	r0, r4
 8009710:	f171 0100 	sbcs.w	r1, r1, #0
 8009714:	f082 822c 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800971c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009720:	4321      	orrs	r1, r4
 8009722:	f001 8751 	beq.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800972a:	4ccc      	ldr	r4, [pc, #816]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800972c:	42a0      	cmp	r0, r4
 800972e:	f171 0100 	sbcs.w	r1, r1, #0
 8009732:	f082 821d 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800973a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800973e:	4321      	orrs	r1, r4
 8009740:	f001 869a 	beq.w	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009748:	4cc5      	ldr	r4, [pc, #788]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800974a:	42a0      	cmp	r0, r4
 800974c:	f171 0100 	sbcs.w	r1, r1, #0
 8009750:	f082 820e 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009758:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800975c:	4321      	orrs	r1, r4
 800975e:	f001 8612 	beq.w	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8009762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009766:	4cbf      	ldr	r4, [pc, #764]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009768:	42a0      	cmp	r0, r4
 800976a:	f171 0100 	sbcs.w	r1, r1, #0
 800976e:	f082 81ff 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009776:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800977a:	4321      	orrs	r1, r4
 800977c:	f002 817e 	beq.w	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009784:	4cb8      	ldr	r4, [pc, #736]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009786:	42a0      	cmp	r0, r4
 8009788:	f171 0100 	sbcs.w	r1, r1, #0
 800978c:	f082 81f0 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009794:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009798:	4321      	orrs	r1, r4
 800979a:	f000 829e 	beq.w	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800979e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097a2:	4cb2      	ldr	r4, [pc, #712]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097a4:	42a0      	cmp	r0, r4
 80097a6:	f171 0100 	sbcs.w	r1, r1, #0
 80097aa:	f082 81e1 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097b2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80097b6:	4321      	orrs	r1, r4
 80097b8:	f000 826d 	beq.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80097bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097c0:	4cab      	ldr	r4, [pc, #684]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80097c2:	42a0      	cmp	r0, r4
 80097c4:	f171 0100 	sbcs.w	r1, r1, #0
 80097c8:	f082 81d2 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097d0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80097d4:	4321      	orrs	r1, r4
 80097d6:	f001 800d 	beq.w	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80097da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097de:	4ca5      	ldr	r4, [pc, #660]	@ (8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80097e0:	42a0      	cmp	r0, r4
 80097e2:	f171 0100 	sbcs.w	r1, r1, #0
 80097e6:	f082 81c3 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ee:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80097f2:	4321      	orrs	r1, r4
 80097f4:	f000 81d0 	beq.w	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80097f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097fc:	4c9e      	ldr	r4, [pc, #632]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80097fe:	42a0      	cmp	r0, r4
 8009800:	f171 0100 	sbcs.w	r1, r1, #0
 8009804:	f082 81b4 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800980c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009810:	4321      	orrs	r1, r4
 8009812:	f000 8142 	beq.w	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800981a:	4c98      	ldr	r4, [pc, #608]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800981c:	42a0      	cmp	r0, r4
 800981e:	f171 0100 	sbcs.w	r1, r1, #0
 8009822:	f082 81a5 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800982a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800982e:	4321      	orrs	r1, r4
 8009830:	f001 824e 	beq.w	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009838:	4c91      	ldr	r4, [pc, #580]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800983a:	42a0      	cmp	r0, r4
 800983c:	f171 0100 	sbcs.w	r1, r1, #0
 8009840:	f082 8196 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009848:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800984c:	4321      	orrs	r1, r4
 800984e:	f001 8197 	beq.w	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009856:	4c8b      	ldr	r4, [pc, #556]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009858:	42a0      	cmp	r0, r4
 800985a:	f171 0100 	sbcs.w	r1, r1, #0
 800985e:	f082 8187 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009866:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800986a:	4321      	orrs	r1, r4
 800986c:	f001 8154 	beq.w	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009874:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009878:	f171 0100 	sbcs.w	r1, r1, #0
 800987c:	f082 8178 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009880:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009884:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009888:	4321      	orrs	r1, r4
 800988a:	f001 80b7 	beq.w	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800988e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009892:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009896:	42a0      	cmp	r0, r4
 8009898:	f171 0100 	sbcs.w	r1, r1, #0
 800989c:	f082 8168 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098a4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80098a8:	4321      	orrs	r1, r4
 80098aa:	f001 8064 	beq.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80098ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098b2:	f244 0401 	movw	r4, #16385	@ 0x4001
 80098b6:	42a0      	cmp	r0, r4
 80098b8:	f171 0100 	sbcs.w	r1, r1, #0
 80098bc:	f082 8158 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098c4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80098c8:	4321      	orrs	r1, r4
 80098ca:	f001 8011 	beq.w	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80098ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098d2:	f242 0401 	movw	r4, #8193	@ 0x2001
 80098d6:	42a0      	cmp	r0, r4
 80098d8:	f171 0100 	sbcs.w	r1, r1, #0
 80098dc:	f082 8148 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098e4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80098e8:	4321      	orrs	r1, r4
 80098ea:	f000 871e 	beq.w	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80098ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098f2:	f241 0401 	movw	r4, #4097	@ 0x1001
 80098f6:	42a0      	cmp	r0, r4
 80098f8:	f171 0100 	sbcs.w	r1, r1, #0
 80098fc:	f082 8138 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009904:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009908:	4321      	orrs	r1, r4
 800990a:	f000 86a8 	beq.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800990e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009912:	f640 0401 	movw	r4, #2049	@ 0x801
 8009916:	42a0      	cmp	r0, r4
 8009918:	f171 0100 	sbcs.w	r1, r1, #0
 800991c:	f082 8128 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009924:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009928:	4321      	orrs	r1, r4
 800992a:	f000 8632 	beq.w	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800992e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009932:	f240 4401 	movw	r4, #1025	@ 0x401
 8009936:	42a0      	cmp	r0, r4
 8009938:	f171 0100 	sbcs.w	r1, r1, #0
 800993c:	f082 8118 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009944:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009948:	4321      	orrs	r1, r4
 800994a:	f000 85b0 	beq.w	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800994e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009952:	f240 2401 	movw	r4, #513	@ 0x201
 8009956:	42a0      	cmp	r0, r4
 8009958:	f171 0100 	sbcs.w	r1, r1, #0
 800995c:	f082 8108 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009964:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009968:	4321      	orrs	r1, r4
 800996a:	f000 8535 	beq.w	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800996e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009972:	f240 1401 	movw	r4, #257	@ 0x101
 8009976:	42a0      	cmp	r0, r4
 8009978:	f171 0100 	sbcs.w	r1, r1, #0
 800997c:	f082 80f8 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009984:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8009988:	4321      	orrs	r1, r4
 800998a:	f000 84ba 	beq.w	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800998e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009992:	2881      	cmp	r0, #129	@ 0x81
 8009994:	f171 0100 	sbcs.w	r1, r1, #0
 8009998:	f082 80ea 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800999c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099a0:	2821      	cmp	r0, #33	@ 0x21
 80099a2:	f171 0100 	sbcs.w	r1, r1, #0
 80099a6:	d26f      	bcs.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80099a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ac:	4301      	orrs	r1, r0
 80099ae:	f002 80df 	beq.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099b6:	1e42      	subs	r2, r0, #1
 80099b8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80099bc:	2a20      	cmp	r2, #32
 80099be:	f173 0100 	sbcs.w	r1, r3, #0
 80099c2:	f082 80d5 	bcs.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099c6:	2a1f      	cmp	r2, #31
 80099c8:	f202 80d2 	bhi.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099cc:	a101      	add	r1, pc, #4	@ (adr r1, 80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80099ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	08009d35 	.word	0x08009d35
 80099d8:	08009e01 	.word	0x08009e01
 80099dc:	0800bb71 	.word	0x0800bb71
 80099e0:	08009ec1 	.word	0x08009ec1
 80099e4:	0800bb71 	.word	0x0800bb71
 80099e8:	0800bb71 	.word	0x0800bb71
 80099ec:	0800bb71 	.word	0x0800bb71
 80099f0:	08009f91 	.word	0x08009f91
 80099f4:	0800bb71 	.word	0x0800bb71
 80099f8:	0800bb71 	.word	0x0800bb71
 80099fc:	0800bb71 	.word	0x0800bb71
 8009a00:	0800bb71 	.word	0x0800bb71
 8009a04:	0800bb71 	.word	0x0800bb71
 8009a08:	0800bb71 	.word	0x0800bb71
 8009a0c:	0800bb71 	.word	0x0800bb71
 8009a10:	0800a073 	.word	0x0800a073
 8009a14:	0800bb71 	.word	0x0800bb71
 8009a18:	0800bb71 	.word	0x0800bb71
 8009a1c:	0800bb71 	.word	0x0800bb71
 8009a20:	0800bb71 	.word	0x0800bb71
 8009a24:	0800bb71 	.word	0x0800bb71
 8009a28:	0800bb71 	.word	0x0800bb71
 8009a2c:	0800bb71 	.word	0x0800bb71
 8009a30:	0800bb71 	.word	0x0800bb71
 8009a34:	0800bb71 	.word	0x0800bb71
 8009a38:	0800bb71 	.word	0x0800bb71
 8009a3c:	0800bb71 	.word	0x0800bb71
 8009a40:	0800bb71 	.word	0x0800bb71
 8009a44:	0800bb71 	.word	0x0800bb71
 8009a48:	0800bb71 	.word	0x0800bb71
 8009a4c:	0800bb71 	.word	0x0800bb71
 8009a50:	0800a149 	.word	0x0800a149
 8009a54:	80000001 	.word	0x80000001
 8009a58:	40000001 	.word	0x40000001
 8009a5c:	20000001 	.word	0x20000001
 8009a60:	10000001 	.word	0x10000001
 8009a64:	08000001 	.word	0x08000001
 8009a68:	04000001 	.word	0x04000001
 8009a6c:	00800001 	.word	0x00800001
 8009a70:	00400001 	.word	0x00400001
 8009a74:	00200001 	.word	0x00200001
 8009a78:	00100001 	.word	0x00100001
 8009a7c:	00080001 	.word	0x00080001
 8009a80:	00040001 	.word	0x00040001
 8009a84:	00020001 	.word	0x00020001
 8009a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009a90:	430b      	orrs	r3, r1
 8009a92:	f000 83c4 	beq.w	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009a96:	f002 b86b 	b.w	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009a9a:	4ba1      	ldr	r3, [pc, #644]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009aa0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009aac:	d036      	beq.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ab4:	d86b      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009abc:	d02b      	beq.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ac4:	d863      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009acc:	d01b      	beq.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ad4:	d85b      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae2:	d008      	beq.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009ae4:	e053      	b.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ae6:	f107 0320 	add.w	r3, r7, #32
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff f8ba 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009af4:	e04e      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af6:	f107 0314 	add.w	r3, r7, #20
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff fa1c 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b04:	e046      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b06:	f107 0308 	add.w	r3, r7, #8
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff fb7e 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b14:	e03e      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009b16:	4b83      	ldr	r3, [pc, #524]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b1a:	e03b      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b1c:	4b80      	ldr	r3, [pc, #512]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b22:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b26:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b28:	4b7d      	ldr	r3, [pc, #500]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d10c      	bne.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8009b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b3a:	4b79      	ldr	r3, [pc, #484]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	4a78      	ldr	r2, [pc, #480]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009b46:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4c:	e01e      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b4e:	4b74      	ldr	r3, [pc, #464]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b5a:	d106      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b62:	d102      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b64:	4b71      	ldr	r3, [pc, #452]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b68:	e010      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b76:	d106      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b7e:	d102      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b80:	4b6b      	ldr	r3, [pc, #428]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b8a:	e003      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009b8c:	e002      	b.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b92:	bf00      	nop
          }
        }
        break;
 8009b94:	f001 bfef 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009b98:	4b61      	ldr	r3, [pc, #388]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b9e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009baa:	d036      	beq.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bb2:	d86b      	bhi.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009bba:	d02b      	beq.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009bc2:	d863      	bhi.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bca:	d01b      	beq.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bd2:	d85b      	bhi.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009be0:	d008      	beq.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009be2:	e053      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009be4:	f107 0320 	add.w	r3, r7, #32
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff f83b 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bf2:	e04e      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf4:	f107 0314 	add.w	r3, r7, #20
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff f99d 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c02:	e046      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff faff 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c12:	e03e      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009c14:	4b43      	ldr	r3, [pc, #268]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009c16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c18:	e03b      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c1a:	4b41      	ldr	r3, [pc, #260]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c26:	4b3e      	ldr	r3, [pc, #248]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d10c      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c38:	4b39      	ldr	r3, [pc, #228]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	08db      	lsrs	r3, r3, #3
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	4a39      	ldr	r2, [pc, #228]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4a:	e01e      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c4c:	4b34      	ldr	r3, [pc, #208]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c58:	d106      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c60:	d102      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c62:	4b32      	ldr	r3, [pc, #200]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c66:	e010      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c68:	4b2d      	ldr	r3, [pc, #180]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c74:	d106      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8009c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c7c:	d102      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c82:	e002      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c88:	e003      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8009c8a:	e002      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c90:	bf00      	nop
          }
        }
        break;
 8009c92:	f001 bf70 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009c96:	4b22      	ldr	r3, [pc, #136]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009c98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ca8:	f107 0320 	add.w	r3, r7, #32
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe ffd9 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cb6:	f001 bf5e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	2b40      	cmp	r3, #64	@ 0x40
 8009cbe:	d108      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cc0:	f107 0314 	add.w	r3, r7, #20
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff f937 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cce:	f001 bf52 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cd6:	f001 bf4e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009cda:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009cdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d108      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cec:	f107 0320 	add.w	r3, r7, #32
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe ffb7 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cfa:	f001 bf3c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	2b80      	cmp	r3, #128	@ 0x80
 8009d02:	d108      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d04:	f107 0314 	add.w	r3, r7, #20
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff f915 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d12:	f001 bf30 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d1a:	f001 bf2c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d1e:	bf00      	nop
 8009d20:	44020c00 	.word	0x44020c00
 8009d24:	00bb8000 	.word	0x00bb8000
 8009d28:	03d09000 	.word	0x03d09000
 8009d2c:	003d0900 	.word	0x003d0900
 8009d30:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009d34:	4b9d      	ldr	r3, [pc, #628]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d104      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d46:	f7fc ffd7 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 8009d4a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d4c:	f001 bf13 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009d50:	4b96      	ldr	r3, [pc, #600]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d5c:	d10a      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d107      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d64:	f107 0314 	add.w	r3, r7, #20
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff f8e5 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d72:	e043      	b.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009d74:	4b8d      	ldr	r3, [pc, #564]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d80:	d10a      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d107      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d88:	f107 0308 	add.w	r3, r7, #8
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff fa3d 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	e031      	b.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009d98:	4b84      	ldr	r3, [pc, #528]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d10c      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d109      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009daa:	4b80      	ldr	r3, [pc, #512]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	08db      	lsrs	r3, r3, #3
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	4a7e      	ldr	r2, [pc, #504]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009db6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dbc:	e01e      	b.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dca:	d105      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d102      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8009dd2:	4b78      	ldr	r3, [pc, #480]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd6:	e011      	b.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009dd8:	4b74      	ldr	r3, [pc, #464]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d106      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	d103      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df2:	e003      	b.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009df8:	f001 bebd 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dfc:	f001 bebb 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e00:	4b6a      	ldr	r3, [pc, #424]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d104      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e12:	f7fc ff5b 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8009e16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e18:	f001 bead 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009e1c:	4b63      	ldr	r3, [pc, #396]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e28:	d10a      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d107      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff f87f 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e3e:	e03d      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	2b10      	cmp	r3, #16
 8009e44:	d108      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff f9de 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e54:	f001 be8f 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009e58:	4b54      	ldr	r3, [pc, #336]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d10c      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e66:	2b18      	cmp	r3, #24
 8009e68:	d109      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e6a:	4b50      	ldr	r3, [pc, #320]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	08db      	lsrs	r3, r3, #3
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	4a4e      	ldr	r2, [pc, #312]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009e76:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7c:	e01e      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8a:	d105      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d102      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009e92:	4b48      	ldr	r3, [pc, #288]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e96:	e011      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009e98:	4b44      	ldr	r3, [pc, #272]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e9e:	f003 0302 	and.w	r3, r3, #2
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d106      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	2b28      	cmp	r3, #40	@ 0x28
 8009eaa:	d103      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb2:	e003      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eb8:	f001 be5d 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ebc:	f001 be5b 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009ec6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009eca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d104      	bne.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ed2:	f7fc fefb 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8009ed6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ed8:	f001 be4d 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009edc:	4b33      	ldr	r3, [pc, #204]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee8:	d10a      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	2b40      	cmp	r3, #64	@ 0x40
 8009eee:	d107      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ef0:	f107 0314 	add.w	r3, r7, #20
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff f81f 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efe:	e045      	b.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009f00:	4b2a      	ldr	r3, [pc, #168]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f0c:	d10a      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	2b80      	cmp	r3, #128	@ 0x80
 8009f12:	d107      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f14:	f107 0308 	add.w	r3, r7, #8
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff f977 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f22:	e033      	b.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009f24:	4b21      	ldr	r3, [pc, #132]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0302 	and.w	r3, r3, #2
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d10c      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f34:	d109      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f36:	4b1d      	ldr	r3, [pc, #116]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	08db      	lsrs	r3, r3, #3
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009f42:	fa22 f303 	lsr.w	r3, r2, r3
 8009f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f48:	e020      	b.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009f4a:	4b18      	ldr	r3, [pc, #96]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f56:	d106      	bne.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f5e:	d102      	bne.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009f60:	4b14      	ldr	r3, [pc, #80]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f64:	e012      	b.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009f66:	4b11      	ldr	r3, [pc, #68]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d107      	bne.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009f7a:	d103      	bne.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f82:	e003      	b.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f88:	f001 bdf5 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f8c:	f001 bdf3 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009f90:	4b06      	ldr	r3, [pc, #24]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f96:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009fa2:	f7fc fe93 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8009fa6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009fa8:	f001 bde5 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fac:	44020c00 	.word	0x44020c00
 8009fb0:	03d09000 	.word	0x03d09000
 8009fb4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fc4:	d10b      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fcc:	d107      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fce:	f107 0314 	add.w	r3, r7, #20
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe ffb0 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fdc:	e047      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009fde:	4b97      	ldr	r3, [pc, #604]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fea:	d10b      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ff2:	d107      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff f907 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	637b      	str	r3, [r7, #52]	@ 0x34
 800a002:	e034      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a004:	4b8d      	ldr	r3, [pc, #564]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d10d      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a016:	d109      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a018:	4b88      	ldr	r3, [pc, #544]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	08db      	lsrs	r3, r3, #3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	4a87      	ldr	r2, [pc, #540]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02a:	e020      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a02c:	4b83      	ldr	r3, [pc, #524]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a038:	d106      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a040:	d102      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a042:	4b80      	ldr	r3, [pc, #512]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	e012      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a048:	4b7c      	ldr	r3, [pc, #496]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a04a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b02      	cmp	r3, #2
 800a054:	d107      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a05c:	d103      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
 800a064:	e003      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a06a:	f001 bd84 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a06e:	f001 bd82 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a072:	4b72      	ldr	r3, [pc, #456]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a078:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a07c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a084:	f7fc fe22 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a088:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a08a:	f001 bd74 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a08e:	4b6b      	ldr	r3, [pc, #428]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a09a:	d10b      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a2:	d107      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a4:	f107 0314 	add.w	r3, r7, #20
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe ff45 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b2:	e047      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a0b4:	4b61      	ldr	r3, [pc, #388]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0c0:	d10b      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0c8:	d107      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff f89c 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d8:	e034      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a0da:	4b58      	ldr	r3, [pc, #352]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d10d      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0ec:	d109      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0ee:	4b53      	ldr	r3, [pc, #332]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	08db      	lsrs	r3, r3, #3
 800a0f4:	f003 0303 	and.w	r3, r3, #3
 800a0f8:	4a51      	ldr	r2, [pc, #324]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a100:	e020      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a102:	4b4e      	ldr	r3, [pc, #312]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a10a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a10e:	d106      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a116:	d102      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a118:	4b4a      	ldr	r3, [pc, #296]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a11c:	e012      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a11e:	4b47      	ldr	r3, [pc, #284]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d107      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a132:	d103      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
 800a13a:	e003      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a140:	f001 bd19 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a144:	f001 bd17 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a148:	4b3c      	ldr	r3, [pc, #240]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a14a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a14e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a152:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a15a:	f7fc fdb7 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a15e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a160:	f001 bd09 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a164:	4b35      	ldr	r3, [pc, #212]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a16c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a170:	d10b      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a178:	d107      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17a:	f107 0314 	add.w	r3, r7, #20
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe feda 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
 800a188:	e047      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a18a:	4b2c      	ldr	r3, [pc, #176]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a196:	d10b      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a19e:	d107      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a0:	f107 0308 	add.w	r3, r7, #8
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff f831 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	e034      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a1b0:	4b22      	ldr	r3, [pc, #136]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d10d      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a1c2:	d109      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	08db      	lsrs	r3, r3, #3
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	4a1c      	ldr	r2, [pc, #112]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d6:	e020      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a1d8:	4b18      	ldr	r3, [pc, #96]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1e4:	d106      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ec:	d102      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a1ee:	4b15      	ldr	r3, [pc, #84]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f2:	e012      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a1f4:	4b11      	ldr	r3, [pc, #68]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a1f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d107      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a208:	d103      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a210:	e003      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a216:	f001 bcae 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a21a:	f001 bcac 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a21e:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a224:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a228:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10b      	bne.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a230:	f7fc fd4c 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a234:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a236:	f001 bc9e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a23a:	bf00      	nop
 800a23c:	44020c00 	.word	0x44020c00
 800a240:	03d09000 	.word	0x03d09000
 800a244:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a248:	4ba0      	ldr	r3, [pc, #640]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a254:	d10b      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a258:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a25c:	d107      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25e:	f107 0314 	add.w	r3, r7, #20
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fe68 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a26c:	e047      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a26e:	4b97      	ldr	r3, [pc, #604]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a27a:	d10b      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a282:	d107      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a284:	f107 0308 	add.w	r3, r7, #8
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe ffbf 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	637b      	str	r3, [r7, #52]	@ 0x34
 800a292:	e034      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a294:	4b8d      	ldr	r3, [pc, #564]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d10d      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a2a6:	d109      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2a8:	4b88      	ldr	r3, [pc, #544]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	08db      	lsrs	r3, r3, #3
 800a2ae:	f003 0303 	and.w	r3, r3, #3
 800a2b2:	4a87      	ldr	r2, [pc, #540]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ba:	e020      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a2bc:	4b83      	ldr	r3, [pc, #524]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c8:	d106      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a2d2:	4b80      	ldr	r3, [pc, #512]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d6:	e012      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a2d8:	4b7c      	ldr	r3, [pc, #496]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a2da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d107      	bne.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a2ec:	d103      	bne.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a2ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f4:	e003      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2fa:	f001 bc3c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2fe:	f001 bc3a 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a302:	4b72      	ldr	r3, [pc, #456]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a308:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a30c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	2b00      	cmp	r3, #0
 800a312:	d104      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a314:	f7fc fcda 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a318:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a31a:	f001 bc2c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a31e:	4b6b      	ldr	r3, [pc, #428]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a32a:	d10b      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a332:	d107      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a334:	f107 0314 	add.w	r3, r7, #20
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe fdfd 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	637b      	str	r3, [r7, #52]	@ 0x34
 800a342:	e047      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a344:	4b61      	ldr	r3, [pc, #388]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a34c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a350:	d10b      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a358:	d107      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe ff54 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
 800a368:	e034      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a36a:	4b58      	ldr	r3, [pc, #352]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b02      	cmp	r3, #2
 800a374:	d10d      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a37c:	d109      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a37e:	4b53      	ldr	r3, [pc, #332]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	08db      	lsrs	r3, r3, #3
 800a384:	f003 0303 	and.w	r3, r3, #3
 800a388:	4a51      	ldr	r2, [pc, #324]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a38a:	fa22 f303 	lsr.w	r3, r2, r3
 800a38e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a390:	e020      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a392:	4b4e      	ldr	r3, [pc, #312]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a39a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a39e:	d106      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3a6:	d102      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a3a8:	4b4a      	ldr	r3, [pc, #296]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a3aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ac:	e012      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a3ae:	4b47      	ldr	r3, [pc, #284]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a3b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3b4:	f003 0302 	and.w	r3, r3, #2
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d107      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a3c2:	d103      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a3c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ca:	e003      	b.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3d0:	f001 bbd1 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3d4:	f001 bbcf 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a3d8:	4b3c      	ldr	r3, [pc, #240]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a3da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3de:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a3e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d104      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3ea:	f7fc fc6f 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a3ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a3f0:	f001 bbc1 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a3f4:	4b35      	ldr	r3, [pc, #212]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a400:	d10b      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a408:	d107      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0314 	add.w	r3, r7, #20
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fd92 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	637b      	str	r3, [r7, #52]	@ 0x34
 800a418:	e047      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a41a:	4b2c      	ldr	r3, [pc, #176]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a426:	d10b      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a42e:	d107      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fee9 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a43e:	e034      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a440:	4b22      	ldr	r3, [pc, #136]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0302 	and.w	r3, r3, #2
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d10d      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a452:	d109      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a454:	4b1d      	ldr	r3, [pc, #116]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	08db      	lsrs	r3, r3, #3
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	4a1c      	ldr	r2, [pc, #112]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
 800a466:	e020      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a468:	4b18      	ldr	r3, [pc, #96]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a474:	d106      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a47c:	d102      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a47e:	4b15      	ldr	r3, [pc, #84]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a480:	637b      	str	r3, [r7, #52]	@ 0x34
 800a482:	e012      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a484:	4b11      	ldr	r3, [pc, #68]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d107      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a498:	d103      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a0:	e003      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4a6:	f001 bb66 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4aa:	f001 bb64 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a4ae:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a4b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a4b4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a4b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10b      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4c0:	f7fc fc04 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a4c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a4c6:	f001 bb56 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4ca:	bf00      	nop
 800a4cc:	44020c00 	.word	0x44020c00
 800a4d0:	03d09000 	.word	0x03d09000
 800a4d4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a4d8:	4ba1      	ldr	r3, [pc, #644]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4e4:	d10b      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4ec:	d107      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ee:	f107 0314 	add.w	r3, r7, #20
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fd20 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4fc:	e047      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a4fe:	4b98      	ldr	r3, [pc, #608]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a50a:	d10b      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a512:	d107      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a514:	f107 0308 	add.w	r3, r7, #8
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fe77 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	637b      	str	r3, [r7, #52]	@ 0x34
 800a522:	e034      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a524:	4b8e      	ldr	r3, [pc, #568]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0302 	and.w	r3, r3, #2
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d10d      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a536:	d109      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a538:	4b89      	ldr	r3, [pc, #548]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	08db      	lsrs	r3, r3, #3
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	4a88      	ldr	r2, [pc, #544]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a544:	fa22 f303 	lsr.w	r3, r2, r3
 800a548:	637b      	str	r3, [r7, #52]	@ 0x34
 800a54a:	e020      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a54c:	4b84      	ldr	r3, [pc, #528]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a558:	d106      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a560:	d102      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a562:	4b81      	ldr	r3, [pc, #516]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a564:	637b      	str	r3, [r7, #52]	@ 0x34
 800a566:	e012      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a568:	4b7d      	ldr	r3, [pc, #500]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a56a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b02      	cmp	r3, #2
 800a574:	d107      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a57c:	d103      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
 800a584:	e003      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a58a:	f001 baf4 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a58e:	f001 baf2 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a592:	4b73      	ldr	r3, [pc, #460]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a594:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a598:	f003 0307 	and.w	r3, r3, #7
 800a59c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5a4:	f7fc fb92 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a5a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a5aa:	f001 bae4 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a5ae:	4b6c      	ldr	r3, [pc, #432]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ba:	d10a      	bne.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d107      	bne.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fcb6 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5d0:	e043      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a5d2:	4b63      	ldr	r3, [pc, #396]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5de:	d10a      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d107      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5e6:	f107 0308 	add.w	r3, r7, #8
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fe0e 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f4:	e031      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a5f6:	4b5a      	ldr	r3, [pc, #360]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0302 	and.w	r3, r3, #2
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d10c      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	2b03      	cmp	r3, #3
 800a606:	d109      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a608:	4b55      	ldr	r3, [pc, #340]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	08db      	lsrs	r3, r3, #3
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	4a54      	ldr	r2, [pc, #336]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a614:	fa22 f303 	lsr.w	r3, r2, r3
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
 800a61a:	e01e      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a61c:	4b50      	ldr	r3, [pc, #320]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a628:	d105      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	d102      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a630:	4b4d      	ldr	r3, [pc, #308]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
 800a634:	e011      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a636:	4b4a      	ldr	r3, [pc, #296]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b02      	cmp	r3, #2
 800a642:	d106      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	2b05      	cmp	r3, #5
 800a648:	d103      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a64a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a64e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a650:	e003      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a656:	f001 ba8e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a65a:	f001 ba8c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a65e:	4b40      	ldr	r3, [pc, #256]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a660:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a664:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a668:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d104      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a670:	f7fc fb2c 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a674:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a676:	f001 ba7e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a67a:	4b39      	ldr	r3, [pc, #228]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a686:	d10a      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800a688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68a:	2b10      	cmp	r3, #16
 800a68c:	d107      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a68e:	f107 0314 	add.w	r3, r7, #20
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fc50 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69c:	e043      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800a69e:	4b30      	ldr	r3, [pc, #192]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6aa:	d10a      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	2b20      	cmp	r3, #32
 800a6b0:	d107      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6b2:	f107 0308 	add.w	r3, r7, #8
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe fda8 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c0:	e031      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800a6c2:	4b27      	ldr	r3, [pc, #156]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d10c      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	2b30      	cmp	r3, #48	@ 0x30
 800a6d2:	d109      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6d4:	4b22      	ldr	r3, [pc, #136]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	08db      	lsrs	r3, r3, #3
 800a6da:	f003 0303 	and.w	r3, r3, #3
 800a6de:	4a21      	ldr	r2, [pc, #132]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e6:	e01e      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6f4:	d105      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	2b40      	cmp	r3, #64	@ 0x40
 800a6fa:	d102      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800a6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a700:	e011      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800a702:	4b17      	ldr	r3, [pc, #92]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d106      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	2b50      	cmp	r3, #80	@ 0x50
 800a714:	d103      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800a716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a71a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a71c:	e003      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a722:	f001 ba28 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a726:	f001 ba26 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a72a:	4b0d      	ldr	r3, [pc, #52]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a72c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a730:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a734:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d104      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a73c:	f7fc faf2 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800a740:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a742:	f001 ba18 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a74c:	d10e      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a74e:	f107 0314 	add.w	r3, r7, #20
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe fbf0 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a75c:	f001 ba0b 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a760:	44020c00 	.word	0x44020c00
 800a764:	03d09000 	.word	0x03d09000
 800a768:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a772:	d108      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a774:	f107 0308 	add.w	r3, r7, #8
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fe fd47 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a782:	f001 b9f8 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a786:	4ba4      	ldr	r3, [pc, #656]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d10d      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a798:	d109      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a79a:	4b9f      	ldr	r3, [pc, #636]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	08db      	lsrs	r3, r3, #3
 800a7a0:	f003 0303 	and.w	r3, r3, #3
 800a7a4:	4a9d      	ldr	r2, [pc, #628]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ac:	e020      	b.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800a7ae:	4b9a      	ldr	r3, [pc, #616]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ba:	d106      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7c2:	d102      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800a7c4:	4b96      	ldr	r3, [pc, #600]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a7c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7c8:	e012      	b.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a7ca:	4b93      	ldr	r3, [pc, #588]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a7cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d107      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7de:	d103      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800a7e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e6:	e003      	b.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ec:	f001 b9c3 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a7f0:	f001 b9c1 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a7f4:	4b88      	ldr	r3, [pc, #544]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a7f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	2b00      	cmp	r3, #0
 800a804:	d104      	bne.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800a806:	f7fc fa45 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 800a80a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800a80c:	f001 b9b3 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	2b01      	cmp	r3, #1
 800a814:	d104      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800a816:	f7fc f911 	bl	8006a3c <HAL_RCC_GetSysClockFreq>
 800a81a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a81c:	f001 b9ab 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a822:	2b02      	cmp	r3, #2
 800a824:	d108      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a826:	f107 0314 	add.w	r3, r7, #20
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe fb84 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a834:	f001 b99f 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a838:	4b77      	ldr	r3, [pc, #476]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a844:	d105      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d102      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800a84c:	4b75      	ldr	r3, [pc, #468]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800a84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a850:	e023      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a852:	4b71      	ldr	r3, [pc, #452]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d10c      	bne.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	2b04      	cmp	r3, #4
 800a862:	d109      	bne.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a864:	4b6c      	ldr	r3, [pc, #432]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	08db      	lsrs	r3, r3, #3
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	4a6b      	ldr	r2, [pc, #428]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a870:	fa22 f303 	lsr.w	r3, r2, r3
 800a874:	637b      	str	r3, [r7, #52]	@ 0x34
 800a876:	e010      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800a878:	4b67      	ldr	r3, [pc, #412]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a884:	d105      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	2b05      	cmp	r3, #5
 800a88a:	d102      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800a88c:	4b64      	ldr	r3, [pc, #400]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a890:	e003      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a896:	f001 b96e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a89a:	f001 b96c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a89e:	4b5e      	ldr	r3, [pc, #376]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a8a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a8aa:	4b5b      	ldr	r3, [pc, #364]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a8ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d106      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800a8be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c4:	e012      	b.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a8c6:	4b54      	ldr	r3, [pc, #336]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a8c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8d4:	d106      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d103      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a8dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a8e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8e2:	e003      	b.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a8e8:	f001 b945 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8ec:	f001 b943 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a8f0:	4b49      	ldr	r3, [pc, #292]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a8f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a8fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d104      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a902:	f7fc f9e3 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a906:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a908:	f001 b935 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a912:	d108      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a914:	f107 0308 	add.w	r3, r7, #8
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fe fc77 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a922:	f001 b928 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a926:	4b3c      	ldr	r3, [pc, #240]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d10d      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a938:	d109      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a93a:	4b37      	ldr	r3, [pc, #220]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	08db      	lsrs	r3, r3, #3
 800a940:	f003 0303 	and.w	r3, r3, #3
 800a944:	4a35      	ldr	r2, [pc, #212]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a946:	fa22 f303 	lsr.w	r3, r2, r3
 800a94a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a94c:	e011      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a94e:	4b32      	ldr	r3, [pc, #200]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a95a:	d106      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a962:	d102      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a964:	4b2e      	ldr	r3, [pc, #184]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a966:	637b      	str	r3, [r7, #52]	@ 0x34
 800a968:	e003      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a96e:	f001 b902 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a972:	f001 b900 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a976:	4b28      	ldr	r3, [pc, #160]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a97c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a980:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a988:	f7fc f9a0 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800a98c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a98e:	f001 b8f2 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a998:	d108      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fc34 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9a8:	f001 b8e5 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d10d      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a9be:	d109      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9c0:	4b15      	ldr	r3, [pc, #84]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	08db      	lsrs	r3, r3, #3
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	4a14      	ldr	r2, [pc, #80]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d2:	e011      	b.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a9d4:	4b10      	ldr	r3, [pc, #64]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9e0:	d106      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a9e8:	d102      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a9ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9ee:	e003      	b.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9f4:	f001 b8bf 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9f8:	f001 b8bd 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a9fc:	4b06      	ldr	r3, [pc, #24]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800aa06:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10c      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800aa0e:	f7fc f989 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800aa12:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800aa14:	f001 b8af 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa18:	44020c00 	.word	0x44020c00
 800aa1c:	03d09000 	.word	0x03d09000
 800aa20:	003d0900 	.word	0x003d0900
 800aa24:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800aa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa2e:	d108      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa30:	f107 0308 	add.w	r3, r7, #8
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fbe9 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa3e:	f001 b89a 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800aa42:	4b9f      	ldr	r3, [pc, #636]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d10d      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa54:	d109      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa56:	4b9a      	ldr	r3, [pc, #616]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	08db      	lsrs	r3, r3, #3
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	4a98      	ldr	r2, [pc, #608]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800aa62:	fa22 f303 	lsr.w	r3, r2, r3
 800aa66:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa68:	e011      	b.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800aa6a:	4b95      	ldr	r3, [pc, #596]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa76:	d106      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa7e:	d102      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800aa80:	4b91      	ldr	r3, [pc, #580]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa84:	e003      	b.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa8a:	f001 b874 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa8e:	f001 b872 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800aa92:	4b8b      	ldr	r3, [pc, #556]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa98:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800aa9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d104      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800aaa4:	f7fc f93e 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800aaa8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800aaaa:	f001 b864 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800aaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aab4:	d108      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab6:	f107 0308 	add.w	r3, r7, #8
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe fba6 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aac4:	f001 b857 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800aac8:	4b7d      	ldr	r3, [pc, #500]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d10d      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aada:	d109      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aadc:	4b78      	ldr	r3, [pc, #480]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	08db      	lsrs	r3, r3, #3
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	4a77      	ldr	r2, [pc, #476]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800aae8:	fa22 f303 	lsr.w	r3, r2, r3
 800aaec:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaee:	e011      	b.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800aaf0:	4b73      	ldr	r3, [pc, #460]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aaf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aafc:	d106      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800aafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ab04:	d102      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800ab06:	4b70      	ldr	r3, [pc, #448]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ab08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab0a:	e003      	b.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab10:	f001 b831 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab14:	f001 b82f 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800ab18:	4b69      	ldr	r3, [pc, #420]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab1e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800ab22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800ab24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d104      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab2a:	f7fc f8cf 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800ab2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ab30:	f001 b821 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab3a:	d108      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe fb63 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab4a:	f001 b814 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800ab4e:	4b5c      	ldr	r3, [pc, #368]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d10e      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab60:	d10a      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab62:	4b57      	ldr	r3, [pc, #348]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	08db      	lsrs	r3, r3, #3
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	4a55      	ldr	r2, [pc, #340]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ab6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab74:	f000 bfff 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab7c:	f000 bffb 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ab80:	4b4f      	ldr	r3, [pc, #316]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ab86:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ab92:	d056      	beq.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab96:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ab9a:	f200 808b 	bhi.w	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aba4:	d03e      	beq.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abac:	f200 8082 	bhi.w	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abb6:	d027      	beq.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abbe:	d879      	bhi.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800abc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abc6:	d017      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800abc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abce:	d871      	bhi.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d004      	beq.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abdc:	d004      	beq.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800abde:	e069      	b.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800abe0:	f7fc f8a0 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800abe4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800abe6:	e068      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe8:	f107 0314 	add.w	r3, r7, #20
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe f9a3 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800abf6:	e060      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abf8:	f107 0308 	add.w	r3, r7, #8
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe fb05 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac06:	e058      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac08:	4b2d      	ldr	r3, [pc, #180]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d103      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800ac16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac1a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac1c:	e04d      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac22:	e04a      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ac24:	4b26      	ldr	r3, [pc, #152]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac32:	d103      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800ac34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac38:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac3a:	e03e      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac40:	e03b      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac42:	4b1f      	ldr	r3, [pc, #124]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ac4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac4e:	4b1c      	ldr	r3, [pc, #112]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d10c      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800ac5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d109      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac60:	4b17      	ldr	r3, [pc, #92]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	08db      	lsrs	r3, r3, #3
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ac6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac72:	e01e      	b.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac74:	4b12      	ldr	r3, [pc, #72]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac80:	d106      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800ac82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac88:	d102      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ac8a:	4b0f      	ldr	r3, [pc, #60]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ac8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8e:	e010      	b.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac90:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9c:	d106      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800ac9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aca4:	d102      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aca6:	4b09      	ldr	r3, [pc, #36]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800aca8:	637b      	str	r3, [r7, #52]	@ 0x34
 800acaa:	e002      	b.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800acb0:	e003      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800acb2:	e002      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acb8:	bf00      	nop
          }
        }
        break;
 800acba:	f000 bf5c 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acbe:	bf00      	nop
 800acc0:	44020c00 	.word	0x44020c00
 800acc4:	03d09000 	.word	0x03d09000
 800acc8:	003d0900 	.word	0x003d0900
 800accc:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800acd0:	4b9e      	ldr	r3, [pc, #632]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800acd2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800acd6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800acda:	633b      	str	r3, [r7, #48]	@ 0x30
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ace2:	d056      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800ace4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800acea:	f200 808b 	bhi.w	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acf4:	d03e      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acfc:	f200 8082 	bhi.w	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad06:	d027      	beq.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800ad08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad0e:	d879      	bhi.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad16:	d017      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800ad18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad1e:	d871      	bhi.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ad20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad2c:	d004      	beq.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800ad2e:	e069      	b.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800ad30:	f7fb ffcc 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 800ad34:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ad36:	e068      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad38:	f107 0314 	add.w	r3, r7, #20
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe f8fb 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad46:	e060      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad48:	f107 0308 	add.w	r3, r7, #8
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fa5d 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad56:	e058      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad58:	4b7c      	ldr	r3, [pc, #496]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ad5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d103      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800ad66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad6c:	e04d      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad72:	e04a      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ad74:	4b75      	ldr	r3, [pc, #468]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ad76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad82:	d103      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800ad84:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ad88:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad8a:	e03e      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad90:	e03b      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad92:	4b6e      	ldr	r3, [pc, #440]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ad94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ad9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad9e:	4b6b      	ldr	r3, [pc, #428]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d10c      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adb0:	4b66      	ldr	r3, [pc, #408]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	08db      	lsrs	r3, r3, #3
 800adb6:	f003 0303 	and.w	r3, r3, #3
 800adba:	4a65      	ldr	r2, [pc, #404]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800adbc:	fa22 f303 	lsr.w	r3, r2, r3
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc2:	e01e      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adc4:	4b61      	ldr	r3, [pc, #388]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800add0:	d106      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800add8:	d102      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800adda:	4b5e      	ldr	r3, [pc, #376]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800addc:	637b      	str	r3, [r7, #52]	@ 0x34
 800adde:	e010      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ade0:	4b5a      	ldr	r3, [pc, #360]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ade8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adec:	d106      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800adee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adf4:	d102      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800adf6:	4b58      	ldr	r3, [pc, #352]	@ (800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800adf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adfa:	e002      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ae00:	e003      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800ae02:	e002      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800ae04:	2300      	movs	r3, #0
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae08:	bf00      	nop
          }
        }
        break;
 800ae0a:	f000 beb4 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800ae0e:	4b4f      	ldr	r3, [pc, #316]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ae10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ae14:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ae18:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae20:	d056      	beq.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800ae22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae28:	f200 808b 	bhi.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae32:	d03e      	beq.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800ae34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae3a:	f200 8082 	bhi.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae44:	d027      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae4c:	d879      	bhi.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae54:	d017      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800ae56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae5c:	d871      	bhi.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae6a:	d004      	beq.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800ae6c:	e069      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ae6e:	f7fb ff59 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800ae72:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ae74:	e068      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae76:	f107 0314 	add.w	r3, r7, #20
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe f85c 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae84:	e060      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae86:	f107 0308 	add.w	r3, r7, #8
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe f9be 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae94:	e058      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae96:	4b2d      	ldr	r3, [pc, #180]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ae98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae9c:	f003 0302 	and.w	r3, r3, #2
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d103      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800aea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aea8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aeaa:	e04d      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeb0:	e04a      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aeb2:	4b26      	ldr	r3, [pc, #152]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aeb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aec0:	d103      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800aec2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aec6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aec8:	e03e      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aece:	e03b      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aed0:	4b1e      	ldr	r3, [pc, #120]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aed6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800aeda:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aedc:	4b1b      	ldr	r3, [pc, #108]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0302 	and.w	r3, r3, #2
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d10c      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800aee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d109      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aeee:	4b17      	ldr	r3, [pc, #92]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	08db      	lsrs	r3, r3, #3
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	4a15      	ldr	r2, [pc, #84]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800aefa:	fa22 f303 	lsr.w	r3, r2, r3
 800aefe:	637b      	str	r3, [r7, #52]	@ 0x34
 800af00:	e01e      	b.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af02:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af0e:	d106      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800af10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af16:	d102      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800af18:	4b0e      	ldr	r3, [pc, #56]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800af1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af1c:	e010      	b.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af1e:	4b0b      	ldr	r3, [pc, #44]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af2a:	d106      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af32:	d102      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800af34:	4b08      	ldr	r3, [pc, #32]	@ (800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
 800af38:	e002      	b.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800af3e:	e003      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800af40:	e002      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af46:	bf00      	nop
          }
        }
        break;
 800af48:	f000 be15 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af4c:	44020c00 	.word	0x44020c00
 800af50:	03d09000 	.word	0x03d09000
 800af54:	003d0900 	.word	0x003d0900
 800af58:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800af5c:	4b9e      	ldr	r3, [pc, #632]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af62:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800af66:	633b      	str	r3, [r7, #48]	@ 0x30
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800af6e:	d056      	beq.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800af76:	f200 808b 	bhi.w	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af80:	d03e      	beq.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af88:	f200 8082 	bhi.w	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af92:	d027      	beq.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af9a:	d879      	bhi.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afa2:	d017      	beq.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afaa:	d871      	bhi.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800afac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afb8:	d004      	beq.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800afba:	e069      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800afbc:	f7fb feb2 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800afc0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800afc2:	e068      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc4:	f107 0314 	add.w	r3, r7, #20
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fd ffb5 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afd2:	e060      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd4:	f107 0308 	add.w	r3, r7, #8
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fe f917 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afe2:	e058      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800afe4:	4b7c      	ldr	r3, [pc, #496]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800afe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d103      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800aff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aff6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aff8:	e04d      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800affe:	e04a      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b000:	4b75      	ldr	r3, [pc, #468]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b00a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b00e:	d103      	bne.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b010:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b014:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b016:	e03e      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b01c:	e03b      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b01e:	4b6e      	ldr	r3, [pc, #440]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b024:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b028:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b02a:	4b6b      	ldr	r3, [pc, #428]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	2b02      	cmp	r3, #2
 800b034:	d10c      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b03c:	4b66      	ldr	r3, [pc, #408]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	08db      	lsrs	r3, r3, #3
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	4a65      	ldr	r2, [pc, #404]	@ (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b04e:	e01e      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b050:	4b61      	ldr	r3, [pc, #388]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b05c:	d106      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b064:	d102      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b066:	4b5e      	ldr	r3, [pc, #376]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b068:	637b      	str	r3, [r7, #52]	@ 0x34
 800b06a:	e010      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b06c:	4b5a      	ldr	r3, [pc, #360]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b078:	d106      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b080:	d102      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b082:	4b58      	ldr	r3, [pc, #352]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b084:	637b      	str	r3, [r7, #52]	@ 0x34
 800b086:	e002      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b08c:	e003      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b08e:	e002      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b090:	2300      	movs	r3, #0
 800b092:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b094:	bf00      	nop
          }
        }
        break;
 800b096:	f000 bd6e 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b09a:	4b4f      	ldr	r3, [pc, #316]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b09c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b0a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b0a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b0ac:	d056      	beq.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b0b4:	f200 808b 	bhi.w	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0be:	d03e      	beq.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0c6:	f200 8082 	bhi.w	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b0d0:	d027      	beq.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b0d8:	d879      	bhi.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0e0:	d017      	beq.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0e8:	d871      	bhi.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0f6:	d004      	beq.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b0f8:	e069      	b.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b0fa:	f7fb fe13 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800b0fe:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b100:	e068      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b102:	f107 0314 	add.w	r3, r7, #20
 800b106:	4618      	mov	r0, r3
 800b108:	f7fd ff16 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b110:	e060      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b112:	f107 0308 	add.w	r3, r7, #8
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe f878 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b120:	e058      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b122:	4b2d      	ldr	r3, [pc, #180]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d103      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b134:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b136:	e04d      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b13c:	e04a      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b13e:	4b26      	ldr	r3, [pc, #152]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b14c:	d103      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b14e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b152:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b154:	e03e      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b15a:	e03b      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b15c:	4b1e      	ldr	r3, [pc, #120]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b15e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b162:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b166:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b168:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0302 	and.w	r3, r3, #2
 800b170:	2b02      	cmp	r3, #2
 800b172:	d10c      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b17a:	4b17      	ldr	r3, [pc, #92]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	4a15      	ldr	r2, [pc, #84]	@ (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b18c:	e01e      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b18e:	4b12      	ldr	r3, [pc, #72]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b19a:	d106      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1a2:	d102      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b1a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a8:	e010      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1b6:	d106      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1be:	d102      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b1c0:	4b08      	ldr	r3, [pc, #32]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b1c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b1ca:	e003      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b1cc:	e002      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b1d2:	bf00      	nop
          }
        }
        break;
 800b1d4:	f000 bccf 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1d8:	44020c00 	.word	0x44020c00
 800b1dc:	03d09000 	.word	0x03d09000
 800b1e0:	003d0900 	.word	0x003d0900
 800b1e4:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b1e8:	4b9e      	ldr	r3, [pc, #632]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b1ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b1ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1fa:	d056      	beq.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b202:	f200 808b 	bhi.w	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b20c:	d03e      	beq.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b214:	f200 8082 	bhi.w	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b21e:	d027      	beq.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b226:	d879      	bhi.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b22e:	d017      	beq.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b236:	d871      	bhi.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d004      	beq.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b244:	d004      	beq.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b246:	e069      	b.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b248:	f7fb fd6c 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800b24c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b24e:	e068      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b250:	f107 0314 	add.w	r3, r7, #20
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fe6f 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b25e:	e060      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b260:	f107 0308 	add.w	r3, r7, #8
 800b264:	4618      	mov	r0, r3
 800b266:	f7fd ffd1 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b26e:	e058      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b270:	4b7c      	ldr	r3, [pc, #496]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d103      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b27e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b282:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b284:	e04d      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b28a:	e04a      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b28c:	4b75      	ldr	r3, [pc, #468]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b28e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b29a:	d103      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b29c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b2a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b2a2:	e03e      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2a8:	e03b      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2aa:	4b6e      	ldr	r3, [pc, #440]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2b0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2b6:	4b6b      	ldr	r3, [pc, #428]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d10c      	bne.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b2c8:	4b66      	ldr	r3, [pc, #408]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	08db      	lsrs	r3, r3, #3
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	4a65      	ldr	r2, [pc, #404]	@ (800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2da:	e01e      	b.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2dc:	4b61      	ldr	r3, [pc, #388]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2e8:	d106      	bne.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2f0:	d102      	bne.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b2f2:	4b5e      	ldr	r3, [pc, #376]	@ (800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b2f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f6:	e010      	b.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b304:	d106      	bne.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b30c:	d102      	bne.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b30e:	4b58      	ldr	r3, [pc, #352]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b310:	637b      	str	r3, [r7, #52]	@ 0x34
 800b312:	e002      	b.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b318:	e003      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b31a:	e002      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b320:	bf00      	nop
          }
        }
        break;
 800b322:	f000 bc28 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b326:	4b4f      	ldr	r3, [pc, #316]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b32c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b330:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b332:	4b4c      	ldr	r3, [pc, #304]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b33a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b33e:	d106      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	2b00      	cmp	r3, #0
 800b344:	d103      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b346:	4b4a      	ldr	r3, [pc, #296]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b348:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b34a:	f000 bc14 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b354:	d108      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b356:	f107 0320 	add.w	r3, r7, #32
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fd fc82 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b364:	f000 bc07 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b36e:	d107      	bne.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b370:	f107 0314 	add.w	r3, r7, #20
 800b374:	4618      	mov	r0, r3
 800b376:	f7fd fddf 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b37e:	e3fa      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b384:	e3f7      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b386:	4b37      	ldr	r3, [pc, #220]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	633b      	str	r3, [r7, #48]	@ 0x30
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	2b04      	cmp	r3, #4
 800b396:	d861      	bhi.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b398:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39e:	bf00      	nop
 800b3a0:	0800b3b5 	.word	0x0800b3b5
 800b3a4:	0800b3c5 	.word	0x0800b3c5
 800b3a8:	0800b3d5 	.word	0x0800b3d5
 800b3ac:	0800b3e5 	.word	0x0800b3e5
 800b3b0:	0800b3eb 	.word	0x0800b3eb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3b4:	f107 0320 	add.w	r3, r7, #32
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fd fc53 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3c2:	e04e      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3c4:	f107 0314 	add.w	r3, r7, #20
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fd fdb5 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3d2:	e046      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3d4:	f107 0308 	add.w	r3, r7, #8
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fd ff17 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3e2:	e03e      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b3e4:	4b23      	ldr	r3, [pc, #140]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b3e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3e8:	e03b      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b3ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d10c      	bne.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b408:	4b16      	ldr	r3, [pc, #88]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	08db      	lsrs	r3, r3, #3
 800b40e:	f003 0303 	and.w	r3, r3, #3
 800b412:	4a15      	ldr	r2, [pc, #84]	@ (800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b414:	fa22 f303 	lsr.w	r3, r2, r3
 800b418:	637b      	str	r3, [r7, #52]	@ 0x34
 800b41a:	e01e      	b.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b41c:	4b11      	ldr	r3, [pc, #68]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b428:	d106      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b430:	d102      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b432:	4b0e      	ldr	r3, [pc, #56]	@ (800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b434:	637b      	str	r3, [r7, #52]	@ 0x34
 800b436:	e010      	b.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b438:	4b0a      	ldr	r3, [pc, #40]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b444:	d106      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b44c:	d102      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b44e:	4b08      	ldr	r3, [pc, #32]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
 800b452:	e002      	b.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b458:	e003      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b45a:	e002      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b460:	bf00      	nop
          }
        }
        break;
 800b462:	e388      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b464:	44020c00 	.word	0x44020c00
 800b468:	03d09000 	.word	0x03d09000
 800b46c:	003d0900 	.word	0x003d0900
 800b470:	017d7840 	.word	0x017d7840
 800b474:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b478:	4ba9      	ldr	r3, [pc, #676]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b47a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b47e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b482:	633b      	str	r3, [r7, #48]	@ 0x30
 800b484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b486:	2b20      	cmp	r3, #32
 800b488:	f200 809a 	bhi.w	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b48c:	a201      	add	r2, pc, #4	@ (adr r2, 800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b519 	.word	0x0800b519
 800b498:	0800b5c1 	.word	0x0800b5c1
 800b49c:	0800b5c1 	.word	0x0800b5c1
 800b4a0:	0800b5c1 	.word	0x0800b5c1
 800b4a4:	0800b5c1 	.word	0x0800b5c1
 800b4a8:	0800b5c1 	.word	0x0800b5c1
 800b4ac:	0800b5c1 	.word	0x0800b5c1
 800b4b0:	0800b5c1 	.word	0x0800b5c1
 800b4b4:	0800b529 	.word	0x0800b529
 800b4b8:	0800b5c1 	.word	0x0800b5c1
 800b4bc:	0800b5c1 	.word	0x0800b5c1
 800b4c0:	0800b5c1 	.word	0x0800b5c1
 800b4c4:	0800b5c1 	.word	0x0800b5c1
 800b4c8:	0800b5c1 	.word	0x0800b5c1
 800b4cc:	0800b5c1 	.word	0x0800b5c1
 800b4d0:	0800b5c1 	.word	0x0800b5c1
 800b4d4:	0800b539 	.word	0x0800b539
 800b4d8:	0800b5c1 	.word	0x0800b5c1
 800b4dc:	0800b5c1 	.word	0x0800b5c1
 800b4e0:	0800b5c1 	.word	0x0800b5c1
 800b4e4:	0800b5c1 	.word	0x0800b5c1
 800b4e8:	0800b5c1 	.word	0x0800b5c1
 800b4ec:	0800b5c1 	.word	0x0800b5c1
 800b4f0:	0800b5c1 	.word	0x0800b5c1
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b5c1 	.word	0x0800b5c1
 800b4fc:	0800b5c1 	.word	0x0800b5c1
 800b500:	0800b5c1 	.word	0x0800b5c1
 800b504:	0800b5c1 	.word	0x0800b5c1
 800b508:	0800b5c1 	.word	0x0800b5c1
 800b50c:	0800b5c1 	.word	0x0800b5c1
 800b510:	0800b5c1 	.word	0x0800b5c1
 800b514:	0800b54f 	.word	0x0800b54f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b518:	f107 0320 	add.w	r3, r7, #32
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fd fba1 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b524:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b526:	e04e      	b.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b528:	f107 0314 	add.w	r3, r7, #20
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fd fd03 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b536:	e046      	b.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b538:	f107 0308 	add.w	r3, r7, #8
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fd fe65 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b546:	e03e      	b.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b548:	4b76      	ldr	r3, [pc, #472]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b54a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b54c:	e03b      	b.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b54e:	4b74      	ldr	r3, [pc, #464]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b554:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b558:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b55a:	4b71      	ldr	r3, [pc, #452]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b02      	cmp	r3, #2
 800b564:	d10c      	bne.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d109      	bne.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b56c:	4b6c      	ldr	r3, [pc, #432]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	08db      	lsrs	r3, r3, #3
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	4a6c      	ldr	r2, [pc, #432]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b578:	fa22 f303 	lsr.w	r3, r2, r3
 800b57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b57e:	e01e      	b.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b580:	4b67      	ldr	r3, [pc, #412]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b58c:	d106      	bne.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b594:	d102      	bne.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b596:	4b65      	ldr	r3, [pc, #404]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b598:	637b      	str	r3, [r7, #52]	@ 0x34
 800b59a:	e010      	b.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b59c:	4b60      	ldr	r3, [pc, #384]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5a8:	d106      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5b0:	d102      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b5b2:	4b5f      	ldr	r3, [pc, #380]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b5b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b6:	e002      	b.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b5bc:	e003      	b.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b5be:	e002      	b.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5c4:	bf00      	nop
          }
        }
        break;
 800b5c6:	e2d6      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b5c8:	4b55      	ldr	r3, [pc, #340]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b5ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5da:	d031      	beq.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5e2:	d866      	bhi.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5e8:	d027      	beq.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ec:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5ee:	d860      	bhi.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	2b80      	cmp	r3, #128	@ 0x80
 800b5f4:	d019      	beq.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f8:	2b80      	cmp	r3, #128	@ 0x80
 800b5fa:	d85a      	bhi.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	2b40      	cmp	r3, #64	@ 0x40
 800b606:	d008      	beq.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b608:	e053      	b.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b60a:	f107 0320 	add.w	r3, r7, #32
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fd fb28 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b616:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b618:	e04e      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b61a:	f107 0314 	add.w	r3, r7, #20
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fd fc8a 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b628:	e046      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fd fdec 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b638:	e03e      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b63a:	4b3a      	ldr	r3, [pc, #232]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b63c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b63e:	e03b      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b640:	4b37      	ldr	r3, [pc, #220]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b646:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b64a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b64c:	4b34      	ldr	r3, [pc, #208]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b02      	cmp	r3, #2
 800b656:	d10c      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d109      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b65e:	4b30      	ldr	r3, [pc, #192]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	08db      	lsrs	r3, r3, #3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	4a2f      	ldr	r2, [pc, #188]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b66a:	fa22 f303 	lsr.w	r3, r2, r3
 800b66e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b670:	e01e      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b672:	4b2b      	ldr	r3, [pc, #172]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b67a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b67e:	d106      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800b680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b686:	d102      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b688:	4b28      	ldr	r3, [pc, #160]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b68a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b68c:	e010      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b68e:	4b24      	ldr	r3, [pc, #144]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b69a:	d106      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800b69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6a2:	d102      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b6a4:	4b22      	ldr	r3, [pc, #136]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a8:	e002      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b6ae:	e003      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800b6b0:	e002      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6b6:	bf00      	nop
          }
        }
        break;
 800b6b8:	e25d      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800b6ba:	4b19      	ldr	r3, [pc, #100]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b6bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6c0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b6c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d103      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b6cc:	f7fb fb14 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 800b6d0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b6d2:	e250      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800b6d4:	4b12      	ldr	r3, [pc, #72]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6e0:	d10b      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6e8:	d107      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6ea:	f107 0314 	add.w	r3, r7, #20
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd fc22 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6f8:	e04f      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800b6fa:	4b09      	ldr	r3, [pc, #36]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b706:	d115      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800b708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b70e:	d111      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b710:	f107 0308 	add.w	r3, r7, #8
 800b714:	4618      	mov	r0, r3
 800b716:	f7fd fd79 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b71e:	e03c      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800b720:	44020c00 	.word	0x44020c00
 800b724:	00bb8000 	.word	0x00bb8000
 800b728:	03d09000 	.word	0x03d09000
 800b72c:	003d0900 	.word	0x003d0900
 800b730:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800b734:	4b94      	ldr	r3, [pc, #592]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0302 	and.w	r3, r3, #2
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d10d      	bne.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800b740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b742:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b746:	d109      	bne.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b748:	4b8f      	ldr	r3, [pc, #572]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	08db      	lsrs	r3, r3, #3
 800b74e:	f003 0303 	and.w	r3, r3, #3
 800b752:	4a8e      	ldr	r2, [pc, #568]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b754:	fa22 f303 	lsr.w	r3, r2, r3
 800b758:	637b      	str	r3, [r7, #52]	@ 0x34
 800b75a:	e01e      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800b75c:	4b8a      	ldr	r3, [pc, #552]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b768:	d106      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b770:	d102      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800b772:	4b87      	ldr	r3, [pc, #540]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b774:	637b      	str	r3, [r7, #52]	@ 0x34
 800b776:	e010      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800b778:	4b83      	ldr	r3, [pc, #524]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b784:	d106      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800b786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b788:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b78c:	d102      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800b78e:	4b81      	ldr	r3, [pc, #516]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b790:	637b      	str	r3, [r7, #52]	@ 0x34
 800b792:	e002      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b798:	e1ed      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b79a:	e1ec      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800b79c:	4b7a      	ldr	r3, [pc, #488]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b79e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7a2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b7a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b7ae:	f7fb fab9 	bl	8006d24 <HAL_RCC_GetPCLK3Freq>
 800b7b2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b7b4:	e1df      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800b7b6:	4b74      	ldr	r3, [pc, #464]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7c2:	d10b      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7ca:	d107      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7cc:	f107 0314 	add.w	r3, r7, #20
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fd fbb1 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7da:	e045      	b.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800b7dc:	4b6a      	ldr	r3, [pc, #424]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7e8:	d10b      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7f0:	d107      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f2:	f107 0308 	add.w	r3, r7, #8
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fd fd08 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b800:	e032      	b.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800b802:	4b61      	ldr	r3, [pc, #388]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0302 	and.w	r3, r3, #2
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d10d      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b814:	d109      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b816:	4b5c      	ldr	r3, [pc, #368]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	08db      	lsrs	r3, r3, #3
 800b81c:	f003 0303 	and.w	r3, r3, #3
 800b820:	4a5a      	ldr	r2, [pc, #360]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b822:	fa22 f303 	lsr.w	r3, r2, r3
 800b826:	637b      	str	r3, [r7, #52]	@ 0x34
 800b828:	e01e      	b.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800b82a:	4b57      	ldr	r3, [pc, #348]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b836:	d106      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800b838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b83e:	d102      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800b840:	4b53      	ldr	r3, [pc, #332]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b842:	637b      	str	r3, [r7, #52]	@ 0x34
 800b844:	e010      	b.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800b846:	4b50      	ldr	r3, [pc, #320]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b84e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b852:	d106      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b85a:	d102      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800b85c:	4b4d      	ldr	r3, [pc, #308]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b860:	e002      	b.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800b862:	2300      	movs	r3, #0
 800b864:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b866:	e186      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b868:	e185      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b86a:	4b47      	ldr	r3, [pc, #284]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b86c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b870:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800b874:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b87c:	f7fb fa3c 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 800b880:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b882:	e178      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800b884:	4b40      	ldr	r3, [pc, #256]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b88c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b890:	d10b      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b898:	d107      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b89a:	f107 0314 	add.w	r3, r7, #20
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fd fb4a 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8a8:	e045      	b.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800b8aa:	4b37      	ldr	r3, [pc, #220]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8b6:	d10b      	bne.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8be:	d107      	bne.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8c0:	f107 0308 	add.w	r3, r7, #8
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd fca1 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ce:	e032      	b.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800b8d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0302 	and.w	r3, r3, #2
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d10d      	bne.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8de:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b8e2:	d109      	bne.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b8e4:	4b28      	ldr	r3, [pc, #160]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	08db      	lsrs	r3, r3, #3
 800b8ea:	f003 0303 	and.w	r3, r3, #3
 800b8ee:	4a27      	ldr	r2, [pc, #156]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b8f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8f6:	e01e      	b.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b8f8:	4b23      	ldr	r3, [pc, #140]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b904:	d106      	bne.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b90c:	d102      	bne.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b90e:	4b20      	ldr	r3, [pc, #128]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b910:	637b      	str	r3, [r7, #52]	@ 0x34
 800b912:	e010      	b.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b914:	4b1c      	ldr	r3, [pc, #112]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b91c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b920:	d106      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b928:	d102      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b92a:	4b1a      	ldr	r3, [pc, #104]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b92c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b92e:	e002      	b.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b934:	e11f      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b936:	e11e      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b938:	4b13      	ldr	r3, [pc, #76]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b93a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b93e:	f003 0303 	and.w	r3, r3, #3
 800b942:	633b      	str	r3, [r7, #48]	@ 0x30
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	2b03      	cmp	r3, #3
 800b948:	d85f      	bhi.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b94a:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b961 	.word	0x0800b961
 800b954:	0800b969 	.word	0x0800b969
 800b958:	0800b979 	.word	0x0800b979
 800b95c:	0800b999 	.word	0x0800b999

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b960:	f7fb f998 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 800b964:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b966:	e053      	b.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b968:	f107 0320 	add.w	r3, r7, #32
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fd f979 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b974:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b976:	e04b      	b.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b978:	f107 0314 	add.w	r3, r7, #20
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fd fadb 	bl	8008f38 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b986:	e043      	b.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b988:	44020c00 	.word	0x44020c00
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	003d0900 	.word	0x003d0900
 800b994:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b998:	4b79      	ldr	r3, [pc, #484]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b99a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b99e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9a4:	4b76      	ldr	r3, [pc, #472]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d10c      	bne.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d109      	bne.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9b6:	4b72      	ldr	r3, [pc, #456]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	08db      	lsrs	r3, r3, #3
 800b9bc:	f003 0303 	and.w	r3, r3, #3
 800b9c0:	4a70      	ldr	r2, [pc, #448]	@ (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9c8:	e01e      	b.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9ca:	4b6d      	ldr	r3, [pc, #436]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9d6:	d106      	bne.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9de:	d102      	bne.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b9e0:	4b69      	ldr	r3, [pc, #420]	@ (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b9e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9e4:	e010      	b.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9e6:	4b66      	ldr	r3, [pc, #408]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9f2:	d106      	bne.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9fa:	d102      	bne.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b9fc:	4b63      	ldr	r3, [pc, #396]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b9fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba00:	e002      	b.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ba06:	e003      	b.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ba08:	e002      	b.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba0e:	bf00      	nop
          }
        }
        break;
 800ba10:	e0b1      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800ba12:	4b5b      	ldr	r3, [pc, #364]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba1c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800ba1e:	4b58      	ldr	r3, [pc, #352]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba24:	f003 0302 	and.w	r3, r3, #2
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d106      	bne.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d103      	bne.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800ba32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba38:	e01f      	b.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800ba3a:	4b51      	ldr	r3, [pc, #324]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba48:	d106      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	2b40      	cmp	r3, #64	@ 0x40
 800ba4e:	d103      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800ba50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ba54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba56:	e010      	b.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800ba58:	4b49      	ldr	r3, [pc, #292]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba64:	d106      	bne.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800ba66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba68:	2b80      	cmp	r3, #128	@ 0x80
 800ba6a:	d103      	bne.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800ba6c:	f248 0312 	movw	r3, #32786	@ 0x8012
 800ba70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba72:	e002      	b.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ba78:	e07d      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba7a:	e07c      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ba7c:	4b40      	ldr	r3, [pc, #256]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ba86:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800ba88:	4b3d      	ldr	r3, [pc, #244]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba94:	d105      	bne.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800ba96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800ba9c:	4b3c      	ldr	r3, [pc, #240]	@ (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ba9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa0:	e031      	b.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800baa2:	4b37      	ldr	r3, [pc, #220]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800baaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800baae:	d10a      	bne.n	800bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800bab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab2:	2b10      	cmp	r3, #16
 800bab4:	d107      	bne.n	800bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bab6:	f107 0320 	add.w	r3, r7, #32
 800baba:	4618      	mov	r0, r3
 800babc:	f7fd f8d2 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac4:	e01f      	b.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800bac6:	4b2e      	ldr	r3, [pc, #184]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d106      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800bad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	d103      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800bada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bade:	637b      	str	r3, [r7, #52]	@ 0x34
 800bae0:	e011      	b.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800bae2:	4b27      	ldr	r3, [pc, #156]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baf0:	d106      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	2b30      	cmp	r3, #48	@ 0x30
 800baf6:	d103      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800baf8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bafe:	e002      	b.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800bb04:	e037      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb06:	e036      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800bb08:	4b1d      	ldr	r3, [pc, #116]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bb0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bb12:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	2b10      	cmp	r3, #16
 800bb18:	d107      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb1a:	f107 0320 	add.w	r3, r7, #32
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fd f8a0 	bl	8008c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bb28:	e025      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800bb2a:	4b15      	ldr	r3, [pc, #84]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb36:	d10a      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3a:	2b20      	cmp	r3, #32
 800bb3c:	d107      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb3e:	f107 0308 	add.w	r3, r7, #8
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fd fb62 	bl	800920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb4c:	e00f      	b.n	800bb6e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb5a:	d105      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	2b30      	cmp	r3, #48	@ 0x30
 800bb60:	d102      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800bb62:	4b0b      	ldr	r3, [pc, #44]	@ (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800bb64:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb66:	e002      	b.n	800bb6e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800bb6c:	e003      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb6e:	e002      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800bb70:	2300      	movs	r3, #0
 800bb72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb74:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800bb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	373c      	adds	r7, #60	@ 0x3c
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd90      	pop	{r4, r7, pc}
 800bb80:	44020c00 	.word	0x44020c00
 800bb84:	03d09000 	.word	0x03d09000
 800bb88:	003d0900 	.word	0x003d0900
 800bb8c:	017d7840 	.word	0x017d7840
 800bb90:	02dc6c00 	.word	0x02dc6c00

0800bb94 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800bb9c:	4b48      	ldr	r3, [pc, #288]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a47      	ldr	r2, [pc, #284]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bba6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bba8:	f7f8 fe38 	bl	800481c <HAL_GetTick>
 800bbac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbae:	e008      	b.n	800bbc2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbb0:	f7f8 fe34 	bl	800481c <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d901      	bls.n	800bbc2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e07a      	b.n	800bcb8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbc2:	4b3f      	ldr	r3, [pc, #252]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1f0      	bne.n	800bbb0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bbce:	4b3c      	ldr	r3, [pc, #240]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbd6:	f023 0303 	bic.w	r3, r3, #3
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6811      	ldr	r1, [r2, #0]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6852      	ldr	r2, [r2, #4]
 800bbe2:	0212      	lsls	r2, r2, #8
 800bbe4:	430a      	orrs	r2, r1
 800bbe6:	4936      	ldr	r1, [pc, #216]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	025b      	lsls	r3, r3, #9
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	431a      	orrs	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	041b      	lsls	r3, r3, #16
 800bc0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	3b01      	subs	r3, #1
 800bc16:	061b      	lsls	r3, r3, #24
 800bc18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc1c:	4928      	ldr	r1, [pc, #160]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bc22:	4b27      	ldr	r3, [pc, #156]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	f023 020c 	bic.w	r2, r3, #12
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	4924      	ldr	r1, [pc, #144]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc30:	4313      	orrs	r3, r2
 800bc32:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800bc34:	4b22      	ldr	r3, [pc, #136]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc38:	f023 0220 	bic.w	r2, r3, #32
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	69db      	ldr	r3, [r3, #28]
 800bc40:	491f      	ldr	r1, [pc, #124]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bc46:	4b1e      	ldr	r3, [pc, #120]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc4e:	491c      	ldr	r1, [pc, #112]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800bc54:	4b1a      	ldr	r3, [pc, #104]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc58:	4a19      	ldr	r2, [pc, #100]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc5a:	f023 0310 	bic.w	r3, r3, #16
 800bc5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800bc60:	4b17      	ldr	r3, [pc, #92]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc68:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	6a12      	ldr	r2, [r2, #32]
 800bc70:	00d2      	lsls	r2, r2, #3
 800bc72:	4913      	ldr	r1, [pc, #76]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800bc78:	4b11      	ldr	r3, [pc, #68]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7c:	4a10      	ldr	r2, [pc, #64]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc7e:	f043 0310 	orr.w	r3, r3, #16
 800bc82:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800bc84:	4b0e      	ldr	r3, [pc, #56]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a0d      	ldr	r2, [pc, #52]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bc8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc90:	f7f8 fdc4 	bl	800481c <HAL_GetTick>
 800bc94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc96:	e008      	b.n	800bcaa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc98:	f7f8 fdc0 	bl	800481c <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d901      	bls.n	800bcaa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e006      	b.n	800bcb8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bcaa:	4b05      	ldr	r3, [pc, #20]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0f0      	beq.n	800bc98 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0

}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	44020c00 	.word	0x44020c00

0800bcc4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800bccc:	4b48      	ldr	r3, [pc, #288]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a47      	ldr	r2, [pc, #284]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bcd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bcd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bcd8:	f7f8 fda0 	bl	800481c <HAL_GetTick>
 800bcdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcde:	e008      	b.n	800bcf2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bce0:	f7f8 fd9c 	bl	800481c <HAL_GetTick>
 800bce4:	4602      	mov	r2, r0
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d901      	bls.n	800bcf2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e07a      	b.n	800bde8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcf2:	4b3f      	ldr	r3, [pc, #252]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1f0      	bne.n	800bce0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bcfe:	4b3c      	ldr	r3, [pc, #240]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd02:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bd06:	f023 0303 	bic.w	r3, r3, #3
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6811      	ldr	r1, [r2, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	6852      	ldr	r2, [r2, #4]
 800bd12:	0212      	lsls	r2, r2, #8
 800bd14:	430a      	orrs	r2, r1
 800bd16:	4936      	ldr	r1, [pc, #216]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	630b      	str	r3, [r1, #48]	@ 0x30
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	025b      	lsls	r3, r3, #9
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	431a      	orrs	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	041b      	lsls	r3, r3, #16
 800bd3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	061b      	lsls	r3, r3, #24
 800bd48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd4c:	4928      	ldr	r1, [pc, #160]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd52:	4b27      	ldr	r3, [pc, #156]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd56:	f023 020c 	bic.w	r2, r3, #12
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	4924      	ldr	r1, [pc, #144]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800bd64:	4b22      	ldr	r3, [pc, #136]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd68:	f023 0220 	bic.w	r2, r3, #32
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	69db      	ldr	r3, [r3, #28]
 800bd70:	491f      	ldr	r1, [pc, #124]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bd76:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd7e:	491c      	ldr	r1, [pc, #112]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd80:	4313      	orrs	r3, r2
 800bd82:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800bd84:	4b1a      	ldr	r3, [pc, #104]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd88:	4a19      	ldr	r2, [pc, #100]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd8a:	f023 0310 	bic.w	r3, r3, #16
 800bd8e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800bd90:	4b17      	ldr	r3, [pc, #92]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd98:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6a12      	ldr	r2, [r2, #32]
 800bda0:	00d2      	lsls	r2, r2, #3
 800bda2:	4913      	ldr	r1, [pc, #76]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800bda8:	4b11      	ldr	r3, [pc, #68]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bdaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdac:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bdae:	f043 0310 	orr.w	r3, r3, #16
 800bdb2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800bdb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a0d      	ldr	r2, [pc, #52]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bdba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdbe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bdc0:	f7f8 fd2c 	bl	800481c <HAL_GetTick>
 800bdc4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdc6:	e008      	b.n	800bdda <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdc8:	f7f8 fd28 	bl	800481c <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d901      	bls.n	800bdda <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e006      	b.n	800bde8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdda:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0f0      	beq.n	800bdc8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	44020c00 	.word	0x44020c00

0800bdf4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e162      	b.n	800c0cc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a70      	ldr	r2, [pc, #448]	@ (800bfcc <HAL_SPI_Init+0x1d8>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d018      	beq.n	800be42 <HAL_SPI_Init+0x4e>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a6e      	ldr	r2, [pc, #440]	@ (800bfd0 <HAL_SPI_Init+0x1dc>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d013      	beq.n	800be42 <HAL_SPI_Init+0x4e>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a6d      	ldr	r2, [pc, #436]	@ (800bfd4 <HAL_SPI_Init+0x1e0>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d00e      	beq.n	800be42 <HAL_SPI_Init+0x4e>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a6b      	ldr	r2, [pc, #428]	@ (800bfd8 <HAL_SPI_Init+0x1e4>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d009      	beq.n	800be42 <HAL_SPI_Init+0x4e>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a6a      	ldr	r2, [pc, #424]	@ (800bfdc <HAL_SPI_Init+0x1e8>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d004      	beq.n	800be42 <HAL_SPI_Init+0x4e>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a68      	ldr	r2, [pc, #416]	@ (800bfe0 <HAL_SPI_Init+0x1ec>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	e000      	b.n	800be44 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800be42:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a5f      	ldr	r2, [pc, #380]	@ (800bfcc <HAL_SPI_Init+0x1d8>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d018      	beq.n	800be86 <HAL_SPI_Init+0x92>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a5d      	ldr	r2, [pc, #372]	@ (800bfd0 <HAL_SPI_Init+0x1dc>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d013      	beq.n	800be86 <HAL_SPI_Init+0x92>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a5c      	ldr	r2, [pc, #368]	@ (800bfd4 <HAL_SPI_Init+0x1e0>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d00e      	beq.n	800be86 <HAL_SPI_Init+0x92>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a5a      	ldr	r2, [pc, #360]	@ (800bfd8 <HAL_SPI_Init+0x1e4>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d009      	beq.n	800be86 <HAL_SPI_Init+0x92>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a59      	ldr	r2, [pc, #356]	@ (800bfdc <HAL_SPI_Init+0x1e8>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d004      	beq.n	800be86 <HAL_SPI_Init+0x92>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a57      	ldr	r2, [pc, #348]	@ (800bfe0 <HAL_SPI_Init+0x1ec>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d105      	bne.n	800be92 <HAL_SPI_Init+0x9e>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	2b0f      	cmp	r3, #15
 800be8c:	d901      	bls.n	800be92 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e11c      	b.n	800c0cc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fdac 	bl	800c9f0 <SPI_GetPacketSize>
 800be98:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a4b      	ldr	r2, [pc, #300]	@ (800bfcc <HAL_SPI_Init+0x1d8>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d018      	beq.n	800bed6 <HAL_SPI_Init+0xe2>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a49      	ldr	r2, [pc, #292]	@ (800bfd0 <HAL_SPI_Init+0x1dc>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d013      	beq.n	800bed6 <HAL_SPI_Init+0xe2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a48      	ldr	r2, [pc, #288]	@ (800bfd4 <HAL_SPI_Init+0x1e0>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00e      	beq.n	800bed6 <HAL_SPI_Init+0xe2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a46      	ldr	r2, [pc, #280]	@ (800bfd8 <HAL_SPI_Init+0x1e4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d009      	beq.n	800bed6 <HAL_SPI_Init+0xe2>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a45      	ldr	r2, [pc, #276]	@ (800bfdc <HAL_SPI_Init+0x1e8>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d004      	beq.n	800bed6 <HAL_SPI_Init+0xe2>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a43      	ldr	r2, [pc, #268]	@ (800bfe0 <HAL_SPI_Init+0x1ec>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d102      	bne.n	800bedc <HAL_SPI_Init+0xe8>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b08      	cmp	r3, #8
 800beda:	d820      	bhi.n	800bf1e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bee0:	4a40      	ldr	r2, [pc, #256]	@ (800bfe4 <HAL_SPI_Init+0x1f0>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d018      	beq.n	800bf18 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a3f      	ldr	r2, [pc, #252]	@ (800bfe8 <HAL_SPI_Init+0x1f4>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d013      	beq.n	800bf18 <HAL_SPI_Init+0x124>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a3d      	ldr	r2, [pc, #244]	@ (800bfec <HAL_SPI_Init+0x1f8>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d00e      	beq.n	800bf18 <HAL_SPI_Init+0x124>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a3c      	ldr	r2, [pc, #240]	@ (800bff0 <HAL_SPI_Init+0x1fc>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d009      	beq.n	800bf18 <HAL_SPI_Init+0x124>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a3a      	ldr	r2, [pc, #232]	@ (800bff4 <HAL_SPI_Init+0x200>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d004      	beq.n	800bf18 <HAL_SPI_Init+0x124>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a39      	ldr	r2, [pc, #228]	@ (800bff8 <HAL_SPI_Init+0x204>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d104      	bne.n	800bf22 <HAL_SPI_Init+0x12e>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b10      	cmp	r3, #16
 800bf1c:	d901      	bls.n	800bf22 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e0d4      	b.n	800c0cc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7f7 fdd6 	bl	8003ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0201 	bic.w	r2, r2, #1
 800bf52:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bf5e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf68:	d119      	bne.n	800bf9e <HAL_SPI_Init+0x1aa>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf72:	d103      	bne.n	800bf7c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d008      	beq.n	800bf8e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10c      	bne.n	800bf9e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf8c:	d107      	bne.n	800bf9e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bf9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d028      	beq.n	800bffc <HAL_SPI_Init+0x208>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	2b06      	cmp	r3, #6
 800bfb0:	d924      	bls.n	800bffc <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	e020      	b.n	800c00c <HAL_SPI_Init+0x218>
 800bfca:	bf00      	nop
 800bfcc:	40014c00 	.word	0x40014c00
 800bfd0:	50014c00 	.word	0x50014c00
 800bfd4:	44002000 	.word	0x44002000
 800bfd8:	54002000 	.word	0x54002000
 800bfdc:	40015000 	.word	0x40015000
 800bfe0:	50015000 	.word	0x50015000
 800bfe4:	40013000 	.word	0x40013000
 800bfe8:	50013000 	.word	0x50013000
 800bfec:	40003800 	.word	0x40003800
 800bff0:	50003800 	.word	0x50003800
 800bff4:	40003c00 	.word	0x40003c00
 800bff8:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c00a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	69da      	ldr	r2, [r3, #28]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c014:	431a      	orrs	r2, r3
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	431a      	orrs	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c01e:	ea42 0103 	orr.w	r1, r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c036:	431a      	orrs	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	431a      	orrs	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	431a      	orrs	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	431a      	orrs	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	431a      	orrs	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	431a      	orrs	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c060:	431a      	orrs	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	431a      	orrs	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c06c:	431a      	orrs	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c072:	431a      	orrs	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c078:	ea42 0103 	orr.w	r1, r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f022 0201 	bic.w	r2, r2, #1
 800c096:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00a      	beq.n	800c0ba <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af02      	add	r7, sp, #8
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3320      	adds	r3, #32
 800c0ea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0ec:	f7f8 fb96 	bl	800481c <HAL_GetTick>
 800c0f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d001      	beq.n	800c102 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c0fe:	2302      	movs	r3, #2
 800c100:	e1f9      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <HAL_SPI_Transmit+0x3a>
 800c108:	88fb      	ldrh	r3, [r7, #6]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e1f1      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d101      	bne.n	800c120 <HAL_SPI_Transmit+0x4c>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e1ea      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2203      	movs	r2, #3
 800c12c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	88fa      	ldrh	r2, [r7, #6]
 800c142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	88fa      	ldrh	r2, [r7, #6]
 800c14a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c178:	d108      	bne.n	800c18c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	e009      	b.n	800c1a0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c19e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	0c1b      	lsrs	r3, r3, #16
 800c1a8:	041b      	lsls	r3, r3, #16
 800c1aa:	88f9      	ldrh	r1, [r7, #6]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	6812      	ldr	r2, [r2, #0]
 800c1b0:	430b      	orrs	r3, r1
 800c1b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0201 	orr.w	r2, r2, #1
 800c1c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1cc:	d107      	bne.n	800c1de <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	2b0f      	cmp	r3, #15
 800c1e4:	d965      	bls.n	800c2b2 <HAL_SPI_Transmit+0x1de>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a94      	ldr	r2, [pc, #592]	@ (800c43c <HAL_SPI_Transmit+0x368>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d059      	beq.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a92      	ldr	r2, [pc, #584]	@ (800c440 <HAL_SPI_Transmit+0x36c>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d054      	beq.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a91      	ldr	r2, [pc, #580]	@ (800c444 <HAL_SPI_Transmit+0x370>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d04f      	beq.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a8f      	ldr	r2, [pc, #572]	@ (800c448 <HAL_SPI_Transmit+0x374>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d04a      	beq.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a8e      	ldr	r2, [pc, #568]	@ (800c44c <HAL_SPI_Transmit+0x378>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d045      	beq.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a8c      	ldr	r2, [pc, #560]	@ (800c450 <HAL_SPI_Transmit+0x37c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d147      	bne.n	800c2b2 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c222:	e03f      	b.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d114      	bne.n	800c25c <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6812      	ldr	r2, [r2, #0]
 800c23c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c242:	1d1a      	adds	r2, r3, #4
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c24e:	b29b      	uxth	r3, r3
 800c250:	3b01      	subs	r3, #1
 800c252:	b29a      	uxth	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c25a:	e023      	b.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c25c:	f7f8 fade 	bl	800481c <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d803      	bhi.n	800c274 <HAL_SPI_Transmit+0x1a0>
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c272:	d102      	bne.n	800c27a <HAL_SPI_Transmit+0x1a6>
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d114      	bne.n	800c2a4 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f000 faea 	bl	800c854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c286:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e128      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1b9      	bne.n	800c224 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c2b0:	e0fb      	b.n	800c4aa <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	2b07      	cmp	r3, #7
 800c2b8:	f240 80f0 	bls.w	800c49c <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c2bc:	e05d      	b.n	800c37a <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	695b      	ldr	r3, [r3, #20]
 800c2c4:	f003 0302 	and.w	r3, r3, #2
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d132      	bne.n	800c332 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d918      	bls.n	800c30a <HAL_SPI_Transmit+0x236>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d014      	beq.n	800c30a <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6812      	ldr	r2, [r2, #0]
 800c2ea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b02      	subs	r3, #2
 800c300:	b29a      	uxth	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c308:	e037      	b.n	800c37a <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c30e:	881a      	ldrh	r2, [r3, #0]
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c318:	1c9a      	adds	r2, r3, #2
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c324:	b29b      	uxth	r3, r3
 800c326:	3b01      	subs	r3, #1
 800c328:	b29a      	uxth	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c330:	e023      	b.n	800c37a <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c332:	f7f8 fa73 	bl	800481c <HAL_GetTick>
 800c336:	4602      	mov	r2, r0
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d803      	bhi.n	800c34a <HAL_SPI_Transmit+0x276>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c348:	d102      	bne.n	800c350 <HAL_SPI_Transmit+0x27c>
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d114      	bne.n	800c37a <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 fa7f 	bl	800c854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c35c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e0bd      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c380:	b29b      	uxth	r3, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d19b      	bne.n	800c2be <HAL_SPI_Transmit+0x1ea>
 800c386:	e090      	b.n	800c4aa <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b02      	cmp	r3, #2
 800c394:	d15e      	bne.n	800c454 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d918      	bls.n	800c3d4 <HAL_SPI_Transmit+0x300>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a6:	2b40      	cmp	r3, #64	@ 0x40
 800c3a8:	d914      	bls.n	800c3d4 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6812      	ldr	r2, [r2, #0]
 800c3b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3ba:	1d1a      	adds	r2, r3, #4
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	3b04      	subs	r3, #4
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c3d2:	e063      	b.n	800c49c <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d917      	bls.n	800c410 <HAL_SPI_Transmit+0x33c>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d013      	beq.n	800c410 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3ec:	881a      	ldrh	r2, [r3, #0]
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3f6:	1c9a      	adds	r2, r3, #2
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c402:	b29b      	uxth	r3, r3
 800c404:	3b02      	subs	r3, #2
 800c406:	b29a      	uxth	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c40e:	e045      	b.n	800c49c <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3320      	adds	r3, #32
 800c41a:	7812      	ldrb	r2, [r2, #0]
 800c41c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	b29a      	uxth	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c43a:	e02f      	b.n	800c49c <HAL_SPI_Transmit+0x3c8>
 800c43c:	40013000 	.word	0x40013000
 800c440:	50013000 	.word	0x50013000
 800c444:	40003800 	.word	0x40003800
 800c448:	50003800 	.word	0x50003800
 800c44c:	40003c00 	.word	0x40003c00
 800c450:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c454:	f7f8 f9e2 	bl	800481c <HAL_GetTick>
 800c458:	4602      	mov	r2, r0
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d803      	bhi.n	800c46c <HAL_SPI_Transmit+0x398>
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d102      	bne.n	800c472 <HAL_SPI_Transmit+0x39e>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d114      	bne.n	800c49c <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f000 f9ee 	bl	800c854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c47e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c498:	2303      	movs	r3, #3
 800c49a:	e02c      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f47f af6f 	bne.w	800c388 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2108      	movs	r1, #8
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 fa6d 	bl	800c994 <SPI_WaitOnFlagUntilTimeout>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d007      	beq.n	800c4d0 <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4c6:	f043 0220 	orr.w	r2, r3, #32
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 f9bf 	bl	800c854 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e000      	b.n	800c4f6 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
  }
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop

0800c500 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	603b      	str	r3, [r7, #0]
 800c50c:	4613      	mov	r3, r2
 800c50e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3330      	adds	r3, #48	@ 0x30
 800c516:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c518:	f7f8 f980 	bl	800481c <HAL_GetTick>
 800c51c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c524:	b2db      	uxtb	r3, r3
 800c526:	2b01      	cmp	r3, #1
 800c528:	d001      	beq.n	800c52e <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800c52a:	2302      	movs	r3, #2
 800c52c:	e181      	b.n	800c832 <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <HAL_SPI_Receive+0x3a>
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e179      	b.n	800c832 <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c544:	2b01      	cmp	r3, #1
 800c546:	d101      	bne.n	800c54c <HAL_SPI_Receive+0x4c>
 800c548:	2302      	movs	r3, #2
 800c54a:	e172      	b.n	800c832 <HAL_SPI_Receive+0x332>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2204      	movs	r2, #4
 800c558:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	88fa      	ldrh	r2, [r7, #6]
 800c56e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	88fa      	ldrh	r2, [r7, #6]
 800c576:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c5a4:	d108      	bne.n	800c5b8 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e009      	b.n	800c5cc <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c5ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	0c1b      	lsrs	r3, r3, #16
 800c5d4:	041b      	lsls	r3, r3, #16
 800c5d6:	88f9      	ldrh	r1, [r7, #6]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	6812      	ldr	r2, [r2, #0]
 800c5dc:	430b      	orrs	r3, r1
 800c5de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f042 0201 	orr.w	r2, r2, #1
 800c5ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5f8:	d107      	bne.n	800c60a <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c608:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	2b0f      	cmp	r3, #15
 800c610:	d966      	bls.n	800c6e0 <HAL_SPI_Receive+0x1e0>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a89      	ldr	r2, [pc, #548]	@ (800c83c <HAL_SPI_Receive+0x33c>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d05a      	beq.n	800c6d2 <HAL_SPI_Receive+0x1d2>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a87      	ldr	r2, [pc, #540]	@ (800c840 <HAL_SPI_Receive+0x340>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d055      	beq.n	800c6d2 <HAL_SPI_Receive+0x1d2>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a86      	ldr	r2, [pc, #536]	@ (800c844 <HAL_SPI_Receive+0x344>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d050      	beq.n	800c6d2 <HAL_SPI_Receive+0x1d2>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a84      	ldr	r2, [pc, #528]	@ (800c848 <HAL_SPI_Receive+0x348>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d04b      	beq.n	800c6d2 <HAL_SPI_Receive+0x1d2>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a83      	ldr	r2, [pc, #524]	@ (800c84c <HAL_SPI_Receive+0x34c>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d046      	beq.n	800c6d2 <HAL_SPI_Receive+0x1d2>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a81      	ldr	r2, [pc, #516]	@ (800c850 <HAL_SPI_Receive+0x350>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d148      	bne.n	800c6e0 <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c64e:	e040      	b.n	800c6d2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	695a      	ldr	r2, [r3, #20]
 800c656:	f248 0308 	movw	r3, #32776	@ 0x8008
 800c65a:	4013      	ands	r3, r2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d014      	beq.n	800c68a <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c668:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c66a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c670:	1d1a      	adds	r2, r3, #4
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	3b01      	subs	r3, #1
 800c680:	b29a      	uxth	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c688:	e023      	b.n	800c6d2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c68a:	f7f8 f8c7 	bl	800481c <HAL_GetTick>
 800c68e:	4602      	mov	r2, r0
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d803      	bhi.n	800c6a2 <HAL_SPI_Receive+0x1a2>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a0:	d102      	bne.n	800c6a8 <HAL_SPI_Receive+0x1a8>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d114      	bne.n	800c6d2 <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 f8d3 	bl	800c854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e0af      	b.n	800c832 <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1b8      	bne.n	800c650 <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c6de:	e095      	b.n	800c80c <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	2b07      	cmp	r3, #7
 800c6e6:	f240 808b 	bls.w	800c800 <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c6ea:	e03f      	b.n	800c76c <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d114      	bne.n	800c724 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	8812      	ldrh	r2, [r2, #0]
 800c702:	b292      	uxth	r2, r2
 800c704:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c70a:	1c9a      	adds	r2, r3, #2
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c722:	e023      	b.n	800c76c <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c724:	f7f8 f87a 	bl	800481c <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d803      	bhi.n	800c73c <HAL_SPI_Receive+0x23c>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73a:	d102      	bne.n	800c742 <HAL_SPI_Receive+0x242>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d114      	bne.n	800c76c <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 f886 	bl	800c854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c74e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	e062      	b.n	800c832 <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c772:	b29b      	uxth	r3, r3
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1b9      	bne.n	800c6ec <HAL_SPI_Receive+0x1ec>
 800c778:	e048      	b.n	800c80c <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b01      	cmp	r3, #1
 800c786:	d117      	bne.n	800c7b8 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c794:	7812      	ldrb	r2, [r2, #0]
 800c796:	b2d2      	uxtb	r2, r2
 800c798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c7b6:	e023      	b.n	800c800 <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7b8:	f7f8 f830 	bl	800481c <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d803      	bhi.n	800c7d0 <HAL_SPI_Receive+0x2d0>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ce:	d102      	bne.n	800c7d6 <HAL_SPI_Receive+0x2d6>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d114      	bne.n	800c800 <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 f83c 	bl	800c854 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e018      	b.n	800c832 <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1b6      	bne.n	800c77a <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 f821 	bl	800c854 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	e000      	b.n	800c832 <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800c830:	2300      	movs	r3, #0
  }
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	40013000 	.word	0x40013000
 800c840:	50013000 	.word	0x50013000
 800c844:	40003800 	.word	0x40003800
 800c848:	50003800 	.word	0x50003800
 800c84c:	40003c00 	.word	0x40003c00
 800c850:	50003c00 	.word	0x50003c00

0800c854 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	695b      	ldr	r3, [r3, #20]
 800c862:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	699a      	ldr	r2, [r3, #24]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f042 0208 	orr.w	r2, r2, #8
 800c872:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	699a      	ldr	r2, [r3, #24]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f042 0210 	orr.w	r2, r2, #16
 800c882:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f022 0201 	bic.w	r2, r2, #1
 800c892:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	6812      	ldr	r2, [r2, #0]
 800c89e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c8b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	d014      	beq.n	800c8ee <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00f      	beq.n	800c8ee <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	699a      	ldr	r2, [r3, #24]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f042 0220 	orr.w	r2, r2, #32
 800c8ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b03      	cmp	r3, #3
 800c8f8:	d014      	beq.n	800c924 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00f      	beq.n	800c924 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c90a:	f043 0204 	orr.w	r2, r3, #4
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	699a      	ldr	r2, [r3, #24]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c922:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00f      	beq.n	800c94e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c934:	f043 0201 	orr.w	r2, r3, #1
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	699a      	ldr	r2, [r3, #24]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c94c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00f      	beq.n	800c978 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c95e:	f043 0208 	orr.w	r2, r3, #8
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	699a      	ldr	r2, [r3, #24]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c976:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800c988:	bf00      	nop
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	603b      	str	r3, [r7, #0]
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c9a4:	e010      	b.n	800c9c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9a6:	f7f7 ff39 	bl	800481c <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d803      	bhi.n	800c9be <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9bc:	d102      	bne.n	800c9c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e00f      	b.n	800c9e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	695a      	ldr	r2, [r3, #20]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	bf0c      	ite	eq
 800c9d8:	2301      	moveq	r3, #1
 800c9da:	2300      	movne	r3, #0
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	461a      	mov	r2, r3
 800c9e0:	79fb      	ldrb	r3, [r7, #7]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d0df      	beq.n	800c9a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fc:	095b      	lsrs	r3, r3, #5
 800c9fe:	3301      	adds	r3, #1
 800ca00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	3301      	adds	r3, #1
 800ca08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	3307      	adds	r3, #7
 800ca0e:	08db      	lsrs	r3, r3, #3
 800ca10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	fb02 f303 	mul.w	r3, r2, r3
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
	...

0800ca28 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e03e      	b.n	800cabc <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7f7 fc42 	bl	80042dc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3308      	adds	r3, #8
 800ca60:	4619      	mov	r1, r3
 800ca62:	4610      	mov	r0, r2
 800ca64:	f002 fb3e 	bl	800f0e4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	461a      	mov	r2, r3
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	f002 fc04 	bl	800f280 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6858      	ldr	r0, [r3, #4]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	689a      	ldr	r2, [r3, #8]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca84:	6879      	ldr	r1, [r7, #4]
 800ca86:	f002 fc48 	bl	800f31a <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	6892      	ldr	r2, [r2, #8]
 800ca92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	6892      	ldr	r2, [r2, #8]
 800ca9e:	f041 0101 	orr.w	r1, r1, #1
 800caa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800caa6:	4b07      	ldr	r3, [pc, #28]	@ (800cac4 <HAL_SRAM_Init+0x9c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a06      	ldr	r2, [pc, #24]	@ (800cac4 <HAL_SRAM_Init+0x9c>)
 800caac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cab0:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	47000400 	.word	0x47000400

0800cac8 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800cac8:	b480      	push	{r7}
 800caca:	b08b      	sub	sp, #44	@ 0x2c
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
  uint32_t size;
  uint32_t time_out = 0 ;
 800cad6:	2300      	movs	r3, #0
 800cad8:	623b      	str	r3, [r7, #32]
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	61fb      	str	r3, [r7, #28]
  uint8_t *pdestbuff = pDstBuffer;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	61bb      	str	r3, [r7, #24]
  HAL_SRAM_StateTypeDef state = hsram->State;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cae8:	75fb      	strb	r3, [r7, #23]


  while(*psramaddress == 0xFF && time_out++ < 0xFFFF0 ); //cmt check this line
 800caea:	bf00      	nop
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2bff      	cmp	r3, #255	@ 0xff
 800caf4:	d105      	bne.n	800cb02 <HAL_SRAM_Read_8b+0x3a>
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	623a      	str	r2, [r7, #32]
 800cafc:	4a1e      	ldr	r2, [pc, #120]	@ (800cb78 <HAL_SRAM_Read_8b+0xb0>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d9f4      	bls.n	800caec <HAL_SRAM_Read_8b+0x24>
  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800cb02:	7dfb      	ldrb	r3, [r7, #23]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d002      	beq.n	800cb0e <HAL_SRAM_Read_8b+0x46>
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	2b04      	cmp	r3, #4
 800cb0c:	d12c      	bne.n	800cb68 <HAL_SRAM_Read_8b+0xa0>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d101      	bne.n	800cb1c <HAL_SRAM_Read_8b+0x54>
 800cb18:	2302      	movs	r3, #2
 800cb1a:	e026      	b.n	800cb6a <HAL_SRAM_Read_8b+0xa2>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2202      	movs	r2, #2
 800cb28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb30:	e00d      	b.n	800cb4e <HAL_SRAM_Read_8b+0x86>
    {
      *pdestbuff = *psramaddress;
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	61bb      	str	r3, [r7, #24]
      psramaddress++;
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	3301      	adds	r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
    for (size = BufferSize; size != 0U; size--)
 800cb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1ee      	bne.n	800cb32 <HAL_SRAM_Read_8b+0x6a>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	7dfa      	ldrb	r2, [r7, #23]
 800cb58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	e000      	b.n	800cb6a <HAL_SRAM_Read_8b+0xa2>
    return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	372c      	adds	r7, #44	@ 0x2c
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	000fffef 	.word	0x000fffef

0800cb7c <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b089      	sub	sp, #36	@ 0x24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
 800cb88:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d12b      	bne.n	800cbf6 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d101      	bne.n	800cbac <HAL_SRAM_Write_8b+0x30>
 800cba8:	2302      	movs	r3, #2
 800cbaa:	e025      	b.n	800cbf8 <HAL_SRAM_Write_8b+0x7c>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	61fb      	str	r3, [r7, #28]
 800cbc0:	e00c      	b.n	800cbdc <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	781a      	ldrb	r2, [r3, #0]
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	61fb      	str	r3, [r7, #28]
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1ef      	bne.n	800cbc2 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e000      	b.n	800cbf8 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3724      	adds	r7, #36	@ 0x24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d101      	bne.n	800cc16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e042      	b.n	800cc9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7f7 f8c5 	bl	8003db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2224      	movs	r2, #36	@ 0x24
 800cc32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f022 0201 	bic.w	r2, r2, #1
 800cc44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d002      	beq.n	800cc54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fec8 	bl	800d9e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fcd7 	bl	800d608 <UART_SetConfig>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d101      	bne.n	800cc64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e01b      	b.n	800cc9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0201 	orr.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 ff47 	bl	800db28 <UART_CheckIdleState>
 800cc9a:	4603      	mov	r3, r0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08a      	sub	sp, #40	@ 0x28
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	603b      	str	r3, [r7, #0]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccba:	2b20      	cmp	r3, #32
 800ccbc:	f040 808b 	bne.w	800cdd6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <HAL_UART_Transmit+0x28>
 800ccc6:	88fb      	ldrh	r3, [r7, #6]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e083      	b.n	800cdd8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccda:	2b80      	cmp	r3, #128	@ 0x80
 800ccdc:	d107      	bne.n	800ccee <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	689a      	ldr	r2, [r3, #8]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ccec:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2221      	movs	r2, #33	@ 0x21
 800ccfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccfe:	f7f7 fd8d 	bl	800481c <HAL_GetTick>
 800cd02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	88fa      	ldrh	r2, [r7, #6]
 800cd08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	88fa      	ldrh	r2, [r7, #6]
 800cd10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd1c:	d108      	bne.n	800cd30 <HAL_UART_Transmit+0x8c>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d104      	bne.n	800cd30 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	61bb      	str	r3, [r7, #24]
 800cd2e:	e003      	b.n	800cd38 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cd38:	e030      	b.n	800cd9c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	2200      	movs	r2, #0
 800cd42:	2180      	movs	r1, #128	@ 0x80
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 ff99 	bl	800dc7c <UART_WaitOnFlagUntilTimeout>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d005      	beq.n	800cd5c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e03d      	b.n	800cdd8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10b      	bne.n	800cd7a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	461a      	mov	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	3302      	adds	r3, #2
 800cd76:	61bb      	str	r3, [r7, #24]
 800cd78:	e007      	b.n	800cd8a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	781a      	ldrb	r2, [r3, #0]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	3301      	adds	r3, #1
 800cd88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1c8      	bne.n	800cd3a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2140      	movs	r1, #64	@ 0x40
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 ff62 	bl	800dc7c <UART_WaitOnFlagUntilTimeout>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d005      	beq.n	800cdca <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e006      	b.n	800cdd8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e000      	b.n	800cdd8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800cdd6:	2302      	movs	r3, #2
  }
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3720      	adds	r7, #32
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b091      	sub	sp, #68	@ 0x44
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	4613      	mov	r3, r2
 800cdec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdf4:	2b20      	cmp	r3, #32
 800cdf6:	f040 8088 	bne.w	800cf0a <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <HAL_UART_Transmit_IT+0x26>
 800ce00:	88fb      	ldrh	r3, [r7, #6]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d101      	bne.n	800ce0a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e080      	b.n	800cf0c <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce14:	2b80      	cmp	r3, #128	@ 0x80
 800ce16:	d107      	bne.n	800ce28 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	689a      	ldr	r2, [r3, #8]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ce26:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	88fa      	ldrh	r2, [r7, #6]
 800ce32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	88fa      	ldrh	r2, [r7, #6]
 800ce3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2221      	movs	r2, #33	@ 0x21
 800ce50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce5c:	d12a      	bne.n	800ceb4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce66:	d107      	bne.n	800ce78 <HAL_UART_Transmit_IT+0x98>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d103      	bne.n	800ce78 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	4a29      	ldr	r2, [pc, #164]	@ (800cf18 <HAL_UART_Transmit_IT+0x138>)
 800ce74:	679a      	str	r2, [r3, #120]	@ 0x78
 800ce76:	e002      	b.n	800ce7e <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4a28      	ldr	r2, [pc, #160]	@ (800cf1c <HAL_UART_Transmit_IT+0x13c>)
 800ce7c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	3308      	adds	r3, #8
 800ce84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	e853 3f00 	ldrex	r3, [r3]
 800ce8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce94:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce9e:	637a      	str	r2, [r7, #52]	@ 0x34
 800cea0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cea6:	e841 2300 	strex	r3, r2, [r1]
 800ceaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ceac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1e5      	bne.n	800ce7e <HAL_UART_Transmit_IT+0x9e>
 800ceb2:	e028      	b.n	800cf06 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cebc:	d107      	bne.n	800cece <HAL_UART_Transmit_IT+0xee>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d103      	bne.n	800cece <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	4a15      	ldr	r2, [pc, #84]	@ (800cf20 <HAL_UART_Transmit_IT+0x140>)
 800ceca:	679a      	str	r2, [r3, #120]	@ 0x78
 800cecc:	e002      	b.n	800ced4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	4a14      	ldr	r2, [pc, #80]	@ (800cf24 <HAL_UART_Transmit_IT+0x144>)
 800ced2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	613b      	str	r3, [r7, #16]
   return(result);
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef2:	623b      	str	r3, [r7, #32]
 800cef4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef6:	69f9      	ldr	r1, [r7, #28]
 800cef8:	6a3a      	ldr	r2, [r7, #32]
 800cefa:	e841 2300 	strex	r3, r2, [r1]
 800cefe:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1e6      	bne.n	800ced4 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	e000      	b.n	800cf0c <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800cf0a:	2302      	movs	r3, #2
  }
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3744      	adds	r7, #68	@ 0x44
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	0800e2ef 	.word	0x0800e2ef
 800cf1c:	0800e20f 	.word	0x0800e20f
 800cf20:	0800e14d 	.word	0x0800e14d
 800cf24:	0800e095 	.word	0x0800e095

0800cf28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08a      	sub	sp, #40	@ 0x28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	4613      	mov	r3, r2
 800cf34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf3c:	2b20      	cmp	r3, #32
 800cf3e:	d14b      	bne.n	800cfd8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <HAL_UART_Receive_IT+0x24>
 800cf46:	88fb      	ldrh	r3, [r7, #6]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e044      	b.n	800cfda <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf60:	2b40      	cmp	r3, #64	@ 0x40
 800cf62:	d107      	bne.n	800cf74 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689a      	ldr	r2, [r3, #8]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf72:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a1a      	ldr	r2, [pc, #104]	@ (800cfe4 <HAL_UART_Receive_IT+0xbc>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d024      	beq.n	800cfc8 <HAL_UART_Receive_IT+0xa0>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a19      	ldr	r2, [pc, #100]	@ (800cfe8 <HAL_UART_Receive_IT+0xc0>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d01f      	beq.n	800cfc8 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d018      	beq.n	800cfc8 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	e853 3f00 	ldrex	r3, [r3]
 800cfa2:	613b      	str	r3, [r7, #16]
   return(result);
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	623b      	str	r3, [r7, #32]
 800cfb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb8:	69f9      	ldr	r1, [r7, #28]
 800cfba:	6a3a      	ldr	r2, [r7, #32]
 800cfbc:	e841 2300 	strex	r3, r2, [r1]
 800cfc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1e6      	bne.n	800cf96 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cfc8:	88fb      	ldrh	r3, [r7, #6]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	68b9      	ldr	r1, [r7, #8]
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f000 fec2 	bl	800dd58 <UART_Start_Receive_IT>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	e000      	b.n	800cfda <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800cfd8:	2302      	movs	r3, #2
  }
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3728      	adds	r7, #40	@ 0x28
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	44002400 	.word	0x44002400
 800cfe8:	54002400 	.word	0x54002400

0800cfec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b0ae      	sub	sp, #184	@ 0xb8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d016:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d01a:	4013      	ands	r3, r2
 800d01c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800d020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d024:	2b00      	cmp	r3, #0
 800d026:	d11b      	bne.n	800d060 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d02c:	f003 0320 	and.w	r3, r3, #32
 800d030:	2b00      	cmp	r3, #0
 800d032:	d015      	beq.n	800d060 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d038:	f003 0320 	and.w	r3, r3, #32
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d105      	bne.n	800d04c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d009      	beq.n	800d060 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 82ac 	beq.w	800d5ae <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	4798      	blx	r3
      }
      return;
 800d05e:	e2a6      	b.n	800d5ae <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 80fd 	beq.w	800d264 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d06a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d06e:	4b7a      	ldr	r3, [pc, #488]	@ (800d258 <HAL_UART_IRQHandler+0x26c>)
 800d070:	4013      	ands	r3, r2
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d07a:	4b78      	ldr	r3, [pc, #480]	@ (800d25c <HAL_UART_IRQHandler+0x270>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80f0 	beq.w	800d264 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d084:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d011      	beq.n	800d0b4 <HAL_UART_IRQHandler+0xc8>
 800d090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00b      	beq.n	800d0b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0aa:	f043 0201 	orr.w	r2, r3, #1
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d011      	beq.n	800d0e4 <HAL_UART_IRQHandler+0xf8>
 800d0c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00b      	beq.n	800d0e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0da:	f043 0204 	orr.w	r2, r3, #4
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d0e8:	f003 0304 	and.w	r3, r3, #4
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d011      	beq.n	800d114 <HAL_UART_IRQHandler+0x128>
 800d0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2204      	movs	r2, #4
 800d102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d10a:	f043 0202 	orr.w	r2, r3, #2
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d017      	beq.n	800d150 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d124:	f003 0320 	and.w	r3, r3, #32
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d105      	bne.n	800d138 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d12c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d130:	4b49      	ldr	r3, [pc, #292]	@ (800d258 <HAL_UART_IRQHandler+0x26c>)
 800d132:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00b      	beq.n	800d150 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2208      	movs	r2, #8
 800d13e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d146:	f043 0208 	orr.w	r2, r3, #8
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d012      	beq.n	800d182 <HAL_UART_IRQHandler+0x196>
 800d15c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00c      	beq.n	800d182 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d178:	f043 0220 	orr.w	r2, r3, #32
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 8212 	beq.w	800d5b2 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d18e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d192:	f003 0320 	and.w	r3, r3, #32
 800d196:	2b00      	cmp	r3, #0
 800d198:	d013      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d19a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d19e:	f003 0320 	and.w	r3, r3, #32
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d105      	bne.n	800d1b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d6:	2b40      	cmp	r3, #64	@ 0x40
 800d1d8:	d005      	beq.n	800d1e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d02e      	beq.n	800d244 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fed8 	bl	800df9c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1f6:	2b40      	cmp	r3, #64	@ 0x40
 800d1f8:	d120      	bne.n	800d23c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d200:	2b00      	cmp	r3, #0
 800d202:	d017      	beq.n	800d234 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d20a:	4a15      	ldr	r2, [pc, #84]	@ (800d260 <HAL_UART_IRQHandler+0x274>)
 800d20c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d214:	4618      	mov	r0, r3
 800d216:	f7f7 fd3d 	bl	8004c94 <HAL_DMA_Abort_IT>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d019      	beq.n	800d254 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d22e:	4610      	mov	r0, r2
 800d230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d232:	e00f      	b.n	800d254 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f9d1 	bl	800d5dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23a:	e00b      	b.n	800d254 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f9cd 	bl	800d5dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d242:	e007      	b.n	800d254 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f9c9 	bl	800d5dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d252:	e1ae      	b.n	800d5b2 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d254:	bf00      	nop
    return;
 800d256:	e1ac      	b.n	800d5b2 <HAL_UART_IRQHandler+0x5c6>
 800d258:	10000001 	.word	0x10000001
 800d25c:	04000120 	.word	0x04000120
 800d260:	0800e069 	.word	0x0800e069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d268:	2b01      	cmp	r3, #1
 800d26a:	f040 8142 	bne.w	800d4f2 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d26e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d272:	f003 0310 	and.w	r3, r3, #16
 800d276:	2b00      	cmp	r3, #0
 800d278:	f000 813b 	beq.w	800d4f2 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d27c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8134 	beq.w	800d4f2 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2210      	movs	r2, #16
 800d290:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d29c:	2b40      	cmp	r3, #64	@ 0x40
 800d29e:	f040 80aa 	bne.w	800d3f6 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2ac:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800d2b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f000 8084 	beq.w	800d3c2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d2c0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d27c      	bcs.n	800d3c2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d2ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2da:	2b81      	cmp	r3, #129	@ 0x81
 800d2dc:	d060      	beq.n	800d3a0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d2ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d304:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d306:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d308:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d30c:	e841 2300 	strex	r3, r2, [r1]
 800d310:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1e2      	bne.n	800d2de <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3308      	adds	r3, #8
 800d31e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d32a:	f023 0301 	bic.w	r3, r3, #1
 800d32e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3308      	adds	r3, #8
 800d338:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d33c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d33e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d340:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d342:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d344:	e841 2300 	strex	r3, r2, [r1]
 800d348:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d34a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e3      	bne.n	800d318 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2220      	movs	r2, #32
 800d354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d366:	e853 3f00 	ldrex	r3, [r3]
 800d36a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d36e:	f023 0310 	bic.w	r3, r3, #16
 800d372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	461a      	mov	r2, r3
 800d37c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d380:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d382:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d388:	e841 2300 	strex	r3, r2, [r1]
 800d38c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e4      	bne.n	800d35e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7f7 fbfe 	bl	8004b9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f918 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d3c0:	e0f9      	b.n	800d5b6 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3c8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	f040 80f2 	bne.w	800d5b6 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3da:	2b81      	cmp	r3, #129	@ 0x81
 800d3dc:	f040 80eb 	bne.w	800d5b6 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f8fe 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
      return;
 800d3f4:	e0df      	b.n	800d5b6 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d402:	b29b      	uxth	r3, r3
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d410:	b29b      	uxth	r3, r3
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 80d1 	beq.w	800d5ba <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800d418:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 80cc 	beq.w	800d5ba <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42a:	e853 3f00 	ldrex	r3, [r3]
 800d42e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d444:	647b      	str	r3, [r7, #68]	@ 0x44
 800d446:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d44c:	e841 2300 	strex	r3, r2, [r1]
 800d450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1e4      	bne.n	800d422 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3308      	adds	r3, #8
 800d45e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	623b      	str	r3, [r7, #32]
   return(result);
 800d468:	6a3b      	ldr	r3, [r7, #32]
 800d46a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d46e:	f023 0301 	bic.w	r3, r3, #1
 800d472:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3308      	adds	r3, #8
 800d47c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d480:	633a      	str	r2, [r7, #48]	@ 0x30
 800d482:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d488:	e841 2300 	strex	r3, r2, [r1]
 800d48c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1e1      	bne.n	800d458 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2220      	movs	r2, #32
 800d498:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	e853 3f00 	ldrex	r3, [r3]
 800d4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f023 0310 	bic.w	r3, r3, #16
 800d4bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d4ca:	61fb      	str	r3, [r7, #28]
 800d4cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ce:	69b9      	ldr	r1, [r7, #24]
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	e841 2300 	strex	r3, r2, [r1]
 800d4d6:	617b      	str	r3, [r7, #20]
   return(result);
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1e4      	bne.n	800d4a8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f880 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4f0:	e063      	b.n	800d5ba <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00e      	beq.n	800d51c <HAL_UART_IRQHandler+0x530>
 800d4fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d008      	beq.n	800d51c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f001 fcc3 	bl	800eea0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d51a:	e051      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d51c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d524:	2b00      	cmp	r3, #0
 800d526:	d014      	beq.n	800d552 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d52c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d530:	2b00      	cmp	r3, #0
 800d532:	d105      	bne.n	800d540 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d008      	beq.n	800d552 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d544:	2b00      	cmp	r3, #0
 800d546:	d03a      	beq.n	800d5be <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4798      	blx	r3
    }
    return;
 800d550:	e035      	b.n	800d5be <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d009      	beq.n	800d572 <HAL_UART_IRQHandler+0x586>
 800d55e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d566:	2b00      	cmp	r3, #0
 800d568:	d003      	beq.n	800d572 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 ff34 	bl	800e3d8 <UART_EndTransmit_IT>
    return;
 800d570:	e026      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d576:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <HAL_UART_IRQHandler+0x5a6>
 800d57e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d582:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 fc9c 	bl	800eec8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d590:	e016      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d592:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d010      	beq.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
 800d59e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	da0c      	bge.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 fc84 	bl	800eeb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5ac:	e008      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d5ae:	bf00      	nop
 800d5b0:	e006      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d5b2:	bf00      	nop
 800d5b4:	e004      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d5b6:	bf00      	nop
 800d5b8:	e002      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d5ba:	bf00      	nop
 800d5bc:	e000      	b.n	800d5c0 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d5be:	bf00      	nop
  }
}
 800d5c0:	37b8      	adds	r7, #184	@ 0xb8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop

0800d5c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d5d0:	bf00      	nop
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5fc:	bf00      	nop
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d60c:	b094      	sub	sp, #80	@ 0x50
 800d60e:	af00      	add	r7, sp, #0
 800d610:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	4b78      	ldr	r3, [pc, #480]	@ (800d800 <UART_SetConfig+0x1f8>)
 800d61e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	689a      	ldr	r2, [r3, #8]
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	431a      	orrs	r2, r3
 800d62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62c:	695b      	ldr	r3, [r3, #20]
 800d62e:	431a      	orrs	r2, r3
 800d630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d632:	69db      	ldr	r3, [r3, #28]
 800d634:	4313      	orrs	r3, r2
 800d636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4971      	ldr	r1, [pc, #452]	@ (800d804 <UART_SetConfig+0x1fc>)
 800d640:	4019      	ands	r1, r3
 800d642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d648:	430b      	orrs	r3, r1
 800d64a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d658:	68d9      	ldr	r1, [r3, #12]
 800d65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	ea40 0301 	orr.w	r3, r0, r1
 800d662:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	4b64      	ldr	r3, [pc, #400]	@ (800d800 <UART_SetConfig+0x1f8>)
 800d670:	429a      	cmp	r2, r3
 800d672:	d009      	beq.n	800d688 <UART_SetConfig+0x80>
 800d674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	4b63      	ldr	r3, [pc, #396]	@ (800d808 <UART_SetConfig+0x200>)
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d004      	beq.n	800d688 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d680:	6a1a      	ldr	r2, [r3, #32]
 800d682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d684:	4313      	orrs	r3, r2
 800d686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d692:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d69c:	430b      	orrs	r3, r1
 800d69e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a6:	f023 000f 	bic.w	r0, r3, #15
 800d6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	ea40 0301 	orr.w	r3, r0, r1
 800d6b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	4b53      	ldr	r3, [pc, #332]	@ (800d80c <UART_SetConfig+0x204>)
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d102      	bne.n	800d6c8 <UART_SetConfig+0xc0>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6c6:	e066      	b.n	800d796 <UART_SetConfig+0x18e>
 800d6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	4b50      	ldr	r3, [pc, #320]	@ (800d810 <UART_SetConfig+0x208>)
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d102      	bne.n	800d6d8 <UART_SetConfig+0xd0>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6d6:	e05e      	b.n	800d796 <UART_SetConfig+0x18e>
 800d6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	4b4d      	ldr	r3, [pc, #308]	@ (800d814 <UART_SetConfig+0x20c>)
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d102      	bne.n	800d6e8 <UART_SetConfig+0xe0>
 800d6e2:	2304      	movs	r3, #4
 800d6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6e6:	e056      	b.n	800d796 <UART_SetConfig+0x18e>
 800d6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	4b4a      	ldr	r3, [pc, #296]	@ (800d818 <UART_SetConfig+0x210>)
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d102      	bne.n	800d6f8 <UART_SetConfig+0xf0>
 800d6f2:	2308      	movs	r3, #8
 800d6f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6f6:	e04e      	b.n	800d796 <UART_SetConfig+0x18e>
 800d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	4b47      	ldr	r3, [pc, #284]	@ (800d81c <UART_SetConfig+0x214>)
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d102      	bne.n	800d708 <UART_SetConfig+0x100>
 800d702:	2310      	movs	r3, #16
 800d704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d706:	e046      	b.n	800d796 <UART_SetConfig+0x18e>
 800d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	4b44      	ldr	r3, [pc, #272]	@ (800d820 <UART_SetConfig+0x218>)
 800d70e:	429a      	cmp	r2, r3
 800d710:	d102      	bne.n	800d718 <UART_SetConfig+0x110>
 800d712:	2320      	movs	r3, #32
 800d714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d716:	e03e      	b.n	800d796 <UART_SetConfig+0x18e>
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	4b41      	ldr	r3, [pc, #260]	@ (800d824 <UART_SetConfig+0x21c>)
 800d71e:	429a      	cmp	r2, r3
 800d720:	d102      	bne.n	800d728 <UART_SetConfig+0x120>
 800d722:	2340      	movs	r3, #64	@ 0x40
 800d724:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d726:	e036      	b.n	800d796 <UART_SetConfig+0x18e>
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b3e      	ldr	r3, [pc, #248]	@ (800d828 <UART_SetConfig+0x220>)
 800d72e:	429a      	cmp	r2, r3
 800d730:	d102      	bne.n	800d738 <UART_SetConfig+0x130>
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d736:	e02e      	b.n	800d796 <UART_SetConfig+0x18e>
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	4b3b      	ldr	r3, [pc, #236]	@ (800d82c <UART_SetConfig+0x224>)
 800d73e:	429a      	cmp	r2, r3
 800d740:	d103      	bne.n	800d74a <UART_SetConfig+0x142>
 800d742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d746:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d748:	e025      	b.n	800d796 <UART_SetConfig+0x18e>
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	4b38      	ldr	r3, [pc, #224]	@ (800d830 <UART_SetConfig+0x228>)
 800d750:	429a      	cmp	r2, r3
 800d752:	d103      	bne.n	800d75c <UART_SetConfig+0x154>
 800d754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d75a:	e01c      	b.n	800d796 <UART_SetConfig+0x18e>
 800d75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	4b34      	ldr	r3, [pc, #208]	@ (800d834 <UART_SetConfig+0x22c>)
 800d762:	429a      	cmp	r2, r3
 800d764:	d103      	bne.n	800d76e <UART_SetConfig+0x166>
 800d766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d76a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d76c:	e013      	b.n	800d796 <UART_SetConfig+0x18e>
 800d76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	4b31      	ldr	r3, [pc, #196]	@ (800d838 <UART_SetConfig+0x230>)
 800d774:	429a      	cmp	r2, r3
 800d776:	d103      	bne.n	800d780 <UART_SetConfig+0x178>
 800d778:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d77e:	e00a      	b.n	800d796 <UART_SetConfig+0x18e>
 800d780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	4b1e      	ldr	r3, [pc, #120]	@ (800d800 <UART_SetConfig+0x1f8>)
 800d786:	429a      	cmp	r2, r3
 800d788:	d103      	bne.n	800d792 <UART_SetConfig+0x18a>
 800d78a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d78e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d790:	e001      	b.n	800d796 <UART_SetConfig+0x18e>
 800d792:	2300      	movs	r3, #0
 800d794:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	4b19      	ldr	r3, [pc, #100]	@ (800d800 <UART_SetConfig+0x1f8>)
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d005      	beq.n	800d7ac <UART_SetConfig+0x1a4>
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	4b18      	ldr	r3, [pc, #96]	@ (800d808 <UART_SetConfig+0x200>)
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	f040 8094 	bne.w	800d8d4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d7ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	623b      	str	r3, [r7, #32]
 800d7b2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d7b8:	f7fb fe92 	bl	80094e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d7bc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 80f7 	beq.w	800d9b4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d83c <UART_SetConfig+0x234>)
 800d7cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	4413      	add	r3, r2
 800d7e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d305      	bcc.n	800d7f6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d924      	bls.n	800d840 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d7fc:	e069      	b.n	800d8d2 <UART_SetConfig+0x2ca>
 800d7fe:	bf00      	nop
 800d800:	44002400 	.word	0x44002400
 800d804:	cfff69f3 	.word	0xcfff69f3
 800d808:	54002400 	.word	0x54002400
 800d80c:	40013800 	.word	0x40013800
 800d810:	40004400 	.word	0x40004400
 800d814:	40004800 	.word	0x40004800
 800d818:	40004c00 	.word	0x40004c00
 800d81c:	40005000 	.word	0x40005000
 800d820:	40006400 	.word	0x40006400
 800d824:	40007800 	.word	0x40007800
 800d828:	40007c00 	.word	0x40007c00
 800d82c:	40008000 	.word	0x40008000
 800d830:	40006800 	.word	0x40006800
 800d834:	40006c00 	.word	0x40006c00
 800d838:	40008400 	.word	0x40008400
 800d83c:	08012514 	.word	0x08012514
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d842:	2200      	movs	r2, #0
 800d844:	61bb      	str	r3, [r7, #24]
 800d846:	61fa      	str	r2, [r7, #28]
 800d848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d84c:	4a64      	ldr	r2, [pc, #400]	@ (800d9e0 <UART_SetConfig+0x3d8>)
 800d84e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d852:	b29b      	uxth	r3, r3
 800d854:	2200      	movs	r2, #0
 800d856:	613b      	str	r3, [r7, #16]
 800d858:	617a      	str	r2, [r7, #20]
 800d85a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d85e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d862:	f7f3 fa01 	bl	8000c68 <__aeabi_uldivmod>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	4610      	mov	r0, r2
 800d86c:	4619      	mov	r1, r3
 800d86e:	f04f 0200 	mov.w	r2, #0
 800d872:	f04f 0300 	mov.w	r3, #0
 800d876:	020b      	lsls	r3, r1, #8
 800d878:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d87c:	0202      	lsls	r2, r0, #8
 800d87e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d880:	6849      	ldr	r1, [r1, #4]
 800d882:	0849      	lsrs	r1, r1, #1
 800d884:	2000      	movs	r0, #0
 800d886:	460c      	mov	r4, r1
 800d888:	4605      	mov	r5, r0
 800d88a:	eb12 0804 	adds.w	r8, r2, r4
 800d88e:	eb43 0905 	adc.w	r9, r3, r5
 800d892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	60bb      	str	r3, [r7, #8]
 800d89a:	60fa      	str	r2, [r7, #12]
 800d89c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	f7f3 f9e0 	bl	8000c68 <__aeabi_uldivmod>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d8b6:	d308      	bcc.n	800d8ca <UART_SetConfig+0x2c2>
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8be:	d204      	bcs.n	800d8ca <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d8c6:	60da      	str	r2, [r3, #12]
 800d8c8:	e003      	b.n	800d8d2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d8d0:	e070      	b.n	800d9b4 <UART_SetConfig+0x3ac>
 800d8d2:	e06f      	b.n	800d9b4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	69db      	ldr	r3, [r3, #28]
 800d8d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8dc:	d13c      	bne.n	800d958 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d8de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	607a      	str	r2, [r7, #4]
 800d8e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8ea:	f7fb fdf9 	bl	80094e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d8ee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d05e      	beq.n	800d9b4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fa:	4a39      	ldr	r2, [pc, #228]	@ (800d9e0 <UART_SetConfig+0x3d8>)
 800d8fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d900:	461a      	mov	r2, r3
 800d902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d904:	fbb3 f3f2 	udiv	r3, r3, r2
 800d908:	005a      	lsls	r2, r3, #1
 800d90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	085b      	lsrs	r3, r3, #1
 800d910:	441a      	add	r2, r3
 800d912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	fbb2 f3f3 	udiv	r3, r2, r3
 800d91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d91e:	2b0f      	cmp	r3, #15
 800d920:	d916      	bls.n	800d950 <UART_SetConfig+0x348>
 800d922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d928:	d212      	bcs.n	800d950 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	f023 030f 	bic.w	r3, r3, #15
 800d932:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d936:	085b      	lsrs	r3, r3, #1
 800d938:	b29b      	uxth	r3, r3
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	b29a      	uxth	r2, r3
 800d940:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d942:	4313      	orrs	r3, r2
 800d944:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d94c:	60da      	str	r2, [r3, #12]
 800d94e:	e031      	b.n	800d9b4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d956:	e02d      	b.n	800d9b4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d95a:	2200      	movs	r2, #0
 800d95c:	469a      	mov	sl, r3
 800d95e:	4693      	mov	fp, r2
 800d960:	4650      	mov	r0, sl
 800d962:	4659      	mov	r1, fp
 800d964:	f7fb fdbc 	bl	80094e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d968:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d021      	beq.n	800d9b4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d974:	4a1a      	ldr	r2, [pc, #104]	@ (800d9e0 <UART_SetConfig+0x3d8>)
 800d976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d97a:	461a      	mov	r2, r3
 800d97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d97e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	085b      	lsrs	r3, r3, #1
 800d988:	441a      	add	r2, r3
 800d98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d992:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d996:	2b0f      	cmp	r3, #15
 800d998:	d909      	bls.n	800d9ae <UART_SetConfig+0x3a6>
 800d99a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9a0:	d205      	bcs.n	800d9ae <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60da      	str	r2, [r3, #12]
 800d9ac:	e002      	b.n	800d9b4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d9d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3750      	adds	r7, #80	@ 0x50
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9de:	bf00      	nop
 800d9e0:	08012514 	.word	0x08012514

0800d9e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f0:	f003 0308 	and.w	r3, r3, #8
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00a      	beq.n	800da0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	430a      	orrs	r2, r1
 800da0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	430a      	orrs	r2, r1
 800da2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da34:	f003 0302 	and.w	r3, r3, #2
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00a      	beq.n	800da52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	430a      	orrs	r2, r1
 800da50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da56:	f003 0304 	and.w	r3, r3, #4
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00a      	beq.n	800da74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	430a      	orrs	r2, r1
 800da72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da78:	f003 0310 	and.w	r3, r3, #16
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00a      	beq.n	800da96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	430a      	orrs	r2, r1
 800da94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da9a:	f003 0320 	and.w	r3, r3, #32
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d01a      	beq.n	800dafa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	430a      	orrs	r2, r1
 800dad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dae2:	d10a      	bne.n	800dafa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	430a      	orrs	r2, r1
 800daf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	430a      	orrs	r2, r1
 800db1a:	605a      	str	r2, [r3, #4]
  }
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b098      	sub	sp, #96	@ 0x60
 800db2c:	af02      	add	r7, sp, #8
 800db2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db38:	f7f6 fe70 	bl	800481c <HAL_GetTick>
 800db3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0308 	and.w	r3, r3, #8
 800db48:	2b08      	cmp	r3, #8
 800db4a:	d12f      	bne.n	800dbac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db54:	2200      	movs	r2, #0
 800db56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f88e 	bl	800dc7c <UART_WaitOnFlagUntilTimeout>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d022      	beq.n	800dbac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6e:	e853 3f00 	ldrex	r3, [r3]
 800db72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	461a      	mov	r2, r3
 800db82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db84:	647b      	str	r3, [r7, #68]	@ 0x44
 800db86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db8c:	e841 2300 	strex	r3, r2, [r1]
 800db90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1e6      	bne.n	800db66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2220      	movs	r2, #32
 800db9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e063      	b.n	800dc74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0304 	and.w	r3, r3, #4
 800dbb6:	2b04      	cmp	r3, #4
 800dbb8:	d149      	bne.n	800dc4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f857 	bl	800dc7c <UART_WaitOnFlagUntilTimeout>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d03c      	beq.n	800dc4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbdc:	e853 3f00 	ldrex	r3, [r3]
 800dbe0:	623b      	str	r3, [r7, #32]
   return(result);
 800dbe2:	6a3b      	ldr	r3, [r7, #32]
 800dbe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e6      	bne.n	800dbd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	e853 3f00 	ldrex	r3, [r3]
 800dc14:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f023 0301 	bic.w	r3, r3, #1
 800dc1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3308      	adds	r3, #8
 800dc24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc26:	61fa      	str	r2, [r7, #28]
 800dc28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2a:	69b9      	ldr	r1, [r7, #24]
 800dc2c:	69fa      	ldr	r2, [r7, #28]
 800dc2e:	e841 2300 	strex	r3, r2, [r1]
 800dc32:	617b      	str	r3, [r7, #20]
   return(result);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1e5      	bne.n	800dc06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2220      	movs	r2, #32
 800dc3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e012      	b.n	800dc74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2220      	movs	r2, #32
 800dc52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2220      	movs	r2, #32
 800dc5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3758      	adds	r7, #88	@ 0x58
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	603b      	str	r3, [r7, #0]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc8c:	e04f      	b.n	800dd2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc94:	d04b      	beq.n	800dd2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc96:	f7f6 fdc1 	bl	800481c <HAL_GetTick>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	69ba      	ldr	r2, [r7, #24]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d302      	bcc.n	800dcac <UART_WaitOnFlagUntilTimeout+0x30>
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d101      	bne.n	800dcb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e04e      	b.n	800dd4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 0304 	and.w	r3, r3, #4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d037      	beq.n	800dd2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2b80      	cmp	r3, #128	@ 0x80
 800dcc2:	d034      	beq.n	800dd2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2b40      	cmp	r3, #64	@ 0x40
 800dcc8:	d031      	beq.n	800dd2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	f003 0308 	and.w	r3, r3, #8
 800dcd4:	2b08      	cmp	r3, #8
 800dcd6:	d110      	bne.n	800dcfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2208      	movs	r2, #8
 800dcde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f000 f95b 	bl	800df9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2208      	movs	r2, #8
 800dcea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e029      	b.n	800dd4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	69db      	ldr	r3, [r3, #28]
 800dd00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd08:	d111      	bne.n	800dd2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 f941 	bl	800df9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2220      	movs	r2, #32
 800dd1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	e00f      	b.n	800dd4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	69da      	ldr	r2, [r3, #28]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	4013      	ands	r3, r2
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	bf0c      	ite	eq
 800dd3e:	2301      	moveq	r3, #1
 800dd40:	2300      	movne	r3, #0
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	461a      	mov	r2, r3
 800dd46:	79fb      	ldrb	r3, [r7, #7]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d0a0      	beq.n	800dc8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
	...

0800dd58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b0a3      	sub	sp, #140	@ 0x8c
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	4613      	mov	r3, r2
 800dd64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	88fa      	ldrh	r2, [r7, #6]
 800dd70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	88fa      	ldrh	r2, [r7, #6]
 800dd78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd8a:	d10e      	bne.n	800ddaa <UART_Start_Receive_IT+0x52>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d105      	bne.n	800dda0 <UART_Start_Receive_IT+0x48>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dd9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dd9e:	e02d      	b.n	800ddfc <UART_Start_Receive_IT+0xa4>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	22ff      	movs	r2, #255	@ 0xff
 800dda4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dda8:	e028      	b.n	800ddfc <UART_Start_Receive_IT+0xa4>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10d      	bne.n	800ddce <UART_Start_Receive_IT+0x76>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d104      	bne.n	800ddc4 <UART_Start_Receive_IT+0x6c>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	22ff      	movs	r2, #255	@ 0xff
 800ddbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddc2:	e01b      	b.n	800ddfc <UART_Start_Receive_IT+0xa4>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	227f      	movs	r2, #127	@ 0x7f
 800ddc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddcc:	e016      	b.n	800ddfc <UART_Start_Receive_IT+0xa4>
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddd6:	d10d      	bne.n	800ddf4 <UART_Start_Receive_IT+0x9c>
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d104      	bne.n	800ddea <UART_Start_Receive_IT+0x92>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	227f      	movs	r2, #127	@ 0x7f
 800dde4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dde8:	e008      	b.n	800ddfc <UART_Start_Receive_IT+0xa4>
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	223f      	movs	r2, #63	@ 0x3f
 800ddee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddf2:	e003      	b.n	800ddfc <UART_Start_Receive_IT+0xa4>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2222      	movs	r2, #34	@ 0x22
 800de08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3308      	adds	r3, #8
 800de12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de16:	e853 3f00 	ldrex	r3, [r3]
 800de1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800de1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de1e:	f043 0301 	orr.w	r3, r3, #1
 800de22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3308      	adds	r3, #8
 800de2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800de30:	673a      	str	r2, [r7, #112]	@ 0x70
 800de32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800de36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800de38:	e841 2300 	strex	r3, r2, [r1]
 800de3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800de3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1e3      	bne.n	800de0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de4c:	d14f      	bne.n	800deee <UART_Start_Receive_IT+0x196>
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800de54:	88fa      	ldrh	r2, [r7, #6]
 800de56:	429a      	cmp	r2, r3
 800de58:	d349      	bcc.n	800deee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de62:	d107      	bne.n	800de74 <UART_Start_Receive_IT+0x11c>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d103      	bne.n	800de74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4a47      	ldr	r2, [pc, #284]	@ (800df8c <UART_Start_Receive_IT+0x234>)
 800de70:	675a      	str	r2, [r3, #116]	@ 0x74
 800de72:	e002      	b.n	800de7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	4a46      	ldr	r2, [pc, #280]	@ (800df90 <UART_Start_Receive_IT+0x238>)
 800de78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d01a      	beq.n	800deb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de8a:	e853 3f00 	ldrex	r3, [r3]
 800de8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800de90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	461a      	mov	r2, r3
 800dea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dea6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800deaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800deac:	e841 2300 	strex	r3, r2, [r1]
 800deb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800deb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1e4      	bne.n	800de82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3308      	adds	r3, #8
 800debe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec2:	e853 3f00 	ldrex	r3, [r3]
 800dec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dece:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3308      	adds	r3, #8
 800ded6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ded8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800deda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dedc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dee0:	e841 2300 	strex	r3, r2, [r1]
 800dee4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1e5      	bne.n	800deb8 <UART_Start_Receive_IT+0x160>
 800deec:	e046      	b.n	800df7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800def6:	d107      	bne.n	800df08 <UART_Start_Receive_IT+0x1b0>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d103      	bne.n	800df08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	4a24      	ldr	r2, [pc, #144]	@ (800df94 <UART_Start_Receive_IT+0x23c>)
 800df04:	675a      	str	r2, [r3, #116]	@ 0x74
 800df06:	e002      	b.n	800df0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4a23      	ldr	r2, [pc, #140]	@ (800df98 <UART_Start_Receive_IT+0x240>)
 800df0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d019      	beq.n	800df4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1e:	e853 3f00 	ldrex	r3, [r3]
 800df22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800df2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	461a      	mov	r2, r3
 800df32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df34:	637b      	str	r3, [r7, #52]	@ 0x34
 800df36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800df3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df3c:	e841 2300 	strex	r3, r2, [r1]
 800df40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1e6      	bne.n	800df16 <UART_Start_Receive_IT+0x1be>
 800df48:	e018      	b.n	800df7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	e853 3f00 	ldrex	r3, [r3]
 800df56:	613b      	str	r3, [r7, #16]
   return(result);
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	f043 0320 	orr.w	r3, r3, #32
 800df5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	461a      	mov	r2, r3
 800df66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df68:	623b      	str	r3, [r7, #32]
 800df6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6c:	69f9      	ldr	r1, [r7, #28]
 800df6e:	6a3a      	ldr	r2, [r7, #32]
 800df70:	e841 2300 	strex	r3, r2, [r1]
 800df74:	61bb      	str	r3, [r7, #24]
   return(result);
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e6      	bne.n	800df4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	378c      	adds	r7, #140	@ 0x8c
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	0800eb29 	.word	0x0800eb29
 800df90:	0800e7b9 	.word	0x0800e7b9
 800df94:	0800e5f5 	.word	0x0800e5f5
 800df98:	0800e431 	.word	0x0800e431

0800df9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b095      	sub	sp, #84	@ 0x54
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfac:	e853 3f00 	ldrex	r3, [r3]
 800dfb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dfc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfca:	e841 2300 	strex	r3, r2, [r1]
 800dfce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1e6      	bne.n	800dfa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3308      	adds	r3, #8
 800dfdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	e853 3f00 	ldrex	r3, [r3]
 800dfe4:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfec:	f023 0301 	bic.w	r3, r3, #1
 800dff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3308      	adds	r3, #8
 800dff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e002:	e841 2300 	strex	r3, r2, [r1]
 800e006:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e3      	bne.n	800dfd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e012:	2b01      	cmp	r3, #1
 800e014:	d118      	bne.n	800e048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	e853 3f00 	ldrex	r3, [r3]
 800e022:	60bb      	str	r3, [r7, #8]
   return(result);
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f023 0310 	bic.w	r3, r3, #16
 800e02a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e034:	61bb      	str	r3, [r7, #24]
 800e036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e038:	6979      	ldr	r1, [r7, #20]
 800e03a:	69ba      	ldr	r2, [r7, #24]
 800e03c:	e841 2300 	strex	r3, r2, [r1]
 800e040:	613b      	str	r3, [r7, #16]
   return(result);
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1e6      	bne.n	800e016 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2220      	movs	r2, #32
 800e04c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e05c:	bf00      	nop
 800e05e:	3754      	adds	r7, #84	@ 0x54
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7ff faa8 	bl	800d5dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e08c:	bf00      	nop
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e094:	b480      	push	{r7}
 800e096:	b08f      	sub	sp, #60	@ 0x3c
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0a2:	2b21      	cmp	r3, #33	@ 0x21
 800e0a4:	d14c      	bne.n	800e140 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d132      	bne.n	800e118 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	e853 3f00 	ldrex	r3, [r3]
 800e0be:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0d8:	e841 2300 	strex	r3, r2, [r1]
 800e0dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1e6      	bne.n	800e0b2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	e853 3f00 	ldrex	r3, [r3]
 800e0f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	461a      	mov	r2, r3
 800e100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e102:	61bb      	str	r3, [r7, #24]
 800e104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e106:	6979      	ldr	r1, [r7, #20]
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	e841 2300 	strex	r3, r2, [r1]
 800e10e:	613b      	str	r3, [r7, #16]
   return(result);
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1e6      	bne.n	800e0e4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e116:	e013      	b.n	800e140 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e11c:	781a      	ldrb	r2, [r3, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e134:	b29b      	uxth	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e140:	bf00      	nop
 800e142:	373c      	adds	r7, #60	@ 0x3c
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b091      	sub	sp, #68	@ 0x44
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e15a:	2b21      	cmp	r3, #33	@ 0x21
 800e15c:	d151      	bne.n	800e202 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e164:	b29b      	uxth	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d132      	bne.n	800e1d0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	e853 3f00 	ldrex	r3, [r3]
 800e176:	623b      	str	r3, [r7, #32]
   return(result);
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e17e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e188:	633b      	str	r3, [r7, #48]	@ 0x30
 800e18a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e190:	e841 2300 	strex	r3, r2, [r1]
 800e194:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1e6      	bne.n	800e16a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	e853 3f00 	ldrex	r3, [r3]
 800e1a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ba:	61fb      	str	r3, [r7, #28]
 800e1bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1be:	69b9      	ldr	r1, [r7, #24]
 800e1c0:	69fa      	ldr	r2, [r7, #28]
 800e1c2:	e841 2300 	strex	r3, r2, [r1]
 800e1c6:	617b      	str	r3, [r7, #20]
   return(result);
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1e6      	bne.n	800e19c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e1ce:	e018      	b.n	800e202 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1e4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1ea:	1c9a      	adds	r2, r3, #2
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e202:	bf00      	nop
 800e204:	3744      	adds	r7, #68	@ 0x44
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e20e:	b480      	push	{r7}
 800e210:	b091      	sub	sp, #68	@ 0x44
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e21c:	2b21      	cmp	r3, #33	@ 0x21
 800e21e:	d160      	bne.n	800e2e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e226:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e228:	e057      	b.n	800e2da <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e230:	b29b      	uxth	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d133      	bne.n	800e29e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3308      	adds	r3, #8
 800e23c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	e853 3f00 	ldrex	r3, [r3]
 800e244:	623b      	str	r3, [r7, #32]
   return(result);
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e24c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e256:	633a      	str	r2, [r7, #48]	@ 0x30
 800e258:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e25c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e25e:	e841 2300 	strex	r3, r2, [r1]
 800e262:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1e5      	bne.n	800e236 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	e853 3f00 	ldrex	r3, [r3]
 800e276:	60fb      	str	r3, [r7, #12]
   return(result);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	461a      	mov	r2, r3
 800e286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e288:	61fb      	str	r3, [r7, #28]
 800e28a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28c:	69b9      	ldr	r1, [r7, #24]
 800e28e:	69fa      	ldr	r2, [r7, #28]
 800e290:	e841 2300 	strex	r3, r2, [r1]
 800e294:	617b      	str	r3, [r7, #20]
   return(result);
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e6      	bne.n	800e26a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e29c:	e021      	b.n	800e2e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	69db      	ldr	r3, [r3, #28]
 800e2a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d013      	beq.n	800e2d4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b0:	781a      	ldrb	r2, [r3, #0]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e2d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e2da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d1a4      	bne.n	800e22a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e2e0:	e7ff      	b.n	800e2e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e2e2:	bf00      	nop
 800e2e4:	3744      	adds	r7, #68	@ 0x44
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b091      	sub	sp, #68	@ 0x44
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2fc:	2b21      	cmp	r3, #33	@ 0x21
 800e2fe:	d165      	bne.n	800e3cc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e306:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e308:	e05c      	b.n	800e3c4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d133      	bne.n	800e37e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	3308      	adds	r3, #8
 800e31c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	e853 3f00 	ldrex	r3, [r3]
 800e324:	61fb      	str	r3, [r7, #28]
   return(result);
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3308      	adds	r3, #8
 800e334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e338:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e33a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e33c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e33e:	e841 2300 	strex	r3, r2, [r1]
 800e342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1e5      	bne.n	800e316 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	e853 3f00 	ldrex	r3, [r3]
 800e356:	60bb      	str	r3, [r7, #8]
   return(result);
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e368:	61bb      	str	r3, [r7, #24]
 800e36a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36c:	6979      	ldr	r1, [r7, #20]
 800e36e:	69ba      	ldr	r2, [r7, #24]
 800e370:	e841 2300 	strex	r3, r2, [r1]
 800e374:	613b      	str	r3, [r7, #16]
   return(result);
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1e6      	bne.n	800e34a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e37c:	e026      	b.n	800e3cc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d018      	beq.n	800e3be <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e390:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3a0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3a6:	1c9a      	adds	r2, r3, #2
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e3c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d19f      	bne.n	800e30a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e3ca:	e7ff      	b.n	800e3cc <UART_TxISR_16BIT_FIFOEN+0xde>
 800e3cc:	bf00      	nop
 800e3ce:	3744      	adds	r7, #68	@ 0x44
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	e853 3f00 	ldrex	r3, [r3]
 800e3ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3f4:	61fb      	str	r3, [r7, #28]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	61bb      	str	r3, [r7, #24]
 800e400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	6979      	ldr	r1, [r7, #20]
 800e404:	69ba      	ldr	r2, [r7, #24]
 800e406:	e841 2300 	strex	r3, r2, [r1]
 800e40a:	613b      	str	r3, [r7, #16]
   return(result);
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1e6      	bne.n	800e3e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2220      	movs	r2, #32
 800e416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7ff f8d1 	bl	800d5c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e426:	bf00      	nop
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
	...

0800e430 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b09c      	sub	sp, #112	@ 0x70
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e43e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e448:	2b22      	cmp	r3, #34	@ 0x22
 800e44a:	f040 80c3 	bne.w	800e5d4 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e454:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e458:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e45c:	b2d9      	uxtb	r1, r3
 800e45e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e462:	b2da      	uxtb	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e468:	400a      	ands	r2, r1
 800e46a:	b2d2      	uxtb	r2, r2
 800e46c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e472:	1c5a      	adds	r2, r3, #1
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e47e:	b29b      	uxth	r3, r3
 800e480:	3b01      	subs	r3, #1
 800e482:	b29a      	uxth	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e490:	b29b      	uxth	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	f040 80a6 	bne.w	800e5e4 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a0:	e853 3f00 	ldrex	r3, [r3]
 800e4a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e4a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e4ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e4bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4be:	e841 2300 	strex	r3, r2, [r1]
 800e4c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e6      	bne.n	800e498 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3308      	adds	r3, #8
 800e4d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d4:	e853 3f00 	ldrex	r3, [r3]
 800e4d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4dc:	f023 0301 	bic.w	r3, r3, #1
 800e4e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e4ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800e4ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4f2:	e841 2300 	strex	r3, r2, [r1]
 800e4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1e5      	bne.n	800e4ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2220      	movs	r2, #32
 800e502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a35      	ldr	r2, [pc, #212]	@ (800e5ec <UART_RxISR_8BIT+0x1bc>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d024      	beq.n	800e566 <UART_RxISR_8BIT+0x136>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a33      	ldr	r2, [pc, #204]	@ (800e5f0 <UART_RxISR_8BIT+0x1c0>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d01f      	beq.n	800e566 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e530:	2b00      	cmp	r3, #0
 800e532:	d018      	beq.n	800e566 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53c:	e853 3f00 	ldrex	r3, [r3]
 800e540:	623b      	str	r3, [r7, #32]
   return(result);
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e548:	663b      	str	r3, [r7, #96]	@ 0x60
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e552:	633b      	str	r3, [r7, #48]	@ 0x30
 800e554:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e55a:	e841 2300 	strex	r3, r2, [r1]
 800e55e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1e6      	bne.n	800e534 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d12e      	bne.n	800e5cc <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	e853 3f00 	ldrex	r3, [r3]
 800e580:	60fb      	str	r3, [r7, #12]
   return(result);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f023 0310 	bic.w	r3, r3, #16
 800e588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	461a      	mov	r2, r3
 800e590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e592:	61fb      	str	r3, [r7, #28]
 800e594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e596:	69b9      	ldr	r1, [r7, #24]
 800e598:	69fa      	ldr	r2, [r7, #28]
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	617b      	str	r3, [r7, #20]
   return(result);
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1e6      	bne.n	800e574 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	69db      	ldr	r3, [r3, #28]
 800e5ac:	f003 0310 	and.w	r3, r3, #16
 800e5b0:	2b10      	cmp	r3, #16
 800e5b2:	d103      	bne.n	800e5bc <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2210      	movs	r2, #16
 800e5ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff f813 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5ca:	e00b      	b.n	800e5e4 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7f5 f833 	bl	8003638 <HAL_UART_RxCpltCallback>
}
 800e5d2:	e007      	b.n	800e5e4 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	699a      	ldr	r2, [r3, #24]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f042 0208 	orr.w	r2, r2, #8
 800e5e2:	619a      	str	r2, [r3, #24]
}
 800e5e4:	bf00      	nop
 800e5e6:	3770      	adds	r7, #112	@ 0x70
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	44002400 	.word	0x44002400
 800e5f0:	54002400 	.word	0x54002400

0800e5f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b09c      	sub	sp, #112	@ 0x70
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e602:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e60c:	2b22      	cmp	r3, #34	@ 0x22
 800e60e:	f040 80c3 	bne.w	800e798 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e618:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e620:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e622:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e626:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e62a:	4013      	ands	r3, r2
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e630:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e636:	1c9a      	adds	r2, r3, #2
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e642:	b29b      	uxth	r3, r3
 800e644:	3b01      	subs	r3, #1
 800e646:	b29a      	uxth	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e654:	b29b      	uxth	r3, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	f040 80a6 	bne.w	800e7a8 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e664:	e853 3f00 	ldrex	r3, [r3]
 800e668:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e66a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e66c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e670:	667b      	str	r3, [r7, #100]	@ 0x64
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e67a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e67c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e680:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e682:	e841 2300 	strex	r3, r2, [r1]
 800e686:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e6      	bne.n	800e65c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3308      	adds	r3, #8
 800e694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e698:	e853 3f00 	ldrex	r3, [r3]
 800e69c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a0:	f023 0301 	bic.w	r3, r3, #1
 800e6a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e6ae:	643a      	str	r2, [r7, #64]	@ 0x40
 800e6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6b6:	e841 2300 	strex	r3, r2, [r1]
 800e6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1e5      	bne.n	800e68e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2220      	movs	r2, #32
 800e6c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a35      	ldr	r2, [pc, #212]	@ (800e7b0 <UART_RxISR_16BIT+0x1bc>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d024      	beq.n	800e72a <UART_RxISR_16BIT+0x136>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a33      	ldr	r2, [pc, #204]	@ (800e7b4 <UART_RxISR_16BIT+0x1c0>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d01f      	beq.n	800e72a <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d018      	beq.n	800e72a <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fe:	6a3b      	ldr	r3, [r7, #32]
 800e700:	e853 3f00 	ldrex	r3, [r3]
 800e704:	61fb      	str	r3, [r7, #28]
   return(result);
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e70c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	461a      	mov	r2, r3
 800e714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e718:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e71c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e71e:	e841 2300 	strex	r3, r2, [r1]
 800e722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1e6      	bne.n	800e6f8 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d12e      	bne.n	800e790 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	60bb      	str	r3, [r7, #8]
   return(result);
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	f023 0310 	bic.w	r3, r3, #16
 800e74c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	461a      	mov	r2, r3
 800e754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e756:	61bb      	str	r3, [r7, #24]
 800e758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75a:	6979      	ldr	r1, [r7, #20]
 800e75c:	69ba      	ldr	r2, [r7, #24]
 800e75e:	e841 2300 	strex	r3, r2, [r1]
 800e762:	613b      	str	r3, [r7, #16]
   return(result);
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1e6      	bne.n	800e738 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	69db      	ldr	r3, [r3, #28]
 800e770:	f003 0310 	and.w	r3, r3, #16
 800e774:	2b10      	cmp	r3, #16
 800e776:	d103      	bne.n	800e780 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2210      	movs	r2, #16
 800e77e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7fe ff31 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e78e:	e00b      	b.n	800e7a8 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7f4 ff51 	bl	8003638 <HAL_UART_RxCpltCallback>
}
 800e796:	e007      	b.n	800e7a8 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	699a      	ldr	r2, [r3, #24]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f042 0208 	orr.w	r2, r2, #8
 800e7a6:	619a      	str	r2, [r3, #24]
}
 800e7a8:	bf00      	nop
 800e7aa:	3770      	adds	r7, #112	@ 0x70
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	44002400 	.word	0x44002400
 800e7b4:	54002400 	.word	0x54002400

0800e7b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b0ac      	sub	sp, #176	@ 0xb0
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e7c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	69db      	ldr	r3, [r3, #28]
 800e7d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7ee:	2b22      	cmp	r3, #34	@ 0x22
 800e7f0:	f040 8188 	bne.w	800eb04 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e7fa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e7fe:	e12b      	b.n	800ea58 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e806:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e80a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e80e:	b2d9      	uxtb	r1, r3
 800e810:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e814:	b2da      	uxtb	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e81a:	400a      	ands	r2, r1
 800e81c:	b2d2      	uxtb	r2, r2
 800e81e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e824:	1c5a      	adds	r2, r3, #1
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e830:	b29b      	uxth	r3, r3
 800e832:	3b01      	subs	r3, #1
 800e834:	b29a      	uxth	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e84a:	f003 0307 	and.w	r3, r3, #7
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d053      	beq.n	800e8fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e856:	f003 0301 	and.w	r3, r3, #1
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d011      	beq.n	800e882 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e85e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00b      	beq.n	800e882 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2201      	movs	r2, #1
 800e870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e878:	f043 0201 	orr.w	r2, r3, #1
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e886:	f003 0302 	and.w	r3, r3, #2
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d011      	beq.n	800e8b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e88e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00b      	beq.n	800e8b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2202      	movs	r2, #2
 800e8a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8a8:	f043 0204 	orr.w	r2, r3, #4
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8b6:	f003 0304 	and.w	r3, r3, #4
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d011      	beq.n	800e8e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e8be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e8c2:	f003 0301 	and.w	r3, r3, #1
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00b      	beq.n	800e8e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2204      	movs	r2, #4
 800e8d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8d8:	f043 0202 	orr.w	r2, r3, #2
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d006      	beq.n	800e8fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7fe fe75 	bl	800d5dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e900:	b29b      	uxth	r3, r3
 800e902:	2b00      	cmp	r3, #0
 800e904:	f040 80a8 	bne.w	800ea58 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e910:	e853 3f00 	ldrex	r3, [r3]
 800e914:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e91c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	461a      	mov	r2, r3
 800e926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e92a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e92c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e930:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e932:	e841 2300 	strex	r3, r2, [r1]
 800e936:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1e4      	bne.n	800e908 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3308      	adds	r3, #8
 800e944:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e948:	e853 3f00 	ldrex	r3, [r3]
 800e94c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e94e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e954:	f023 0301 	bic.w	r3, r3, #1
 800e958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3308      	adds	r3, #8
 800e962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e966:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e968:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e96c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e96e:	e841 2300 	strex	r3, r2, [r1]
 800e972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e1      	bne.n	800e93e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2220      	movs	r2, #32
 800e97e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a62      	ldr	r2, [pc, #392]	@ (800eb1c <UART_RxISR_8BIT_FIFOEN+0x364>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d026      	beq.n	800e9e6 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a60      	ldr	r2, [pc, #384]	@ (800eb20 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d021      	beq.n	800e9e6 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01a      	beq.n	800e9e6 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9b8:	e853 3f00 	ldrex	r3, [r3]
 800e9bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e9be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e9c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e9d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9da:	e841 2300 	strex	r3, r2, [r1]
 800e9de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d1e4      	bne.n	800e9b0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d130      	bne.n	800ea50 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	f023 0310 	bic.w	r3, r3, #16
 800ea08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	461a      	mov	r2, r3
 800ea12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea1e:	e841 2300 	strex	r3, r2, [r1]
 800ea22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1e4      	bne.n	800e9f4 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69db      	ldr	r3, [r3, #28]
 800ea30:	f003 0310 	and.w	r3, r3, #16
 800ea34:	2b10      	cmp	r3, #16
 800ea36:	d103      	bne.n	800ea40 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2210      	movs	r2, #16
 800ea3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea46:	4619      	mov	r1, r3
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fe fdd1 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ea4e:	e00e      	b.n	800ea6e <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7f4 fdf1 	bl	8003638 <HAL_UART_RxCpltCallback>
        break;
 800ea56:	e00a      	b.n	800ea6e <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d006      	beq.n	800ea6e <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800ea60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea64:	f003 0320 	and.w	r3, r3, #32
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f47f aec9 	bne.w	800e800 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ea78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d049      	beq.n	800eb14 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ea86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d242      	bcs.n	800eb14 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3308      	adds	r3, #8
 800ea94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	e853 3f00 	ldrex	r3, [r3]
 800ea9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eaa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3308      	adds	r3, #8
 800eaae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eaba:	e841 2300 	strex	r3, r2, [r1]
 800eabe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1e3      	bne.n	800ea8e <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a16      	ldr	r2, [pc, #88]	@ (800eb24 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800eaca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	e853 3f00 	ldrex	r3, [r3]
 800ead8:	60bb      	str	r3, [r7, #8]
   return(result);
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f043 0320 	orr.w	r3, r3, #32
 800eae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	461a      	mov	r2, r3
 800eaea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eaee:	61bb      	str	r3, [r7, #24]
 800eaf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf2:	6979      	ldr	r1, [r7, #20]
 800eaf4:	69ba      	ldr	r2, [r7, #24]
 800eaf6:	e841 2300 	strex	r3, r2, [r1]
 800eafa:	613b      	str	r3, [r7, #16]
   return(result);
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1e4      	bne.n	800eacc <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eb02:	e007      	b.n	800eb14 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	699a      	ldr	r2, [r3, #24]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f042 0208 	orr.w	r2, r2, #8
 800eb12:	619a      	str	r2, [r3, #24]
}
 800eb14:	bf00      	nop
 800eb16:	37b0      	adds	r7, #176	@ 0xb0
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	44002400 	.word	0x44002400
 800eb20:	54002400 	.word	0x54002400
 800eb24:	0800e431 	.word	0x0800e431

0800eb28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b0ae      	sub	sp, #184	@ 0xb8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb36:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	69db      	ldr	r3, [r3, #28]
 800eb40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb5e:	2b22      	cmp	r3, #34	@ 0x22
 800eb60:	f040 818c 	bne.w	800ee7c <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eb6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb6e:	e12f      	b.n	800edd0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb76:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800eb82:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800eb86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb98:	1c9a      	adds	r2, r3, #2
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	3b01      	subs	r3, #1
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	69db      	ldr	r3, [r3, #28]
 800ebb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ebba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebbe:	f003 0307 	and.w	r3, r3, #7
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d053      	beq.n	800ec6e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ebc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebca:	f003 0301 	and.w	r3, r3, #1
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d011      	beq.n	800ebf6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ebd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00b      	beq.n	800ebf6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebec:	f043 0201 	orr.w	r2, r3, #1
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebfa:	f003 0302 	and.w	r3, r3, #2
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d011      	beq.n	800ec26 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ec02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00b      	beq.n	800ec26 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2202      	movs	r2, #2
 800ec14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec1c:	f043 0204 	orr.w	r2, r3, #4
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec2a:	f003 0304 	and.w	r3, r3, #4
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d011      	beq.n	800ec56 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ec32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00b      	beq.n	800ec56 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2204      	movs	r2, #4
 800ec44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec4c:	f043 0202 	orr.w	r2, r3, #2
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d006      	beq.n	800ec6e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fe fcbb 	bl	800d5dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f040 80aa 	bne.w	800edd0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec84:	e853 3f00 	ldrex	r3, [r3]
 800ec88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ec8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800eca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ecaa:	e841 2300 	strex	r3, r2, [r1]
 800ecae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ecb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1e2      	bne.n	800ec7c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ecc0:	e853 3f00 	ldrex	r3, [r3]
 800ecc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ecc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eccc:	f023 0301 	bic.w	r3, r3, #1
 800ecd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ecde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ece0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ece4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ece6:	e841 2300 	strex	r3, r2, [r1]
 800ecea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ecec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1e1      	bne.n	800ecb6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2220      	movs	r2, #32
 800ecf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a62      	ldr	r2, [pc, #392]	@ (800ee94 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d026      	beq.n	800ed5e <UART_RxISR_16BIT_FIFOEN+0x236>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a60      	ldr	r2, [pc, #384]	@ (800ee98 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d021      	beq.n	800ed5e <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01a      	beq.n	800ed5e <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed30:	e853 3f00 	ldrex	r3, [r3]
 800ed34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ed36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	461a      	mov	r2, r3
 800ed46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ed4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ed50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed52:	e841 2300 	strex	r3, r2, [r1]
 800ed56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ed58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1e4      	bne.n	800ed28 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d130      	bne.n	800edc8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed74:	e853 3f00 	ldrex	r3, [r3]
 800ed78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed7c:	f023 0310 	bic.w	r3, r3, #16
 800ed80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed96:	e841 2300 	strex	r3, r2, [r1]
 800ed9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1e4      	bne.n	800ed6c <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	69db      	ldr	r3, [r3, #28]
 800eda8:	f003 0310 	and.w	r3, r3, #16
 800edac:	2b10      	cmp	r3, #16
 800edae:	d103      	bne.n	800edb8 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2210      	movs	r2, #16
 800edb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7fe fc15 	bl	800d5f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800edc6:	e00e      	b.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7f4 fc35 	bl	8003638 <HAL_UART_RxCpltCallback>
        break;
 800edce:	e00a      	b.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800edd0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d006      	beq.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800edd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eddc:	f003 0320 	and.w	r3, r3, #32
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f47f aec5 	bne.w	800eb70 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800edec:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800edf0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d049      	beq.n	800ee8c <UART_RxISR_16BIT_FIFOEN+0x364>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800edfe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d242      	bcs.n	800ee8c <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3308      	adds	r3, #8
 800ee0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee10:	e853 3f00 	ldrex	r3, [r3]
 800ee14:	623b      	str	r3, [r7, #32]
   return(result);
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3308      	adds	r3, #8
 800ee26:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ee2a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ee2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e3      	bne.n	800ee06 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4a16      	ldr	r2, [pc, #88]	@ (800ee9c <UART_RxISR_16BIT_FIFOEN+0x374>)
 800ee42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	e853 3f00 	ldrex	r3, [r3]
 800ee50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f043 0320 	orr.w	r3, r3, #32
 800ee58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	461a      	mov	r2, r3
 800ee62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ee66:	61fb      	str	r3, [r7, #28]
 800ee68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6a:	69b9      	ldr	r1, [r7, #24]
 800ee6c:	69fa      	ldr	r2, [r7, #28]
 800ee6e:	e841 2300 	strex	r3, r2, [r1]
 800ee72:	617b      	str	r3, [r7, #20]
   return(result);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e4      	bne.n	800ee44 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee7a:	e007      	b.n	800ee8c <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	699a      	ldr	r2, [r3, #24]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f042 0208 	orr.w	r2, r2, #8
 800ee8a:	619a      	str	r2, [r3, #24]
}
 800ee8c:	bf00      	nop
 800ee8e:	37b8      	adds	r7, #184	@ 0xb8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	44002400 	.word	0x44002400
 800ee98:	54002400 	.word	0x54002400
 800ee9c:	0800e5f5 	.word	0x0800e5f5

0800eea0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eea8:	bf00      	nop
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eebc:	bf00      	nop
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eed0:	bf00      	nop
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d101      	bne.n	800eef2 <HAL_UARTEx_DisableFifoMode+0x16>
 800eeee:	2302      	movs	r3, #2
 800eef0:	e027      	b.n	800ef42 <HAL_UARTEx_DisableFifoMode+0x66>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2224      	movs	r2, #36	@ 0x24
 800eefe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f022 0201 	bic.w	r2, r2, #1
 800ef18:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ef20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2200      	movs	r2, #0
 800ef26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2220      	movs	r2, #32
 800ef34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b084      	sub	sp, #16
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d101      	bne.n	800ef66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ef62:	2302      	movs	r3, #2
 800ef64:	e02d      	b.n	800efc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2224      	movs	r2, #36	@ 0x24
 800ef72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f022 0201 	bic.w	r2, r2, #1
 800ef8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f850 	bl	800f048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2220      	movs	r2, #32
 800efb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b084      	sub	sp, #16
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
 800efd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d101      	bne.n	800efe2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800efde:	2302      	movs	r3, #2
 800efe0:	e02d      	b.n	800f03e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2201      	movs	r2, #1
 800efe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2224      	movs	r2, #36	@ 0x24
 800efee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f022 0201 	bic.w	r2, r2, #1
 800f008:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	430a      	orrs	r2, r1
 800f01c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f812 	bl	800f048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2220      	movs	r2, #32
 800f030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
	...

0800f048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f054:	2b00      	cmp	r3, #0
 800f056:	d108      	bne.n	800f06a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f068:	e031      	b.n	800f0ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f06a:	2308      	movs	r3, #8
 800f06c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f06e:	2308      	movs	r3, #8
 800f070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	0e5b      	lsrs	r3, r3, #25
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	f003 0307 	and.w	r3, r3, #7
 800f080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	0f5b      	lsrs	r3, r3, #29
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	f003 0307 	and.w	r3, r3, #7
 800f090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f092:	7bbb      	ldrb	r3, [r7, #14]
 800f094:	7b3a      	ldrb	r2, [r7, #12]
 800f096:	4911      	ldr	r1, [pc, #68]	@ (800f0dc <UARTEx_SetNbDataToProcess+0x94>)
 800f098:	5c8a      	ldrb	r2, [r1, r2]
 800f09a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f09e:	7b3a      	ldrb	r2, [r7, #12]
 800f0a0:	490f      	ldr	r1, [pc, #60]	@ (800f0e0 <UARTEx_SetNbDataToProcess+0x98>)
 800f0a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
 800f0b2:	7b7a      	ldrb	r2, [r7, #13]
 800f0b4:	4909      	ldr	r1, [pc, #36]	@ (800f0dc <UARTEx_SetNbDataToProcess+0x94>)
 800f0b6:	5c8a      	ldrb	r2, [r1, r2]
 800f0b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f0bc:	7b7a      	ldrb	r2, [r7, #13]
 800f0be:	4908      	ldr	r1, [pc, #32]	@ (800f0e0 <UARTEx_SetNbDataToProcess+0x98>)
 800f0c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f0ce:	bf00      	nop
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	0801252c 	.word	0x0801252c
 800f0e0:	08012534 	.word	0x08012534

0800f0e4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	6812      	ldr	r2, [r2, #0]
 800f0fc:	f023 0101 	bic.w	r1, r3, #1
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	2b08      	cmp	r3, #8
 800f10c:	d102      	bne.n	800f114 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f10e:	2340      	movs	r3, #64	@ 0x40
 800f110:	617b      	str	r3, [r7, #20]
 800f112:	e001      	b.n	800f118 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f114:	2300      	movs	r3, #0
 800f116:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f124:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f12a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f130:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f136:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f13c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f142:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f148:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800f14e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800f154:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800f15a:	4313      	orrs	r3, r2
 800f15c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f162:	693a      	ldr	r2, [r7, #16]
 800f164:	4313      	orrs	r3, r2
 800f166:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f16c:	693a      	ldr	r2, [r7, #16]
 800f16e:	4313      	orrs	r3, r2
 800f170:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	4313      	orrs	r3, r2
 800f17a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f180:	693a      	ldr	r2, [r7, #16]
 800f182:	4313      	orrs	r3, r2
 800f184:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f186:	4b3d      	ldr	r3, [pc, #244]	@ (800f27c <FMC_NORSRAM_Init+0x198>)
 800f188:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f190:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f198:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800f1a0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800f1a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	43db      	mvns	r3, r3
 800f1b8:	ea02 0103 	and.w	r1, r2, r3
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	4319      	orrs	r1, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1d2:	d10c      	bne.n	800f1ee <FMC_NORSRAM_Init+0x10a>
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d008      	beq.n	800f1ee <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1e8:	431a      	orrs	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d006      	beq.n	800f204 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1fe:	431a      	orrs	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d12f      	bne.n	800f26e <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6a1b      	ldr	r3, [r3, #32]
 800f212:	0c1b      	lsrs	r3, r3, #16
 800f214:	041b      	lsls	r3, r3, #16
 800f216:	683a      	ldr	r2, [r7, #0]
 800f218:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f21a:	431a      	orrs	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b04      	cmp	r3, #4
 800f226:	d014      	beq.n	800f252 <FMC_NORSRAM_Init+0x16e>
 800f228:	2b04      	cmp	r3, #4
 800f22a:	d819      	bhi.n	800f260 <FMC_NORSRAM_Init+0x17c>
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <FMC_NORSRAM_Init+0x152>
 800f230:	2b02      	cmp	r3, #2
 800f232:	d007      	beq.n	800f244 <FMC_NORSRAM_Init+0x160>
 800f234:	e014      	b.n	800f260 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	621a      	str	r2, [r3, #32]
        break;
 800f242:	e014      	b.n	800f26e <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6a1b      	ldr	r3, [r3, #32]
 800f248:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	621a      	str	r2, [r3, #32]
        break;
 800f250:	e00d      	b.n	800f26e <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	621a      	str	r2, [r3, #32]
        break;
 800f25e:	e006      	b.n	800f26e <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	621a      	str	r2, [r3, #32]
        break;
 800f26c:	bf00      	nop
    }
  }

  return HAL_OK;
 800f26e:	2300      	movs	r3, #0
}
 800f270:	4618      	mov	r0, r3
 800f272:	371c      	adds	r7, #28
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	0008fb7f 	.word	0x0008fb7f

0800f280 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f296:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f29e:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f2a6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f2ae:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	695b      	ldr	r3, [r3, #20]
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f2b8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	3b02      	subs	r3, #2
 800f2c0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f2c2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f2ce:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f2de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2e2:	d113      	bne.n	800f30c <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f2ec:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	051b      	lsls	r3, r3, #20
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	431a      	orrs	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	371c      	adds	r7, #28
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr

0800f31a <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f31a:	b480      	push	{r7}
 800f31c:	b085      	sub	sp, #20
 800f31e:	af00      	add	r7, sp, #0
 800f320:	60f8      	str	r0, [r7, #12]
 800f322:	60b9      	str	r1, [r7, #8]
 800f324:	607a      	str	r2, [r7, #4]
 800f326:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f32e:	d121      	bne.n	800f374 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f338:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	6819      	ldr	r1, [r3, #0]
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	4319      	orrs	r1, r3
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	021b      	lsls	r3, r3, #8
 800f34e:	4319      	orrs	r1, r3
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	079b      	lsls	r3, r3, #30
 800f356:	4319      	orrs	r1, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	69db      	ldr	r3, [r3, #28]
 800f35c:	4319      	orrs	r1, r3
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	041b      	lsls	r3, r3, #16
 800f364:	430b      	orrs	r3, r1
 800f366:	ea42 0103 	orr.w	r1, r2, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f372:	e005      	b.n	800f380 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f37c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
	...

0800f390 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	4b10      	ldr	r3, [pc, #64]	@ (800f3e0 <FMC_NAND_Init+0x50>)
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	6851      	ldr	r1, [r2, #4]
 800f3a6:	683a      	ldr	r2, [r7, #0]
 800f3a8:	6892      	ldr	r2, [r2, #8]
 800f3aa:	4311      	orrs	r1, r2
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	68d2      	ldr	r2, [r2, #12]
 800f3b0:	4311      	orrs	r1, r2
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	6912      	ldr	r2, [r2, #16]
 800f3b6:	4311      	orrs	r1, r2
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	6952      	ldr	r2, [r2, #20]
 800f3bc:	0252      	lsls	r2, r2, #9
 800f3be:	4311      	orrs	r1, r2
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	6992      	ldr	r2, [r2, #24]
 800f3c4:	0352      	lsls	r2, r2, #13
 800f3c6:	430a      	orrs	r2, r1
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	f043 0208 	orr.w	r2, r3, #8
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	fff00181 	.word	0xfff00181

0800f3e4 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800f3fa:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f402:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f40a:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr

0800f41e <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f41e:	b480      	push	{r7}
 800f420:	b085      	sub	sp, #20
 800f422:	af00      	add	r7, sp, #0
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	60b9      	str	r1, [r7, #8]
 800f428:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800f434:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f43c:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f444:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3714      	adds	r7, #20
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <__cvt>:
 800f458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f45c:	ec57 6b10 	vmov	r6, r7, d0
 800f460:	2f00      	cmp	r7, #0
 800f462:	460c      	mov	r4, r1
 800f464:	4619      	mov	r1, r3
 800f466:	463b      	mov	r3, r7
 800f468:	bfb4      	ite	lt
 800f46a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f46e:	2300      	movge	r3, #0
 800f470:	4691      	mov	r9, r2
 800f472:	bfbf      	itttt	lt
 800f474:	4632      	movlt	r2, r6
 800f476:	461f      	movlt	r7, r3
 800f478:	232d      	movlt	r3, #45	@ 0x2d
 800f47a:	4616      	movlt	r6, r2
 800f47c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f480:	700b      	strb	r3, [r1, #0]
 800f482:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f484:	f023 0820 	bic.w	r8, r3, #32
 800f488:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f48c:	d005      	beq.n	800f49a <__cvt+0x42>
 800f48e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f492:	d100      	bne.n	800f496 <__cvt+0x3e>
 800f494:	3401      	adds	r4, #1
 800f496:	2102      	movs	r1, #2
 800f498:	e000      	b.n	800f49c <__cvt+0x44>
 800f49a:	2103      	movs	r1, #3
 800f49c:	ab03      	add	r3, sp, #12
 800f49e:	4622      	mov	r2, r4
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	ab02      	add	r3, sp, #8
 800f4a4:	ec47 6b10 	vmov	d0, r6, r7
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	4653      	mov	r3, sl
 800f4ac:	f000 fe90 	bl	80101d0 <_dtoa_r>
 800f4b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	d119      	bne.n	800f4ec <__cvt+0x94>
 800f4b8:	f019 0f01 	tst.w	r9, #1
 800f4bc:	d00e      	beq.n	800f4dc <__cvt+0x84>
 800f4be:	eb00 0904 	add.w	r9, r0, r4
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	f7f1 fb0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4ce:	b108      	cbz	r0, 800f4d4 <__cvt+0x7c>
 800f4d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4d4:	2230      	movs	r2, #48	@ 0x30
 800f4d6:	9b03      	ldr	r3, [sp, #12]
 800f4d8:	454b      	cmp	r3, r9
 800f4da:	d31e      	bcc.n	800f51a <__cvt+0xc2>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	4628      	mov	r0, r5
 800f4e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4e2:	1b5b      	subs	r3, r3, r5
 800f4e4:	6013      	str	r3, [r2, #0]
 800f4e6:	b004      	add	sp, #16
 800f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f4f0:	eb00 0904 	add.w	r9, r0, r4
 800f4f4:	d1e5      	bne.n	800f4c2 <__cvt+0x6a>
 800f4f6:	7803      	ldrb	r3, [r0, #0]
 800f4f8:	2b30      	cmp	r3, #48	@ 0x30
 800f4fa:	d10a      	bne.n	800f512 <__cvt+0xba>
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	2300      	movs	r3, #0
 800f500:	4630      	mov	r0, r6
 800f502:	4639      	mov	r1, r7
 800f504:	f7f1 faf0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f508:	b918      	cbnz	r0, 800f512 <__cvt+0xba>
 800f50a:	f1c4 0401 	rsb	r4, r4, #1
 800f50e:	f8ca 4000 	str.w	r4, [sl]
 800f512:	f8da 3000 	ldr.w	r3, [sl]
 800f516:	4499      	add	r9, r3
 800f518:	e7d3      	b.n	800f4c2 <__cvt+0x6a>
 800f51a:	1c59      	adds	r1, r3, #1
 800f51c:	9103      	str	r1, [sp, #12]
 800f51e:	701a      	strb	r2, [r3, #0]
 800f520:	e7d9      	b.n	800f4d6 <__cvt+0x7e>

0800f522 <__exponent>:
 800f522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f524:	2900      	cmp	r1, #0
 800f526:	7002      	strb	r2, [r0, #0]
 800f528:	bfba      	itte	lt
 800f52a:	4249      	neglt	r1, r1
 800f52c:	232d      	movlt	r3, #45	@ 0x2d
 800f52e:	232b      	movge	r3, #43	@ 0x2b
 800f530:	2909      	cmp	r1, #9
 800f532:	7043      	strb	r3, [r0, #1]
 800f534:	dd28      	ble.n	800f588 <__exponent+0x66>
 800f536:	f10d 0307 	add.w	r3, sp, #7
 800f53a:	270a      	movs	r7, #10
 800f53c:	461d      	mov	r5, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	3b01      	subs	r3, #1
 800f542:	fbb1 f6f7 	udiv	r6, r1, r7
 800f546:	fb07 1416 	mls	r4, r7, r6, r1
 800f54a:	3430      	adds	r4, #48	@ 0x30
 800f54c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f550:	460c      	mov	r4, r1
 800f552:	4631      	mov	r1, r6
 800f554:	2c63      	cmp	r4, #99	@ 0x63
 800f556:	dcf2      	bgt.n	800f53e <__exponent+0x1c>
 800f558:	3130      	adds	r1, #48	@ 0x30
 800f55a:	1e94      	subs	r4, r2, #2
 800f55c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f560:	1c41      	adds	r1, r0, #1
 800f562:	4623      	mov	r3, r4
 800f564:	42ab      	cmp	r3, r5
 800f566:	d30a      	bcc.n	800f57e <__exponent+0x5c>
 800f568:	f10d 0309 	add.w	r3, sp, #9
 800f56c:	1a9b      	subs	r3, r3, r2
 800f56e:	42ac      	cmp	r4, r5
 800f570:	bf88      	it	hi
 800f572:	2300      	movhi	r3, #0
 800f574:	3302      	adds	r3, #2
 800f576:	4403      	add	r3, r0
 800f578:	1a18      	subs	r0, r3, r0
 800f57a:	b003      	add	sp, #12
 800f57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f57e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f582:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f586:	e7ed      	b.n	800f564 <__exponent+0x42>
 800f588:	2330      	movs	r3, #48	@ 0x30
 800f58a:	3130      	adds	r1, #48	@ 0x30
 800f58c:	7083      	strb	r3, [r0, #2]
 800f58e:	1d03      	adds	r3, r0, #4
 800f590:	70c1      	strb	r1, [r0, #3]
 800f592:	e7f1      	b.n	800f578 <__exponent+0x56>

0800f594 <_printf_float>:
 800f594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f598:	b08d      	sub	sp, #52	@ 0x34
 800f59a:	460c      	mov	r4, r1
 800f59c:	4616      	mov	r6, r2
 800f59e:	461f      	mov	r7, r3
 800f5a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	f000 fcf1 	bl	800ff8c <_localeconv_r>
 800f5aa:	6803      	ldr	r3, [r0, #0]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	9304      	str	r3, [sp, #16]
 800f5b0:	f7f0 fe6e 	bl	8000290 <strlen>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9005      	str	r0, [sp, #20]
 800f5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f5be:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5c2:	3307      	adds	r3, #7
 800f5c4:	f8d4 b000 	ldr.w	fp, [r4]
 800f5c8:	f023 0307 	bic.w	r3, r3, #7
 800f5cc:	f103 0208 	add.w	r2, r3, #8
 800f5d0:	f8c8 2000 	str.w	r2, [r8]
 800f5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f5e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5e4:	9307      	str	r3, [sp, #28]
 800f5e6:	4b9d      	ldr	r3, [pc, #628]	@ (800f85c <_printf_float+0x2c8>)
 800f5e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f5f0:	f7f1 faac 	bl	8000b4c <__aeabi_dcmpun>
 800f5f4:	bb70      	cbnz	r0, 800f654 <_printf_float+0xc0>
 800f5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fa:	4b98      	ldr	r3, [pc, #608]	@ (800f85c <_printf_float+0x2c8>)
 800f5fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f600:	f7f1 fa86 	bl	8000b10 <__aeabi_dcmple>
 800f604:	bb30      	cbnz	r0, 800f654 <_printf_float+0xc0>
 800f606:	2200      	movs	r2, #0
 800f608:	2300      	movs	r3, #0
 800f60a:	4640      	mov	r0, r8
 800f60c:	4649      	mov	r1, r9
 800f60e:	f7f1 fa75 	bl	8000afc <__aeabi_dcmplt>
 800f612:	b110      	cbz	r0, 800f61a <_printf_float+0x86>
 800f614:	232d      	movs	r3, #45	@ 0x2d
 800f616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f61a:	4a91      	ldr	r2, [pc, #580]	@ (800f860 <_printf_float+0x2cc>)
 800f61c:	4b91      	ldr	r3, [pc, #580]	@ (800f864 <_printf_float+0x2d0>)
 800f61e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f622:	bf94      	ite	ls
 800f624:	4690      	movls	r8, r2
 800f626:	4698      	movhi	r8, r3
 800f628:	2303      	movs	r3, #3
 800f62a:	f04f 0900 	mov.w	r9, #0
 800f62e:	6123      	str	r3, [r4, #16]
 800f630:	f02b 0304 	bic.w	r3, fp, #4
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	4633      	mov	r3, r6
 800f638:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f63a:	4621      	mov	r1, r4
 800f63c:	4628      	mov	r0, r5
 800f63e:	9700      	str	r7, [sp, #0]
 800f640:	f000 f9d2 	bl	800f9e8 <_printf_common>
 800f644:	3001      	adds	r0, #1
 800f646:	f040 808d 	bne.w	800f764 <_printf_float+0x1d0>
 800f64a:	f04f 30ff 	mov.w	r0, #4294967295
 800f64e:	b00d      	add	sp, #52	@ 0x34
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f654:	4642      	mov	r2, r8
 800f656:	464b      	mov	r3, r9
 800f658:	4640      	mov	r0, r8
 800f65a:	4649      	mov	r1, r9
 800f65c:	f7f1 fa76 	bl	8000b4c <__aeabi_dcmpun>
 800f660:	b140      	cbz	r0, 800f674 <_printf_float+0xe0>
 800f662:	464b      	mov	r3, r9
 800f664:	4a80      	ldr	r2, [pc, #512]	@ (800f868 <_printf_float+0x2d4>)
 800f666:	2b00      	cmp	r3, #0
 800f668:	bfbc      	itt	lt
 800f66a:	232d      	movlt	r3, #45	@ 0x2d
 800f66c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f670:	4b7e      	ldr	r3, [pc, #504]	@ (800f86c <_printf_float+0x2d8>)
 800f672:	e7d4      	b.n	800f61e <_printf_float+0x8a>
 800f674:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f678:	6863      	ldr	r3, [r4, #4]
 800f67a:	9206      	str	r2, [sp, #24]
 800f67c:	1c5a      	adds	r2, r3, #1
 800f67e:	d13b      	bne.n	800f6f8 <_printf_float+0x164>
 800f680:	2306      	movs	r3, #6
 800f682:	6063      	str	r3, [r4, #4]
 800f684:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f688:	2300      	movs	r3, #0
 800f68a:	4628      	mov	r0, r5
 800f68c:	6022      	str	r2, [r4, #0]
 800f68e:	9303      	str	r3, [sp, #12]
 800f690:	ab0a      	add	r3, sp, #40	@ 0x28
 800f692:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f696:	ab09      	add	r3, sp, #36	@ 0x24
 800f698:	ec49 8b10 	vmov	d0, r8, r9
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f6a2:	6861      	ldr	r1, [r4, #4]
 800f6a4:	f7ff fed8 	bl	800f458 <__cvt>
 800f6a8:	9b06      	ldr	r3, [sp, #24]
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f6ae:	2b47      	cmp	r3, #71	@ 0x47
 800f6b0:	d129      	bne.n	800f706 <_printf_float+0x172>
 800f6b2:	1cc8      	adds	r0, r1, #3
 800f6b4:	db02      	blt.n	800f6bc <_printf_float+0x128>
 800f6b6:	6863      	ldr	r3, [r4, #4]
 800f6b8:	4299      	cmp	r1, r3
 800f6ba:	dd41      	ble.n	800f740 <_printf_float+0x1ac>
 800f6bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800f6c0:	fa5f fa8a 	uxtb.w	sl, sl
 800f6c4:	3901      	subs	r1, #1
 800f6c6:	4652      	mov	r2, sl
 800f6c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f6cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6ce:	f7ff ff28 	bl	800f522 <__exponent>
 800f6d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6d4:	4681      	mov	r9, r0
 800f6d6:	1813      	adds	r3, r2, r0
 800f6d8:	2a01      	cmp	r2, #1
 800f6da:	6123      	str	r3, [r4, #16]
 800f6dc:	dc02      	bgt.n	800f6e4 <_printf_float+0x150>
 800f6de:	6822      	ldr	r2, [r4, #0]
 800f6e0:	07d2      	lsls	r2, r2, #31
 800f6e2:	d501      	bpl.n	800f6e8 <_printf_float+0x154>
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	6123      	str	r3, [r4, #16]
 800f6e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0a2      	beq.n	800f636 <_printf_float+0xa2>
 800f6f0:	232d      	movs	r3, #45	@ 0x2d
 800f6f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6f6:	e79e      	b.n	800f636 <_printf_float+0xa2>
 800f6f8:	9a06      	ldr	r2, [sp, #24]
 800f6fa:	2a47      	cmp	r2, #71	@ 0x47
 800f6fc:	d1c2      	bne.n	800f684 <_printf_float+0xf0>
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1c0      	bne.n	800f684 <_printf_float+0xf0>
 800f702:	2301      	movs	r3, #1
 800f704:	e7bd      	b.n	800f682 <_printf_float+0xee>
 800f706:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f70a:	d9db      	bls.n	800f6c4 <_printf_float+0x130>
 800f70c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f710:	d118      	bne.n	800f744 <_printf_float+0x1b0>
 800f712:	2900      	cmp	r1, #0
 800f714:	6863      	ldr	r3, [r4, #4]
 800f716:	dd0b      	ble.n	800f730 <_printf_float+0x19c>
 800f718:	6121      	str	r1, [r4, #16]
 800f71a:	b913      	cbnz	r3, 800f722 <_printf_float+0x18e>
 800f71c:	6822      	ldr	r2, [r4, #0]
 800f71e:	07d0      	lsls	r0, r2, #31
 800f720:	d502      	bpl.n	800f728 <_printf_float+0x194>
 800f722:	3301      	adds	r3, #1
 800f724:	440b      	add	r3, r1
 800f726:	6123      	str	r3, [r4, #16]
 800f728:	f04f 0900 	mov.w	r9, #0
 800f72c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f72e:	e7db      	b.n	800f6e8 <_printf_float+0x154>
 800f730:	b913      	cbnz	r3, 800f738 <_printf_float+0x1a4>
 800f732:	6822      	ldr	r2, [r4, #0]
 800f734:	07d2      	lsls	r2, r2, #31
 800f736:	d501      	bpl.n	800f73c <_printf_float+0x1a8>
 800f738:	3302      	adds	r3, #2
 800f73a:	e7f4      	b.n	800f726 <_printf_float+0x192>
 800f73c:	2301      	movs	r3, #1
 800f73e:	e7f2      	b.n	800f726 <_printf_float+0x192>
 800f740:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f746:	4299      	cmp	r1, r3
 800f748:	db05      	blt.n	800f756 <_printf_float+0x1c2>
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	6121      	str	r1, [r4, #16]
 800f74e:	07d8      	lsls	r0, r3, #31
 800f750:	d5ea      	bpl.n	800f728 <_printf_float+0x194>
 800f752:	1c4b      	adds	r3, r1, #1
 800f754:	e7e7      	b.n	800f726 <_printf_float+0x192>
 800f756:	2900      	cmp	r1, #0
 800f758:	bfd4      	ite	le
 800f75a:	f1c1 0202 	rsble	r2, r1, #2
 800f75e:	2201      	movgt	r2, #1
 800f760:	4413      	add	r3, r2
 800f762:	e7e0      	b.n	800f726 <_printf_float+0x192>
 800f764:	6823      	ldr	r3, [r4, #0]
 800f766:	055a      	lsls	r2, r3, #21
 800f768:	d407      	bmi.n	800f77a <_printf_float+0x1e6>
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	4642      	mov	r2, r8
 800f76e:	4631      	mov	r1, r6
 800f770:	4628      	mov	r0, r5
 800f772:	47b8      	blx	r7
 800f774:	3001      	adds	r0, #1
 800f776:	d12b      	bne.n	800f7d0 <_printf_float+0x23c>
 800f778:	e767      	b.n	800f64a <_printf_float+0xb6>
 800f77a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f77e:	f240 80dd 	bls.w	800f93c <_printf_float+0x3a8>
 800f782:	2200      	movs	r2, #0
 800f784:	2300      	movs	r3, #0
 800f786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f78a:	f7f1 f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d033      	beq.n	800f7fa <_printf_float+0x266>
 800f792:	2301      	movs	r3, #1
 800f794:	4a36      	ldr	r2, [pc, #216]	@ (800f870 <_printf_float+0x2dc>)
 800f796:	4631      	mov	r1, r6
 800f798:	4628      	mov	r0, r5
 800f79a:	47b8      	blx	r7
 800f79c:	3001      	adds	r0, #1
 800f79e:	f43f af54 	beq.w	800f64a <_printf_float+0xb6>
 800f7a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f7a6:	4543      	cmp	r3, r8
 800f7a8:	db02      	blt.n	800f7b0 <_printf_float+0x21c>
 800f7aa:	6823      	ldr	r3, [r4, #0]
 800f7ac:	07d8      	lsls	r0, r3, #31
 800f7ae:	d50f      	bpl.n	800f7d0 <_printf_float+0x23c>
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af45 	beq.w	800f64a <_printf_float+0xb6>
 800f7c0:	f04f 0900 	mov.w	r9, #0
 800f7c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7c8:	f104 0a1a 	add.w	sl, r4, #26
 800f7cc:	45c8      	cmp	r8, r9
 800f7ce:	dc09      	bgt.n	800f7e4 <_printf_float+0x250>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	079b      	lsls	r3, r3, #30
 800f7d4:	f100 8103 	bmi.w	800f9de <_printf_float+0x44a>
 800f7d8:	68e0      	ldr	r0, [r4, #12]
 800f7da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	4618      	movlt	r0, r3
 800f7e2:	e734      	b.n	800f64e <_printf_float+0xba>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	4652      	mov	r2, sl
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	f43f af2b 	beq.w	800f64a <_printf_float+0xb6>
 800f7f4:	f109 0901 	add.w	r9, r9, #1
 800f7f8:	e7e8      	b.n	800f7cc <_printf_float+0x238>
 800f7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dc39      	bgt.n	800f874 <_printf_float+0x2e0>
 800f800:	2301      	movs	r3, #1
 800f802:	4a1b      	ldr	r2, [pc, #108]	@ (800f870 <_printf_float+0x2dc>)
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	47b8      	blx	r7
 800f80a:	3001      	adds	r0, #1
 800f80c:	f43f af1d 	beq.w	800f64a <_printf_float+0xb6>
 800f810:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f814:	ea59 0303 	orrs.w	r3, r9, r3
 800f818:	d102      	bne.n	800f820 <_printf_float+0x28c>
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	07d9      	lsls	r1, r3, #31
 800f81e:	d5d7      	bpl.n	800f7d0 <_printf_float+0x23c>
 800f820:	4631      	mov	r1, r6
 800f822:	4628      	mov	r0, r5
 800f824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	f43f af0d 	beq.w	800f64a <_printf_float+0xb6>
 800f830:	f04f 0a00 	mov.w	sl, #0
 800f834:	f104 0b1a 	add.w	fp, r4, #26
 800f838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f83a:	425b      	negs	r3, r3
 800f83c:	4553      	cmp	r3, sl
 800f83e:	dc01      	bgt.n	800f844 <_printf_float+0x2b0>
 800f840:	464b      	mov	r3, r9
 800f842:	e793      	b.n	800f76c <_printf_float+0x1d8>
 800f844:	2301      	movs	r3, #1
 800f846:	465a      	mov	r2, fp
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f aefb 	beq.w	800f64a <_printf_float+0xb6>
 800f854:	f10a 0a01 	add.w	sl, sl, #1
 800f858:	e7ee      	b.n	800f838 <_printf_float+0x2a4>
 800f85a:	bf00      	nop
 800f85c:	7fefffff 	.word	0x7fefffff
 800f860:	0801253c 	.word	0x0801253c
 800f864:	08012540 	.word	0x08012540
 800f868:	08012544 	.word	0x08012544
 800f86c:	08012548 	.word	0x08012548
 800f870:	0801254c 	.word	0x0801254c
 800f874:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f876:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f87a:	4553      	cmp	r3, sl
 800f87c:	bfa8      	it	ge
 800f87e:	4653      	movge	r3, sl
 800f880:	2b00      	cmp	r3, #0
 800f882:	4699      	mov	r9, r3
 800f884:	dc36      	bgt.n	800f8f4 <_printf_float+0x360>
 800f886:	f04f 0b00 	mov.w	fp, #0
 800f88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f88e:	f104 021a 	add.w	r2, r4, #26
 800f892:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f894:	9306      	str	r3, [sp, #24]
 800f896:	eba3 0309 	sub.w	r3, r3, r9
 800f89a:	455b      	cmp	r3, fp
 800f89c:	dc31      	bgt.n	800f902 <_printf_float+0x36e>
 800f89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a0:	459a      	cmp	sl, r3
 800f8a2:	dc3a      	bgt.n	800f91a <_printf_float+0x386>
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	07da      	lsls	r2, r3, #31
 800f8a8:	d437      	bmi.n	800f91a <_printf_float+0x386>
 800f8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ac:	ebaa 0903 	sub.w	r9, sl, r3
 800f8b0:	9b06      	ldr	r3, [sp, #24]
 800f8b2:	ebaa 0303 	sub.w	r3, sl, r3
 800f8b6:	4599      	cmp	r9, r3
 800f8b8:	bfa8      	it	ge
 800f8ba:	4699      	movge	r9, r3
 800f8bc:	f1b9 0f00 	cmp.w	r9, #0
 800f8c0:	dc33      	bgt.n	800f92a <_printf_float+0x396>
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ca:	f104 0b1a 	add.w	fp, r4, #26
 800f8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8d0:	ebaa 0303 	sub.w	r3, sl, r3
 800f8d4:	eba3 0309 	sub.w	r3, r3, r9
 800f8d8:	4543      	cmp	r3, r8
 800f8da:	f77f af79 	ble.w	800f7d0 <_printf_float+0x23c>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	465a      	mov	r2, fp
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	f43f aeae 	beq.w	800f64a <_printf_float+0xb6>
 800f8ee:	f108 0801 	add.w	r8, r8, #1
 800f8f2:	e7ec      	b.n	800f8ce <_printf_float+0x33a>
 800f8f4:	4642      	mov	r2, r8
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b8      	blx	r7
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d1c2      	bne.n	800f886 <_printf_float+0x2f2>
 800f900:	e6a3      	b.n	800f64a <_printf_float+0xb6>
 800f902:	2301      	movs	r3, #1
 800f904:	4631      	mov	r1, r6
 800f906:	4628      	mov	r0, r5
 800f908:	9206      	str	r2, [sp, #24]
 800f90a:	47b8      	blx	r7
 800f90c:	3001      	adds	r0, #1
 800f90e:	f43f ae9c 	beq.w	800f64a <_printf_float+0xb6>
 800f912:	f10b 0b01 	add.w	fp, fp, #1
 800f916:	9a06      	ldr	r2, [sp, #24]
 800f918:	e7bb      	b.n	800f892 <_printf_float+0x2fe>
 800f91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f91e:	4631      	mov	r1, r6
 800f920:	4628      	mov	r0, r5
 800f922:	47b8      	blx	r7
 800f924:	3001      	adds	r0, #1
 800f926:	d1c0      	bne.n	800f8aa <_printf_float+0x316>
 800f928:	e68f      	b.n	800f64a <_printf_float+0xb6>
 800f92a:	9a06      	ldr	r2, [sp, #24]
 800f92c:	464b      	mov	r3, r9
 800f92e:	4631      	mov	r1, r6
 800f930:	4628      	mov	r0, r5
 800f932:	4442      	add	r2, r8
 800f934:	47b8      	blx	r7
 800f936:	3001      	adds	r0, #1
 800f938:	d1c3      	bne.n	800f8c2 <_printf_float+0x32e>
 800f93a:	e686      	b.n	800f64a <_printf_float+0xb6>
 800f93c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f940:	f1ba 0f01 	cmp.w	sl, #1
 800f944:	dc01      	bgt.n	800f94a <_printf_float+0x3b6>
 800f946:	07db      	lsls	r3, r3, #31
 800f948:	d536      	bpl.n	800f9b8 <_printf_float+0x424>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4642      	mov	r2, r8
 800f94e:	4631      	mov	r1, r6
 800f950:	4628      	mov	r0, r5
 800f952:	47b8      	blx	r7
 800f954:	3001      	adds	r0, #1
 800f956:	f43f ae78 	beq.w	800f64a <_printf_float+0xb6>
 800f95a:	4631      	mov	r1, r6
 800f95c:	4628      	mov	r0, r5
 800f95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f962:	47b8      	blx	r7
 800f964:	3001      	adds	r0, #1
 800f966:	f43f ae70 	beq.w	800f64a <_printf_float+0xb6>
 800f96a:	2200      	movs	r2, #0
 800f96c:	2300      	movs	r3, #0
 800f96e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f976:	f7f1 f8b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800f97a:	b9c0      	cbnz	r0, 800f9ae <_printf_float+0x41a>
 800f97c:	4653      	mov	r3, sl
 800f97e:	f108 0201 	add.w	r2, r8, #1
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	d10c      	bne.n	800f9a6 <_printf_float+0x412>
 800f98c:	e65d      	b.n	800f64a <_printf_float+0xb6>
 800f98e:	2301      	movs	r3, #1
 800f990:	465a      	mov	r2, fp
 800f992:	4631      	mov	r1, r6
 800f994:	4628      	mov	r0, r5
 800f996:	47b8      	blx	r7
 800f998:	3001      	adds	r0, #1
 800f99a:	f43f ae56 	beq.w	800f64a <_printf_float+0xb6>
 800f99e:	f108 0801 	add.w	r8, r8, #1
 800f9a2:	45d0      	cmp	r8, sl
 800f9a4:	dbf3      	blt.n	800f98e <_printf_float+0x3fa>
 800f9a6:	464b      	mov	r3, r9
 800f9a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f9ac:	e6df      	b.n	800f76e <_printf_float+0x1da>
 800f9ae:	f04f 0800 	mov.w	r8, #0
 800f9b2:	f104 0b1a 	add.w	fp, r4, #26
 800f9b6:	e7f4      	b.n	800f9a2 <_printf_float+0x40e>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	4642      	mov	r2, r8
 800f9bc:	e7e1      	b.n	800f982 <_printf_float+0x3ee>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	464a      	mov	r2, r9
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b8      	blx	r7
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f43f ae3e 	beq.w	800f64a <_printf_float+0xb6>
 800f9ce:	f108 0801 	add.w	r8, r8, #1
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9d6:	1a5b      	subs	r3, r3, r1
 800f9d8:	4543      	cmp	r3, r8
 800f9da:	dcf0      	bgt.n	800f9be <_printf_float+0x42a>
 800f9dc:	e6fc      	b.n	800f7d8 <_printf_float+0x244>
 800f9de:	f04f 0800 	mov.w	r8, #0
 800f9e2:	f104 0919 	add.w	r9, r4, #25
 800f9e6:	e7f4      	b.n	800f9d2 <_printf_float+0x43e>

0800f9e8 <_printf_common>:
 800f9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ec:	4616      	mov	r6, r2
 800f9ee:	4698      	mov	r8, r3
 800f9f0:	688a      	ldr	r2, [r1, #8]
 800f9f2:	4607      	mov	r7, r0
 800f9f4:	690b      	ldr	r3, [r1, #16]
 800f9f6:	460c      	mov	r4, r1
 800f9f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	bfb8      	it	lt
 800fa00:	4613      	movlt	r3, r2
 800fa02:	6033      	str	r3, [r6, #0]
 800fa04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fa08:	b10a      	cbz	r2, 800fa0e <_printf_common+0x26>
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	6033      	str	r3, [r6, #0]
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	0699      	lsls	r1, r3, #26
 800fa12:	bf42      	ittt	mi
 800fa14:	6833      	ldrmi	r3, [r6, #0]
 800fa16:	3302      	addmi	r3, #2
 800fa18:	6033      	strmi	r3, [r6, #0]
 800fa1a:	6825      	ldr	r5, [r4, #0]
 800fa1c:	f015 0506 	ands.w	r5, r5, #6
 800fa20:	d106      	bne.n	800fa30 <_printf_common+0x48>
 800fa22:	f104 0a19 	add.w	sl, r4, #25
 800fa26:	68e3      	ldr	r3, [r4, #12]
 800fa28:	6832      	ldr	r2, [r6, #0]
 800fa2a:	1a9b      	subs	r3, r3, r2
 800fa2c:	42ab      	cmp	r3, r5
 800fa2e:	dc2b      	bgt.n	800fa88 <_printf_common+0xa0>
 800fa30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa34:	6822      	ldr	r2, [r4, #0]
 800fa36:	3b00      	subs	r3, #0
 800fa38:	bf18      	it	ne
 800fa3a:	2301      	movne	r3, #1
 800fa3c:	0692      	lsls	r2, r2, #26
 800fa3e:	d430      	bmi.n	800faa2 <_printf_common+0xba>
 800fa40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa44:	4641      	mov	r1, r8
 800fa46:	4638      	mov	r0, r7
 800fa48:	47c8      	blx	r9
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	d023      	beq.n	800fa96 <_printf_common+0xae>
 800fa4e:	6823      	ldr	r3, [r4, #0]
 800fa50:	341a      	adds	r4, #26
 800fa52:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800fa56:	f003 0306 	and.w	r3, r3, #6
 800fa5a:	2b04      	cmp	r3, #4
 800fa5c:	bf0a      	itet	eq
 800fa5e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fa62:	2500      	movne	r5, #0
 800fa64:	6833      	ldreq	r3, [r6, #0]
 800fa66:	f04f 0600 	mov.w	r6, #0
 800fa6a:	bf08      	it	eq
 800fa6c:	1aed      	subeq	r5, r5, r3
 800fa6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800fa72:	bf08      	it	eq
 800fa74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	bfc4      	itt	gt
 800fa7c:	1a9b      	subgt	r3, r3, r2
 800fa7e:	18ed      	addgt	r5, r5, r3
 800fa80:	42b5      	cmp	r5, r6
 800fa82:	d11a      	bne.n	800faba <_printf_common+0xd2>
 800fa84:	2000      	movs	r0, #0
 800fa86:	e008      	b.n	800fa9a <_printf_common+0xb2>
 800fa88:	2301      	movs	r3, #1
 800fa8a:	4652      	mov	r2, sl
 800fa8c:	4641      	mov	r1, r8
 800fa8e:	4638      	mov	r0, r7
 800fa90:	47c8      	blx	r9
 800fa92:	3001      	adds	r0, #1
 800fa94:	d103      	bne.n	800fa9e <_printf_common+0xb6>
 800fa96:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa9e:	3501      	adds	r5, #1
 800faa0:	e7c1      	b.n	800fa26 <_printf_common+0x3e>
 800faa2:	18e1      	adds	r1, r4, r3
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	2030      	movs	r0, #48	@ 0x30
 800faa8:	3302      	adds	r3, #2
 800faaa:	4422      	add	r2, r4
 800faac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fab8:	e7c2      	b.n	800fa40 <_printf_common+0x58>
 800faba:	2301      	movs	r3, #1
 800fabc:	4622      	mov	r2, r4
 800fabe:	4641      	mov	r1, r8
 800fac0:	4638      	mov	r0, r7
 800fac2:	47c8      	blx	r9
 800fac4:	3001      	adds	r0, #1
 800fac6:	d0e6      	beq.n	800fa96 <_printf_common+0xae>
 800fac8:	3601      	adds	r6, #1
 800faca:	e7d9      	b.n	800fa80 <_printf_common+0x98>

0800facc <_printf_i>:
 800facc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad0:	7e0f      	ldrb	r7, [r1, #24]
 800fad2:	4691      	mov	r9, r2
 800fad4:	4680      	mov	r8, r0
 800fad6:	460c      	mov	r4, r1
 800fad8:	2f78      	cmp	r7, #120	@ 0x78
 800fada:	469a      	mov	sl, r3
 800fadc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fae2:	d807      	bhi.n	800faf4 <_printf_i+0x28>
 800fae4:	2f62      	cmp	r7, #98	@ 0x62
 800fae6:	d80a      	bhi.n	800fafe <_printf_i+0x32>
 800fae8:	2f00      	cmp	r7, #0
 800faea:	f000 80d2 	beq.w	800fc92 <_printf_i+0x1c6>
 800faee:	2f58      	cmp	r7, #88	@ 0x58
 800faf0:	f000 80b9 	beq.w	800fc66 <_printf_i+0x19a>
 800faf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800faf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fafc:	e03a      	b.n	800fb74 <_printf_i+0xa8>
 800fafe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fb02:	2b15      	cmp	r3, #21
 800fb04:	d8f6      	bhi.n	800faf4 <_printf_i+0x28>
 800fb06:	a101      	add	r1, pc, #4	@ (adr r1, 800fb0c <_printf_i+0x40>)
 800fb08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb0c:	0800fb65 	.word	0x0800fb65
 800fb10:	0800fb79 	.word	0x0800fb79
 800fb14:	0800faf5 	.word	0x0800faf5
 800fb18:	0800faf5 	.word	0x0800faf5
 800fb1c:	0800faf5 	.word	0x0800faf5
 800fb20:	0800faf5 	.word	0x0800faf5
 800fb24:	0800fb79 	.word	0x0800fb79
 800fb28:	0800faf5 	.word	0x0800faf5
 800fb2c:	0800faf5 	.word	0x0800faf5
 800fb30:	0800faf5 	.word	0x0800faf5
 800fb34:	0800faf5 	.word	0x0800faf5
 800fb38:	0800fc79 	.word	0x0800fc79
 800fb3c:	0800fba3 	.word	0x0800fba3
 800fb40:	0800fc33 	.word	0x0800fc33
 800fb44:	0800faf5 	.word	0x0800faf5
 800fb48:	0800faf5 	.word	0x0800faf5
 800fb4c:	0800fc9b 	.word	0x0800fc9b
 800fb50:	0800faf5 	.word	0x0800faf5
 800fb54:	0800fba3 	.word	0x0800fba3
 800fb58:	0800faf5 	.word	0x0800faf5
 800fb5c:	0800faf5 	.word	0x0800faf5
 800fb60:	0800fc3b 	.word	0x0800fc3b
 800fb64:	6833      	ldr	r3, [r6, #0]
 800fb66:	1d1a      	adds	r2, r3, #4
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	6032      	str	r2, [r6, #0]
 800fb6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb74:	2301      	movs	r3, #1
 800fb76:	e09d      	b.n	800fcb4 <_printf_i+0x1e8>
 800fb78:	6833      	ldr	r3, [r6, #0]
 800fb7a:	6820      	ldr	r0, [r4, #0]
 800fb7c:	1d19      	adds	r1, r3, #4
 800fb7e:	6031      	str	r1, [r6, #0]
 800fb80:	0606      	lsls	r6, r0, #24
 800fb82:	d501      	bpl.n	800fb88 <_printf_i+0xbc>
 800fb84:	681d      	ldr	r5, [r3, #0]
 800fb86:	e003      	b.n	800fb90 <_printf_i+0xc4>
 800fb88:	0645      	lsls	r5, r0, #25
 800fb8a:	d5fb      	bpl.n	800fb84 <_printf_i+0xb8>
 800fb8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb90:	2d00      	cmp	r5, #0
 800fb92:	da03      	bge.n	800fb9c <_printf_i+0xd0>
 800fb94:	232d      	movs	r3, #45	@ 0x2d
 800fb96:	426d      	negs	r5, r5
 800fb98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb9c:	4859      	ldr	r0, [pc, #356]	@ (800fd04 <_printf_i+0x238>)
 800fb9e:	230a      	movs	r3, #10
 800fba0:	e011      	b.n	800fbc6 <_printf_i+0xfa>
 800fba2:	6821      	ldr	r1, [r4, #0]
 800fba4:	6833      	ldr	r3, [r6, #0]
 800fba6:	0608      	lsls	r0, r1, #24
 800fba8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fbac:	d402      	bmi.n	800fbb4 <_printf_i+0xe8>
 800fbae:	0649      	lsls	r1, r1, #25
 800fbb0:	bf48      	it	mi
 800fbb2:	b2ad      	uxthmi	r5, r5
 800fbb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fbb6:	6033      	str	r3, [r6, #0]
 800fbb8:	4852      	ldr	r0, [pc, #328]	@ (800fd04 <_printf_i+0x238>)
 800fbba:	bf14      	ite	ne
 800fbbc:	230a      	movne	r3, #10
 800fbbe:	2308      	moveq	r3, #8
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fbc6:	6866      	ldr	r6, [r4, #4]
 800fbc8:	2e00      	cmp	r6, #0
 800fbca:	60a6      	str	r6, [r4, #8]
 800fbcc:	bfa2      	ittt	ge
 800fbce:	6821      	ldrge	r1, [r4, #0]
 800fbd0:	f021 0104 	bicge.w	r1, r1, #4
 800fbd4:	6021      	strge	r1, [r4, #0]
 800fbd6:	b90d      	cbnz	r5, 800fbdc <_printf_i+0x110>
 800fbd8:	2e00      	cmp	r6, #0
 800fbda:	d04b      	beq.n	800fc74 <_printf_i+0x1a8>
 800fbdc:	4616      	mov	r6, r2
 800fbde:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbe2:	fb03 5711 	mls	r7, r3, r1, r5
 800fbe6:	5dc7      	ldrb	r7, [r0, r7]
 800fbe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbec:	462f      	mov	r7, r5
 800fbee:	460d      	mov	r5, r1
 800fbf0:	42bb      	cmp	r3, r7
 800fbf2:	d9f4      	bls.n	800fbde <_printf_i+0x112>
 800fbf4:	2b08      	cmp	r3, #8
 800fbf6:	d10b      	bne.n	800fc10 <_printf_i+0x144>
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	07df      	lsls	r7, r3, #31
 800fbfc:	d508      	bpl.n	800fc10 <_printf_i+0x144>
 800fbfe:	6923      	ldr	r3, [r4, #16]
 800fc00:	6861      	ldr	r1, [r4, #4]
 800fc02:	4299      	cmp	r1, r3
 800fc04:	bfde      	ittt	le
 800fc06:	2330      	movle	r3, #48	@ 0x30
 800fc08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fc0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fc10:	1b92      	subs	r2, r2, r6
 800fc12:	6122      	str	r2, [r4, #16]
 800fc14:	464b      	mov	r3, r9
 800fc16:	aa03      	add	r2, sp, #12
 800fc18:	4621      	mov	r1, r4
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	f8cd a000 	str.w	sl, [sp]
 800fc20:	f7ff fee2 	bl	800f9e8 <_printf_common>
 800fc24:	3001      	adds	r0, #1
 800fc26:	d14a      	bne.n	800fcbe <_printf_i+0x1f2>
 800fc28:	f04f 30ff 	mov.w	r0, #4294967295
 800fc2c:	b004      	add	sp, #16
 800fc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	f043 0320 	orr.w	r3, r3, #32
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	2778      	movs	r7, #120	@ 0x78
 800fc3c:	4832      	ldr	r0, [pc, #200]	@ (800fd08 <_printf_i+0x23c>)
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc44:	061f      	lsls	r7, r3, #24
 800fc46:	6831      	ldr	r1, [r6, #0]
 800fc48:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc4c:	d402      	bmi.n	800fc54 <_printf_i+0x188>
 800fc4e:	065f      	lsls	r7, r3, #25
 800fc50:	bf48      	it	mi
 800fc52:	b2ad      	uxthmi	r5, r5
 800fc54:	6031      	str	r1, [r6, #0]
 800fc56:	07d9      	lsls	r1, r3, #31
 800fc58:	bf44      	itt	mi
 800fc5a:	f043 0320 	orrmi.w	r3, r3, #32
 800fc5e:	6023      	strmi	r3, [r4, #0]
 800fc60:	b11d      	cbz	r5, 800fc6a <_printf_i+0x19e>
 800fc62:	2310      	movs	r3, #16
 800fc64:	e7ac      	b.n	800fbc0 <_printf_i+0xf4>
 800fc66:	4827      	ldr	r0, [pc, #156]	@ (800fd04 <_printf_i+0x238>)
 800fc68:	e7e9      	b.n	800fc3e <_printf_i+0x172>
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	f023 0320 	bic.w	r3, r3, #32
 800fc70:	6023      	str	r3, [r4, #0]
 800fc72:	e7f6      	b.n	800fc62 <_printf_i+0x196>
 800fc74:	4616      	mov	r6, r2
 800fc76:	e7bd      	b.n	800fbf4 <_printf_i+0x128>
 800fc78:	6833      	ldr	r3, [r6, #0]
 800fc7a:	6825      	ldr	r5, [r4, #0]
 800fc7c:	1d18      	adds	r0, r3, #4
 800fc7e:	6961      	ldr	r1, [r4, #20]
 800fc80:	6030      	str	r0, [r6, #0]
 800fc82:	062e      	lsls	r6, r5, #24
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	d501      	bpl.n	800fc8c <_printf_i+0x1c0>
 800fc88:	6019      	str	r1, [r3, #0]
 800fc8a:	e002      	b.n	800fc92 <_printf_i+0x1c6>
 800fc8c:	0668      	lsls	r0, r5, #25
 800fc8e:	d5fb      	bpl.n	800fc88 <_printf_i+0x1bc>
 800fc90:	8019      	strh	r1, [r3, #0]
 800fc92:	2300      	movs	r3, #0
 800fc94:	4616      	mov	r6, r2
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	e7bc      	b.n	800fc14 <_printf_i+0x148>
 800fc9a:	6833      	ldr	r3, [r6, #0]
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	1d1a      	adds	r2, r3, #4
 800fca0:	6032      	str	r2, [r6, #0]
 800fca2:	681e      	ldr	r6, [r3, #0]
 800fca4:	6862      	ldr	r2, [r4, #4]
 800fca6:	4630      	mov	r0, r6
 800fca8:	f000 f9e7 	bl	801007a <memchr>
 800fcac:	b108      	cbz	r0, 800fcb2 <_printf_i+0x1e6>
 800fcae:	1b80      	subs	r0, r0, r6
 800fcb0:	6060      	str	r0, [r4, #4]
 800fcb2:	6863      	ldr	r3, [r4, #4]
 800fcb4:	6123      	str	r3, [r4, #16]
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcbc:	e7aa      	b.n	800fc14 <_printf_i+0x148>
 800fcbe:	6923      	ldr	r3, [r4, #16]
 800fcc0:	4632      	mov	r2, r6
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	4640      	mov	r0, r8
 800fcc6:	47d0      	blx	sl
 800fcc8:	3001      	adds	r0, #1
 800fcca:	d0ad      	beq.n	800fc28 <_printf_i+0x15c>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	079b      	lsls	r3, r3, #30
 800fcd0:	d413      	bmi.n	800fcfa <_printf_i+0x22e>
 800fcd2:	68e0      	ldr	r0, [r4, #12]
 800fcd4:	9b03      	ldr	r3, [sp, #12]
 800fcd6:	4298      	cmp	r0, r3
 800fcd8:	bfb8      	it	lt
 800fcda:	4618      	movlt	r0, r3
 800fcdc:	e7a6      	b.n	800fc2c <_printf_i+0x160>
 800fcde:	2301      	movs	r3, #1
 800fce0:	4632      	mov	r2, r6
 800fce2:	4649      	mov	r1, r9
 800fce4:	4640      	mov	r0, r8
 800fce6:	47d0      	blx	sl
 800fce8:	3001      	adds	r0, #1
 800fcea:	d09d      	beq.n	800fc28 <_printf_i+0x15c>
 800fcec:	3501      	adds	r5, #1
 800fcee:	68e3      	ldr	r3, [r4, #12]
 800fcf0:	9903      	ldr	r1, [sp, #12]
 800fcf2:	1a5b      	subs	r3, r3, r1
 800fcf4:	42ab      	cmp	r3, r5
 800fcf6:	dcf2      	bgt.n	800fcde <_printf_i+0x212>
 800fcf8:	e7eb      	b.n	800fcd2 <_printf_i+0x206>
 800fcfa:	2500      	movs	r5, #0
 800fcfc:	f104 0619 	add.w	r6, r4, #25
 800fd00:	e7f5      	b.n	800fcee <_printf_i+0x222>
 800fd02:	bf00      	nop
 800fd04:	0801254e 	.word	0x0801254e
 800fd08:	0801255f 	.word	0x0801255f

0800fd0c <std>:
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	b510      	push	{r4, lr}
 800fd10:	4604      	mov	r4, r0
 800fd12:	6083      	str	r3, [r0, #8]
 800fd14:	8181      	strh	r1, [r0, #12]
 800fd16:	4619      	mov	r1, r3
 800fd18:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd1a:	81c2      	strh	r2, [r0, #14]
 800fd1c:	2208      	movs	r2, #8
 800fd1e:	6183      	str	r3, [r0, #24]
 800fd20:	e9c0 3300 	strd	r3, r3, [r0]
 800fd24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd28:	305c      	adds	r0, #92	@ 0x5c
 800fd2a:	f000 f914 	bl	800ff56 <memset>
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <std+0x58>)
 800fd30:	6224      	str	r4, [r4, #32]
 800fd32:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd34:	4b0c      	ldr	r3, [pc, #48]	@ (800fd68 <std+0x5c>)
 800fd36:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd38:	4b0c      	ldr	r3, [pc, #48]	@ (800fd6c <std+0x60>)
 800fd3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd3c:	4b0c      	ldr	r3, [pc, #48]	@ (800fd70 <std+0x64>)
 800fd3e:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd40:	4b0c      	ldr	r3, [pc, #48]	@ (800fd74 <std+0x68>)
 800fd42:	429c      	cmp	r4, r3
 800fd44:	d006      	beq.n	800fd54 <std+0x48>
 800fd46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd4a:	4294      	cmp	r4, r2
 800fd4c:	d002      	beq.n	800fd54 <std+0x48>
 800fd4e:	33d0      	adds	r3, #208	@ 0xd0
 800fd50:	429c      	cmp	r4, r3
 800fd52:	d105      	bne.n	800fd60 <std+0x54>
 800fd54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd5c:	f000 b98a 	b.w	8010074 <__retarget_lock_init_recursive>
 800fd60:	bd10      	pop	{r4, pc}
 800fd62:	bf00      	nop
 800fd64:	0800fed1 	.word	0x0800fed1
 800fd68:	0800fef3 	.word	0x0800fef3
 800fd6c:	0800ff2b 	.word	0x0800ff2b
 800fd70:	0800ff4f 	.word	0x0800ff4f
 800fd74:	20007bc4 	.word	0x20007bc4

0800fd78 <stdio_exit_handler>:
 800fd78:	4a02      	ldr	r2, [pc, #8]	@ (800fd84 <stdio_exit_handler+0xc>)
 800fd7a:	4903      	ldr	r1, [pc, #12]	@ (800fd88 <stdio_exit_handler+0x10>)
 800fd7c:	4803      	ldr	r0, [pc, #12]	@ (800fd8c <stdio_exit_handler+0x14>)
 800fd7e:	f000 b869 	b.w	800fe54 <_fwalk_sglue>
 800fd82:	bf00      	nop
 800fd84:	20000030 	.word	0x20000030
 800fd88:	08011a21 	.word	0x08011a21
 800fd8c:	20000040 	.word	0x20000040

0800fd90 <cleanup_stdio>:
 800fd90:	6841      	ldr	r1, [r0, #4]
 800fd92:	4b0c      	ldr	r3, [pc, #48]	@ (800fdc4 <cleanup_stdio+0x34>)
 800fd94:	4299      	cmp	r1, r3
 800fd96:	b510      	push	{r4, lr}
 800fd98:	4604      	mov	r4, r0
 800fd9a:	d001      	beq.n	800fda0 <cleanup_stdio+0x10>
 800fd9c:	f001 fe40 	bl	8011a20 <_fflush_r>
 800fda0:	68a1      	ldr	r1, [r4, #8]
 800fda2:	4b09      	ldr	r3, [pc, #36]	@ (800fdc8 <cleanup_stdio+0x38>)
 800fda4:	4299      	cmp	r1, r3
 800fda6:	d002      	beq.n	800fdae <cleanup_stdio+0x1e>
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f001 fe39 	bl	8011a20 <_fflush_r>
 800fdae:	68e1      	ldr	r1, [r4, #12]
 800fdb0:	4b06      	ldr	r3, [pc, #24]	@ (800fdcc <cleanup_stdio+0x3c>)
 800fdb2:	4299      	cmp	r1, r3
 800fdb4:	d004      	beq.n	800fdc0 <cleanup_stdio+0x30>
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdbc:	f001 be30 	b.w	8011a20 <_fflush_r>
 800fdc0:	bd10      	pop	{r4, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20007bc4 	.word	0x20007bc4
 800fdc8:	20007c2c 	.word	0x20007c2c
 800fdcc:	20007c94 	.word	0x20007c94

0800fdd0 <global_stdio_init.part.0>:
 800fdd0:	b510      	push	{r4, lr}
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	@ (800fe00 <global_stdio_init.part.0+0x30>)
 800fdd4:	2104      	movs	r1, #4
 800fdd6:	4c0b      	ldr	r4, [pc, #44]	@ (800fe04 <global_stdio_init.part.0+0x34>)
 800fdd8:	4a0b      	ldr	r2, [pc, #44]	@ (800fe08 <global_stdio_init.part.0+0x38>)
 800fdda:	4620      	mov	r0, r4
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f7ff ff94 	bl	800fd0c <std>
 800fde4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fde8:	2201      	movs	r2, #1
 800fdea:	2109      	movs	r1, #9
 800fdec:	f7ff ff8e 	bl	800fd0c <std>
 800fdf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	2112      	movs	r1, #18
 800fdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdfc:	f7ff bf86 	b.w	800fd0c <std>
 800fe00:	20007cfc 	.word	0x20007cfc
 800fe04:	20007bc4 	.word	0x20007bc4
 800fe08:	0800fd79 	.word	0x0800fd79

0800fe0c <__sfp_lock_acquire>:
 800fe0c:	4801      	ldr	r0, [pc, #4]	@ (800fe14 <__sfp_lock_acquire+0x8>)
 800fe0e:	f000 b932 	b.w	8010076 <__retarget_lock_acquire_recursive>
 800fe12:	bf00      	nop
 800fe14:	20007d05 	.word	0x20007d05

0800fe18 <__sfp_lock_release>:
 800fe18:	4801      	ldr	r0, [pc, #4]	@ (800fe20 <__sfp_lock_release+0x8>)
 800fe1a:	f000 b92d 	b.w	8010078 <__retarget_lock_release_recursive>
 800fe1e:	bf00      	nop
 800fe20:	20007d05 	.word	0x20007d05

0800fe24 <__sinit>:
 800fe24:	b510      	push	{r4, lr}
 800fe26:	4604      	mov	r4, r0
 800fe28:	f7ff fff0 	bl	800fe0c <__sfp_lock_acquire>
 800fe2c:	6a23      	ldr	r3, [r4, #32]
 800fe2e:	b11b      	cbz	r3, 800fe38 <__sinit+0x14>
 800fe30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe34:	f7ff bff0 	b.w	800fe18 <__sfp_lock_release>
 800fe38:	4b04      	ldr	r3, [pc, #16]	@ (800fe4c <__sinit+0x28>)
 800fe3a:	6223      	str	r3, [r4, #32]
 800fe3c:	4b04      	ldr	r3, [pc, #16]	@ (800fe50 <__sinit+0x2c>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d1f5      	bne.n	800fe30 <__sinit+0xc>
 800fe44:	f7ff ffc4 	bl	800fdd0 <global_stdio_init.part.0>
 800fe48:	e7f2      	b.n	800fe30 <__sinit+0xc>
 800fe4a:	bf00      	nop
 800fe4c:	0800fd91 	.word	0x0800fd91
 800fe50:	20007cfc 	.word	0x20007cfc

0800fe54 <_fwalk_sglue>:
 800fe54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe58:	4607      	mov	r7, r0
 800fe5a:	4688      	mov	r8, r1
 800fe5c:	4614      	mov	r4, r2
 800fe5e:	2600      	movs	r6, #0
 800fe60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe64:	f1b9 0901 	subs.w	r9, r9, #1
 800fe68:	d505      	bpl.n	800fe76 <_fwalk_sglue+0x22>
 800fe6a:	6824      	ldr	r4, [r4, #0]
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	d1f7      	bne.n	800fe60 <_fwalk_sglue+0xc>
 800fe70:	4630      	mov	r0, r6
 800fe72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe76:	89ab      	ldrh	r3, [r5, #12]
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d907      	bls.n	800fe8c <_fwalk_sglue+0x38>
 800fe7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe80:	3301      	adds	r3, #1
 800fe82:	d003      	beq.n	800fe8c <_fwalk_sglue+0x38>
 800fe84:	4629      	mov	r1, r5
 800fe86:	4638      	mov	r0, r7
 800fe88:	47c0      	blx	r8
 800fe8a:	4306      	orrs	r6, r0
 800fe8c:	3568      	adds	r5, #104	@ 0x68
 800fe8e:	e7e9      	b.n	800fe64 <_fwalk_sglue+0x10>

0800fe90 <siprintf>:
 800fe90:	b40e      	push	{r1, r2, r3}
 800fe92:	b500      	push	{lr}
 800fe94:	b09c      	sub	sp, #112	@ 0x70
 800fe96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe9a:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe9c:	9002      	str	r0, [sp, #8]
 800fe9e:	9006      	str	r0, [sp, #24]
 800fea0:	9107      	str	r1, [sp, #28]
 800fea2:	9104      	str	r1, [sp, #16]
 800fea4:	4808      	ldr	r0, [pc, #32]	@ (800fec8 <siprintf+0x38>)
 800fea6:	4909      	ldr	r1, [pc, #36]	@ (800fecc <siprintf+0x3c>)
 800fea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800feac:	9105      	str	r1, [sp, #20]
 800feae:	a902      	add	r1, sp, #8
 800feb0:	6800      	ldr	r0, [r0, #0]
 800feb2:	9301      	str	r3, [sp, #4]
 800feb4:	f001 fc34 	bl	8011720 <_svfiprintf_r>
 800feb8:	9b02      	ldr	r3, [sp, #8]
 800feba:	2200      	movs	r2, #0
 800febc:	701a      	strb	r2, [r3, #0]
 800febe:	b01c      	add	sp, #112	@ 0x70
 800fec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec4:	b003      	add	sp, #12
 800fec6:	4770      	bx	lr
 800fec8:	2000003c 	.word	0x2000003c
 800fecc:	ffff0208 	.word	0xffff0208

0800fed0 <__sread>:
 800fed0:	b510      	push	{r4, lr}
 800fed2:	460c      	mov	r4, r1
 800fed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed8:	f000 f87e 	bl	800ffd8 <_read_r>
 800fedc:	2800      	cmp	r0, #0
 800fede:	bfab      	itete	ge
 800fee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fee2:	89a3      	ldrhlt	r3, [r4, #12]
 800fee4:	181b      	addge	r3, r3, r0
 800fee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800feea:	bfac      	ite	ge
 800feec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800feee:	81a3      	strhlt	r3, [r4, #12]
 800fef0:	bd10      	pop	{r4, pc}

0800fef2 <__swrite>:
 800fef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef6:	461f      	mov	r7, r3
 800fef8:	898b      	ldrh	r3, [r1, #12]
 800fefa:	4605      	mov	r5, r0
 800fefc:	460c      	mov	r4, r1
 800fefe:	05db      	lsls	r3, r3, #23
 800ff00:	4616      	mov	r6, r2
 800ff02:	d505      	bpl.n	800ff10 <__swrite+0x1e>
 800ff04:	2302      	movs	r3, #2
 800ff06:	2200      	movs	r2, #0
 800ff08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff0c:	f000 f852 	bl	800ffb4 <_lseek_r>
 800ff10:	89a3      	ldrh	r3, [r4, #12]
 800ff12:	4632      	mov	r2, r6
 800ff14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	463b      	mov	r3, r7
 800ff22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff26:	f000 b869 	b.w	800fffc <_write_r>

0800ff2a <__sseek>:
 800ff2a:	b510      	push	{r4, lr}
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff32:	f000 f83f 	bl	800ffb4 <_lseek_r>
 800ff36:	1c43      	adds	r3, r0, #1
 800ff38:	89a3      	ldrh	r3, [r4, #12]
 800ff3a:	bf15      	itete	ne
 800ff3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff46:	81a3      	strheq	r3, [r4, #12]
 800ff48:	bf18      	it	ne
 800ff4a:	81a3      	strhne	r3, [r4, #12]
 800ff4c:	bd10      	pop	{r4, pc}

0800ff4e <__sclose>:
 800ff4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff52:	f000 b81f 	b.w	800ff94 <_close_r>

0800ff56 <memset>:
 800ff56:	4402      	add	r2, r0
 800ff58:	4603      	mov	r3, r0
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d100      	bne.n	800ff60 <memset+0xa>
 800ff5e:	4770      	bx	lr
 800ff60:	f803 1b01 	strb.w	r1, [r3], #1
 800ff64:	e7f9      	b.n	800ff5a <memset+0x4>

0800ff66 <strncat>:
 800ff66:	b530      	push	{r4, r5, lr}
 800ff68:	4604      	mov	r4, r0
 800ff6a:	7825      	ldrb	r5, [r4, #0]
 800ff6c:	4623      	mov	r3, r4
 800ff6e:	3401      	adds	r4, #1
 800ff70:	2d00      	cmp	r5, #0
 800ff72:	d1fa      	bne.n	800ff6a <strncat+0x4>
 800ff74:	3a01      	subs	r2, #1
 800ff76:	d304      	bcc.n	800ff82 <strncat+0x1c>
 800ff78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff7c:	f803 4b01 	strb.w	r4, [r3], #1
 800ff80:	b904      	cbnz	r4, 800ff84 <strncat+0x1e>
 800ff82:	bd30      	pop	{r4, r5, pc}
 800ff84:	2a00      	cmp	r2, #0
 800ff86:	d1f5      	bne.n	800ff74 <strncat+0xe>
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	e7f3      	b.n	800ff74 <strncat+0xe>

0800ff8c <_localeconv_r>:
 800ff8c:	4800      	ldr	r0, [pc, #0]	@ (800ff90 <_localeconv_r+0x4>)
 800ff8e:	4770      	bx	lr
 800ff90:	2000017c 	.word	0x2000017c

0800ff94 <_close_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	2300      	movs	r3, #0
 800ff98:	4d05      	ldr	r5, [pc, #20]	@ (800ffb0 <_close_r+0x1c>)
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	4608      	mov	r0, r1
 800ff9e:	602b      	str	r3, [r5, #0]
 800ffa0:	f7f4 fa7a 	bl	8004498 <_close>
 800ffa4:	1c43      	adds	r3, r0, #1
 800ffa6:	d102      	bne.n	800ffae <_close_r+0x1a>
 800ffa8:	682b      	ldr	r3, [r5, #0]
 800ffaa:	b103      	cbz	r3, 800ffae <_close_r+0x1a>
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	bd38      	pop	{r3, r4, r5, pc}
 800ffb0:	20007d00 	.word	0x20007d00

0800ffb4 <_lseek_r>:
 800ffb4:	b538      	push	{r3, r4, r5, lr}
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	4d06      	ldr	r5, [pc, #24]	@ (800ffd4 <_lseek_r+0x20>)
 800ffba:	4608      	mov	r0, r1
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	602a      	str	r2, [r5, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	f7f4 fa8f 	bl	80044e6 <_lseek>
 800ffc8:	1c43      	adds	r3, r0, #1
 800ffca:	d102      	bne.n	800ffd2 <_lseek_r+0x1e>
 800ffcc:	682b      	ldr	r3, [r5, #0]
 800ffce:	b103      	cbz	r3, 800ffd2 <_lseek_r+0x1e>
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	bd38      	pop	{r3, r4, r5, pc}
 800ffd4:	20007d00 	.word	0x20007d00

0800ffd8 <_read_r>:
 800ffd8:	b538      	push	{r3, r4, r5, lr}
 800ffda:	4604      	mov	r4, r0
 800ffdc:	4d06      	ldr	r5, [pc, #24]	@ (800fff8 <_read_r+0x20>)
 800ffde:	4608      	mov	r0, r1
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	602a      	str	r2, [r5, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	f7f4 fa1d 	bl	8004426 <_read>
 800ffec:	1c43      	adds	r3, r0, #1
 800ffee:	d102      	bne.n	800fff6 <_read_r+0x1e>
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	b103      	cbz	r3, 800fff6 <_read_r+0x1e>
 800fff4:	6023      	str	r3, [r4, #0]
 800fff6:	bd38      	pop	{r3, r4, r5, pc}
 800fff8:	20007d00 	.word	0x20007d00

0800fffc <_write_r>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4604      	mov	r4, r0
 8010000:	4d06      	ldr	r5, [pc, #24]	@ (801001c <_write_r+0x20>)
 8010002:	4608      	mov	r0, r1
 8010004:	4611      	mov	r1, r2
 8010006:	2200      	movs	r2, #0
 8010008:	602a      	str	r2, [r5, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	f7f4 fa28 	bl	8004460 <_write>
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d102      	bne.n	801001a <_write_r+0x1e>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	b103      	cbz	r3, 801001a <_write_r+0x1e>
 8010018:	6023      	str	r3, [r4, #0]
 801001a:	bd38      	pop	{r3, r4, r5, pc}
 801001c:	20007d00 	.word	0x20007d00

08010020 <__errno>:
 8010020:	4b01      	ldr	r3, [pc, #4]	@ (8010028 <__errno+0x8>)
 8010022:	6818      	ldr	r0, [r3, #0]
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	2000003c 	.word	0x2000003c

0801002c <__libc_init_array>:
 801002c:	b570      	push	{r4, r5, r6, lr}
 801002e:	4d0d      	ldr	r5, [pc, #52]	@ (8010064 <__libc_init_array+0x38>)
 8010030:	2600      	movs	r6, #0
 8010032:	4c0d      	ldr	r4, [pc, #52]	@ (8010068 <__libc_init_array+0x3c>)
 8010034:	1b64      	subs	r4, r4, r5
 8010036:	10a4      	asrs	r4, r4, #2
 8010038:	42a6      	cmp	r6, r4
 801003a:	d109      	bne.n	8010050 <__libc_init_array+0x24>
 801003c:	4d0b      	ldr	r5, [pc, #44]	@ (801006c <__libc_init_array+0x40>)
 801003e:	2600      	movs	r6, #0
 8010040:	4c0b      	ldr	r4, [pc, #44]	@ (8010070 <__libc_init_array+0x44>)
 8010042:	f002 f987 	bl	8012354 <_init>
 8010046:	1b64      	subs	r4, r4, r5
 8010048:	10a4      	asrs	r4, r4, #2
 801004a:	42a6      	cmp	r6, r4
 801004c:	d105      	bne.n	801005a <__libc_init_array+0x2e>
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	f855 3b04 	ldr.w	r3, [r5], #4
 8010054:	3601      	adds	r6, #1
 8010056:	4798      	blx	r3
 8010058:	e7ee      	b.n	8010038 <__libc_init_array+0xc>
 801005a:	f855 3b04 	ldr.w	r3, [r5], #4
 801005e:	3601      	adds	r6, #1
 8010060:	4798      	blx	r3
 8010062:	e7f2      	b.n	801004a <__libc_init_array+0x1e>
 8010064:	080128b8 	.word	0x080128b8
 8010068:	080128b8 	.word	0x080128b8
 801006c:	080128b8 	.word	0x080128b8
 8010070:	080128bc 	.word	0x080128bc

08010074 <__retarget_lock_init_recursive>:
 8010074:	4770      	bx	lr

08010076 <__retarget_lock_acquire_recursive>:
 8010076:	4770      	bx	lr

08010078 <__retarget_lock_release_recursive>:
 8010078:	4770      	bx	lr

0801007a <memchr>:
 801007a:	b2c9      	uxtb	r1, r1
 801007c:	4603      	mov	r3, r0
 801007e:	4402      	add	r2, r0
 8010080:	b510      	push	{r4, lr}
 8010082:	4293      	cmp	r3, r2
 8010084:	4618      	mov	r0, r3
 8010086:	d101      	bne.n	801008c <memchr+0x12>
 8010088:	2000      	movs	r0, #0
 801008a:	e003      	b.n	8010094 <memchr+0x1a>
 801008c:	7804      	ldrb	r4, [r0, #0]
 801008e:	3301      	adds	r3, #1
 8010090:	428c      	cmp	r4, r1
 8010092:	d1f6      	bne.n	8010082 <memchr+0x8>
 8010094:	bd10      	pop	{r4, pc}

08010096 <memcpy>:
 8010096:	440a      	add	r2, r1
 8010098:	1e43      	subs	r3, r0, #1
 801009a:	4291      	cmp	r1, r2
 801009c:	d100      	bne.n	80100a0 <memcpy+0xa>
 801009e:	4770      	bx	lr
 80100a0:	b510      	push	{r4, lr}
 80100a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100a6:	4291      	cmp	r1, r2
 80100a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ac:	d1f9      	bne.n	80100a2 <memcpy+0xc>
 80100ae:	bd10      	pop	{r4, pc}

080100b0 <quorem>:
 80100b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	6903      	ldr	r3, [r0, #16]
 80100b6:	4607      	mov	r7, r0
 80100b8:	690c      	ldr	r4, [r1, #16]
 80100ba:	42a3      	cmp	r3, r4
 80100bc:	f2c0 8083 	blt.w	80101c6 <quorem+0x116>
 80100c0:	3c01      	subs	r4, #1
 80100c2:	f100 0514 	add.w	r5, r0, #20
 80100c6:	f101 0814 	add.w	r8, r1, #20
 80100ca:	00a3      	lsls	r3, r4, #2
 80100cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100da:	9301      	str	r3, [sp, #4]
 80100dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100e0:	3301      	adds	r3, #1
 80100e2:	429a      	cmp	r2, r3
 80100e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80100e8:	d331      	bcc.n	801014e <quorem+0x9e>
 80100ea:	f04f 0a00 	mov.w	sl, #0
 80100ee:	46c4      	mov	ip, r8
 80100f0:	46ae      	mov	lr, r5
 80100f2:	46d3      	mov	fp, sl
 80100f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100f8:	b298      	uxth	r0, r3
 80100fa:	45e1      	cmp	r9, ip
 80100fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8010100:	fb06 a000 	mla	r0, r6, r0, sl
 8010104:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8010108:	b280      	uxth	r0, r0
 801010a:	fb06 2303 	mla	r3, r6, r3, r2
 801010e:	f8de 2000 	ldr.w	r2, [lr]
 8010112:	b292      	uxth	r2, r2
 8010114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010118:	eba2 0200 	sub.w	r2, r2, r0
 801011c:	b29b      	uxth	r3, r3
 801011e:	f8de 0000 	ldr.w	r0, [lr]
 8010122:	445a      	add	r2, fp
 8010124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010128:	b292      	uxth	r2, r2
 801012a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801012e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010132:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010136:	f84e 2b04 	str.w	r2, [lr], #4
 801013a:	d2db      	bcs.n	80100f4 <quorem+0x44>
 801013c:	9b00      	ldr	r3, [sp, #0]
 801013e:	58eb      	ldr	r3, [r5, r3]
 8010140:	b92b      	cbnz	r3, 801014e <quorem+0x9e>
 8010142:	9b01      	ldr	r3, [sp, #4]
 8010144:	3b04      	subs	r3, #4
 8010146:	429d      	cmp	r5, r3
 8010148:	461a      	mov	r2, r3
 801014a:	d330      	bcc.n	80101ae <quorem+0xfe>
 801014c:	613c      	str	r4, [r7, #16]
 801014e:	4638      	mov	r0, r7
 8010150:	f001 f97e 	bl	8011450 <__mcmp>
 8010154:	2800      	cmp	r0, #0
 8010156:	db26      	blt.n	80101a6 <quorem+0xf6>
 8010158:	4629      	mov	r1, r5
 801015a:	2000      	movs	r0, #0
 801015c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010160:	f8d1 c000 	ldr.w	ip, [r1]
 8010164:	fa1f fe82 	uxth.w	lr, r2
 8010168:	45c1      	cmp	r9, r8
 801016a:	fa1f f38c 	uxth.w	r3, ip
 801016e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010172:	eba3 030e 	sub.w	r3, r3, lr
 8010176:	4403      	add	r3, r0
 8010178:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801017c:	b29b      	uxth	r3, r3
 801017e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010186:	ea4f 4022 	mov.w	r0, r2, asr #16
 801018a:	f841 3b04 	str.w	r3, [r1], #4
 801018e:	d2e5      	bcs.n	801015c <quorem+0xac>
 8010190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010198:	b922      	cbnz	r2, 80101a4 <quorem+0xf4>
 801019a:	3b04      	subs	r3, #4
 801019c:	429d      	cmp	r5, r3
 801019e:	461a      	mov	r2, r3
 80101a0:	d30b      	bcc.n	80101ba <quorem+0x10a>
 80101a2:	613c      	str	r4, [r7, #16]
 80101a4:	3601      	adds	r6, #1
 80101a6:	4630      	mov	r0, r6
 80101a8:	b003      	add	sp, #12
 80101aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ae:	6812      	ldr	r2, [r2, #0]
 80101b0:	3b04      	subs	r3, #4
 80101b2:	2a00      	cmp	r2, #0
 80101b4:	d1ca      	bne.n	801014c <quorem+0x9c>
 80101b6:	3c01      	subs	r4, #1
 80101b8:	e7c5      	b.n	8010146 <quorem+0x96>
 80101ba:	6812      	ldr	r2, [r2, #0]
 80101bc:	3b04      	subs	r3, #4
 80101be:	2a00      	cmp	r2, #0
 80101c0:	d1ef      	bne.n	80101a2 <quorem+0xf2>
 80101c2:	3c01      	subs	r4, #1
 80101c4:	e7ea      	b.n	801019c <quorem+0xec>
 80101c6:	2000      	movs	r0, #0
 80101c8:	e7ee      	b.n	80101a8 <quorem+0xf8>
 80101ca:	0000      	movs	r0, r0
 80101cc:	0000      	movs	r0, r0
	...

080101d0 <_dtoa_r>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	69c7      	ldr	r7, [r0, #28]
 80101d6:	b099      	sub	sp, #100	@ 0x64
 80101d8:	4683      	mov	fp, r0
 80101da:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80101dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80101de:	920e      	str	r2, [sp, #56]	@ 0x38
 80101e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80101e2:	ec55 4b10 	vmov	r4, r5, d0
 80101e6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101ea:	b97f      	cbnz	r7, 801020c <_dtoa_r+0x3c>
 80101ec:	2010      	movs	r0, #16
 80101ee:	f000 fdfd 	bl	8010dec <malloc>
 80101f2:	4602      	mov	r2, r0
 80101f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80101f8:	b920      	cbnz	r0, 8010204 <_dtoa_r+0x34>
 80101fa:	4ba7      	ldr	r3, [pc, #668]	@ (8010498 <_dtoa_r+0x2c8>)
 80101fc:	21ef      	movs	r1, #239	@ 0xef
 80101fe:	48a7      	ldr	r0, [pc, #668]	@ (801049c <_dtoa_r+0x2cc>)
 8010200:	f001 fc60 	bl	8011ac4 <__assert_func>
 8010204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010208:	6007      	str	r7, [r0, #0]
 801020a:	60c7      	str	r7, [r0, #12]
 801020c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010210:	6819      	ldr	r1, [r3, #0]
 8010212:	b159      	cbz	r1, 801022c <_dtoa_r+0x5c>
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	2301      	movs	r3, #1
 8010218:	4658      	mov	r0, fp
 801021a:	4093      	lsls	r3, r2
 801021c:	604a      	str	r2, [r1, #4]
 801021e:	608b      	str	r3, [r1, #8]
 8010220:	f000 feda 	bl	8010fd8 <_Bfree>
 8010224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010228:	2200      	movs	r2, #0
 801022a:	601a      	str	r2, [r3, #0]
 801022c:	1e2b      	subs	r3, r5, #0
 801022e:	bfb7      	itett	lt
 8010230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010234:	2300      	movge	r3, #0
 8010236:	2201      	movlt	r2, #1
 8010238:	9303      	strlt	r3, [sp, #12]
 801023a:	bfa8      	it	ge
 801023c:	6033      	strge	r3, [r6, #0]
 801023e:	9f03      	ldr	r7, [sp, #12]
 8010240:	4b97      	ldr	r3, [pc, #604]	@ (80104a0 <_dtoa_r+0x2d0>)
 8010242:	bfb8      	it	lt
 8010244:	6032      	strlt	r2, [r6, #0]
 8010246:	43bb      	bics	r3, r7
 8010248:	d112      	bne.n	8010270 <_dtoa_r+0xa0>
 801024a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801024e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010250:	6013      	str	r3, [r2, #0]
 8010252:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010256:	4323      	orrs	r3, r4
 8010258:	f000 854c 	beq.w	8010cf4 <_dtoa_r+0xb24>
 801025c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801025e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80104b4 <_dtoa_r+0x2e4>
 8010262:	2b00      	cmp	r3, #0
 8010264:	f000 854e 	beq.w	8010d04 <_dtoa_r+0xb34>
 8010268:	f10a 0303 	add.w	r3, sl, #3
 801026c:	f000 bd48 	b.w	8010d00 <_dtoa_r+0xb30>
 8010270:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010274:	2200      	movs	r2, #0
 8010276:	2300      	movs	r3, #0
 8010278:	ec51 0b17 	vmov	r0, r1, d7
 801027c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010280:	f7f0 fc32 	bl	8000ae8 <__aeabi_dcmpeq>
 8010284:	4680      	mov	r8, r0
 8010286:	b158      	cbz	r0, 80102a0 <_dtoa_r+0xd0>
 8010288:	2301      	movs	r3, #1
 801028a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801028c:	6013      	str	r3, [r2, #0]
 801028e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010290:	b113      	cbz	r3, 8010298 <_dtoa_r+0xc8>
 8010292:	4b84      	ldr	r3, [pc, #528]	@ (80104a4 <_dtoa_r+0x2d4>)
 8010294:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010296:	6013      	str	r3, [r2, #0]
 8010298:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80104b8 <_dtoa_r+0x2e8>
 801029c:	f000 bd32 	b.w	8010d04 <_dtoa_r+0xb34>
 80102a0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80102a4:	aa16      	add	r2, sp, #88	@ 0x58
 80102a6:	a917      	add	r1, sp, #92	@ 0x5c
 80102a8:	4658      	mov	r0, fp
 80102aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80102ae:	f001 f983 	bl	80115b8 <__d2b>
 80102b2:	4681      	mov	r9, r0
 80102b4:	2e00      	cmp	r6, #0
 80102b6:	d075      	beq.n	80103a4 <_dtoa_r+0x1d4>
 80102b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102ba:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102be:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80102c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102c6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102ce:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102d2:	4619      	mov	r1, r3
 80102d4:	2200      	movs	r2, #0
 80102d6:	4b74      	ldr	r3, [pc, #464]	@ (80104a8 <_dtoa_r+0x2d8>)
 80102d8:	f7ef ffe6 	bl	80002a8 <__aeabi_dsub>
 80102dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010480 <_dtoa_r+0x2b0>)
 80102de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e2:	f7f0 f999 	bl	8000618 <__aeabi_dmul>
 80102e6:	a368      	add	r3, pc, #416	@ (adr r3, 8010488 <_dtoa_r+0x2b8>)
 80102e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ec:	f7ef ffde 	bl	80002ac <__adddf3>
 80102f0:	4604      	mov	r4, r0
 80102f2:	460d      	mov	r5, r1
 80102f4:	4630      	mov	r0, r6
 80102f6:	f7f0 f925 	bl	8000544 <__aeabi_i2d>
 80102fa:	a365      	add	r3, pc, #404	@ (adr r3, 8010490 <_dtoa_r+0x2c0>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	f7f0 f98a 	bl	8000618 <__aeabi_dmul>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4620      	mov	r0, r4
 801030a:	4629      	mov	r1, r5
 801030c:	f7ef ffce 	bl	80002ac <__adddf3>
 8010310:	4604      	mov	r4, r0
 8010312:	460d      	mov	r5, r1
 8010314:	f7f0 fc30 	bl	8000b78 <__aeabi_d2iz>
 8010318:	2200      	movs	r2, #0
 801031a:	4607      	mov	r7, r0
 801031c:	2300      	movs	r3, #0
 801031e:	4620      	mov	r0, r4
 8010320:	4629      	mov	r1, r5
 8010322:	f7f0 fbeb 	bl	8000afc <__aeabi_dcmplt>
 8010326:	b140      	cbz	r0, 801033a <_dtoa_r+0x16a>
 8010328:	4638      	mov	r0, r7
 801032a:	f7f0 f90b 	bl	8000544 <__aeabi_i2d>
 801032e:	4622      	mov	r2, r4
 8010330:	462b      	mov	r3, r5
 8010332:	f7f0 fbd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010336:	b900      	cbnz	r0, 801033a <_dtoa_r+0x16a>
 8010338:	3f01      	subs	r7, #1
 801033a:	2f16      	cmp	r7, #22
 801033c:	d851      	bhi.n	80103e2 <_dtoa_r+0x212>
 801033e:	4b5b      	ldr	r3, [pc, #364]	@ (80104ac <_dtoa_r+0x2dc>)
 8010340:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034c:	f7f0 fbd6 	bl	8000afc <__aeabi_dcmplt>
 8010350:	2800      	cmp	r0, #0
 8010352:	d048      	beq.n	80103e6 <_dtoa_r+0x216>
 8010354:	3f01      	subs	r7, #1
 8010356:	2300      	movs	r3, #0
 8010358:	9312      	str	r3, [sp, #72]	@ 0x48
 801035a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801035c:	1b9b      	subs	r3, r3, r6
 801035e:	1e5a      	subs	r2, r3, #1
 8010360:	bf46      	itte	mi
 8010362:	f1c3 0801 	rsbmi	r8, r3, #1
 8010366:	2300      	movmi	r3, #0
 8010368:	f04f 0800 	movpl.w	r8, #0
 801036c:	9208      	str	r2, [sp, #32]
 801036e:	bf48      	it	mi
 8010370:	9308      	strmi	r3, [sp, #32]
 8010372:	2f00      	cmp	r7, #0
 8010374:	db39      	blt.n	80103ea <_dtoa_r+0x21a>
 8010376:	9b08      	ldr	r3, [sp, #32]
 8010378:	970f      	str	r7, [sp, #60]	@ 0x3c
 801037a:	443b      	add	r3, r7
 801037c:	9308      	str	r3, [sp, #32]
 801037e:	2300      	movs	r3, #0
 8010380:	930a      	str	r3, [sp, #40]	@ 0x28
 8010382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010384:	2b09      	cmp	r3, #9
 8010386:	d864      	bhi.n	8010452 <_dtoa_r+0x282>
 8010388:	2b05      	cmp	r3, #5
 801038a:	bfc5      	ittet	gt
 801038c:	3b04      	subgt	r3, #4
 801038e:	2400      	movgt	r4, #0
 8010390:	2401      	movle	r4, #1
 8010392:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010396:	3b02      	subs	r3, #2
 8010398:	2b03      	cmp	r3, #3
 801039a:	d865      	bhi.n	8010468 <_dtoa_r+0x298>
 801039c:	e8df f003 	tbb	[pc, r3]
 80103a0:	5737392c 	.word	0x5737392c
 80103a4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80103a8:	441e      	add	r6, r3
 80103aa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80103ae:	2b20      	cmp	r3, #32
 80103b0:	bfc9      	itett	gt
 80103b2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80103b6:	f1c3 0320 	rsble	r3, r3, #32
 80103ba:	409f      	lslgt	r7, r3
 80103bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80103c0:	bfd8      	it	le
 80103c2:	fa04 f003 	lslle.w	r0, r4, r3
 80103c6:	f106 36ff 	add.w	r6, r6, #4294967295
 80103ca:	bfc4      	itt	gt
 80103cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80103d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80103d4:	f7f0 f8a6 	bl	8000524 <__aeabi_ui2d>
 80103d8:	2201      	movs	r2, #1
 80103da:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80103de:	9214      	str	r2, [sp, #80]	@ 0x50
 80103e0:	e777      	b.n	80102d2 <_dtoa_r+0x102>
 80103e2:	2301      	movs	r3, #1
 80103e4:	e7b8      	b.n	8010358 <_dtoa_r+0x188>
 80103e6:	9012      	str	r0, [sp, #72]	@ 0x48
 80103e8:	e7b7      	b.n	801035a <_dtoa_r+0x18a>
 80103ea:	427b      	negs	r3, r7
 80103ec:	eba8 0807 	sub.w	r8, r8, r7
 80103f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80103f2:	2300      	movs	r3, #0
 80103f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103f6:	e7c4      	b.n	8010382 <_dtoa_r+0x1b2>
 80103f8:	2300      	movs	r3, #0
 80103fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103fe:	2b00      	cmp	r3, #0
 8010400:	dc35      	bgt.n	801046e <_dtoa_r+0x29e>
 8010402:	2301      	movs	r3, #1
 8010404:	461a      	mov	r2, r3
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	9307      	str	r3, [sp, #28]
 801040a:	920e      	str	r2, [sp, #56]	@ 0x38
 801040c:	e00b      	b.n	8010426 <_dtoa_r+0x256>
 801040e:	2301      	movs	r3, #1
 8010410:	e7f3      	b.n	80103fa <_dtoa_r+0x22a>
 8010412:	2300      	movs	r3, #0
 8010414:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010416:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010418:	18fb      	adds	r3, r7, r3
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	3301      	adds	r3, #1
 801041e:	2b01      	cmp	r3, #1
 8010420:	9307      	str	r3, [sp, #28]
 8010422:	bfb8      	it	lt
 8010424:	2301      	movlt	r3, #1
 8010426:	f8db 001c 	ldr.w	r0, [fp, #28]
 801042a:	2100      	movs	r1, #0
 801042c:	2204      	movs	r2, #4
 801042e:	f102 0514 	add.w	r5, r2, #20
 8010432:	429d      	cmp	r5, r3
 8010434:	d91f      	bls.n	8010476 <_dtoa_r+0x2a6>
 8010436:	6041      	str	r1, [r0, #4]
 8010438:	4658      	mov	r0, fp
 801043a:	f000 fd8d 	bl	8010f58 <_Balloc>
 801043e:	4682      	mov	sl, r0
 8010440:	2800      	cmp	r0, #0
 8010442:	d13b      	bne.n	80104bc <_dtoa_r+0x2ec>
 8010444:	4b1a      	ldr	r3, [pc, #104]	@ (80104b0 <_dtoa_r+0x2e0>)
 8010446:	4602      	mov	r2, r0
 8010448:	f240 11af 	movw	r1, #431	@ 0x1af
 801044c:	e6d7      	b.n	80101fe <_dtoa_r+0x2e>
 801044e:	2301      	movs	r3, #1
 8010450:	e7e0      	b.n	8010414 <_dtoa_r+0x244>
 8010452:	2401      	movs	r4, #1
 8010454:	2300      	movs	r3, #0
 8010456:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010458:	9309      	str	r3, [sp, #36]	@ 0x24
 801045a:	f04f 33ff 	mov.w	r3, #4294967295
 801045e:	2200      	movs	r2, #0
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	9307      	str	r3, [sp, #28]
 8010464:	2312      	movs	r3, #18
 8010466:	e7d0      	b.n	801040a <_dtoa_r+0x23a>
 8010468:	2301      	movs	r3, #1
 801046a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801046c:	e7f5      	b.n	801045a <_dtoa_r+0x28a>
 801046e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	9307      	str	r3, [sp, #28]
 8010474:	e7d7      	b.n	8010426 <_dtoa_r+0x256>
 8010476:	3101      	adds	r1, #1
 8010478:	0052      	lsls	r2, r2, #1
 801047a:	e7d8      	b.n	801042e <_dtoa_r+0x25e>
 801047c:	f3af 8000 	nop.w
 8010480:	636f4361 	.word	0x636f4361
 8010484:	3fd287a7 	.word	0x3fd287a7
 8010488:	8b60c8b3 	.word	0x8b60c8b3
 801048c:	3fc68a28 	.word	0x3fc68a28
 8010490:	509f79fb 	.word	0x509f79fb
 8010494:	3fd34413 	.word	0x3fd34413
 8010498:	0801257d 	.word	0x0801257d
 801049c:	08012594 	.word	0x08012594
 80104a0:	7ff00000 	.word	0x7ff00000
 80104a4:	0801254d 	.word	0x0801254d
 80104a8:	3ff80000 	.word	0x3ff80000
 80104ac:	08012690 	.word	0x08012690
 80104b0:	080125ec 	.word	0x080125ec
 80104b4:	08012579 	.word	0x08012579
 80104b8:	0801254c 	.word	0x0801254c
 80104bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104c0:	6018      	str	r0, [r3, #0]
 80104c2:	9b07      	ldr	r3, [sp, #28]
 80104c4:	2b0e      	cmp	r3, #14
 80104c6:	f200 80a4 	bhi.w	8010612 <_dtoa_r+0x442>
 80104ca:	2c00      	cmp	r4, #0
 80104cc:	f000 80a1 	beq.w	8010612 <_dtoa_r+0x442>
 80104d0:	2f00      	cmp	r7, #0
 80104d2:	dd33      	ble.n	801053c <_dtoa_r+0x36c>
 80104d4:	f007 020f 	and.w	r2, r7, #15
 80104d8:	4bac      	ldr	r3, [pc, #688]	@ (801078c <_dtoa_r+0x5bc>)
 80104da:	05f8      	lsls	r0, r7, #23
 80104dc:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104e4:	ed93 7b00 	vldr	d7, [r3]
 80104e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80104ec:	d516      	bpl.n	801051c <_dtoa_r+0x34c>
 80104ee:	4ba8      	ldr	r3, [pc, #672]	@ (8010790 <_dtoa_r+0x5c0>)
 80104f0:	f004 040f 	and.w	r4, r4, #15
 80104f4:	2603      	movs	r6, #3
 80104f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104fe:	f7f0 f9b5 	bl	800086c <__aeabi_ddiv>
 8010502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010506:	4da2      	ldr	r5, [pc, #648]	@ (8010790 <_dtoa_r+0x5c0>)
 8010508:	b954      	cbnz	r4, 8010520 <_dtoa_r+0x350>
 801050a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801050e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010512:	f7f0 f9ab 	bl	800086c <__aeabi_ddiv>
 8010516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801051a:	e028      	b.n	801056e <_dtoa_r+0x39e>
 801051c:	2602      	movs	r6, #2
 801051e:	e7f2      	b.n	8010506 <_dtoa_r+0x336>
 8010520:	07e1      	lsls	r1, r4, #31
 8010522:	d508      	bpl.n	8010536 <_dtoa_r+0x366>
 8010524:	3601      	adds	r6, #1
 8010526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801052a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801052e:	f7f0 f873 	bl	8000618 <__aeabi_dmul>
 8010532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010536:	1064      	asrs	r4, r4, #1
 8010538:	3508      	adds	r5, #8
 801053a:	e7e5      	b.n	8010508 <_dtoa_r+0x338>
 801053c:	f000 80d2 	beq.w	80106e4 <_dtoa_r+0x514>
 8010540:	427c      	negs	r4, r7
 8010542:	4b92      	ldr	r3, [pc, #584]	@ (801078c <_dtoa_r+0x5bc>)
 8010544:	4d92      	ldr	r5, [pc, #584]	@ (8010790 <_dtoa_r+0x5c0>)
 8010546:	2602      	movs	r6, #2
 8010548:	f004 020f 	and.w	r2, r4, #15
 801054c:	1124      	asrs	r4, r4, #4
 801054e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055a:	f7f0 f85d 	bl	8000618 <__aeabi_dmul>
 801055e:	2300      	movs	r3, #0
 8010560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010564:	2c00      	cmp	r4, #0
 8010566:	f040 80b2 	bne.w	80106ce <_dtoa_r+0x4fe>
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1d3      	bne.n	8010516 <_dtoa_r+0x346>
 801056e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010570:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010574:	2b00      	cmp	r3, #0
 8010576:	f000 80b7 	beq.w	80106e8 <_dtoa_r+0x518>
 801057a:	2200      	movs	r2, #0
 801057c:	4b85      	ldr	r3, [pc, #532]	@ (8010794 <_dtoa_r+0x5c4>)
 801057e:	4620      	mov	r0, r4
 8010580:	4629      	mov	r1, r5
 8010582:	f7f0 fabb 	bl	8000afc <__aeabi_dcmplt>
 8010586:	2800      	cmp	r0, #0
 8010588:	f000 80ae 	beq.w	80106e8 <_dtoa_r+0x518>
 801058c:	9b07      	ldr	r3, [sp, #28]
 801058e:	2b00      	cmp	r3, #0
 8010590:	f000 80aa 	beq.w	80106e8 <_dtoa_r+0x518>
 8010594:	9b00      	ldr	r3, [sp, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	dd37      	ble.n	801060a <_dtoa_r+0x43a>
 801059a:	1e7b      	subs	r3, r7, #1
 801059c:	4620      	mov	r0, r4
 801059e:	2200      	movs	r2, #0
 80105a0:	4629      	mov	r1, r5
 80105a2:	9304      	str	r3, [sp, #16]
 80105a4:	3601      	adds	r6, #1
 80105a6:	4b7c      	ldr	r3, [pc, #496]	@ (8010798 <_dtoa_r+0x5c8>)
 80105a8:	f7f0 f836 	bl	8000618 <__aeabi_dmul>
 80105ac:	9c00      	ldr	r4, [sp, #0]
 80105ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105b2:	4630      	mov	r0, r6
 80105b4:	f7ef ffc6 	bl	8000544 <__aeabi_i2d>
 80105b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105bc:	f7f0 f82c 	bl	8000618 <__aeabi_dmul>
 80105c0:	2200      	movs	r2, #0
 80105c2:	4b76      	ldr	r3, [pc, #472]	@ (801079c <_dtoa_r+0x5cc>)
 80105c4:	f7ef fe72 	bl	80002ac <__adddf3>
 80105c8:	4605      	mov	r5, r0
 80105ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105ce:	2c00      	cmp	r4, #0
 80105d0:	f040 808d 	bne.w	80106ee <_dtoa_r+0x51e>
 80105d4:	2200      	movs	r2, #0
 80105d6:	4b72      	ldr	r3, [pc, #456]	@ (80107a0 <_dtoa_r+0x5d0>)
 80105d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105dc:	f7ef fe64 	bl	80002a8 <__aeabi_dsub>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105e8:	462a      	mov	r2, r5
 80105ea:	4633      	mov	r3, r6
 80105ec:	f7f0 faa4 	bl	8000b38 <__aeabi_dcmpgt>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	f040 828b 	bne.w	8010b0c <_dtoa_r+0x93c>
 80105f6:	462a      	mov	r2, r5
 80105f8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010600:	f7f0 fa7c 	bl	8000afc <__aeabi_dcmplt>
 8010604:	2800      	cmp	r0, #0
 8010606:	f040 8128 	bne.w	801085a <_dtoa_r+0x68a>
 801060a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801060e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010614:	2b00      	cmp	r3, #0
 8010616:	f2c0 815a 	blt.w	80108ce <_dtoa_r+0x6fe>
 801061a:	2f0e      	cmp	r7, #14
 801061c:	f300 8157 	bgt.w	80108ce <_dtoa_r+0x6fe>
 8010620:	4b5a      	ldr	r3, [pc, #360]	@ (801078c <_dtoa_r+0x5bc>)
 8010622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010626:	ed93 7b00 	vldr	d7, [r3]
 801062a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801062c:	2b00      	cmp	r3, #0
 801062e:	ed8d 7b00 	vstr	d7, [sp]
 8010632:	da03      	bge.n	801063c <_dtoa_r+0x46c>
 8010634:	9b07      	ldr	r3, [sp, #28]
 8010636:	2b00      	cmp	r3, #0
 8010638:	f340 8101 	ble.w	801083e <_dtoa_r+0x66e>
 801063c:	4656      	mov	r6, sl
 801063e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010646:	4620      	mov	r0, r4
 8010648:	4629      	mov	r1, r5
 801064a:	f7f0 f90f 	bl	800086c <__aeabi_ddiv>
 801064e:	f7f0 fa93 	bl	8000b78 <__aeabi_d2iz>
 8010652:	4680      	mov	r8, r0
 8010654:	f7ef ff76 	bl	8000544 <__aeabi_i2d>
 8010658:	e9dd 2300 	ldrd	r2, r3, [sp]
 801065c:	f7ef ffdc 	bl	8000618 <__aeabi_dmul>
 8010660:	4602      	mov	r2, r0
 8010662:	4620      	mov	r0, r4
 8010664:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010668:	460b      	mov	r3, r1
 801066a:	4629      	mov	r1, r5
 801066c:	f7ef fe1c 	bl	80002a8 <__aeabi_dsub>
 8010670:	9d07      	ldr	r5, [sp, #28]
 8010672:	f806 4b01 	strb.w	r4, [r6], #1
 8010676:	eba6 040a 	sub.w	r4, r6, sl
 801067a:	4602      	mov	r2, r0
 801067c:	460b      	mov	r3, r1
 801067e:	42a5      	cmp	r5, r4
 8010680:	f040 8117 	bne.w	80108b2 <_dtoa_r+0x6e2>
 8010684:	f7ef fe12 	bl	80002ac <__adddf3>
 8010688:	4604      	mov	r4, r0
 801068a:	460d      	mov	r5, r1
 801068c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010690:	f7f0 fa52 	bl	8000b38 <__aeabi_dcmpgt>
 8010694:	2800      	cmp	r0, #0
 8010696:	f040 80f9 	bne.w	801088c <_dtoa_r+0x6bc>
 801069a:	4620      	mov	r0, r4
 801069c:	4629      	mov	r1, r5
 801069e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106a2:	f7f0 fa21 	bl	8000ae8 <__aeabi_dcmpeq>
 80106a6:	b118      	cbz	r0, 80106b0 <_dtoa_r+0x4e0>
 80106a8:	f018 0f01 	tst.w	r8, #1
 80106ac:	f040 80ee 	bne.w	801088c <_dtoa_r+0x6bc>
 80106b0:	4649      	mov	r1, r9
 80106b2:	4658      	mov	r0, fp
 80106b4:	f000 fc90 	bl	8010fd8 <_Bfree>
 80106b8:	2300      	movs	r3, #0
 80106ba:	3701      	adds	r7, #1
 80106bc:	7033      	strb	r3, [r6, #0]
 80106be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106c0:	601f      	str	r7, [r3, #0]
 80106c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f000 831d 	beq.w	8010d04 <_dtoa_r+0xb34>
 80106ca:	601e      	str	r6, [r3, #0]
 80106cc:	e31a      	b.n	8010d04 <_dtoa_r+0xb34>
 80106ce:	07e2      	lsls	r2, r4, #31
 80106d0:	d505      	bpl.n	80106de <_dtoa_r+0x50e>
 80106d2:	3601      	adds	r6, #1
 80106d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106d8:	f7ef ff9e 	bl	8000618 <__aeabi_dmul>
 80106dc:	2301      	movs	r3, #1
 80106de:	1064      	asrs	r4, r4, #1
 80106e0:	3508      	adds	r5, #8
 80106e2:	e73f      	b.n	8010564 <_dtoa_r+0x394>
 80106e4:	2602      	movs	r6, #2
 80106e6:	e742      	b.n	801056e <_dtoa_r+0x39e>
 80106e8:	9c07      	ldr	r4, [sp, #28]
 80106ea:	9704      	str	r7, [sp, #16]
 80106ec:	e761      	b.n	80105b2 <_dtoa_r+0x3e2>
 80106ee:	4b27      	ldr	r3, [pc, #156]	@ (801078c <_dtoa_r+0x5bc>)
 80106f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106f6:	4454      	add	r4, sl
 80106f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106fc:	2900      	cmp	r1, #0
 80106fe:	d053      	beq.n	80107a8 <_dtoa_r+0x5d8>
 8010700:	2000      	movs	r0, #0
 8010702:	4928      	ldr	r1, [pc, #160]	@ (80107a4 <_dtoa_r+0x5d4>)
 8010704:	f7f0 f8b2 	bl	800086c <__aeabi_ddiv>
 8010708:	4633      	mov	r3, r6
 801070a:	4656      	mov	r6, sl
 801070c:	462a      	mov	r2, r5
 801070e:	f7ef fdcb 	bl	80002a8 <__aeabi_dsub>
 8010712:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801071a:	f7f0 fa2d 	bl	8000b78 <__aeabi_d2iz>
 801071e:	4605      	mov	r5, r0
 8010720:	f7ef ff10 	bl	8000544 <__aeabi_i2d>
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	3530      	adds	r5, #48	@ 0x30
 801072a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801072e:	f7ef fdbb 	bl	80002a8 <__aeabi_dsub>
 8010732:	4602      	mov	r2, r0
 8010734:	460b      	mov	r3, r1
 8010736:	f806 5b01 	strb.w	r5, [r6], #1
 801073a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801073e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010742:	f7f0 f9db 	bl	8000afc <__aeabi_dcmplt>
 8010746:	2800      	cmp	r0, #0
 8010748:	d171      	bne.n	801082e <_dtoa_r+0x65e>
 801074a:	2000      	movs	r0, #0
 801074c:	4911      	ldr	r1, [pc, #68]	@ (8010794 <_dtoa_r+0x5c4>)
 801074e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010752:	f7ef fda9 	bl	80002a8 <__aeabi_dsub>
 8010756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801075a:	f7f0 f9cf 	bl	8000afc <__aeabi_dcmplt>
 801075e:	2800      	cmp	r0, #0
 8010760:	f040 8095 	bne.w	801088e <_dtoa_r+0x6be>
 8010764:	42a6      	cmp	r6, r4
 8010766:	f43f af50 	beq.w	801060a <_dtoa_r+0x43a>
 801076a:	2200      	movs	r2, #0
 801076c:	4b0a      	ldr	r3, [pc, #40]	@ (8010798 <_dtoa_r+0x5c8>)
 801076e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010772:	f7ef ff51 	bl	8000618 <__aeabi_dmul>
 8010776:	2200      	movs	r2, #0
 8010778:	4b07      	ldr	r3, [pc, #28]	@ (8010798 <_dtoa_r+0x5c8>)
 801077a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801077e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010782:	f7ef ff49 	bl	8000618 <__aeabi_dmul>
 8010786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801078a:	e7c4      	b.n	8010716 <_dtoa_r+0x546>
 801078c:	08012690 	.word	0x08012690
 8010790:	08012668 	.word	0x08012668
 8010794:	3ff00000 	.word	0x3ff00000
 8010798:	40240000 	.word	0x40240000
 801079c:	401c0000 	.word	0x401c0000
 80107a0:	40140000 	.word	0x40140000
 80107a4:	3fe00000 	.word	0x3fe00000
 80107a8:	4631      	mov	r1, r6
 80107aa:	4656      	mov	r6, sl
 80107ac:	4628      	mov	r0, r5
 80107ae:	f7ef ff33 	bl	8000618 <__aeabi_dmul>
 80107b2:	9415      	str	r4, [sp, #84]	@ 0x54
 80107b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107bc:	f7f0 f9dc 	bl	8000b78 <__aeabi_d2iz>
 80107c0:	4605      	mov	r5, r0
 80107c2:	f7ef febf 	bl	8000544 <__aeabi_i2d>
 80107c6:	4602      	mov	r2, r0
 80107c8:	3530      	adds	r5, #48	@ 0x30
 80107ca:	460b      	mov	r3, r1
 80107cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d0:	f7ef fd6a 	bl	80002a8 <__aeabi_dsub>
 80107d4:	f806 5b01 	strb.w	r5, [r6], #1
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	42a6      	cmp	r6, r4
 80107de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107e2:	f04f 0200 	mov.w	r2, #0
 80107e6:	d124      	bne.n	8010832 <_dtoa_r+0x662>
 80107e8:	4bac      	ldr	r3, [pc, #688]	@ (8010a9c <_dtoa_r+0x8cc>)
 80107ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107ee:	f7ef fd5d 	bl	80002ac <__adddf3>
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107fa:	f7f0 f99d 	bl	8000b38 <__aeabi_dcmpgt>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d145      	bne.n	801088e <_dtoa_r+0x6be>
 8010802:	2000      	movs	r0, #0
 8010804:	49a5      	ldr	r1, [pc, #660]	@ (8010a9c <_dtoa_r+0x8cc>)
 8010806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801080a:	f7ef fd4d 	bl	80002a8 <__aeabi_dsub>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010816:	f7f0 f971 	bl	8000afc <__aeabi_dcmplt>
 801081a:	2800      	cmp	r0, #0
 801081c:	f43f aef5 	beq.w	801060a <_dtoa_r+0x43a>
 8010820:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010822:	1e73      	subs	r3, r6, #1
 8010824:	9315      	str	r3, [sp, #84]	@ 0x54
 8010826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801082a:	2b30      	cmp	r3, #48	@ 0x30
 801082c:	d0f8      	beq.n	8010820 <_dtoa_r+0x650>
 801082e:	9f04      	ldr	r7, [sp, #16]
 8010830:	e73e      	b.n	80106b0 <_dtoa_r+0x4e0>
 8010832:	4b9b      	ldr	r3, [pc, #620]	@ (8010aa0 <_dtoa_r+0x8d0>)
 8010834:	f7ef fef0 	bl	8000618 <__aeabi_dmul>
 8010838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801083c:	e7bc      	b.n	80107b8 <_dtoa_r+0x5e8>
 801083e:	d10c      	bne.n	801085a <_dtoa_r+0x68a>
 8010840:	2200      	movs	r2, #0
 8010842:	4b98      	ldr	r3, [pc, #608]	@ (8010aa4 <_dtoa_r+0x8d4>)
 8010844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010848:	f7ef fee6 	bl	8000618 <__aeabi_dmul>
 801084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010850:	f7f0 f968 	bl	8000b24 <__aeabi_dcmpge>
 8010854:	2800      	cmp	r0, #0
 8010856:	f000 8157 	beq.w	8010b08 <_dtoa_r+0x938>
 801085a:	2400      	movs	r4, #0
 801085c:	4625      	mov	r5, r4
 801085e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010860:	4656      	mov	r6, sl
 8010862:	43db      	mvns	r3, r3
 8010864:	9304      	str	r3, [sp, #16]
 8010866:	2700      	movs	r7, #0
 8010868:	4621      	mov	r1, r4
 801086a:	4658      	mov	r0, fp
 801086c:	f000 fbb4 	bl	8010fd8 <_Bfree>
 8010870:	2d00      	cmp	r5, #0
 8010872:	d0dc      	beq.n	801082e <_dtoa_r+0x65e>
 8010874:	b12f      	cbz	r7, 8010882 <_dtoa_r+0x6b2>
 8010876:	42af      	cmp	r7, r5
 8010878:	d003      	beq.n	8010882 <_dtoa_r+0x6b2>
 801087a:	4639      	mov	r1, r7
 801087c:	4658      	mov	r0, fp
 801087e:	f000 fbab 	bl	8010fd8 <_Bfree>
 8010882:	4629      	mov	r1, r5
 8010884:	4658      	mov	r0, fp
 8010886:	f000 fba7 	bl	8010fd8 <_Bfree>
 801088a:	e7d0      	b.n	801082e <_dtoa_r+0x65e>
 801088c:	9704      	str	r7, [sp, #16]
 801088e:	4633      	mov	r3, r6
 8010890:	461e      	mov	r6, r3
 8010892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010896:	2a39      	cmp	r2, #57	@ 0x39
 8010898:	d107      	bne.n	80108aa <_dtoa_r+0x6da>
 801089a:	459a      	cmp	sl, r3
 801089c:	d1f8      	bne.n	8010890 <_dtoa_r+0x6c0>
 801089e:	9a04      	ldr	r2, [sp, #16]
 80108a0:	3201      	adds	r2, #1
 80108a2:	9204      	str	r2, [sp, #16]
 80108a4:	2230      	movs	r2, #48	@ 0x30
 80108a6:	f88a 2000 	strb.w	r2, [sl]
 80108aa:	781a      	ldrb	r2, [r3, #0]
 80108ac:	3201      	adds	r2, #1
 80108ae:	701a      	strb	r2, [r3, #0]
 80108b0:	e7bd      	b.n	801082e <_dtoa_r+0x65e>
 80108b2:	2200      	movs	r2, #0
 80108b4:	4b7a      	ldr	r3, [pc, #488]	@ (8010aa0 <_dtoa_r+0x8d0>)
 80108b6:	f7ef feaf 	bl	8000618 <__aeabi_dmul>
 80108ba:	2200      	movs	r2, #0
 80108bc:	2300      	movs	r3, #0
 80108be:	4604      	mov	r4, r0
 80108c0:	460d      	mov	r5, r1
 80108c2:	f7f0 f911 	bl	8000ae8 <__aeabi_dcmpeq>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f43f aebb 	beq.w	8010642 <_dtoa_r+0x472>
 80108cc:	e6f0      	b.n	80106b0 <_dtoa_r+0x4e0>
 80108ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108d0:	2a00      	cmp	r2, #0
 80108d2:	f000 80db 	beq.w	8010a8c <_dtoa_r+0x8bc>
 80108d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108d8:	2a01      	cmp	r2, #1
 80108da:	f300 80bf 	bgt.w	8010a5c <_dtoa_r+0x88c>
 80108de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80108e0:	2a00      	cmp	r2, #0
 80108e2:	f000 80b7 	beq.w	8010a54 <_dtoa_r+0x884>
 80108e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80108ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80108ec:	4646      	mov	r6, r8
 80108ee:	9a08      	ldr	r2, [sp, #32]
 80108f0:	2101      	movs	r1, #1
 80108f2:	4658      	mov	r0, fp
 80108f4:	4498      	add	r8, r3
 80108f6:	441a      	add	r2, r3
 80108f8:	9208      	str	r2, [sp, #32]
 80108fa:	f000 fc23 	bl	8011144 <__i2b>
 80108fe:	4605      	mov	r5, r0
 8010900:	b15e      	cbz	r6, 801091a <_dtoa_r+0x74a>
 8010902:	9b08      	ldr	r3, [sp, #32]
 8010904:	2b00      	cmp	r3, #0
 8010906:	dd08      	ble.n	801091a <_dtoa_r+0x74a>
 8010908:	42b3      	cmp	r3, r6
 801090a:	9a08      	ldr	r2, [sp, #32]
 801090c:	bfa8      	it	ge
 801090e:	4633      	movge	r3, r6
 8010910:	eba8 0803 	sub.w	r8, r8, r3
 8010914:	1af6      	subs	r6, r6, r3
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	9308      	str	r3, [sp, #32]
 801091a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801091c:	b1f3      	cbz	r3, 801095c <_dtoa_r+0x78c>
 801091e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010920:	2b00      	cmp	r3, #0
 8010922:	f000 80b7 	beq.w	8010a94 <_dtoa_r+0x8c4>
 8010926:	b18c      	cbz	r4, 801094c <_dtoa_r+0x77c>
 8010928:	4629      	mov	r1, r5
 801092a:	4622      	mov	r2, r4
 801092c:	4658      	mov	r0, fp
 801092e:	f000 fcc9 	bl	80112c4 <__pow5mult>
 8010932:	464a      	mov	r2, r9
 8010934:	4601      	mov	r1, r0
 8010936:	4605      	mov	r5, r0
 8010938:	4658      	mov	r0, fp
 801093a:	f000 fc19 	bl	8011170 <__multiply>
 801093e:	4649      	mov	r1, r9
 8010940:	9004      	str	r0, [sp, #16]
 8010942:	4658      	mov	r0, fp
 8010944:	f000 fb48 	bl	8010fd8 <_Bfree>
 8010948:	9b04      	ldr	r3, [sp, #16]
 801094a:	4699      	mov	r9, r3
 801094c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801094e:	1b1a      	subs	r2, r3, r4
 8010950:	d004      	beq.n	801095c <_dtoa_r+0x78c>
 8010952:	4649      	mov	r1, r9
 8010954:	4658      	mov	r0, fp
 8010956:	f000 fcb5 	bl	80112c4 <__pow5mult>
 801095a:	4681      	mov	r9, r0
 801095c:	2101      	movs	r1, #1
 801095e:	4658      	mov	r0, fp
 8010960:	f000 fbf0 	bl	8011144 <__i2b>
 8010964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010966:	4604      	mov	r4, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	f000 81cf 	beq.w	8010d0c <_dtoa_r+0xb3c>
 801096e:	461a      	mov	r2, r3
 8010970:	4601      	mov	r1, r0
 8010972:	4658      	mov	r0, fp
 8010974:	f000 fca6 	bl	80112c4 <__pow5mult>
 8010978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801097a:	4604      	mov	r4, r0
 801097c:	2b01      	cmp	r3, #1
 801097e:	f300 8095 	bgt.w	8010aac <_dtoa_r+0x8dc>
 8010982:	9b02      	ldr	r3, [sp, #8]
 8010984:	2b00      	cmp	r3, #0
 8010986:	f040 8087 	bne.w	8010a98 <_dtoa_r+0x8c8>
 801098a:	9b03      	ldr	r3, [sp, #12]
 801098c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010990:	2b00      	cmp	r3, #0
 8010992:	f040 8089 	bne.w	8010aa8 <_dtoa_r+0x8d8>
 8010996:	9b03      	ldr	r3, [sp, #12]
 8010998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801099c:	0d1b      	lsrs	r3, r3, #20
 801099e:	051b      	lsls	r3, r3, #20
 80109a0:	b12b      	cbz	r3, 80109ae <_dtoa_r+0x7de>
 80109a2:	9b08      	ldr	r3, [sp, #32]
 80109a4:	f108 0801 	add.w	r8, r8, #1
 80109a8:	3301      	adds	r3, #1
 80109aa:	9308      	str	r3, [sp, #32]
 80109ac:	2301      	movs	r3, #1
 80109ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80109b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 81b0 	beq.w	8010d18 <_dtoa_r+0xb48>
 80109b8:	6923      	ldr	r3, [r4, #16]
 80109ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109be:	6918      	ldr	r0, [r3, #16]
 80109c0:	f000 fb74 	bl	80110ac <__hi0bits>
 80109c4:	f1c0 0020 	rsb	r0, r0, #32
 80109c8:	9b08      	ldr	r3, [sp, #32]
 80109ca:	4418      	add	r0, r3
 80109cc:	f010 001f 	ands.w	r0, r0, #31
 80109d0:	d077      	beq.n	8010ac2 <_dtoa_r+0x8f2>
 80109d2:	f1c0 0320 	rsb	r3, r0, #32
 80109d6:	2b04      	cmp	r3, #4
 80109d8:	dd6b      	ble.n	8010ab2 <_dtoa_r+0x8e2>
 80109da:	f1c0 001c 	rsb	r0, r0, #28
 80109de:	9b08      	ldr	r3, [sp, #32]
 80109e0:	4480      	add	r8, r0
 80109e2:	4403      	add	r3, r0
 80109e4:	4406      	add	r6, r0
 80109e6:	9308      	str	r3, [sp, #32]
 80109e8:	f1b8 0f00 	cmp.w	r8, #0
 80109ec:	dd05      	ble.n	80109fa <_dtoa_r+0x82a>
 80109ee:	4649      	mov	r1, r9
 80109f0:	4642      	mov	r2, r8
 80109f2:	4658      	mov	r0, fp
 80109f4:	f000 fcc0 	bl	8011378 <__lshift>
 80109f8:	4681      	mov	r9, r0
 80109fa:	9b08      	ldr	r3, [sp, #32]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	dd05      	ble.n	8010a0c <_dtoa_r+0x83c>
 8010a00:	4621      	mov	r1, r4
 8010a02:	461a      	mov	r2, r3
 8010a04:	4658      	mov	r0, fp
 8010a06:	f000 fcb7 	bl	8011378 <__lshift>
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d059      	beq.n	8010ac6 <_dtoa_r+0x8f6>
 8010a12:	4621      	mov	r1, r4
 8010a14:	4648      	mov	r0, r9
 8010a16:	f000 fd1b 	bl	8011450 <__mcmp>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	da53      	bge.n	8010ac6 <_dtoa_r+0x8f6>
 8010a1e:	1e7b      	subs	r3, r7, #1
 8010a20:	4649      	mov	r1, r9
 8010a22:	220a      	movs	r2, #10
 8010a24:	4658      	mov	r0, fp
 8010a26:	9304      	str	r3, [sp, #16]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	f000 faf7 	bl	801101c <__multadd>
 8010a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a30:	4681      	mov	r9, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 8172 	beq.w	8010d1c <_dtoa_r+0xb4c>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	4629      	mov	r1, r5
 8010a3c:	220a      	movs	r2, #10
 8010a3e:	4658      	mov	r0, fp
 8010a40:	f000 faec 	bl	801101c <__multadd>
 8010a44:	9b00      	ldr	r3, [sp, #0]
 8010a46:	4605      	mov	r5, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	dc67      	bgt.n	8010b1c <_dtoa_r+0x94c>
 8010a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	dc41      	bgt.n	8010ad6 <_dtoa_r+0x906>
 8010a52:	e063      	b.n	8010b1c <_dtoa_r+0x94c>
 8010a54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a5a:	e746      	b.n	80108ea <_dtoa_r+0x71a>
 8010a5c:	9b07      	ldr	r3, [sp, #28]
 8010a5e:	1e5c      	subs	r4, r3, #1
 8010a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a62:	42a3      	cmp	r3, r4
 8010a64:	bfb7      	itett	lt
 8010a66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a68:	1b1c      	subge	r4, r3, r4
 8010a6a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010a6c:	1ae3      	sublt	r3, r4, r3
 8010a6e:	bfbe      	ittt	lt
 8010a70:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010a72:	2400      	movlt	r4, #0
 8010a74:	18d2      	addlt	r2, r2, r3
 8010a76:	9b07      	ldr	r3, [sp, #28]
 8010a78:	bfb8      	it	lt
 8010a7a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfb5      	itete	lt
 8010a80:	eba8 0603 	sublt.w	r6, r8, r3
 8010a84:	4646      	movge	r6, r8
 8010a86:	2300      	movlt	r3, #0
 8010a88:	9b07      	ldrge	r3, [sp, #28]
 8010a8a:	e730      	b.n	80108ee <_dtoa_r+0x71e>
 8010a8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a8e:	4646      	mov	r6, r8
 8010a90:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010a92:	e735      	b.n	8010900 <_dtoa_r+0x730>
 8010a94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a96:	e75c      	b.n	8010952 <_dtoa_r+0x782>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	e788      	b.n	80109ae <_dtoa_r+0x7de>
 8010a9c:	3fe00000 	.word	0x3fe00000
 8010aa0:	40240000 	.word	0x40240000
 8010aa4:	40140000 	.word	0x40140000
 8010aa8:	9b02      	ldr	r3, [sp, #8]
 8010aaa:	e780      	b.n	80109ae <_dtoa_r+0x7de>
 8010aac:	2300      	movs	r3, #0
 8010aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ab0:	e782      	b.n	80109b8 <_dtoa_r+0x7e8>
 8010ab2:	d099      	beq.n	80109e8 <_dtoa_r+0x818>
 8010ab4:	331c      	adds	r3, #28
 8010ab6:	9a08      	ldr	r2, [sp, #32]
 8010ab8:	441a      	add	r2, r3
 8010aba:	4498      	add	r8, r3
 8010abc:	441e      	add	r6, r3
 8010abe:	9208      	str	r2, [sp, #32]
 8010ac0:	e792      	b.n	80109e8 <_dtoa_r+0x818>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	e7f6      	b.n	8010ab4 <_dtoa_r+0x8e4>
 8010ac6:	9b07      	ldr	r3, [sp, #28]
 8010ac8:	9704      	str	r7, [sp, #16]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dc20      	bgt.n	8010b10 <_dtoa_r+0x940>
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad2:	2b02      	cmp	r3, #2
 8010ad4:	dd1e      	ble.n	8010b14 <_dtoa_r+0x944>
 8010ad6:	9b00      	ldr	r3, [sp, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f47f aec0 	bne.w	801085e <_dtoa_r+0x68e>
 8010ade:	4621      	mov	r1, r4
 8010ae0:	2205      	movs	r2, #5
 8010ae2:	4658      	mov	r0, fp
 8010ae4:	f000 fa9a 	bl	801101c <__multadd>
 8010ae8:	4601      	mov	r1, r0
 8010aea:	4604      	mov	r4, r0
 8010aec:	4648      	mov	r0, r9
 8010aee:	f000 fcaf 	bl	8011450 <__mcmp>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	f77f aeb3 	ble.w	801085e <_dtoa_r+0x68e>
 8010af8:	2331      	movs	r3, #49	@ 0x31
 8010afa:	4656      	mov	r6, sl
 8010afc:	f806 3b01 	strb.w	r3, [r6], #1
 8010b00:	9b04      	ldr	r3, [sp, #16]
 8010b02:	3301      	adds	r3, #1
 8010b04:	9304      	str	r3, [sp, #16]
 8010b06:	e6ae      	b.n	8010866 <_dtoa_r+0x696>
 8010b08:	9c07      	ldr	r4, [sp, #28]
 8010b0a:	9704      	str	r7, [sp, #16]
 8010b0c:	4625      	mov	r5, r4
 8010b0e:	e7f3      	b.n	8010af8 <_dtoa_r+0x928>
 8010b10:	9b07      	ldr	r3, [sp, #28]
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 8104 	beq.w	8010d24 <_dtoa_r+0xb54>
 8010b1c:	2e00      	cmp	r6, #0
 8010b1e:	dd05      	ble.n	8010b2c <_dtoa_r+0x95c>
 8010b20:	4629      	mov	r1, r5
 8010b22:	4632      	mov	r2, r6
 8010b24:	4658      	mov	r0, fp
 8010b26:	f000 fc27 	bl	8011378 <__lshift>
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d05a      	beq.n	8010be8 <_dtoa_r+0xa18>
 8010b32:	6869      	ldr	r1, [r5, #4]
 8010b34:	4658      	mov	r0, fp
 8010b36:	f000 fa0f 	bl	8010f58 <_Balloc>
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	b928      	cbnz	r0, 8010b4a <_dtoa_r+0x97a>
 8010b3e:	4b84      	ldr	r3, [pc, #528]	@ (8010d50 <_dtoa_r+0xb80>)
 8010b40:	4602      	mov	r2, r0
 8010b42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b46:	f7ff bb5a 	b.w	80101fe <_dtoa_r+0x2e>
 8010b4a:	692a      	ldr	r2, [r5, #16]
 8010b4c:	f105 010c 	add.w	r1, r5, #12
 8010b50:	300c      	adds	r0, #12
 8010b52:	3202      	adds	r2, #2
 8010b54:	0092      	lsls	r2, r2, #2
 8010b56:	f7ff fa9e 	bl	8010096 <memcpy>
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	4631      	mov	r1, r6
 8010b5e:	4658      	mov	r0, fp
 8010b60:	f000 fc0a 	bl	8011378 <__lshift>
 8010b64:	f10a 0301 	add.w	r3, sl, #1
 8010b68:	462f      	mov	r7, r5
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	9307      	str	r3, [sp, #28]
 8010b6e:	9b00      	ldr	r3, [sp, #0]
 8010b70:	4453      	add	r3, sl
 8010b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b74:	9b02      	ldr	r3, [sp, #8]
 8010b76:	f003 0301 	and.w	r3, r3, #1
 8010b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b7c:	9b07      	ldr	r3, [sp, #28]
 8010b7e:	4621      	mov	r1, r4
 8010b80:	4648      	mov	r0, r9
 8010b82:	3b01      	subs	r3, #1
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	f7ff fa93 	bl	80100b0 <quorem>
 8010b8a:	4639      	mov	r1, r7
 8010b8c:	9002      	str	r0, [sp, #8]
 8010b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010b92:	4648      	mov	r0, r9
 8010b94:	f000 fc5c 	bl	8011450 <__mcmp>
 8010b98:	462a      	mov	r2, r5
 8010b9a:	9008      	str	r0, [sp, #32]
 8010b9c:	4621      	mov	r1, r4
 8010b9e:	4658      	mov	r0, fp
 8010ba0:	f000 fc72 	bl	8011488 <__mdiff>
 8010ba4:	68c2      	ldr	r2, [r0, #12]
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	bb02      	cbnz	r2, 8010bec <_dtoa_r+0xa1c>
 8010baa:	4601      	mov	r1, r0
 8010bac:	4648      	mov	r0, r9
 8010bae:	f000 fc4f 	bl	8011450 <__mcmp>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	4658      	mov	r0, fp
 8010bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8010bba:	f000 fa0d 	bl	8010fd8 <_Bfree>
 8010bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bc2:	9e07      	ldr	r6, [sp, #28]
 8010bc4:	ea43 0102 	orr.w	r1, r3, r2
 8010bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bca:	4319      	orrs	r1, r3
 8010bcc:	d110      	bne.n	8010bf0 <_dtoa_r+0xa20>
 8010bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010bd2:	d029      	beq.n	8010c28 <_dtoa_r+0xa58>
 8010bd4:	9b08      	ldr	r3, [sp, #32]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	dd02      	ble.n	8010be0 <_dtoa_r+0xa10>
 8010bda:	9b02      	ldr	r3, [sp, #8]
 8010bdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010be0:	9b00      	ldr	r3, [sp, #0]
 8010be2:	f883 8000 	strb.w	r8, [r3]
 8010be6:	e63f      	b.n	8010868 <_dtoa_r+0x698>
 8010be8:	4628      	mov	r0, r5
 8010bea:	e7bb      	b.n	8010b64 <_dtoa_r+0x994>
 8010bec:	2201      	movs	r2, #1
 8010bee:	e7e1      	b.n	8010bb4 <_dtoa_r+0x9e4>
 8010bf0:	9b08      	ldr	r3, [sp, #32]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	db04      	blt.n	8010c00 <_dtoa_r+0xa30>
 8010bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010bf8:	430b      	orrs	r3, r1
 8010bfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010bfc:	430b      	orrs	r3, r1
 8010bfe:	d120      	bne.n	8010c42 <_dtoa_r+0xa72>
 8010c00:	2a00      	cmp	r2, #0
 8010c02:	dded      	ble.n	8010be0 <_dtoa_r+0xa10>
 8010c04:	4649      	mov	r1, r9
 8010c06:	2201      	movs	r2, #1
 8010c08:	4658      	mov	r0, fp
 8010c0a:	f000 fbb5 	bl	8011378 <__lshift>
 8010c0e:	4621      	mov	r1, r4
 8010c10:	4681      	mov	r9, r0
 8010c12:	f000 fc1d 	bl	8011450 <__mcmp>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	dc03      	bgt.n	8010c22 <_dtoa_r+0xa52>
 8010c1a:	d1e1      	bne.n	8010be0 <_dtoa_r+0xa10>
 8010c1c:	f018 0f01 	tst.w	r8, #1
 8010c20:	d0de      	beq.n	8010be0 <_dtoa_r+0xa10>
 8010c22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c26:	d1d8      	bne.n	8010bda <_dtoa_r+0xa0a>
 8010c28:	2339      	movs	r3, #57	@ 0x39
 8010c2a:	9a00      	ldr	r2, [sp, #0]
 8010c2c:	7013      	strb	r3, [r2, #0]
 8010c2e:	4633      	mov	r3, r6
 8010c30:	461e      	mov	r6, r3
 8010c32:	3b01      	subs	r3, #1
 8010c34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c38:	2a39      	cmp	r2, #57	@ 0x39
 8010c3a:	d052      	beq.n	8010ce2 <_dtoa_r+0xb12>
 8010c3c:	3201      	adds	r2, #1
 8010c3e:	701a      	strb	r2, [r3, #0]
 8010c40:	e612      	b.n	8010868 <_dtoa_r+0x698>
 8010c42:	2a00      	cmp	r2, #0
 8010c44:	dd07      	ble.n	8010c56 <_dtoa_r+0xa86>
 8010c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c4a:	d0ed      	beq.n	8010c28 <_dtoa_r+0xa58>
 8010c4c:	f108 0301 	add.w	r3, r8, #1
 8010c50:	9a00      	ldr	r2, [sp, #0]
 8010c52:	7013      	strb	r3, [r2, #0]
 8010c54:	e608      	b.n	8010868 <_dtoa_r+0x698>
 8010c56:	9b07      	ldr	r3, [sp, #28]
 8010c58:	9a07      	ldr	r2, [sp, #28]
 8010c5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d028      	beq.n	8010cb6 <_dtoa_r+0xae6>
 8010c64:	4649      	mov	r1, r9
 8010c66:	2300      	movs	r3, #0
 8010c68:	220a      	movs	r2, #10
 8010c6a:	4658      	mov	r0, fp
 8010c6c:	f000 f9d6 	bl	801101c <__multadd>
 8010c70:	42af      	cmp	r7, r5
 8010c72:	4681      	mov	r9, r0
 8010c74:	f04f 0300 	mov.w	r3, #0
 8010c78:	f04f 020a 	mov.w	r2, #10
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	4658      	mov	r0, fp
 8010c80:	d107      	bne.n	8010c92 <_dtoa_r+0xac2>
 8010c82:	f000 f9cb 	bl	801101c <__multadd>
 8010c86:	4607      	mov	r7, r0
 8010c88:	4605      	mov	r5, r0
 8010c8a:	9b07      	ldr	r3, [sp, #28]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	9307      	str	r3, [sp, #28]
 8010c90:	e774      	b.n	8010b7c <_dtoa_r+0x9ac>
 8010c92:	f000 f9c3 	bl	801101c <__multadd>
 8010c96:	4629      	mov	r1, r5
 8010c98:	4607      	mov	r7, r0
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	220a      	movs	r2, #10
 8010c9e:	4658      	mov	r0, fp
 8010ca0:	f000 f9bc 	bl	801101c <__multadd>
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	e7f0      	b.n	8010c8a <_dtoa_r+0xaba>
 8010ca8:	9b00      	ldr	r3, [sp, #0]
 8010caa:	2700      	movs	r7, #0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	bfcc      	ite	gt
 8010cb0:	461e      	movgt	r6, r3
 8010cb2:	2601      	movle	r6, #1
 8010cb4:	4456      	add	r6, sl
 8010cb6:	4649      	mov	r1, r9
 8010cb8:	2201      	movs	r2, #1
 8010cba:	4658      	mov	r0, fp
 8010cbc:	f000 fb5c 	bl	8011378 <__lshift>
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	4681      	mov	r9, r0
 8010cc4:	f000 fbc4 	bl	8011450 <__mcmp>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	dcb0      	bgt.n	8010c2e <_dtoa_r+0xa5e>
 8010ccc:	d102      	bne.n	8010cd4 <_dtoa_r+0xb04>
 8010cce:	f018 0f01 	tst.w	r8, #1
 8010cd2:	d1ac      	bne.n	8010c2e <_dtoa_r+0xa5e>
 8010cd4:	4633      	mov	r3, r6
 8010cd6:	461e      	mov	r6, r3
 8010cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cdc:	2a30      	cmp	r2, #48	@ 0x30
 8010cde:	d0fa      	beq.n	8010cd6 <_dtoa_r+0xb06>
 8010ce0:	e5c2      	b.n	8010868 <_dtoa_r+0x698>
 8010ce2:	459a      	cmp	sl, r3
 8010ce4:	d1a4      	bne.n	8010c30 <_dtoa_r+0xa60>
 8010ce6:	9b04      	ldr	r3, [sp, #16]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	9304      	str	r3, [sp, #16]
 8010cec:	2331      	movs	r3, #49	@ 0x31
 8010cee:	f88a 3000 	strb.w	r3, [sl]
 8010cf2:	e5b9      	b.n	8010868 <_dtoa_r+0x698>
 8010cf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010cf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d54 <_dtoa_r+0xb84>
 8010cfa:	b11b      	cbz	r3, 8010d04 <_dtoa_r+0xb34>
 8010cfc:	f10a 0308 	add.w	r3, sl, #8
 8010d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d02:	6013      	str	r3, [r2, #0]
 8010d04:	4650      	mov	r0, sl
 8010d06:	b019      	add	sp, #100	@ 0x64
 8010d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	f77f ae37 	ble.w	8010982 <_dtoa_r+0x7b2>
 8010d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d18:	2001      	movs	r0, #1
 8010d1a:	e655      	b.n	80109c8 <_dtoa_r+0x7f8>
 8010d1c:	9b00      	ldr	r3, [sp, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f77f aed6 	ble.w	8010ad0 <_dtoa_r+0x900>
 8010d24:	4656      	mov	r6, sl
 8010d26:	4621      	mov	r1, r4
 8010d28:	4648      	mov	r0, r9
 8010d2a:	f7ff f9c1 	bl	80100b0 <quorem>
 8010d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010d32:	9b00      	ldr	r3, [sp, #0]
 8010d34:	f806 8b01 	strb.w	r8, [r6], #1
 8010d38:	eba6 020a 	sub.w	r2, r6, sl
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	ddb3      	ble.n	8010ca8 <_dtoa_r+0xad8>
 8010d40:	4649      	mov	r1, r9
 8010d42:	2300      	movs	r3, #0
 8010d44:	220a      	movs	r2, #10
 8010d46:	4658      	mov	r0, fp
 8010d48:	f000 f968 	bl	801101c <__multadd>
 8010d4c:	4681      	mov	r9, r0
 8010d4e:	e7ea      	b.n	8010d26 <_dtoa_r+0xb56>
 8010d50:	080125ec 	.word	0x080125ec
 8010d54:	08012570 	.word	0x08012570

08010d58 <_free_r>:
 8010d58:	b538      	push	{r3, r4, r5, lr}
 8010d5a:	4605      	mov	r5, r0
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	d041      	beq.n	8010de4 <_free_r+0x8c>
 8010d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d64:	1f0c      	subs	r4, r1, #4
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	bfb8      	it	lt
 8010d6a:	18e4      	addlt	r4, r4, r3
 8010d6c:	f000 f8e8 	bl	8010f40 <__malloc_lock>
 8010d70:	4a1d      	ldr	r2, [pc, #116]	@ (8010de8 <_free_r+0x90>)
 8010d72:	6813      	ldr	r3, [r2, #0]
 8010d74:	b933      	cbnz	r3, 8010d84 <_free_r+0x2c>
 8010d76:	6063      	str	r3, [r4, #4]
 8010d78:	6014      	str	r4, [r2, #0]
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d80:	f000 b8e4 	b.w	8010f4c <__malloc_unlock>
 8010d84:	42a3      	cmp	r3, r4
 8010d86:	d908      	bls.n	8010d9a <_free_r+0x42>
 8010d88:	6820      	ldr	r0, [r4, #0]
 8010d8a:	1821      	adds	r1, r4, r0
 8010d8c:	428b      	cmp	r3, r1
 8010d8e:	bf01      	itttt	eq
 8010d90:	6819      	ldreq	r1, [r3, #0]
 8010d92:	685b      	ldreq	r3, [r3, #4]
 8010d94:	1809      	addeq	r1, r1, r0
 8010d96:	6021      	streq	r1, [r4, #0]
 8010d98:	e7ed      	b.n	8010d76 <_free_r+0x1e>
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	b10b      	cbz	r3, 8010da4 <_free_r+0x4c>
 8010da0:	42a3      	cmp	r3, r4
 8010da2:	d9fa      	bls.n	8010d9a <_free_r+0x42>
 8010da4:	6811      	ldr	r1, [r2, #0]
 8010da6:	1850      	adds	r0, r2, r1
 8010da8:	42a0      	cmp	r0, r4
 8010daa:	d10b      	bne.n	8010dc4 <_free_r+0x6c>
 8010dac:	6820      	ldr	r0, [r4, #0]
 8010dae:	4401      	add	r1, r0
 8010db0:	1850      	adds	r0, r2, r1
 8010db2:	6011      	str	r1, [r2, #0]
 8010db4:	4283      	cmp	r3, r0
 8010db6:	d1e0      	bne.n	8010d7a <_free_r+0x22>
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	4408      	add	r0, r1
 8010dbe:	6053      	str	r3, [r2, #4]
 8010dc0:	6010      	str	r0, [r2, #0]
 8010dc2:	e7da      	b.n	8010d7a <_free_r+0x22>
 8010dc4:	d902      	bls.n	8010dcc <_free_r+0x74>
 8010dc6:	230c      	movs	r3, #12
 8010dc8:	602b      	str	r3, [r5, #0]
 8010dca:	e7d6      	b.n	8010d7a <_free_r+0x22>
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	1821      	adds	r1, r4, r0
 8010dd0:	428b      	cmp	r3, r1
 8010dd2:	bf02      	ittt	eq
 8010dd4:	6819      	ldreq	r1, [r3, #0]
 8010dd6:	685b      	ldreq	r3, [r3, #4]
 8010dd8:	1809      	addeq	r1, r1, r0
 8010dda:	6063      	str	r3, [r4, #4]
 8010ddc:	bf08      	it	eq
 8010dde:	6021      	streq	r1, [r4, #0]
 8010de0:	6054      	str	r4, [r2, #4]
 8010de2:	e7ca      	b.n	8010d7a <_free_r+0x22>
 8010de4:	bd38      	pop	{r3, r4, r5, pc}
 8010de6:	bf00      	nop
 8010de8:	20007d0c 	.word	0x20007d0c

08010dec <malloc>:
 8010dec:	4b02      	ldr	r3, [pc, #8]	@ (8010df8 <malloc+0xc>)
 8010dee:	4601      	mov	r1, r0
 8010df0:	6818      	ldr	r0, [r3, #0]
 8010df2:	f000 b825 	b.w	8010e40 <_malloc_r>
 8010df6:	bf00      	nop
 8010df8:	2000003c 	.word	0x2000003c

08010dfc <sbrk_aligned>:
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8010e3c <sbrk_aligned+0x40>)
 8010e00:	460c      	mov	r4, r1
 8010e02:	4605      	mov	r5, r0
 8010e04:	6831      	ldr	r1, [r6, #0]
 8010e06:	b911      	cbnz	r1, 8010e0e <sbrk_aligned+0x12>
 8010e08:	f000 fe4c 	bl	8011aa4 <_sbrk_r>
 8010e0c:	6030      	str	r0, [r6, #0]
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4628      	mov	r0, r5
 8010e12:	f000 fe47 	bl	8011aa4 <_sbrk_r>
 8010e16:	1c43      	adds	r3, r0, #1
 8010e18:	d103      	bne.n	8010e22 <sbrk_aligned+0x26>
 8010e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8010e1e:	4620      	mov	r0, r4
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	1cc4      	adds	r4, r0, #3
 8010e24:	f024 0403 	bic.w	r4, r4, #3
 8010e28:	42a0      	cmp	r0, r4
 8010e2a:	d0f8      	beq.n	8010e1e <sbrk_aligned+0x22>
 8010e2c:	1a21      	subs	r1, r4, r0
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f000 fe38 	bl	8011aa4 <_sbrk_r>
 8010e34:	3001      	adds	r0, #1
 8010e36:	d1f2      	bne.n	8010e1e <sbrk_aligned+0x22>
 8010e38:	e7ef      	b.n	8010e1a <sbrk_aligned+0x1e>
 8010e3a:	bf00      	nop
 8010e3c:	20007d08 	.word	0x20007d08

08010e40 <_malloc_r>:
 8010e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e44:	1ccd      	adds	r5, r1, #3
 8010e46:	4606      	mov	r6, r0
 8010e48:	f025 0503 	bic.w	r5, r5, #3
 8010e4c:	3508      	adds	r5, #8
 8010e4e:	2d0c      	cmp	r5, #12
 8010e50:	bf38      	it	cc
 8010e52:	250c      	movcc	r5, #12
 8010e54:	2d00      	cmp	r5, #0
 8010e56:	db01      	blt.n	8010e5c <_malloc_r+0x1c>
 8010e58:	42a9      	cmp	r1, r5
 8010e5a:	d904      	bls.n	8010e66 <_malloc_r+0x26>
 8010e5c:	230c      	movs	r3, #12
 8010e5e:	6033      	str	r3, [r6, #0]
 8010e60:	2000      	movs	r0, #0
 8010e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f3c <_malloc_r+0xfc>
 8010e6a:	f000 f869 	bl	8010f40 <__malloc_lock>
 8010e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8010e72:	461c      	mov	r4, r3
 8010e74:	bb44      	cbnz	r4, 8010ec8 <_malloc_r+0x88>
 8010e76:	4629      	mov	r1, r5
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f7ff ffbf 	bl	8010dfc <sbrk_aligned>
 8010e7e:	1c43      	adds	r3, r0, #1
 8010e80:	4604      	mov	r4, r0
 8010e82:	d158      	bne.n	8010f36 <_malloc_r+0xf6>
 8010e84:	f8d8 4000 	ldr.w	r4, [r8]
 8010e88:	4627      	mov	r7, r4
 8010e8a:	2f00      	cmp	r7, #0
 8010e8c:	d143      	bne.n	8010f16 <_malloc_r+0xd6>
 8010e8e:	2c00      	cmp	r4, #0
 8010e90:	d04b      	beq.n	8010f2a <_malloc_r+0xea>
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	4639      	mov	r1, r7
 8010e96:	4630      	mov	r0, r6
 8010e98:	eb04 0903 	add.w	r9, r4, r3
 8010e9c:	f000 fe02 	bl	8011aa4 <_sbrk_r>
 8010ea0:	4581      	cmp	r9, r0
 8010ea2:	d142      	bne.n	8010f2a <_malloc_r+0xea>
 8010ea4:	6821      	ldr	r1, [r4, #0]
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	1a6d      	subs	r5, r5, r1
 8010eaa:	4629      	mov	r1, r5
 8010eac:	f7ff ffa6 	bl	8010dfc <sbrk_aligned>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	d03a      	beq.n	8010f2a <_malloc_r+0xea>
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	442b      	add	r3, r5
 8010eb8:	6023      	str	r3, [r4, #0]
 8010eba:	f8d8 3000 	ldr.w	r3, [r8]
 8010ebe:	685a      	ldr	r2, [r3, #4]
 8010ec0:	bb62      	cbnz	r2, 8010f1c <_malloc_r+0xdc>
 8010ec2:	f8c8 7000 	str.w	r7, [r8]
 8010ec6:	e00f      	b.n	8010ee8 <_malloc_r+0xa8>
 8010ec8:	6822      	ldr	r2, [r4, #0]
 8010eca:	1b52      	subs	r2, r2, r5
 8010ecc:	d420      	bmi.n	8010f10 <_malloc_r+0xd0>
 8010ece:	2a0b      	cmp	r2, #11
 8010ed0:	d917      	bls.n	8010f02 <_malloc_r+0xc2>
 8010ed2:	1961      	adds	r1, r4, r5
 8010ed4:	42a3      	cmp	r3, r4
 8010ed6:	6025      	str	r5, [r4, #0]
 8010ed8:	bf18      	it	ne
 8010eda:	6059      	strne	r1, [r3, #4]
 8010edc:	6863      	ldr	r3, [r4, #4]
 8010ede:	bf08      	it	eq
 8010ee0:	f8c8 1000 	streq.w	r1, [r8]
 8010ee4:	5162      	str	r2, [r4, r5]
 8010ee6:	604b      	str	r3, [r1, #4]
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f000 f82f 	bl	8010f4c <__malloc_unlock>
 8010eee:	f104 000b 	add.w	r0, r4, #11
 8010ef2:	1d23      	adds	r3, r4, #4
 8010ef4:	f020 0007 	bic.w	r0, r0, #7
 8010ef8:	1ac2      	subs	r2, r0, r3
 8010efa:	bf1c      	itt	ne
 8010efc:	1a1b      	subne	r3, r3, r0
 8010efe:	50a3      	strne	r3, [r4, r2]
 8010f00:	e7af      	b.n	8010e62 <_malloc_r+0x22>
 8010f02:	6862      	ldr	r2, [r4, #4]
 8010f04:	42a3      	cmp	r3, r4
 8010f06:	bf0c      	ite	eq
 8010f08:	f8c8 2000 	streq.w	r2, [r8]
 8010f0c:	605a      	strne	r2, [r3, #4]
 8010f0e:	e7eb      	b.n	8010ee8 <_malloc_r+0xa8>
 8010f10:	4623      	mov	r3, r4
 8010f12:	6864      	ldr	r4, [r4, #4]
 8010f14:	e7ae      	b.n	8010e74 <_malloc_r+0x34>
 8010f16:	463c      	mov	r4, r7
 8010f18:	687f      	ldr	r7, [r7, #4]
 8010f1a:	e7b6      	b.n	8010e8a <_malloc_r+0x4a>
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	42a3      	cmp	r3, r4
 8010f22:	d1fb      	bne.n	8010f1c <_malloc_r+0xdc>
 8010f24:	2300      	movs	r3, #0
 8010f26:	6053      	str	r3, [r2, #4]
 8010f28:	e7de      	b.n	8010ee8 <_malloc_r+0xa8>
 8010f2a:	230c      	movs	r3, #12
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	6033      	str	r3, [r6, #0]
 8010f30:	f000 f80c 	bl	8010f4c <__malloc_unlock>
 8010f34:	e794      	b.n	8010e60 <_malloc_r+0x20>
 8010f36:	6005      	str	r5, [r0, #0]
 8010f38:	e7d6      	b.n	8010ee8 <_malloc_r+0xa8>
 8010f3a:	bf00      	nop
 8010f3c:	20007d0c 	.word	0x20007d0c

08010f40 <__malloc_lock>:
 8010f40:	4801      	ldr	r0, [pc, #4]	@ (8010f48 <__malloc_lock+0x8>)
 8010f42:	f7ff b898 	b.w	8010076 <__retarget_lock_acquire_recursive>
 8010f46:	bf00      	nop
 8010f48:	20007d04 	.word	0x20007d04

08010f4c <__malloc_unlock>:
 8010f4c:	4801      	ldr	r0, [pc, #4]	@ (8010f54 <__malloc_unlock+0x8>)
 8010f4e:	f7ff b893 	b.w	8010078 <__retarget_lock_release_recursive>
 8010f52:	bf00      	nop
 8010f54:	20007d04 	.word	0x20007d04

08010f58 <_Balloc>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	69c6      	ldr	r6, [r0, #28]
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	460d      	mov	r5, r1
 8010f60:	b976      	cbnz	r6, 8010f80 <_Balloc+0x28>
 8010f62:	2010      	movs	r0, #16
 8010f64:	f7ff ff42 	bl	8010dec <malloc>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	61e0      	str	r0, [r4, #28]
 8010f6c:	b920      	cbnz	r0, 8010f78 <_Balloc+0x20>
 8010f6e:	4b18      	ldr	r3, [pc, #96]	@ (8010fd0 <_Balloc+0x78>)
 8010f70:	216b      	movs	r1, #107	@ 0x6b
 8010f72:	4818      	ldr	r0, [pc, #96]	@ (8010fd4 <_Balloc+0x7c>)
 8010f74:	f000 fda6 	bl	8011ac4 <__assert_func>
 8010f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f7c:	6006      	str	r6, [r0, #0]
 8010f7e:	60c6      	str	r6, [r0, #12]
 8010f80:	69e6      	ldr	r6, [r4, #28]
 8010f82:	68f3      	ldr	r3, [r6, #12]
 8010f84:	b183      	cbz	r3, 8010fa8 <_Balloc+0x50>
 8010f86:	69e3      	ldr	r3, [r4, #28]
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f8e:	b9b8      	cbnz	r0, 8010fc0 <_Balloc+0x68>
 8010f90:	2101      	movs	r1, #1
 8010f92:	4620      	mov	r0, r4
 8010f94:	fa01 f605 	lsl.w	r6, r1, r5
 8010f98:	1d72      	adds	r2, r6, #5
 8010f9a:	0092      	lsls	r2, r2, #2
 8010f9c:	f000 fdb0 	bl	8011b00 <_calloc_r>
 8010fa0:	b160      	cbz	r0, 8010fbc <_Balloc+0x64>
 8010fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fa6:	e00e      	b.n	8010fc6 <_Balloc+0x6e>
 8010fa8:	2221      	movs	r2, #33	@ 0x21
 8010faa:	2104      	movs	r1, #4
 8010fac:	4620      	mov	r0, r4
 8010fae:	f000 fda7 	bl	8011b00 <_calloc_r>
 8010fb2:	69e3      	ldr	r3, [r4, #28]
 8010fb4:	60f0      	str	r0, [r6, #12]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1e4      	bne.n	8010f86 <_Balloc+0x2e>
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	bd70      	pop	{r4, r5, r6, pc}
 8010fc0:	6802      	ldr	r2, [r0, #0]
 8010fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fcc:	e7f7      	b.n	8010fbe <_Balloc+0x66>
 8010fce:	bf00      	nop
 8010fd0:	0801257d 	.word	0x0801257d
 8010fd4:	080125fd 	.word	0x080125fd

08010fd8 <_Bfree>:
 8010fd8:	b570      	push	{r4, r5, r6, lr}
 8010fda:	69c6      	ldr	r6, [r0, #28]
 8010fdc:	4605      	mov	r5, r0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	b976      	cbnz	r6, 8011000 <_Bfree+0x28>
 8010fe2:	2010      	movs	r0, #16
 8010fe4:	f7ff ff02 	bl	8010dec <malloc>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	61e8      	str	r0, [r5, #28]
 8010fec:	b920      	cbnz	r0, 8010ff8 <_Bfree+0x20>
 8010fee:	4b09      	ldr	r3, [pc, #36]	@ (8011014 <_Bfree+0x3c>)
 8010ff0:	218f      	movs	r1, #143	@ 0x8f
 8010ff2:	4809      	ldr	r0, [pc, #36]	@ (8011018 <_Bfree+0x40>)
 8010ff4:	f000 fd66 	bl	8011ac4 <__assert_func>
 8010ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ffc:	6006      	str	r6, [r0, #0]
 8010ffe:	60c6      	str	r6, [r0, #12]
 8011000:	b13c      	cbz	r4, 8011012 <_Bfree+0x3a>
 8011002:	69eb      	ldr	r3, [r5, #28]
 8011004:	6862      	ldr	r2, [r4, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801100c:	6021      	str	r1, [r4, #0]
 801100e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011012:	bd70      	pop	{r4, r5, r6, pc}
 8011014:	0801257d 	.word	0x0801257d
 8011018:	080125fd 	.word	0x080125fd

0801101c <__multadd>:
 801101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011020:	f101 0c14 	add.w	ip, r1, #20
 8011024:	4607      	mov	r7, r0
 8011026:	460c      	mov	r4, r1
 8011028:	461e      	mov	r6, r3
 801102a:	690d      	ldr	r5, [r1, #16]
 801102c:	2000      	movs	r0, #0
 801102e:	f8dc 3000 	ldr.w	r3, [ip]
 8011032:	3001      	adds	r0, #1
 8011034:	b299      	uxth	r1, r3
 8011036:	4285      	cmp	r5, r0
 8011038:	fb02 6101 	mla	r1, r2, r1, r6
 801103c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011040:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011044:	b289      	uxth	r1, r1
 8011046:	fb02 3306 	mla	r3, r2, r6, r3
 801104a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801104e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011052:	f84c 1b04 	str.w	r1, [ip], #4
 8011056:	dcea      	bgt.n	801102e <__multadd+0x12>
 8011058:	b30e      	cbz	r6, 801109e <__multadd+0x82>
 801105a:	68a3      	ldr	r3, [r4, #8]
 801105c:	42ab      	cmp	r3, r5
 801105e:	dc19      	bgt.n	8011094 <__multadd+0x78>
 8011060:	6861      	ldr	r1, [r4, #4]
 8011062:	4638      	mov	r0, r7
 8011064:	3101      	adds	r1, #1
 8011066:	f7ff ff77 	bl	8010f58 <_Balloc>
 801106a:	4680      	mov	r8, r0
 801106c:	b928      	cbnz	r0, 801107a <__multadd+0x5e>
 801106e:	4602      	mov	r2, r0
 8011070:	4b0c      	ldr	r3, [pc, #48]	@ (80110a4 <__multadd+0x88>)
 8011072:	21ba      	movs	r1, #186	@ 0xba
 8011074:	480c      	ldr	r0, [pc, #48]	@ (80110a8 <__multadd+0x8c>)
 8011076:	f000 fd25 	bl	8011ac4 <__assert_func>
 801107a:	6922      	ldr	r2, [r4, #16]
 801107c:	f104 010c 	add.w	r1, r4, #12
 8011080:	300c      	adds	r0, #12
 8011082:	3202      	adds	r2, #2
 8011084:	0092      	lsls	r2, r2, #2
 8011086:	f7ff f806 	bl	8010096 <memcpy>
 801108a:	4621      	mov	r1, r4
 801108c:	4644      	mov	r4, r8
 801108e:	4638      	mov	r0, r7
 8011090:	f7ff ffa2 	bl	8010fd8 <_Bfree>
 8011094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011098:	3501      	adds	r5, #1
 801109a:	615e      	str	r6, [r3, #20]
 801109c:	6125      	str	r5, [r4, #16]
 801109e:	4620      	mov	r0, r4
 80110a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a4:	080125ec 	.word	0x080125ec
 80110a8:	080125fd 	.word	0x080125fd

080110ac <__hi0bits>:
 80110ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80110b0:	4603      	mov	r3, r0
 80110b2:	bf36      	itet	cc
 80110b4:	0403      	lslcc	r3, r0, #16
 80110b6:	2000      	movcs	r0, #0
 80110b8:	2010      	movcc	r0, #16
 80110ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80110be:	bf3c      	itt	cc
 80110c0:	021b      	lslcc	r3, r3, #8
 80110c2:	3008      	addcc	r0, #8
 80110c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110c8:	bf3c      	itt	cc
 80110ca:	011b      	lslcc	r3, r3, #4
 80110cc:	3004      	addcc	r0, #4
 80110ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110d2:	bf3c      	itt	cc
 80110d4:	009b      	lslcc	r3, r3, #2
 80110d6:	3002      	addcc	r0, #2
 80110d8:	2b00      	cmp	r3, #0
 80110da:	db05      	blt.n	80110e8 <__hi0bits+0x3c>
 80110dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110e0:	f100 0001 	add.w	r0, r0, #1
 80110e4:	bf08      	it	eq
 80110e6:	2020      	moveq	r0, #32
 80110e8:	4770      	bx	lr

080110ea <__lo0bits>:
 80110ea:	6803      	ldr	r3, [r0, #0]
 80110ec:	4602      	mov	r2, r0
 80110ee:	f013 0007 	ands.w	r0, r3, #7
 80110f2:	d00b      	beq.n	801110c <__lo0bits+0x22>
 80110f4:	07d9      	lsls	r1, r3, #31
 80110f6:	d421      	bmi.n	801113c <__lo0bits+0x52>
 80110f8:	0798      	lsls	r0, r3, #30
 80110fa:	bf47      	ittee	mi
 80110fc:	085b      	lsrmi	r3, r3, #1
 80110fe:	2001      	movmi	r0, #1
 8011100:	089b      	lsrpl	r3, r3, #2
 8011102:	2002      	movpl	r0, #2
 8011104:	bf4c      	ite	mi
 8011106:	6013      	strmi	r3, [r2, #0]
 8011108:	6013      	strpl	r3, [r2, #0]
 801110a:	4770      	bx	lr
 801110c:	b299      	uxth	r1, r3
 801110e:	b909      	cbnz	r1, 8011114 <__lo0bits+0x2a>
 8011110:	0c1b      	lsrs	r3, r3, #16
 8011112:	2010      	movs	r0, #16
 8011114:	b2d9      	uxtb	r1, r3
 8011116:	b909      	cbnz	r1, 801111c <__lo0bits+0x32>
 8011118:	3008      	adds	r0, #8
 801111a:	0a1b      	lsrs	r3, r3, #8
 801111c:	0719      	lsls	r1, r3, #28
 801111e:	bf04      	itt	eq
 8011120:	091b      	lsreq	r3, r3, #4
 8011122:	3004      	addeq	r0, #4
 8011124:	0799      	lsls	r1, r3, #30
 8011126:	bf04      	itt	eq
 8011128:	089b      	lsreq	r3, r3, #2
 801112a:	3002      	addeq	r0, #2
 801112c:	07d9      	lsls	r1, r3, #31
 801112e:	d403      	bmi.n	8011138 <__lo0bits+0x4e>
 8011130:	085b      	lsrs	r3, r3, #1
 8011132:	f100 0001 	add.w	r0, r0, #1
 8011136:	d003      	beq.n	8011140 <__lo0bits+0x56>
 8011138:	6013      	str	r3, [r2, #0]
 801113a:	4770      	bx	lr
 801113c:	2000      	movs	r0, #0
 801113e:	4770      	bx	lr
 8011140:	2020      	movs	r0, #32
 8011142:	4770      	bx	lr

08011144 <__i2b>:
 8011144:	b510      	push	{r4, lr}
 8011146:	460c      	mov	r4, r1
 8011148:	2101      	movs	r1, #1
 801114a:	f7ff ff05 	bl	8010f58 <_Balloc>
 801114e:	4602      	mov	r2, r0
 8011150:	b928      	cbnz	r0, 801115e <__i2b+0x1a>
 8011152:	4b05      	ldr	r3, [pc, #20]	@ (8011168 <__i2b+0x24>)
 8011154:	f240 1145 	movw	r1, #325	@ 0x145
 8011158:	4804      	ldr	r0, [pc, #16]	@ (801116c <__i2b+0x28>)
 801115a:	f000 fcb3 	bl	8011ac4 <__assert_func>
 801115e:	2301      	movs	r3, #1
 8011160:	6144      	str	r4, [r0, #20]
 8011162:	6103      	str	r3, [r0, #16]
 8011164:	bd10      	pop	{r4, pc}
 8011166:	bf00      	nop
 8011168:	080125ec 	.word	0x080125ec
 801116c:	080125fd 	.word	0x080125fd

08011170 <__multiply>:
 8011170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011174:	4614      	mov	r4, r2
 8011176:	690a      	ldr	r2, [r1, #16]
 8011178:	460f      	mov	r7, r1
 801117a:	b085      	sub	sp, #20
 801117c:	6923      	ldr	r3, [r4, #16]
 801117e:	429a      	cmp	r2, r3
 8011180:	bfa2      	ittt	ge
 8011182:	4623      	movge	r3, r4
 8011184:	460c      	movge	r4, r1
 8011186:	461f      	movge	r7, r3
 8011188:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801118c:	68a3      	ldr	r3, [r4, #8]
 801118e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011192:	6861      	ldr	r1, [r4, #4]
 8011194:	eb0a 0609 	add.w	r6, sl, r9
 8011198:	42b3      	cmp	r3, r6
 801119a:	bfb8      	it	lt
 801119c:	3101      	addlt	r1, #1
 801119e:	f7ff fedb 	bl	8010f58 <_Balloc>
 80111a2:	b930      	cbnz	r0, 80111b2 <__multiply+0x42>
 80111a4:	4602      	mov	r2, r0
 80111a6:	4b45      	ldr	r3, [pc, #276]	@ (80112bc <__multiply+0x14c>)
 80111a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80111ac:	4844      	ldr	r0, [pc, #272]	@ (80112c0 <__multiply+0x150>)
 80111ae:	f000 fc89 	bl	8011ac4 <__assert_func>
 80111b2:	f100 0514 	add.w	r5, r0, #20
 80111b6:	2200      	movs	r2, #0
 80111b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80111bc:	462b      	mov	r3, r5
 80111be:	4543      	cmp	r3, r8
 80111c0:	d321      	bcc.n	8011206 <__multiply+0x96>
 80111c2:	f107 0114 	add.w	r1, r7, #20
 80111c6:	f104 0214 	add.w	r2, r4, #20
 80111ca:	f104 0715 	add.w	r7, r4, #21
 80111ce:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80111d2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80111d6:	9302      	str	r3, [sp, #8]
 80111d8:	1b13      	subs	r3, r2, r4
 80111da:	3b15      	subs	r3, #21
 80111dc:	f023 0303 	bic.w	r3, r3, #3
 80111e0:	3304      	adds	r3, #4
 80111e2:	42ba      	cmp	r2, r7
 80111e4:	bf38      	it	cc
 80111e6:	2304      	movcc	r3, #4
 80111e8:	9301      	str	r3, [sp, #4]
 80111ea:	9b02      	ldr	r3, [sp, #8]
 80111ec:	9103      	str	r1, [sp, #12]
 80111ee:	428b      	cmp	r3, r1
 80111f0:	d80c      	bhi.n	801120c <__multiply+0x9c>
 80111f2:	2e00      	cmp	r6, #0
 80111f4:	dd03      	ble.n	80111fe <__multiply+0x8e>
 80111f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d05b      	beq.n	80112b6 <__multiply+0x146>
 80111fe:	6106      	str	r6, [r0, #16]
 8011200:	b005      	add	sp, #20
 8011202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011206:	f843 2b04 	str.w	r2, [r3], #4
 801120a:	e7d8      	b.n	80111be <__multiply+0x4e>
 801120c:	f8b1 a000 	ldrh.w	sl, [r1]
 8011210:	f1ba 0f00 	cmp.w	sl, #0
 8011214:	d024      	beq.n	8011260 <__multiply+0xf0>
 8011216:	f104 0e14 	add.w	lr, r4, #20
 801121a:	46a9      	mov	r9, r5
 801121c:	f04f 0c00 	mov.w	ip, #0
 8011220:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011224:	f8d9 3000 	ldr.w	r3, [r9]
 8011228:	fa1f fb87 	uxth.w	fp, r7
 801122c:	4572      	cmp	r2, lr
 801122e:	b29b      	uxth	r3, r3
 8011230:	fb0a 330b 	mla	r3, sl, fp, r3
 8011234:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011238:	f8d9 7000 	ldr.w	r7, [r9]
 801123c:	4463      	add	r3, ip
 801123e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011242:	fb0a c70b 	mla	r7, sl, fp, ip
 8011246:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801124a:	b29b      	uxth	r3, r3
 801124c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011254:	f849 3b04 	str.w	r3, [r9], #4
 8011258:	d8e2      	bhi.n	8011220 <__multiply+0xb0>
 801125a:	9b01      	ldr	r3, [sp, #4]
 801125c:	f845 c003 	str.w	ip, [r5, r3]
 8011260:	9b03      	ldr	r3, [sp, #12]
 8011262:	3104      	adds	r1, #4
 8011264:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011268:	f1b9 0f00 	cmp.w	r9, #0
 801126c:	d021      	beq.n	80112b2 <__multiply+0x142>
 801126e:	682b      	ldr	r3, [r5, #0]
 8011270:	f104 0c14 	add.w	ip, r4, #20
 8011274:	46ae      	mov	lr, r5
 8011276:	f04f 0a00 	mov.w	sl, #0
 801127a:	f8bc b000 	ldrh.w	fp, [ip]
 801127e:	b29b      	uxth	r3, r3
 8011280:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011284:	fb09 770b 	mla	r7, r9, fp, r7
 8011288:	4457      	add	r7, sl
 801128a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801128e:	f84e 3b04 	str.w	r3, [lr], #4
 8011292:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801129a:	f8be 3000 	ldrh.w	r3, [lr]
 801129e:	4562      	cmp	r2, ip
 80112a0:	fb09 330a 	mla	r3, r9, sl, r3
 80112a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80112a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112ac:	d8e5      	bhi.n	801127a <__multiply+0x10a>
 80112ae:	9f01      	ldr	r7, [sp, #4]
 80112b0:	51eb      	str	r3, [r5, r7]
 80112b2:	3504      	adds	r5, #4
 80112b4:	e799      	b.n	80111ea <__multiply+0x7a>
 80112b6:	3e01      	subs	r6, #1
 80112b8:	e79b      	b.n	80111f2 <__multiply+0x82>
 80112ba:	bf00      	nop
 80112bc:	080125ec 	.word	0x080125ec
 80112c0:	080125fd 	.word	0x080125fd

080112c4 <__pow5mult>:
 80112c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112c8:	4615      	mov	r5, r2
 80112ca:	f012 0203 	ands.w	r2, r2, #3
 80112ce:	4607      	mov	r7, r0
 80112d0:	460e      	mov	r6, r1
 80112d2:	d007      	beq.n	80112e4 <__pow5mult+0x20>
 80112d4:	3a01      	subs	r2, #1
 80112d6:	4c25      	ldr	r4, [pc, #148]	@ (801136c <__pow5mult+0xa8>)
 80112d8:	2300      	movs	r3, #0
 80112da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112de:	f7ff fe9d 	bl	801101c <__multadd>
 80112e2:	4606      	mov	r6, r0
 80112e4:	10ad      	asrs	r5, r5, #2
 80112e6:	d03d      	beq.n	8011364 <__pow5mult+0xa0>
 80112e8:	69fc      	ldr	r4, [r7, #28]
 80112ea:	b97c      	cbnz	r4, 801130c <__pow5mult+0x48>
 80112ec:	2010      	movs	r0, #16
 80112ee:	f7ff fd7d 	bl	8010dec <malloc>
 80112f2:	4602      	mov	r2, r0
 80112f4:	61f8      	str	r0, [r7, #28]
 80112f6:	b928      	cbnz	r0, 8011304 <__pow5mult+0x40>
 80112f8:	4b1d      	ldr	r3, [pc, #116]	@ (8011370 <__pow5mult+0xac>)
 80112fa:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80112fe:	481d      	ldr	r0, [pc, #116]	@ (8011374 <__pow5mult+0xb0>)
 8011300:	f000 fbe0 	bl	8011ac4 <__assert_func>
 8011304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011308:	6004      	str	r4, [r0, #0]
 801130a:	60c4      	str	r4, [r0, #12]
 801130c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011314:	b94c      	cbnz	r4, 801132a <__pow5mult+0x66>
 8011316:	f240 2171 	movw	r1, #625	@ 0x271
 801131a:	4638      	mov	r0, r7
 801131c:	f7ff ff12 	bl	8011144 <__i2b>
 8011320:	2300      	movs	r3, #0
 8011322:	4604      	mov	r4, r0
 8011324:	f8c8 0008 	str.w	r0, [r8, #8]
 8011328:	6003      	str	r3, [r0, #0]
 801132a:	f04f 0900 	mov.w	r9, #0
 801132e:	07eb      	lsls	r3, r5, #31
 8011330:	d50a      	bpl.n	8011348 <__pow5mult+0x84>
 8011332:	4631      	mov	r1, r6
 8011334:	4622      	mov	r2, r4
 8011336:	4638      	mov	r0, r7
 8011338:	f7ff ff1a 	bl	8011170 <__multiply>
 801133c:	4680      	mov	r8, r0
 801133e:	4631      	mov	r1, r6
 8011340:	4638      	mov	r0, r7
 8011342:	4646      	mov	r6, r8
 8011344:	f7ff fe48 	bl	8010fd8 <_Bfree>
 8011348:	106d      	asrs	r5, r5, #1
 801134a:	d00b      	beq.n	8011364 <__pow5mult+0xa0>
 801134c:	6820      	ldr	r0, [r4, #0]
 801134e:	b938      	cbnz	r0, 8011360 <__pow5mult+0x9c>
 8011350:	4622      	mov	r2, r4
 8011352:	4621      	mov	r1, r4
 8011354:	4638      	mov	r0, r7
 8011356:	f7ff ff0b 	bl	8011170 <__multiply>
 801135a:	6020      	str	r0, [r4, #0]
 801135c:	f8c0 9000 	str.w	r9, [r0]
 8011360:	4604      	mov	r4, r0
 8011362:	e7e4      	b.n	801132e <__pow5mult+0x6a>
 8011364:	4630      	mov	r0, r6
 8011366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801136a:	bf00      	nop
 801136c:	08012658 	.word	0x08012658
 8011370:	0801257d 	.word	0x0801257d
 8011374:	080125fd 	.word	0x080125fd

08011378 <__lshift>:
 8011378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801137c:	460c      	mov	r4, r1
 801137e:	4607      	mov	r7, r0
 8011380:	4691      	mov	r9, r2
 8011382:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011386:	6923      	ldr	r3, [r4, #16]
 8011388:	6849      	ldr	r1, [r1, #4]
 801138a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801138e:	68a3      	ldr	r3, [r4, #8]
 8011390:	f108 0601 	add.w	r6, r8, #1
 8011394:	42b3      	cmp	r3, r6
 8011396:	db0b      	blt.n	80113b0 <__lshift+0x38>
 8011398:	4638      	mov	r0, r7
 801139a:	f7ff fddd 	bl	8010f58 <_Balloc>
 801139e:	4605      	mov	r5, r0
 80113a0:	b948      	cbnz	r0, 80113b6 <__lshift+0x3e>
 80113a2:	4602      	mov	r2, r0
 80113a4:	4b28      	ldr	r3, [pc, #160]	@ (8011448 <__lshift+0xd0>)
 80113a6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80113aa:	4828      	ldr	r0, [pc, #160]	@ (801144c <__lshift+0xd4>)
 80113ac:	f000 fb8a 	bl	8011ac4 <__assert_func>
 80113b0:	3101      	adds	r1, #1
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	e7ee      	b.n	8011394 <__lshift+0x1c>
 80113b6:	2300      	movs	r3, #0
 80113b8:	f100 0114 	add.w	r1, r0, #20
 80113bc:	f100 0210 	add.w	r2, r0, #16
 80113c0:	4618      	mov	r0, r3
 80113c2:	4553      	cmp	r3, sl
 80113c4:	db33      	blt.n	801142e <__lshift+0xb6>
 80113c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113ca:	f104 0314 	add.w	r3, r4, #20
 80113ce:	6920      	ldr	r0, [r4, #16]
 80113d0:	f019 091f 	ands.w	r9, r9, #31
 80113d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113dc:	d02b      	beq.n	8011436 <__lshift+0xbe>
 80113de:	f1c9 0e20 	rsb	lr, r9, #32
 80113e2:	468a      	mov	sl, r1
 80113e4:	2200      	movs	r2, #0
 80113e6:	6818      	ldr	r0, [r3, #0]
 80113e8:	fa00 f009 	lsl.w	r0, r0, r9
 80113ec:	4310      	orrs	r0, r2
 80113ee:	f84a 0b04 	str.w	r0, [sl], #4
 80113f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113f6:	459c      	cmp	ip, r3
 80113f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80113fc:	d8f3      	bhi.n	80113e6 <__lshift+0x6e>
 80113fe:	ebac 0304 	sub.w	r3, ip, r4
 8011402:	f104 0015 	add.w	r0, r4, #21
 8011406:	3b15      	subs	r3, #21
 8011408:	f023 0303 	bic.w	r3, r3, #3
 801140c:	3304      	adds	r3, #4
 801140e:	4584      	cmp	ip, r0
 8011410:	bf38      	it	cc
 8011412:	2304      	movcc	r3, #4
 8011414:	50ca      	str	r2, [r1, r3]
 8011416:	b10a      	cbz	r2, 801141c <__lshift+0xa4>
 8011418:	f108 0602 	add.w	r6, r8, #2
 801141c:	3e01      	subs	r6, #1
 801141e:	4638      	mov	r0, r7
 8011420:	4621      	mov	r1, r4
 8011422:	612e      	str	r6, [r5, #16]
 8011424:	f7ff fdd8 	bl	8010fd8 <_Bfree>
 8011428:	4628      	mov	r0, r5
 801142a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801142e:	3301      	adds	r3, #1
 8011430:	f842 0f04 	str.w	r0, [r2, #4]!
 8011434:	e7c5      	b.n	80113c2 <__lshift+0x4a>
 8011436:	3904      	subs	r1, #4
 8011438:	f853 2b04 	ldr.w	r2, [r3], #4
 801143c:	459c      	cmp	ip, r3
 801143e:	f841 2f04 	str.w	r2, [r1, #4]!
 8011442:	d8f9      	bhi.n	8011438 <__lshift+0xc0>
 8011444:	e7ea      	b.n	801141c <__lshift+0xa4>
 8011446:	bf00      	nop
 8011448:	080125ec 	.word	0x080125ec
 801144c:	080125fd 	.word	0x080125fd

08011450 <__mcmp>:
 8011450:	4603      	mov	r3, r0
 8011452:	690a      	ldr	r2, [r1, #16]
 8011454:	6900      	ldr	r0, [r0, #16]
 8011456:	1a80      	subs	r0, r0, r2
 8011458:	b530      	push	{r4, r5, lr}
 801145a:	d10e      	bne.n	801147a <__mcmp+0x2a>
 801145c:	3314      	adds	r3, #20
 801145e:	3114      	adds	r1, #20
 8011460:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011464:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801146c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011470:	4295      	cmp	r5, r2
 8011472:	d003      	beq.n	801147c <__mcmp+0x2c>
 8011474:	d205      	bcs.n	8011482 <__mcmp+0x32>
 8011476:	f04f 30ff 	mov.w	r0, #4294967295
 801147a:	bd30      	pop	{r4, r5, pc}
 801147c:	42a3      	cmp	r3, r4
 801147e:	d3f3      	bcc.n	8011468 <__mcmp+0x18>
 8011480:	e7fb      	b.n	801147a <__mcmp+0x2a>
 8011482:	2001      	movs	r0, #1
 8011484:	e7f9      	b.n	801147a <__mcmp+0x2a>
	...

08011488 <__mdiff>:
 8011488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148c:	4689      	mov	r9, r1
 801148e:	4606      	mov	r6, r0
 8011490:	4611      	mov	r1, r2
 8011492:	4614      	mov	r4, r2
 8011494:	4648      	mov	r0, r9
 8011496:	f7ff ffdb 	bl	8011450 <__mcmp>
 801149a:	1e05      	subs	r5, r0, #0
 801149c:	d112      	bne.n	80114c4 <__mdiff+0x3c>
 801149e:	4629      	mov	r1, r5
 80114a0:	4630      	mov	r0, r6
 80114a2:	f7ff fd59 	bl	8010f58 <_Balloc>
 80114a6:	4602      	mov	r2, r0
 80114a8:	b928      	cbnz	r0, 80114b6 <__mdiff+0x2e>
 80114aa:	4b41      	ldr	r3, [pc, #260]	@ (80115b0 <__mdiff+0x128>)
 80114ac:	f240 2137 	movw	r1, #567	@ 0x237
 80114b0:	4840      	ldr	r0, [pc, #256]	@ (80115b4 <__mdiff+0x12c>)
 80114b2:	f000 fb07 	bl	8011ac4 <__assert_func>
 80114b6:	2301      	movs	r3, #1
 80114b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114bc:	4610      	mov	r0, r2
 80114be:	b003      	add	sp, #12
 80114c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c4:	bfbc      	itt	lt
 80114c6:	464b      	movlt	r3, r9
 80114c8:	46a1      	movlt	r9, r4
 80114ca:	4630      	mov	r0, r6
 80114cc:	bfb8      	it	lt
 80114ce:	2501      	movlt	r5, #1
 80114d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114d4:	bfb4      	ite	lt
 80114d6:	461c      	movlt	r4, r3
 80114d8:	2500      	movge	r5, #0
 80114da:	f7ff fd3d 	bl	8010f58 <_Balloc>
 80114de:	4602      	mov	r2, r0
 80114e0:	b918      	cbnz	r0, 80114ea <__mdiff+0x62>
 80114e2:	4b33      	ldr	r3, [pc, #204]	@ (80115b0 <__mdiff+0x128>)
 80114e4:	f240 2145 	movw	r1, #581	@ 0x245
 80114e8:	e7e2      	b.n	80114b0 <__mdiff+0x28>
 80114ea:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114ee:	f104 0e14 	add.w	lr, r4, #20
 80114f2:	6926      	ldr	r6, [r4, #16]
 80114f4:	f100 0b14 	add.w	fp, r0, #20
 80114f8:	60c5      	str	r5, [r0, #12]
 80114fa:	f109 0514 	add.w	r5, r9, #20
 80114fe:	f109 0310 	add.w	r3, r9, #16
 8011502:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011506:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801150a:	46d9      	mov	r9, fp
 801150c:	f04f 0c00 	mov.w	ip, #0
 8011510:	9301      	str	r3, [sp, #4]
 8011512:	9b01      	ldr	r3, [sp, #4]
 8011514:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011518:	f853 af04 	ldr.w	sl, [r3, #4]!
 801151c:	4576      	cmp	r6, lr
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	fa1f f38a 	uxth.w	r3, sl
 8011524:	4619      	mov	r1, r3
 8011526:	b283      	uxth	r3, r0
 8011528:	ea4f 4010 	mov.w	r0, r0, lsr #16
 801152c:	eba1 0303 	sub.w	r3, r1, r3
 8011530:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011534:	4463      	add	r3, ip
 8011536:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801153a:	b29b      	uxth	r3, r3
 801153c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011544:	f849 3b04 	str.w	r3, [r9], #4
 8011548:	d8e3      	bhi.n	8011512 <__mdiff+0x8a>
 801154a:	1b33      	subs	r3, r6, r4
 801154c:	3415      	adds	r4, #21
 801154e:	3b15      	subs	r3, #21
 8011550:	f023 0303 	bic.w	r3, r3, #3
 8011554:	3304      	adds	r3, #4
 8011556:	42a6      	cmp	r6, r4
 8011558:	bf38      	it	cc
 801155a:	2304      	movcc	r3, #4
 801155c:	441d      	add	r5, r3
 801155e:	445b      	add	r3, fp
 8011560:	462c      	mov	r4, r5
 8011562:	461e      	mov	r6, r3
 8011564:	4544      	cmp	r4, r8
 8011566:	d30e      	bcc.n	8011586 <__mdiff+0xfe>
 8011568:	f108 0103 	add.w	r1, r8, #3
 801156c:	1b49      	subs	r1, r1, r5
 801156e:	3d03      	subs	r5, #3
 8011570:	f021 0103 	bic.w	r1, r1, #3
 8011574:	45a8      	cmp	r8, r5
 8011576:	bf38      	it	cc
 8011578:	2100      	movcc	r1, #0
 801157a:	440b      	add	r3, r1
 801157c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011580:	b199      	cbz	r1, 80115aa <__mdiff+0x122>
 8011582:	6117      	str	r7, [r2, #16]
 8011584:	e79a      	b.n	80114bc <__mdiff+0x34>
 8011586:	f854 1b04 	ldr.w	r1, [r4], #4
 801158a:	46e6      	mov	lr, ip
 801158c:	fa1f fc81 	uxth.w	ip, r1
 8011590:	0c08      	lsrs	r0, r1, #16
 8011592:	4471      	add	r1, lr
 8011594:	44f4      	add	ip, lr
 8011596:	b289      	uxth	r1, r1
 8011598:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801159c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80115a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115a4:	f846 1b04 	str.w	r1, [r6], #4
 80115a8:	e7dc      	b.n	8011564 <__mdiff+0xdc>
 80115aa:	3f01      	subs	r7, #1
 80115ac:	e7e6      	b.n	801157c <__mdiff+0xf4>
 80115ae:	bf00      	nop
 80115b0:	080125ec 	.word	0x080125ec
 80115b4:	080125fd 	.word	0x080125fd

080115b8 <__d2b>:
 80115b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115bc:	460f      	mov	r7, r1
 80115be:	2101      	movs	r1, #1
 80115c0:	4616      	mov	r6, r2
 80115c2:	ec59 8b10 	vmov	r8, r9, d0
 80115c6:	f7ff fcc7 	bl	8010f58 <_Balloc>
 80115ca:	4604      	mov	r4, r0
 80115cc:	b930      	cbnz	r0, 80115dc <__d2b+0x24>
 80115ce:	4602      	mov	r2, r0
 80115d0:	4b23      	ldr	r3, [pc, #140]	@ (8011660 <__d2b+0xa8>)
 80115d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80115d6:	4823      	ldr	r0, [pc, #140]	@ (8011664 <__d2b+0xac>)
 80115d8:	f000 fa74 	bl	8011ac4 <__assert_func>
 80115dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80115e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115e4:	b10d      	cbz	r5, 80115ea <__d2b+0x32>
 80115e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115ea:	9301      	str	r3, [sp, #4]
 80115ec:	f1b8 0300 	subs.w	r3, r8, #0
 80115f0:	d023      	beq.n	801163a <__d2b+0x82>
 80115f2:	4668      	mov	r0, sp
 80115f4:	9300      	str	r3, [sp, #0]
 80115f6:	f7ff fd78 	bl	80110ea <__lo0bits>
 80115fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115fe:	b1d0      	cbz	r0, 8011636 <__d2b+0x7e>
 8011600:	f1c0 0320 	rsb	r3, r0, #32
 8011604:	fa02 f303 	lsl.w	r3, r2, r3
 8011608:	40c2      	lsrs	r2, r0
 801160a:	430b      	orrs	r3, r1
 801160c:	9201      	str	r2, [sp, #4]
 801160e:	6163      	str	r3, [r4, #20]
 8011610:	9b01      	ldr	r3, [sp, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	61a3      	str	r3, [r4, #24]
 8011616:	bf0c      	ite	eq
 8011618:	2201      	moveq	r2, #1
 801161a:	2202      	movne	r2, #2
 801161c:	6122      	str	r2, [r4, #16]
 801161e:	b1a5      	cbz	r5, 801164a <__d2b+0x92>
 8011620:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011624:	4405      	add	r5, r0
 8011626:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801162a:	603d      	str	r5, [r7, #0]
 801162c:	6030      	str	r0, [r6, #0]
 801162e:	4620      	mov	r0, r4
 8011630:	b003      	add	sp, #12
 8011632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011636:	6161      	str	r1, [r4, #20]
 8011638:	e7ea      	b.n	8011610 <__d2b+0x58>
 801163a:	a801      	add	r0, sp, #4
 801163c:	f7ff fd55 	bl	80110ea <__lo0bits>
 8011640:	9b01      	ldr	r3, [sp, #4]
 8011642:	3020      	adds	r0, #32
 8011644:	2201      	movs	r2, #1
 8011646:	6163      	str	r3, [r4, #20]
 8011648:	e7e8      	b.n	801161c <__d2b+0x64>
 801164a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801164e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011652:	6038      	str	r0, [r7, #0]
 8011654:	6918      	ldr	r0, [r3, #16]
 8011656:	f7ff fd29 	bl	80110ac <__hi0bits>
 801165a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801165e:	e7e5      	b.n	801162c <__d2b+0x74>
 8011660:	080125ec 	.word	0x080125ec
 8011664:	080125fd 	.word	0x080125fd

08011668 <__ssputs_r>:
 8011668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	461f      	mov	r7, r3
 801166e:	688e      	ldr	r6, [r1, #8]
 8011670:	4682      	mov	sl, r0
 8011672:	460c      	mov	r4, r1
 8011674:	42be      	cmp	r6, r7
 8011676:	4690      	mov	r8, r2
 8011678:	680b      	ldr	r3, [r1, #0]
 801167a:	d82d      	bhi.n	80116d8 <__ssputs_r+0x70>
 801167c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011680:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011684:	d026      	beq.n	80116d4 <__ssputs_r+0x6c>
 8011686:	6965      	ldr	r5, [r4, #20]
 8011688:	6909      	ldr	r1, [r1, #16]
 801168a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801168e:	eba3 0901 	sub.w	r9, r3, r1
 8011692:	1c7b      	adds	r3, r7, #1
 8011694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011698:	444b      	add	r3, r9
 801169a:	106d      	asrs	r5, r5, #1
 801169c:	429d      	cmp	r5, r3
 801169e:	bf38      	it	cc
 80116a0:	461d      	movcc	r5, r3
 80116a2:	0553      	lsls	r3, r2, #21
 80116a4:	d527      	bpl.n	80116f6 <__ssputs_r+0x8e>
 80116a6:	4629      	mov	r1, r5
 80116a8:	f7ff fbca 	bl	8010e40 <_malloc_r>
 80116ac:	4606      	mov	r6, r0
 80116ae:	b360      	cbz	r0, 801170a <__ssputs_r+0xa2>
 80116b0:	464a      	mov	r2, r9
 80116b2:	6921      	ldr	r1, [r4, #16]
 80116b4:	f7fe fcef 	bl	8010096 <memcpy>
 80116b8:	89a3      	ldrh	r3, [r4, #12]
 80116ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80116be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116c2:	81a3      	strh	r3, [r4, #12]
 80116c4:	6126      	str	r6, [r4, #16]
 80116c6:	444e      	add	r6, r9
 80116c8:	6165      	str	r5, [r4, #20]
 80116ca:	eba5 0509 	sub.w	r5, r5, r9
 80116ce:	6026      	str	r6, [r4, #0]
 80116d0:	463e      	mov	r6, r7
 80116d2:	60a5      	str	r5, [r4, #8]
 80116d4:	42be      	cmp	r6, r7
 80116d6:	d900      	bls.n	80116da <__ssputs_r+0x72>
 80116d8:	463e      	mov	r6, r7
 80116da:	4632      	mov	r2, r6
 80116dc:	4641      	mov	r1, r8
 80116de:	6820      	ldr	r0, [r4, #0]
 80116e0:	f000 f9c6 	bl	8011a70 <memmove>
 80116e4:	68a3      	ldr	r3, [r4, #8]
 80116e6:	2000      	movs	r0, #0
 80116e8:	1b9b      	subs	r3, r3, r6
 80116ea:	60a3      	str	r3, [r4, #8]
 80116ec:	6823      	ldr	r3, [r4, #0]
 80116ee:	4433      	add	r3, r6
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116f6:	462a      	mov	r2, r5
 80116f8:	f000 fa28 	bl	8011b4c <_realloc_r>
 80116fc:	4606      	mov	r6, r0
 80116fe:	2800      	cmp	r0, #0
 8011700:	d1e0      	bne.n	80116c4 <__ssputs_r+0x5c>
 8011702:	6921      	ldr	r1, [r4, #16]
 8011704:	4650      	mov	r0, sl
 8011706:	f7ff fb27 	bl	8010d58 <_free_r>
 801170a:	230c      	movs	r3, #12
 801170c:	f04f 30ff 	mov.w	r0, #4294967295
 8011710:	f8ca 3000 	str.w	r3, [sl]
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801171a:	81a3      	strh	r3, [r4, #12]
 801171c:	e7e9      	b.n	80116f2 <__ssputs_r+0x8a>
	...

08011720 <_svfiprintf_r>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	4698      	mov	r8, r3
 8011726:	898b      	ldrh	r3, [r1, #12]
 8011728:	b09d      	sub	sp, #116	@ 0x74
 801172a:	4607      	mov	r7, r0
 801172c:	061b      	lsls	r3, r3, #24
 801172e:	460d      	mov	r5, r1
 8011730:	4614      	mov	r4, r2
 8011732:	d510      	bpl.n	8011756 <_svfiprintf_r+0x36>
 8011734:	690b      	ldr	r3, [r1, #16]
 8011736:	b973      	cbnz	r3, 8011756 <_svfiprintf_r+0x36>
 8011738:	2140      	movs	r1, #64	@ 0x40
 801173a:	f7ff fb81 	bl	8010e40 <_malloc_r>
 801173e:	6028      	str	r0, [r5, #0]
 8011740:	6128      	str	r0, [r5, #16]
 8011742:	b930      	cbnz	r0, 8011752 <_svfiprintf_r+0x32>
 8011744:	230c      	movs	r3, #12
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	f04f 30ff 	mov.w	r0, #4294967295
 801174c:	b01d      	add	sp, #116	@ 0x74
 801174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011752:	2340      	movs	r3, #64	@ 0x40
 8011754:	616b      	str	r3, [r5, #20]
 8011756:	2300      	movs	r3, #0
 8011758:	f8cd 800c 	str.w	r8, [sp, #12]
 801175c:	f04f 0901 	mov.w	r9, #1
 8011760:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8011904 <_svfiprintf_r+0x1e4>
 8011764:	9309      	str	r3, [sp, #36]	@ 0x24
 8011766:	2320      	movs	r3, #32
 8011768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801176c:	2330      	movs	r3, #48	@ 0x30
 801176e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011772:	4623      	mov	r3, r4
 8011774:	469a      	mov	sl, r3
 8011776:	f813 2b01 	ldrb.w	r2, [r3], #1
 801177a:	b10a      	cbz	r2, 8011780 <_svfiprintf_r+0x60>
 801177c:	2a25      	cmp	r2, #37	@ 0x25
 801177e:	d1f9      	bne.n	8011774 <_svfiprintf_r+0x54>
 8011780:	ebba 0b04 	subs.w	fp, sl, r4
 8011784:	d00b      	beq.n	801179e <_svfiprintf_r+0x7e>
 8011786:	465b      	mov	r3, fp
 8011788:	4622      	mov	r2, r4
 801178a:	4629      	mov	r1, r5
 801178c:	4638      	mov	r0, r7
 801178e:	f7ff ff6b 	bl	8011668 <__ssputs_r>
 8011792:	3001      	adds	r0, #1
 8011794:	f000 80a7 	beq.w	80118e6 <_svfiprintf_r+0x1c6>
 8011798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801179a:	445a      	add	r2, fp
 801179c:	9209      	str	r2, [sp, #36]	@ 0x24
 801179e:	f89a 3000 	ldrb.w	r3, [sl]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	f000 809f 	beq.w	80118e6 <_svfiprintf_r+0x1c6>
 80117a8:	2300      	movs	r3, #0
 80117aa:	f04f 32ff 	mov.w	r2, #4294967295
 80117ae:	f10a 0a01 	add.w	sl, sl, #1
 80117b2:	9304      	str	r3, [sp, #16]
 80117b4:	9307      	str	r3, [sp, #28]
 80117b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80117bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117c0:	4654      	mov	r4, sl
 80117c2:	2205      	movs	r2, #5
 80117c4:	484f      	ldr	r0, [pc, #316]	@ (8011904 <_svfiprintf_r+0x1e4>)
 80117c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ca:	f7fe fc56 	bl	801007a <memchr>
 80117ce:	9a04      	ldr	r2, [sp, #16]
 80117d0:	b9d8      	cbnz	r0, 801180a <_svfiprintf_r+0xea>
 80117d2:	06d0      	lsls	r0, r2, #27
 80117d4:	bf44      	itt	mi
 80117d6:	2320      	movmi	r3, #32
 80117d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117dc:	0711      	lsls	r1, r2, #28
 80117de:	bf44      	itt	mi
 80117e0:	232b      	movmi	r3, #43	@ 0x2b
 80117e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117e6:	f89a 3000 	ldrb.w	r3, [sl]
 80117ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80117ec:	d015      	beq.n	801181a <_svfiprintf_r+0xfa>
 80117ee:	9a07      	ldr	r2, [sp, #28]
 80117f0:	4654      	mov	r4, sl
 80117f2:	2000      	movs	r0, #0
 80117f4:	f04f 0c0a 	mov.w	ip, #10
 80117f8:	4621      	mov	r1, r4
 80117fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117fe:	3b30      	subs	r3, #48	@ 0x30
 8011800:	2b09      	cmp	r3, #9
 8011802:	d94b      	bls.n	801189c <_svfiprintf_r+0x17c>
 8011804:	b1b0      	cbz	r0, 8011834 <_svfiprintf_r+0x114>
 8011806:	9207      	str	r2, [sp, #28]
 8011808:	e014      	b.n	8011834 <_svfiprintf_r+0x114>
 801180a:	eba0 0308 	sub.w	r3, r0, r8
 801180e:	46a2      	mov	sl, r4
 8011810:	fa09 f303 	lsl.w	r3, r9, r3
 8011814:	4313      	orrs	r3, r2
 8011816:	9304      	str	r3, [sp, #16]
 8011818:	e7d2      	b.n	80117c0 <_svfiprintf_r+0xa0>
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	1d19      	adds	r1, r3, #4
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	9103      	str	r1, [sp, #12]
 8011824:	bfbb      	ittet	lt
 8011826:	425b      	neglt	r3, r3
 8011828:	f042 0202 	orrlt.w	r2, r2, #2
 801182c:	9307      	strge	r3, [sp, #28]
 801182e:	9307      	strlt	r3, [sp, #28]
 8011830:	bfb8      	it	lt
 8011832:	9204      	strlt	r2, [sp, #16]
 8011834:	7823      	ldrb	r3, [r4, #0]
 8011836:	2b2e      	cmp	r3, #46	@ 0x2e
 8011838:	d10a      	bne.n	8011850 <_svfiprintf_r+0x130>
 801183a:	7863      	ldrb	r3, [r4, #1]
 801183c:	2b2a      	cmp	r3, #42	@ 0x2a
 801183e:	d132      	bne.n	80118a6 <_svfiprintf_r+0x186>
 8011840:	9b03      	ldr	r3, [sp, #12]
 8011842:	3402      	adds	r4, #2
 8011844:	1d1a      	adds	r2, r3, #4
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801184c:	9203      	str	r2, [sp, #12]
 801184e:	9305      	str	r3, [sp, #20]
 8011850:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011914 <_svfiprintf_r+0x1f4>
 8011854:	2203      	movs	r2, #3
 8011856:	7821      	ldrb	r1, [r4, #0]
 8011858:	4650      	mov	r0, sl
 801185a:	f7fe fc0e 	bl	801007a <memchr>
 801185e:	b138      	cbz	r0, 8011870 <_svfiprintf_r+0x150>
 8011860:	eba0 000a 	sub.w	r0, r0, sl
 8011864:	2240      	movs	r2, #64	@ 0x40
 8011866:	9b04      	ldr	r3, [sp, #16]
 8011868:	3401      	adds	r4, #1
 801186a:	4082      	lsls	r2, r0
 801186c:	4313      	orrs	r3, r2
 801186e:	9304      	str	r3, [sp, #16]
 8011870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011874:	2206      	movs	r2, #6
 8011876:	4824      	ldr	r0, [pc, #144]	@ (8011908 <_svfiprintf_r+0x1e8>)
 8011878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801187c:	f7fe fbfd 	bl	801007a <memchr>
 8011880:	2800      	cmp	r0, #0
 8011882:	d036      	beq.n	80118f2 <_svfiprintf_r+0x1d2>
 8011884:	4b21      	ldr	r3, [pc, #132]	@ (801190c <_svfiprintf_r+0x1ec>)
 8011886:	bb1b      	cbnz	r3, 80118d0 <_svfiprintf_r+0x1b0>
 8011888:	9b03      	ldr	r3, [sp, #12]
 801188a:	3307      	adds	r3, #7
 801188c:	f023 0307 	bic.w	r3, r3, #7
 8011890:	3308      	adds	r3, #8
 8011892:	9303      	str	r3, [sp, #12]
 8011894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011896:	4433      	add	r3, r6
 8011898:	9309      	str	r3, [sp, #36]	@ 0x24
 801189a:	e76a      	b.n	8011772 <_svfiprintf_r+0x52>
 801189c:	fb0c 3202 	mla	r2, ip, r2, r3
 80118a0:	460c      	mov	r4, r1
 80118a2:	2001      	movs	r0, #1
 80118a4:	e7a8      	b.n	80117f8 <_svfiprintf_r+0xd8>
 80118a6:	2300      	movs	r3, #0
 80118a8:	3401      	adds	r4, #1
 80118aa:	f04f 0c0a 	mov.w	ip, #10
 80118ae:	4619      	mov	r1, r3
 80118b0:	9305      	str	r3, [sp, #20]
 80118b2:	4620      	mov	r0, r4
 80118b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118b8:	3a30      	subs	r2, #48	@ 0x30
 80118ba:	2a09      	cmp	r2, #9
 80118bc:	d903      	bls.n	80118c6 <_svfiprintf_r+0x1a6>
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0c6      	beq.n	8011850 <_svfiprintf_r+0x130>
 80118c2:	9105      	str	r1, [sp, #20]
 80118c4:	e7c4      	b.n	8011850 <_svfiprintf_r+0x130>
 80118c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80118ca:	4604      	mov	r4, r0
 80118cc:	2301      	movs	r3, #1
 80118ce:	e7f0      	b.n	80118b2 <_svfiprintf_r+0x192>
 80118d0:	ab03      	add	r3, sp, #12
 80118d2:	462a      	mov	r2, r5
 80118d4:	a904      	add	r1, sp, #16
 80118d6:	4638      	mov	r0, r7
 80118d8:	9300      	str	r3, [sp, #0]
 80118da:	4b0d      	ldr	r3, [pc, #52]	@ (8011910 <_svfiprintf_r+0x1f0>)
 80118dc:	f7fd fe5a 	bl	800f594 <_printf_float>
 80118e0:	1c42      	adds	r2, r0, #1
 80118e2:	4606      	mov	r6, r0
 80118e4:	d1d6      	bne.n	8011894 <_svfiprintf_r+0x174>
 80118e6:	89ab      	ldrh	r3, [r5, #12]
 80118e8:	065b      	lsls	r3, r3, #25
 80118ea:	f53f af2d 	bmi.w	8011748 <_svfiprintf_r+0x28>
 80118ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80118f0:	e72c      	b.n	801174c <_svfiprintf_r+0x2c>
 80118f2:	ab03      	add	r3, sp, #12
 80118f4:	462a      	mov	r2, r5
 80118f6:	a904      	add	r1, sp, #16
 80118f8:	4638      	mov	r0, r7
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	4b04      	ldr	r3, [pc, #16]	@ (8011910 <_svfiprintf_r+0x1f0>)
 80118fe:	f7fe f8e5 	bl	800facc <_printf_i>
 8011902:	e7ed      	b.n	80118e0 <_svfiprintf_r+0x1c0>
 8011904:	08012758 	.word	0x08012758
 8011908:	08012762 	.word	0x08012762
 801190c:	0800f595 	.word	0x0800f595
 8011910:	08011669 	.word	0x08011669
 8011914:	0801275e 	.word	0x0801275e

08011918 <__sflush_r>:
 8011918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011920:	0716      	lsls	r6, r2, #28
 8011922:	4605      	mov	r5, r0
 8011924:	460c      	mov	r4, r1
 8011926:	d454      	bmi.n	80119d2 <__sflush_r+0xba>
 8011928:	684b      	ldr	r3, [r1, #4]
 801192a:	2b00      	cmp	r3, #0
 801192c:	dc02      	bgt.n	8011934 <__sflush_r+0x1c>
 801192e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011930:	2b00      	cmp	r3, #0
 8011932:	dd48      	ble.n	80119c6 <__sflush_r+0xae>
 8011934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011936:	2e00      	cmp	r6, #0
 8011938:	d045      	beq.n	80119c6 <__sflush_r+0xae>
 801193a:	2300      	movs	r3, #0
 801193c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011940:	682f      	ldr	r7, [r5, #0]
 8011942:	6a21      	ldr	r1, [r4, #32]
 8011944:	602b      	str	r3, [r5, #0]
 8011946:	d030      	beq.n	80119aa <__sflush_r+0x92>
 8011948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	0759      	lsls	r1, r3, #29
 801194e:	d505      	bpl.n	801195c <__sflush_r+0x44>
 8011950:	6863      	ldr	r3, [r4, #4]
 8011952:	1ad2      	subs	r2, r2, r3
 8011954:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011956:	b10b      	cbz	r3, 801195c <__sflush_r+0x44>
 8011958:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801195a:	1ad2      	subs	r2, r2, r3
 801195c:	2300      	movs	r3, #0
 801195e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011960:	6a21      	ldr	r1, [r4, #32]
 8011962:	4628      	mov	r0, r5
 8011964:	47b0      	blx	r6
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	89a3      	ldrh	r3, [r4, #12]
 801196a:	d106      	bne.n	801197a <__sflush_r+0x62>
 801196c:	6829      	ldr	r1, [r5, #0]
 801196e:	291d      	cmp	r1, #29
 8011970:	d82b      	bhi.n	80119ca <__sflush_r+0xb2>
 8011972:	4a2a      	ldr	r2, [pc, #168]	@ (8011a1c <__sflush_r+0x104>)
 8011974:	410a      	asrs	r2, r1
 8011976:	07d6      	lsls	r6, r2, #31
 8011978:	d427      	bmi.n	80119ca <__sflush_r+0xb2>
 801197a:	2200      	movs	r2, #0
 801197c:	04d9      	lsls	r1, r3, #19
 801197e:	6062      	str	r2, [r4, #4]
 8011980:	6922      	ldr	r2, [r4, #16]
 8011982:	6022      	str	r2, [r4, #0]
 8011984:	d504      	bpl.n	8011990 <__sflush_r+0x78>
 8011986:	1c42      	adds	r2, r0, #1
 8011988:	d101      	bne.n	801198e <__sflush_r+0x76>
 801198a:	682b      	ldr	r3, [r5, #0]
 801198c:	b903      	cbnz	r3, 8011990 <__sflush_r+0x78>
 801198e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011992:	602f      	str	r7, [r5, #0]
 8011994:	b1b9      	cbz	r1, 80119c6 <__sflush_r+0xae>
 8011996:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801199a:	4299      	cmp	r1, r3
 801199c:	d002      	beq.n	80119a4 <__sflush_r+0x8c>
 801199e:	4628      	mov	r0, r5
 80119a0:	f7ff f9da 	bl	8010d58 <_free_r>
 80119a4:	2300      	movs	r3, #0
 80119a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80119a8:	e00d      	b.n	80119c6 <__sflush_r+0xae>
 80119aa:	2301      	movs	r3, #1
 80119ac:	4628      	mov	r0, r5
 80119ae:	47b0      	blx	r6
 80119b0:	4602      	mov	r2, r0
 80119b2:	1c50      	adds	r0, r2, #1
 80119b4:	d1c9      	bne.n	801194a <__sflush_r+0x32>
 80119b6:	682b      	ldr	r3, [r5, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d0c6      	beq.n	801194a <__sflush_r+0x32>
 80119bc:	2b1d      	cmp	r3, #29
 80119be:	d001      	beq.n	80119c4 <__sflush_r+0xac>
 80119c0:	2b16      	cmp	r3, #22
 80119c2:	d11d      	bne.n	8011a00 <__sflush_r+0xe8>
 80119c4:	602f      	str	r7, [r5, #0]
 80119c6:	2000      	movs	r0, #0
 80119c8:	e021      	b.n	8011a0e <__sflush_r+0xf6>
 80119ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119ce:	b21b      	sxth	r3, r3
 80119d0:	e01a      	b.n	8011a08 <__sflush_r+0xf0>
 80119d2:	690f      	ldr	r7, [r1, #16]
 80119d4:	2f00      	cmp	r7, #0
 80119d6:	d0f6      	beq.n	80119c6 <__sflush_r+0xae>
 80119d8:	0793      	lsls	r3, r2, #30
 80119da:	680e      	ldr	r6, [r1, #0]
 80119dc:	600f      	str	r7, [r1, #0]
 80119de:	bf0c      	ite	eq
 80119e0:	694b      	ldreq	r3, [r1, #20]
 80119e2:	2300      	movne	r3, #0
 80119e4:	eba6 0807 	sub.w	r8, r6, r7
 80119e8:	608b      	str	r3, [r1, #8]
 80119ea:	f1b8 0f00 	cmp.w	r8, #0
 80119ee:	ddea      	ble.n	80119c6 <__sflush_r+0xae>
 80119f0:	4643      	mov	r3, r8
 80119f2:	463a      	mov	r2, r7
 80119f4:	6a21      	ldr	r1, [r4, #32]
 80119f6:	4628      	mov	r0, r5
 80119f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80119fa:	47b0      	blx	r6
 80119fc:	2800      	cmp	r0, #0
 80119fe:	dc08      	bgt.n	8011a12 <__sflush_r+0xfa>
 8011a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a08:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0c:	81a3      	strh	r3, [r4, #12]
 8011a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a12:	4407      	add	r7, r0
 8011a14:	eba8 0800 	sub.w	r8, r8, r0
 8011a18:	e7e7      	b.n	80119ea <__sflush_r+0xd2>
 8011a1a:	bf00      	nop
 8011a1c:	dfbffffe 	.word	0xdfbffffe

08011a20 <_fflush_r>:
 8011a20:	b538      	push	{r3, r4, r5, lr}
 8011a22:	690b      	ldr	r3, [r1, #16]
 8011a24:	4605      	mov	r5, r0
 8011a26:	460c      	mov	r4, r1
 8011a28:	b913      	cbnz	r3, 8011a30 <_fflush_r+0x10>
 8011a2a:	2500      	movs	r5, #0
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	b118      	cbz	r0, 8011a3a <_fflush_r+0x1a>
 8011a32:	6a03      	ldr	r3, [r0, #32]
 8011a34:	b90b      	cbnz	r3, 8011a3a <_fflush_r+0x1a>
 8011a36:	f7fe f9f5 	bl	800fe24 <__sinit>
 8011a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d0f3      	beq.n	8011a2a <_fflush_r+0xa>
 8011a42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011a44:	07d0      	lsls	r0, r2, #31
 8011a46:	d404      	bmi.n	8011a52 <_fflush_r+0x32>
 8011a48:	0599      	lsls	r1, r3, #22
 8011a4a:	d402      	bmi.n	8011a52 <_fflush_r+0x32>
 8011a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a4e:	f7fe fb12 	bl	8010076 <__retarget_lock_acquire_recursive>
 8011a52:	4628      	mov	r0, r5
 8011a54:	4621      	mov	r1, r4
 8011a56:	f7ff ff5f 	bl	8011918 <__sflush_r>
 8011a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a5c:	4605      	mov	r5, r0
 8011a5e:	07da      	lsls	r2, r3, #31
 8011a60:	d4e4      	bmi.n	8011a2c <_fflush_r+0xc>
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	059b      	lsls	r3, r3, #22
 8011a66:	d4e1      	bmi.n	8011a2c <_fflush_r+0xc>
 8011a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a6a:	f7fe fb05 	bl	8010078 <__retarget_lock_release_recursive>
 8011a6e:	e7dd      	b.n	8011a2c <_fflush_r+0xc>

08011a70 <memmove>:
 8011a70:	4288      	cmp	r0, r1
 8011a72:	b510      	push	{r4, lr}
 8011a74:	eb01 0402 	add.w	r4, r1, r2
 8011a78:	d902      	bls.n	8011a80 <memmove+0x10>
 8011a7a:	4284      	cmp	r4, r0
 8011a7c:	4623      	mov	r3, r4
 8011a7e:	d807      	bhi.n	8011a90 <memmove+0x20>
 8011a80:	1e43      	subs	r3, r0, #1
 8011a82:	42a1      	cmp	r1, r4
 8011a84:	d008      	beq.n	8011a98 <memmove+0x28>
 8011a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a8e:	e7f8      	b.n	8011a82 <memmove+0x12>
 8011a90:	4402      	add	r2, r0
 8011a92:	4601      	mov	r1, r0
 8011a94:	428a      	cmp	r2, r1
 8011a96:	d100      	bne.n	8011a9a <memmove+0x2a>
 8011a98:	bd10      	pop	{r4, pc}
 8011a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011aa2:	e7f7      	b.n	8011a94 <memmove+0x24>

08011aa4 <_sbrk_r>:
 8011aa4:	b538      	push	{r3, r4, r5, lr}
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	4d05      	ldr	r5, [pc, #20]	@ (8011ac0 <_sbrk_r+0x1c>)
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4608      	mov	r0, r1
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	f7f2 fd26 	bl	8004500 <_sbrk>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_sbrk_r+0x1a>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_sbrk_r+0x1a>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	20007d00 	.word	0x20007d00

08011ac4 <__assert_func>:
 8011ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ac6:	4614      	mov	r4, r2
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4b09      	ldr	r3, [pc, #36]	@ (8011af0 <__assert_func+0x2c>)
 8011acc:	4605      	mov	r5, r0
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	68d8      	ldr	r0, [r3, #12]
 8011ad2:	b954      	cbnz	r4, 8011aea <__assert_func+0x26>
 8011ad4:	4b07      	ldr	r3, [pc, #28]	@ (8011af4 <__assert_func+0x30>)
 8011ad6:	461c      	mov	r4, r3
 8011ad8:	9100      	str	r1, [sp, #0]
 8011ada:	4907      	ldr	r1, [pc, #28]	@ (8011af8 <__assert_func+0x34>)
 8011adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ae0:	462b      	mov	r3, r5
 8011ae2:	f000 f86f 	bl	8011bc4 <fiprintf>
 8011ae6:	f000 f87f 	bl	8011be8 <abort>
 8011aea:	4b04      	ldr	r3, [pc, #16]	@ (8011afc <__assert_func+0x38>)
 8011aec:	e7f4      	b.n	8011ad8 <__assert_func+0x14>
 8011aee:	bf00      	nop
 8011af0:	2000003c 	.word	0x2000003c
 8011af4:	080127ae 	.word	0x080127ae
 8011af8:	08012780 	.word	0x08012780
 8011afc:	08012773 	.word	0x08012773

08011b00 <_calloc_r>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	fba1 5402 	umull	r5, r4, r1, r2
 8011b06:	b93c      	cbnz	r4, 8011b18 <_calloc_r+0x18>
 8011b08:	4629      	mov	r1, r5
 8011b0a:	f7ff f999 	bl	8010e40 <_malloc_r>
 8011b0e:	4606      	mov	r6, r0
 8011b10:	b928      	cbnz	r0, 8011b1e <_calloc_r+0x1e>
 8011b12:	2600      	movs	r6, #0
 8011b14:	4630      	mov	r0, r6
 8011b16:	bd70      	pop	{r4, r5, r6, pc}
 8011b18:	220c      	movs	r2, #12
 8011b1a:	6002      	str	r2, [r0, #0]
 8011b1c:	e7f9      	b.n	8011b12 <_calloc_r+0x12>
 8011b1e:	462a      	mov	r2, r5
 8011b20:	4621      	mov	r1, r4
 8011b22:	f7fe fa18 	bl	800ff56 <memset>
 8011b26:	e7f5      	b.n	8011b14 <_calloc_r+0x14>

08011b28 <__ascii_mbtowc>:
 8011b28:	b082      	sub	sp, #8
 8011b2a:	b901      	cbnz	r1, 8011b2e <__ascii_mbtowc+0x6>
 8011b2c:	a901      	add	r1, sp, #4
 8011b2e:	b142      	cbz	r2, 8011b42 <__ascii_mbtowc+0x1a>
 8011b30:	b14b      	cbz	r3, 8011b46 <__ascii_mbtowc+0x1e>
 8011b32:	7813      	ldrb	r3, [r2, #0]
 8011b34:	600b      	str	r3, [r1, #0]
 8011b36:	7812      	ldrb	r2, [r2, #0]
 8011b38:	1e10      	subs	r0, r2, #0
 8011b3a:	bf18      	it	ne
 8011b3c:	2001      	movne	r0, #1
 8011b3e:	b002      	add	sp, #8
 8011b40:	4770      	bx	lr
 8011b42:	4610      	mov	r0, r2
 8011b44:	e7fb      	b.n	8011b3e <__ascii_mbtowc+0x16>
 8011b46:	f06f 0001 	mvn.w	r0, #1
 8011b4a:	e7f8      	b.n	8011b3e <__ascii_mbtowc+0x16>

08011b4c <_realloc_r>:
 8011b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b50:	4680      	mov	r8, r0
 8011b52:	4615      	mov	r5, r2
 8011b54:	460c      	mov	r4, r1
 8011b56:	b921      	cbnz	r1, 8011b62 <_realloc_r+0x16>
 8011b58:	4611      	mov	r1, r2
 8011b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5e:	f7ff b96f 	b.w	8010e40 <_malloc_r>
 8011b62:	b92a      	cbnz	r2, 8011b70 <_realloc_r+0x24>
 8011b64:	f7ff f8f8 	bl	8010d58 <_free_r>
 8011b68:	2400      	movs	r4, #0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b70:	f000 f841 	bl	8011bf6 <_malloc_usable_size_r>
 8011b74:	4285      	cmp	r5, r0
 8011b76:	4606      	mov	r6, r0
 8011b78:	d802      	bhi.n	8011b80 <_realloc_r+0x34>
 8011b7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011b7e:	d8f4      	bhi.n	8011b6a <_realloc_r+0x1e>
 8011b80:	4629      	mov	r1, r5
 8011b82:	4640      	mov	r0, r8
 8011b84:	f7ff f95c 	bl	8010e40 <_malloc_r>
 8011b88:	4607      	mov	r7, r0
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d0ec      	beq.n	8011b68 <_realloc_r+0x1c>
 8011b8e:	42b5      	cmp	r5, r6
 8011b90:	462a      	mov	r2, r5
 8011b92:	4621      	mov	r1, r4
 8011b94:	bf28      	it	cs
 8011b96:	4632      	movcs	r2, r6
 8011b98:	f7fe fa7d 	bl	8010096 <memcpy>
 8011b9c:	4621      	mov	r1, r4
 8011b9e:	4640      	mov	r0, r8
 8011ba0:	463c      	mov	r4, r7
 8011ba2:	f7ff f8d9 	bl	8010d58 <_free_r>
 8011ba6:	e7e0      	b.n	8011b6a <_realloc_r+0x1e>

08011ba8 <__ascii_wctomb>:
 8011ba8:	4603      	mov	r3, r0
 8011baa:	4608      	mov	r0, r1
 8011bac:	b141      	cbz	r1, 8011bc0 <__ascii_wctomb+0x18>
 8011bae:	2aff      	cmp	r2, #255	@ 0xff
 8011bb0:	d904      	bls.n	8011bbc <__ascii_wctomb+0x14>
 8011bb2:	228a      	movs	r2, #138	@ 0x8a
 8011bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	4770      	bx	lr
 8011bbc:	2001      	movs	r0, #1
 8011bbe:	700a      	strb	r2, [r1, #0]
 8011bc0:	4770      	bx	lr
	...

08011bc4 <fiprintf>:
 8011bc4:	b40e      	push	{r1, r2, r3}
 8011bc6:	b503      	push	{r0, r1, lr}
 8011bc8:	ab03      	add	r3, sp, #12
 8011bca:	4601      	mov	r1, r0
 8011bcc:	4805      	ldr	r0, [pc, #20]	@ (8011be4 <fiprintf+0x20>)
 8011bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bd2:	6800      	ldr	r0, [r0, #0]
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	f000 f83f 	bl	8011c58 <_vfiprintf_r>
 8011bda:	b002      	add	sp, #8
 8011bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be0:	b003      	add	sp, #12
 8011be2:	4770      	bx	lr
 8011be4:	2000003c 	.word	0x2000003c

08011be8 <abort>:
 8011be8:	2006      	movs	r0, #6
 8011bea:	b508      	push	{r3, lr}
 8011bec:	f000 fa08 	bl	8012000 <raise>
 8011bf0:	2001      	movs	r0, #1
 8011bf2:	f7f2 fc0d 	bl	8004410 <_exit>

08011bf6 <_malloc_usable_size_r>:
 8011bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bfa:	1f18      	subs	r0, r3, #4
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	bfbc      	itt	lt
 8011c00:	580b      	ldrlt	r3, [r1, r0]
 8011c02:	18c0      	addlt	r0, r0, r3
 8011c04:	4770      	bx	lr

08011c06 <__sfputc_r>:
 8011c06:	6893      	ldr	r3, [r2, #8]
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	6093      	str	r3, [r2, #8]
 8011c0e:	b410      	push	{r4}
 8011c10:	da08      	bge.n	8011c24 <__sfputc_r+0x1e>
 8011c12:	6994      	ldr	r4, [r2, #24]
 8011c14:	42a3      	cmp	r3, r4
 8011c16:	db01      	blt.n	8011c1c <__sfputc_r+0x16>
 8011c18:	290a      	cmp	r1, #10
 8011c1a:	d103      	bne.n	8011c24 <__sfputc_r+0x1e>
 8011c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c20:	f000 b932 	b.w	8011e88 <__swbuf_r>
 8011c24:	6813      	ldr	r3, [r2, #0]
 8011c26:	1c58      	adds	r0, r3, #1
 8011c28:	6010      	str	r0, [r2, #0]
 8011c2a:	4608      	mov	r0, r1
 8011c2c:	7019      	strb	r1, [r3, #0]
 8011c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <__sfputs_r>:
 8011c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c36:	4606      	mov	r6, r0
 8011c38:	460f      	mov	r7, r1
 8011c3a:	4614      	mov	r4, r2
 8011c3c:	18d5      	adds	r5, r2, r3
 8011c3e:	42ac      	cmp	r4, r5
 8011c40:	d101      	bne.n	8011c46 <__sfputs_r+0x12>
 8011c42:	2000      	movs	r0, #0
 8011c44:	e007      	b.n	8011c56 <__sfputs_r+0x22>
 8011c46:	463a      	mov	r2, r7
 8011c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c4c:	4630      	mov	r0, r6
 8011c4e:	f7ff ffda 	bl	8011c06 <__sfputc_r>
 8011c52:	1c43      	adds	r3, r0, #1
 8011c54:	d1f3      	bne.n	8011c3e <__sfputs_r+0xa>
 8011c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c58 <_vfiprintf_r>:
 8011c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5c:	460d      	mov	r5, r1
 8011c5e:	b09d      	sub	sp, #116	@ 0x74
 8011c60:	4614      	mov	r4, r2
 8011c62:	4698      	mov	r8, r3
 8011c64:	4606      	mov	r6, r0
 8011c66:	b118      	cbz	r0, 8011c70 <_vfiprintf_r+0x18>
 8011c68:	6a03      	ldr	r3, [r0, #32]
 8011c6a:	b90b      	cbnz	r3, 8011c70 <_vfiprintf_r+0x18>
 8011c6c:	f7fe f8da 	bl	800fe24 <__sinit>
 8011c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c72:	07d9      	lsls	r1, r3, #31
 8011c74:	d405      	bmi.n	8011c82 <_vfiprintf_r+0x2a>
 8011c76:	89ab      	ldrh	r3, [r5, #12]
 8011c78:	059a      	lsls	r2, r3, #22
 8011c7a:	d402      	bmi.n	8011c82 <_vfiprintf_r+0x2a>
 8011c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c7e:	f7fe f9fa 	bl	8010076 <__retarget_lock_acquire_recursive>
 8011c82:	89ab      	ldrh	r3, [r5, #12]
 8011c84:	071b      	lsls	r3, r3, #28
 8011c86:	d501      	bpl.n	8011c8c <_vfiprintf_r+0x34>
 8011c88:	692b      	ldr	r3, [r5, #16]
 8011c8a:	b99b      	cbnz	r3, 8011cb4 <_vfiprintf_r+0x5c>
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f000 f938 	bl	8011f04 <__swsetup_r>
 8011c94:	b170      	cbz	r0, 8011cb4 <_vfiprintf_r+0x5c>
 8011c96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c98:	07dc      	lsls	r4, r3, #31
 8011c9a:	d504      	bpl.n	8011ca6 <_vfiprintf_r+0x4e>
 8011c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca0:	b01d      	add	sp, #116	@ 0x74
 8011ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca6:	89ab      	ldrh	r3, [r5, #12]
 8011ca8:	0598      	lsls	r0, r3, #22
 8011caa:	d4f7      	bmi.n	8011c9c <_vfiprintf_r+0x44>
 8011cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cae:	f7fe f9e3 	bl	8010078 <__retarget_lock_release_recursive>
 8011cb2:	e7f3      	b.n	8011c9c <_vfiprintf_r+0x44>
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cba:	f04f 0901 	mov.w	r9, #1
 8011cbe:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011e74 <_vfiprintf_r+0x21c>
 8011cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cc4:	2320      	movs	r3, #32
 8011cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cca:	2330      	movs	r3, #48	@ 0x30
 8011ccc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cd0:	4623      	mov	r3, r4
 8011cd2:	469a      	mov	sl, r3
 8011cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cd8:	b10a      	cbz	r2, 8011cde <_vfiprintf_r+0x86>
 8011cda:	2a25      	cmp	r2, #37	@ 0x25
 8011cdc:	d1f9      	bne.n	8011cd2 <_vfiprintf_r+0x7a>
 8011cde:	ebba 0b04 	subs.w	fp, sl, r4
 8011ce2:	d00b      	beq.n	8011cfc <_vfiprintf_r+0xa4>
 8011ce4:	465b      	mov	r3, fp
 8011ce6:	4622      	mov	r2, r4
 8011ce8:	4629      	mov	r1, r5
 8011cea:	4630      	mov	r0, r6
 8011cec:	f7ff ffa2 	bl	8011c34 <__sfputs_r>
 8011cf0:	3001      	adds	r0, #1
 8011cf2:	f000 80a7 	beq.w	8011e44 <_vfiprintf_r+0x1ec>
 8011cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cf8:	445a      	add	r2, fp
 8011cfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	f000 809f 	beq.w	8011e44 <_vfiprintf_r+0x1ec>
 8011d06:	2300      	movs	r3, #0
 8011d08:	f04f 32ff 	mov.w	r2, #4294967295
 8011d0c:	f10a 0a01 	add.w	sl, sl, #1
 8011d10:	9304      	str	r3, [sp, #16]
 8011d12:	9307      	str	r3, [sp, #28]
 8011d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d1e:	4654      	mov	r4, sl
 8011d20:	2205      	movs	r2, #5
 8011d22:	4854      	ldr	r0, [pc, #336]	@ (8011e74 <_vfiprintf_r+0x21c>)
 8011d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d28:	f7fe f9a7 	bl	801007a <memchr>
 8011d2c:	9a04      	ldr	r2, [sp, #16]
 8011d2e:	b9d8      	cbnz	r0, 8011d68 <_vfiprintf_r+0x110>
 8011d30:	06d1      	lsls	r1, r2, #27
 8011d32:	bf44      	itt	mi
 8011d34:	2320      	movmi	r3, #32
 8011d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d3a:	0713      	lsls	r3, r2, #28
 8011d3c:	bf44      	itt	mi
 8011d3e:	232b      	movmi	r3, #43	@ 0x2b
 8011d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d44:	f89a 3000 	ldrb.w	r3, [sl]
 8011d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d4a:	d015      	beq.n	8011d78 <_vfiprintf_r+0x120>
 8011d4c:	9a07      	ldr	r2, [sp, #28]
 8011d4e:	4654      	mov	r4, sl
 8011d50:	2000      	movs	r0, #0
 8011d52:	f04f 0c0a 	mov.w	ip, #10
 8011d56:	4621      	mov	r1, r4
 8011d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d5c:	3b30      	subs	r3, #48	@ 0x30
 8011d5e:	2b09      	cmp	r3, #9
 8011d60:	d94b      	bls.n	8011dfa <_vfiprintf_r+0x1a2>
 8011d62:	b1b0      	cbz	r0, 8011d92 <_vfiprintf_r+0x13a>
 8011d64:	9207      	str	r2, [sp, #28]
 8011d66:	e014      	b.n	8011d92 <_vfiprintf_r+0x13a>
 8011d68:	eba0 0308 	sub.w	r3, r0, r8
 8011d6c:	46a2      	mov	sl, r4
 8011d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8011d72:	4313      	orrs	r3, r2
 8011d74:	9304      	str	r3, [sp, #16]
 8011d76:	e7d2      	b.n	8011d1e <_vfiprintf_r+0xc6>
 8011d78:	9b03      	ldr	r3, [sp, #12]
 8011d7a:	1d19      	adds	r1, r3, #4
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	9103      	str	r1, [sp, #12]
 8011d82:	bfbb      	ittet	lt
 8011d84:	425b      	neglt	r3, r3
 8011d86:	f042 0202 	orrlt.w	r2, r2, #2
 8011d8a:	9307      	strge	r3, [sp, #28]
 8011d8c:	9307      	strlt	r3, [sp, #28]
 8011d8e:	bfb8      	it	lt
 8011d90:	9204      	strlt	r2, [sp, #16]
 8011d92:	7823      	ldrb	r3, [r4, #0]
 8011d94:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d96:	d10a      	bne.n	8011dae <_vfiprintf_r+0x156>
 8011d98:	7863      	ldrb	r3, [r4, #1]
 8011d9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d9c:	d132      	bne.n	8011e04 <_vfiprintf_r+0x1ac>
 8011d9e:	9b03      	ldr	r3, [sp, #12]
 8011da0:	3402      	adds	r4, #2
 8011da2:	1d1a      	adds	r2, r3, #4
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011daa:	9203      	str	r2, [sp, #12]
 8011dac:	9305      	str	r3, [sp, #20]
 8011dae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e84 <_vfiprintf_r+0x22c>
 8011db2:	2203      	movs	r2, #3
 8011db4:	7821      	ldrb	r1, [r4, #0]
 8011db6:	4650      	mov	r0, sl
 8011db8:	f7fe f95f 	bl	801007a <memchr>
 8011dbc:	b138      	cbz	r0, 8011dce <_vfiprintf_r+0x176>
 8011dbe:	eba0 000a 	sub.w	r0, r0, sl
 8011dc2:	2240      	movs	r2, #64	@ 0x40
 8011dc4:	9b04      	ldr	r3, [sp, #16]
 8011dc6:	3401      	adds	r4, #1
 8011dc8:	4082      	lsls	r2, r0
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	9304      	str	r3, [sp, #16]
 8011dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd2:	2206      	movs	r2, #6
 8011dd4:	4828      	ldr	r0, [pc, #160]	@ (8011e78 <_vfiprintf_r+0x220>)
 8011dd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dda:	f7fe f94e 	bl	801007a <memchr>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d03f      	beq.n	8011e62 <_vfiprintf_r+0x20a>
 8011de2:	4b26      	ldr	r3, [pc, #152]	@ (8011e7c <_vfiprintf_r+0x224>)
 8011de4:	bb1b      	cbnz	r3, 8011e2e <_vfiprintf_r+0x1d6>
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	3307      	adds	r3, #7
 8011dea:	f023 0307 	bic.w	r3, r3, #7
 8011dee:	3308      	adds	r3, #8
 8011df0:	9303      	str	r3, [sp, #12]
 8011df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011df4:	443b      	add	r3, r7
 8011df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011df8:	e76a      	b.n	8011cd0 <_vfiprintf_r+0x78>
 8011dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dfe:	460c      	mov	r4, r1
 8011e00:	2001      	movs	r0, #1
 8011e02:	e7a8      	b.n	8011d56 <_vfiprintf_r+0xfe>
 8011e04:	2300      	movs	r3, #0
 8011e06:	3401      	adds	r4, #1
 8011e08:	f04f 0c0a 	mov.w	ip, #10
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	9305      	str	r3, [sp, #20]
 8011e10:	4620      	mov	r0, r4
 8011e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e16:	3a30      	subs	r2, #48	@ 0x30
 8011e18:	2a09      	cmp	r2, #9
 8011e1a:	d903      	bls.n	8011e24 <_vfiprintf_r+0x1cc>
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d0c6      	beq.n	8011dae <_vfiprintf_r+0x156>
 8011e20:	9105      	str	r1, [sp, #20]
 8011e22:	e7c4      	b.n	8011dae <_vfiprintf_r+0x156>
 8011e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e28:	4604      	mov	r4, r0
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e7f0      	b.n	8011e10 <_vfiprintf_r+0x1b8>
 8011e2e:	ab03      	add	r3, sp, #12
 8011e30:	462a      	mov	r2, r5
 8011e32:	a904      	add	r1, sp, #16
 8011e34:	4630      	mov	r0, r6
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	4b11      	ldr	r3, [pc, #68]	@ (8011e80 <_vfiprintf_r+0x228>)
 8011e3a:	f7fd fbab 	bl	800f594 <_printf_float>
 8011e3e:	4607      	mov	r7, r0
 8011e40:	1c78      	adds	r0, r7, #1
 8011e42:	d1d6      	bne.n	8011df2 <_vfiprintf_r+0x19a>
 8011e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e46:	07d9      	lsls	r1, r3, #31
 8011e48:	d405      	bmi.n	8011e56 <_vfiprintf_r+0x1fe>
 8011e4a:	89ab      	ldrh	r3, [r5, #12]
 8011e4c:	059a      	lsls	r2, r3, #22
 8011e4e:	d402      	bmi.n	8011e56 <_vfiprintf_r+0x1fe>
 8011e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e52:	f7fe f911 	bl	8010078 <__retarget_lock_release_recursive>
 8011e56:	89ab      	ldrh	r3, [r5, #12]
 8011e58:	065b      	lsls	r3, r3, #25
 8011e5a:	f53f af1f 	bmi.w	8011c9c <_vfiprintf_r+0x44>
 8011e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e60:	e71e      	b.n	8011ca0 <_vfiprintf_r+0x48>
 8011e62:	ab03      	add	r3, sp, #12
 8011e64:	462a      	mov	r2, r5
 8011e66:	a904      	add	r1, sp, #16
 8011e68:	4630      	mov	r0, r6
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	4b04      	ldr	r3, [pc, #16]	@ (8011e80 <_vfiprintf_r+0x228>)
 8011e6e:	f7fd fe2d 	bl	800facc <_printf_i>
 8011e72:	e7e4      	b.n	8011e3e <_vfiprintf_r+0x1e6>
 8011e74:	08012758 	.word	0x08012758
 8011e78:	08012762 	.word	0x08012762
 8011e7c:	0800f595 	.word	0x0800f595
 8011e80:	08011c35 	.word	0x08011c35
 8011e84:	0801275e 	.word	0x0801275e

08011e88 <__swbuf_r>:
 8011e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e8a:	460e      	mov	r6, r1
 8011e8c:	4614      	mov	r4, r2
 8011e8e:	4605      	mov	r5, r0
 8011e90:	b118      	cbz	r0, 8011e9a <__swbuf_r+0x12>
 8011e92:	6a03      	ldr	r3, [r0, #32]
 8011e94:	b90b      	cbnz	r3, 8011e9a <__swbuf_r+0x12>
 8011e96:	f7fd ffc5 	bl	800fe24 <__sinit>
 8011e9a:	69a3      	ldr	r3, [r4, #24]
 8011e9c:	60a3      	str	r3, [r4, #8]
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	071a      	lsls	r2, r3, #28
 8011ea2:	d501      	bpl.n	8011ea8 <__swbuf_r+0x20>
 8011ea4:	6923      	ldr	r3, [r4, #16]
 8011ea6:	b943      	cbnz	r3, 8011eba <__swbuf_r+0x32>
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f000 f82a 	bl	8011f04 <__swsetup_r>
 8011eb0:	b118      	cbz	r0, 8011eba <__swbuf_r+0x32>
 8011eb2:	f04f 37ff 	mov.w	r7, #4294967295
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eba:	6823      	ldr	r3, [r4, #0]
 8011ebc:	b2f6      	uxtb	r6, r6
 8011ebe:	6922      	ldr	r2, [r4, #16]
 8011ec0:	4637      	mov	r7, r6
 8011ec2:	1a98      	subs	r0, r3, r2
 8011ec4:	6963      	ldr	r3, [r4, #20]
 8011ec6:	4283      	cmp	r3, r0
 8011ec8:	dc05      	bgt.n	8011ed6 <__swbuf_r+0x4e>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f7ff fda7 	bl	8011a20 <_fflush_r>
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d1ed      	bne.n	8011eb2 <__swbuf_r+0x2a>
 8011ed6:	68a3      	ldr	r3, [r4, #8]
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	60a3      	str	r3, [r4, #8]
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	6022      	str	r2, [r4, #0]
 8011ee2:	701e      	strb	r6, [r3, #0]
 8011ee4:	1c43      	adds	r3, r0, #1
 8011ee6:	6962      	ldr	r2, [r4, #20]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d004      	beq.n	8011ef6 <__swbuf_r+0x6e>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	07db      	lsls	r3, r3, #31
 8011ef0:	d5e1      	bpl.n	8011eb6 <__swbuf_r+0x2e>
 8011ef2:	2e0a      	cmp	r6, #10
 8011ef4:	d1df      	bne.n	8011eb6 <__swbuf_r+0x2e>
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f7ff fd91 	bl	8011a20 <_fflush_r>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d0d9      	beq.n	8011eb6 <__swbuf_r+0x2e>
 8011f02:	e7d6      	b.n	8011eb2 <__swbuf_r+0x2a>

08011f04 <__swsetup_r>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	4b29      	ldr	r3, [pc, #164]	@ (8011fac <__swsetup_r+0xa8>)
 8011f08:	4605      	mov	r5, r0
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	6818      	ldr	r0, [r3, #0]
 8011f0e:	b118      	cbz	r0, 8011f18 <__swsetup_r+0x14>
 8011f10:	6a03      	ldr	r3, [r0, #32]
 8011f12:	b90b      	cbnz	r3, 8011f18 <__swsetup_r+0x14>
 8011f14:	f7fd ff86 	bl	800fe24 <__sinit>
 8011f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f1c:	0719      	lsls	r1, r3, #28
 8011f1e:	d422      	bmi.n	8011f66 <__swsetup_r+0x62>
 8011f20:	06da      	lsls	r2, r3, #27
 8011f22:	d407      	bmi.n	8011f34 <__swsetup_r+0x30>
 8011f24:	2209      	movs	r2, #9
 8011f26:	602a      	str	r2, [r5, #0]
 8011f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f30:	81a3      	strh	r3, [r4, #12]
 8011f32:	e033      	b.n	8011f9c <__swsetup_r+0x98>
 8011f34:	0758      	lsls	r0, r3, #29
 8011f36:	d512      	bpl.n	8011f5e <__swsetup_r+0x5a>
 8011f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f3a:	b141      	cbz	r1, 8011f4e <__swsetup_r+0x4a>
 8011f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f40:	4299      	cmp	r1, r3
 8011f42:	d002      	beq.n	8011f4a <__swsetup_r+0x46>
 8011f44:	4628      	mov	r0, r5
 8011f46:	f7fe ff07 	bl	8010d58 <_free_r>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f54:	81a3      	strh	r3, [r4, #12]
 8011f56:	2300      	movs	r3, #0
 8011f58:	6063      	str	r3, [r4, #4]
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	f043 0308 	orr.w	r3, r3, #8
 8011f64:	81a3      	strh	r3, [r4, #12]
 8011f66:	6923      	ldr	r3, [r4, #16]
 8011f68:	b94b      	cbnz	r3, 8011f7e <__swsetup_r+0x7a>
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f74:	d003      	beq.n	8011f7e <__swsetup_r+0x7a>
 8011f76:	4621      	mov	r1, r4
 8011f78:	4628      	mov	r0, r5
 8011f7a:	f000 f882 	bl	8012082 <__smakebuf_r>
 8011f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f82:	f013 0201 	ands.w	r2, r3, #1
 8011f86:	d00a      	beq.n	8011f9e <__swsetup_r+0x9a>
 8011f88:	2200      	movs	r2, #0
 8011f8a:	60a2      	str	r2, [r4, #8]
 8011f8c:	6962      	ldr	r2, [r4, #20]
 8011f8e:	4252      	negs	r2, r2
 8011f90:	61a2      	str	r2, [r4, #24]
 8011f92:	6922      	ldr	r2, [r4, #16]
 8011f94:	b942      	cbnz	r2, 8011fa8 <__swsetup_r+0xa4>
 8011f96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f9a:	d1c5      	bne.n	8011f28 <__swsetup_r+0x24>
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	0799      	lsls	r1, r3, #30
 8011fa0:	bf58      	it	pl
 8011fa2:	6962      	ldrpl	r2, [r4, #20]
 8011fa4:	60a2      	str	r2, [r4, #8]
 8011fa6:	e7f4      	b.n	8011f92 <__swsetup_r+0x8e>
 8011fa8:	2000      	movs	r0, #0
 8011faa:	e7f7      	b.n	8011f9c <__swsetup_r+0x98>
 8011fac:	2000003c 	.word	0x2000003c

08011fb0 <_raise_r>:
 8011fb0:	291f      	cmp	r1, #31
 8011fb2:	b538      	push	{r3, r4, r5, lr}
 8011fb4:	4605      	mov	r5, r0
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	d904      	bls.n	8011fc4 <_raise_r+0x14>
 8011fba:	2316      	movs	r3, #22
 8011fbc:	6003      	str	r3, [r0, #0]
 8011fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc2:	bd38      	pop	{r3, r4, r5, pc}
 8011fc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011fc6:	b112      	cbz	r2, 8011fce <_raise_r+0x1e>
 8011fc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011fcc:	b94b      	cbnz	r3, 8011fe2 <_raise_r+0x32>
 8011fce:	4628      	mov	r0, r5
 8011fd0:	f000 f830 	bl	8012034 <_getpid_r>
 8011fd4:	4622      	mov	r2, r4
 8011fd6:	4601      	mov	r1, r0
 8011fd8:	4628      	mov	r0, r5
 8011fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fde:	f000 b817 	b.w	8012010 <_kill_r>
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d00a      	beq.n	8011ffc <_raise_r+0x4c>
 8011fe6:	1c59      	adds	r1, r3, #1
 8011fe8:	d103      	bne.n	8011ff2 <_raise_r+0x42>
 8011fea:	2316      	movs	r3, #22
 8011fec:	6003      	str	r3, [r0, #0]
 8011fee:	2001      	movs	r0, #1
 8011ff0:	e7e7      	b.n	8011fc2 <_raise_r+0x12>
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011ffa:	4798      	blx	r3
 8011ffc:	2000      	movs	r0, #0
 8011ffe:	e7e0      	b.n	8011fc2 <_raise_r+0x12>

08012000 <raise>:
 8012000:	4b02      	ldr	r3, [pc, #8]	@ (801200c <raise+0xc>)
 8012002:	4601      	mov	r1, r0
 8012004:	6818      	ldr	r0, [r3, #0]
 8012006:	f7ff bfd3 	b.w	8011fb0 <_raise_r>
 801200a:	bf00      	nop
 801200c:	2000003c 	.word	0x2000003c

08012010 <_kill_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	2300      	movs	r3, #0
 8012014:	4d06      	ldr	r5, [pc, #24]	@ (8012030 <_kill_r+0x20>)
 8012016:	4604      	mov	r4, r0
 8012018:	4608      	mov	r0, r1
 801201a:	4611      	mov	r1, r2
 801201c:	602b      	str	r3, [r5, #0]
 801201e:	f7f2 f9e7 	bl	80043f0 <_kill>
 8012022:	1c43      	adds	r3, r0, #1
 8012024:	d102      	bne.n	801202c <_kill_r+0x1c>
 8012026:	682b      	ldr	r3, [r5, #0]
 8012028:	b103      	cbz	r3, 801202c <_kill_r+0x1c>
 801202a:	6023      	str	r3, [r4, #0]
 801202c:	bd38      	pop	{r3, r4, r5, pc}
 801202e:	bf00      	nop
 8012030:	20007d00 	.word	0x20007d00

08012034 <_getpid_r>:
 8012034:	f7f2 b9d4 	b.w	80043e0 <_getpid>

08012038 <__swhatbuf_r>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	460c      	mov	r4, r1
 801203c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012040:	b096      	sub	sp, #88	@ 0x58
 8012042:	4615      	mov	r5, r2
 8012044:	2900      	cmp	r1, #0
 8012046:	461e      	mov	r6, r3
 8012048:	da0c      	bge.n	8012064 <__swhatbuf_r+0x2c>
 801204a:	89a3      	ldrh	r3, [r4, #12]
 801204c:	2100      	movs	r1, #0
 801204e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012052:	bf14      	ite	ne
 8012054:	2340      	movne	r3, #64	@ 0x40
 8012056:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801205a:	2000      	movs	r0, #0
 801205c:	6031      	str	r1, [r6, #0]
 801205e:	602b      	str	r3, [r5, #0]
 8012060:	b016      	add	sp, #88	@ 0x58
 8012062:	bd70      	pop	{r4, r5, r6, pc}
 8012064:	466a      	mov	r2, sp
 8012066:	f000 f849 	bl	80120fc <_fstat_r>
 801206a:	2800      	cmp	r0, #0
 801206c:	dbed      	blt.n	801204a <__swhatbuf_r+0x12>
 801206e:	9901      	ldr	r1, [sp, #4]
 8012070:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012074:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012078:	4259      	negs	r1, r3
 801207a:	4159      	adcs	r1, r3
 801207c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012080:	e7eb      	b.n	801205a <__swhatbuf_r+0x22>

08012082 <__smakebuf_r>:
 8012082:	898b      	ldrh	r3, [r1, #12]
 8012084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012086:	079d      	lsls	r5, r3, #30
 8012088:	4606      	mov	r6, r0
 801208a:	460c      	mov	r4, r1
 801208c:	d507      	bpl.n	801209e <__smakebuf_r+0x1c>
 801208e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012092:	6023      	str	r3, [r4, #0]
 8012094:	6123      	str	r3, [r4, #16]
 8012096:	2301      	movs	r3, #1
 8012098:	6163      	str	r3, [r4, #20]
 801209a:	b003      	add	sp, #12
 801209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801209e:	ab01      	add	r3, sp, #4
 80120a0:	466a      	mov	r2, sp
 80120a2:	f7ff ffc9 	bl	8012038 <__swhatbuf_r>
 80120a6:	9f00      	ldr	r7, [sp, #0]
 80120a8:	4605      	mov	r5, r0
 80120aa:	4630      	mov	r0, r6
 80120ac:	4639      	mov	r1, r7
 80120ae:	f7fe fec7 	bl	8010e40 <_malloc_r>
 80120b2:	b948      	cbnz	r0, 80120c8 <__smakebuf_r+0x46>
 80120b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120b8:	059a      	lsls	r2, r3, #22
 80120ba:	d4ee      	bmi.n	801209a <__smakebuf_r+0x18>
 80120bc:	f023 0303 	bic.w	r3, r3, #3
 80120c0:	f043 0302 	orr.w	r3, r3, #2
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	e7e2      	b.n	801208e <__smakebuf_r+0xc>
 80120c8:	89a3      	ldrh	r3, [r4, #12]
 80120ca:	6020      	str	r0, [r4, #0]
 80120cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	9b01      	ldr	r3, [sp, #4]
 80120d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80120d8:	b15b      	cbz	r3, 80120f2 <__smakebuf_r+0x70>
 80120da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120de:	4630      	mov	r0, r6
 80120e0:	f000 f81e 	bl	8012120 <_isatty_r>
 80120e4:	b128      	cbz	r0, 80120f2 <__smakebuf_r+0x70>
 80120e6:	89a3      	ldrh	r3, [r4, #12]
 80120e8:	f023 0303 	bic.w	r3, r3, #3
 80120ec:	f043 0301 	orr.w	r3, r3, #1
 80120f0:	81a3      	strh	r3, [r4, #12]
 80120f2:	89a3      	ldrh	r3, [r4, #12]
 80120f4:	431d      	orrs	r5, r3
 80120f6:	81a5      	strh	r5, [r4, #12]
 80120f8:	e7cf      	b.n	801209a <__smakebuf_r+0x18>
	...

080120fc <_fstat_r>:
 80120fc:	b538      	push	{r3, r4, r5, lr}
 80120fe:	2300      	movs	r3, #0
 8012100:	4d06      	ldr	r5, [pc, #24]	@ (801211c <_fstat_r+0x20>)
 8012102:	4604      	mov	r4, r0
 8012104:	4608      	mov	r0, r1
 8012106:	4611      	mov	r1, r2
 8012108:	602b      	str	r3, [r5, #0]
 801210a:	f7f2 f9d1 	bl	80044b0 <_fstat>
 801210e:	1c43      	adds	r3, r0, #1
 8012110:	d102      	bne.n	8012118 <_fstat_r+0x1c>
 8012112:	682b      	ldr	r3, [r5, #0]
 8012114:	b103      	cbz	r3, 8012118 <_fstat_r+0x1c>
 8012116:	6023      	str	r3, [r4, #0]
 8012118:	bd38      	pop	{r3, r4, r5, pc}
 801211a:	bf00      	nop
 801211c:	20007d00 	.word	0x20007d00

08012120 <_isatty_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	2300      	movs	r3, #0
 8012124:	4d05      	ldr	r5, [pc, #20]	@ (801213c <_isatty_r+0x1c>)
 8012126:	4604      	mov	r4, r0
 8012128:	4608      	mov	r0, r1
 801212a:	602b      	str	r3, [r5, #0]
 801212c:	f7f2 f9d0 	bl	80044d0 <_isatty>
 8012130:	1c43      	adds	r3, r0, #1
 8012132:	d102      	bne.n	801213a <_isatty_r+0x1a>
 8012134:	682b      	ldr	r3, [r5, #0]
 8012136:	b103      	cbz	r3, 801213a <_isatty_r+0x1a>
 8012138:	6023      	str	r3, [r4, #0]
 801213a:	bd38      	pop	{r3, r4, r5, pc}
 801213c:	20007d00 	.word	0x20007d00

08012140 <sqrt>:
 8012140:	b538      	push	{r3, r4, r5, lr}
 8012142:	ec55 4b10 	vmov	r4, r5, d0
 8012146:	ed2d 8b02 	vpush	{d8}
 801214a:	f000 f825 	bl	8012198 <__ieee754_sqrt>
 801214e:	4622      	mov	r2, r4
 8012150:	462b      	mov	r3, r5
 8012152:	4620      	mov	r0, r4
 8012154:	4629      	mov	r1, r5
 8012156:	eeb0 8a40 	vmov.f32	s16, s0
 801215a:	eef0 8a60 	vmov.f32	s17, s1
 801215e:	f7ee fcf5 	bl	8000b4c <__aeabi_dcmpun>
 8012162:	b990      	cbnz	r0, 801218a <sqrt+0x4a>
 8012164:	2200      	movs	r2, #0
 8012166:	2300      	movs	r3, #0
 8012168:	4620      	mov	r0, r4
 801216a:	4629      	mov	r1, r5
 801216c:	f7ee fcc6 	bl	8000afc <__aeabi_dcmplt>
 8012170:	b158      	cbz	r0, 801218a <sqrt+0x4a>
 8012172:	f7fd ff55 	bl	8010020 <__errno>
 8012176:	2321      	movs	r3, #33	@ 0x21
 8012178:	2200      	movs	r2, #0
 801217a:	6003      	str	r3, [r0, #0]
 801217c:	2300      	movs	r3, #0
 801217e:	4610      	mov	r0, r2
 8012180:	4619      	mov	r1, r3
 8012182:	f7ee fb73 	bl	800086c <__aeabi_ddiv>
 8012186:	ec41 0b18 	vmov	d8, r0, r1
 801218a:	eeb0 0a48 	vmov.f32	s0, s16
 801218e:	eef0 0a68 	vmov.f32	s1, s17
 8012192:	ecbd 8b02 	vpop	{d8}
 8012196:	bd38      	pop	{r3, r4, r5, pc}

08012198 <__ieee754_sqrt>:
 8012198:	4a6b      	ldr	r2, [pc, #428]	@ (8012348 <__ieee754_sqrt+0x1b0>)
 801219a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219e:	ec55 4b10 	vmov	r4, r5, d0
 80121a2:	43aa      	bics	r2, r5
 80121a4:	462b      	mov	r3, r5
 80121a6:	4621      	mov	r1, r4
 80121a8:	d110      	bne.n	80121cc <__ieee754_sqrt+0x34>
 80121aa:	4622      	mov	r2, r4
 80121ac:	4620      	mov	r0, r4
 80121ae:	4629      	mov	r1, r5
 80121b0:	f7ee fa32 	bl	8000618 <__aeabi_dmul>
 80121b4:	4602      	mov	r2, r0
 80121b6:	460b      	mov	r3, r1
 80121b8:	4620      	mov	r0, r4
 80121ba:	4629      	mov	r1, r5
 80121bc:	f7ee f876 	bl	80002ac <__adddf3>
 80121c0:	4604      	mov	r4, r0
 80121c2:	460d      	mov	r5, r1
 80121c4:	ec45 4b10 	vmov	d0, r4, r5
 80121c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121cc:	2d00      	cmp	r5, #0
 80121ce:	dc0e      	bgt.n	80121ee <__ieee754_sqrt+0x56>
 80121d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80121d4:	4322      	orrs	r2, r4
 80121d6:	d0f5      	beq.n	80121c4 <__ieee754_sqrt+0x2c>
 80121d8:	b19d      	cbz	r5, 8012202 <__ieee754_sqrt+0x6a>
 80121da:	4622      	mov	r2, r4
 80121dc:	4620      	mov	r0, r4
 80121de:	4629      	mov	r1, r5
 80121e0:	f7ee f862 	bl	80002a8 <__aeabi_dsub>
 80121e4:	4602      	mov	r2, r0
 80121e6:	460b      	mov	r3, r1
 80121e8:	f7ee fb40 	bl	800086c <__aeabi_ddiv>
 80121ec:	e7e8      	b.n	80121c0 <__ieee754_sqrt+0x28>
 80121ee:	152a      	asrs	r2, r5, #20
 80121f0:	d115      	bne.n	801221e <__ieee754_sqrt+0x86>
 80121f2:	2000      	movs	r0, #0
 80121f4:	e009      	b.n	801220a <__ieee754_sqrt+0x72>
 80121f6:	0acb      	lsrs	r3, r1, #11
 80121f8:	3a15      	subs	r2, #21
 80121fa:	0549      	lsls	r1, r1, #21
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d0fa      	beq.n	80121f6 <__ieee754_sqrt+0x5e>
 8012200:	e7f7      	b.n	80121f2 <__ieee754_sqrt+0x5a>
 8012202:	462a      	mov	r2, r5
 8012204:	e7fa      	b.n	80121fc <__ieee754_sqrt+0x64>
 8012206:	005b      	lsls	r3, r3, #1
 8012208:	3001      	adds	r0, #1
 801220a:	02dc      	lsls	r4, r3, #11
 801220c:	d5fb      	bpl.n	8012206 <__ieee754_sqrt+0x6e>
 801220e:	1e44      	subs	r4, r0, #1
 8012210:	1b12      	subs	r2, r2, r4
 8012212:	f1c0 0420 	rsb	r4, r0, #32
 8012216:	fa21 f404 	lsr.w	r4, r1, r4
 801221a:	4081      	lsls	r1, r0
 801221c:	4323      	orrs	r3, r4
 801221e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012222:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012226:	07d2      	lsls	r2, r2, #31
 8012228:	f04f 0600 	mov.w	r6, #0
 801222c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012230:	ea4f 0565 	mov.w	r5, r5, asr #1
 8012234:	f04f 0016 	mov.w	r0, #22
 8012238:	4632      	mov	r2, r6
 801223a:	bf58      	it	pl
 801223c:	005b      	lslpl	r3, r3, #1
 801223e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012242:	bf5c      	itt	pl
 8012244:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012248:	0049      	lslpl	r1, r1, #1
 801224a:	005b      	lsls	r3, r3, #1
 801224c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012250:	0049      	lsls	r1, r1, #1
 8012252:	1917      	adds	r7, r2, r4
 8012254:	429f      	cmp	r7, r3
 8012256:	bfde      	ittt	le
 8012258:	193a      	addle	r2, r7, r4
 801225a:	1bdb      	suble	r3, r3, r7
 801225c:	1936      	addle	r6, r6, r4
 801225e:	0fcf      	lsrs	r7, r1, #31
 8012260:	3801      	subs	r0, #1
 8012262:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012266:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801226a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801226e:	d1f0      	bne.n	8012252 <__ieee754_sqrt+0xba>
 8012270:	4604      	mov	r4, r0
 8012272:	2720      	movs	r7, #32
 8012274:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012278:	429a      	cmp	r2, r3
 801227a:	eb00 0e0c 	add.w	lr, r0, ip
 801227e:	db02      	blt.n	8012286 <__ieee754_sqrt+0xee>
 8012280:	d113      	bne.n	80122aa <__ieee754_sqrt+0x112>
 8012282:	458e      	cmp	lr, r1
 8012284:	d811      	bhi.n	80122aa <__ieee754_sqrt+0x112>
 8012286:	f1be 0f00 	cmp.w	lr, #0
 801228a:	eb0e 000c 	add.w	r0, lr, ip
 801228e:	da43      	bge.n	8012318 <__ieee754_sqrt+0x180>
 8012290:	2800      	cmp	r0, #0
 8012292:	db41      	blt.n	8012318 <__ieee754_sqrt+0x180>
 8012294:	f102 0801 	add.w	r8, r2, #1
 8012298:	1a9b      	subs	r3, r3, r2
 801229a:	458e      	cmp	lr, r1
 801229c:	4464      	add	r4, ip
 801229e:	eba1 010e 	sub.w	r1, r1, lr
 80122a2:	bf88      	it	hi
 80122a4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80122a8:	4642      	mov	r2, r8
 80122aa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80122ae:	3f01      	subs	r7, #1
 80122b0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80122b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80122b8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80122bc:	d1dc      	bne.n	8012278 <__ieee754_sqrt+0xe0>
 80122be:	4319      	orrs	r1, r3
 80122c0:	d01b      	beq.n	80122fa <__ieee754_sqrt+0x162>
 80122c2:	f8df a088 	ldr.w	sl, [pc, #136]	@ 801234c <__ieee754_sqrt+0x1b4>
 80122c6:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8012350 <__ieee754_sqrt+0x1b8>
 80122ca:	e9da 0100 	ldrd	r0, r1, [sl]
 80122ce:	e9db 2300 	ldrd	r2, r3, [fp]
 80122d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80122d6:	f7ed ffe7 	bl	80002a8 <__aeabi_dsub>
 80122da:	4602      	mov	r2, r0
 80122dc:	460b      	mov	r3, r1
 80122de:	4640      	mov	r0, r8
 80122e0:	4649      	mov	r1, r9
 80122e2:	f7ee fc15 	bl	8000b10 <__aeabi_dcmple>
 80122e6:	b140      	cbz	r0, 80122fa <__ieee754_sqrt+0x162>
 80122e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80122ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80122f0:	e9db 2300 	ldrd	r2, r3, [fp]
 80122f4:	d112      	bne.n	801231c <__ieee754_sqrt+0x184>
 80122f6:	3601      	adds	r6, #1
 80122f8:	463c      	mov	r4, r7
 80122fa:	1072      	asrs	r2, r6, #1
 80122fc:	07f1      	lsls	r1, r6, #31
 80122fe:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8012302:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012306:	bf48      	it	mi
 8012308:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801230c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012310:	4618      	mov	r0, r3
 8012312:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012316:	e753      	b.n	80121c0 <__ieee754_sqrt+0x28>
 8012318:	4690      	mov	r8, r2
 801231a:	e7bd      	b.n	8012298 <__ieee754_sqrt+0x100>
 801231c:	e9da 8900 	ldrd	r8, r9, [sl]
 8012320:	f7ed ffc4 	bl	80002ac <__adddf3>
 8012324:	4602      	mov	r2, r0
 8012326:	460b      	mov	r3, r1
 8012328:	4640      	mov	r0, r8
 801232a:	4649      	mov	r1, r9
 801232c:	f7ee fbe6 	bl	8000afc <__aeabi_dcmplt>
 8012330:	b128      	cbz	r0, 801233e <__ieee754_sqrt+0x1a6>
 8012332:	1ca0      	adds	r0, r4, #2
 8012334:	f104 0402 	add.w	r4, r4, #2
 8012338:	bf08      	it	eq
 801233a:	3601      	addeq	r6, #1
 801233c:	e7dd      	b.n	80122fa <__ieee754_sqrt+0x162>
 801233e:	1c63      	adds	r3, r4, #1
 8012340:	f023 0401 	bic.w	r4, r3, #1
 8012344:	e7d9      	b.n	80122fa <__ieee754_sqrt+0x162>
 8012346:	bf00      	nop
 8012348:	7ff00000 	.word	0x7ff00000
 801234c:	20000200 	.word	0x20000200
 8012350:	200001f8 	.word	0x200001f8

08012354 <_init>:
 8012354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012356:	bf00      	nop
 8012358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801235a:	bc08      	pop	{r3}
 801235c:	469e      	mov	lr, r3
 801235e:	4770      	bx	lr

08012360 <_fini>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	bf00      	nop
 8012364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012366:	bc08      	pop	{r3}
 8012368:	469e      	mov	lr, r3
 801236a:	4770      	bx	lr
