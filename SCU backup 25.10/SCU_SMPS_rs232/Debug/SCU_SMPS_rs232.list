
SCU_SMPS_rs232.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121c8  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08012418  08012418  00013418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129a0  080129a0  000141ec  2**0
                  CONTENTS
  4 .ARM          00000008  080129a0  080129a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129a8  080129a8  000141ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129a8  080129a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129ac  080129ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080129b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  200001ec  08012b9c  000141ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004da8  08012b9c  00014da8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000141ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8c6  00000000  00000000  00014222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f4  00000000  00000000  0002eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c87  00000000  00000000  00032c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000346b9  00000000  00000000  000338bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6ea  00000000  00000000  00067f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141003  00000000  00000000  00082662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c3665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  001c36a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  001c8b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001ec 	.word	0x200001ec
 800026c:	00000000 	.word	0x00000000
 8000270:	08012400 	.word	0x08012400

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f0 	.word	0x200001f0
 800028c:	08012400 	.word	0x08012400

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
float ADC_READ(uint8_t adc_num,uint8_t channel);
uint8_t ADC_operation();


uint8_t ADC_operation()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	float sensor_value;

	for(uint8_t i = 1 ;i<=3;i++)
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e038      	b.n	8000ffe <ADC_operation+0x7e>
	{
		for(uint8_t j = 1 ;j<=4;j++)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e02f      	b.n	8000ff2 <ADC_operation+0x72>
		{
			sensor_value =	ADC_READ(i,j);
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f849 	bl	8001030 <ADC_READ>
 8000f9e:	ed87 0a00 	vstr	s0, [r7]
			if(sensor_value > 1500 | sensor_value < -1000)
 8000fa2:	edd7 7a00 	vldr	s15, [r7]
 8000fa6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001018 <ADC_operation+0x98>
 8000faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	bfcc      	ite	gt
 8000fb4:	2301      	movgt	r3, #1
 8000fb6:	2300      	movle	r3, #0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	edd7 7a00 	vldr	s15, [r7]
 8000fbe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800101c <ADC_operation+0x9c>
 8000fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	bf4c      	ite	mi
 8000fcc:	2301      	movmi	r3, #1
 8000fce:	2300      	movpl	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <ADC_operation+0x66>
			{
				sprintf(buffer, "S%derrorE",j);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4910      	ldr	r1, [pc, #64]	@ (8001020 <ADC_operation+0xa0>)
 8000fe0:	4810      	ldr	r0, [pc, #64]	@ (8001024 <ADC_operation+0xa4>)
 8000fe2:	f00f f8c7 	bl	8010174 <siprintf>
			else
			{
				//sprintf(buffer, "S  %d  %.2fE",count++, sensor_value);
			}

			HAL_Delay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f004 f8ca 	bl	8005180 <HAL_Delay>
		for(uint8_t j = 1 ;j<=4;j++)
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	71bb      	strb	r3, [r7, #6]
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d9cc      	bls.n	8000f92 <ADC_operation+0x12>
	for(uint8_t i = 1 ;i<=3;i++)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d9c3      	bls.n	8000f8c <ADC_operation+0xc>
			//HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer), 0xFFFF);
			//HAL_Delay(10);

		}
	}
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8001004:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001008:	4807      	ldr	r0, [pc, #28]	@ (8001028 <ADC_operation+0xa8>)
 800100a:	f004 fc7d 	bl	8005908 <HAL_GPIO_TogglePin>
	return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	44bb8000 	.word	0x44bb8000
 800101c:	c47a0000 	.word	0xc47a0000
 8001020:	08012418 	.word	0x08012418
 8001024:	20000208 	.word	0x20000208
 8001028:	42021000 	.word	0x42021000
 800102c:	00000000 	.word	0x00000000

08001030 <ADC_READ>:


#if 1

float ADC_READ(uint8_t adc_num,uint8_t channel)
{
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	b0c5      	sub	sp, #276	@ 0x114
 8001036:	af1c      	add	r7, sp, #112	@ 0x70
 8001038:	4603      	mov	r3, r0
 800103a:	460a      	mov	r2, r1
 800103c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001040:	4613      	mov	r3, r2
 8001042:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t txd_buf[30]={0};
 8001046:	2300      	movs	r3, #0
 8001048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800104a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	831a      	strh	r2, [r3, #24]
	uint8_t rxd_buf[30]={0};
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001062:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	831a      	strh	r2, [r3, #24]
	float resistance = 0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


	txd_buf[0] = 0x40;
 800107e:	2340      	movs	r3, #64	@ 0x40
 8001080:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	txd_buf[1] = 0x11;
 8001084:	2311      	movs	r3, #17
 8001086:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	txd_buf[2] = 0x0c; //  	ADS114S08 (12 channels, 16 bits)
 800108a:	230c      	movs	r3, #12
 800108c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	txd_buf[3] = 0x80; //  	POR event occurred and has not been cleared. Flag must be cleared by user register write (default).
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	txd_buf[4] = 0x76; // 	DATA RATE 20 SPS
 8001096:	2376      	movs	r3, #118	@ 0x76
 8001098:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	txd_buf[5] = 0xEA; //	REF on (0001 10-ref 01)0x4a
 800109c:	23ea      	movs	r3, #234	@ 0xea
 800109e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	txd_buf[6] = 0x1E; //	4000SPS
 80010a2:	231e      	movs	r3, #30
 80010a4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	txd_buf[7] = 0x02;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	txd_buf[8] = 0x07;
 80010ae:	2307      	movs	r3, #7
 80010b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	txd_buf[9] = 0xfb;
 80010b4:	23fb      	movs	r3, #251	@ 0xfb
 80010b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
	txd_buf[10] = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	txd_buf[11] = 0x10;
 80010c0:	2310      	movs	r3, #16
 80010c2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	txd_buf[12] = 0x0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	txd_buf[13] = 0x0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	txd_buf[14] = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	txd_buf[15] = 0x0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	txd_buf[16] = 0x0;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	txd_buf[17] = 0x40;
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	txd_buf[18] = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	txd_buf[19] = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	txd_buf[20] = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	txd_buf[18] = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a


	switch(channel)
 8001102:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001106:	3b01      	subs	r3, #1
 8001108:	2b03      	cmp	r3, #3
 800110a:	d833      	bhi.n	8001174 <ADC_READ+0x144>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <ADC_READ+0xe4>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	08001139 	.word	0x08001139
 800111c:	0800114d 	.word	0x0800114d
 8001120:	08001161 	.word	0x08001161
	{
	case channel_1:
		txd_buf[4] = 0x43; // DATA RATE 20 SPS
 8001124:	2343      	movs	r3, #67	@ 0x43
 8001126:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 800112a:	2302      	movs	r3, #2
 800112c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf5; // Timeout bit second =1 ,default is 10h
 8001130:	23f5      	movs	r3, #245	@ 0xf5
 8001132:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 8001136:	e01d      	b.n	8001174 <ADC_READ+0x144>

	case channel_2:
		txd_buf[4] = 0x10; // DATA RATE 20 SPS
 8001138:	2310      	movs	r3, #16
 800113a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 800113e:	2302      	movs	r3, #2
 8001140:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf2; // Timeout bit second =1 ,default is 10h
 8001144:	23f2      	movs	r3, #242	@ 0xf2
 8001146:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 800114a:	e013      	b.n	8001174 <ADC_READ+0x144>

	case channel_3:
		txd_buf[4] = 0x9A; // DATA RATE 20 SPS
 800114c:	239a      	movs	r3, #154	@ 0x9a
 800114e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 8001152:	2302      	movs	r3, #2
 8001154:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf8; // Timeout bit second =1 ,default is 10h
 8001158:	23f8      	movs	r3, #248	@ 0xf8
 800115a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 800115e:	e009      	b.n	8001174 <ADC_READ+0x144>
	case channel_4:
		txd_buf[4] = 0x76; // DATA RATE 20 SPS
 8001160:	2376      	movs	r3, #118	@ 0x76
 8001162:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 8001166:	2302      	movs	r3, #2
 8001168:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 800116c:	23fb      	movs	r3, #251	@ 0xfb
 800116e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 8001172:	bf00      	nop
	}

	switch(adc_num)
 8001174:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001178:	2b03      	cmp	r3, #3
 800117a:	f000 8589 	beq.w	8001c90 <ADC_READ+0xc60>
 800117e:	2b03      	cmp	r3, #3
 8001180:	f301 8030 	bgt.w	80021e4 <ADC_READ+0x11b4>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d004      	beq.n	8001192 <ADC_READ+0x162>
 8001188:	2b02      	cmp	r3, #2
 800118a:	f000 82b9 	beq.w	8001700 <ADC_READ+0x6d0>
 800118e:	f001 b829 	b.w	80021e4 <ADC_READ+0x11b4>
	{
	case adc_1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	48be      	ldr	r0, [pc, #760]	@ (8001490 <ADC_READ+0x460>)
 8001198:	f004 fb9e 	bl	80058d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a2:	48bb      	ldr	r0, [pc, #748]	@ (8001490 <ADC_READ+0x460>)
 80011a4:	f004 fb98 	bl	80058d8 <HAL_GPIO_WritePin>

		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2104      	movs	r1, #4
 80011ac:	48b9      	ldr	r0, [pc, #740]	@ (8001494 <ADC_READ+0x464>)
 80011ae:	f004 fb93 	bl	80058d8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2104      	movs	r1, #4
 80011b6:	48b7      	ldr	r0, [pc, #732]	@ (8001494 <ADC_READ+0x464>)
 80011b8:	f004 fb8e 	bl	80058d8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2140      	movs	r1, #64	@ 0x40
 80011c0:	48b3      	ldr	r0, [pc, #716]	@ (8001490 <ADC_READ+0x460>)
 80011c2:	f004 fb89 	bl	80058d8 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, 0xFF);
 80011c6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80011ca:	23ff      	movs	r3, #255	@ 0xff
 80011cc:	2213      	movs	r2, #19
 80011ce:	48b2      	ldr	r0, [pc, #712]	@ (8001498 <ADC_READ+0x468>)
 80011d0:	f00b f99e 	bl	800c510 <HAL_SPI_Transmit>
		HAL_Delay(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f003 ffd3 	bl	8005180 <HAL_Delay>
		//HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2140      	movs	r1, #64	@ 0x40
 80011de:	48ac      	ldr	r0, [pc, #688]	@ (8001490 <ADC_READ+0x460>)
 80011e0:	f004 fb7a 	bl	80058d8 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2140      	movs	r1, #64	@ 0x40
 80011e8:	48a9      	ldr	r0, [pc, #676]	@ (8001490 <ADC_READ+0x460>)
 80011ea:	f004 fb75 	bl	80058d8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 80011ee:	2320      	movs	r3, #32
 80011f0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 80011f4:	2311      	movs	r3, #17
 80011f6:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_Delay(2);
 80011fa:	2002      	movs	r0, #2
 80011fc:	f003 ffc0 	bl	8005180 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFF);
 8001200:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001204:	23ff      	movs	r3, #255	@ 0xff
 8001206:	2202      	movs	r2, #2
 8001208:	48a3      	ldr	r0, [pc, #652]	@ (8001498 <ADC_READ+0x468>)
 800120a:	f00b f981 	bl	800c510 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800120e:	2002      	movs	r0, #2
 8001210:	f003 ffb6 	bl	8005180 <HAL_Delay>
		HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 8001214:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	2211      	movs	r2, #17
 800121c:	489e      	ldr	r0, [pc, #632]	@ (8001498 <ADC_READ+0x468>)
 800121e:	f00b fb8d 	bl	800c93c <HAL_SPI_Receive>
		HAL_Delay(2);
 8001222:	2002      	movs	r0, #2
 8001224:	f003 ffac 	bl	8005180 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	4898      	ldr	r0, [pc, #608]	@ (8001490 <ADC_READ+0x460>)
 800122e:	f004 fb53 	bl	80058d8 <HAL_GPIO_WritePin>
		//		{
		//			HAL_Delay(1);
		//			sprintf(buffer, "S  %d  %dE\n\r",adc_num,channel);
		//					HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer));
		//		}
		HAL_Delay(2);
 8001232:	2002      	movs	r0, #2
 8001234:	f003 ffa4 	bl	8005180 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123e:	4894      	ldr	r0, [pc, #592]	@ (8001490 <ADC_READ+0x460>)
 8001240:	f004 fb4a 	bl	80058d8 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	f003 ff9b 	bl	8005180 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2140      	movs	r1, #64	@ 0x40
 800124e:	4890      	ldr	r0, [pc, #576]	@ (8001490 <ADC_READ+0x460>)
 8001250:	f004 fb42 	bl	80058d8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001254:	2319      	movs	r3, #25
 8001256:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 800125a:	2002      	movs	r0, #2
 800125c:	f003 ff90 	bl	8005180 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 8001260:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001264:	23ff      	movs	r3, #255	@ 0xff
 8001266:	2201      	movs	r2, #1
 8001268:	488b      	ldr	r0, [pc, #556]	@ (8001498 <ADC_READ+0x468>)
 800126a:	f00b f951 	bl	800c510 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800126e:	2002      	movs	r0, #2
 8001270:	f003 ff86 	bl	8005180 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2140      	movs	r1, #64	@ 0x40
 8001278:	4885      	ldr	r0, [pc, #532]	@ (8001490 <ADC_READ+0x460>)
 800127a:	f004 fb2d 	bl	80058d8 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 800127e:	4b87      	ldr	r3, [pc, #540]	@ (800149c <ADC_READ+0x46c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 ff7c 	bl	8005180 <HAL_Delay>
		if(ATP_Mode)
 8001288:	4b85      	ldr	r3, [pc, #532]	@ (80014a0 <ADC_READ+0x470>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d04c      	beq.n	800132a <ADC_READ+0x2fa>
		{
			ATP_Mode=0;
 8001290:	4b83      	ldr	r3, [pc, #524]	@ (80014a0 <ADC_READ+0x470>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2140      	movs	r1, #64	@ 0x40
 800129a:	487d      	ldr	r0, [pc, #500]	@ (8001490 <ADC_READ+0x460>)
 800129c:	f004 fb1c 	bl	80058d8 <HAL_GPIO_WritePin>
			txd_buf[0] = 0x13;
 80012a0:	2313      	movs	r3, #19
 80012a2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			//HAL_Delay(2);
			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 80012a6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80012aa:	23ff      	movs	r3, #255	@ 0xff
 80012ac:	2201      	movs	r2, #1
 80012ae:	487a      	ldr	r0, [pc, #488]	@ (8001498 <ADC_READ+0x468>)
 80012b0:	f00b f92e 	bl	800c510 <HAL_SPI_Transmit>
			//HAL_Delay(2);
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1, 0x2, 0xFF);
 80012b4:	23ff      	movs	r3, #255	@ 0xff
 80012b6:	2202      	movs	r2, #2
 80012b8:	497a      	ldr	r1, [pc, #488]	@ (80014a4 <ADC_READ+0x474>)
 80012ba:	4877      	ldr	r0, [pc, #476]	@ (8001498 <ADC_READ+0x468>)
 80012bc:	f00b fb3e 	bl	800c93c <HAL_SPI_Receive>

			reg_data_ADC_1 = (reg_data_ADC_1 >> 8 | reg_data_ADC_1 << 8 ) ;
 80012c0:	4b78      	ldr	r3, [pc, #480]	@ (80014a4 <ADC_READ+0x474>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4b76      	ldr	r3, [pc, #472]	@ (80014a4 <ADC_READ+0x474>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b72      	ldr	r3, [pc, #456]	@ (80014a4 <ADC_READ+0x474>)
 80012da:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	2140      	movs	r1, #64	@ 0x40
 80012e0:	486b      	ldr	r0, [pc, #428]	@ (8001490 <ADC_READ+0x460>)
 80012e2:	f004 faf9 	bl	80058d8 <HAL_GPIO_WritePin>
			if((reg_data_ADC_1 >= ADC_MAX_VAL)||(reg_data_ADC_1 <= ADC_MIN_VAL)) reg_data_ADC_1=0x00;
 80012e6:	4b6f      	ldr	r3, [pc, #444]	@ (80014a4 <ADC_READ+0x474>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	f246 7283 	movw	r2, #26499	@ 0x6783
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d805      	bhi.n	80012fe <ADC_READ+0x2ce>
 80012f2:	4b6c      	ldr	r3, [pc, #432]	@ (80014a4 <ADC_READ+0x474>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d802      	bhi.n	8001304 <ADC_READ+0x2d4>
 80012fe:	4b69      	ldr	r3, [pc, #420]	@ (80014a4 <ADC_READ+0x474>)
 8001300:	2200      	movs	r2, #0
 8001302:	801a      	strh	r2, [r3, #0]
			while(!(RetCH = AdcSensor_Avg(reg_data_ADC_1, channel, adc_num)));
 8001304:	bf00      	nop
 8001306:	4b67      	ldr	r3, [pc, #412]	@ (80014a4 <ADC_READ+0x474>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800130e:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f9bc 	bl	8003690 <AdcSensor_Avg>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <ADC_READ+0x478>)
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	4b61      	ldr	r3, [pc, #388]	@ (80014a8 <ADC_READ+0x478>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ee      	beq.n	8001306 <ADC_READ+0x2d6>
 8001328:	e04b      	b.n	80013c2 <ADC_READ+0x392>
		}
		else
		{

			do{
				if(!RetCH)
 800132a:	4b5f      	ldr	r3, [pc, #380]	@ (80014a8 <ADC_READ+0x478>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d136      	bne.n	80013a0 <ADC_READ+0x370>
				{
					HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	@ 0x40
 8001336:	4856      	ldr	r0, [pc, #344]	@ (8001490 <ADC_READ+0x460>)
 8001338:	f004 face 	bl	80058d8 <HAL_GPIO_WritePin>
					txd_buf[0] = 0x13;
 800133c:	2313      	movs	r3, #19
 800133e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
					//HAL_Delay(2);
					HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 8001342:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001346:	23ff      	movs	r3, #255	@ 0xff
 8001348:	2201      	movs	r2, #1
 800134a:	4853      	ldr	r0, [pc, #332]	@ (8001498 <ADC_READ+0x468>)
 800134c:	f00b f8e0 	bl	800c510 <HAL_SPI_Transmit>
					//HAL_Delay(2);
					HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1, 0x2, 0xFF);
 8001350:	23ff      	movs	r3, #255	@ 0xff
 8001352:	2202      	movs	r2, #2
 8001354:	4953      	ldr	r1, [pc, #332]	@ (80014a4 <ADC_READ+0x474>)
 8001356:	4850      	ldr	r0, [pc, #320]	@ (8001498 <ADC_READ+0x468>)
 8001358:	f00b faf0 	bl	800c93c <HAL_SPI_Receive>

					reg_data_ADC_1 = (reg_data_ADC_1 >> 8 | reg_data_ADC_1 << 8 ) ;
 800135c:	4b51      	ldr	r3, [pc, #324]	@ (80014a4 <ADC_READ+0x474>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b4f      	ldr	r3, [pc, #316]	@ (80014a4 <ADC_READ+0x474>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21b      	sxth	r3, r3
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <ADC_READ+0x474>)
 8001376:	801a      	strh	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2140      	movs	r1, #64	@ 0x40
 800137c:	4844      	ldr	r0, [pc, #272]	@ (8001490 <ADC_READ+0x460>)
 800137e:	f004 faab 	bl	80058d8 <HAL_GPIO_WritePin>
					if((reg_data_ADC_1 >= ADC_MAX_VAL)||(reg_data_ADC_1 <= ADC_MIN_VAL)) reg_data_ADC_1=0x00;
 8001382:	4b48      	ldr	r3, [pc, #288]	@ (80014a4 <ADC_READ+0x474>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	f246 7283 	movw	r2, #26499	@ 0x6783
 800138a:	4293      	cmp	r3, r2
 800138c:	d805      	bhi.n	800139a <ADC_READ+0x36a>
 800138e:	4b45      	ldr	r3, [pc, #276]	@ (80014a4 <ADC_READ+0x474>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8001396:	4293      	cmp	r3, r2
 8001398:	d802      	bhi.n	80013a0 <ADC_READ+0x370>
 800139a:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <ADC_READ+0x474>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]

			}
#endif

#if 1
			while(!(RetCH = AdcSensor_Avg(reg_data_ADC_1, channel, adc_num)));
 80013a0:	4b40      	ldr	r3, [pc, #256]	@ (80014a4 <ADC_READ+0x474>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80013a8:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 f96f 	bl	8003690 <AdcSensor_Avg>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <ADC_READ+0x478>)
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	4b3b      	ldr	r3, [pc, #236]	@ (80014a8 <ADC_READ+0x478>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0b3      	beq.n	800132a <ADC_READ+0x2fa>
		}
		//		if((RetCH)!=0)
		//			channel =RetCH;
		switch(RetCH)
 80013c2:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <ADC_READ+0x478>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	f200 8179 	bhi.w	80016c0 <ADC_READ+0x690>
 80013ce:	a201      	add	r2, pc, #4	@ (adr r2, 80013d4 <ADC_READ+0x3a4>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	080013e5 	.word	0x080013e5
 80013d8:	080014cd 	.word	0x080014cd
 80013dc:	08001571 	.word	0x08001571
 80013e0:	08001619 	.word	0x08001619
		{

		case channel_1:
		{
			Hex_data_ADC_1 = ADCmodule_1.ADCavgcal_1.average;
 80013e4:	4b31      	ldr	r3, [pc, #196]	@ (80014ac <ADC_READ+0x47c>)
 80013e6:	8b9a      	ldrh	r2, [r3, #28]
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <ADC_READ+0x480>)
 80013ea:	801a      	strh	r2, [r3, #0]
			//			if((Hex_data_ADC_1 >= ADC_MAX_VAL)||(Hex_data_ADC_1 <= ADC_MIN_VAL)) Hex_data_ADC_1=0x00;
			resistance = ((2*1000*(float)Hex_data_ADC_1)/4) / 0xFFFF;
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <ADC_READ+0x480>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80014b4 <ADC_READ+0x484>
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001404:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001408:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80014b8 <ADC_READ+0x488>
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
			temperature = (resistance - 100.0 ) / 0.385;
 8001414:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001418:	f7ff f8a6 	bl	8000568 <__aeabi_f2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <ADC_READ+0x48c>)
 8001422:	f7fe ff41 	bl	80002a8 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a316      	add	r3, pc, #88	@ (adr r3, 8001488 <ADC_READ+0x458>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fa1a 	bl	800086c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbc2 	bl	8000bc8 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <ADC_READ+0x490>)
 8001448:	6013      	str	r3, [r2, #0]
			if(resistance==0) temperature=0;
 800144a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800144e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d103      	bne.n	8001460 <ADC_READ+0x430>
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <ADC_READ+0x490>)
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_1,temperature,resistance);
			HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
			HAL_Delay(20);
#endif
			temp_sensor_1 = temperature ;
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <ADC_READ+0x490>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <ADC_READ+0x494>)
 8001466:	6013      	str	r3, [r2, #0]
			ADCmodule_1.ADCavgcal_1.average=0;
 8001468:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <ADC_READ+0x47c>)
 800146a:	2200      	movs	r2, #0
 800146c:	839a      	strh	r2, [r3, #28]
			Hex_data_ADC_1=0;
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <ADC_READ+0x480>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
			memset(buffer,0,strlen((char *)(buffer)));
 8001474:	4814      	ldr	r0, [pc, #80]	@ (80014c8 <ADC_READ+0x498>)
 8001476:	f7fe ff0b 	bl	8000290 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	2100      	movs	r1, #0
 8001480:	4811      	ldr	r0, [pc, #68]	@ (80014c8 <ADC_READ+0x498>)
 8001482:	f00e feda 	bl	801023a <memset>
		}
		break;
 8001486:	e11c      	b.n	80016c2 <ADC_READ+0x692>
 8001488:	0a3d70a4 	.word	0x0a3d70a4
 800148c:	3fd8a3d7 	.word	0x3fd8a3d7
 8001490:	42021400 	.word	0x42021400
 8001494:	42020800 	.word	0x42020800
 8001498:	200045fc 	.word	0x200045fc
 800149c:	20000000 	.word	0x20000000
 80014a0:	2000038f 	.word	0x2000038f
 80014a4:	20000336 	.word	0x20000336
 80014a8:	20000334 	.word	0x20000334
 80014ac:	20004978 	.word	0x20004978
 80014b0:	2000033c 	.word	0x2000033c
 80014b4:	44fa0000 	.word	0x44fa0000
 80014b8:	477fff00 	.word	0x477fff00
 80014bc:	40590000 	.word	0x40590000
 80014c0:	20000344 	.word	0x20000344
 80014c4:	20000348 	.word	0x20000348
 80014c8:	20000208 	.word	0x20000208
		case channel_2:
		{
			Hex_data_ADC_2 = ADCmodule_1.ADCavgcal_2.average;
 80014cc:	4b80      	ldr	r3, [pc, #512]	@ (80016d0 <ADC_READ+0x6a0>)
 80014ce:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80014d0:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <ADC_READ+0x6a4>)
 80014d2:	801a      	strh	r2, [r3, #0]
			//			if((Hex_data_ADC_2 >= ADC_MAX_VAL)||(Hex_data_ADC_2 <= ADC_MIN_VAL)) Hex_data_ADC_2=0x00;
			resistance = ((2*1000*(float)Hex_data_ADC_2)/4) / 0xFFFF;
 80014d4:	4b7f      	ldr	r3, [pc, #508]	@ (80016d4 <ADC_READ+0x6a4>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80016d8 <ADC_READ+0x6a8>
 80014e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014f0:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80016dc <ADC_READ+0x6ac>
 80014f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f8:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
			temperature = (resistance - 100.0 ) / 0.385;
 80014fc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001500:	f7ff f832 	bl	8000568 <__aeabi_f2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b75      	ldr	r3, [pc, #468]	@ (80016e0 <ADC_READ+0x6b0>)
 800150a:	f7fe fecd 	bl	80002a8 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	a36c      	add	r3, pc, #432	@ (adr r3, 80016c8 <ADC_READ+0x698>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f9a6 	bl	800086c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb4e 	bl	8000bc8 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	4a6d      	ldr	r2, [pc, #436]	@ (80016e4 <ADC_READ+0x6b4>)
 8001530:	6013      	str	r3, [r2, #0]
			if(resistance==0) temperature=0;
 8001532:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001536:	eef5 7a40 	vcmp.f32	s15, #0.0
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d103      	bne.n	8001548 <ADC_READ+0x518>
 8001540:	4b68      	ldr	r3, [pc, #416]	@ (80016e4 <ADC_READ+0x6b4>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_2,temperature,resistance);
			HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
			HAL_Delay(10);
#endif
			temp_sensor_2 = temperature ;
 8001548:	4b66      	ldr	r3, [pc, #408]	@ (80016e4 <ADC_READ+0x6b4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a66      	ldr	r2, [pc, #408]	@ (80016e8 <ADC_READ+0x6b8>)
 800154e:	6013      	str	r3, [r2, #0]
			ADCmodule_1.ADCavgcal_2.average=0;
 8001550:	4b5f      	ldr	r3, [pc, #380]	@ (80016d0 <ADC_READ+0x6a0>)
 8001552:	2200      	movs	r2, #0
 8001554:	879a      	strh	r2, [r3, #60]	@ 0x3c
			Hex_data_ADC_2=0;
 8001556:	4b5f      	ldr	r3, [pc, #380]	@ (80016d4 <ADC_READ+0x6a4>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
			memset(buffer,0,strlen((char *)(buffer)));
 800155c:	4863      	ldr	r0, [pc, #396]	@ (80016ec <ADC_READ+0x6bc>)
 800155e:	f7fe fe97 	bl	8000290 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	4860      	ldr	r0, [pc, #384]	@ (80016ec <ADC_READ+0x6bc>)
 800156a:	f00e fe66 	bl	801023a <memset>
		}
		break;
 800156e:	e0a8      	b.n	80016c2 <ADC_READ+0x692>
		case channel_3:
		{
			Hex_data_ADC_3 = ADCmodule_1.ADCavgcal_3.average;
 8001570:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <ADC_READ+0x6a0>)
 8001572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001576:	4b5e      	ldr	r3, [pc, #376]	@ (80016f0 <ADC_READ+0x6c0>)
 8001578:	801a      	strh	r2, [r3, #0]
			//			if((Hex_data_ADC_3 >= ADC_MAX_VAL)||(Hex_data_ADC_3 <= ADC_MIN_VAL)) Hex_data_ADC_3=0x00;
			resistance = ((2*1000*(float)Hex_data_ADC_3)/4) / 0xFFFF;
 800157a:	4b5d      	ldr	r3, [pc, #372]	@ (80016f0 <ADC_READ+0x6c0>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80016d8 <ADC_READ+0x6a8>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001592:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001596:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80016dc <ADC_READ+0x6ac>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
			temperature = (resistance - 100.0 ) / 0.385;
 80015a2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015a6:	f7fe ffdf 	bl	8000568 <__aeabi_f2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b4c      	ldr	r3, [pc, #304]	@ (80016e0 <ADC_READ+0x6b0>)
 80015b0:	f7fe fe7a 	bl	80002a8 <__aeabi_dsub>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a342      	add	r3, pc, #264	@ (adr r3, 80016c8 <ADC_READ+0x698>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f953 	bl	800086c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fafb 	bl	8000bc8 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a43      	ldr	r2, [pc, #268]	@ (80016e4 <ADC_READ+0x6b4>)
 80015d6:	6013      	str	r3, [r2, #0]
			if(resistance==0) temperature=0;
 80015d8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80015dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d103      	bne.n	80015ee <ADC_READ+0x5be>
 80015e6:	4b3f      	ldr	r3, [pc, #252]	@ (80016e4 <ADC_READ+0x6b4>)
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_3,temperature,resistance);
			HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
			HAL_Delay(10);
#endif
			temp_sensor_3 = temperature ;
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <ADC_READ+0x6b4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a40      	ldr	r2, [pc, #256]	@ (80016f4 <ADC_READ+0x6c4>)
 80015f4:	6013      	str	r3, [r2, #0]
			ADCmodule_1.ADCavgcal_3.average=0;
 80015f6:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <ADC_READ+0x6a0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			Hex_data_ADC_3=0;
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <ADC_READ+0x6c0>)
 8001600:	2200      	movs	r2, #0
 8001602:	801a      	strh	r2, [r3, #0]
			memset(buffer,0,strlen((char *)(buffer)));
 8001604:	4839      	ldr	r0, [pc, #228]	@ (80016ec <ADC_READ+0x6bc>)
 8001606:	f7fe fe43 	bl	8000290 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	4836      	ldr	r0, [pc, #216]	@ (80016ec <ADC_READ+0x6bc>)
 8001612:	f00e fe12 	bl	801023a <memset>
		}
		break;
 8001616:	e054      	b.n	80016c2 <ADC_READ+0x692>
		case channel_4:
		{
			Hex_data_ADC_4 = ADCmodule_1.ADCavgcal_4.average;
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <ADC_READ+0x6a0>)
 800161a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
 800161e:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <ADC_READ+0x6c8>)
 8001620:	801a      	strh	r2, [r3, #0]
			//			if((Hex_data_ADC_4 >= ADC_MAX_VAL)||(Hex_data_ADC_4 <= ADC_MIN_VAL)) Hex_data_ADC_4=0x00;
			resistance = ((2*1000*(float)Hex_data_ADC_4)/4) / 0xFFFF;
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <ADC_READ+0x6c8>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80016d8 <ADC_READ+0x6a8>
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800163a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800163e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80016dc <ADC_READ+0x6ac>
 8001642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001646:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
			temperature = (resistance - 100.0 ) / 0.385;
 800164a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800164e:	f7fe ff8b 	bl	8000568 <__aeabi_f2d>
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <ADC_READ+0x6b0>)
 8001658:	f7fe fe26 	bl	80002a8 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	a318      	add	r3, pc, #96	@ (adr r3, 80016c8 <ADC_READ+0x698>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f8ff 	bl	800086c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff faa7 	bl	8000bc8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a19      	ldr	r2, [pc, #100]	@ (80016e4 <ADC_READ+0x6b4>)
 800167e:	6013      	str	r3, [r2, #0]
			if(resistance==0) temperature=0;
 8001680:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001684:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	d103      	bne.n	8001696 <ADC_READ+0x666>
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <ADC_READ+0x6b4>)
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_4,temperature,resistance);
			HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
			HAL_Delay(10);
#endif
			temp_sensor_4 = temperature ;
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <ADC_READ+0x6b4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <ADC_READ+0x6cc>)
 800169c:	6013      	str	r3, [r2, #0]
			ADCmodule_1.ADCavgcal_4.average=0;
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <ADC_READ+0x6a0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
			Hex_data_ADC_4=0;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <ADC_READ+0x6c8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]
			memset(buffer,0,strlen((char *)(buffer)));
 80016ac:	480f      	ldr	r0, [pc, #60]	@ (80016ec <ADC_READ+0x6bc>)
 80016ae:	f7fe fdef 	bl	8000290 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <ADC_READ+0x6bc>)
 80016ba:	f00e fdbe 	bl	801023a <memset>
		}
		break;
 80016be:	e000      	b.n	80016c2 <ADC_READ+0x692>

		default:
			break;
 80016c0:	bf00      	nop
		}
#endif
		//HAL_Delay(100000000);

		break;
 80016c2:	f000 bd8f 	b.w	80021e4 <ADC_READ+0x11b4>
 80016c6:	bf00      	nop
 80016c8:	0a3d70a4 	.word	0x0a3d70a4
 80016cc:	3fd8a3d7 	.word	0x3fd8a3d7
 80016d0:	20004978 	.word	0x20004978
 80016d4:	2000033e 	.word	0x2000033e
 80016d8:	44fa0000 	.word	0x44fa0000
 80016dc:	477fff00 	.word	0x477fff00
 80016e0:	40590000 	.word	0x40590000
 80016e4:	20000344 	.word	0x20000344
 80016e8:	2000034c 	.word	0x2000034c
 80016ec:	20000208 	.word	0x20000208
 80016f0:	20000340 	.word	0x20000340
 80016f4:	20000350 	.word	0x20000350
 80016f8:	20000342 	.word	0x20000342
 80016fc:	20000354 	.word	0x20000354

		case adc_2:
			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	48a4      	ldr	r0, [pc, #656]	@ (8001998 <ADC_READ+0x968>)
 8001708:	f004 f8e6 	bl	80058d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2140      	movs	r1, #64	@ 0x40
 8001710:	48a2      	ldr	r0, [pc, #648]	@ (800199c <ADC_READ+0x96c>)
 8001712:	f004 f8e1 	bl	80058d8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);
			HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171c:	489f      	ldr	r0, [pc, #636]	@ (800199c <ADC_READ+0x96c>)
 800171e:	f004 f8db 	bl	80058d8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);
			HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001728:	489c      	ldr	r0, [pc, #624]	@ (800199c <ADC_READ+0x96c>)
 800172a:	f004 f8d5 	bl	80058d8 <HAL_GPIO_WritePin>
			//HAL_Delay(100);



			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001734:	4898      	ldr	r0, [pc, #608]	@ (8001998 <ADC_READ+0x968>)
 8001736:	f004 f8cf 	bl	80058d8 <HAL_GPIO_WritePin>

			HAL_Delay(2);
 800173a:	2002      	movs	r0, #2
 800173c:	f003 fd20 	bl	8005180 <HAL_Delay>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, 0xFF);
 8001740:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001744:	23ff      	movs	r3, #255	@ 0xff
 8001746:	2213      	movs	r2, #19
 8001748:	4895      	ldr	r0, [pc, #596]	@ (80019a0 <ADC_READ+0x970>)
 800174a:	f00a fee1 	bl	800c510 <HAL_SPI_Transmit>
			HAL_Delay(2);
 800174e:	2002      	movs	r0, #2
 8001750:	f003 fd16 	bl	8005180 <HAL_Delay>
			//HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf, 20, 0xFF);
			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175a:	488f      	ldr	r0, [pc, #572]	@ (8001998 <ADC_READ+0x968>)
 800175c:	f004 f8bc 	bl	80058d8 <HAL_GPIO_WritePin>


			//HAL_Delay(200);

			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001766:	488c      	ldr	r0, [pc, #560]	@ (8001998 <ADC_READ+0x968>)
 8001768:	f004 f8b6 	bl	80058d8 <HAL_GPIO_WritePin>
			txd_buf[0] = 0x20;
 800176c:	2320      	movs	r3, #32
 800176e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			txd_buf[1] = 0x11;
 8001772:	2311      	movs	r3, #17
 8001774:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			HAL_Delay(2);
 8001778:	2002      	movs	r0, #2
 800177a:	f003 fd01 	bl	8005180 <HAL_Delay>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFF);
 800177e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001782:	23ff      	movs	r3, #255	@ 0xff
 8001784:	2202      	movs	r2, #2
 8001786:	4886      	ldr	r0, [pc, #536]	@ (80019a0 <ADC_READ+0x970>)
 8001788:	f00a fec2 	bl	800c510 <HAL_SPI_Transmit>
			HAL_Delay(2);
 800178c:	2002      	movs	r0, #2
 800178e:	f003 fcf7 	bl	8005180 <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 8001792:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001796:	23ff      	movs	r3, #255	@ 0xff
 8001798:	2211      	movs	r2, #17
 800179a:	4881      	ldr	r0, [pc, #516]	@ (80019a0 <ADC_READ+0x970>)
 800179c:	f00b f8ce 	bl	800c93c <HAL_SPI_Receive>
			HAL_Delay(2);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f003 fced 	bl	8005180 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ac:	487a      	ldr	r0, [pc, #488]	@ (8001998 <ADC_READ+0x968>)
 80017ae:	f004 f893 	bl	80058d8 <HAL_GPIO_WritePin>

			HAL_Delay(2);
 80017b2:	2002      	movs	r0, #2
 80017b4:	f003 fce4 	bl	8005180 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2140      	movs	r1, #64	@ 0x40
 80017bc:	4877      	ldr	r0, [pc, #476]	@ (800199c <ADC_READ+0x96c>)
 80017be:	f004 f88b 	bl	80058d8 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 80017c2:	2002      	movs	r0, #2
 80017c4:	f003 fcdc 	bl	8005180 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ce:	4872      	ldr	r0, [pc, #456]	@ (8001998 <ADC_READ+0x968>)
 80017d0:	f004 f882 	bl	80058d8 <HAL_GPIO_WritePin>
			txd_buf[0] = 0x19;
 80017d4:	2319      	movs	r3, #25
 80017d6:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			HAL_Delay(2);
 80017da:	2002      	movs	r0, #2
 80017dc:	f003 fcd0 	bl	8005180 <HAL_Delay>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 80017e0:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80017e4:	23ff      	movs	r3, #255	@ 0xff
 80017e6:	2201      	movs	r2, #1
 80017e8:	486d      	ldr	r0, [pc, #436]	@ (80019a0 <ADC_READ+0x970>)
 80017ea:	f00a fe91 	bl	800c510 <HAL_SPI_Transmit>
			HAL_Delay(2);
 80017ee:	2002      	movs	r0, #2
 80017f0:	f003 fcc6 	bl	8005180 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017fa:	4867      	ldr	r0, [pc, #412]	@ (8001998 <ADC_READ+0x968>)
 80017fc:	f004 f86c 	bl	80058d8 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8001800:	2002      	movs	r0, #2
 8001802:	f003 fcbd 	bl	8005180 <HAL_Delay>
			HAL_Delay(wait_time);
 8001806:	4b67      	ldr	r3, [pc, #412]	@ (80019a4 <ADC_READ+0x974>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fcb8 	bl	8005180 <HAL_Delay>
			if(ATP_Mode)
 8001810:	4b65      	ldr	r3, [pc, #404]	@ (80019a8 <ADC_READ+0x978>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d057      	beq.n	80018c8 <ADC_READ+0x898>
			{
				ATP_Mode=0;
 8001818:	4b63      	ldr	r3, [pc, #396]	@ (80019a8 <ADC_READ+0x978>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001824:	485c      	ldr	r0, [pc, #368]	@ (8001998 <ADC_READ+0x968>)
 8001826:	f004 f857 	bl	80058d8 <HAL_GPIO_WritePin>
				txd_buf[0] = 0x13;
 800182a:	2313      	movs	r3, #19
 800182c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				HAL_Delay(2);
 8001830:	2002      	movs	r0, #2
 8001832:	f003 fca5 	bl	8005180 <HAL_Delay>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 8001836:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800183a:	23ff      	movs	r3, #255	@ 0xff
 800183c:	2201      	movs	r2, #1
 800183e:	4858      	ldr	r0, [pc, #352]	@ (80019a0 <ADC_READ+0x970>)
 8001840:	f00a fe66 	bl	800c510 <HAL_SPI_Transmit>
				HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f003 fc9b 	bl	8005180 <HAL_Delay>
				HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2, 0x2, 0xFF);
 800184a:	23ff      	movs	r3, #255	@ 0xff
 800184c:	2202      	movs	r2, #2
 800184e:	4957      	ldr	r1, [pc, #348]	@ (80019ac <ADC_READ+0x97c>)
 8001850:	4853      	ldr	r0, [pc, #332]	@ (80019a0 <ADC_READ+0x970>)
 8001852:	f00b f873 	bl	800c93c <HAL_SPI_Receive>
				reg_data_ADC_2 = (reg_data_ADC_2 >> 8 | reg_data_ADC_2 << 8 ) ;
 8001856:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <ADC_READ+0x97c>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	b29b      	uxth	r3, r3
 800185e:	b21a      	sxth	r2, r3
 8001860:	4b52      	ldr	r3, [pc, #328]	@ (80019ac <ADC_READ+0x97c>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <ADC_READ+0x97c>)
 8001870:	801a      	strh	r2, [r3, #0]

				HAL_Delay(2);
 8001872:	2002      	movs	r0, #2
 8001874:	f003 fc84 	bl	8005180 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187e:	4846      	ldr	r0, [pc, #280]	@ (8001998 <ADC_READ+0x968>)
 8001880:	f004 f82a 	bl	80058d8 <HAL_GPIO_WritePin>

				if((reg_data_ADC_2 >= ADC_MAX_VAL)||(reg_data_ADC_2 <= ADC_MIN_VAL)) reg_data_ADC_2=0x00;
 8001884:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <ADC_READ+0x97c>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f246 7283 	movw	r2, #26499	@ 0x6783
 800188c:	4293      	cmp	r3, r2
 800188e:	d805      	bhi.n	800189c <ADC_READ+0x86c>
 8001890:	4b46      	ldr	r3, [pc, #280]	@ (80019ac <ADC_READ+0x97c>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8001898:	4293      	cmp	r3, r2
 800189a:	d802      	bhi.n	80018a2 <ADC_READ+0x872>
 800189c:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <ADC_READ+0x97c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]

				while(!(RetCH = AdcSensor_Avg(reg_data_ADC_2, channel, adc_num)));
 80018a2:	bf00      	nop
 80018a4:	4b41      	ldr	r3, [pc, #260]	@ (80019ac <ADC_READ+0x97c>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80018ac:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 feed 	bl	8003690 <AdcSensor_Avg>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <ADC_READ+0x980>)
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <ADC_READ+0x980>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ee      	beq.n	80018a4 <ADC_READ+0x874>
 80018c6:	e056      	b.n	8001976 <ADC_READ+0x946>
			}
			else{
				do{
					if(!RetCH)
 80018c8:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <ADC_READ+0x980>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d141      	bne.n	8001954 <ADC_READ+0x924>
					{
						HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d6:	4830      	ldr	r0, [pc, #192]	@ (8001998 <ADC_READ+0x968>)
 80018d8:	f003 fffe 	bl	80058d8 <HAL_GPIO_WritePin>
						txd_buf[0] = 0x13;
 80018dc:	2313      	movs	r3, #19
 80018de:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
						HAL_Delay(2);
 80018e2:	2002      	movs	r0, #2
 80018e4:	f003 fc4c 	bl	8005180 <HAL_Delay>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 80018e8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80018ec:	23ff      	movs	r3, #255	@ 0xff
 80018ee:	2201      	movs	r2, #1
 80018f0:	482b      	ldr	r0, [pc, #172]	@ (80019a0 <ADC_READ+0x970>)
 80018f2:	f00a fe0d 	bl	800c510 <HAL_SPI_Transmit>
						HAL_Delay(2);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f003 fc42 	bl	8005180 <HAL_Delay>
						HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2, 0x2, 0xFF);
 80018fc:	23ff      	movs	r3, #255	@ 0xff
 80018fe:	2202      	movs	r2, #2
 8001900:	492a      	ldr	r1, [pc, #168]	@ (80019ac <ADC_READ+0x97c>)
 8001902:	4827      	ldr	r0, [pc, #156]	@ (80019a0 <ADC_READ+0x970>)
 8001904:	f00b f81a 	bl	800c93c <HAL_SPI_Receive>
						reg_data_ADC_2 = (reg_data_ADC_2 >> 8 | reg_data_ADC_2 << 8 ) ;
 8001908:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <ADC_READ+0x97c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <ADC_READ+0x97c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21b      	sxth	r3, r3
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <ADC_READ+0x97c>)
 8001922:	801a      	strh	r2, [r3, #0]

						HAL_Delay(2);
 8001924:	2002      	movs	r0, #2
 8001926:	f003 fc2b 	bl	8005180 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001930:	4819      	ldr	r0, [pc, #100]	@ (8001998 <ADC_READ+0x968>)
 8001932:	f003 ffd1 	bl	80058d8 <HAL_GPIO_WritePin>

						if((reg_data_ADC_2 >= ADC_MAX_VAL)||(reg_data_ADC_2 <= ADC_MIN_VAL)) reg_data_ADC_2=0x00;
 8001936:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <ADC_READ+0x97c>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	f246 7283 	movw	r2, #26499	@ 0x6783
 800193e:	4293      	cmp	r3, r2
 8001940:	d805      	bhi.n	800194e <ADC_READ+0x91e>
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <ADC_READ+0x97c>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 800194a:	4293      	cmp	r3, r2
 800194c:	d802      	bhi.n	8001954 <ADC_READ+0x924>
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <ADC_READ+0x97c>)
 8001950:	2200      	movs	r2, #0
 8001952:	801a      	strh	r2, [r3, #0]

				}
#endif

#if 1
				while(!(RetCH = AdcSensor_Avg(reg_data_ADC_2, channel, adc_num)));
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <ADC_READ+0x97c>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800195c:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fe95 	bl	8003690 <AdcSensor_Avg>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <ADC_READ+0x980>)
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <ADC_READ+0x980>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0a8      	beq.n	80018c8 <ADC_READ+0x898>
			}
			//		if((RetCH)!=0)
			//			channel =RetCH;
			switch(RetCH)
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <ADC_READ+0x980>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	2b03      	cmp	r3, #3
 800197e:	f200 8165 	bhi.w	8001c4c <ADC_READ+0xc1c>
 8001982:	a201      	add	r2, pc, #4	@ (adr r2, 8001988 <ADC_READ+0x958>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	080019b5 	.word	0x080019b5
 800198c:	08001a59 	.word	0x08001a59
 8001990:	08001afd 	.word	0x08001afd
 8001994:	08001ba5 	.word	0x08001ba5
 8001998:	42020400 	.word	0x42020400
 800199c:	42021800 	.word	0x42021800
 80019a0:	200044dc 	.word	0x200044dc
 80019a4:	20000000 	.word	0x20000000
 80019a8:	2000038f 	.word	0x2000038f
 80019ac:	20000338 	.word	0x20000338
 80019b0:	20000334 	.word	0x20000334
			{

			case channel_1:
			{
				Hex_data_ADC_1 = ADCmodule_2.ADCavgcal_1.average;
 80019b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001c58 <ADC_READ+0xc28>)
 80019b6:	8b9a      	ldrh	r2, [r3, #28]
 80019b8:	4ba8      	ldr	r3, [pc, #672]	@ (8001c5c <ADC_READ+0xc2c>)
 80019ba:	801a      	strh	r2, [r3, #0]
				//			if((Hex_data_ADC_1 >= ADC_MAX_VAL)||(Hex_data_ADC_1 <= ADC_MIN_VAL)) Hex_data_ADC_1=0x00;
				resistance = ((2*1000*(float)Hex_data_ADC_1)/4) / 0xFFFF;
 80019bc:	4ba7      	ldr	r3, [pc, #668]	@ (8001c5c <ADC_READ+0xc2c>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8001c60 <ADC_READ+0xc30>
 80019cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80019d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019d8:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8001c64 <ADC_READ+0xc34>
 80019dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e0:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
				temperature = (resistance - 100.0 ) / 0.385;
 80019e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80019e8:	f7fe fdbe 	bl	8000568 <__aeabi_f2d>
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c68 <ADC_READ+0xc38>)
 80019f2:	f7fe fc59 	bl	80002a8 <__aeabi_dsub>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	a394      	add	r3, pc, #592	@ (adr r3, 8001c50 <ADC_READ+0xc20>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe ff32 	bl	800086c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f8da 	bl	8000bc8 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a95      	ldr	r2, [pc, #596]	@ (8001c6c <ADC_READ+0xc3c>)
 8001a18:	6013      	str	r3, [r2, #0]
				if(resistance==0) temperature=0;
 8001a1a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001a1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d103      	bne.n	8001a30 <ADC_READ+0xa00>
 8001a28:	4b90      	ldr	r3, [pc, #576]	@ (8001c6c <ADC_READ+0xc3c>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
				sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_1,temperature,resistance);
				HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
				HAL_Delay(10);
#endif
				temp_sensor_5 = temperature ;
 8001a30:	4b8e      	ldr	r3, [pc, #568]	@ (8001c6c <ADC_READ+0xc3c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a8e      	ldr	r2, [pc, #568]	@ (8001c70 <ADC_READ+0xc40>)
 8001a36:	6013      	str	r3, [r2, #0]
				ADCmodule_2.ADCavgcal_1.average=0;
 8001a38:	4b87      	ldr	r3, [pc, #540]	@ (8001c58 <ADC_READ+0xc28>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	839a      	strh	r2, [r3, #28]
				Hex_data_ADC_1=0;
 8001a3e:	4b87      	ldr	r3, [pc, #540]	@ (8001c5c <ADC_READ+0xc2c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	801a      	strh	r2, [r3, #0]
				memset(buffer,0,strlen((char *)(buffer)));
 8001a44:	488b      	ldr	r0, [pc, #556]	@ (8001c74 <ADC_READ+0xc44>)
 8001a46:	f7fe fc23 	bl	8000290 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4888      	ldr	r0, [pc, #544]	@ (8001c74 <ADC_READ+0xc44>)
 8001a52:	f00e fbf2 	bl	801023a <memset>
			}
			break;
 8001a56:	e0fa      	b.n	8001c4e <ADC_READ+0xc1e>
			case channel_2:
			{
				Hex_data_ADC_2 = ADCmodule_2.ADCavgcal_2.average;
 8001a58:	4b7f      	ldr	r3, [pc, #508]	@ (8001c58 <ADC_READ+0xc28>)
 8001a5a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001a5c:	4b86      	ldr	r3, [pc, #536]	@ (8001c78 <ADC_READ+0xc48>)
 8001a5e:	801a      	strh	r2, [r3, #0]
				//			if((Hex_data_ADC_2 >= ADC_MAX_VAL)||(Hex_data_ADC_2 <= ADC_MIN_VAL)) Hex_data_ADC_2=0x00;
				resistance = ((2*1000*(float)Hex_data_ADC_2)/4) / 0xFFFF;
 8001a60:	4b85      	ldr	r3, [pc, #532]	@ (8001c78 <ADC_READ+0xc48>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a6c:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8001c60 <ADC_READ+0xc30>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001a78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a7c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001c64 <ADC_READ+0xc34>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
				temperature = (resistance - 100.0 ) / 0.385;
 8001a88:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001a8c:	f7fe fd6c 	bl	8000568 <__aeabi_f2d>
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b74      	ldr	r3, [pc, #464]	@ (8001c68 <ADC_READ+0xc38>)
 8001a96:	f7fe fc07 	bl	80002a8 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a36b      	add	r3, pc, #428	@ (adr r3, 8001c50 <ADC_READ+0xc20>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fee0 	bl	800086c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f888 	bl	8000bc8 <__aeabi_d2f>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a6c      	ldr	r2, [pc, #432]	@ (8001c6c <ADC_READ+0xc3c>)
 8001abc:	6013      	str	r3, [r2, #0]
				if(resistance==0) temperature=0;
 8001abe:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001ac2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d103      	bne.n	8001ad4 <ADC_READ+0xaa4>
 8001acc:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <ADC_READ+0xc3c>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
				sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_2,temperature,resistance);
				HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
				HAL_Delay(10);
#endif
				temp_sensor_6 = temperature ;
 8001ad4:	4b65      	ldr	r3, [pc, #404]	@ (8001c6c <ADC_READ+0xc3c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a68      	ldr	r2, [pc, #416]	@ (8001c7c <ADC_READ+0xc4c>)
 8001ada:	6013      	str	r3, [r2, #0]
				ADCmodule_2.ADCavgcal_2.average=0;
 8001adc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c58 <ADC_READ+0xc28>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	879a      	strh	r2, [r3, #60]	@ 0x3c
				Hex_data_ADC_2=0;
 8001ae2:	4b65      	ldr	r3, [pc, #404]	@ (8001c78 <ADC_READ+0xc48>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
				memset(buffer,0,strlen((char *)(buffer)));
 8001ae8:	4862      	ldr	r0, [pc, #392]	@ (8001c74 <ADC_READ+0xc44>)
 8001aea:	f7fe fbd1 	bl	8000290 <strlen>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	485f      	ldr	r0, [pc, #380]	@ (8001c74 <ADC_READ+0xc44>)
 8001af6:	f00e fba0 	bl	801023a <memset>
			}
			break;
 8001afa:	e0a8      	b.n	8001c4e <ADC_READ+0xc1e>
			case channel_3:
			{
				Hex_data_ADC_3 = ADCmodule_2.ADCavgcal_3.average;
 8001afc:	4b56      	ldr	r3, [pc, #344]	@ (8001c58 <ADC_READ+0xc28>)
 8001afe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001b02:	4b5f      	ldr	r3, [pc, #380]	@ (8001c80 <ADC_READ+0xc50>)
 8001b04:	801a      	strh	r2, [r3, #0]
				//			if((Hex_data_ADC_3 >= ADC_MAX_VAL)||(Hex_data_ADC_3 <= ADC_MIN_VAL)) Hex_data_ADC_3=0x00;
				resistance = ((2*1000*(float)Hex_data_ADC_3)/4) / 0xFFFF;
 8001b06:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <ADC_READ+0xc50>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001c60 <ADC_READ+0xc30>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b22:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001c64 <ADC_READ+0xc34>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
				temperature = (resistance - 100.0 ) / 0.385;
 8001b2e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001b32:	f7fe fd19 	bl	8000568 <__aeabi_f2d>
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <ADC_READ+0xc38>)
 8001b3c:	f7fe fbb4 	bl	80002a8 <__aeabi_dsub>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	a341      	add	r3, pc, #260	@ (adr r3, 8001c50 <ADC_READ+0xc20>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fe8d 	bl	800086c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f835 	bl	8000bc8 <__aeabi_d2f>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a42      	ldr	r2, [pc, #264]	@ (8001c6c <ADC_READ+0xc3c>)
 8001b62:	6013      	str	r3, [r2, #0]
				if(resistance==0) temperature=0;
 8001b64:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d103      	bne.n	8001b7a <ADC_READ+0xb4a>
 8001b72:	4b3e      	ldr	r3, [pc, #248]	@ (8001c6c <ADC_READ+0xc3c>)
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
				sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_3,temperature,resistance);
				HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
				HAL_Delay(10);
#endif
				temp_sensor_7 = temperature ;
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <ADC_READ+0xc3c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a41      	ldr	r2, [pc, #260]	@ (8001c84 <ADC_READ+0xc54>)
 8001b80:	6013      	str	r3, [r2, #0]
				ADCmodule_2.ADCavgcal_3.average=0;
 8001b82:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <ADC_READ+0xc28>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
				Hex_data_ADC_3=0;
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <ADC_READ+0xc50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
				memset(buffer,0,strlen((char *)(buffer)));
 8001b90:	4838      	ldr	r0, [pc, #224]	@ (8001c74 <ADC_READ+0xc44>)
 8001b92:	f7fe fb7d 	bl	8000290 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4835      	ldr	r0, [pc, #212]	@ (8001c74 <ADC_READ+0xc44>)
 8001b9e:	f00e fb4c 	bl	801023a <memset>
			}
			break;
 8001ba2:	e054      	b.n	8001c4e <ADC_READ+0xc1e>
			case channel_4:
			{
				Hex_data_ADC_4 = ADCmodule_2.ADCavgcal_4.average;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <ADC_READ+0xc28>)
 8001ba6:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
 8001baa:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <ADC_READ+0xc58>)
 8001bac:	801a      	strh	r2, [r3, #0]
				//			if((Hex_data_ADC_4 >= ADC_MAX_VAL)||(Hex_data_ADC_4 <= ADC_MIN_VAL)) Hex_data_ADC_4=0x00;
				resistance = ((2*1000*(float)Hex_data_ADC_4)/4) / 0xFFFF;
 8001bae:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <ADC_READ+0xc58>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001c60 <ADC_READ+0xc30>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001bc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001c64 <ADC_READ+0xc34>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
				temperature = (resistance - 100.0 ) / 0.385;
 8001bd6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001bda:	f7fe fcc5 	bl	8000568 <__aeabi_f2d>
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <ADC_READ+0xc38>)
 8001be4:	f7fe fb60 	bl	80002a8 <__aeabi_dsub>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	a317      	add	r3, pc, #92	@ (adr r3, 8001c50 <ADC_READ+0xc20>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fe39 	bl	800086c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ffe1 	bl	8000bc8 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <ADC_READ+0xc3c>)
 8001c0a:	6013      	str	r3, [r2, #0]
				if(resistance==0) temperature=0;
 8001c0c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001c10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d103      	bne.n	8001c22 <ADC_READ+0xbf2>
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <ADC_READ+0xc3c>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
				sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_4,temperature,resistance);
				HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
				HAL_Delay(10);
#endif
				temp_sensor_8 = temperature ;
 8001c22:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <ADC_READ+0xc3c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <ADC_READ+0xc5c>)
 8001c28:	6013      	str	r3, [r2, #0]
				ADCmodule_2.ADCavgcal_4.average=0;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <ADC_READ+0xc28>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
				Hex_data_ADC_4=0;
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <ADC_READ+0xc58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]
				memset(buffer,0,strlen((char *)(buffer)));
 8001c38:	480e      	ldr	r0, [pc, #56]	@ (8001c74 <ADC_READ+0xc44>)
 8001c3a:	f7fe fb29 	bl	8000290 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	480b      	ldr	r0, [pc, #44]	@ (8001c74 <ADC_READ+0xc44>)
 8001c46:	f00e faf8 	bl	801023a <memset>
			}
			break;
 8001c4a:	e000      	b.n	8001c4e <ADC_READ+0xc1e>

			default:
				break;
 8001c4c:	bf00      	nop
			}
#endif

			break;
 8001c4e:	e2c9      	b.n	80021e4 <ADC_READ+0x11b4>
 8001c50:	0a3d70a4 	.word	0x0a3d70a4
 8001c54:	3fd8a3d7 	.word	0x3fd8a3d7
 8001c58:	200049f8 	.word	0x200049f8
 8001c5c:	2000033c 	.word	0x2000033c
 8001c60:	44fa0000 	.word	0x44fa0000
 8001c64:	477fff00 	.word	0x477fff00
 8001c68:	40590000 	.word	0x40590000
 8001c6c:	20000344 	.word	0x20000344
 8001c70:	20000358 	.word	0x20000358
 8001c74:	20000208 	.word	0x20000208
 8001c78:	2000033e 	.word	0x2000033e
 8001c7c:	2000035c 	.word	0x2000035c
 8001c80:	20000340 	.word	0x20000340
 8001c84:	20000360 	.word	0x20000360
 8001c88:	20000342 	.word	0x20000342
 8001c8c:	20000364 	.word	0x20000364

			case adc_3:
				HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c96:	48b8      	ldr	r0, [pc, #736]	@ (8001f78 <ADC_READ+0xf48>)
 8001c98:	f003 fe1e 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f003 fa6f 	bl	8005180 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca8:	48b3      	ldr	r0, [pc, #716]	@ (8001f78 <ADC_READ+0xf48>)
 8001caa:	f003 fe15 	bl	80058d8 <HAL_GPIO_WritePin>
				//HAL_Delay(100);
				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	48b2      	ldr	r0, [pc, #712]	@ (8001f7c <ADC_READ+0xf4c>)
 8001cb4:	f003 fe10 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cbe:	48ae      	ldr	r0, [pc, #696]	@ (8001f78 <ADC_READ+0xf48>)
 8001cc0:	f003 fe0a 	bl	80058d8 <HAL_GPIO_WritePin>


				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	48ac      	ldr	r0, [pc, #688]	@ (8001f7c <ADC_READ+0xf4c>)
 8001cca:	f003 fe05 	bl	80058d8 <HAL_GPIO_WritePin>


				HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, 0xFF);
 8001cce:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001cd2:	23ff      	movs	r3, #255	@ 0xff
 8001cd4:	2213      	movs	r2, #19
 8001cd6:	48aa      	ldr	r0, [pc, #680]	@ (8001f80 <ADC_READ+0xf50>)
 8001cd8:	f00a fc1a 	bl	800c510 <HAL_SPI_Transmit>
				HAL_Delay(2);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f003 fa4f 	bl	8005180 <HAL_Delay>
				//HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf, 20, 0xFF);
				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	48a5      	ldr	r0, [pc, #660]	@ (8001f7c <ADC_READ+0xf4c>)
 8001ce8:	f003 fdf6 	bl	80058d8 <HAL_GPIO_WritePin>


				//HAL_Delay(200);

				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2110      	movs	r1, #16
 8001cf0:	48a2      	ldr	r0, [pc, #648]	@ (8001f7c <ADC_READ+0xf4c>)
 8001cf2:	f003 fdf1 	bl	80058d8 <HAL_GPIO_WritePin>
				txd_buf[0] = 0x20;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				txd_buf[1] = 0x11;
 8001cfc:	2311      	movs	r3, #17
 8001cfe:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
				HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFF);
 8001d02:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001d06:	23ff      	movs	r3, #255	@ 0xff
 8001d08:	2202      	movs	r2, #2
 8001d0a:	489d      	ldr	r0, [pc, #628]	@ (8001f80 <ADC_READ+0xf50>)
 8001d0c:	f00a fc00 	bl	800c510 <HAL_SPI_Transmit>
				HAL_Delay(2);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f003 fa35 	bl	8005180 <HAL_Delay>
				HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 8001d16:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001d1a:	23ff      	movs	r3, #255	@ 0xff
 8001d1c:	2211      	movs	r2, #17
 8001d1e:	4898      	ldr	r0, [pc, #608]	@ (8001f80 <ADC_READ+0xf50>)
 8001d20:	f00a fe0c 	bl	800c93c <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2110      	movs	r1, #16
 8001d28:	4894      	ldr	r0, [pc, #592]	@ (8001f7c <ADC_READ+0xf4c>)
 8001d2a:	f003 fdd5 	bl	80058d8 <HAL_GPIO_WritePin>
				//		{
				//			HAL_Delay(1);
				//			sprintf(buffer, "S  %d  %dE\n\r",adc_num,channel);
				//					HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer));
				//		}
				HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d34:	4890      	ldr	r0, [pc, #576]	@ (8001f78 <ADC_READ+0xf48>)
 8001d36:	f003 fdcf 	bl	80058d8 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	488f      	ldr	r0, [pc, #572]	@ (8001f7c <ADC_READ+0xf4c>)
 8001d40:	f003 fdca 	bl	80058d8 <HAL_GPIO_WritePin>
				txd_buf[0] = 0x19;
 8001d44:	2319      	movs	r3, #25
 8001d46:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

				HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 8001d4a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001d4e:	23ff      	movs	r3, #255	@ 0xff
 8001d50:	2201      	movs	r2, #1
 8001d52:	488b      	ldr	r0, [pc, #556]	@ (8001f80 <ADC_READ+0xf50>)
 8001d54:	f00a fbdc 	bl	800c510 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	4887      	ldr	r0, [pc, #540]	@ (8001f7c <ADC_READ+0xf4c>)
 8001d5e:	f003 fdbb 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_Delay(wait_time);
 8001d62:	4b88      	ldr	r3, [pc, #544]	@ (8001f84 <ADC_READ+0xf54>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fa0a 	bl	8005180 <HAL_Delay>
				if(ATP_Mode)
 8001d6c:	4b86      	ldr	r3, [pc, #536]	@ (8001f88 <ADC_READ+0xf58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d04c      	beq.n	8001e0e <ADC_READ+0xdde>
				{
					ATP_Mode=0;
 8001d74:	4b84      	ldr	r3, [pc, #528]	@ (8001f88 <ADC_READ+0xf58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	487f      	ldr	r0, [pc, #508]	@ (8001f7c <ADC_READ+0xf4c>)
 8001d80:	f003 fdaa 	bl	80058d8 <HAL_GPIO_WritePin>
					txd_buf[0] = 0x13;
 8001d84:	2313      	movs	r3, #19
 8001d86:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

					HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 8001d8a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001d8e:	23ff      	movs	r3, #255	@ 0xff
 8001d90:	2201      	movs	r2, #1
 8001d92:	487b      	ldr	r0, [pc, #492]	@ (8001f80 <ADC_READ+0xf50>)
 8001d94:	f00a fbbc 	bl	800c510 <HAL_SPI_Transmit>

					HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3, 0x2, 0xFF);
 8001d98:	23ff      	movs	r3, #255	@ 0xff
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	497b      	ldr	r1, [pc, #492]	@ (8001f8c <ADC_READ+0xf5c>)
 8001d9e:	4878      	ldr	r0, [pc, #480]	@ (8001f80 <ADC_READ+0xf50>)
 8001da0:	f00a fdcc 	bl	800c93c <HAL_SPI_Receive>
					reg_data_ADC_3 = (reg_data_ADC_3 >> 8 | reg_data_ADC_3 << 8 ) ;
 8001da4:	4b79      	ldr	r3, [pc, #484]	@ (8001f8c <ADC_READ+0xf5c>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	4b77      	ldr	r3, [pc, #476]	@ (8001f8c <ADC_READ+0xf5c>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b73      	ldr	r3, [pc, #460]	@ (8001f8c <ADC_READ+0xf5c>)
 8001dbe:	801a      	strh	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	486d      	ldr	r0, [pc, #436]	@ (8001f7c <ADC_READ+0xf4c>)
 8001dc6:	f003 fd87 	bl	80058d8 <HAL_GPIO_WritePin>

					if((reg_data_ADC_3 >= ADC_MAX_VAL)||(reg_data_ADC_3 <= ADC_MIN_VAL)) reg_data_ADC_3=0x00;
 8001dca:	4b70      	ldr	r3, [pc, #448]	@ (8001f8c <ADC_READ+0xf5c>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	f246 7283 	movw	r2, #26499	@ 0x6783
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d805      	bhi.n	8001de2 <ADC_READ+0xdb2>
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f8c <ADC_READ+0xf5c>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d802      	bhi.n	8001de8 <ADC_READ+0xdb8>
 8001de2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f8c <ADC_READ+0xf5c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	801a      	strh	r2, [r3, #0]
					while(!(RetCH = AdcSensor_Avg(reg_data_ADC_3, channel, adc_num)));
 8001de8:	bf00      	nop
 8001dea:	4b68      	ldr	r3, [pc, #416]	@ (8001f8c <ADC_READ+0xf5c>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001df2:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 fc4a 	bl	8003690 <AdcSensor_Avg>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b63      	ldr	r3, [pc, #396]	@ (8001f90 <ADC_READ+0xf60>)
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	4b62      	ldr	r3, [pc, #392]	@ (8001f90 <ADC_READ+0xf60>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <ADC_READ+0xdba>
 8001e0c:	e04b      	b.n	8001ea6 <ADC_READ+0xe76>

				}
				else{
					do{
						if(!RetCH)
 8001e0e:	4b60      	ldr	r3, [pc, #384]	@ (8001f90 <ADC_READ+0xf60>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d136      	bne.n	8001e84 <ADC_READ+0xe54>
						{
							HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2110      	movs	r1, #16
 8001e1a:	4858      	ldr	r0, [pc, #352]	@ (8001f7c <ADC_READ+0xf4c>)
 8001e1c:	f003 fd5c 	bl	80058d8 <HAL_GPIO_WritePin>
							txd_buf[0] = 0x13;
 8001e20:	2313      	movs	r3, #19
 8001e22:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

							HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 8001e26:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001e2a:	23ff      	movs	r3, #255	@ 0xff
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4854      	ldr	r0, [pc, #336]	@ (8001f80 <ADC_READ+0xf50>)
 8001e30:	f00a fb6e 	bl	800c510 <HAL_SPI_Transmit>

							HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3, 0x2, 0xFF);
 8001e34:	23ff      	movs	r3, #255	@ 0xff
 8001e36:	2202      	movs	r2, #2
 8001e38:	4954      	ldr	r1, [pc, #336]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e3a:	4851      	ldr	r0, [pc, #324]	@ (8001f80 <ADC_READ+0xf50>)
 8001e3c:	f00a fd7e 	bl	800c93c <HAL_SPI_Receive>
							reg_data_ADC_3 = (reg_data_ADC_3 >> 8 | reg_data_ADC_3 << 8 ) ;
 8001e40:	4b52      	ldr	r3, [pc, #328]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e5a:	801a      	strh	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4846      	ldr	r0, [pc, #280]	@ (8001f7c <ADC_READ+0xf4c>)
 8001e62:	f003 fd39 	bl	80058d8 <HAL_GPIO_WritePin>

							if((reg_data_ADC_3 >= ADC_MAX_VAL)||(reg_data_ADC_3 <= ADC_MIN_VAL)) reg_data_ADC_3=0x00;
 8001e66:	4b49      	ldr	r3, [pc, #292]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f246 7283 	movw	r2, #26499	@ 0x6783
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d805      	bhi.n	8001e7e <ADC_READ+0xe4e>
 8001e72:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <ADC_READ+0xe54>
 8001e7e:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]

					}
#endif

#if 1
					while(!(RetCH = AdcSensor_Avg(reg_data_ADC_3, channel, adc_num)));
 8001e84:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <ADC_READ+0xf5c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e8c:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fbfd 	bl	8003690 <AdcSensor_Avg>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f90 <ADC_READ+0xf60>)
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f90 <ADC_READ+0xf60>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0b3      	beq.n	8001e0e <ADC_READ+0xdde>
				}
				//		if((RetCH)!=0)
				//			channel =RetCH;
				switch(RetCH)
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <ADC_READ+0xf60>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	f200 8197 	bhi.w	80021e0 <ADC_READ+0x11b0>
 8001eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb8 <ADC_READ+0xe88>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001fb5 	.word	0x08001fb5
 8001ec0:	08002059 	.word	0x08002059
 8001ec4:	08002101 	.word	0x08002101
				{

				case channel_1:
				{
					Hex_data_ADC_1 = ADCmodule_3.ADCavgcal_1.average;
 8001ec8:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <ADC_READ+0xf64>)
 8001eca:	8b9a      	ldrh	r2, [r3, #28]
 8001ecc:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <ADC_READ+0xf68>)
 8001ece:	801a      	strh	r2, [r3, #0]
					//			if((Hex_data_ADC_1 >= ADC_MAX_VAL)||(Hex_data_ADC_1 <= ADC_MIN_VAL)) Hex_data_ADC_1=0x00;
					resistance = ((2*1000*(float)Hex_data_ADC_1)/4) / 0xFFFF;
 8001ed0:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <ADC_READ+0xf68>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001edc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001f9c <ADC_READ+0xf6c>
 8001ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001ee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eec:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001fa0 <ADC_READ+0xf70>
 8001ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
					temperature = (resistance - 100.0 ) / 0.385;
 8001ef8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001efc:	f7fe fb34 	bl	8000568 <__aeabi_f2d>
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b27      	ldr	r3, [pc, #156]	@ (8001fa4 <ADC_READ+0xf74>)
 8001f06:	f7fe f9cf 	bl	80002a8 <__aeabi_dsub>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	a317      	add	r3, pc, #92	@ (adr r3, 8001f70 <ADC_READ+0xf40>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fca8 	bl	800086c <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe50 	bl	8000bc8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <ADC_READ+0xf78>)
 8001f2c:	6013      	str	r3, [r2, #0]
					if(resistance==0) temperature=0;
 8001f2e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001f32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	d103      	bne.n	8001f44 <ADC_READ+0xf14>
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <ADC_READ+0xf78>)
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
					sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_1,temperature,resistance);
					HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
					HAL_Delay(10);
#endif
					temp_sensor_9 = temperature ;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <ADC_READ+0xf78>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <ADC_READ+0xf7c>)
 8001f4a:	6013      	str	r3, [r2, #0]
					ADCmodule_3.ADCavgcal_1.average=0;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <ADC_READ+0xf64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	839a      	strh	r2, [r3, #28]
					Hex_data_ADC_1=0;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <ADC_READ+0xf68>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	801a      	strh	r2, [r3, #0]
					memset(buffer,0,strlen((char *)(buffer)));
 8001f58:	4815      	ldr	r0, [pc, #84]	@ (8001fb0 <ADC_READ+0xf80>)
 8001f5a:	f7fe f999 	bl	8000290 <strlen>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	2100      	movs	r1, #0
 8001f64:	4812      	ldr	r0, [pc, #72]	@ (8001fb0 <ADC_READ+0xf80>)
 8001f66:	f00e f968 	bl	801023a <memset>
				}
				break;
 8001f6a:	e13a      	b.n	80021e2 <ADC_READ+0x11b2>
 8001f6c:	f3af 8000 	nop.w
 8001f70:	0a3d70a4 	.word	0x0a3d70a4
 8001f74:	3fd8a3d7 	.word	0x3fd8a3d7
 8001f78:	42020000 	.word	0x42020000
 8001f7c:	42020c00 	.word	0x42020c00
 8001f80:	2000456c 	.word	0x2000456c
 8001f84:	20000000 	.word	0x20000000
 8001f88:	2000038f 	.word	0x2000038f
 8001f8c:	2000033a 	.word	0x2000033a
 8001f90:	20000334 	.word	0x20000334
 8001f94:	20004a78 	.word	0x20004a78
 8001f98:	2000033c 	.word	0x2000033c
 8001f9c:	44fa0000 	.word	0x44fa0000
 8001fa0:	477fff00 	.word	0x477fff00
 8001fa4:	40590000 	.word	0x40590000
 8001fa8:	20000344 	.word	0x20000344
 8001fac:	20000368 	.word	0x20000368
 8001fb0:	20000208 	.word	0x20000208
				case channel_2:
				{
					Hex_data_ADC_2 = ADCmodule_3.ADCavgcal_2.average;
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80021b0 <ADC_READ+0x1180>)
 8001fb6:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80021b4 <ADC_READ+0x1184>)
 8001fba:	801a      	strh	r2, [r3, #0]
					//			if((Hex_data_ADC_2 >= ADC_MAX_VAL)||(Hex_data_ADC_2 <= ADC_MIN_VAL)) Hex_data_ADC_2=0x00;
					resistance = ((2*1000*(float)Hex_data_ADC_2)/4) / 0xFFFF;
 8001fbc:	4b7d      	ldr	r3, [pc, #500]	@ (80021b4 <ADC_READ+0x1184>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80021b8 <ADC_READ+0x1188>
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001fd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fd8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 80021bc <ADC_READ+0x118c>
 8001fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe0:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
					temperature = (resistance - 100.0 ) / 0.385;
 8001fe4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001fe8:	f7fe fabe 	bl	8000568 <__aeabi_f2d>
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b73      	ldr	r3, [pc, #460]	@ (80021c0 <ADC_READ+0x1190>)
 8001ff2:	f7fe f959 	bl	80002a8 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	a36a      	add	r3, pc, #424	@ (adr r3, 80021a8 <ADC_READ+0x1178>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fc32 	bl	800086c <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fdda 	bl	8000bc8 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4a6b      	ldr	r2, [pc, #428]	@ (80021c4 <ADC_READ+0x1194>)
 8002018:	6013      	str	r3, [r2, #0]
					if(resistance==0) temperature=0;
 800201a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800201e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d103      	bne.n	8002030 <ADC_READ+0x1000>
 8002028:	4b66      	ldr	r3, [pc, #408]	@ (80021c4 <ADC_READ+0x1194>)
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
					sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_2,temperature,resistance);
					HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
					HAL_Delay(10);
#endif
					temp_sensor_10 = temperature ;
 8002030:	4b64      	ldr	r3, [pc, #400]	@ (80021c4 <ADC_READ+0x1194>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a64      	ldr	r2, [pc, #400]	@ (80021c8 <ADC_READ+0x1198>)
 8002036:	6013      	str	r3, [r2, #0]
					ADCmodule_3.ADCavgcal_2.average=0;
 8002038:	4b5d      	ldr	r3, [pc, #372]	@ (80021b0 <ADC_READ+0x1180>)
 800203a:	2200      	movs	r2, #0
 800203c:	879a      	strh	r2, [r3, #60]	@ 0x3c
					Hex_data_ADC_2=0;
 800203e:	4b5d      	ldr	r3, [pc, #372]	@ (80021b4 <ADC_READ+0x1184>)
 8002040:	2200      	movs	r2, #0
 8002042:	801a      	strh	r2, [r3, #0]
					memset(buffer,0,strlen((char *)(buffer)));
 8002044:	4861      	ldr	r0, [pc, #388]	@ (80021cc <ADC_READ+0x119c>)
 8002046:	f7fe f923 	bl	8000290 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	2100      	movs	r1, #0
 8002050:	485e      	ldr	r0, [pc, #376]	@ (80021cc <ADC_READ+0x119c>)
 8002052:	f00e f8f2 	bl	801023a <memset>
				}
				break;
 8002056:	e0c4      	b.n	80021e2 <ADC_READ+0x11b2>
				case channel_3:
				{
					Hex_data_ADC_3 = ADCmodule_3.ADCavgcal_3.average;
 8002058:	4b55      	ldr	r3, [pc, #340]	@ (80021b0 <ADC_READ+0x1180>)
 800205a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800205e:	4b5c      	ldr	r3, [pc, #368]	@ (80021d0 <ADC_READ+0x11a0>)
 8002060:	801a      	strh	r2, [r3, #0]
					//			if((Hex_data_ADC_3 >= ADC_MAX_VAL)||(Hex_data_ADC_3 <= ADC_MIN_VAL)) Hex_data_ADC_3=0x00;
					resistance = ((2*1000*(float)Hex_data_ADC_3)/4) / 0xFFFF;
 8002062:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <ADC_READ+0x11a0>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80021b8 <ADC_READ+0x1188>
 8002072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002076:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800207a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800207e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80021bc <ADC_READ+0x118c>
 8002082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002086:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
					temperature = (resistance - 100.0 ) / 0.385;
 800208a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800208e:	f7fe fa6b 	bl	8000568 <__aeabi_f2d>
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	4b4a      	ldr	r3, [pc, #296]	@ (80021c0 <ADC_READ+0x1190>)
 8002098:	f7fe f906 	bl	80002a8 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	a340      	add	r3, pc, #256	@ (adr r3, 80021a8 <ADC_READ+0x1178>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe fbdf 	bl	800086c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd87 	bl	8000bc8 <__aeabi_d2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a41      	ldr	r2, [pc, #260]	@ (80021c4 <ADC_READ+0x1194>)
 80020be:	6013      	str	r3, [r2, #0]
					if(resistance==0) temperature=0;
 80020c0:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80020c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d103      	bne.n	80020d6 <ADC_READ+0x10a6>
 80020ce:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <ADC_READ+0x1194>)
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
					sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_3,temperature,resistance);
					HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
					HAL_Delay(10);
#endif
					temp_sensor_11 = temperature ;
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <ADC_READ+0x1194>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3e      	ldr	r2, [pc, #248]	@ (80021d4 <ADC_READ+0x11a4>)
 80020dc:	6013      	str	r3, [r2, #0]
					ADCmodule_3.ADCavgcal_3.average=0;
 80020de:	4b34      	ldr	r3, [pc, #208]	@ (80021b0 <ADC_READ+0x1180>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
					Hex_data_ADC_3=0;
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <ADC_READ+0x11a0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	801a      	strh	r2, [r3, #0]
					memset(buffer,0,strlen((char *)(buffer)));
 80020ec:	4837      	ldr	r0, [pc, #220]	@ (80021cc <ADC_READ+0x119c>)
 80020ee:	f7fe f8cf 	bl	8000290 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	4834      	ldr	r0, [pc, #208]	@ (80021cc <ADC_READ+0x119c>)
 80020fa:	f00e f89e 	bl	801023a <memset>
				}
				break;
 80020fe:	e070      	b.n	80021e2 <ADC_READ+0x11b2>
				case channel_4:
				{
					Hex_data_ADC_4 = ADCmodule_3.ADCavgcal_4.average;
 8002100:	4b2b      	ldr	r3, [pc, #172]	@ (80021b0 <ADC_READ+0x1180>)
 8002102:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
 8002106:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <ADC_READ+0x11a8>)
 8002108:	801a      	strh	r2, [r3, #0]
					//			if((Hex_data_ADC_4 >= ADC_MAX_VAL)||(Hex_data_ADC_4 <= ADC_MIN_VAL)) Hex_data_ADC_4=0x00;
					resistance = ((2*1000*(float)Hex_data_ADC_4)/4) / 0xFFFF;
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <ADC_READ+0x11a8>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002116:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80021b8 <ADC_READ+0x1188>
 800211a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002122:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002126:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80021bc <ADC_READ+0x118c>
 800212a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
					temperature = (resistance - 100.0 ) / 0.385;
 8002132:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002136:	f7fe fa17 	bl	8000568 <__aeabi_f2d>
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <ADC_READ+0x1190>)
 8002140:	f7fe f8b2 	bl	80002a8 <__aeabi_dsub>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	a316      	add	r3, pc, #88	@ (adr r3, 80021a8 <ADC_READ+0x1178>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fb8b 	bl	800086c <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd33 	bl	8000bc8 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <ADC_READ+0x1194>)
 8002166:	6013      	str	r3, [r2, #0]
					if(resistance==0) temperature=0;
 8002168:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800216c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	d103      	bne.n	800217e <ADC_READ+0x114e>
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <ADC_READ+0x1194>)
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
#ifdef ADC_UART
					sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,RetCH,Hex_data_ADC_4,temperature,resistance);
					HAL_UART_Transmit_IT(&huart5, buffer, strlen((char *)(buffer)));
					HAL_Delay(10);
#endif
					temp_sensor_12 = temperature ;
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <ADC_READ+0x1194>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <ADC_READ+0x11ac>)
 8002184:	6013      	str	r3, [r2, #0]
					ADCmodule_3.ADCavgcal_4.average=0;
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <ADC_READ+0x1180>)
 8002188:	2200      	movs	r2, #0
 800218a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
					Hex_data_ADC_4=0;
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <ADC_READ+0x11a8>)
 8002190:	2200      	movs	r2, #0
 8002192:	801a      	strh	r2, [r3, #0]
					memset(buffer,0,strlen((char *)(buffer)));
 8002194:	480d      	ldr	r0, [pc, #52]	@ (80021cc <ADC_READ+0x119c>)
 8002196:	f7fe f87b 	bl	8000290 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	2100      	movs	r1, #0
 80021a0:	480a      	ldr	r0, [pc, #40]	@ (80021cc <ADC_READ+0x119c>)
 80021a2:	f00e f84a 	bl	801023a <memset>
				}
				break;
 80021a6:	e01c      	b.n	80021e2 <ADC_READ+0x11b2>
 80021a8:	0a3d70a4 	.word	0x0a3d70a4
 80021ac:	3fd8a3d7 	.word	0x3fd8a3d7
 80021b0:	20004a78 	.word	0x20004a78
 80021b4:	2000033e 	.word	0x2000033e
 80021b8:	44fa0000 	.word	0x44fa0000
 80021bc:	477fff00 	.word	0x477fff00
 80021c0:	40590000 	.word	0x40590000
 80021c4:	20000344 	.word	0x20000344
 80021c8:	2000036c 	.word	0x2000036c
 80021cc:	20000208 	.word	0x20000208
 80021d0:	20000340 	.word	0x20000340
 80021d4:	20000370 	.word	0x20000370
 80021d8:	20000342 	.word	0x20000342
 80021dc:	20000374 	.word	0x20000374

				default:
					break;
 80021e0:	bf00      	nop
				}
#endif

				break;
 80021e2:	bf00      	nop
	}


#if 1

	if(RetCH == 4 && adc_num == 3)
 80021e4:	4b94      	ldr	r3, [pc, #592]	@ (8002438 <ADC_READ+0x1408>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	f040 811b 	bne.w	8002424 <ADC_READ+0x13f4>
 80021ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	f040 8116 	bne.w	8002424 <ADC_READ+0x13f4>
	{
		uint8_t time_data[8]={0};
 80021f8:	2300      	movs	r3, #0
 80021fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80021fc:	2300      	movs	r3, #0
 80021fe:	657b      	str	r3, [r7, #84]	@ 0x54
		uint32_t sec_addr = 0x60000000 | 0x7FFF9;
 8002200:	4b8e      	ldr	r3, [pc, #568]	@ (800243c <ADC_READ+0x140c>)
 8002202:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data,7);
 8002206:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800220a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800220e:	2307      	movs	r3, #7
 8002210:	488b      	ldr	r0, [pc, #556]	@ (8002440 <ADC_READ+0x1410>)
 8002212:	f00a fe77 	bl	800cf04 <HAL_SRAM_Read_8b>
		memset(&ADCpacket,0,sizeof(ADCpacket));
 8002216:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800221a:	2100      	movs	r1, #0
 800221c:	4889      	ldr	r0, [pc, #548]	@ (8002444 <ADC_READ+0x1414>)
 800221e:	f00e f80c 	bl	801023a <memset>
		HAL_Delay(1);
 8002222:	2001      	movs	r0, #1
 8002224:	f002 ffac 	bl	8005180 <HAL_Delay>


		ADCpacket.Startbyte=SoF;
 8002228:	4b86      	ldr	r3, [pc, #536]	@ (8002444 <ADC_READ+0x1414>)
 800222a:	2240      	movs	r2, #64	@ 0x40
 800222c:	701a      	strb	r2, [r3, #0]
		//ADCpacket.Endbyte  =EoF;
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 800222e:	4b86      	ldr	r3, [pc, #536]	@ (8002448 <ADC_READ+0x1418>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f998 	bl	8000568 <__aeabi_f2d>
 8002238:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 800223c:	4b83      	ldr	r3, [pc, #524]	@ (800244c <ADC_READ+0x141c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f991 	bl	8000568 <__aeabi_f2d>
 8002246:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800224a:	4b81      	ldr	r3, [pc, #516]	@ (8002450 <ADC_READ+0x1420>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f98a 	bl	8000568 <__aeabi_f2d>
 8002254:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8002258:	4b7e      	ldr	r3, [pc, #504]	@ (8002454 <ADC_READ+0x1424>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f983 	bl	8000568 <__aeabi_f2d>
 8002262:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002266:	4b7c      	ldr	r3, [pc, #496]	@ (8002458 <ADC_READ+0x1428>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f97c 	bl	8000568 <__aeabi_f2d>
 8002270:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002274:	4b79      	ldr	r3, [pc, #484]	@ (800245c <ADC_READ+0x142c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f975 	bl	8000568 <__aeabi_f2d>
 800227e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002282:	4b77      	ldr	r3, [pc, #476]	@ (8002460 <ADC_READ+0x1430>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f96e 	bl	8000568 <__aeabi_f2d>
 800228c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002290:	4b74      	ldr	r3, [pc, #464]	@ (8002464 <ADC_READ+0x1434>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f967 	bl	8000568 <__aeabi_f2d>
 800229a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800229e:	4b72      	ldr	r3, [pc, #456]	@ (8002468 <ADC_READ+0x1438>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f960 	bl	8000568 <__aeabi_f2d>
 80022a8:	e9c7 0100 	strd	r0, r1, [r7]
 80022ac:	4b6f      	ldr	r3, [pc, #444]	@ (800246c <ADC_READ+0x143c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f959 	bl	8000568 <__aeabi_f2d>
 80022b6:	4682      	mov	sl, r0
 80022b8:	468b      	mov	fp, r1
 80022ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002470 <ADC_READ+0x1440>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f952 	bl	8000568 <__aeabi_f2d>
 80022c4:	4680      	mov	r8, r0
 80022c6:	4689      	mov	r9, r1
 80022c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002474 <ADC_READ+0x1444>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f94b 	bl	8000568 <__aeabi_f2d>
				"{\"TS1\": \"%.2f\", \"TS2\": \"%.2f\", \"TS3\": \"%.2f\", \"TS4\": \"%.2f\", \"TS5\": \"%.2f\", "
				"\"TS6\": \"%.2f\", \"TS7\": \"%.2f\", \"TS8\": \"%.2f\", \"TS9\": \"%.2f\", \"TS10\": \"%.2f\", "
				"\"TS11\": \"%.2f\", \"TS12\": \"%.2f\",\"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"}\"\n\r",
				temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80022d2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 80022d6:	64bb      	str	r3, [r7, #72]	@ 0x48
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80022d8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 80022dc:	461e      	mov	r6, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80022de:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 80022e2:	461d      	mov	r5, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80022e4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 80022e8:	461c      	mov	r4, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80022ea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 80022ee:	461a      	mov	r2, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80022f0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
		ADCpacket.dataSize =sprintf(ADCpacket.adcbuffer,
 80022f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80022f6:	921a      	str	r2, [sp, #104]	@ 0x68
 80022f8:	9419      	str	r4, [sp, #100]	@ 0x64
 80022fa:	9518      	str	r5, [sp, #96]	@ 0x60
 80022fc:	9617      	str	r6, [sp, #92]	@ 0x5c
 80022fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002300:	9316      	str	r3, [sp, #88]	@ 0x58
 8002302:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8002306:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 800230a:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 800230e:	ed97 7b00 	vldr	d7, [r7]
 8002312:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002316:	ed97 7b02 	vldr	d7, [r7, #8]
 800231a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800231e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002322:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002326:	ed97 7b06 	vldr	d7, [r7, #24]
 800232a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800232e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002332:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002336:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800233a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800233e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002342:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002346:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800234a:	ed8d 7b00 	vstr	d7, [sp]
 800234e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002352:	4949      	ldr	r1, [pc, #292]	@ (8002478 <ADC_READ+0x1448>)
 8002354:	4849      	ldr	r0, [pc, #292]	@ (800247c <ADC_READ+0x144c>)
 8002356:	f00d ff0d 	bl	8010174 <siprintf>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <ADC_READ+0x1414>)
 8002360:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
		ADCpacket.adcbuffer[ADCpacket.dataSize-3]=EoF;
 8002364:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <ADC_READ+0x1414>)
 8002366:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800236a:	3b03      	subs	r3, #3
 800236c:	4a35      	ldr	r2, [pc, #212]	@ (8002444 <ADC_READ+0x1414>)
 800236e:	4413      	add	r3, r2
 8002370:	2224      	movs	r2, #36	@ 0x24
 8002372:	705a      	strb	r2, [r3, #1]
					temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
					temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
#endif


			if(!ATP_UART)
 8002374:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <ADC_READ+0x1450>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d153      	bne.n	8002424 <ADC_READ+0x13f4>
			{

				HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800237c:	2201      	movs	r2, #1
 800237e:	2101      	movs	r1, #1
 8002380:	4840      	ldr	r0, [pc, #256]	@ (8002484 <ADC_READ+0x1454>)
 8002382:	f003 faa9 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	2102      	movs	r1, #2
 800238a:	483e      	ldr	r0, [pc, #248]	@ (8002484 <ADC_READ+0x1454>)
 800238c:	f003 faa4 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	2104      	movs	r1, #4
 8002394:	483b      	ldr	r0, [pc, #236]	@ (8002484 <ADC_READ+0x1454>)
 8002396:	f003 fa9f 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_Delay(5);
 800239a:	2005      	movs	r0, #5
 800239c:	f002 fef0 	bl	8005180 <HAL_Delay>

				HAL_UART_Transmit_IT(&huart10,(uint8_t *)&ADCpacket, (ADCpacket.dataSize)+2);
 80023a0:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <ADC_READ+0x1414>)
 80023a2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3302      	adds	r3, #2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4925      	ldr	r1, [pc, #148]	@ (8002444 <ADC_READ+0x1414>)
 80023b0:	4835      	ldr	r0, [pc, #212]	@ (8002488 <ADC_READ+0x1458>)
 80023b2:	f00a fe87 	bl	800d0c4 <HAL_UART_Transmit_IT>
				HAL_UART_Transmit_IT(&huart4, (uint8_t *)&ADCpacket, (ADCpacket.dataSize)+2);
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <ADC_READ+0x1414>)
 80023b8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3302      	adds	r3, #2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	491f      	ldr	r1, [pc, #124]	@ (8002444 <ADC_READ+0x1414>)
 80023c6:	4831      	ldr	r0, [pc, #196]	@ (800248c <ADC_READ+0x145c>)
 80023c8:	f00a fe7c 	bl	800d0c4 <HAL_UART_Transmit_IT>
				HAL_UART_Transmit_IT(&huart8, (uint8_t *)&ADCpacket, (ADCpacket.dataSize)+2);
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <ADC_READ+0x1414>)
 80023ce:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3302      	adds	r3, #2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	491a      	ldr	r1, [pc, #104]	@ (8002444 <ADC_READ+0x1414>)
 80023dc:	482c      	ldr	r0, [pc, #176]	@ (8002490 <ADC_READ+0x1460>)
 80023de:	f00a fe71 	bl	800d0c4 <HAL_UART_Transmit_IT>
				HAL_UART_Transmit_IT(&huart5, (uint8_t *)&ADCpacket, (ADCpacket.dataSize)+2);
 80023e2:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <ADC_READ+0x1414>)
 80023e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3302      	adds	r3, #2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	4914      	ldr	r1, [pc, #80]	@ (8002444 <ADC_READ+0x1414>)
 80023f2:	4828      	ldr	r0, [pc, #160]	@ (8002494 <ADC_READ+0x1464>)
 80023f4:	f00a fe66 	bl	800d0c4 <HAL_UART_Transmit_IT>

				HAL_Delay(10);
 80023f8:	200a      	movs	r0, #10
 80023fa:	f002 fec1 	bl	8005180 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	2101      	movs	r1, #1
 8002402:	4820      	ldr	r0, [pc, #128]	@ (8002484 <ADC_READ+0x1454>)
 8002404:	f003 fa68 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2102      	movs	r1, #2
 800240c:	481d      	ldr	r0, [pc, #116]	@ (8002484 <ADC_READ+0x1454>)
 800240e:	f003 fa63 	bl	80058d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2104      	movs	r1, #4
 8002416:	481b      	ldr	r0, [pc, #108]	@ (8002484 <ADC_READ+0x1454>)
 8002418:	f003 fa5e 	bl	80058d8 <HAL_GPIO_WritePin>
				ADCpacket.dataSize=0;
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <ADC_READ+0x1414>)
 800241e:	2200      	movs	r2, #0
 8002420:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
			}

		}

		return temperature;
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <ADC_READ+0x1468>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	ee07 3a90 	vmov	s15, r3

	}
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	37a4      	adds	r7, #164	@ 0xa4
 8002432:	46bd      	mov	sp, r7
 8002434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002438:	20000334 	.word	0x20000334
 800243c:	6007fff9 	.word	0x6007fff9
 8002440:	200048dc 	.word	0x200048dc
 8002444:	20004af8 	.word	0x20004af8
 8002448:	20000348 	.word	0x20000348
 800244c:	2000034c 	.word	0x2000034c
 8002450:	20000350 	.word	0x20000350
 8002454:	20000354 	.word	0x20000354
 8002458:	20000358 	.word	0x20000358
 800245c:	2000035c 	.word	0x2000035c
 8002460:	20000360 	.word	0x20000360
 8002464:	20000364 	.word	0x20000364
 8002468:	20000368 	.word	0x20000368
 800246c:	2000036c 	.word	0x2000036c
 8002470:	20000370 	.word	0x20000370
 8002474:	20000374 	.word	0x20000374
 8002478:	08012424 	.word	0x08012424
 800247c:	20004af9 	.word	0x20004af9
 8002480:	2000038e 	.word	0x2000038e
 8002484:	42020000 	.word	0x42020000
 8002488:	20004848 	.word	0x20004848
 800248c:	2000468c 	.word	0x2000468c
 8002490:	200047b4 	.word	0x200047b4
 8002494:	20004720 	.word	0x20004720
 8002498:	20000344 	.word	0x20000344

0800249c <NAND_operation>:
uint8_t once = 1;

void NAND_operation(void);

void NAND_operation(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024a6:	4840      	ldr	r0, [pc, #256]	@ (80025a8 <NAND_operation+0x10c>)
 80024a8:	f003 fa16 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024ac:	2001      	movs	r0, #1
 80024ae:	f002 fe67 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024b8:	483b      	ldr	r0, [pc, #236]	@ (80025a8 <NAND_operation+0x10c>)
 80024ba:	f003 fa0d 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024be:	2001      	movs	r0, #1
 80024c0:	f002 fe5e 	bl	8005180 <HAL_Delay>

	if(Nandopt.Nand_flag)//nand_update
 80024c4:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <NAND_operation+0x110>)
 80024c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80024ca:	7a1b      	ldrb	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d069      	beq.n	80025a4 <NAND_operation+0x108>
	{
		//		HAL_NAND_Erase_Block(&hnand1, &nand_address);
		//		HAL_Delay(1000);
		Nandopt.Nand_flag = LOW ;
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <NAND_operation+0x110>)
 80024d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80024d6:	2200      	movs	r2, #0
 80024d8:	721a      	strb	r2, [r3, #8]
		memset(&Nandopt.NAND_read[0],0,sizeof(Nandopt.NAND_read));
 80024da:	f242 0203 	movw	r2, #8195	@ 0x2003
 80024de:	2100      	movs	r1, #0
 80024e0:	4833      	ldr	r0, [pc, #204]	@ (80025b0 <NAND_operation+0x114>)
 80024e2:	f00d feaa 	bl	801023a <memset>
		get_NAND_data(&Nandopt.NAND_write[0]);
 80024e6:	4833      	ldr	r0, [pc, #204]	@ (80025b4 <NAND_operation+0x118>)
 80024e8:	f000 f9a6 	bl	8002838 <get_NAND_data>
		//		while(1)
		//		{
		HAL_NAND_Write_Page_8b(&hnand1, &nand_address,&Nandopt.NAND_write[0], 1);
 80024ec:	2301      	movs	r3, #1
 80024ee:	4a31      	ldr	r2, [pc, #196]	@ (80025b4 <NAND_operation+0x118>)
 80024f0:	4931      	ldr	r1, [pc, #196]	@ (80025b8 <NAND_operation+0x11c>)
 80024f2:	4832      	ldr	r0, [pc, #200]	@ (80025bc <NAND_operation+0x120>)
 80024f4:	f003 fcb3 	bl	8005e5e <HAL_NAND_Write_Page_8b>
		HAL_UART_Transmit_IT(&huart5, "\n\rNAND_WRITE_DATA\n\r", strlen("NAND_READ_DATA\n\r"));
		HAL_Delay(10);
		HAL_UART_Transmit_IT(&huart5, &Nandopt.NAND_write[0], 8192);
		HAL_Delay(1000);
#endif
		HAL_NAND_Read_ID(&hnand1,&nand_details); //????
 80024f8:	4931      	ldr	r1, [pc, #196]	@ (80025c0 <NAND_operation+0x124>)
 80024fa:	4830      	ldr	r0, [pc, #192]	@ (80025bc <NAND_operation+0x120>)
 80024fc:	f003 fa9a 	bl	8005a34 <HAL_NAND_Read_ID>
		HAL_NAND_Read_ID(&hnand1,(NAND_IDTypeDef *)&Nandopt.NAND_read[0]); //????
 8002500:	492b      	ldr	r1, [pc, #172]	@ (80025b0 <NAND_operation+0x114>)
 8002502:	482e      	ldr	r0, [pc, #184]	@ (80025bc <NAND_operation+0x120>)
 8002504:	f003 fa96 	bl	8005a34 <HAL_NAND_Read_ID>
		//HAL_Delay(100);
		HAL_NAND_Read_Page_8b(&hnand1,(const NAND_AddressTypeDef  *) &nand_address,(uint8_t *)&Nandopt.NAND_read[0], 1);
 8002508:	2301      	movs	r3, #1
 800250a:	4a29      	ldr	r2, [pc, #164]	@ (80025b0 <NAND_operation+0x114>)
 800250c:	492a      	ldr	r1, [pc, #168]	@ (80025b8 <NAND_operation+0x11c>)
 800250e:	482b      	ldr	r0, [pc, #172]	@ (80025bc <NAND_operation+0x120>)
 8002510:	f003 fb48 	bl	8005ba4 <HAL_NAND_Read_Page_8b>
		HAL_UART_Transmit_IT(&huart5, "\n\rNAND_READ_DATA\n\r", strlen("NAND_READ_DATA\n\r"));
		HAL_Delay(10);
		HAL_UART_Transmit_IT(&huart5, &Nandopt.NAND_read[0], 8192);
		HAL_Delay(1000);
#endif
		nand_address.Page++;
 8002514:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <NAND_operation+0x11c>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <NAND_operation+0x11c>)
 800251e:	801a      	strh	r2, [r3, #0]

		if(Nandopt.NAND_write[4500] != Nandopt.NAND_read[4500]) // page size 8192bytes
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <NAND_operation+0x110>)
 8002522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002526:	f893 2195 	ldrb.w	r2, [r3, #405]	@ 0x195
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <NAND_operation+0x110>)
 800252c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002530:	f893 3198 	ldrb.w	r3, [r3, #408]	@ 0x198
 8002534:	429a      	cmp	r2, r3
 8002536:	d00a      	beq.n	800254e <NAND_operation+0xb2>
		{
			nand_address.Page = 0;
 8002538:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <NAND_operation+0x11c>)
 800253a:	2200      	movs	r2, #0
 800253c:	801a      	strh	r2, [r3, #0]
			HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800253e:	491e      	ldr	r1, [pc, #120]	@ (80025b8 <NAND_operation+0x11c>)
 8002540:	481e      	ldr	r0, [pc, #120]	@ (80025bc <NAND_operation+0x120>)
 8002542:	f003 fde7 	bl	8006114 <HAL_NAND_Erase_Block>
			HAL_Delay(1000);
 8002546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800254a:	f002 fe19 	bl	8005180 <HAL_Delay>
		}
		if(nand_address.Page> 127) //1block =128 pages
 800254e:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <NAND_operation+0x11c>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	2b7f      	cmp	r3, #127	@ 0x7f
 8002554:	d910      	bls.n	8002578 <NAND_operation+0xdc>
		{
			nand_address.Block ++;
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <NAND_operation+0x11c>)
 8002558:	889b      	ldrh	r3, [r3, #4]
 800255a:	3301      	adds	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <NAND_operation+0x11c>)
 8002560:	809a      	strh	r2, [r3, #4]
			nand_address.Page  = 0;
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <NAND_operation+0x11c>)
 8002564:	2200      	movs	r2, #0
 8002566:	801a      	strh	r2, [r3, #0]
			HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8002568:	4913      	ldr	r1, [pc, #76]	@ (80025b8 <NAND_operation+0x11c>)
 800256a:	4814      	ldr	r0, [pc, #80]	@ (80025bc <NAND_operation+0x120>)
 800256c:	f003 fdd2 	bl	8006114 <HAL_NAND_Erase_Block>
			HAL_Delay(1000);
 8002570:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002574:	f002 fe04 	bl	8005180 <HAL_Delay>
		}
		if(nand_address.Block> 2047)
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <NAND_operation+0x11c>)
 800257a:	889b      	ldrh	r3, [r3, #4]
 800257c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002580:	d310      	bcc.n	80025a4 <NAND_operation+0x108>
		{
			nand_address.Plane ++;
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <NAND_operation+0x11c>)
 8002584:	885b      	ldrh	r3, [r3, #2]
 8002586:	3301      	adds	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <NAND_operation+0x11c>)
 800258c:	805a      	strh	r2, [r3, #2]
			nand_address.Block =0;
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <NAND_operation+0x11c>)
 8002590:	2200      	movs	r2, #0
 8002592:	809a      	strh	r2, [r3, #4]
			HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8002594:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <NAND_operation+0x11c>)
 8002596:	4809      	ldr	r0, [pc, #36]	@ (80025bc <NAND_operation+0x120>)
 8002598:	f003 fdbc 	bl	8006114 <HAL_NAND_Erase_Block>
			HAL_Delay(1000);
 800259c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025a0:	f002 fdee 	bl	8005180 <HAL_Delay>
		}
		//		}
	}

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	42021000 	.word	0x42021000
 80025ac:	20000390 	.word	0x20000390
 80025b0:	20002394 	.word	0x20002394
 80025b4:	20000391 	.word	0x20000391
 80025b8:	200043a0 	.word	0x200043a0
 80025bc:	20004934 	.word	0x20004934
 80025c0:	2000439c 	.word	0x2000439c

080025c4 <SRAM_operation>:
void time_setter( );
void update_NAND_addr();
void get_NAND_data(uint8_t *);

uint8_t SRAM_operation()
{
 80025c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c8:	b0b3      	sub	sp, #204	@ 0xcc
 80025ca:	af1c      	add	r7, sp, #112	@ 0x70

	uint8_t time_data[8]={0};
 80025cc:	2300      	movs	r3, #0
 80025ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80025d0:	2300      	movs	r3, #0
 80025d2:	657b      	str	r3, [r7, #84]	@ 0x54
	//	Erase_SRAM(&hsram1);
	//HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&cur_sec,1);
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data,7);
 80025d4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80025d8:	2307      	movs	r3, #7
 80025da:	4980      	ldr	r1, [pc, #512]	@ (80027dc <SRAM_operation+0x218>)
 80025dc:	4880      	ldr	r0, [pc, #512]	@ (80027e0 <SRAM_operation+0x21c>)
 80025de:	f00a fc91 	bl	800cf04 <HAL_SRAM_Read_8b>

	if(time_data[0] != old_sec)
 80025e2:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80025e6:	4b7f      	ldr	r3, [pc, #508]	@ (80027e4 <SRAM_operation+0x220>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	f000 80e7 	beq.w	80027be <SRAM_operation+0x1fa>
	{
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 80025f0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025f4:	2100      	movs	r1, #0
 80025f6:	487c      	ldr	r0, [pc, #496]	@ (80027e8 <SRAM_operation+0x224>)
 80025f8:	f00d fe1f 	bl	801023a <memset>
		SRAMopt.Startbyte=SoF;
 80025fc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ec <SRAM_operation+0x228>)
 80025fe:	2240      	movs	r2, #64	@ 0x40
 8002600:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002602:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <SRAM_operation+0x22c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ffae 	bl	8000568 <__aeabi_f2d>
 800260c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8002610:	4b78      	ldr	r3, [pc, #480]	@ (80027f4 <SRAM_operation+0x230>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ffa7 	bl	8000568 <__aeabi_f2d>
 800261a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 800261e:	4b76      	ldr	r3, [pc, #472]	@ (80027f8 <SRAM_operation+0x234>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ffa0 	bl	8000568 <__aeabi_f2d>
 8002628:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800262c:	4b73      	ldr	r3, [pc, #460]	@ (80027fc <SRAM_operation+0x238>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff99 	bl	8000568 <__aeabi_f2d>
 8002636:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 800263a:	4b71      	ldr	r3, [pc, #452]	@ (8002800 <SRAM_operation+0x23c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff92 	bl	8000568 <__aeabi_f2d>
 8002644:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8002648:	4b6e      	ldr	r3, [pc, #440]	@ (8002804 <SRAM_operation+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff8b 	bl	8000568 <__aeabi_f2d>
 8002652:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002656:	4b6c      	ldr	r3, [pc, #432]	@ (8002808 <SRAM_operation+0x244>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff84 	bl	8000568 <__aeabi_f2d>
 8002660:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002664:	4b69      	ldr	r3, [pc, #420]	@ (800280c <SRAM_operation+0x248>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff7d 	bl	8000568 <__aeabi_f2d>
 800266e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002672:	4b67      	ldr	r3, [pc, #412]	@ (8002810 <SRAM_operation+0x24c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff76 	bl	8000568 <__aeabi_f2d>
 800267c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002680:	4b64      	ldr	r3, [pc, #400]	@ (8002814 <SRAM_operation+0x250>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff6f 	bl	8000568 <__aeabi_f2d>
 800268a:	4682      	mov	sl, r0
 800268c:	468b      	mov	fp, r1
 800268e:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <SRAM_operation+0x254>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff68 	bl	8000568 <__aeabi_f2d>
 8002698:	4680      	mov	r8, r0
 800269a:	4689      	mov	r9, r1
 800269c:	4b5f      	ldr	r3, [pc, #380]	@ (800281c <SRAM_operation+0x258>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff61 	bl	8000568 <__aeabi_f2d>
				"{\"TS1\": \"%.2f\", \"TS2\": \"%.2f\", \"TS3\": \"%.2f\", \"TS4\": \"%.2f\", \"TS5\": \"%.2f\", "
				"\"TS6\": \"%.2f\", \"TS7\": \"%.2f\", \"TS8\": \"%.2f\", \"TS9\": \"%.2f\", \"TS10\": \"%.2f\", "
				"\"TS11\": \"%.2f\", \"TS12\": \"%.2f\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"}\n\r",
				temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80026a6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026aa:	607b      	str	r3, [r7, #4]
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80026ac:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026b0:	461e      	mov	r6, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80026b2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026b6:	461d      	mov	r5, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80026b8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026bc:	461c      	mov	r4, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80026be:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026c2:	461a      	mov	r2, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 80026c4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80026ca:	921a      	str	r2, [sp, #104]	@ 0x68
 80026cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80026ce:	9518      	str	r5, [sp, #96]	@ 0x60
 80026d0:	9617      	str	r6, [sp, #92]	@ 0x5c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80026d6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80026da:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 80026de:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 80026e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80026e6:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80026ea:	ed97 7b04 	vldr	d7, [r7, #16]
 80026ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80026f2:	ed97 7b06 	vldr	d7, [r7, #24]
 80026f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80026fa:	ed97 7b08 	vldr	d7, [r7, #32]
 80026fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002702:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002706:	ed8d 7b06 	vstr	d7, [sp, #24]
 800270a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800270e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002712:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002716:	ed8d 7b02 	vstr	d7, [sp, #8]
 800271a:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800271e:	ed8d 7b00 	vstr	d7, [sp]
 8002722:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002726:	493e      	ldr	r1, [pc, #248]	@ (8002820 <SRAM_operation+0x25c>)
 8002728:	482f      	ldr	r0, [pc, #188]	@ (80027e8 <SRAM_operation+0x224>)
 800272a:	f00d fd23 	bl	8010174 <siprintf>
 800272e:	4603      	mov	r3, r0
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <SRAM_operation+0x228>)
 8002734:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-2]=EoF;
 8002738:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <SRAM_operation+0x228>)
 800273a:	f893 312f 	ldrb.w	r3, [r3, #303]	@ 0x12f
 800273e:	3b02      	subs	r3, #2
 8002740:	4a2a      	ldr	r2, [pc, #168]	@ (80027ec <SRAM_operation+0x228>)
 8002742:	4413      	add	r3, r2
 8002744:	2224      	movs	r2, #36	@ 0x24
 8002746:	705a      	strb	r2, [r3, #1]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,(SRAMopt.Idxcount));
 8002748:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <SRAM_operation+0x260>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <SRAM_operation+0x228>)
 8002750:	f893 312f 	ldrb.w	r3, [r3, #303]	@ 0x12f
 8002754:	4a25      	ldr	r2, [pc, #148]	@ (80027ec <SRAM_operation+0x228>)
 8002756:	4822      	ldr	r0, [pc, #136]	@ (80027e0 <SRAM_operation+0x21c>)
 8002758:	f00a fc1e 	bl	800cf98 <HAL_SRAM_Write_8b>
		sram_location = sram_location + (SRAMopt.Idxcount);//strlen((char *)SRAMopt.SRAM_buffer);
 800275c:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <SRAM_operation+0x228>)
 800275e:	f893 312f 	ldrb.w	r3, [r3, #303]	@ 0x12f
 8002762:	461a      	mov	r2, r3
 8002764:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <SRAM_operation+0x260>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4413      	add	r3, r2
 800276a:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <SRAM_operation+0x260>)
 800276c:	6013      	str	r3, [r2, #0]
		size_counter += strlen((char *)SRAMopt.SRAM_buffer);
 800276e:	481e      	ldr	r0, [pc, #120]	@ (80027e8 <SRAM_operation+0x224>)
 8002770:	f7fd fd8e 	bl	8000290 <strlen>
 8002774:	4603      	mov	r3, r0
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <SRAM_operation+0x264>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	4413      	add	r3, r2
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <SRAM_operation+0x264>)
 8002782:	801a      	strh	r2, [r3, #0]
		if(size_counter + strlen((char *)SRAMopt.SRAM_buffer) > NAND_PAGE_SIZE)
 8002784:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <SRAM_operation+0x264>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	461c      	mov	r4, r3
 800278a:	4817      	ldr	r0, [pc, #92]	@ (80027e8 <SRAM_operation+0x224>)
 800278c:	f7fd fd80 	bl	8000290 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	4423      	add	r3, r4
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002798:	d90d      	bls.n	80027b6 <SRAM_operation+0x1f2>
		{
			sram_location = sram_base_location ;
 800279a:	4b24      	ldr	r3, [pc, #144]	@ (800282c <SRAM_operation+0x268>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <SRAM_operation+0x260>)
 80027a0:	6013      	str	r3, [r2, #0]
			size_counter = 0 ;
 80027a2:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <SRAM_operation+0x264>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	801a      	strh	r2, [r3, #0]
			Nandopt.Nand_flag = HIGH ;	//nand_update = 1;
 80027a8:	4b21      	ldr	r3, [pc, #132]	@ (8002830 <SRAM_operation+0x26c>)
 80027aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027ae:	2201      	movs	r2, #1
 80027b0:	721a      	strb	r2, [r3, #8]
			update_NAND_addr();
 80027b2:	f000 f88b 	bl	80028cc <update_NAND_addr>

		}

		old_sec = time_data[0];
 80027b6:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <SRAM_operation+0x220>)
 80027bc:	701a      	strb	r2, [r3, #0]

	}

	if(time_set)
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <SRAM_operation+0x270>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <SRAM_operation+0x20c>
	{
		time_set = 0 ;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <SRAM_operation+0x270>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
		time_setter();
 80027cc:	f000 f890 	bl	80028f0 <time_setter>

	}
	return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	375c      	adds	r7, #92	@ 0x5c
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027dc:	6007fff9 	.word	0x6007fff9
 80027e0:	200048dc 	.word	0x200048dc
 80027e4:	200044da 	.word	0x200044da
 80027e8:	200043a9 	.word	0x200043a9
 80027ec:	200043a8 	.word	0x200043a8
 80027f0:	20000348 	.word	0x20000348
 80027f4:	2000034c 	.word	0x2000034c
 80027f8:	20000350 	.word	0x20000350
 80027fc:	20000354 	.word	0x20000354
 8002800:	20000358 	.word	0x20000358
 8002804:	2000035c 	.word	0x2000035c
 8002808:	20000360 	.word	0x20000360
 800280c:	20000364 	.word	0x20000364
 8002810:	20000368 	.word	0x20000368
 8002814:	2000036c 	.word	0x2000036c
 8002818:	20000370 	.word	0x20000370
 800281c:	20000374 	.word	0x20000374
 8002820:	08012508 	.word	0x08012508
 8002824:	20000004 	.word	0x20000004
 8002828:	200044d8 	.word	0x200044d8
 800282c:	20000008 	.word	0x20000008
 8002830:	20000390 	.word	0x20000390
 8002834:	20004c4a 	.word	0x20004c4a

08002838 <get_NAND_data>:


void get_NAND_data(uint8_t *sram_data)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	3304      	adds	r3, #4
 8002854:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f00d fced 	bl	801023a <memset>
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 8002860:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <get_NAND_data+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	461a      	mov	r2, r3
 800286c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002870:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8002874:	480a      	ldr	r0, [pc, #40]	@ (80028a0 <get_NAND_data+0x68>)
 8002876:	f00a fb45 	bl	800cf04 <HAL_SRAM_Read_8b>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <get_NAND_data+0x64>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	f107 0208 	add.w	r2, r7, #8
 8002884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002888:	4805      	ldr	r0, [pc, #20]	@ (80028a0 <get_NAND_data+0x68>)
 800288a:	f00a fb85 	bl	800cf98 <HAL_SRAM_Write_8b>
	//HAL_UART_Transmit_IT(&huart8, sram_data, strlen(sram_data));
	//	HAL_Delay(100);
}
 800288e:	bf00      	nop
 8002890:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000008 	.word	0x20000008
 80028a0:	200048dc 	.word	0x200048dc

080028a4 <get_NAND_address>:

uint8_t get_NAND_address(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0

	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr,(uint8_t *)&nand_address, sizeof(nand_address));
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <get_NAND_address+0x1c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	2306      	movs	r3, #6
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <get_NAND_address+0x20>)
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <get_NAND_address+0x24>)
 80028b4:	f00a fb26 	bl	800cf04 <HAL_SRAM_Read_8b>
	return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	200043a0 	.word	0x200043a0
 80028c8:	200048dc 	.word	0x200048dc

080028cc <update_NAND_addr>:


void update_NAND_addr()
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr, (uint8_t * )&nand_address, sizeof(nand_address));
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <update_NAND_addr+0x18>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	2306      	movs	r3, #6
 80028d8:	4a03      	ldr	r2, [pc, #12]	@ (80028e8 <update_NAND_addr+0x1c>)
 80028da:	4804      	ldr	r0, [pc, #16]	@ (80028ec <update_NAND_addr+0x20>)
 80028dc:	f00a fb5c 	bl	800cf98 <HAL_SRAM_Write_8b>

}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	200043a0 	.word	0x200043a0
 80028ec:	200048dc 	.word	0x200048dc

080028f0 <time_setter>:

/******************/

void time_setter( )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	S D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  E
	uint8_t day, month, year, hours, minutes, seconds;
	if (time_str[0] == 'S' && time_str[20] == 'E' && time_str[5] == '-' && time_str[8] == '-' && time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') // && time_str[11] == ' ' &&
 80028f6:	4b76      	ldr	r3, [pc, #472]	@ (8002ad0 <time_setter+0x1e0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b53      	cmp	r3, #83	@ 0x53
 80028fc:	f040 80e4 	bne.w	8002ac8 <time_setter+0x1d8>
 8002900:	4b73      	ldr	r3, [pc, #460]	@ (8002ad0 <time_setter+0x1e0>)
 8002902:	7d1b      	ldrb	r3, [r3, #20]
 8002904:	2b45      	cmp	r3, #69	@ 0x45
 8002906:	f040 80df 	bne.w	8002ac8 <time_setter+0x1d8>
 800290a:	4b71      	ldr	r3, [pc, #452]	@ (8002ad0 <time_setter+0x1e0>)
 800290c:	795b      	ldrb	r3, [r3, #5]
 800290e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002910:	f040 80da 	bne.w	8002ac8 <time_setter+0x1d8>
 8002914:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad0 <time_setter+0x1e0>)
 8002916:	7a1b      	ldrb	r3, [r3, #8]
 8002918:	2b2d      	cmp	r3, #45	@ 0x2d
 800291a:	f040 80d5 	bne.w	8002ac8 <time_setter+0x1d8>
 800291e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad0 <time_setter+0x1e0>)
 8002920:	7adb      	ldrb	r3, [r3, #11]
 8002922:	2b20      	cmp	r3, #32
 8002924:	f040 80d0 	bne.w	8002ac8 <time_setter+0x1d8>
 8002928:	4b69      	ldr	r3, [pc, #420]	@ (8002ad0 <time_setter+0x1e0>)
 800292a:	7b9b      	ldrb	r3, [r3, #14]
 800292c:	2b3a      	cmp	r3, #58	@ 0x3a
 800292e:	f040 80cb 	bne.w	8002ac8 <time_setter+0x1d8>
 8002932:	4b67      	ldr	r3, [pc, #412]	@ (8002ad0 <time_setter+0x1e0>)
 8002934:	7c5b      	ldrb	r3, [r3, #17]
 8002936:	2b3a      	cmp	r3, #58	@ 0x3a
 8002938:	f040 80c6 	bne.w	8002ac8 <time_setter+0x1d8>
	{
		month = (time_str[6] - 48) * 16 + (time_str[7] - 48);
 800293c:	4b64      	ldr	r3, [pc, #400]	@ (8002ad0 <time_setter+0x1e0>)
 800293e:	799b      	ldrb	r3, [r3, #6]
 8002940:	3b30      	subs	r3, #48	@ 0x30
 8002942:	b2db      	uxtb	r3, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <time_setter+0x1e0>)
 800294a:	79db      	ldrb	r3, [r3, #7]
 800294c:	4413      	add	r3, r2
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3b30      	subs	r3, #48	@ 0x30
 8002952:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - 48) * 16 + (time_str[4] - 48);
 8002954:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad0 <time_setter+0x1e0>)
 8002956:	78db      	ldrb	r3, [r3, #3]
 8002958:	3b30      	subs	r3, #48	@ 0x30
 800295a:	b2db      	uxtb	r3, r3
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad0 <time_setter+0x1e0>)
 8002962:	791b      	ldrb	r3, [r3, #4]
 8002964:	4413      	add	r3, r2
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3b30      	subs	r3, #48	@ 0x30
 800296a:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - 48) * 16 + (time_str[10] - 48);
 800296c:	4b58      	ldr	r3, [pc, #352]	@ (8002ad0 <time_setter+0x1e0>)
 800296e:	7a5b      	ldrb	r3, [r3, #9]
 8002970:	3b30      	subs	r3, #48	@ 0x30
 8002972:	b2db      	uxtb	r3, r3
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b55      	ldr	r3, [pc, #340]	@ (8002ad0 <time_setter+0x1e0>)
 800297a:	7a9b      	ldrb	r3, [r3, #10]
 800297c:	4413      	add	r3, r2
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3b30      	subs	r3, #48	@ 0x30
 8002982:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - 48) * 16 + (time_str[16] - 48);
 8002984:	4b52      	ldr	r3, [pc, #328]	@ (8002ad0 <time_setter+0x1e0>)
 8002986:	7bdb      	ldrb	r3, [r3, #15]
 8002988:	3b30      	subs	r3, #48	@ 0x30
 800298a:	b2db      	uxtb	r3, r3
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad0 <time_setter+0x1e0>)
 8002992:	7c1b      	ldrb	r3, [r3, #16]
 8002994:	4413      	add	r3, r2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3b30      	subs	r3, #48	@ 0x30
 800299a:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - 48) * 16 + (time_str[13] - 48);
 800299c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <time_setter+0x1e0>)
 800299e:	7b1b      	ldrb	r3, [r3, #12]
 80029a0:	3b30      	subs	r3, #48	@ 0x30
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <time_setter+0x1e0>)
 80029aa:	7b5b      	ldrb	r3, [r3, #13]
 80029ac:	4413      	add	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3b30      	subs	r3, #48	@ 0x30
 80029b2:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - 48) * 16 + (time_str[19] - 48);
 80029b4:	4b46      	ldr	r3, [pc, #280]	@ (8002ad0 <time_setter+0x1e0>)
 80029b6:	7c9b      	ldrb	r3, [r3, #18]
 80029b8:	3b30      	subs	r3, #48	@ 0x30
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <time_setter+0x1e0>)
 80029c2:	7cdb      	ldrb	r3, [r3, #19]
 80029c4:	4413      	add	r3, r2
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3b30      	subs	r3, #48	@ 0x30
 80029ca:	70bb      	strb	r3, [r7, #2]


		sramAddr = century;//0x60000000 | 0x7FFF8;
 80029cc:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <time_setter+0x1e4>)
 80029ce:	4a42      	ldr	r2, [pc, #264]	@ (8002ad8 <time_setter+0x1e8>)
 80029d0:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 80029d2:	4b42      	ldr	r3, [pc, #264]	@ (8002adc <time_setter+0x1ec>)
 80029d4:	2280      	movs	r2, #128	@ 0x80
 80029d6:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 80029d8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <time_setter+0x1e4>)
 80029da:	6819      	ldr	r1, [r3, #0]
 80029dc:	4b40      	ldr	r3, [pc, #256]	@ (8002ae0 <time_setter+0x1f0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a3e      	ldr	r2, [pc, #248]	@ (8002adc <time_setter+0x1ec>)
 80029e2:	4840      	ldr	r0, [pc, #256]	@ (8002ae4 <time_setter+0x1f4>)
 80029e4:	f00a fad8 	bl	800cf98 <HAL_SRAM_Write_8b>


		sramAddr = sec_addr;//0x60000000 | 0x7FFF9;
 80029e8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad4 <time_setter+0x1e4>)
 80029ea:	4a3f      	ldr	r2, [pc, #252]	@ (8002ae8 <time_setter+0x1f8>)
 80029ec:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 80029ee:	4a3b      	ldr	r2, [pc, #236]	@ (8002adc <time_setter+0x1ec>)
 80029f0:	78bb      	ldrb	r3, [r7, #2]
 80029f2:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 80029f4:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <time_setter+0x1e4>)
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	4b39      	ldr	r3, [pc, #228]	@ (8002ae0 <time_setter+0x1f0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a37      	ldr	r2, [pc, #220]	@ (8002adc <time_setter+0x1ec>)
 80029fe:	4839      	ldr	r0, [pc, #228]	@ (8002ae4 <time_setter+0x1f4>)
 8002a00:	f00a faca 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = min_addr;//0x60000000 | 0x7FFFa;
 8002a04:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <time_setter+0x1e4>)
 8002a06:	4a39      	ldr	r2, [pc, #228]	@ (8002aec <time_setter+0x1fc>)
 8002a08:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  minutes;
 8002a0a:	4a34      	ldr	r2, [pc, #208]	@ (8002adc <time_setter+0x1ec>)
 8002a0c:	793b      	ldrb	r3, [r7, #4]
 8002a0e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002a10:	4b30      	ldr	r3, [pc, #192]	@ (8002ad4 <time_setter+0x1e4>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <time_setter+0x1f0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a30      	ldr	r2, [pc, #192]	@ (8002adc <time_setter+0x1ec>)
 8002a1a:	4832      	ldr	r0, [pc, #200]	@ (8002ae4 <time_setter+0x1f4>)
 8002a1c:	f00a fabc 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = hr_addr;//0x60000000 | 0x7FFFb;
 8002a20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <time_setter+0x1e4>)
 8002a22:	4a33      	ldr	r2, [pc, #204]	@ (8002af0 <time_setter+0x200>)
 8002a24:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  hours;
 8002a26:	4a2d      	ldr	r2, [pc, #180]	@ (8002adc <time_setter+0x1ec>)
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002a2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <time_setter+0x1e4>)
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <time_setter+0x1f0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	@ (8002adc <time_setter+0x1ec>)
 8002a36:	482b      	ldr	r0, [pc, #172]	@ (8002ae4 <time_setter+0x1f4>)
 8002a38:	f00a faae 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = day_addr;//0x60000000 | 0x7FFFc;
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <time_setter+0x1e4>)
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002af4 <time_setter+0x204>)
 8002a40:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 8002a42:	4b26      	ldr	r3, [pc, #152]	@ (8002adc <time_setter+0x1ec>)
 8002a44:	2202      	movs	r2, #2
 8002a46:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002a48:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <time_setter+0x1e4>)
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <time_setter+0x1f0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <time_setter+0x1ec>)
 8002a52:	4824      	ldr	r0, [pc, #144]	@ (8002ae4 <time_setter+0x1f4>)
 8002a54:	f00a faa0 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = date_addr;//0x60000000 | 0x7FFFd;
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <time_setter+0x1e4>)
 8002a5a:	4a27      	ldr	r2, [pc, #156]	@ (8002af8 <time_setter+0x208>)
 8002a5c:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  day;
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002adc <time_setter+0x1ec>)
 8002a60:	797b      	ldrb	r3, [r7, #5]
 8002a62:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002a64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <time_setter+0x1e4>)
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <time_setter+0x1f0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002adc <time_setter+0x1ec>)
 8002a6e:	481d      	ldr	r0, [pc, #116]	@ (8002ae4 <time_setter+0x1f4>)
 8002a70:	f00a fa92 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = month_addr;//0x60000000 | 0x7FFFe;
 8002a74:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <time_setter+0x1e4>)
 8002a76:	4a21      	ldr	r2, [pc, #132]	@ (8002afc <time_setter+0x20c>)
 8002a78:	601a      	str	r2, [r3, #0]
		pSrcBuffer =   month;
 8002a7a:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <time_setter+0x1ec>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002a80:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <time_setter+0x1e4>)
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <time_setter+0x1f0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a14      	ldr	r2, [pc, #80]	@ (8002adc <time_setter+0x1ec>)
 8002a8a:	4816      	ldr	r0, [pc, #88]	@ (8002ae4 <time_setter+0x1f4>)
 8002a8c:	f00a fa84 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = year_addr;//0x60000000 | 0x7FFFf;
 8002a90:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <time_setter+0x1e4>)
 8002a92:	4a1b      	ldr	r2, [pc, #108]	@ (8002b00 <time_setter+0x210>)
 8002a94:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  year ;
 8002a96:	4a11      	ldr	r2, [pc, #68]	@ (8002adc <time_setter+0x1ec>)
 8002a98:	79bb      	ldrb	r3, [r7, #6]
 8002a9a:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <time_setter+0x1e4>)
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <time_setter+0x1f0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <time_setter+0x1ec>)
 8002aa6:	480f      	ldr	r0, [pc, #60]	@ (8002ae4 <time_setter+0x1f4>)
 8002aa8:	f00a fa76 	bl	800cf98 <HAL_SRAM_Write_8b>

		sramAddr = century;//0x60000000 | 0x7FFF8;
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <time_setter+0x1e4>)
 8002aae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <time_setter+0x1e8>)
 8002ab0:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <time_setter+0x1ec>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <time_setter+0x1e4>)
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <time_setter+0x1f0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a06      	ldr	r2, [pc, #24]	@ (8002adc <time_setter+0x1ec>)
 8002ac2:	4808      	ldr	r0, [pc, #32]	@ (8002ae4 <time_setter+0x1f4>)
 8002ac4:	f00a fa68 	bl	800cf98 <HAL_SRAM_Write_8b>

	}

}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20004c2c 	.word	0x20004c2c
 8002ad4:	20004974 	.word	0x20004974
 8002ad8:	6007fff8 	.word	0x6007fff8
 8002adc:	20000010 	.word	0x20000010
 8002ae0:	20000014 	.word	0x20000014
 8002ae4:	200048dc 	.word	0x200048dc
 8002ae8:	6007fff9 	.word	0x6007fff9
 8002aec:	6007fffa 	.word	0x6007fffa
 8002af0:	6007fffb 	.word	0x6007fffb
 8002af4:	6007fffc 	.word	0x6007fffc
 8002af8:	6007fffd 	.word	0x6007fffd
 8002afc:	6007fffe 	.word	0x6007fffe
 8002b00:	6007ffff 	.word	0x6007ffff

08002b04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b08:	f002 fa7c 	bl	8005004 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b0c:	f000 f8a0 	bl	8002c50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b10:	f000 fc0e 	bl	8003330 <MX_GPIO_Init>
	MX_FMC_Init();
 8002b14:	f000 fb40 	bl	8003198 <MX_FMC_Init>
	MX_SPI2_Init();
 8002b18:	f000 f90a 	bl	8002d30 <MX_SPI2_Init>
	MX_SPI3_Init();
 8002b1c:	f000 f95e 	bl	8002ddc <MX_SPI3_Init>
	MX_SPI5_Init();
 8002b20:	f000 f9b2 	bl	8002e88 <MX_SPI5_Init>
	MX_UART4_Init();
 8002b24:	f000 fa06 	bl	8002f34 <MX_UART4_Init>
	MX_UART5_Init();
 8002b28:	f000 fa50 	bl	8002fcc <MX_UART5_Init>
	MX_UART8_Init();
 8002b2c:	f000 fa9a 	bl	8003064 <MX_UART8_Init>
	MX_USART10_UART_Init();
 8002b30:	f000 fae6 	bl	8003100 <MX_USART10_UART_Init>
	// NVIC configuration for USART10
	HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2101      	movs	r1, #1
 8002b38:	2056      	movs	r0, #86	@ 0x56
 8002b3a:	f002 fbfd 	bl	8005338 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002b3e:	2056      	movs	r0, #86	@ 0x56
 8002b40:	f002 fc14 	bl	800536c <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN 2 */
	UART_InitAllHandlers();
 8002b44:	f001 fa18 	bl	8003f78 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = ((uint32_t *)(0x60000000 | 0x7FFF8));
 8002b48:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <main+0x124>)
 8002b4a:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <main+0x128>)
 8002b4c:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 8002b4e:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <main+0x12c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002b54:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <main+0x124>)
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4a35      	ldr	r2, [pc, #212]	@ (8002c30 <main+0x12c>)
 8002b5c:	4835      	ldr	r0, [pc, #212]	@ (8002c34 <main+0x130>)
 8002b5e:	f00a fa1b 	bl	800cf98 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 8002b62:	4835      	ldr	r0, [pc, #212]	@ (8002c38 <main+0x134>)
 8002b64:	f002 ffe4 	bl	8005b30 <HAL_NAND_Reset>

	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2104      	movs	r1, #4
 8002b6c:	4833      	ldr	r0, [pc, #204]	@ (8002c3c <main+0x138>)
 8002b6e:	f002 feb3 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f002 fb04 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	482f      	ldr	r0, [pc, #188]	@ (8002c3c <main+0x138>)
 8002b7e:	f002 feab 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f002 fafc 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	482b      	ldr	r0, [pc, #172]	@ (8002c3c <main+0x138>)
 8002b8e:	f002 fea3 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f002 faf4 	bl	8005180 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b9e:	4828      	ldr	r0, [pc, #160]	@ (8002c40 <main+0x13c>)
 8002ba0:	f002 fe9a 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f002 faeb 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bb0:	4823      	ldr	r0, [pc, #140]	@ (8002c40 <main+0x13c>)
 8002bb2:	f002 fe91 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f002 fae2 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bc2:	481f      	ldr	r0, [pc, #124]	@ (8002c40 <main+0x13c>)
 8002bc4:	f002 fe88 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f002 fad9 	bl	8005180 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bd4:	481b      	ldr	r0, [pc, #108]	@ (8002c44 <main+0x140>)
 8002bd6:	f002 fe7f 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f002 fad0 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002be6:	4817      	ldr	r0, [pc, #92]	@ (8002c44 <main+0x140>)
 8002be8:	f002 fe76 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f002 fac7 	bl	8005180 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bf8:	4812      	ldr	r0, [pc, #72]	@ (8002c44 <main+0x140>)
 8002bfa:	f002 fe6d 	bl	80058d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002bfe:	200a      	movs	r0, #10
 8002c00:	f002 fabe 	bl	8005180 <HAL_Delay>
	get_NAND_address();
 8002c04:	f7ff fe4e 	bl	80028a4 <get_NAND_address>
	//	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
	memset(command_str,0,sizeof(command_str));
 8002c08:	220f      	movs	r2, #15
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	480e      	ldr	r0, [pc, #56]	@ (8002c48 <main+0x144>)
 8002c0e:	f00d fb14 	bl	801023a <memset>
	while (1)
	{
				ATP_UART=LOW;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <main+0x148>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
				ADC_operation();
 8002c18:	f7fe f9b2 	bl	8000f80 <ADC_operation>
				NAND_operation();
 8002c1c:	f7ff fc3e 	bl	800249c <NAND_operation>
				SRAM_operation();
 8002c20:	f7ff fcd0 	bl	80025c4 <SRAM_operation>
				ATP_UART=LOW;
 8002c24:	bf00      	nop
 8002c26:	e7f4      	b.n	8002c12 <main+0x10e>
 8002c28:	20004974 	.word	0x20004974
 8002c2c:	6007fff8 	.word	0x6007fff8
 8002c30:	20000010 	.word	0x20000010
 8002c34:	200048dc 	.word	0x200048dc
 8002c38:	20004934 	.word	0x20004934
 8002c3c:	42020800 	.word	0x42020800
 8002c40:	42021800 	.word	0x42021800
 8002c44:	42020000 	.word	0x42020000
 8002c48:	20000378 	.word	0x20000378
 8002c4c:	2000038e 	.word	0x2000038e

08002c50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b09c      	sub	sp, #112	@ 0x70
 8002c54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c56:	f107 0320 	add.w	r3, r7, #32
 8002c5a:	2250      	movs	r2, #80	@ 0x50
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f00d faeb 	bl	801023a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002c76:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <SystemClock_Config+0xd8>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <SystemClock_Config+0xd8>)
 8002c7c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002c80:	6113      	str	r3, [r2, #16]
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <SystemClock_Config+0xd8>)
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002c8e:	bf00      	nop
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <SystemClock_Config+0xd8>)
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d1f9      	bne.n	8002c90 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002caa:	2303      	movs	r3, #3
 8002cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002cb2:	2350      	movs	r3, #80	@ 0x50
 8002cb4:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cce:	f107 0320 	add.w	r3, r7, #32
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fae0 	bl	8006298 <HAL_RCC_OscConfig>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002cde:	f001 fba4 	bl	800442a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce2:	231f      	movs	r3, #31
 8002ce4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	2105      	movs	r1, #5
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 ff01 	bl	8006b08 <HAL_RCC_ClockConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002d0c:	f001 fb8d 	bl	800442a <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <SystemClock_Config+0xdc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d18:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <SystemClock_Config+0xdc>)
 8002d1a:	f043 0320 	orr.w	r3, r3, #32
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	3770      	adds	r7, #112	@ 0x70
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	44020800 	.word	0x44020800
 8002d2c:	40022000 	.word	0x40022000

08002d30 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <MX_SPI2_Init+0xa8>)
 8002d38:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d3a:	4b26      	ldr	r3, [pc, #152]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d40:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d48:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d5a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d62:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d6a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d72:	4b18      	ldr	r3, [pc, #96]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d78:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d90:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d96:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002da2:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002da8:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002db4:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002dc0:	4804      	ldr	r0, [pc, #16]	@ (8002dd4 <MX_SPI2_Init+0xa4>)
 8002dc2:	f009 fa35 	bl	800c230 <HAL_SPI_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 8002dcc:	f001 fb2d 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200044dc 	.word	0x200044dc
 8002dd8:	40003800 	.word	0x40003800

08002ddc <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002de0:	4b27      	ldr	r3, [pc, #156]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002de2:	4a28      	ldr	r2, [pc, #160]	@ (8002e84 <MX_SPI3_Init+0xa8>)
 8002de4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002de8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002dec:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002dee:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df4:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002df6:	2207      	movs	r2, #7
 8002df8:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e06:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e0e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002e16:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e24:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002e60:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e6c:	4804      	ldr	r0, [pc, #16]	@ (8002e80 <MX_SPI3_Init+0xa4>)
 8002e6e:	f009 f9df 	bl	800c230 <HAL_SPI_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 8002e78:	f001 fad7 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000456c 	.word	0x2000456c
 8002e84:	40003c00 	.word	0x40003c00

08002e88 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8002e8c:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002e8e:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <MX_SPI5_Init+0xa8>)
 8002e90:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002e94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e98:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002eac:	4b1f      	ldr	r3, [pc, #124]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002eae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eb2:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002eb6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002eba:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ebe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002ec2:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eca:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002f18:	4804      	ldr	r0, [pc, #16]	@ (8002f2c <MX_SPI5_Init+0xa4>)
 8002f1a:	f009 f989 	bl	800c230 <HAL_SPI_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 8002f24:	f001 fa81 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200045fc 	.word	0x200045fc
 8002f30:	44002000 	.word	0x44002000

08002f34 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002f38:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f3a:	4a23      	ldr	r2, [pc, #140]	@ (8002fc8 <MX_UART4_Init+0x94>)
 8002f3c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f44:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f70:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f76:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f7c:	4811      	ldr	r0, [pc, #68]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f7e:	f00a f850 	bl	800d022 <HAL_UART_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8002f88:	f001 fa4f 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	480d      	ldr	r0, [pc, #52]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002f90:	f00c f94f 	bl	800f232 <HAL_UARTEx_SetTxFifoThreshold>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 8002f9a:	f001 fa46 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4808      	ldr	r0, [pc, #32]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002fa2:	f00c f984 	bl	800f2ae <HAL_UARTEx_SetRxFifoThreshold>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 8002fac:	f001 fa3d 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002fb0:	4804      	ldr	r0, [pc, #16]	@ (8002fc4 <MX_UART4_Init+0x90>)
 8002fb2:	f00c f905 	bl	800f1c0 <HAL_UARTEx_DisableFifoMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8002fbc:	f001 fa35 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	2000468c 	.word	0x2000468c
 8002fc8:	40004c00 	.word	0x40004c00

08002fcc <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8002fd0:	4b22      	ldr	r3, [pc, #136]	@ (800305c <MX_UART5_Init+0x90>)
 8002fd2:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <MX_UART5_Init+0x94>)
 8002fd4:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8002fd6:	4b21      	ldr	r3, [pc, #132]	@ (800305c <MX_UART5_Init+0x90>)
 8002fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fdc:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fde:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <MX_UART5_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <MX_UART5_Init+0x90>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8002fea:	4b1c      	ldr	r3, [pc, #112]	@ (800305c <MX_UART5_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <MX_UART5_Init+0x90>)
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff6:	4b19      	ldr	r3, [pc, #100]	@ (800305c <MX_UART5_Init+0x90>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ffc:	4b17      	ldr	r3, [pc, #92]	@ (800305c <MX_UART5_Init+0x90>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <MX_UART5_Init+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <MX_UART5_Init+0x90>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <MX_UART5_Init+0x90>)
 8003010:	2200      	movs	r2, #0
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8003014:	4811      	ldr	r0, [pc, #68]	@ (800305c <MX_UART5_Init+0x90>)
 8003016:	f00a f804 	bl	800d022 <HAL_UART_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8003020:	f001 fa03 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003024:	2100      	movs	r1, #0
 8003026:	480d      	ldr	r0, [pc, #52]	@ (800305c <MX_UART5_Init+0x90>)
 8003028:	f00c f903 	bl	800f232 <HAL_UARTEx_SetTxFifoThreshold>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 8003032:	f001 f9fa 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003036:	2100      	movs	r1, #0
 8003038:	4808      	ldr	r0, [pc, #32]	@ (800305c <MX_UART5_Init+0x90>)
 800303a:	f00c f938 	bl	800f2ae <HAL_UARTEx_SetRxFifoThreshold>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 8003044:	f001 f9f1 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003048:	4804      	ldr	r0, [pc, #16]	@ (800305c <MX_UART5_Init+0x90>)
 800304a:	f00c f8b9 	bl	800f1c0 <HAL_UARTEx_DisableFifoMode>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 8003054:	f001 f9e9 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20004720 	.word	0x20004720
 8003060:	40005000 	.word	0x40005000

08003064 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8003068:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <MX_UART8_Init+0x94>)
 800306a:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <MX_UART8_Init+0x98>)
 800306c:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 800306e:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <MX_UART8_Init+0x94>)
 8003070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003074:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <MX_UART8_Init+0x94>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 800307c:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <MX_UART8_Init+0x94>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <MX_UART8_Init+0x94>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <MX_UART8_Init+0x94>)
 800308a:	220c      	movs	r2, #12
 800308c:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308e:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <MX_UART8_Init+0x94>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003094:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <MX_UART8_Init+0x94>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800309a:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <MX_UART8_Init+0x94>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030a0:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <MX_UART8_Init+0x94>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a6:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <MX_UART8_Init+0x94>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80030ac:	4812      	ldr	r0, [pc, #72]	@ (80030f8 <MX_UART8_Init+0x94>)
 80030ae:	f009 ffb8 	bl	800d022 <HAL_UART_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_UART8_Init+0x58>
	{
		Error_Handler();
 80030b8:	f001 f9b7 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80030bc:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 80030c0:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <MX_UART8_Init+0x94>)
 80030c2:	f00c f8b6 	bl	800f232 <HAL_UARTEx_SetTxFifoThreshold>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 80030cc:	f001 f9ad 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d0:	2100      	movs	r1, #0
 80030d2:	4809      	ldr	r0, [pc, #36]	@ (80030f8 <MX_UART8_Init+0x94>)
 80030d4:	f00c f8eb 	bl	800f2ae <HAL_UARTEx_SetRxFifoThreshold>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 80030de:	f001 f9a4 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80030e2:	4805      	ldr	r0, [pc, #20]	@ (80030f8 <MX_UART8_Init+0x94>)
 80030e4:	f00c f86c 	bl	800f1c0 <HAL_UARTEx_DisableFifoMode>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 80030ee:	f001 f99c 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200047b4 	.word	0x200047b4
 80030fc:	40007c00 	.word	0x40007c00

08003100 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 8003104:	4b22      	ldr	r3, [pc, #136]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003106:	4a23      	ldr	r2, [pc, #140]	@ (8003194 <MX_USART10_UART_Init+0x94>)
 8003108:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 800310a:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800310c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003110:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8003112:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 8003118:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 800311e:	4b1c      	ldr	r3, [pc, #112]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 8003124:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003126:	220c      	movs	r2, #12
 8003128:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312a:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003130:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003136:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003138:	2200      	movs	r2, #0
 800313a:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800313c:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800313e:	2200      	movs	r2, #0
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003142:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 8003144:	2200      	movs	r2, #0
 8003146:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 8003148:	4811      	ldr	r0, [pc, #68]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800314a:	f009 ff6a 	bl	800d022 <HAL_UART_Init>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 8003154:	f001 f969 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003158:	2100      	movs	r1, #0
 800315a:	480d      	ldr	r0, [pc, #52]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800315c:	f00c f869 	bl	800f232 <HAL_UARTEx_SetTxFifoThreshold>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 8003166:	f001 f960 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800316a:	2100      	movs	r1, #0
 800316c:	4808      	ldr	r0, [pc, #32]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800316e:	f00c f89e 	bl	800f2ae <HAL_UARTEx_SetRxFifoThreshold>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 8003178:	f001 f957 	bl	800442a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800317c:	4804      	ldr	r0, [pc, #16]	@ (8003190 <MX_USART10_UART_Init+0x90>)
 800317e:	f00c f81f 	bl	800f1c0 <HAL_UARTEx_DisableFifoMode>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 8003188:	f001 f94f 	bl	800442a <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20004848 	.word	0x20004848
 8003194:	40006800 	.word	0x40006800

08003198 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b090      	sub	sp, #64	@ 0x40
 800319c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 800319e:	f107 0320 	add.w	r3, r7, #32
 80031a2:	2220      	movs	r2, #32
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f00d f847 	bl	801023a <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80031ba:	463b      	mov	r3, r7
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 80031c6:	4b55      	ldr	r3, [pc, #340]	@ (800331c <MX_FMC_Init+0x184>)
 80031c8:	4a55      	ldr	r2, [pc, #340]	@ (8003320 <MX_FMC_Init+0x188>)
 80031ca:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <MX_FMC_Init+0x184>)
 80031ce:	4a55      	ldr	r2, [pc, #340]	@ (8003324 <MX_FMC_Init+0x18c>)
 80031d0:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80031d2:	4b52      	ldr	r3, [pc, #328]	@ (800331c <MX_FMC_Init+0x184>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80031d8:	4b50      	ldr	r3, [pc, #320]	@ (800331c <MX_FMC_Init+0x184>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80031de:	4b4f      	ldr	r3, [pc, #316]	@ (800331c <MX_FMC_Init+0x184>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80031e4:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <MX_FMC_Init+0x184>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80031ea:	4b4c      	ldr	r3, [pc, #304]	@ (800331c <MX_FMC_Init+0x184>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80031f0:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <MX_FMC_Init+0x184>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80031f6:	4b49      	ldr	r3, [pc, #292]	@ (800331c <MX_FMC_Init+0x184>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80031fc:	4b47      	ldr	r3, [pc, #284]	@ (800331c <MX_FMC_Init+0x184>)
 80031fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003204:	4b45      	ldr	r3, [pc, #276]	@ (800331c <MX_FMC_Init+0x184>)
 8003206:	2200      	movs	r2, #0
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800320a:	4b44      	ldr	r3, [pc, #272]	@ (800331c <MX_FMC_Init+0x184>)
 800320c:	2200      	movs	r2, #0
 800320e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003210:	4b42      	ldr	r3, [pc, #264]	@ (800331c <MX_FMC_Init+0x184>)
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003216:	4b41      	ldr	r3, [pc, #260]	@ (800331c <MX_FMC_Init+0x184>)
 8003218:	2200      	movs	r2, #0
 800321a:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800321c:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <MX_FMC_Init+0x184>)
 800321e:	2200      	movs	r2, #0
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003222:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <MX_FMC_Init+0x184>)
 8003224:	2200      	movs	r2, #0
 8003226:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 8003228:	4b3c      	ldr	r3, [pc, #240]	@ (800331c <MX_FMC_Init+0x184>)
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800322e:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <MX_FMC_Init+0x184>)
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 8003234:	4b39      	ldr	r3, [pc, #228]	@ (800331c <MX_FMC_Init+0x184>)
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 800323c:	230f      	movs	r3, #15
 800323e:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 8003240:	230f      	movs	r3, #15
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 8003244:	23ff      	movs	r3, #255	@ 0xff
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 8003248:	2303      	movs	r3, #3
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 800324c:	230f      	movs	r3, #15
 800324e:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 8003250:	2310      	movs	r3, #16
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 8003254:	2311      	movs	r3, #17
 8003256:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003258:	2300      	movs	r3, #0
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800325c:	f107 0320 	add.w	r3, r7, #32
 8003260:	2200      	movs	r2, #0
 8003262:	4619      	mov	r1, r3
 8003264:	482d      	ldr	r0, [pc, #180]	@ (800331c <MX_FMC_Init+0x184>)
 8003266:	f009 fdfd 	bl	800ce64 <HAL_SRAM_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 8003270:	f001 f8db 	bl	800442a <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 8003274:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <MX_FMC_Init+0x190>)
 8003276:	4a2d      	ldr	r2, [pc, #180]	@ (800332c <MX_FMC_Init+0x194>)
 8003278:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 800327a:	4b2b      	ldr	r3, [pc, #172]	@ (8003328 <MX_FMC_Init+0x190>)
 800327c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003280:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 8003282:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <MX_FMC_Init+0x190>)
 8003284:	2202      	movs	r2, #2
 8003286:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8003288:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <MX_FMC_Init+0x190>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 800328e:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <MX_FMC_Init+0x190>)
 8003290:	2240      	movs	r2, #64	@ 0x40
 8003292:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <MX_FMC_Init+0x190>)
 8003296:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800329a:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 800329c:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <MX_FMC_Init+0x190>)
 800329e:	220f      	movs	r2, #15
 80032a0:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 80032a2:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <MX_FMC_Init+0x190>)
 80032a4:	220f      	movs	r2, #15
 80032a6:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 80032a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <MX_FMC_Init+0x190>)
 80032aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 80032b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <MX_FMC_Init+0x190>)
 80032b2:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <MX_FMC_Init+0x190>)
 80032ba:	2280      	movs	r2, #128	@ 0x80
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <MX_FMC_Init+0x190>)
 80032c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 80032c6:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <MX_FMC_Init+0x190>)
 80032c8:	2202      	movs	r2, #2
 80032ca:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 80032cc:	4b16      	ldr	r3, [pc, #88]	@ (8003328 <MX_FMC_Init+0x190>)
 80032ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = DISABLE;
 80032d4:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <MX_FMC_Init+0x190>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 80032dc:	2313      	movs	r3, #19
 80032de:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 80032e0:	2313      	movs	r3, #19
 80032e2:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 80032e4:	2306      	movs	r3, #6
 80032e6:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 80032e8:	2303      	movs	r3, #3
 80032ea:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 80032ec:	2313      	movs	r3, #19
 80032ee:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 80032f0:	2313      	movs	r3, #19
 80032f2:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 80032f4:	230a      	movs	r3, #10
 80032f6:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 80032f8:	2309      	movs	r3, #9
 80032fa:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80032fc:	463a      	mov	r2, r7
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	4619      	mov	r1, r3
 8003304:	4808      	ldr	r0, [pc, #32]	@ (8003328 <MX_FMC_Init+0x190>)
 8003306:	f002 fb4b 	bl	80059a0 <HAL_NAND_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 8003310:	f001 f88b 	bl	800442a <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8003314:	bf00      	nop
 8003316:	3740      	adds	r7, #64	@ 0x40
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200048dc 	.word	0x200048dc
 8003320:	47000400 	.word	0x47000400
 8003324:	47000504 	.word	0x47000504
 8003328:	20004934 	.word	0x20004934
 800332c:	47000480 	.word	0x47000480

08003330 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	@ 0x38
 8003334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003346:	4bc2      	ldr	r3, [pc, #776]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334c:	4ac0      	ldr	r2, [pc, #768]	@ (8003650 <MX_GPIO_Init+0x320>)
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003356:	4bbe      	ldr	r3, [pc, #760]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003364:	4bba      	ldr	r3, [pc, #744]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800336a:	4ab9      	ldr	r2, [pc, #740]	@ (8003650 <MX_GPIO_Init+0x320>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003374:	4bb6      	ldr	r3, [pc, #728]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003382:	4bb3      	ldr	r3, [pc, #716]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003388:	4ab1      	ldr	r2, [pc, #708]	@ (8003650 <MX_GPIO_Init+0x320>)
 800338a:	f043 0320 	orr.w	r3, r3, #32
 800338e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003392:	4baf      	ldr	r3, [pc, #700]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80033a0:	4bab      	ldr	r3, [pc, #684]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033a6:	4aaa      	ldr	r2, [pc, #680]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033b0:	4ba7      	ldr	r3, [pc, #668]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	4ba4      	ldr	r3, [pc, #656]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c4:	4aa2      	ldr	r2, [pc, #648]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80033dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033e2:	4a9b      	ldr	r2, [pc, #620]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033ec:	4b98      	ldr	r3, [pc, #608]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80033fa:	4b95      	ldr	r3, [pc, #596]	@ (8003650 <MX_GPIO_Init+0x320>)
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003400:	4a93      	ldr	r2, [pc, #588]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003406:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800340a:	4b91      	ldr	r3, [pc, #580]	@ (8003650 <MX_GPIO_Init+0x320>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003418:	4b8d      	ldr	r3, [pc, #564]	@ (8003650 <MX_GPIO_Init+0x320>)
 800341a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800341e:	4a8c      	ldr	r2, [pc, #560]	@ (8003650 <MX_GPIO_Init+0x320>)
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003428:	4b89      	ldr	r3, [pc, #548]	@ (8003650 <MX_GPIO_Init+0x320>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 800343c:	4885      	ldr	r0, [pc, #532]	@ (8003654 <MX_GPIO_Init+0x324>)
 800343e:	f002 fa4b 	bl	80058d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8003442:	2200      	movs	r2, #0
 8003444:	2104      	movs	r1, #4
 8003446:	4884      	ldr	r0, [pc, #528]	@ (8003658 <MX_GPIO_Init+0x328>)
 8003448:	f002 fa46 	bl	80058d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 800344c:	2200      	movs	r2, #0
 800344e:	f241 4167 	movw	r1, #5223	@ 0x1467
 8003452:	4882      	ldr	r0, [pc, #520]	@ (800365c <MX_GPIO_Init+0x32c>)
 8003454:	f002 fa40 	bl	80058d8 <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 8003458:	2200      	movs	r2, #0
 800345a:	f640 0103 	movw	r1, #2051	@ 0x803
 800345e:	4880      	ldr	r0, [pc, #512]	@ (8003660 <MX_GPIO_Init+0x330>)
 8003460:	f002 fa3a 	bl	80058d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8003464:	2200      	movs	r2, #0
 8003466:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800346a:	487e      	ldr	r0, [pc, #504]	@ (8003664 <MX_GPIO_Init+0x334>)
 800346c:	f002 fa34 	bl	80058d8 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003476:	487a      	ldr	r0, [pc, #488]	@ (8003660 <MX_GPIO_Init+0x330>)
 8003478:	f002 fa2e 	bl	80058d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003482:	4879      	ldr	r0, [pc, #484]	@ (8003668 <MX_GPIO_Init+0x338>)
 8003484:	f002 fa28 	bl	80058d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 8003488:	2200      	movs	r2, #0
 800348a:	2110      	movs	r1, #16
 800348c:	4877      	ldr	r0, [pc, #476]	@ (800366c <MX_GPIO_Init+0x33c>)
 800348e:	f002 fa23 	bl	80058d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 8003492:	2370      	movs	r3, #112	@ 0x70
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003496:	2300      	movs	r3, #0
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800349e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	486f      	ldr	r0, [pc, #444]	@ (8003664 <MX_GPIO_Init+0x334>)
 80034a6:	f002 f8c5 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 80034aa:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b8:	2303      	movs	r3, #3
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	4864      	ldr	r0, [pc, #400]	@ (8003654 <MX_GPIO_Init+0x324>)
 80034c4:	f002 f8b6 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 80034c8:	2302      	movs	r3, #2
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034cc:	4b68      	ldr	r3, [pc, #416]	@ (8003670 <MX_GPIO_Init+0x340>)
 80034ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d8:	4619      	mov	r1, r3
 80034da:	485f      	ldr	r0, [pc, #380]	@ (8003658 <MX_GPIO_Init+0x328>)
 80034dc:	f002 f8aa 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 80034e0:	2304      	movs	r3, #4
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ec:	2303      	movs	r3, #3
 80034ee:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 80034f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	4858      	ldr	r0, [pc, #352]	@ (8003658 <MX_GPIO_Init+0x328>)
 80034f8:	f002 f89c 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 80034fc:	2367      	movs	r3, #103	@ 0x67
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003500:	2301      	movs	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003510:	4619      	mov	r1, r3
 8003512:	4852      	ldr	r0, [pc, #328]	@ (800365c <MX_GPIO_Init+0x32c>)
 8003514:	f002 f88e 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 8003518:	2303      	movs	r3, #3
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351c:	2301      	movs	r3, #1
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003524:	2300      	movs	r3, #0
 8003526:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352c:	4619      	mov	r1, r3
 800352e:	484c      	ldr	r0, [pc, #304]	@ (8003660 <MX_GPIO_Init+0x330>)
 8003530:	f002 f880 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 8003534:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353a:	2301      	movs	r3, #1
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 8003546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354a:	4619      	mov	r1, r3
 800354c:	4841      	ldr	r0, [pc, #260]	@ (8003654 <MX_GPIO_Init+0x324>)
 800354e:	f002 f871 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8003552:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003558:	2301      	movs	r3, #1
 800355a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003560:	2300      	movs	r3, #0
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003568:	4619      	mov	r1, r3
 800356a:	483e      	ldr	r0, [pc, #248]	@ (8003664 <MX_GPIO_Init+0x334>)
 800356c:	f002 f862 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8003570:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003576:	2301      	movs	r3, #1
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357e:	2303      	movs	r3, #3
 8003580:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003586:	4619      	mov	r1, r3
 8003588:	4835      	ldr	r0, [pc, #212]	@ (8003660 <MX_GPIO_Init+0x330>)
 800358a:	f002 f853 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 800358e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003594:	2301      	movs	r3, #1
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a4:	4619      	mov	r1, r3
 80035a6:	4830      	ldr	r0, [pc, #192]	@ (8003668 <MX_GPIO_Init+0x338>)
 80035a8:	f002 f844 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003670 <MX_GPIO_Init+0x340>)
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035bc:	4619      	mov	r1, r3
 80035be:	482a      	ldr	r0, [pc, #168]	@ (8003668 <MX_GPIO_Init+0x338>)
 80035c0:	f002 f838 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 80035c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	2301      	movs	r3, #1
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	2303      	movs	r3, #3
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035da:	4619      	mov	r1, r3
 80035dc:	481f      	ldr	r0, [pc, #124]	@ (800365c <MX_GPIO_Init+0x32c>)
 80035de:	f002 f829 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 80035e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035e8:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <MX_GPIO_Init+0x340>)
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 80035f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035f4:	4619      	mov	r1, r3
 80035f6:	4819      	ldr	r0, [pc, #100]	@ (800365c <MX_GPIO_Init+0x32c>)
 80035f8:	f002 f81c 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 80035fc:	230c      	movs	r3, #12
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003600:	2300      	movs	r3, #0
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800360c:	4619      	mov	r1, r3
 800360e:	4817      	ldr	r0, [pc, #92]	@ (800366c <MX_GPIO_Init+0x33c>)
 8003610:	f002 f810 	bl	8005634 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 8003614:	2310      	movs	r3, #16
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003618:	2301      	movs	r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003628:	4619      	mov	r1, r3
 800362a:	4810      	ldr	r0, [pc, #64]	@ (800366c <MX_GPIO_Init+0x33c>)
 800362c:	f002 f802 	bl	8005634 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	200c      	movs	r0, #12
 8003636:	f001 fe7f 	bl	8005338 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800363a:	200c      	movs	r0, #12
 800363c:	f001 fe96 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8003640:	2200      	movs	r2, #0
 8003642:	2100      	movs	r1, #0
 8003644:	2012      	movs	r0, #18
 8003646:	f001 fe77 	bl	8005338 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 800364a:	2012      	movs	r0, #18
 800364c:	e012      	b.n	8003674 <MX_GPIO_Init+0x344>
 800364e:	bf00      	nop
 8003650:	44020c00 	.word	0x44020c00
 8003654:	42021400 	.word	0x42021400
 8003658:	42020800 	.word	0x42020800
 800365c:	42020000 	.word	0x42020000
 8003660:	42020400 	.word	0x42020400
 8003664:	42021000 	.word	0x42021000
 8003668:	42021800 	.word	0x42021800
 800366c:	42020c00 	.word	0x42020c00
 8003670:	10210000 	.word	0x10210000
 8003674:	f001 fe7a 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	2016      	movs	r0, #22
 800367e:	f001 fe5b 	bl	8005338 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8003682:	2016      	movs	r0, #22
 8003684:	f001 fe72 	bl	800536c <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003688:	bf00      	nop
 800368a:	3738      	adds	r7, #56	@ 0x38
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <AdcSensor_Avg>:
		HAL_SRAM_Write_8b(hsram1, (uint32_t *)(address + i), &eraseValue, 1);
	}
}

uint8_t AdcSensor_Avg(uint16_t sensor_val, uint8_t ADC_channel, uint8_t ADC)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
 800369a:	460b      	mov	r3, r1
 800369c:	717b      	strb	r3, [r7, #5]
 800369e:	4613      	mov	r3, r2
 80036a0:	713b      	strb	r3, [r7, #4]
	switch(ADC)
 80036a2:	793b      	ldrb	r3, [r7, #4]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	f000 82ef 	beq.w	8003c88 <AdcSensor_Avg+0x5f8>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	f300 845e 	bgt.w	8003f6c <AdcSensor_Avg+0x8dc>
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d004      	beq.n	80036be <AdcSensor_Avg+0x2e>
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f000 8175 	beq.w	80039a4 <AdcSensor_Avg+0x314>
 80036ba:	f000 bc57 	b.w	8003f6c <AdcSensor_Avg+0x8dc>
	{
	case adc_1:
		switch(ADC_channel){
 80036be:	797b      	ldrb	r3, [r7, #5]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	f200 816c 	bhi.w	80039a0 <AdcSensor_Avg+0x310>
 80036c8:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <AdcSensor_Avg+0x40>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	0800377b 	.word	0x0800377b
 80036d8:	08003829 	.word	0x08003829
 80036dc:	080038db 	.word	0x080038db
		case channel_1:
		{

			ADCmodule_1.ADCavgcal_1.channel[ADCmodule_1.ADCavgcal_1.Index]=sensor_val;
 80036e0:	4baa      	ldr	r3, [pc, #680]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80036e2:	7d1b      	ldrb	r3, [r3, #20]
 80036e4:	4619      	mov	r1, r3
 80036e6:	4aa9      	ldr	r2, [pc, #676]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			if(ADCmodule_1.ADCavgcal_1.channel[ADCmodule_1.ADCavgcal_1.Index]==0)
 80036ee:	4ba7      	ldr	r3, [pc, #668]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80036f0:	7d1b      	ldrb	r3, [r3, #20]
 80036f2:	461a      	mov	r2, r3
 80036f4:	4ba5      	ldr	r3, [pc, #660]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80036f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <AdcSensor_Avg+0x7a>
			{
				ADCmodule_1.ADCavgcal_1.count++;
 80036fe:	4ba3      	ldr	r3, [pc, #652]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003700:	7f9b      	ldrb	r3, [r3, #30]
 8003702:	3301      	adds	r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4ba1      	ldr	r3, [pc, #644]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003708:	779a      	strb	r2, [r3, #30]
			}
			ADCmodule_1.ADCavgcal_1.sum+= ADCmodule_1.ADCavgcal_1.channel[ADCmodule_1.ADCavgcal_1.Index];
 800370a:	4ba0      	ldr	r3, [pc, #640]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	4a9f      	ldr	r2, [pc, #636]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003710:	7d12      	ldrb	r2, [r2, #20]
 8003712:	4611      	mov	r1, r2
 8003714:	4a9d      	ldr	r2, [pc, #628]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003716:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800371a:	4413      	add	r3, r2
 800371c:	4a9b      	ldr	r2, [pc, #620]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800371e:	6193      	str	r3, [r2, #24]
			if(ADCmodule_1.ADCavgcal_1.Index== ADCsample-1)
 8003720:	4b9a      	ldr	r3, [pc, #616]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003722:	7d1b      	ldrb	r3, [r3, #20]
 8003724:	2b09      	cmp	r3, #9
 8003726:	d121      	bne.n	800376c <AdcSensor_Avg+0xdc>
			{
				if(ADCmodule_1.ADCavgcal_1.count > Wirebrake)
 8003728:	4b98      	ldr	r3, [pc, #608]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800372a:	7f9b      	ldrb	r3, [r3, #30]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d903      	bls.n	8003738 <AdcSensor_Avg+0xa8>
					ADCmodule_1.ADCavgcal_1.average=0;
 8003730:	4b96      	ldr	r3, [pc, #600]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003732:	2200      	movs	r2, #0
 8003734:	839a      	strh	r2, [r3, #28]
 8003736:	e008      	b.n	800374a <AdcSensor_Avg+0xba>
				else
					ADCmodule_1.ADCavgcal_1.average= ADCmodule_1.ADCavgcal_1.sum / ADCsample;
 8003738:	4b94      	ldr	r3, [pc, #592]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a94      	ldr	r2, [pc, #592]	@ (8003990 <AdcSensor_Avg+0x300>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	08db      	lsrs	r3, r3, #3
 8003744:	b29a      	uxth	r2, r3
 8003746:	4b91      	ldr	r3, [pc, #580]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003748:	839a      	strh	r2, [r3, #28]
				memset(&ADCmodule_1.ADCavgcal_1.channel[0],0,ADCsample);
 800374a:	220a      	movs	r2, #10
 800374c:	2100      	movs	r1, #0
 800374e:	488f      	ldr	r0, [pc, #572]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003750:	f00c fd73 	bl	801023a <memset>
				ADCmodule_1.ADCavgcal_1.Index=0;
 8003754:	4b8d      	ldr	r3, [pc, #564]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003756:	2200      	movs	r2, #0
 8003758:	751a      	strb	r2, [r3, #20]
				ADCmodule_1.ADCavgcal_1.sum=0;
 800375a:	4b8c      	ldr	r3, [pc, #560]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
				ADCmodule_1.ADCavgcal_1.count=0;
 8003760:	4b8a      	ldr	r3, [pc, #552]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003762:	2200      	movs	r2, #0
 8003764:	779a      	strb	r2, [r3, #30]
				return channel_1;
 8003766:	2301      	movs	r3, #1
 8003768:	f000 bc01 	b.w	8003f6e <AdcSensor_Avg+0x8de>
			}
			else
				ADCmodule_1.ADCavgcal_1.Index++;
 800376c:	4b87      	ldr	r3, [pc, #540]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800376e:	7d1b      	ldrb	r3, [r3, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b85      	ldr	r3, [pc, #532]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003776:	751a      	strb	r2, [r3, #20]
		}
		break;
 8003778:	e113      	b.n	80039a2 <AdcSensor_Avg+0x312>
		case channel_2:
		{

			ADCmodule_1.ADCavgcal_2.channel[ADCmodule_1.ADCavgcal_2.Index]=sensor_val;
 800377a:	4b84      	ldr	r3, [pc, #528]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800377c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003780:	4982      	ldr	r1, [pc, #520]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003782:	3310      	adds	r3, #16
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if(ADCmodule_1.ADCavgcal_2.channel[ADCmodule_1.ADCavgcal_2.Index]==0)
 800378a:	4b80      	ldr	r3, [pc, #512]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800378c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003790:	4a7e      	ldr	r2, [pc, #504]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003792:	3310      	adds	r3, #16
 8003794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <AdcSensor_Avg+0x11c>
			{
				ADCmodule_1.ADCavgcal_2.count++;
 800379c:	4b7b      	ldr	r3, [pc, #492]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b79      	ldr	r3, [pc, #484]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
			}
			ADCmodule_1.ADCavgcal_2.sum+= ADCmodule_1.ADCavgcal_2.channel[ADCmodule_1.ADCavgcal_2.Index];
 80037ac:	4b77      	ldr	r3, [pc, #476]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	4a76      	ldr	r2, [pc, #472]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037b2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80037b6:	4975      	ldr	r1, [pc, #468]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037b8:	3210      	adds	r2, #16
 80037ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80037be:	4413      	add	r3, r2
 80037c0:	4a72      	ldr	r2, [pc, #456]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037c2:	6393      	str	r3, [r2, #56]	@ 0x38
			if(ADCmodule_1.ADCavgcal_2.Index == ADCsample-1)
 80037c4:	4b71      	ldr	r3, [pc, #452]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ca:	2b09      	cmp	r3, #9
 80037cc:	d123      	bne.n	8003816 <AdcSensor_Avg+0x186>
			{
				if(ADCmodule_1.ADCavgcal_2.count > Wirebrake)
 80037ce:	4b6f      	ldr	r3, [pc, #444]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d903      	bls.n	80037e0 <AdcSensor_Avg+0x150>
					ADCmodule_1.ADCavgcal_2.average=0;
 80037d8:	4b6c      	ldr	r3, [pc, #432]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80037de:	e008      	b.n	80037f2 <AdcSensor_Avg+0x162>
				else
					ADCmodule_1.ADCavgcal_2.average= ADCmodule_1.ADCavgcal_2.sum / ADCsample;
 80037e0:	4b6a      	ldr	r3, [pc, #424]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <AdcSensor_Avg+0x300>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	08db      	lsrs	r3, r3, #3
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	4b67      	ldr	r3, [pc, #412]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
				memset(&ADCmodule_1.ADCavgcal_2.channel[0],0,ADCsample);
 80037f2:	220a      	movs	r2, #10
 80037f4:	2100      	movs	r1, #0
 80037f6:	4867      	ldr	r0, [pc, #412]	@ (8003994 <AdcSensor_Avg+0x304>)
 80037f8:	f00c fd1f 	bl	801023a <memset>
				ADCmodule_1.ADCavgcal_2.Index=0;
 80037fc:	4b63      	ldr	r3, [pc, #396]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				ADCmodule_1.ADCavgcal_2.sum=0;
 8003804:	4b61      	ldr	r3, [pc, #388]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003806:	2200      	movs	r2, #0
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
				ADCmodule_1.ADCavgcal_2.count=0;
 800380a:	4b60      	ldr	r3, [pc, #384]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				return channel_2;
 8003812:	2302      	movs	r3, #2
 8003814:	e3ab      	b.n	8003f6e <AdcSensor_Avg+0x8de>
			}
			else
				ADCmodule_1.ADCavgcal_2.Index++;
 8003816:	4b5d      	ldr	r3, [pc, #372]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003818:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800381c:	3301      	adds	r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		}
		break;
 8003826:	e0bc      	b.n	80039a2 <AdcSensor_Avg+0x312>
		case channel_3:
		{

			ADCmodule_1.ADCavgcal_3.channel[ADCmodule_1.ADCavgcal_3.Index]=sensor_val;
 8003828:	4b58      	ldr	r3, [pc, #352]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800382a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800382e:	4957      	ldr	r1, [pc, #348]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003830:	3320      	adds	r3, #32
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if(ADCmodule_1.ADCavgcal_3.channel[ADCmodule_1.ADCavgcal_3.Index]==0)
 8003838:	4b54      	ldr	r3, [pc, #336]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800383a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800383e:	4a53      	ldr	r2, [pc, #332]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003840:	3320      	adds	r3, #32
 8003842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <AdcSensor_Avg+0x1ca>
			{
				ADCmodule_1.ADCavgcal_3.count++;
 800384a:	4b50      	ldr	r3, [pc, #320]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800384c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8003850:	3301      	adds	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003856:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			}
			ADCmodule_1.ADCavgcal_3.sum+= ADCmodule_1.ADCavgcal_3.channel[ADCmodule_1.ADCavgcal_3.Index];
 800385a:	4b4c      	ldr	r3, [pc, #304]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	4a4b      	ldr	r2, [pc, #300]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003860:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003864:	4949      	ldr	r1, [pc, #292]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003866:	3220      	adds	r2, #32
 8003868:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800386c:	4413      	add	r3, r2
 800386e:	4a47      	ldr	r2, [pc, #284]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003870:	6593      	str	r3, [r2, #88]	@ 0x58
			if(ADCmodule_1.ADCavgcal_3.Index == ADCsample-1)
 8003872:	4b46      	ldr	r3, [pc, #280]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003874:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003878:	2b09      	cmp	r3, #9
 800387a:	d125      	bne.n	80038c8 <AdcSensor_Avg+0x238>
			{
				if(ADCmodule_1.ADCavgcal_3.count > Wirebrake)
 800387c:	4b43      	ldr	r3, [pc, #268]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800387e:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8003882:	2b06      	cmp	r3, #6
 8003884:	d904      	bls.n	8003890 <AdcSensor_Avg+0x200>
					ADCmodule_1.ADCavgcal_3.average=0;
 8003886:	4b41      	ldr	r3, [pc, #260]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003888:	2200      	movs	r2, #0
 800388a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800388e:	e009      	b.n	80038a4 <AdcSensor_Avg+0x214>
				else
					ADCmodule_1.ADCavgcal_3.average= ADCmodule_1.ADCavgcal_3.sum / ADCsample;
 8003890:	4b3e      	ldr	r3, [pc, #248]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a3e      	ldr	r2, [pc, #248]	@ (8003990 <AdcSensor_Avg+0x300>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	08db      	lsrs	r3, r3, #3
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
				memset(&ADCmodule_1.ADCavgcal_3.channel[0],0,ADCsample);
 80038a4:	220a      	movs	r2, #10
 80038a6:	2100      	movs	r1, #0
 80038a8:	483b      	ldr	r0, [pc, #236]	@ (8003998 <AdcSensor_Avg+0x308>)
 80038aa:	f00c fcc6 	bl	801023a <memset>
				ADCmodule_1.ADCavgcal_3.Index=0;
 80038ae:	4b37      	ldr	r3, [pc, #220]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				ADCmodule_1.ADCavgcal_3.sum=0;
 80038b6:	4b35      	ldr	r3, [pc, #212]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	659a      	str	r2, [r3, #88]	@ 0x58
				ADCmodule_1.ADCavgcal_3.count=0;
 80038bc:	4b33      	ldr	r3, [pc, #204]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
				return channel_3;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e352      	b.n	8003f6e <AdcSensor_Avg+0x8de>
			}
			else
				ADCmodule_1.ADCavgcal_3.Index++;
 80038c8:	4b30      	ldr	r3, [pc, #192]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038ce:	3301      	adds	r3, #1
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		}
		break;
 80038d8:	e063      	b.n	80039a2 <AdcSensor_Avg+0x312>
		case channel_4:
		{

			ADCmodule_1.ADCavgcal_4.channel[ADCmodule_1.ADCavgcal_4.Index]=sensor_val;
 80038da:	4b2c      	ldr	r3, [pc, #176]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038dc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80038e0:	492a      	ldr	r1, [pc, #168]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038e2:	3330      	adds	r3, #48	@ 0x30
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if(ADCmodule_1.ADCavgcal_4.channel[ADCmodule_1.ADCavgcal_4.Index]==0)
 80038ea:	4b28      	ldr	r3, [pc, #160]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038ec:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80038f0:	4a26      	ldr	r2, [pc, #152]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038f2:	3330      	adds	r3, #48	@ 0x30
 80038f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <AdcSensor_Avg+0x27c>
			{
				ADCmodule_1.ADCavgcal_4.count++;
 80038fc:	4b23      	ldr	r3, [pc, #140]	@ (800398c <AdcSensor_Avg+0x2fc>)
 80038fe:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003902:	3301      	adds	r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b21      	ldr	r3, [pc, #132]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003908:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			}
			ADCmodule_1.ADCavgcal_4.sum+= ADCmodule_1.ADCavgcal_4.channel[ADCmodule_1.ADCavgcal_4.Index];
 800390c:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800390e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003910:	4a1e      	ldr	r2, [pc, #120]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003912:	f892 2074 	ldrb.w	r2, [r2, #116]	@ 0x74
 8003916:	491d      	ldr	r1, [pc, #116]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003918:	3230      	adds	r2, #48	@ 0x30
 800391a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800391e:	4413      	add	r3, r2
 8003920:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003922:	6793      	str	r3, [r2, #120]	@ 0x78
			if(ADCmodule_1.ADCavgcal_4.Index == ADCsample-1)
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003926:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800392a:	2b09      	cmp	r3, #9
 800392c:	d125      	bne.n	800397a <AdcSensor_Avg+0x2ea>
			{
				if(ADCmodule_1.ADCavgcal_4.count > Wirebrake)
 800392e:	4b17      	ldr	r3, [pc, #92]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003930:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003934:	2b06      	cmp	r3, #6
 8003936:	d904      	bls.n	8003942 <AdcSensor_Avg+0x2b2>
					ADCmodule_1.ADCavgcal_4.average=0;
 8003938:	4b14      	ldr	r3, [pc, #80]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800393a:	2200      	movs	r2, #0
 800393c:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
 8003940:	e009      	b.n	8003956 <AdcSensor_Avg+0x2c6>
				else
					ADCmodule_1.ADCavgcal_4.average= ADCmodule_1.ADCavgcal_4.sum / ADCsample;
 8003942:	4b12      	ldr	r3, [pc, #72]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003946:	4a12      	ldr	r2, [pc, #72]	@ (8003990 <AdcSensor_Avg+0x300>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003952:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
				memset(&ADCmodule_1.ADCavgcal_4.channel[0],0,ADCsample);
 8003956:	220a      	movs	r2, #10
 8003958:	2100      	movs	r1, #0
 800395a:	4810      	ldr	r0, [pc, #64]	@ (800399c <AdcSensor_Avg+0x30c>)
 800395c:	f00c fc6d 	bl	801023a <memset>
				ADCmodule_1.ADCavgcal_4.Index=0;
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
				ADCmodule_1.ADCavgcal_4.sum=0;
 8003968:	4b08      	ldr	r3, [pc, #32]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800396a:	2200      	movs	r2, #0
 800396c:	679a      	str	r2, [r3, #120]	@ 0x78
				ADCmodule_1.ADCavgcal_4.count=0;
 800396e:	4b07      	ldr	r3, [pc, #28]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003970:	2200      	movs	r2, #0
 8003972:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
				return channel_4;
 8003976:	2304      	movs	r3, #4
 8003978:	e2f9      	b.n	8003f6e <AdcSensor_Avg+0x8de>
			}
			else
				ADCmodule_1.ADCavgcal_4.Index++;
 800397a:	4b04      	ldr	r3, [pc, #16]	@ (800398c <AdcSensor_Avg+0x2fc>)
 800397c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003980:	3301      	adds	r3, #1
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4b01      	ldr	r3, [pc, #4]	@ (800398c <AdcSensor_Avg+0x2fc>)
 8003986:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
		}
		break;
 800398a:	e00a      	b.n	80039a2 <AdcSensor_Avg+0x312>
 800398c:	20004978 	.word	0x20004978
 8003990:	cccccccd 	.word	0xcccccccd
 8003994:	20004998 	.word	0x20004998
 8003998:	200049b8 	.word	0x200049b8
 800399c:	200049d8 	.word	0x200049d8

		default:

			break;
 80039a0:	bf00      	nop
		}
		break;
 80039a2:	e2e3      	b.n	8003f6c <AdcSensor_Avg+0x8dc>

		case adc_2:

			switch(ADC_channel){
 80039a4:	797b      	ldrb	r3, [r7, #5]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	f200 816b 	bhi.w	8003c84 <AdcSensor_Avg+0x5f4>
 80039ae:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <AdcSensor_Avg+0x324>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	08003a5d 	.word	0x08003a5d
 80039bc:	08003b0b 	.word	0x08003b0b
 80039c0:	08003bbd 	.word	0x08003bbd
			case channel_1:
			{

				ADCmodule_2.ADCavgcal_1.channel[ADCmodule_2.ADCavgcal_1.Index]=sensor_val;
 80039c4:	4baa      	ldr	r3, [pc, #680]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039c6:	7d1b      	ldrb	r3, [r3, #20]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4aa9      	ldr	r2, [pc, #676]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
				if(ADCmodule_2.ADCavgcal_1.channel[ADCmodule_2.ADCavgcal_1.Index]==0)
 80039d2:	4ba7      	ldr	r3, [pc, #668]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039d4:	7d1b      	ldrb	r3, [r3, #20]
 80039d6:	461a      	mov	r2, r3
 80039d8:	4ba5      	ldr	r3, [pc, #660]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <AdcSensor_Avg+0x35e>
				{
					ADCmodule_2.ADCavgcal_1.count++;
 80039e2:	4ba3      	ldr	r3, [pc, #652]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039e4:	7f9b      	ldrb	r3, [r3, #30]
 80039e6:	3301      	adds	r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4ba1      	ldr	r3, [pc, #644]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039ec:	779a      	strb	r2, [r3, #30]
				}
				ADCmodule_2.ADCavgcal_1.sum+= ADCmodule_2.ADCavgcal_1.channel[ADCmodule_2.ADCavgcal_1.Index];
 80039ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	4a9f      	ldr	r2, [pc, #636]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039f4:	7d12      	ldrb	r2, [r2, #20]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4a9d      	ldr	r2, [pc, #628]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 80039fa:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80039fe:	4413      	add	r3, r2
 8003a00:	4a9b      	ldr	r2, [pc, #620]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a02:	6193      	str	r3, [r2, #24]
				if(ADCmodule_2.ADCavgcal_1.Index== ADCsample-1)
 8003a04:	4b9a      	ldr	r3, [pc, #616]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a06:	7d1b      	ldrb	r3, [r3, #20]
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d120      	bne.n	8003a4e <AdcSensor_Avg+0x3be>
				{
					if(ADCmodule_2.ADCavgcal_1.count > Wirebrake)
 8003a0c:	4b98      	ldr	r3, [pc, #608]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a0e:	7f9b      	ldrb	r3, [r3, #30]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d903      	bls.n	8003a1c <AdcSensor_Avg+0x38c>
						ADCmodule_2.ADCavgcal_1.average=0;
 8003a14:	4b96      	ldr	r3, [pc, #600]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	839a      	strh	r2, [r3, #28]
 8003a1a:	e008      	b.n	8003a2e <AdcSensor_Avg+0x39e>
					else
						ADCmodule_2.ADCavgcal_1.average= ADCmodule_2.ADCavgcal_1.sum / ADCsample;
 8003a1c:	4b94      	ldr	r3, [pc, #592]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	4a94      	ldr	r2, [pc, #592]	@ (8003c74 <AdcSensor_Avg+0x5e4>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	08db      	lsrs	r3, r3, #3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	4b91      	ldr	r3, [pc, #580]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a2c:	839a      	strh	r2, [r3, #28]
					memset(&ADCmodule_2.ADCavgcal_1.channel[0],0,ADCsample);
 8003a2e:	220a      	movs	r2, #10
 8003a30:	2100      	movs	r1, #0
 8003a32:	488f      	ldr	r0, [pc, #572]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a34:	f00c fc01 	bl	801023a <memset>
					ADCmodule_2.ADCavgcal_1.Index=0;
 8003a38:	4b8d      	ldr	r3, [pc, #564]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	751a      	strb	r2, [r3, #20]
					ADCmodule_2.ADCavgcal_1.sum=0;
 8003a3e:	4b8c      	ldr	r3, [pc, #560]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	619a      	str	r2, [r3, #24]
					ADCmodule_2.ADCavgcal_1.count=0;
 8003a44:	4b8a      	ldr	r3, [pc, #552]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	779a      	strb	r2, [r3, #30]
					return channel_1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e28f      	b.n	8003f6e <AdcSensor_Avg+0x8de>
				}
				else
					ADCmodule_2.ADCavgcal_1.Index++;
 8003a4e:	4b88      	ldr	r3, [pc, #544]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a50:	7d1b      	ldrb	r3, [r3, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4b86      	ldr	r3, [pc, #536]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a58:	751a      	strb	r2, [r3, #20]
			}
			break;
 8003a5a:	e114      	b.n	8003c86 <AdcSensor_Avg+0x5f6>
			case channel_2:
			{

				ADCmodule_2.ADCavgcal_2.channel[ADCmodule_2.ADCavgcal_2.Index]=sensor_val;
 8003a5c:	4b84      	ldr	r3, [pc, #528]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a62:	4983      	ldr	r1, [pc, #524]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a64:	3310      	adds	r3, #16
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				if(ADCmodule_2.ADCavgcal_2.channel[ADCmodule_2.ADCavgcal_2.Index]==0)
 8003a6c:	4b80      	ldr	r3, [pc, #512]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a72:	4a7f      	ldr	r2, [pc, #508]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a74:	3310      	adds	r3, #16
 8003a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <AdcSensor_Avg+0x3fe>
				{
					ADCmodule_2.ADCavgcal_2.count++;
 8003a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a84:	3301      	adds	r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	4b79      	ldr	r3, [pc, #484]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				}
				ADCmodule_2.ADCavgcal_2.sum+= ADCmodule_2.ADCavgcal_2.channel[ADCmodule_2.ADCavgcal_2.Index];
 8003a8e:	4b78      	ldr	r3, [pc, #480]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	4a77      	ldr	r2, [pc, #476]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a94:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003a98:	4975      	ldr	r1, [pc, #468]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003a9a:	3210      	adds	r2, #16
 8003a9c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4a73      	ldr	r2, [pc, #460]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003aa4:	6393      	str	r3, [r2, #56]	@ 0x38
				if(ADCmodule_2.ADCavgcal_2.Index == ADCsample-1)
 8003aa6:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d123      	bne.n	8003af8 <AdcSensor_Avg+0x468>
				{
					if(ADCmodule_2.ADCavgcal_2.count > Wirebrake)
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d903      	bls.n	8003ac2 <AdcSensor_Avg+0x432>
						ADCmodule_2.ADCavgcal_2.average=0;
 8003aba:	4b6d      	ldr	r3, [pc, #436]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003ac0:	e008      	b.n	8003ad4 <AdcSensor_Avg+0x444>
					else
						ADCmodule_2.ADCavgcal_2.average= ADCmodule_2.ADCavgcal_2.sum / ADCsample;
 8003ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8003c74 <AdcSensor_Avg+0x5e4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b67      	ldr	r3, [pc, #412]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003ad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
					memset(&ADCmodule_2.ADCavgcal_2.channel[0],0,ADCsample);
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4867      	ldr	r0, [pc, #412]	@ (8003c78 <AdcSensor_Avg+0x5e8>)
 8003ada:	f00c fbae 	bl	801023a <memset>
					ADCmodule_2.ADCavgcal_2.Index=0;
 8003ade:	4b64      	ldr	r3, [pc, #400]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					ADCmodule_2.ADCavgcal_2.sum=0;
 8003ae6:	4b62      	ldr	r3, [pc, #392]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38
					ADCmodule_2.ADCavgcal_2.count=0;
 8003aec:	4b60      	ldr	r3, [pc, #384]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
					return channel_2;
 8003af4:	2302      	movs	r3, #2
 8003af6:	e23a      	b.n	8003f6e <AdcSensor_Avg+0x8de>
				}
				else
					ADCmodule_2.ADCavgcal_2.Index++;
 8003af8:	4b5d      	ldr	r3, [pc, #372]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003afa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003afe:	3301      	adds	r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b5b      	ldr	r3, [pc, #364]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			break;
 8003b08:	e0bd      	b.n	8003c86 <AdcSensor_Avg+0x5f6>
			case channel_3:
			{

				ADCmodule_2.ADCavgcal_3.channel[ADCmodule_2.ADCavgcal_3.Index]=sensor_val;
 8003b0a:	4b59      	ldr	r3, [pc, #356]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b10:	4957      	ldr	r1, [pc, #348]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b12:	3320      	adds	r3, #32
 8003b14:	88fa      	ldrh	r2, [r7, #6]
 8003b16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				if(ADCmodule_2.ADCavgcal_3.channel[ADCmodule_2.ADCavgcal_3.Index]==0)
 8003b1a:	4b55      	ldr	r3, [pc, #340]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b20:	4a53      	ldr	r2, [pc, #332]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b22:	3320      	adds	r3, #32
 8003b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <AdcSensor_Avg+0x4ac>
				{
					ADCmodule_2.ADCavgcal_3.count++;
 8003b2c:	4b50      	ldr	r3, [pc, #320]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b2e:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8003b32:	3301      	adds	r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b4e      	ldr	r3, [pc, #312]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b38:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
				}
				ADCmodule_2.ADCavgcal_3.sum+= ADCmodule_2.ADCavgcal_3.channel[ADCmodule_2.ADCavgcal_3.Index];
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	4a4b      	ldr	r2, [pc, #300]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b42:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003b46:	494a      	ldr	r1, [pc, #296]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b48:	3220      	adds	r2, #32
 8003b4a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a47      	ldr	r2, [pc, #284]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b52:	6593      	str	r3, [r2, #88]	@ 0x58
				if(ADCmodule_2.ADCavgcal_3.Index == ADCsample-1)
 8003b54:	4b46      	ldr	r3, [pc, #280]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b5a:	2b09      	cmp	r3, #9
 8003b5c:	d125      	bne.n	8003baa <AdcSensor_Avg+0x51a>
				{
					if(ADCmodule_2.ADCavgcal_3.count > Wirebrake)
 8003b5e:	4b44      	ldr	r3, [pc, #272]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b60:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d904      	bls.n	8003b72 <AdcSensor_Avg+0x4e2>
						ADCmodule_2.ADCavgcal_3.average=0;
 8003b68:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b70:	e009      	b.n	8003b86 <AdcSensor_Avg+0x4f6>
					else
						ADCmodule_2.ADCavgcal_3.average= ADCmodule_2.ADCavgcal_3.sum / ADCsample;
 8003b72:	4b3f      	ldr	r3, [pc, #252]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	4a3f      	ldr	r2, [pc, #252]	@ (8003c74 <AdcSensor_Avg+0x5e4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	4b3b      	ldr	r3, [pc, #236]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
					memset(&ADCmodule_2.ADCavgcal_3.channel[0],0,ADCsample);
 8003b86:	220a      	movs	r2, #10
 8003b88:	2100      	movs	r1, #0
 8003b8a:	483c      	ldr	r0, [pc, #240]	@ (8003c7c <AdcSensor_Avg+0x5ec>)
 8003b8c:	f00c fb55 	bl	801023a <memset>
					ADCmodule_2.ADCavgcal_3.Index=0;
 8003b90:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
					ADCmodule_2.ADCavgcal_3.sum=0;
 8003b98:	4b35      	ldr	r3, [pc, #212]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	659a      	str	r2, [r3, #88]	@ 0x58
					ADCmodule_2.ADCavgcal_3.count=0;
 8003b9e:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
					return channel_3;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1e1      	b.n	8003f6e <AdcSensor_Avg+0x8de>
				}
				else
					ADCmodule_2.ADCavgcal_3.Index++;
 8003baa:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			break;
 8003bba:	e064      	b.n	8003c86 <AdcSensor_Avg+0x5f6>
			case channel_4:
			{

				ADCmodule_2.ADCavgcal_4.channel[ADCmodule_2.ADCavgcal_4.Index]=sensor_val;
 8003bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bbe:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003bc2:	492b      	ldr	r1, [pc, #172]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bc4:	3330      	adds	r3, #48	@ 0x30
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				if(ADCmodule_2.ADCavgcal_4.channel[ADCmodule_2.ADCavgcal_4.Index]==0)
 8003bcc:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bce:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003bd2:	4a27      	ldr	r2, [pc, #156]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bd4:	3330      	adds	r3, #48	@ 0x30
 8003bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <AdcSensor_Avg+0x55e>
				{
					ADCmodule_2.ADCavgcal_4.count++;
 8003bde:	4b24      	ldr	r3, [pc, #144]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003be0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003be4:	3301      	adds	r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bea:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
				}
				ADCmodule_2.ADCavgcal_4.sum+= ADCmodule_2.ADCavgcal_4.channel[ADCmodule_2.ADCavgcal_4.Index];
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bf4:	f892 2074 	ldrb.w	r2, [r2, #116]	@ 0x74
 8003bf8:	491d      	ldr	r1, [pc, #116]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003bfa:	3230      	adds	r2, #48	@ 0x30
 8003bfc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c00:	4413      	add	r3, r2
 8003c02:	4a1b      	ldr	r2, [pc, #108]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c04:	6793      	str	r3, [r2, #120]	@ 0x78
				if(ADCmodule_2.ADCavgcal_4.Index == ADCsample-1)
 8003c06:	4b1a      	ldr	r3, [pc, #104]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c08:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	d125      	bne.n	8003c5c <AdcSensor_Avg+0x5cc>
				{
					if(ADCmodule_2.ADCavgcal_4.count > Wirebrake)
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c12:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d904      	bls.n	8003c24 <AdcSensor_Avg+0x594>
						ADCmodule_2.ADCavgcal_4.average=0;
 8003c1a:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
 8003c22:	e009      	b.n	8003c38 <AdcSensor_Avg+0x5a8>
					else
						ADCmodule_2.ADCavgcal_4.average= ADCmodule_2.ADCavgcal_4.sum / ADCsample;
 8003c24:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c28:	4a12      	ldr	r2, [pc, #72]	@ (8003c74 <AdcSensor_Avg+0x5e4>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	4b0f      	ldr	r3, [pc, #60]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c34:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
					memset(&ADCmodule_2.ADCavgcal_4.channel[0],0,ADCsample);
 8003c38:	220a      	movs	r2, #10
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4810      	ldr	r0, [pc, #64]	@ (8003c80 <AdcSensor_Avg+0x5f0>)
 8003c3e:	f00c fafc 	bl	801023a <memset>
					ADCmodule_2.ADCavgcal_4.Index=0;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
					ADCmodule_2.ADCavgcal_4.sum=0;
 8003c4a:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	679a      	str	r2, [r3, #120]	@ 0x78
					ADCmodule_2.ADCavgcal_4.count=0;
 8003c50:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
					return channel_4;
 8003c58:	2304      	movs	r3, #4
 8003c5a:	e188      	b.n	8003f6e <AdcSensor_Avg+0x8de>
				}
				else
					ADCmodule_2.ADCavgcal_4.Index++;
 8003c5c:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c5e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003c62:	3301      	adds	r3, #1
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b02      	ldr	r3, [pc, #8]	@ (8003c70 <AdcSensor_Avg+0x5e0>)
 8003c68:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
			}
			break;
 8003c6c:	e00b      	b.n	8003c86 <AdcSensor_Avg+0x5f6>
 8003c6e:	bf00      	nop
 8003c70:	200049f8 	.word	0x200049f8
 8003c74:	cccccccd 	.word	0xcccccccd
 8003c78:	20004a18 	.word	0x20004a18
 8003c7c:	20004a38 	.word	0x20004a38
 8003c80:	20004a58 	.word	0x20004a58

			default:
				break;
 8003c84:	bf00      	nop
			}
			break;
 8003c86:	e171      	b.n	8003f6c <AdcSensor_Avg+0x8dc>

			case adc_3:

				switch(ADC_channel){
 8003c88:	797b      	ldrb	r3, [r7, #5]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	f200 816b 	bhi.w	8003f68 <AdcSensor_Avg+0x8d8>
 8003c92:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <AdcSensor_Avg+0x608>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003d41 	.word	0x08003d41
 8003ca0:	08003def 	.word	0x08003def
 8003ca4:	08003ea1 	.word	0x08003ea1
				case channel_1:
				{

					ADCmodule_3.ADCavgcal_1.channel[ADCmodule_3.ADCavgcal_1.Index]=sensor_val;
 8003ca8:	4baa      	ldr	r3, [pc, #680]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003caa:	7d1b      	ldrb	r3, [r3, #20]
 8003cac:	4619      	mov	r1, r3
 8003cae:	4aa9      	ldr	r2, [pc, #676]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					if(ADCmodule_3.ADCavgcal_1.channel[ADCmodule_3.ADCavgcal_1.Index]==0)
 8003cb6:	4ba7      	ldr	r3, [pc, #668]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cb8:	7d1b      	ldrb	r3, [r3, #20]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <AdcSensor_Avg+0x642>
					{
						ADCmodule_3.ADCavgcal_1.count++;
 8003cc6:	4ba3      	ldr	r3, [pc, #652]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cc8:	7f9b      	ldrb	r3, [r3, #30]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4ba1      	ldr	r3, [pc, #644]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cd0:	779a      	strb	r2, [r3, #30]
					}
					ADCmodule_3.ADCavgcal_1.sum+= ADCmodule_3.ADCavgcal_1.channel[ADCmodule_3.ADCavgcal_1.Index];
 8003cd2:	4ba0      	ldr	r3, [pc, #640]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	4a9f      	ldr	r2, [pc, #636]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cd8:	7d12      	ldrb	r2, [r2, #20]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4a9d      	ldr	r2, [pc, #628]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cde:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a9b      	ldr	r2, [pc, #620]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ce6:	6193      	str	r3, [r2, #24]
					if(ADCmodule_3.ADCavgcal_1.Index== ADCsample-1)
 8003ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cea:	7d1b      	ldrb	r3, [r3, #20]
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d120      	bne.n	8003d32 <AdcSensor_Avg+0x6a2>
					{
						if(ADCmodule_3.ADCavgcal_1.count > Wirebrake)
 8003cf0:	4b98      	ldr	r3, [pc, #608]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cf2:	7f9b      	ldrb	r3, [r3, #30]
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	d903      	bls.n	8003d00 <AdcSensor_Avg+0x670>
							ADCmodule_3.ADCavgcal_1.average=0;
 8003cf8:	4b96      	ldr	r3, [pc, #600]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	839a      	strh	r2, [r3, #28]
 8003cfe:	e008      	b.n	8003d12 <AdcSensor_Avg+0x682>
						else
							ADCmodule_3.ADCavgcal_1.average= ADCmodule_3.ADCavgcal_1.sum / ADCsample;
 8003d00:	4b94      	ldr	r3, [pc, #592]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	4a94      	ldr	r2, [pc, #592]	@ (8003f58 <AdcSensor_Avg+0x8c8>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	08db      	lsrs	r3, r3, #3
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	4b91      	ldr	r3, [pc, #580]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d10:	839a      	strh	r2, [r3, #28]
						memset(&ADCmodule_3.ADCavgcal_1.channel[0],0,ADCsample);
 8003d12:	220a      	movs	r2, #10
 8003d14:	2100      	movs	r1, #0
 8003d16:	488f      	ldr	r0, [pc, #572]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d18:	f00c fa8f 	bl	801023a <memset>
						ADCmodule_3.ADCavgcal_1.Index=0;
 8003d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	751a      	strb	r2, [r3, #20]
						ADCmodule_3.ADCavgcal_1.sum=0;
 8003d22:	4b8c      	ldr	r3, [pc, #560]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]
						ADCmodule_3.ADCavgcal_1.count=0;
 8003d28:	4b8a      	ldr	r3, [pc, #552]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	779a      	strb	r2, [r3, #30]
						return channel_1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e11d      	b.n	8003f6e <AdcSensor_Avg+0x8de>
					}
					else
						ADCmodule_3.ADCavgcal_1.Index++;
 8003d32:	4b88      	ldr	r3, [pc, #544]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d34:	7d1b      	ldrb	r3, [r3, #20]
 8003d36:	3301      	adds	r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b86      	ldr	r3, [pc, #536]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d3c:	751a      	strb	r2, [r3, #20]
				}
				break;
 8003d3e:	e114      	b.n	8003f6a <AdcSensor_Avg+0x8da>
				case channel_2:
				{

					ADCmodule_3.ADCavgcal_2.channel[ADCmodule_3.ADCavgcal_2.Index]=sensor_val;
 8003d40:	4b84      	ldr	r3, [pc, #528]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d46:	4983      	ldr	r1, [pc, #524]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d48:	3310      	adds	r3, #16
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if(ADCmodule_3.ADCavgcal_2.channel[ADCmodule_3.ADCavgcal_2.Index]==0)
 8003d50:	4b80      	ldr	r3, [pc, #512]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d56:	4a7f      	ldr	r2, [pc, #508]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d58:	3310      	adds	r3, #16
 8003d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d107      	bne.n	8003d72 <AdcSensor_Avg+0x6e2>
					{
						ADCmodule_3.ADCavgcal_2.count++;
 8003d62:	4b7c      	ldr	r3, [pc, #496]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d68:	3301      	adds	r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b79      	ldr	r3, [pc, #484]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
					}
					ADCmodule_3.ADCavgcal_2.sum+= ADCmodule_3.ADCavgcal_2.channel[ADCmodule_3.ADCavgcal_2.Index];
 8003d72:	4b78      	ldr	r3, [pc, #480]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	4a77      	ldr	r2, [pc, #476]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d78:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003d7c:	4975      	ldr	r1, [pc, #468]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d7e:	3210      	adds	r2, #16
 8003d80:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003d84:	4413      	add	r3, r2
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d88:	6393      	str	r3, [r2, #56]	@ 0x38
					if(ADCmodule_3.ADCavgcal_2.Index == ADCsample-1)
 8003d8a:	4b72      	ldr	r3, [pc, #456]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	d123      	bne.n	8003ddc <AdcSensor_Avg+0x74c>
					{
						if(ADCmodule_3.ADCavgcal_2.count > Wirebrake)
 8003d94:	4b6f      	ldr	r3, [pc, #444]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d903      	bls.n	8003da6 <AdcSensor_Avg+0x716>
							ADCmodule_3.ADCavgcal_2.average=0;
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003da4:	e008      	b.n	8003db8 <AdcSensor_Avg+0x728>
						else
							ADCmodule_3.ADCavgcal_2.average= ADCmodule_3.ADCavgcal_2.sum / ADCsample;
 8003da6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	4a6b      	ldr	r2, [pc, #428]	@ (8003f58 <AdcSensor_Avg+0x8c8>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	08db      	lsrs	r3, r3, #3
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b67      	ldr	r3, [pc, #412]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003db6:	879a      	strh	r2, [r3, #60]	@ 0x3c
						memset(&ADCmodule_3.ADCavgcal_2.channel[0],0,ADCsample);
 8003db8:	220a      	movs	r2, #10
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4867      	ldr	r0, [pc, #412]	@ (8003f5c <AdcSensor_Avg+0x8cc>)
 8003dbe:	f00c fa3c 	bl	801023a <memset>
						ADCmodule_3.ADCavgcal_2.Index=0;
 8003dc2:	4b64      	ldr	r3, [pc, #400]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
						ADCmodule_3.ADCavgcal_2.sum=0;
 8003dca:	4b62      	ldr	r3, [pc, #392]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	639a      	str	r2, [r3, #56]	@ 0x38
						ADCmodule_3.ADCavgcal_2.count=0;
 8003dd0:	4b60      	ldr	r3, [pc, #384]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
						return channel_2;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0c8      	b.n	8003f6e <AdcSensor_Avg+0x8de>
					}
					else
						ADCmodule_3.ADCavgcal_2.Index++;
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003dde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003de2:	3301      	adds	r3, #1
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				}
				break;
 8003dec:	e0bd      	b.n	8003f6a <AdcSensor_Avg+0x8da>
				case channel_3:
				{

					ADCmodule_3.ADCavgcal_3.channel[ADCmodule_3.ADCavgcal_3.Index]=sensor_val;
 8003dee:	4b59      	ldr	r3, [pc, #356]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003df0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003df4:	4957      	ldr	r1, [pc, #348]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003df6:	3320      	adds	r3, #32
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if(ADCmodule_3.ADCavgcal_3.channel[ADCmodule_3.ADCavgcal_3.Index]==0)
 8003dfe:	4b55      	ldr	r3, [pc, #340]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e00:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e04:	4a53      	ldr	r2, [pc, #332]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e06:	3320      	adds	r3, #32
 8003e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <AdcSensor_Avg+0x790>
					{
						ADCmodule_3.ADCavgcal_3.count++;
 8003e10:	4b50      	ldr	r3, [pc, #320]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e12:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8003e16:	3301      	adds	r3, #1
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e1c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
					}
					ADCmodule_3.ADCavgcal_3.sum+= ADCmodule_3.ADCavgcal_3.channel[ADCmodule_3.ADCavgcal_3.Index];
 8003e20:	4b4c      	ldr	r3, [pc, #304]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	4a4b      	ldr	r2, [pc, #300]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e26:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003e2a:	494a      	ldr	r1, [pc, #296]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e2c:	3220      	adds	r2, #32
 8003e2e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003e32:	4413      	add	r3, r2
 8003e34:	4a47      	ldr	r2, [pc, #284]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e36:	6593      	str	r3, [r2, #88]	@ 0x58
					if(ADCmodule_3.ADCavgcal_3.Index == ADCsample-1)
 8003e38:	4b46      	ldr	r3, [pc, #280]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e3e:	2b09      	cmp	r3, #9
 8003e40:	d125      	bne.n	8003e8e <AdcSensor_Avg+0x7fe>
					{
						if(ADCmodule_3.ADCavgcal_3.count > Wirebrake)
 8003e42:	4b44      	ldr	r3, [pc, #272]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e44:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d904      	bls.n	8003e56 <AdcSensor_Avg+0x7c6>
							ADCmodule_3.ADCavgcal_3.average=0;
 8003e4c:	4b41      	ldr	r3, [pc, #260]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e54:	e009      	b.n	8003e6a <AdcSensor_Avg+0x7da>
						else
							ADCmodule_3.ADCavgcal_3.average= ADCmodule_3.ADCavgcal_3.sum / ADCsample;
 8003e56:	4b3f      	ldr	r3, [pc, #252]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f58 <AdcSensor_Avg+0x8c8>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	4b3b      	ldr	r3, [pc, #236]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
						memset(&ADCmodule_3.ADCavgcal_3.channel[0],0,ADCsample);
 8003e6a:	220a      	movs	r2, #10
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	483c      	ldr	r0, [pc, #240]	@ (8003f60 <AdcSensor_Avg+0x8d0>)
 8003e70:	f00c f9e3 	bl	801023a <memset>
						ADCmodule_3.ADCavgcal_3.Index=0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
						ADCmodule_3.ADCavgcal_3.sum=0;
 8003e7c:	4b35      	ldr	r3, [pc, #212]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	659a      	str	r2, [r3, #88]	@ 0x58
						ADCmodule_3.ADCavgcal_3.count=0;
 8003e82:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
						return channel_3;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e06f      	b.n	8003f6e <AdcSensor_Avg+0x8de>
					}
					else
						ADCmodule_3.ADCavgcal_3.Index++;
 8003e8e:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e94:	3301      	adds	r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	4b2e      	ldr	r3, [pc, #184]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003e9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				}
				break;
 8003e9e:	e064      	b.n	8003f6a <AdcSensor_Avg+0x8da>
				case channel_4:
				{

					ADCmodule_3.ADCavgcal_4.channel[ADCmodule_3.ADCavgcal_4.Index]=sensor_val;
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ea2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003ea6:	492b      	ldr	r1, [pc, #172]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ea8:	3330      	adds	r3, #48	@ 0x30
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if(ADCmodule_3.ADCavgcal_4.channel[ADCmodule_3.ADCavgcal_4.Index]==0)
 8003eb0:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003eb2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003eb6:	4a27      	ldr	r2, [pc, #156]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003eb8:	3330      	adds	r3, #48	@ 0x30
 8003eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <AdcSensor_Avg+0x842>
					{
						ADCmodule_3.ADCavgcal_4.count++;
 8003ec2:	4b24      	ldr	r3, [pc, #144]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ec4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003ec8:	3301      	adds	r3, #1
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	4b21      	ldr	r3, [pc, #132]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ece:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
					}
					ADCmodule_3.ADCavgcal_4.sum+= ADCmodule_3.ADCavgcal_4.channel[ADCmodule_3.ADCavgcal_4.Index];
 8003ed2:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ed8:	f892 2074 	ldrb.w	r2, [r2, #116]	@ 0x74
 8003edc:	491d      	ldr	r1, [pc, #116]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ede:	3230      	adds	r2, #48	@ 0x30
 8003ee0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ee8:	6793      	str	r3, [r2, #120]	@ 0x78
					if(ADCmodule_3.ADCavgcal_4.Index == ADCsample-1)
 8003eea:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003eec:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	d125      	bne.n	8003f40 <AdcSensor_Avg+0x8b0>
					{
						if(ADCmodule_3.ADCavgcal_4.count > Wirebrake)
 8003ef4:	4b17      	ldr	r3, [pc, #92]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003ef6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d904      	bls.n	8003f08 <AdcSensor_Avg+0x878>
							ADCmodule_3.ADCavgcal_4.average=0;
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
 8003f06:	e009      	b.n	8003f1c <AdcSensor_Avg+0x88c>
						else
							ADCmodule_3.ADCavgcal_4.average= ADCmodule_3.ADCavgcal_4.sum / ADCsample;
 8003f08:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f0c:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <AdcSensor_Avg+0x8c8>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	08db      	lsrs	r3, r3, #3
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f18:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
						memset(&ADCmodule_3.ADCavgcal_4.channel[0],0,ADCsample);
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4810      	ldr	r0, [pc, #64]	@ (8003f64 <AdcSensor_Avg+0x8d4>)
 8003f22:	f00c f98a 	bl	801023a <memset>
						ADCmodule_3.ADCavgcal_4.Index=0;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
						ADCmodule_3.ADCavgcal_4.sum=0;
 8003f2e:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	679a      	str	r2, [r3, #120]	@ 0x78
						ADCmodule_3.ADCavgcal_4.count=0;
 8003f34:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
						return channel_4;
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	e016      	b.n	8003f6e <AdcSensor_Avg+0x8de>
					}
					else
						ADCmodule_3.ADCavgcal_4.Index++;
 8003f40:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f42:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003f46:	3301      	adds	r3, #1
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4b02      	ldr	r3, [pc, #8]	@ (8003f54 <AdcSensor_Avg+0x8c4>)
 8003f4c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
				}
				break;
 8003f50:	e00b      	b.n	8003f6a <AdcSensor_Avg+0x8da>
 8003f52:	bf00      	nop
 8003f54:	20004a78 	.word	0x20004a78
 8003f58:	cccccccd 	.word	0xcccccccd
 8003f5c:	20004a98 	.word	0x20004a98
 8003f60:	20004ab8 	.word	0x20004ab8
 8003f64:	20004ad8 	.word	0x20004ad8

				default:

					break;
 8003f68:	bf00      	nop
				}
				break;
 8003f6a:	bf00      	nop
	}
	return 0;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop

08003f78 <UART_InitAllHandlers>:

void UART_InitAllHandlers(void) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer, sizeof(uart1_rx_buffer));
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	490a      	ldr	r1, [pc, #40]	@ (8003fa8 <UART_InitAllHandlers+0x30>)
 8003f80:	480a      	ldr	r0, [pc, #40]	@ (8003fac <UART_InitAllHandlers+0x34>)
 8003f82:	f009 f943 	bl	800d20c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer, sizeof(uart2_rx_buffer));
 8003f86:	2201      	movs	r2, #1
 8003f88:	4909      	ldr	r1, [pc, #36]	@ (8003fb0 <UART_InitAllHandlers+0x38>)
 8003f8a:	480a      	ldr	r0, [pc, #40]	@ (8003fb4 <UART_InitAllHandlers+0x3c>)
 8003f8c:	f009 f93e 	bl	800d20c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer, sizeof(uart3_rx_buffer));
 8003f90:	2201      	movs	r2, #1
 8003f92:	4909      	ldr	r1, [pc, #36]	@ (8003fb8 <UART_InitAllHandlers+0x40>)
 8003f94:	4809      	ldr	r0, [pc, #36]	@ (8003fbc <UART_InitAllHandlers+0x44>)
 8003f96:	f009 f939 	bl	800d20c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer, sizeof(uart4_rx_buffer));
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4908      	ldr	r1, [pc, #32]	@ (8003fc0 <UART_InitAllHandlers+0x48>)
 8003f9e:	4809      	ldr	r0, [pc, #36]	@ (8003fc4 <UART_InitAllHandlers+0x4c>)
 8003fa0:	f009 f934 	bl	800d20c <HAL_UART_Receive_IT>
}
 8003fa4:	bf00      	nop
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20004c47 	.word	0x20004c47
 8003fac:	2000468c 	.word	0x2000468c
 8003fb0:	20004c48 	.word	0x20004c48
 8003fb4:	200047b4 	.word	0x200047b4
 8003fb8:	20004c4b 	.word	0x20004c4b
 8003fbc:	20004720 	.word	0x20004720
 8003fc0:	20004c4c 	.word	0x20004c4c
 8003fc4:	20004848 	.word	0x20004848

08003fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a8f      	ldr	r2, [pc, #572]	@ (8004214 <HAL_UART_RxCpltCallback+0x24c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d158      	bne.n	800408c <HAL_UART_RxCpltCallback+0xc4>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer, sizeof(uart1_rx_buffer));
 8003fda:	2201      	movs	r2, #1
 8003fdc:	498e      	ldr	r1, [pc, #568]	@ (8004218 <HAL_UART_RxCpltCallback+0x250>)
 8003fde:	488f      	ldr	r0, [pc, #572]	@ (800421c <HAL_UART_RxCpltCallback+0x254>)
 8003fe0:	f009 f914 	bl	800d20c <HAL_UART_Receive_IT>

		if(uart1_rx_buffer == '#')//T
 8003fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8004218 <HAL_UART_RxCpltCallback+0x250>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b23      	cmp	r3, #35	@ 0x23
 8003fea:	d10e      	bne.n	800400a <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer ;
 8003fec:	4b8c      	ldr	r3, [pc, #560]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	b2d1      	uxtb	r1, r2
 8003ff4:	4a8a      	ldr	r2, [pc, #552]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8003ff6:	7011      	strb	r1, [r2, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b87      	ldr	r3, [pc, #540]	@ (8004218 <HAL_UART_RxCpltCallback+0x250>)
 8003ffc:	7819      	ldrb	r1, [r3, #0]
 8003ffe:	4b89      	ldr	r3, [pc, #548]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 8004000:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8004002:	4b89      	ldr	r3, [pc, #548]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e018      	b.n	800403c <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 800400a:	4b87      	ldr	r3, [pc, #540]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d114      	bne.n	800403c <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer ;
 8004012:	4b83      	ldr	r3, [pc, #524]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	b2d1      	uxtb	r1, r2
 800401a:	4a81      	ldr	r2, [pc, #516]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 800401c:	7011      	strb	r1, [r2, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	4b7d      	ldr	r3, [pc, #500]	@ (8004218 <HAL_UART_RxCpltCallback+0x250>)
 8004022:	7819      	ldrb	r1, [r3, #0]
 8004024:	4b7f      	ldr	r3, [pc, #508]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 8004026:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8004028:	4b7d      	ldr	r3, [pc, #500]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d905      	bls.n	800403c <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 8004030:	4b7b      	ldr	r3, [pc, #492]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004036:	4b7c      	ldr	r3, [pc, #496]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer == '$')
 800403c:	4b7a      	ldr	r3, [pc, #488]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	f040 81ce 	bne.w	80043e2 <HAL_UART_RxCpltCallback+0x41a>
 8004046:	4b74      	ldr	r3, [pc, #464]	@ (8004218 <HAL_UART_RxCpltCallback+0x250>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b24      	cmp	r3, #36	@ 0x24
 800404c:	f040 81c9 	bne.w	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			//			{
			//				ATP_test  = 1;
			//				command_str_index = 0 ;
			//				command_rcv = 0 ;
			//			}
			if((command_str[1]=='2')&&(command_str[2]=='9'))
 8004050:	4b74      	ldr	r3, [pc, #464]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 8004052:	785b      	ldrb	r3, [r3, #1]
 8004054:	2b32      	cmp	r3, #50	@ 0x32
 8004056:	d10d      	bne.n	8004074 <HAL_UART_RxCpltCallback+0xac>
 8004058:	4b72      	ldr	r3, [pc, #456]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 800405a:	789b      	ldrb	r3, [r3, #2]
 800405c:	2b39      	cmp	r3, #57	@ 0x39
 800405e:	d109      	bne.n	8004074 <HAL_UART_RxCpltCallback+0xac>
			{
				ATP_test  = 1;
 8004060:	4b72      	ldr	r3, [pc, #456]	@ (800422c <HAL_UART_RxCpltCallback+0x264>)
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004066:	4b6e      	ldr	r3, [pc, #440]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800406c:	4b6e      	ldr	r3, [pc, #440]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e1b6      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			}
			else
			{
				command_str_index = 0 ;
 8004074:	4b6a      	ldr	r3, [pc, #424]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800407a:	4b6b      	ldr	r3, [pc, #428]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8004080:	220f      	movs	r2, #15
 8004082:	2100      	movs	r1, #0
 8004084:	4867      	ldr	r0, [pc, #412]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 8004086:	f00c f8d8 	bl	801023a <memset>
				command_rcv = 0 ;
				memset(command_str,0,sizeof(command_str));
			}
		}
	}
}
 800408a:	e1aa      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
	else if (huart->Instance == UART5) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a67      	ldr	r2, [pc, #412]	@ (8004230 <HAL_UART_RxCpltCallback+0x268>)
 8004092:	4293      	cmp	r3, r2
 8004094:	f040 80da 	bne.w	800424c <HAL_UART_RxCpltCallback+0x284>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer, 1);
 8004098:	2201      	movs	r2, #1
 800409a:	4966      	ldr	r1, [pc, #408]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 800409c:	4866      	ldr	r0, [pc, #408]	@ (8004238 <HAL_UART_RxCpltCallback+0x270>)
 800409e:	f009 f8b5 	bl	800d20c <HAL_UART_Receive_IT>
		if(uart3_rx_buffer == '@' )//S
 80040a2:	4b64      	ldr	r3, [pc, #400]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d111      	bne.n	80040ce <HAL_UART_RxCpltCallback+0x106>
			time_str_length=0;
 80040aa:	4b64      	ldr	r3, [pc, #400]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer;
 80040b0:	4b62      	ldr	r3, [pc, #392]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	b2d1      	uxtb	r1, r2
 80040b8:	4a60      	ldr	r2, [pc, #384]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040ba:	7011      	strb	r1, [r2, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b5d      	ldr	r3, [pc, #372]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 80040c0:	7819      	ldrb	r1, [r3, #0]
 80040c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004240 <HAL_UART_RxCpltCallback+0x278>)
 80040c4:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 80040c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004244 <HAL_UART_RxCpltCallback+0x27c>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e018      	b.n	8004100 <HAL_UART_RxCpltCallback+0x138>
		else if(time_rcv==1)
 80040ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004244 <HAL_UART_RxCpltCallback+0x27c>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d114      	bne.n	8004100 <HAL_UART_RxCpltCallback+0x138>
			time_str[time_str_length++] = uart3_rx_buffer;
 80040d6:	4b59      	ldr	r3, [pc, #356]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	b2d1      	uxtb	r1, r2
 80040de:	4a57      	ldr	r2, [pc, #348]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040e0:	7011      	strb	r1, [r2, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b53      	ldr	r3, [pc, #332]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 80040e6:	7819      	ldrb	r1, [r3, #0]
 80040e8:	4b55      	ldr	r3, [pc, #340]	@ (8004240 <HAL_UART_RxCpltCallback+0x278>)
 80040ea:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 80040ec:	4b53      	ldr	r3, [pc, #332]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b16      	cmp	r3, #22
 80040f2:	d905      	bls.n	8004100 <HAL_UART_RxCpltCallback+0x138>
				time_str_length = 0 ;
 80040f4:	4b51      	ldr	r3, [pc, #324]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 80040fa:	4b52      	ldr	r3, [pc, #328]	@ (8004244 <HAL_UART_RxCpltCallback+0x27c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer == '$' )//E
 8004100:	4b4c      	ldr	r3, [pc, #304]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b24      	cmp	r3, #36	@ 0x24
 8004106:	d112      	bne.n	800412e <HAL_UART_RxCpltCallback+0x166>
			if(time_str_length == 21)
 8004108:	4b4c      	ldr	r3, [pc, #304]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b15      	cmp	r3, #21
 800410e:	d103      	bne.n	8004118 <HAL_UART_RxCpltCallback+0x150>
				time_set = 1;
 8004110:	4b4d      	ldr	r3, [pc, #308]	@ (8004248 <HAL_UART_RxCpltCallback+0x280>)
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e00a      	b.n	800412e <HAL_UART_RxCpltCallback+0x166>
				time_rcv = 0 ;
 8004118:	4b4a      	ldr	r3, [pc, #296]	@ (8004244 <HAL_UART_RxCpltCallback+0x27c>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_UART_RxCpltCallback+0x274>)
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 8004124:	2219      	movs	r2, #25
 8004126:	2100      	movs	r1, #0
 8004128:	4845      	ldr	r0, [pc, #276]	@ (8004240 <HAL_UART_RxCpltCallback+0x278>)
 800412a:	f00c f886 	bl	801023a <memset>
		if(uart3_rx_buffer == '#')//T
 800412e:	4b41      	ldr	r3, [pc, #260]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b23      	cmp	r3, #35	@ 0x23
 8004134:	d10e      	bne.n	8004154 <HAL_UART_RxCpltCallback+0x18c>
			command_str[command_str_index++] = uart3_rx_buffer ;
 8004136:	4b3a      	ldr	r3, [pc, #232]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	b2d1      	uxtb	r1, r2
 800413e:	4a38      	ldr	r2, [pc, #224]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004140:	7011      	strb	r1, [r2, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 8004146:	7819      	ldrb	r1, [r3, #0]
 8004148:	4b36      	ldr	r3, [pc, #216]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 800414a:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800414c:	4b36      	ldr	r3, [pc, #216]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e018      	b.n	8004186 <HAL_UART_RxCpltCallback+0x1be>
		else if(command_rcv==1)
 8004154:	4b34      	ldr	r3, [pc, #208]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d114      	bne.n	8004186 <HAL_UART_RxCpltCallback+0x1be>
			command_str[command_str_index++] = uart3_rx_buffer ;
 800415c:	4b30      	ldr	r3, [pc, #192]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	b2d1      	uxtb	r1, r2
 8004164:	4a2e      	ldr	r2, [pc, #184]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004166:	7011      	strb	r1, [r2, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 800416c:	7819      	ldrb	r1, [r3, #0]
 800416e:	4b2d      	ldr	r3, [pc, #180]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 8004170:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8004172:	4b2b      	ldr	r3, [pc, #172]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d905      	bls.n	8004186 <HAL_UART_RxCpltCallback+0x1be>
				command_str_index = 0 ;
 800417a:	4b29      	ldr	r3, [pc, #164]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004180:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer == '$')
 8004186:	4b28      	ldr	r3, [pc, #160]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	f040 8129 	bne.w	80043e2 <HAL_UART_RxCpltCallback+0x41a>
 8004190:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_UART_RxCpltCallback+0x26c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b24      	cmp	r3, #36	@ 0x24
 8004196:	f040 8124 	bne.w	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			if(command_str_index < 4)
 800419a:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d80b      	bhi.n	80041ba <HAL_UART_RxCpltCallback+0x1f2>
				command_str_index = 0 ;
 80041a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80041ae:	220f      	movs	r2, #15
 80041b0:	2100      	movs	r1, #0
 80041b2:	481c      	ldr	r0, [pc, #112]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 80041b4:	f00c f841 	bl	801023a <memset>
}
 80041b8:	e113      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			else if(command_str_index == 4)
 80041ba:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d109      	bne.n	80041d6 <HAL_UART_RxCpltCallback+0x20e>
				ATP_test  = 1;
 80041c2:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <HAL_UART_RxCpltCallback+0x264>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80041c8:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80041ce:	4b16      	ldr	r3, [pc, #88]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
}
 80041d4:	e105      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 80041d6:	4b13      	ldr	r3, [pc, #76]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b32      	cmp	r3, #50	@ 0x32
 80041dc:	d10d      	bne.n	80041fa <HAL_UART_RxCpltCallback+0x232>
 80041de:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 80041e0:	789b      	ldrb	r3, [r3, #2]
 80041e2:	2b36      	cmp	r3, #54	@ 0x36
 80041e4:	d109      	bne.n	80041fa <HAL_UART_RxCpltCallback+0x232>
				ATP_test  = 1;
 80041e6:	4b11      	ldr	r3, [pc, #68]	@ (800422c <HAL_UART_RxCpltCallback+0x264>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e0f3      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
				command_str_index = 0 ;
 80041fa:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_UART_RxCpltCallback+0x258>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <HAL_UART_RxCpltCallback+0x260>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8004206:	220f      	movs	r2, #15
 8004208:	2100      	movs	r1, #0
 800420a:	4806      	ldr	r0, [pc, #24]	@ (8004224 <HAL_UART_RxCpltCallback+0x25c>)
 800420c:	f00c f815 	bl	801023a <memset>
}
 8004210:	e0e7      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
 8004212:	bf00      	nop
 8004214:	40004c00 	.word	0x40004c00
 8004218:	20004c47 	.word	0x20004c47
 800421c:	2000468c 	.word	0x2000468c
 8004220:	2000038c 	.word	0x2000038c
 8004224:	20000378 	.word	0x20000378
 8004228:	20004c46 	.word	0x20004c46
 800422c:	2000038d 	.word	0x2000038d
 8004230:	40005000 	.word	0x40005000
 8004234:	20004c4b 	.word	0x20004c4b
 8004238:	20004720 	.word	0x20004720
 800423c:	20004c45 	.word	0x20004c45
 8004240:	20004c2c 	.word	0x20004c2c
 8004244:	20004c49 	.word	0x20004c49
 8004248:	20004c4a 	.word	0x20004c4a
	else if (huart->Instance == UART8) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a66      	ldr	r2, [pc, #408]	@ (80043ec <HAL_UART_RxCpltCallback+0x424>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d158      	bne.n	8004308 <HAL_UART_RxCpltCallback+0x340>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer, sizeof(uart2_rx_buffer));
 8004256:	2201      	movs	r2, #1
 8004258:	4965      	ldr	r1, [pc, #404]	@ (80043f0 <HAL_UART_RxCpltCallback+0x428>)
 800425a:	4866      	ldr	r0, [pc, #408]	@ (80043f4 <HAL_UART_RxCpltCallback+0x42c>)
 800425c:	f008 ffd6 	bl	800d20c <HAL_UART_Receive_IT>
		if(uart2_rx_buffer == '#')//T
 8004260:	4b63      	ldr	r3, [pc, #396]	@ (80043f0 <HAL_UART_RxCpltCallback+0x428>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b23      	cmp	r3, #35	@ 0x23
 8004266:	d10e      	bne.n	8004286 <HAL_UART_RxCpltCallback+0x2be>
			command_str[command_str_index++] = uart2_rx_buffer ;
 8004268:	4b63      	ldr	r3, [pc, #396]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	b2d1      	uxtb	r1, r2
 8004270:	4a61      	ldr	r2, [pc, #388]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004272:	7011      	strb	r1, [r2, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b5e      	ldr	r3, [pc, #376]	@ (80043f0 <HAL_UART_RxCpltCallback+0x428>)
 8004278:	7819      	ldrb	r1, [r3, #0]
 800427a:	4b60      	ldr	r3, [pc, #384]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 800427c:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800427e:	4b60      	ldr	r3, [pc, #384]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	e018      	b.n	80042b8 <HAL_UART_RxCpltCallback+0x2f0>
		else if(command_rcv==1)
 8004286:	4b5e      	ldr	r3, [pc, #376]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d114      	bne.n	80042b8 <HAL_UART_RxCpltCallback+0x2f0>
			command_str[command_str_index++] = uart2_rx_buffer ;
 800428e:	4b5a      	ldr	r3, [pc, #360]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	b2d1      	uxtb	r1, r2
 8004296:	4a58      	ldr	r2, [pc, #352]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004298:	7011      	strb	r1, [r2, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	4b54      	ldr	r3, [pc, #336]	@ (80043f0 <HAL_UART_RxCpltCallback+0x428>)
 800429e:	7819      	ldrb	r1, [r3, #0]
 80042a0:	4b56      	ldr	r3, [pc, #344]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 80042a2:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80042a4:	4b54      	ldr	r3, [pc, #336]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d905      	bls.n	80042b8 <HAL_UART_RxCpltCallback+0x2f0>
				command_str_index = 0 ;
 80042ac:	4b52      	ldr	r3, [pc, #328]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80042b2:	4b53      	ldr	r3, [pc, #332]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer == '$')
 80042b8:	4b51      	ldr	r3, [pc, #324]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	f040 8090 	bne.w	80043e2 <HAL_UART_RxCpltCallback+0x41a>
 80042c2:	4b4b      	ldr	r3, [pc, #300]	@ (80043f0 <HAL_UART_RxCpltCallback+0x428>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b24      	cmp	r3, #36	@ 0x24
 80042c8:	f040 808b 	bne.w	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 80042cc:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b32      	cmp	r3, #50	@ 0x32
 80042d2:	d10d      	bne.n	80042f0 <HAL_UART_RxCpltCallback+0x328>
 80042d4:	4b49      	ldr	r3, [pc, #292]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 80042d6:	789b      	ldrb	r3, [r3, #2]
 80042d8:	2b37      	cmp	r3, #55	@ 0x37
 80042da:	d109      	bne.n	80042f0 <HAL_UART_RxCpltCallback+0x328>
				ATP_test  = 1;
 80042dc:	4b49      	ldr	r3, [pc, #292]	@ (8004404 <HAL_UART_RxCpltCallback+0x43c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80042e2:	4b45      	ldr	r3, [pc, #276]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80042e8:	4b45      	ldr	r3, [pc, #276]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e078      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
				command_str_index = 0 ;
 80042f0:	4b41      	ldr	r3, [pc, #260]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80042f6:	4b42      	ldr	r3, [pc, #264]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80042fc:	220f      	movs	r2, #15
 80042fe:	2100      	movs	r1, #0
 8004300:	483e      	ldr	r0, [pc, #248]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 8004302:	f00b ff9a 	bl	801023a <memset>
}
 8004306:	e06c      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
	else if (huart->Instance == USART10) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3e      	ldr	r2, [pc, #248]	@ (8004408 <HAL_UART_RxCpltCallback+0x440>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d167      	bne.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer, sizeof(uart4_rx_buffer));
 8004312:	2201      	movs	r2, #1
 8004314:	493d      	ldr	r1, [pc, #244]	@ (800440c <HAL_UART_RxCpltCallback+0x444>)
 8004316:	483e      	ldr	r0, [pc, #248]	@ (8004410 <HAL_UART_RxCpltCallback+0x448>)
 8004318:	f008 ff78 	bl	800d20c <HAL_UART_Receive_IT>
		if(uart4_rx_buffer == '#')//T
 800431c:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_UART_RxCpltCallback+0x444>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b23      	cmp	r3, #35	@ 0x23
 8004322:	d10e      	bne.n	8004342 <HAL_UART_RxCpltCallback+0x37a>
			command_str[command_str_index++] = uart4_rx_buffer ;
 8004324:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	b2d1      	uxtb	r1, r2
 800432c:	4a32      	ldr	r2, [pc, #200]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 800432e:	7011      	strb	r1, [r2, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	4b36      	ldr	r3, [pc, #216]	@ (800440c <HAL_UART_RxCpltCallback+0x444>)
 8004334:	7819      	ldrb	r1, [r3, #0]
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 8004338:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800433a:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e018      	b.n	8004374 <HAL_UART_RxCpltCallback+0x3ac>
		else if(command_rcv==1)
 8004342:	4b2f      	ldr	r3, [pc, #188]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d114      	bne.n	8004374 <HAL_UART_RxCpltCallback+0x3ac>
			command_str[command_str_index++] = uart4_rx_buffer ;
 800434a:	4b2b      	ldr	r3, [pc, #172]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	b2d1      	uxtb	r1, r2
 8004352:	4a29      	ldr	r2, [pc, #164]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004354:	7011      	strb	r1, [r2, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	4b2c      	ldr	r3, [pc, #176]	@ (800440c <HAL_UART_RxCpltCallback+0x444>)
 800435a:	7819      	ldrb	r1, [r3, #0]
 800435c:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 800435e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b0f      	cmp	r3, #15
 8004366:	d905      	bls.n	8004374 <HAL_UART_RxCpltCallback+0x3ac>
				command_str_index = 0 ;
 8004368:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer == '$')
 8004374:	4b22      	ldr	r3, [pc, #136]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d132      	bne.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
 800437c:	4b23      	ldr	r3, [pc, #140]	@ (800440c <HAL_UART_RxCpltCallback+0x444>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b24      	cmp	r3, #36	@ 0x24
 8004382:	d12e      	bne.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			if(command_str[command_str_index-1] == '$')
 8004384:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	3b01      	subs	r3, #1
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 800438c:	5cd3      	ldrb	r3, [r2, r3]
 800438e:	2b24      	cmp	r3, #36	@ 0x24
 8004390:	d109      	bne.n	80043a6 <HAL_UART_RxCpltCallback+0x3de>
				ATP_test  = 1;
 8004392:	4b1c      	ldr	r3, [pc, #112]	@ (8004404 <HAL_UART_RxCpltCallback+0x43c>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004398:	4b17      	ldr	r3, [pc, #92]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800439e:	4b18      	ldr	r3, [pc, #96]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
}
 80043a4:	e01d      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 80043a6:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b32      	cmp	r3, #50	@ 0x32
 80043ac:	d10d      	bne.n	80043ca <HAL_UART_RxCpltCallback+0x402>
 80043ae:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 80043b0:	789b      	ldrb	r3, [r3, #2]
 80043b2:	2b38      	cmp	r3, #56	@ 0x38
 80043b4:	d109      	bne.n	80043ca <HAL_UART_RxCpltCallback+0x402>
				ATP_test  = 1;
 80043b6:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <HAL_UART_RxCpltCallback+0x43c>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80043bc:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80043c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e00b      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
				command_str_index = 0 ;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_UART_RxCpltCallback+0x430>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_UART_RxCpltCallback+0x438>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80043d6:	220f      	movs	r2, #15
 80043d8:	2100      	movs	r1, #0
 80043da:	4808      	ldr	r0, [pc, #32]	@ (80043fc <HAL_UART_RxCpltCallback+0x434>)
 80043dc:	f00b ff2d 	bl	801023a <memset>
}
 80043e0:	e7ff      	b.n	80043e2 <HAL_UART_RxCpltCallback+0x41a>
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40007c00 	.word	0x40007c00
 80043f0:	20004c48 	.word	0x20004c48
 80043f4:	200047b4 	.word	0x200047b4
 80043f8:	2000038c 	.word	0x2000038c
 80043fc:	20000378 	.word	0x20000378
 8004400:	20004c46 	.word	0x20004c46
 8004404:	2000038d 	.word	0x2000038d
 8004408:	40006800 	.word	0x40006800
 800440c:	20004c4c 	.word	0x20004c4c
 8004410:	20004848 	.word	0x20004848

08004414 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800442e:	b672      	cpsid	i
}
 8004430:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <Error_Handler+0x8>

08004436 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b0d0      	sub	sp, #320	@ 0x140
 8004448:	af00      	add	r7, sp, #0
 800444a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800444e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004452:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004464:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004468:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800446c:	4618      	mov	r0, r3
 800446e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004472:	461a      	mov	r2, r3
 8004474:	2100      	movs	r1, #0
 8004476:	f00b fee0 	bl	801023a <memset>
  if(hspi->Instance==SPI2)
 800447a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800447e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a9c      	ldr	r2, [pc, #624]	@ (80046f8 <HAL_SPI_MspInit+0x2b4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d15f      	bne.n	800454c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800448c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004490:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 80044a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80044a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044ae:	f107 0320 	add.w	r3, r7, #32
 80044b2:	4618      	mov	r0, r3
 80044b4:	f002 fe6a 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 80044be:	f7ff ffb4 	bl	800442a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044c2:	4b8e      	ldr	r3, [pc, #568]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80044c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044c8:	4a8c      	ldr	r2, [pc, #560]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80044ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80044d2:	4b8a      	ldr	r3, [pc, #552]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80044d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044d8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80044dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80044e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80044ea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80044ee:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f0:	4b82      	ldr	r3, [pc, #520]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80044f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f6:	4a81      	ldr	r2, [pc, #516]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004500:	4b7e      	ldr	r3, [pc, #504]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004506:	f003 0202 	and.w	r2, r3, #2
 800450a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800450e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004518:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800451c:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 800451e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004522:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004538:	2305      	movs	r3, #5
 800453a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004542:	4619      	mov	r1, r3
 8004544:	486e      	ldr	r0, [pc, #440]	@ (8004700 <HAL_SPI_MspInit+0x2bc>)
 8004546:	f001 f875 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800454a:	e0d0      	b.n	80046ee <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 800454c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004550:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6a      	ldr	r2, [pc, #424]	@ (8004704 <HAL_SPI_MspInit+0x2c0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d15f      	bne.n	800461e <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800455e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004562:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004566:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8004572:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004576:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004580:	f107 0320 	add.w	r3, r7, #32
 8004584:	4618      	mov	r0, r3
 8004586:	f002 fe01 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8004590:	f7ff ff4b 	bl	800442a <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004594:	4b59      	ldr	r3, [pc, #356]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 8004596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800459a:	4a58      	ldr	r2, [pc, #352]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 800459c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80045a4:	4b55      	ldr	r3, [pc, #340]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80045a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045aa:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80045ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80045b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80045bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80045c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c2:	4b4e      	ldr	r3, [pc, #312]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045c8:	4a4c      	ldr	r2, [pc, #304]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80045ca:	f043 0304 	orr.w	r3, r3, #4
 80045ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80045d2:	4b4a      	ldr	r3, [pc, #296]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d8:	f003 0204 	and.w	r2, r3, #4
 80045dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80045e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80045ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80045ee:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 80045f0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80045f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f8:	2302      	movs	r3, #2
 80045fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004604:	2300      	movs	r3, #0
 8004606:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800460a:	2306      	movs	r3, #6
 800460c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004610:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004614:	4619      	mov	r1, r3
 8004616:	483c      	ldr	r0, [pc, #240]	@ (8004708 <HAL_SPI_MspInit+0x2c4>)
 8004618:	f001 f80c 	bl	8005634 <HAL_GPIO_Init>
}
 800461c:	e067      	b.n	80046ee <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 800461e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004622:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a38      	ldr	r2, [pc, #224]	@ (800470c <HAL_SPI_MspInit+0x2c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d15e      	bne.n	80046ee <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8004630:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004634:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004638:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 8004644:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004648:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800464c:	2200      	movs	r2, #0
 800464e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004652:	f107 0320 	add.w	r3, r7, #32
 8004656:	4618      	mov	r0, r3
 8004658:	f002 fd98 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8004662:	f7ff fee2 	bl	800442a <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004666:	4b25      	ldr	r3, [pc, #148]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 8004668:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800466c:	4a23      	ldr	r2, [pc, #140]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8004676:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 8004678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800467c:	f003 0220 	and.w	r2, r3, #32
 8004680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004684:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800468e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004692:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004694:	4b19      	ldr	r3, [pc, #100]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 8004696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800469a:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 800469c:	f043 0320 	orr.w	r3, r3, #32
 80046a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046a4:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <HAL_SPI_MspInit+0x2b8>)
 80046a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046aa:	f003 0220 	and.w	r2, r3, #32
 80046ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80046b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80046bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80046c0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 80046c2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80046c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	2302      	movs	r3, #2
 80046cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80046dc:	2305      	movs	r3, #5
 80046de:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046e2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80046e6:	4619      	mov	r1, r3
 80046e8:	4809      	ldr	r0, [pc, #36]	@ (8004710 <HAL_SPI_MspInit+0x2cc>)
 80046ea:	f000 ffa3 	bl	8005634 <HAL_GPIO_Init>
}
 80046ee:	bf00      	nop
 80046f0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40003800 	.word	0x40003800
 80046fc:	44020c00 	.word	0x44020c00
 8004700:	42020400 	.word	0x42020400
 8004704:	40003c00 	.word	0x40003c00
 8004708:	42020800 	.word	0x42020800
 800470c:	44002000 	.word	0x44002000
 8004710:	42021400 	.word	0x42021400

08004714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b0d2      	sub	sp, #328	@ 0x148
 8004718:	af00      	add	r7, sp, #0
 800471a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800471e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004722:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004734:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004738:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800473c:	4618      	mov	r0, r3
 800473e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004742:	461a      	mov	r2, r3
 8004744:	2100      	movs	r1, #0
 8004746:	f00b fd78 	bl	801023a <memset>
  if(huart->Instance==UART4)
 800474a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800474e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4aa4      	ldr	r2, [pc, #656]	@ (80049e8 <HAL_UART_MspInit+0x2d4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d166      	bne.n	800482a <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800475c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004760:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004764:	f04f 0208 	mov.w	r2, #8
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004770:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004774:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004778:	2200      	movs	r2, #0
 800477a:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800477c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004780:	4618      	mov	r0, r3
 8004782:	f002 fd03 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800478c:	f7ff fe4d 	bl	800442a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004790:	4b96      	ldr	r3, [pc, #600]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004796:	4a95      	ldr	r2, [pc, #596]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004798:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800479c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80047a0:	4b92      	ldr	r3, [pc, #584]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80047a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047a6:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80047aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80047ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80047b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80047bc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047be:	4b8b      	ldr	r3, [pc, #556]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c4:	4a89      	ldr	r2, [pc, #548]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047ce:	4b87      	ldr	r3, [pc, #540]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80047d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047d4:	f003 0202 	and.w	r2, r3, #2
 80047d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80047dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80047e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047ea:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 80047ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80047f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f4:	2302      	movs	r3, #2
 80047f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004806:	2308      	movs	r3, #8
 8004808:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004810:	4619      	mov	r1, r3
 8004812:	4877      	ldr	r0, [pc, #476]	@ (80049f0 <HAL_UART_MspInit+0x2dc>)
 8004814:	f000 ff0e 	bl	8005634 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004818:	2200      	movs	r2, #0
 800481a:	2100      	movs	r1, #0
 800481c:	203d      	movs	r0, #61	@ 0x3d
 800481e:	f000 fd8b 	bl	8005338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004822:	203d      	movs	r0, #61	@ 0x3d
 8004824:	f000 fda2 	bl	800536c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004828:	e151      	b.n	8004ace <HAL_UART_MspInit+0x3ba>
  else if(huart->Instance==UART5)
 800482a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800482e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6f      	ldr	r2, [pc, #444]	@ (80049f4 <HAL_UART_MspInit+0x2e0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d165      	bne.n	8004908 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800483c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004840:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004844:	f04f 0210 	mov.w	r2, #16
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004850:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004854:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004858:	2200      	movs	r2, #0
 800485a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800485c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004860:	4618      	mov	r0, r3
 8004862:	f002 fc93 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800486c:	f7ff fddd 	bl	800442a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004870:	4b5e      	ldr	r3, [pc, #376]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004876:	4a5d      	ldr	r2, [pc, #372]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800487c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004880:	4b5a      	ldr	r3, [pc, #360]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004886:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800488a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800488e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004898:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800489c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800489e:	4b53      	ldr	r3, [pc, #332]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80048a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048a4:	4a51      	ldr	r2, [pc, #324]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80048a6:	f043 0302 	orr.w	r3, r3, #2
 80048aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048ae:	4b4f      	ldr	r3, [pc, #316]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 80048b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048b4:	f003 0202 	and.w	r2, r3, #2
 80048b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80048bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80048c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048ca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 80048cc:	2360      	movs	r3, #96	@ 0x60
 80048ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d2:	2302      	movs	r3, #2
 80048d4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048de:	2300      	movs	r3, #0
 80048e0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80048e4:	230e      	movs	r3, #14
 80048e6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ea:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80048ee:	4619      	mov	r1, r3
 80048f0:	483f      	ldr	r0, [pc, #252]	@ (80049f0 <HAL_UART_MspInit+0x2dc>)
 80048f2:	f000 fe9f 	bl	8005634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	2100      	movs	r1, #0
 80048fa:	203e      	movs	r0, #62	@ 0x3e
 80048fc:	f000 fd1c 	bl	8005338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004900:	203e      	movs	r0, #62	@ 0x3e
 8004902:	f000 fd33 	bl	800536c <HAL_NVIC_EnableIRQ>
}
 8004906:	e0e2      	b.n	8004ace <HAL_UART_MspInit+0x3ba>
  else if(huart->Instance==UART8)
 8004908:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800490c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a38      	ldr	r2, [pc, #224]	@ (80049f8 <HAL_UART_MspInit+0x2e4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d172      	bne.n	8004a00 <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800491a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800491e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004922:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800492e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004932:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004936:	2200      	movs	r2, #0
 8004938:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800493a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800493e:	4618      	mov	r0, r3
 8004940:	f002 fc24 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_UART_MspInit+0x23a>
      Error_Handler();
 800494a:	f7ff fd6e 	bl	800442a <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800494e:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004954:	4a25      	ldr	r2, [pc, #148]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800495a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800495e:	4b23      	ldr	r3, [pc, #140]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004964:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004968:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800496c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004976:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800497a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800497c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 800497e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004982:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 8004984:	f043 0310 	orr.w	r3, r3, #16
 8004988:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800498c:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <HAL_UART_MspInit+0x2d8>)
 800498e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004992:	f003 0210 	and.w	r2, r3, #16
 8004996:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800499a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80049a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049a8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 80049aa:	2303      	movs	r3, #3
 80049ac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b0:	2302      	movs	r3, #2
 80049b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80049c2:	2308      	movs	r3, #8
 80049c4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049c8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80049cc:	4619      	mov	r1, r3
 80049ce:	480b      	ldr	r0, [pc, #44]	@ (80049fc <HAL_UART_MspInit+0x2e8>)
 80049d0:	f000 fe30 	bl	8005634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80049d4:	2200      	movs	r2, #0
 80049d6:	2100      	movs	r1, #0
 80049d8:	2063      	movs	r0, #99	@ 0x63
 80049da:	f000 fcad 	bl	8005338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80049de:	2063      	movs	r0, #99	@ 0x63
 80049e0:	f000 fcc4 	bl	800536c <HAL_NVIC_EnableIRQ>
}
 80049e4:	e073      	b.n	8004ace <HAL_UART_MspInit+0x3ba>
 80049e6:	bf00      	nop
 80049e8:	40004c00 	.word	0x40004c00
 80049ec:	44020c00 	.word	0x44020c00
 80049f0:	42020400 	.word	0x42020400
 80049f4:	40005000 	.word	0x40005000
 80049f8:	40007c00 	.word	0x40007c00
 80049fc:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 8004a00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a04:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a32      	ldr	r2, [pc, #200]	@ (8004ad8 <HAL_UART_MspInit+0x3c4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d15d      	bne.n	8004ace <HAL_UART_MspInit+0x3ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8004a12:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a16:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 8004a26:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f002 fba7 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8004a44:	f7ff fcf1 	bl	800442a <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8004a48:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_UART_MspInit+0x3c8>)
 8004a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a4e:	4a23      	ldr	r2, [pc, #140]	@ (8004adc <HAL_UART_MspInit+0x3c8>)
 8004a50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a58:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <HAL_UART_MspInit+0x3c8>)
 8004a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a5e:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8004a62:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004a74:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a76:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <HAL_UART_MspInit+0x3c8>)
 8004a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a7c:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <HAL_UART_MspInit+0x3c8>)
 8004a7e:	f043 0310 	orr.w	r3, r3, #16
 8004a82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a86:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <HAL_UART_MspInit+0x3c8>)
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8c:	f003 0210 	and.w	r2, r3, #16
 8004a90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a9e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004aa2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8004abc:	2307      	movs	r3, #7
 8004abe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4805      	ldr	r0, [pc, #20]	@ (8004ae0 <HAL_UART_MspInit+0x3cc>)
 8004aca:	f000 fdb3 	bl	8005634 <HAL_GPIO_Init>
}
 8004ace:	bf00      	nop
 8004ad0:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40006800 	.word	0x40006800
 8004adc:	44020c00 	.word	0x44020c00
 8004ae0:	42021000 	.word	0x42021000

08004ae4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004af8:	4b43      	ldr	r3, [pc, #268]	@ (8004c08 <HAL_FMC_MspInit+0x124>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d17f      	bne.n	8004c00 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8004b00:	4b41      	ldr	r3, [pc, #260]	@ (8004c08 <HAL_FMC_MspInit+0x124>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004b06:	4b41      	ldr	r3, [pc, #260]	@ (8004c0c <HAL_FMC_MspInit+0x128>)
 8004b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c0c <HAL_FMC_MspInit+0x128>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b16:	4b3d      	ldr	r3, [pc, #244]	@ (8004c0c <HAL_FMC_MspInit+0x128>)
 8004b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004b24:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8004b28:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b32:	2303      	movs	r3, #3
 8004b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b36:	230c      	movs	r3, #12
 8004b38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4834      	ldr	r0, [pc, #208]	@ (8004c10 <HAL_FMC_MspInit+0x12c>)
 8004b40:	f000 fd78 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b50:	2303      	movs	r3, #3
 8004b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8004b54:	230d      	movs	r3, #13
 8004b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	482d      	ldr	r0, [pc, #180]	@ (8004c14 <HAL_FMC_MspInit+0x130>)
 8004b5e:	f000 fd69 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004b62:	233f      	movs	r3, #63	@ 0x3f
 8004b64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b66:	2302      	movs	r3, #2
 8004b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b72:	230c      	movs	r3, #12
 8004b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4827      	ldr	r0, [pc, #156]	@ (8004c18 <HAL_FMC_MspInit+0x134>)
 8004b7c:	f000 fd5a 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004b80:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8004b84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b92:	230c      	movs	r3, #12
 8004b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4820      	ldr	r0, [pc, #128]	@ (8004c1c <HAL_FMC_MspInit+0x138>)
 8004b9c:	f000 fd4a 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004ba0:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8004ba4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4819      	ldr	r0, [pc, #100]	@ (8004c20 <HAL_FMC_MspInit+0x13c>)
 8004bbc:	f000 fd3a 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bc0:	23c0      	movs	r3, #192	@ 0xc0
 8004bc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8004bd0:	2309      	movs	r3, #9
 8004bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4812      	ldr	r0, [pc, #72]	@ (8004c24 <HAL_FMC_MspInit+0x140>)
 8004bda:	f000 fd2b 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004be2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be4:	2302      	movs	r3, #2
 8004be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bec:	2303      	movs	r3, #3
 8004bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004bf0:	230c      	movs	r3, #12
 8004bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf4:	1d3b      	adds	r3, r7, #4
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4806      	ldr	r0, [pc, #24]	@ (8004c14 <HAL_FMC_MspInit+0x130>)
 8004bfa:	f000 fd1b 	bl	8005634 <HAL_GPIO_Init>
 8004bfe:	e000      	b.n	8004c02 <HAL_FMC_MspInit+0x11e>
    return;
 8004c00:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20004c50 	.word	0x20004c50
 8004c0c:	44020c00 	.word	0x44020c00
 8004c10:	42021400 	.word	0x42021400
 8004c14:	42020000 	.word	0x42020000
 8004c18:	42021800 	.word	0x42021800
 8004c1c:	42021000 	.word	0x42021000
 8004c20:	42020c00 	.word	0x42020c00
 8004c24:	42020800 	.word	0x42020800

08004c28 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004c30:	f7ff ff58 	bl	8004ae4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8004c44:	f7ff ff4e 	bl	8004ae4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <NMI_Handler+0x4>

08004c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <HardFault_Handler+0x4>

08004c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <MemManage_Handler+0x4>

08004c68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c6c:	bf00      	nop
 8004c6e:	e7fd      	b.n	8004c6c <BusFault_Handler+0x4>

08004c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <UsageFault_Handler+0x4>

08004c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ca6:	f000 fa4b 	bl	8005140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}

08004cae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f000 fe42 	bl	800593c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 8004cc0:	2080      	movs	r0, #128	@ 0x80
 8004cc2:	f000 fe3b 	bl	800593c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 8004cce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004cd2:	f000 fe33 	bl	800593c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004ce0:	4802      	ldr	r0, [pc, #8]	@ (8004cec <UART4_IRQHandler+0x10>)
 8004ce2:	f008 faf5 	bl	800d2d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000468c 	.word	0x2000468c

08004cf0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004cf4:	4802      	ldr	r0, [pc, #8]	@ (8004d00 <UART5_IRQHandler+0x10>)
 8004cf6:	f008 faeb 	bl	800d2d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20004720 	.word	0x20004720

08004d04 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004d08:	4802      	ldr	r0, [pc, #8]	@ (8004d14 <UART8_IRQHandler+0x10>)
 8004d0a:	f008 fae1 	bl	800d2d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200047b4 	.word	0x200047b4

08004d18 <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 8004d1c:	4802      	ldr	r0, [pc, #8]	@ (8004d28 <USART10_IRQHandler+0x10>)
 8004d1e:	f008 fad7 	bl	800d2d0 <HAL_UART_IRQHandler>
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20004848 	.word	0x20004848

08004d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return 1;
 8004d30:	2301      	movs	r3, #1
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_kill>:

int _kill(int pid, int sig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d46:	f00b facb 	bl	80102e0 <__errno>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2216      	movs	r2, #22
 8004d4e:	601a      	str	r2, [r3, #0]
  return -1;
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <_exit>:

void _exit (int status)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d64:	f04f 31ff 	mov.w	r1, #4294967295
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ffe7 	bl	8004d3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <_exit+0x12>

08004d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b086      	sub	sp, #24
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e00a      	b.n	8004d9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d84:	f3af 8000 	nop.w
 8004d88:	4601      	mov	r1, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	60ba      	str	r2, [r7, #8]
 8004d90:	b2ca      	uxtb	r2, r1
 8004d92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3301      	adds	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	dbf0      	blt.n	8004d84 <_read+0x12>
  }

  return len;
 8004da2:	687b      	ldr	r3, [r7, #4]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e009      	b.n	8004dd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	60ba      	str	r2, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	dbf1      	blt.n	8004dbe <_write+0x12>
  }
  return len;
 8004dda:	687b      	ldr	r3, [r7, #4]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_close>:

int _close(int file)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e0c:	605a      	str	r2, [r3, #4]
  return 0;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <_isatty>:

int _isatty(int file)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e24:	2301      	movs	r3, #1
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <_sbrk+0x5c>)
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <_sbrk+0x60>)
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <_sbrk+0x64>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <_sbrk+0x64>)
 8004e6a:	4a12      	ldr	r2, [pc, #72]	@ (8004eb4 <_sbrk+0x68>)
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e6e:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <_sbrk+0x64>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d207      	bcs.n	8004e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e7c:	f00b fa30 	bl	80102e0 <__errno>
 8004e80:	4603      	mov	r3, r0
 8004e82:	220c      	movs	r2, #12
 8004e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8a:	e009      	b.n	8004ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e8c:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <_sbrk+0x64>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	4a05      	ldr	r2, [pc, #20]	@ (8004eb0 <_sbrk+0x64>)
 8004e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200a0000 	.word	0x200a0000
 8004eac:	00000400 	.word	0x00000400
 8004eb0:	20004c54 	.word	0x20004c54
 8004eb4:	20004da8 	.word	0x20004da8

08004eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004ebe:	4b35      	ldr	r3, [pc, #212]	@ (8004f94 <SystemInit+0xdc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec4:	4a33      	ldr	r2, [pc, #204]	@ (8004f94 <SystemInit+0xdc>)
 8004ec6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004eca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8004ece:	4b32      	ldr	r3, [pc, #200]	@ (8004f98 <SystemInit+0xe0>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004ed4:	4b30      	ldr	r3, [pc, #192]	@ (8004f98 <SystemInit+0xe0>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004eda:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <SystemInit+0xe0>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <SystemInit+0xe0>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	492c      	ldr	r1, [pc, #176]	@ (8004f98 <SystemInit+0xe0>)
 8004ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <SystemInit+0xe4>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8004eec:	4b2a      	ldr	r3, [pc, #168]	@ (8004f98 <SystemInit+0xe0>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8004ef2:	4b29      	ldr	r3, [pc, #164]	@ (8004f98 <SystemInit+0xe0>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8004ef8:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <SystemInit+0xe0>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8004efe:	4b26      	ldr	r3, [pc, #152]	@ (8004f98 <SystemInit+0xe0>)
 8004f00:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <SystemInit+0xe8>)
 8004f02:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8004f04:	4b24      	ldr	r3, [pc, #144]	@ (8004f98 <SystemInit+0xe0>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8004f0a:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <SystemInit+0xe0>)
 8004f0c:	4a24      	ldr	r2, [pc, #144]	@ (8004fa0 <SystemInit+0xe8>)
 8004f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8004f10:	4b21      	ldr	r3, [pc, #132]	@ (8004f98 <SystemInit+0xe0>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8004f16:	4b20      	ldr	r3, [pc, #128]	@ (8004f98 <SystemInit+0xe0>)
 8004f18:	4a21      	ldr	r2, [pc, #132]	@ (8004fa0 <SystemInit+0xe8>)
 8004f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <SystemInit+0xe0>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004f22:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <SystemInit+0xe0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	@ (8004f98 <SystemInit+0xe0>)
 8004f28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <SystemInit+0xe0>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f34:	4b17      	ldr	r3, [pc, #92]	@ (8004f94 <SystemInit+0xdc>)
 8004f36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004f3a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <SystemInit+0xec>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8004f44:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8004f4c:	d003      	beq.n	8004f56 <SystemInit+0x9e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004f54:	d117      	bne.n	8004f86 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8004f56:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <SystemInit+0xec>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8004f62:	4b10      	ldr	r3, [pc, #64]	@ (8004fa4 <SystemInit+0xec>)
 8004f64:	4a10      	ldr	r2, [pc, #64]	@ (8004fa8 <SystemInit+0xf0>)
 8004f66:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8004f68:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <SystemInit+0xec>)
 8004f6a:	4a10      	ldr	r2, [pc, #64]	@ (8004fac <SystemInit+0xf4>)
 8004f6c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <SystemInit+0xec>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa4 <SystemInit+0xec>)
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <SystemInit+0xec>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4a09      	ldr	r2, [pc, #36]	@ (8004fa4 <SystemInit+0xec>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	61d3      	str	r3, [r2, #28]
  }
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000ed00 	.word	0xe000ed00
 8004f98:	44020c00 	.word	0x44020c00
 8004f9c:	eae2eae3 	.word	0xeae2eae3
 8004fa0:	01010280 	.word	0x01010280
 8004fa4:	40022000 	.word	0x40022000
 8004fa8:	08192a3b 	.word	0x08192a3b
 8004fac:	4c5d6e7f 	.word	0x4c5d6e7f

08004fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004fb0:	480d      	ldr	r0, [pc, #52]	@ (8004fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004fb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004fb4:	f7ff ff80 	bl	8004eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fb8:	480c      	ldr	r0, [pc, #48]	@ (8004fec <LoopForever+0x6>)
  ldr r1, =_edata
 8004fba:	490d      	ldr	r1, [pc, #52]	@ (8004ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff4 <LoopForever+0xe>)
  movs r3, #0
 8004fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fc0:	e002      	b.n	8004fc8 <LoopCopyDataInit>

08004fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fc6:	3304      	adds	r3, #4

08004fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fcc:	d3f9      	bcc.n	8004fc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fce:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8004ffc <LoopForever+0x16>)
  movs r3, #0
 8004fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fd4:	e001      	b.n	8004fda <LoopFillZerobss>

08004fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fd8:	3204      	adds	r2, #4

08004fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fdc:	d3fb      	bcc.n	8004fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004fde:	f00b f985 	bl	80102ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004fe2:	f7fd fd8f 	bl	8002b04 <main>

08004fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8004fe6:	e7fe      	b.n	8004fe6 <LoopForever>
  ldr   r0, =_estack
 8004fe8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ff0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004ff4:	080129b0 	.word	0x080129b0
  ldr r2, =_sbss
 8004ff8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004ffc:	20004da8 	.word	0x20004da8

08005000 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005000:	e7fe      	b.n	8005000 <ADC1_IRQHandler>
	...

08005004 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005008:	2003      	movs	r0, #3
 800500a:	f000 f98a 	bl	8005322 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800500e:	f001 ff33 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 8005012:	4602      	mov	r2, r0
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <HAL_Init+0x44>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	490b      	ldr	r1, [pc, #44]	@ (800504c <HAL_Init+0x48>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
 8005024:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <HAL_Init+0x4c>)
 8005026:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005028:	2004      	movs	r0, #4
 800502a:	f000 f9cf 	bl	80053cc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800502e:	200f      	movs	r0, #15
 8005030:	f000 f810 	bl	8005054 <HAL_InitTick>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e002      	b.n	8005044 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800503e:	f7ff f9fa 	bl	8004436 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	44020c00 	.word	0x44020c00
 800504c:	080125ec 	.word	0x080125ec
 8005050:	20000018 	.word	0x20000018

08005054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005060:	4b33      	ldr	r3, [pc, #204]	@ (8005130 <HAL_InitTick+0xdc>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e05c      	b.n	8005126 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800506c:	4b31      	ldr	r3, [pc, #196]	@ (8005134 <HAL_InitTick+0xe0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d10c      	bne.n	8005092 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005078:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <HAL_InitTick+0xe4>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b2c      	ldr	r3, [pc, #176]	@ (8005130 <HAL_InitTick+0xdc>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	4619      	mov	r1, r3
 8005082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005086:	fbb3 f3f1 	udiv	r3, r3, r1
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e037      	b.n	8005102 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8005092:	f000 f9f3 	bl	800547c <HAL_SYSTICK_GetCLKSourceConfig>
 8005096:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d023      	beq.n	80050e6 <HAL_InitTick+0x92>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d82d      	bhi.n	8005100 <HAL_InitTick+0xac>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_InitTick+0x5e>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d00d      	beq.n	80050cc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80050b0:	e026      	b.n	8005100 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80050b2:	4b21      	ldr	r3, [pc, #132]	@ (8005138 <HAL_InitTick+0xe4>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005130 <HAL_InitTick+0xdc>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	4619      	mov	r1, r3
 80050bc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80050c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	60fb      	str	r3, [r7, #12]
        break;
 80050ca:	e01a      	b.n	8005102 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80050cc:	4b18      	ldr	r3, [pc, #96]	@ (8005130 <HAL_InitTick+0xdc>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050da:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	60fb      	str	r3, [r7, #12]
        break;
 80050e4:	e00d      	b.n	8005102 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <HAL_InitTick+0xdc>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	60fb      	str	r3, [r7, #12]
        break;
 80050fe:	e000      	b.n	8005102 <HAL_InitTick+0xae>
        break;
 8005100:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f940 	bl	8005388 <HAL_SYSTICK_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e009      	b.n	8005126 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005112:	2200      	movs	r2, #0
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	f000 f90d 	bl	8005338 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800511e:	4a07      	ldr	r2, [pc, #28]	@ (800513c <HAL_InitTick+0xe8>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000020 	.word	0x20000020
 8005134:	e000e010 	.word	0xe000e010
 8005138:	20000018 	.word	0x20000018
 800513c:	2000001c 	.word	0x2000001c

08005140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_IncTick+0x20>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_IncTick+0x24>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4413      	add	r3, r2
 8005150:	4a04      	ldr	r2, [pc, #16]	@ (8005164 <HAL_IncTick+0x24>)
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000020 	.word	0x20000020
 8005164:	20004c58 	.word	0x20004c58

08005168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return uwTick;
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <HAL_GetTick+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20004c58 	.word	0x20004c58

08005180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff ffee 	bl	8005168 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d005      	beq.n	80051a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_Delay+0x44>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051a6:	bf00      	nop
 80051a8:	f7ff ffde 	bl	8005168 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d8f7      	bhi.n	80051a8 <HAL_Delay+0x28>
  {
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000020 	.word	0x20000020

080051c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <__NVIC_SetPriorityGrouping+0x44>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051e4:	4013      	ands	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051fa:	4a04      	ldr	r2, [pc, #16]	@ (800520c <__NVIC_SetPriorityGrouping+0x44>)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	60d3      	str	r3, [r2, #12]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005214:	4b04      	ldr	r3, [pc, #16]	@ (8005228 <__NVIC_GetPriorityGrouping+0x18>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	f003 0307 	and.w	r3, r3, #7
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db0b      	blt.n	8005256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	f003 021f 	and.w	r2, r3, #31
 8005244:	4907      	ldr	r1, [pc, #28]	@ (8005264 <__NVIC_EnableIRQ+0x38>)
 8005246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2001      	movs	r0, #1
 800524e:	fa00 f202 	lsl.w	r2, r0, r2
 8005252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	e000e100 	.word	0xe000e100

08005268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	6039      	str	r1, [r7, #0]
 8005272:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db0a      	blt.n	8005292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	490c      	ldr	r1, [pc, #48]	@ (80052b4 <__NVIC_SetPriority+0x4c>)
 8005282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005286:	0112      	lsls	r2, r2, #4
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	440b      	add	r3, r1
 800528c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005290:	e00a      	b.n	80052a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	4908      	ldr	r1, [pc, #32]	@ (80052b8 <__NVIC_SetPriority+0x50>)
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	3b04      	subs	r3, #4
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	440b      	add	r3, r1
 80052a6:	761a      	strb	r2, [r3, #24]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	e000e100 	.word	0xe000e100
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	@ 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f1c3 0307 	rsb	r3, r3, #7
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	bf28      	it	cs
 80052da:	2304      	movcs	r3, #4
 80052dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3304      	adds	r3, #4
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d902      	bls.n	80052ec <NVIC_EncodePriority+0x30>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3b03      	subs	r3, #3
 80052ea:	e000      	b.n	80052ee <NVIC_EncodePriority+0x32>
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43da      	mvns	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	401a      	ands	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005304:	f04f 31ff 	mov.w	r1, #4294967295
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	43d9      	mvns	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005314:	4313      	orrs	r3, r2
         );
}
 8005316:	4618      	mov	r0, r3
 8005318:	3724      	adds	r7, #36	@ 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ff4c 	bl	80051c8 <__NVIC_SetPriorityGrouping>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005346:	f7ff ff63 	bl	8005210 <__NVIC_GetPriorityGrouping>
 800534a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	6978      	ldr	r0, [r7, #20]
 8005352:	f7ff ffb3 	bl	80052bc <NVIC_EncodePriority>
 8005356:	4602      	mov	r2, r0
 8005358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff ff82 	bl	8005268 <__NVIC_SetPriority>
}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ff56 	bl	800522c <__NVIC_EnableIRQ>
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3b01      	subs	r3, #1
 8005394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005398:	d301      	bcc.n	800539e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800539a:	2301      	movs	r3, #1
 800539c:	e00d      	b.n	80053ba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800539e:	4a0a      	ldr	r2, [pc, #40]	@ (80053c8 <HAL_SYSTICK_Config+0x40>)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80053a6:	4b08      	ldr	r3, [pc, #32]	@ (80053c8 <HAL_SYSTICK_Config+0x40>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80053ac:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <HAL_SYSTICK_Config+0x40>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a05      	ldr	r2, [pc, #20]	@ (80053c8 <HAL_SYSTICK_Config+0x40>)
 80053b2:	f043 0303 	orr.w	r3, r3, #3
 80053b6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000e010 	.word	0xe000e010

080053cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d844      	bhi.n	8005464 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005403 	.word	0x08005403
 80053e4:	08005421 	.word	0x08005421
 80053e8:	08005443 	.word	0x08005443
 80053ec:	08005465 	.word	0x08005465
 80053f0:	080053f5 	.word	0x080053f5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80053f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	6013      	str	r3, [r2, #0]
      break;
 8005400:	e031      	b.n	8005466 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005402:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1b      	ldr	r2, [pc, #108]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005408:	f023 0304 	bic.w	r3, r3, #4
 800540c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800540e:	4b1a      	ldr	r3, [pc, #104]	@ (8005478 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005414:	4a18      	ldr	r2, [pc, #96]	@ (8005478 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005416:	f023 030c 	bic.w	r3, r3, #12
 800541a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800541e:	e022      	b.n	8005466 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005420:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005426:	f023 0304 	bic.w	r3, r3, #4
 800542a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800542c:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800542e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005432:	f023 030c 	bic.w	r3, r3, #12
 8005436:	4a10      	ldr	r2, [pc, #64]	@ (8005478 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005438:	f043 0304 	orr.w	r3, r3, #4
 800543c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005440:	e011      	b.n	8005466 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800544e:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005454:	f023 030c 	bic.w	r3, r3, #12
 8005458:	4a07      	ldr	r2, [pc, #28]	@ (8005478 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800545a:	f043 0308 	orr.w	r3, r3, #8
 800545e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005462:	e000      	b.n	8005466 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005464:	bf00      	nop
  }
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	e000e010 	.word	0xe000e010
 8005478:	44020c00 	.word	0x44020c00

0800547c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005482:	4b17      	ldr	r3, [pc, #92]	@ (80054e0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800548e:	2304      	movs	r3, #4
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e01e      	b.n	80054d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8005494:	4b13      	ldr	r3, [pc, #76]	@ (80054e4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8005496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d00f      	beq.n	80054c6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d80f      	bhi.n	80054cc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d003      	beq.n	80054c0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80054b8:	e008      	b.n	80054cc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
        break;
 80054be:	e008      	b.n	80054d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80054c0:	2301      	movs	r3, #1
 80054c2:	607b      	str	r3, [r7, #4]
        break;
 80054c4:	e005      	b.n	80054d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80054c6:	2302      	movs	r3, #2
 80054c8:	607b      	str	r3, [r7, #4]
        break;
 80054ca:	e002      	b.n	80054d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80054cc:	2300      	movs	r3, #0
 80054ce:	607b      	str	r3, [r7, #4]
        break;
 80054d0:	bf00      	nop
    }
  }
  return systick_source;
 80054d2:	687b      	ldr	r3, [r7, #4]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e010 	.word	0xe000e010
 80054e4:	44020c00 	.word	0x44020c00

080054e8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80054f0:	f7ff fe3a 	bl	8005168 <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e06b      	b.n	80055d8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d008      	beq.n	800551e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e05c      	b.n	80055d8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0204 	orr.w	r2, r2, #4
 800552c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2205      	movs	r2, #5
 8005532:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005536:	e020      	b.n	800557a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005538:	f7ff fe16 	bl	8005168 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b05      	cmp	r3, #5
 8005544:	d919      	bls.n	800557a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	f043 0210 	orr.w	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2203      	movs	r2, #3
 8005556:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556a:	2201      	movs	r2, #1
 800556c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e02e      	b.n	80055d8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0d7      	beq.n	8005538 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0202 	orr.w	r2, r2, #2
 8005596:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80055a8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	2201      	movs	r2, #1
 80055c4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e019      	b.n	8005626 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d004      	beq.n	8005608 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e00e      	b.n	8005626 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2204      	movs	r2, #4
 800560c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800561e:	f043 0304 	orr.w	r3, r3, #4
 8005622:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005642:	e136      	b.n	80058b2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	2101      	movs	r1, #1
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	4013      	ands	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8128 	beq.w	80058ac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x38>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b12      	cmp	r3, #18
 800566a:	d125      	bne.n	80056b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	08da      	lsrs	r2, r3, #3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3208      	adds	r2, #8
 8005674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005678:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	220f      	movs	r2, #15
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4013      	ands	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	08da      	lsrs	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3208      	adds	r2, #8
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4013      	ands	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0203 	and.w	r2, r3, #3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d00b      	beq.n	800570c <HAL_GPIO_Init+0xd8>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d007      	beq.n	800570c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005700:	2b11      	cmp	r3, #17
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b12      	cmp	r3, #18
 800570a:	d130      	bne.n	800576e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2203      	movs	r2, #3
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4013      	ands	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005742:	2201      	movs	r2, #1
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0201 	and.w	r2, r3, #1
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d017      	beq.n	80057a6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4013      	ands	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d07c      	beq.n	80058ac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80057b2:	4a47      	ldr	r2, [pc, #284]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	3318      	adds	r3, #24
 80057ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057be:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4013      	ands	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0a9a      	lsrs	r2, r3, #10
 80057da:	4b3e      	ldr	r3, [pc, #248]	@ (80058d4 <HAL_GPIO_Init+0x2a0>)
 80057dc:	4013      	ands	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	f002 0203 	and.w	r2, r2, #3
 80057e4:	00d2      	lsls	r2, r2, #3
 80057e6:	4093      	lsls	r3, r2
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80057ee:	4938      	ldr	r1, [pc, #224]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	089b      	lsrs	r3, r3, #2
 80057f4:	3318      	adds	r3, #24
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80057fc:	4b34      	ldr	r3, [pc, #208]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43db      	mvns	r3, r3
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4013      	ands	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005820:	4a2b      	ldr	r2, [pc, #172]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005826:	4b2a      	ldr	r3, [pc, #168]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	43db      	mvns	r3, r3
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4013      	ands	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800584a:	4a21      	ldr	r2, [pc, #132]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005850:	4b1f      	ldr	r3, [pc, #124]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005856:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	43db      	mvns	r3, r3
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4013      	ands	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005876:	4a16      	ldr	r2, [pc, #88]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800587e:	4b14      	ldr	r3, [pc, #80]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 8005880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005884:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	43db      	mvns	r3, r3
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4013      	ands	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80058a4:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <HAL_GPIO_Init+0x29c>)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	3301      	adds	r3, #1
 80058b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f aec1 	bne.w	8005644 <HAL_GPIO_Init+0x10>
  }
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	44022000 	.word	0x44022000
 80058d4:	002f7f7f 	.word	0x002f7f7f

080058d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
 80058e4:	4613      	mov	r3, r2
 80058e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058e8:	787b      	ldrb	r3, [r7, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058f4:	e002      	b.n	80058fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4013      	ands	r3, r2
 8005920:	041a      	lsls	r2, r3, #16
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43d9      	mvns	r1, r3
 8005926:	887b      	ldrh	r3, [r7, #2]
 8005928:	400b      	ands	r3, r1
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005946:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005952:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f814 	bl	8005988 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005960:	4b08      	ldr	r3, [pc, #32]	@ (8005984 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d006      	beq.n	800597a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800596c:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fd4d 	bl	8004414 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	44022000 	.word	0x44022000

08005988 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e037      	b.n	8005a26 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff f936 	bl	8004c3c <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f009 fe4a 	bl	800f674 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	461a      	mov	r2, r3
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	f009 fe6c 	bl	800f6c8 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	f009 fe81 	bl	800f702 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0204 	orr.w	r2, r2, #4
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005a10:	4b07      	ldr	r3, [pc, #28]	@ (8005a30 <HAL_NAND_Init+0x90>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a06      	ldr	r2, [pc, #24]	@ (8005a30 <HAL_NAND_Init+0x90>)
 8005a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a1a:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	47000400 	.word	0x47000400

08005a34 <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d101      	bne.n	8005a56 <HAL_NAND_Read_ID+0x22>
  {
    return HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
 8005a54:	e066      	b.n	8005b24 <HAL_NAND_Read_ID+0xf0>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d15f      	bne.n	8005b22 <HAL_NAND_Read_ID+0xee>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_NAND_Read_ID+0x3c>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e059      	b.n	8005b24 <HAL_NAND_Read_ID+0xf0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005a80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a84:	617b      	str	r3, [r7, #20]

    /* Send Read ID command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8c:	2290      	movs	r2, #144	@ 0x90
 8005a8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a90:	f3bf 8f4f 	dsb	sy
}
 8005a94:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005aa0:	f3bf 8f4f 	dsb	sy
}
 8005aa4:	bf00      	nop
    __DSB();

    /* Read the electronic signature from NAND flash */
    if (hnand->Init.MemoryDataWidth == FMC_NAND_MEM_BUS_WIDTH_8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <HAL_NAND_Read_ID+0xa8>
    {
      data = *(__IO uint32_t *)deviceaddress;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	0e1b      	lsrs	r3, r3, #24
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	70da      	strb	r2, [r3, #3]
 8005ada:	e018      	b.n	8005b0e <HAL_NAND_Read_ID+0xda>
    }
    else
    {
      data = *(__IO uint32_t *)deviceaddress;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	613b      	str	r3, [r7, #16]
      data1 = *((__IO uint32_t *)deviceaddress + 4);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3310      	adds	r3, #16
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	0c1b      	lsrs	r3, r3, #16
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	70da      	strb	r2, [r3, #3]
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <HAL_NAND_Read_ID+0xf0>
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d101      	bne.n	8005b48 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
 8005b46:	e027      	b.n	8005b98 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d120      	bne.n	8005b96 <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_NAND_Reset+0x32>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e01a      	b.n	8005b98 <HAL_NAND_Reset+0x68>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005b72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b76:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b7e:	22ff      	movs	r2, #255	@ 0xff
 8005b80:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1

}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08c      	sub	sp, #48	@ 0x30
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d101      	bne.n	8005bce <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e143      	b.n	8005e56 <HAL_NAND_Read_Page_8b+0x2b2>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f040 813c 	bne.w	8005e54 <HAL_NAND_Read_Page_8b+0x2b0>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_NAND_Read_Page_8b+0x46>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e135      	b.n	8005e56 <HAL_NAND_Read_Page_8b+0x2b2>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005bfa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005bfe:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	4619      	mov	r1, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	889b      	ldrh	r3, [r3, #4]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	4618      	mov	r0, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	fb00 f303 	mul.w	r3, r0, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c20:	fb02 f303 	mul.w	r3, r2, r3
 8005c24:	440b      	add	r3, r1
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005c28:	e0fd      	b.n	8005e26 <HAL_NAND_Read_Page_8b+0x282>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c34:	f3bf 8f4f 	dsb	sy
}
 8005c38:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c42:	d848      	bhi.n	8005cd6 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c54:	d21a      	bcs.n	8005c8c <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c60:	f3bf 8f4f 	dsb	sy
}
 8005c64:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c72:	f3bf 8f4f 	dsb	sy
}
 8005c76:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	0a1a      	lsrs	r2, r3, #8
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c86:	f3bf 8f4f 	dsb	sy
}
 8005c8a:	e07d      	b.n	8005d88 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c96:	f3bf 8f4f 	dsb	sy
}
 8005c9a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca8:	f3bf 8f4f 	dsb	sy
}
 8005cac:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	0a1a      	lsrs	r2, r3, #8
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cbc:	f3bf 8f4f 	dsb	sy
}
 8005cc0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	0c1a      	lsrs	r2, r3, #16
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cd0:	f3bf 8f4f 	dsb	sy
}
 8005cd4:	e058      	b.n	8005d88 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce6:	d222      	bcs.n	8005d2e <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cf2:	f3bf 8f4f 	dsb	sy
}
 8005cf6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d02:	f3bf 8f4f 	dsb	sy
}
 8005d06:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d14:	f3bf 8f4f 	dsb	sy
}
 8005d18:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	0a1a      	lsrs	r2, r3, #8
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d28:	f3bf 8f4f 	dsb	sy
}
 8005d2c:	e02c      	b.n	8005d88 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d38:	f3bf 8f4f 	dsb	sy
}
 8005d3c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d48:	f3bf 8f4f 	dsb	sy
}
 8005d4c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d5a:	f3bf 8f4f 	dsb	sy
}
 8005d5e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	0a1a      	lsrs	r2, r3, #8
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d6e:	f3bf 8f4f 	dsb	sy
}
 8005d72:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	0c1a      	lsrs	r2, r3, #16
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d82:	f3bf 8f4f 	dsb	sy
}
 8005d86:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d8e:	2230      	movs	r2, #48	@ 0x30
 8005d90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d92:	f3bf 8f4f 	dsb	sy
}
 8005d96:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d123      	bne.n	8005dea <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005da2:	f7ff f9e1 	bl	8005168 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005da8:	e011      	b.n	8005dce <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005daa:	f7ff f9dd 	bl	8005168 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db8:	d909      	bls.n	8005dce <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e043      	b.n	8005e56 <HAL_NAND_Read_Page_8b+0x2b2>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fa3d 	bl	800624e <HAL_NAND_Read_Status>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d1e7      	bne.n	8005daa <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005de4:	f3bf 8f4f 	dsb	sy
}
 8005de8:	bf00      	nop
        __DSB();
      }
HAL_Delay(100);
 8005dea:	2064      	movs	r0, #100	@ 0x64
 8005dec:	f7ff f9c8 	bl	8005180 <HAL_Delay>
      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005df0:	2300      	movs	r3, #0
 8005df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005df4:	e009      	b.n	8005e0a <HAL_NAND_Read_Page_8b+0x266>
      {
        *buff = *(uint8_t *)deviceaddress;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	701a      	strb	r2, [r3, #0]
        buff++;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3301      	adds	r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	3301      	adds	r3, #1
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d3f0      	bcc.n	8005df6 <HAL_NAND_Read_Page_8b+0x252>
      }

      /* Increment read pages number */
      numpagesread++;
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	3301      	adds	r3, #1
 8005e18:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	3301      	adds	r3, #1
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <HAL_NAND_Read_Page_8b+0x29c>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e34:	fb02 f303 	mul.w	r3, r2, r3
 8005e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	f4ff aef5 	bcc.w	8005c2a <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_NAND_Read_Page_8b+0x2b2>
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3730      	adds	r7, #48	@ 0x30
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b08c      	sub	sp, #48	@ 0x30
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d101      	bne.n	8005e88 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005e84:	2302      	movs	r3, #2
 8005e86:	e141      	b.n	800610c <HAL_NAND_Write_Page_8b+0x2ae>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f040 813a 	bne.w	800610a <HAL_NAND_Write_Page_8b+0x2ac>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_NAND_Write_Page_8b+0x46>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e133      	b.n	800610c <HAL_NAND_Write_Page_8b+0x2ae>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005eb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005eb8:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	889b      	ldrh	r3, [r3, #4]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	885b      	ldrh	r3, [r3, #2]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed0:	fb00 f303 	mul.w	r3, r0, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	440b      	add	r3, r1
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005ee2:	e0fb      	b.n	80060dc <HAL_NAND_Write_Page_8b+0x27e>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005eee:	f3bf 8f4f 	dsb	sy
}
 8005ef2:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efa:	2280      	movs	r2, #128	@ 0x80
 8005efc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005efe:	f3bf 8f4f 	dsb	sy
}
 8005f02:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0c:	d848      	bhi.n	8005fa0 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1e:	d21a      	bcs.n	8005f56 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f2a:	f3bf 8f4f 	dsb	sy
}
 8005f2e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f3c:	f3bf 8f4f 	dsb	sy
}
 8005f40:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	0a1a      	lsrs	r2, r3, #8
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f50:	f3bf 8f4f 	dsb	sy
}
 8005f54:	e07d      	b.n	8006052 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f60:	f3bf 8f4f 	dsb	sy
}
 8005f64:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f72:	f3bf 8f4f 	dsb	sy
}
 8005f76:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	0a1a      	lsrs	r2, r3, #8
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f86:	f3bf 8f4f 	dsb	sy
}
 8005f8a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	0c1a      	lsrs	r2, r3, #16
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f9a:	f3bf 8f4f 	dsb	sy
}
 8005f9e:	e058      	b.n	8006052 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fb0:	d222      	bcs.n	8005ff8 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fbc:	f3bf 8f4f 	dsb	sy
}
 8005fc0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fcc:	f3bf 8f4f 	dsb	sy
}
 8005fd0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fde:	f3bf 8f4f 	dsb	sy
}
 8005fe2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	0a1a      	lsrs	r2, r3, #8
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ff2:	f3bf 8f4f 	dsb	sy
}
 8005ff6:	e02c      	b.n	8006052 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006002:	f3bf 8f4f 	dsb	sy
}
 8006006:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006012:	f3bf 8f4f 	dsb	sy
}
 8006016:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800601e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006024:	f3bf 8f4f 	dsb	sy
}
 8006028:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	0a1a      	lsrs	r2, r3, #8
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006038:	f3bf 8f4f 	dsb	sy
}
 800603c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	0c1a      	lsrs	r2, r3, #16
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800604c:	f3bf 8f4f 	dsb	sy
}
 8006050:	bf00      	nop
          __DSB();
        }
      }
      HAL_Delay(100);
 8006052:	2064      	movs	r0, #100	@ 0x64
 8006054:	f7ff f894 	bl	8005180 <HAL_Delay>
      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006058:	2300      	movs	r3, #0
 800605a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800605c:	e00c      	b.n	8006078 <HAL_NAND_Write_Page_8b+0x21a>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
        buff++;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 800606c:	f3bf 8f4f 	dsb	sy
}
 8006070:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	3301      	adds	r3, #1
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d3ed      	bcc.n	800605e <HAL_NAND_Write_Page_8b+0x200>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006088:	2210      	movs	r2, #16
 800608a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800608c:	f3bf 8f4f 	dsb	sy
}
 8006090:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8006092:	f7ff f869 	bl	8005168 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006098:	e011      	b.n	80060be <HAL_NAND_Write_Page_8b+0x260>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 800609a:	f7ff f865 	bl	8005168 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060a8:	d909      	bls.n	80060be <HAL_NAND_Write_Page_8b+0x260>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2203      	movs	r2, #3
 80060ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e026      	b.n	800610c <HAL_NAND_Write_Page_8b+0x2ae>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f8c5 	bl	800624e <HAL_NAND_Read_Status>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d1e7      	bne.n	800609a <HAL_NAND_Write_Page_8b+0x23c>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	3301      	adds	r3, #1
 80060ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <HAL_NAND_Write_Page_8b+0x298>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f0:	429a      	cmp	r2, r3
 80060f2:	f4ff aef7 	bcc.w	8005ee4 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_NAND_Write_Page_8b+0x2ae>
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
}
 800610c:	4618      	mov	r0, r3
 800610e:	3730      	adds	r7, #48	@ 0x30
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d101      	bne.n	800612e <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
 800612c:	e089      	b.n	8006242 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	f040 8082 	bne.w	8006240 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_NAND_Erase_Block+0x36>
 8006146:	2302      	movs	r3, #2
 8006148:	e07b      	b.n	8006242 <HAL_NAND_Erase_Block+0x12e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800615a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800615e:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006166:	2260      	movs	r2, #96	@ 0x60
 8006168:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800616a:	f3bf 8f4f 	dsb	sy
}
 800616e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	889b      	ldrh	r3, [r3, #4]
 800617a:	4619      	mov	r1, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	885b      	ldrh	r3, [r3, #2]
 8006180:	4618      	mov	r0, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006186:	fb00 f303 	mul.w	r3, r0, r3
 800618a:	440b      	add	r3, r1
 800618c:	b2d9      	uxtb	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	b2db      	uxtb	r3, r3
 8006194:	fb11 f303 	smulbb	r3, r1, r3
 8006198:	b2db      	uxtb	r3, r3
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80061a0:	4413      	add	r3, r2
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80061a6:	f3bf 8f4f 	dsb	sy
}
 80061aa:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	4619      	mov	r1, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	889b      	ldrh	r3, [r3, #4]
 80061b6:	461a      	mov	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	885b      	ldrh	r3, [r3, #2]
 80061bc:	4618      	mov	r0, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	fb00 f303 	mul.w	r3, r0, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	440b      	add	r3, r1
 80061d2:	0a1a      	lsrs	r2, r3, #8
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80061de:	f3bf 8f4f 	dsb	sy
}
 80061e2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	889b      	ldrh	r3, [r3, #4]
 80061ee:	461a      	mov	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	4618      	mov	r0, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	fb00 f303 	mul.w	r3, r0, r3
 80061fe:	4413      	add	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006204:	fb02 f303 	mul.w	r3, r2, r3
 8006208:	440b      	add	r3, r1
 800620a:	0c1a      	lsrs	r2, r3, #16
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006216:	f3bf 8f4f 	dsb	sy
}
 800621a:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006222:	22d0      	movs	r2, #208	@ 0xd0
 8006224:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006226:	f3bf 8f4f 	dsb	sy
}
 800622a:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8006256:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800625a:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006262:	2270      	movs	r2, #112	@ 0x70
 8006264:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e007      	b.n	800628c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8006286:	2340      	movs	r3, #64	@ 0x40
 8006288:	e000      	b.n	800628c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800628a:	2300      	movs	r3, #0
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f000 bc28 	b.w	8006afc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ac:	4b94      	ldr	r3, [pc, #592]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f003 0318 	and.w	r3, r3, #24
 80062b4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80062b6:	4b92      	ldr	r3, [pc, #584]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05b      	beq.n	8006384 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d005      	beq.n	80062de <HAL_RCC_OscConfig+0x46>
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b18      	cmp	r3, #24
 80062d6:	d114      	bne.n	8006302 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d111      	bne.n	8006302 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f000 bc08 	b.w	8006afc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80062ec:	4b84      	ldr	r3, [pc, #528]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	4981      	ldr	r1, [pc, #516]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006300:	e040      	b.n	8006384 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d023      	beq.n	8006352 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800630a:	4b7d      	ldr	r3, [pc, #500]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a7c      	ldr	r2, [pc, #496]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fe ff27 	bl	8005168 <HAL_GetTick>
 800631a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800631e:	f7fe ff23 	bl	8005168 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e3e5      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006330:	4b73      	ldr	r3, [pc, #460]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800633c:	4b70      	ldr	r3, [pc, #448]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	041b      	lsls	r3, r3, #16
 800634a:	496d      	ldr	r1, [pc, #436]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800634c:	4313      	orrs	r3, r2
 800634e:	618b      	str	r3, [r1, #24]
 8006350:	e018      	b.n	8006384 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006352:	4b6b      	ldr	r3, [pc, #428]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6a      	ldr	r2, [pc, #424]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800635c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fe ff03 	bl	8005168 <HAL_GetTick>
 8006362:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006366:	f7fe feff 	bl	8005168 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e3c1      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006378:	4b61      	ldr	r3, [pc, #388]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f0      	bne.n	8006366 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80a0 	beq.w	80064d2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b10      	cmp	r3, #16
 8006396:	d005      	beq.n	80063a4 <HAL_RCC_OscConfig+0x10c>
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	2b18      	cmp	r3, #24
 800639c:	d109      	bne.n	80063b2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d106      	bne.n	80063b2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f040 8092 	bne.w	80064d2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e3a4      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ba:	d106      	bne.n	80063ca <HAL_RCC_OscConfig+0x132>
 80063bc:	4b50      	ldr	r3, [pc, #320]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a4f      	ldr	r2, [pc, #316]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	e058      	b.n	800647c <HAL_RCC_OscConfig+0x1e4>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d112      	bne.n	80063f8 <HAL_RCC_OscConfig+0x160>
 80063d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4b48      	ldr	r3, [pc, #288]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a47      	ldr	r2, [pc, #284]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	4b45      	ldr	r3, [pc, #276]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a44      	ldr	r2, [pc, #272]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80063f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e041      	b.n	800647c <HAL_RCC_OscConfig+0x1e4>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006400:	d112      	bne.n	8006428 <HAL_RCC_OscConfig+0x190>
 8006402:	4b3f      	ldr	r3, [pc, #252]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3e      	ldr	r2, [pc, #248]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	4b3c      	ldr	r3, [pc, #240]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3b      	ldr	r2, [pc, #236]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006414:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b39      	ldr	r3, [pc, #228]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a38      	ldr	r2, [pc, #224]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e029      	b.n	800647c <HAL_RCC_OscConfig+0x1e4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006430:	d112      	bne.n	8006458 <HAL_RCC_OscConfig+0x1c0>
 8006432:	4b33      	ldr	r3, [pc, #204]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a32      	ldr	r2, [pc, #200]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b30      	ldr	r3, [pc, #192]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2f      	ldr	r2, [pc, #188]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4b2d      	ldr	r3, [pc, #180]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2c      	ldr	r2, [pc, #176]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	e011      	b.n	800647c <HAL_RCC_OscConfig+0x1e4>
 8006458:	4b29      	ldr	r3, [pc, #164]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a28      	ldr	r2, [pc, #160]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800645e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	4b26      	ldr	r3, [pc, #152]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a25      	ldr	r2, [pc, #148]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 800646a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4b23      	ldr	r3, [pc, #140]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a22      	ldr	r2, [pc, #136]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 8006476:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800647a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7fe fe70 	bl	8005168 <HAL_GetTick>
 8006488:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800648c:	f7fe fe6c 	bl	8005168 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	@ 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e32e      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800649e:	4b18      	ldr	r3, [pc, #96]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x1f4>
 80064aa:	e012      	b.n	80064d2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fe fe5c 	bl	8005168 <HAL_GetTick>
 80064b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80064b4:	f7fe fe58 	bl	8005168 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b64      	cmp	r3, #100	@ 0x64
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e31a      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <HAL_RCC_OscConfig+0x268>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 809a 	beq.w	8006614 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x25a>
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	2b18      	cmp	r3, #24
 80064ea:	d149      	bne.n	8006580 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d146      	bne.n	8006580 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e2fe      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
 80064fe:	bf00      	nop
 8006500:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800650a:	4b9a      	ldr	r3, [pc, #616]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0218 	and.w	r2, r3, #24
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	d014      	beq.n	8006544 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800651a:	4b96      	ldr	r3, [pc, #600]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 0218 	bic.w	r2, r3, #24
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	4993      	ldr	r1, [pc, #588]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800652c:	f000 fdd0 	bl	80070d0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006530:	4b91      	ldr	r3, [pc, #580]	@ (8006778 <HAL_RCC_OscConfig+0x4e0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fd8d 	bl	8005054 <HAL_InitTick>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e2db      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fe fe10 	bl	8005168 <HAL_GetTick>
 8006548:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800654c:	f7fe fe0c 	bl	8005168 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e2ce      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800655e:	4b85      	ldr	r3, [pc, #532]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800656a:	4b82      	ldr	r3, [pc, #520]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	497e      	ldr	r1, [pc, #504]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800657e:	e049      	b.n	8006614 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d02c      	beq.n	80065e2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006588:	4b7a      	ldr	r3, [pc, #488]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f023 0218 	bic.w	r2, r3, #24
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	4977      	ldr	r1, [pc, #476]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800659a:	4b76      	ldr	r3, [pc, #472]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a75      	ldr	r2, [pc, #468]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a6:	f7fe fddf 	bl	8005168 <HAL_GetTick>
 80065aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80065ae:	f7fe fddb 	bl	8005168 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e29d      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80065cc:	4b69      	ldr	r3, [pc, #420]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	4966      	ldr	r1, [pc, #408]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	610b      	str	r3, [r1, #16]
 80065e0:	e018      	b.n	8006614 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065e2:	4b64      	ldr	r3, [pc, #400]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a63      	ldr	r2, [pc, #396]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ee:	f7fe fdbb 	bl	8005168 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80065f6:	f7fe fdb7 	bl	8005168 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e279      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006608:	4b5a      	ldr	r3, [pc, #360]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d03c      	beq.n	800669a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01c      	beq.n	8006662 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006628:	4b52      	ldr	r3, [pc, #328]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800662a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800662e:	4a51      	ldr	r2, [pc, #324]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006630:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006634:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006638:	f7fe fd96 	bl	8005168 <HAL_GetTick>
 800663c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006640:	f7fe fd92 	bl	8005168 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e254      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006652:	4b48      	ldr	r3, [pc, #288]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ef      	beq.n	8006640 <HAL_RCC_OscConfig+0x3a8>
 8006660:	e01b      	b.n	800669a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006662:	4b44      	ldr	r3, [pc, #272]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006668:	4a42      	ldr	r2, [pc, #264]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800666a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800666e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006672:	f7fe fd79 	bl	8005168 <HAL_GetTick>
 8006676:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800667a:	f7fe fd75 	bl	8005168 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e237      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800668c:	4b39      	ldr	r3, [pc, #228]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800668e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1ef      	bne.n	800667a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80d2 	beq.w	800684c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80066a8:	4b34      	ldr	r3, [pc, #208]	@ (800677c <HAL_RCC_OscConfig+0x4e4>)
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d118      	bne.n	80066e6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80066b4:	4b31      	ldr	r3, [pc, #196]	@ (800677c <HAL_RCC_OscConfig+0x4e4>)
 80066b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b8:	4a30      	ldr	r2, [pc, #192]	@ (800677c <HAL_RCC_OscConfig+0x4e4>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c0:	f7fe fd52 	bl	8005168 <HAL_GetTick>
 80066c4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c8:	f7fe fd4e 	bl	8005168 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e210      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80066da:	4b28      	ldr	r3, [pc, #160]	@ (800677c <HAL_RCC_OscConfig+0x4e4>)
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d108      	bne.n	8006700 <HAL_RCC_OscConfig+0x468>
 80066ee:	4b21      	ldr	r3, [pc, #132]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80066f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066fe:	e074      	b.n	80067ea <HAL_RCC_OscConfig+0x552>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d118      	bne.n	800673a <HAL_RCC_OscConfig+0x4a2>
 8006708:	4b1a      	ldr	r3, [pc, #104]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800670a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800670e:	4a19      	ldr	r2, [pc, #100]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006718:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800671a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800671e:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006724:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006728:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800672a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800672e:	4a11      	ldr	r2, [pc, #68]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006730:	f023 0304 	bic.w	r3, r3, #4
 8006734:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006738:	e057      	b.n	80067ea <HAL_RCC_OscConfig+0x552>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b05      	cmp	r3, #5
 8006740:	d11e      	bne.n	8006780 <HAL_RCC_OscConfig+0x4e8>
 8006742:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006748:	4a0a      	ldr	r2, [pc, #40]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800674a:	f043 0304 	orr.w	r3, r3, #4
 800674e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006752:	4b08      	ldr	r3, [pc, #32]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006758:	4a06      	ldr	r2, [pc, #24]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800675a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006762:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 8006764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006768:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <HAL_RCC_OscConfig+0x4dc>)
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006772:	e03a      	b.n	80067ea <HAL_RCC_OscConfig+0x552>
 8006774:	44020c00 	.word	0x44020c00
 8006778:	2000001c 	.word	0x2000001c
 800677c:	44020800 	.word	0x44020800
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b85      	cmp	r3, #133	@ 0x85
 8006786:	d118      	bne.n	80067ba <HAL_RCC_OscConfig+0x522>
 8006788:	4ba2      	ldr	r3, [pc, #648]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800678a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800678e:	4aa1      	ldr	r2, [pc, #644]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006790:	f043 0304 	orr.w	r3, r3, #4
 8006794:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006798:	4b9e      	ldr	r3, [pc, #632]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800679a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800679e:	4a9d      	ldr	r2, [pc, #628]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067a8:	4b9a      	ldr	r3, [pc, #616]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ae:	4a99      	ldr	r2, [pc, #612]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067b8:	e017      	b.n	80067ea <HAL_RCC_OscConfig+0x552>
 80067ba:	4b96      	ldr	r3, [pc, #600]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067c0:	4a94      	ldr	r2, [pc, #592]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067ca:	4b92      	ldr	r3, [pc, #584]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067d0:	4a90      	ldr	r2, [pc, #576]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067d2:	f023 0304 	bic.w	r3, r3, #4
 80067d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067da:	4b8e      	ldr	r3, [pc, #568]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067e0:	4a8c      	ldr	r2, [pc, #560]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80067e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fe fcb9 	bl	8005168 <HAL_GetTick>
 80067f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fe fcb5 	bl	8005168 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e175      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006810:	4b80      	ldr	r3, [pc, #512]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ed      	beq.n	80067fa <HAL_RCC_OscConfig+0x562>
 800681e:	e015      	b.n	800684c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006820:	f7fe fca2 	bl	8005168 <HAL_GetTick>
 8006824:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006826:	e00a      	b.n	800683e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006828:	f7fe fc9e 	bl	8005168 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e15e      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800683e:	4b75      	ldr	r3, [pc, #468]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ed      	bne.n	8006828 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d036      	beq.n	80068c6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d019      	beq.n	8006894 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006860:	4b6c      	ldr	r3, [pc, #432]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6b      	ldr	r2, [pc, #428]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800686a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fe fc7c 	bl	8005168 <HAL_GetTick>
 8006870:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006874:	f7fe fc78 	bl	8005168 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e13a      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006886:	4b63      	ldr	r3, [pc, #396]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0x5dc>
 8006892:	e018      	b.n	80068c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006894:	4b5f      	ldr	r3, [pc, #380]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a5e      	ldr	r2, [pc, #376]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800689a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800689e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a0:	f7fe fc62 	bl	8005168 <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80068a8:	f7fe fc5e 	bl	8005168 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e120      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068ba:	4b56      	ldr	r3, [pc, #344]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8115 	beq.w	8006afa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	2b18      	cmp	r3, #24
 80068d4:	f000 80af 	beq.w	8006a36 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	2b02      	cmp	r3, #2
 80068de:	f040 8086 	bne.w	80069ee <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80068e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a4b      	ldr	r2, [pc, #300]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80068e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ee:	f7fe fc3b 	bl	8005168 <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80068f6:	f7fe fc37 	bl	8005168 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e0f9      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006908:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1f0      	bne.n	80068f6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006914:	4b3f      	ldr	r3, [pc, #252]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006928:	0212      	lsls	r2, r2, #8
 800692a:	430a      	orrs	r2, r1
 800692c:	4939      	ldr	r1, [pc, #228]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	628b      	str	r3, [r1, #40]	@ 0x28
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006936:	3b01      	subs	r3, #1
 8006938:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	3b01      	subs	r3, #1
 8006942:	025b      	lsls	r3, r3, #9
 8006944:	b29b      	uxth	r3, r3
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694c:	3b01      	subs	r3, #1
 800694e:	041b      	lsls	r3, r3, #16
 8006950:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	3b01      	subs	r3, #1
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006962:	492c      	ldr	r1, [pc, #176]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006968:	4b2a      	ldr	r3, [pc, #168]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	4a29      	ldr	r2, [pc, #164]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800696e:	f023 0310 	bic.w	r3, r3, #16
 8006972:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006978:	4a26      	ldr	r2, [pc, #152]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800697e:	4b25      	ldr	r3, [pc, #148]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	4a24      	ldr	r2, [pc, #144]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006984:	f043 0310 	orr.w	r3, r3, #16
 8006988:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800698a:	4b22      	ldr	r3, [pc, #136]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	f023 020c 	bic.w	r2, r3, #12
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006996:	491f      	ldr	r1, [pc, #124]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 8006998:	4313      	orrs	r3, r2
 800699a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800699c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	f023 0220 	bic.w	r2, r3, #32
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a8:	491a      	ldr	r1, [pc, #104]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069ae:	4b19      	ldr	r3, [pc, #100]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80069ba:	4b16      	ldr	r3, [pc, #88]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fe fbcf 	bl	8005168 <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80069ce:	f7fe fbcb 	bl	8005168 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e08d      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80069e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f0      	beq.n	80069ce <HAL_RCC_OscConfig+0x736>
 80069ec:	e085      	b.n	8006afa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80069ee:	4b09      	ldr	r3, [pc, #36]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a08      	ldr	r2, [pc, #32]	@ (8006a14 <HAL_RCC_OscConfig+0x77c>)
 80069f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fa:	f7fe fbb5 	bl	8005168 <HAL_GetTick>
 80069fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a00:	e00a      	b.n	8006a18 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006a02:	f7fe fbb1 	bl	8005168 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d903      	bls.n	8006a18 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e073      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
 8006a14:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a18:	4b3a      	ldr	r3, [pc, #232]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ee      	bne.n	8006a02 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006a24:	4b37      	ldr	r3, [pc, #220]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a28:	4a36      	ldr	r2, [pc, #216]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006a2a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a34:	e061      	b.n	8006afa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006a36:	4b33      	ldr	r3, [pc, #204]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a3c:	4b31      	ldr	r3, [pc, #196]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d031      	beq.n	8006aae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f003 0203 	and.w	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d12a      	bne.n	8006aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d122      	bne.n	8006aae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a72:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d11a      	bne.n	8006aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0a5b      	lsrs	r3, r3, #9
 8006a7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d111      	bne.n	8006aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a96:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d108      	bne.n	8006aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d001      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e024      	b.n	8006afc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ab2:	4b14      	ldr	r3, [pc, #80]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d01a      	beq.n	8006afa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006aca:	f023 0310 	bic.w	r3, r3, #16
 8006ace:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fe fb4a 	bl	8005168 <HAL_GetTick>
 8006ad4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006ad6:	bf00      	nop
 8006ad8:	f7fe fb46 	bl	8005168 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d0f9      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae8:	4a06      	ldr	r2, [pc, #24]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006aee:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	4a04      	ldr	r2, [pc, #16]	@ (8006b04 <HAL_RCC_OscConfig+0x86c>)
 8006af4:	f043 0310 	orr.w	r3, r3, #16
 8006af8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	44020c00 	.word	0x44020c00

08006b08 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e19e      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b83      	ldr	r3, [pc, #524]	@ (8006d2c <HAL_RCC_ClockConfig+0x224>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d910      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b80      	ldr	r3, [pc, #512]	@ (8006d2c <HAL_RCC_ClockConfig+0x224>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 020f 	bic.w	r2, r3, #15
 8006b32:	497e      	ldr	r1, [pc, #504]	@ (8006d2c <HAL_RCC_ClockConfig+0x224>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d2c <HAL_RCC_ClockConfig+0x224>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e186      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d012      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695a      	ldr	r2, [r3, #20]
 8006b5c:	4b74      	ldr	r3, [pc, #464]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d909      	bls.n	8006b7e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006b6a:	4b71      	ldr	r3, [pc, #452]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	496d      	ldr	r1, [pc, #436]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d012      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	4b68      	ldr	r3, [pc, #416]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d909      	bls.n	8006bb0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006b9c:	4b64      	ldr	r3, [pc, #400]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4961      	ldr	r1, [pc, #388]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d010      	beq.n	8006bde <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d908      	bls.n	8006bde <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006bcc:	4b58      	ldr	r3, [pc, #352]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	4955      	ldr	r1, [pc, #340]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d010      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	4b50      	ldr	r3, [pc, #320]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d908      	bls.n	8006c0c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 020f 	bic.w	r2, r3, #15
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	494a      	ldr	r1, [pc, #296]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8093 	beq.w	8006d40 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d107      	bne.n	8006c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c22:	4b43      	ldr	r3, [pc, #268]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d121      	bne.n	8006c72 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e113      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d107      	bne.n	8006c4a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d115      	bne.n	8006c72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e107      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d107      	bne.n	8006c62 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006c52:	4b37      	ldr	r3, [pc, #220]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e0fb      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c62:	4b33      	ldr	r3, [pc, #204]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e0f3      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006c72:	4b2f      	ldr	r3, [pc, #188]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f023 0203 	bic.w	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	492c      	ldr	r1, [pc, #176]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c84:	f7fe fa70 	bl	8005168 <HAL_GetTick>
 8006c88:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d112      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006c94:	f7fe fa68 	bl	8005168 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e0d7      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006caa:	4b21      	ldr	r3, [pc, #132]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0318 	and.w	r3, r3, #24
 8006cb2:	2b18      	cmp	r3, #24
 8006cb4:	d1ee      	bne.n	8006c94 <HAL_RCC_ClockConfig+0x18c>
 8006cb6:	e043      	b.n	8006d40 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d112      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc2:	f7fe fa51 	bl	8005168 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e0c0      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cd8:	4b15      	ldr	r3, [pc, #84]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f003 0318 	and.w	r3, r3, #24
 8006ce0:	2b10      	cmp	r3, #16
 8006ce2:	d1ee      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0x1ba>
 8006ce4:	e02c      	b.n	8006d40 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d122      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006cee:	e00a      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf0:	f7fe fa3a 	bl	8005168 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e0a9      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCC_ClockConfig+0x228>)
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f003 0318 	and.w	r3, r3, #24
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d1ee      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
 8006d12:	e015      	b.n	8006d40 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006d14:	f7fe fa28 	bl	8005168 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d906      	bls.n	8006d34 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e097      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
 8006d2a:	bf00      	nop
 8006d2c:	40022000 	.word	0x40022000
 8006d30:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d34:	4b4b      	ldr	r3, [pc, #300]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f003 0318 	and.w	r3, r3, #24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e9      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	4b44      	ldr	r3, [pc, #272]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d208      	bcs.n	8006d6e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006d5c:	4b41      	ldr	r3, [pc, #260]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f023 020f 	bic.w	r2, r3, #15
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	493e      	ldr	r1, [pc, #248]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e68 <HAL_RCC_ClockConfig+0x360>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d210      	bcs.n	8006d9e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e68 <HAL_RCC_ClockConfig+0x360>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f023 020f 	bic.w	r2, r3, #15
 8006d84:	4938      	ldr	r1, [pc, #224]	@ (8006e68 <HAL_RCC_ClockConfig+0x360>)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8c:	4b36      	ldr	r3, [pc, #216]	@ (8006e68 <HAL_RCC_ClockConfig+0x360>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d001      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e05d      	b.n	8006e5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d010      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	4b2d      	ldr	r3, [pc, #180]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d208      	bcs.n	8006dcc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006dba:	4b2a      	ldr	r3, [pc, #168]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	4927      	ldr	r1, [pc, #156]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d209      	bcs.n	8006dfe <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006dea:	4b1e      	ldr	r3, [pc, #120]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	491a      	ldr	r1, [pc, #104]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d012      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	4b15      	ldr	r3, [pc, #84]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d209      	bcs.n	8006e30 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006e1c:	4b11      	ldr	r3, [pc, #68]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	490e      	ldr	r1, [pc, #56]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006e30:	f000 f822 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 8006e34:	4602      	mov	r2, r0
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	490b      	ldr	r1, [pc, #44]	@ (8006e6c <HAL_RCC_ClockConfig+0x364>)
 8006e40:	5ccb      	ldrb	r3, [r1, r3]
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	4a0a      	ldr	r2, [pc, #40]	@ (8006e70 <HAL_RCC_ClockConfig+0x368>)
 8006e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <HAL_RCC_ClockConfig+0x36c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe f900 	bl	8005054 <HAL_InitTick>
 8006e54:	4603      	mov	r3, r0
 8006e56:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	44020c00 	.word	0x44020c00
 8006e68:	40022000 	.word	0x40022000
 8006e6c:	080125ec 	.word	0x080125ec
 8006e70:	20000018 	.word	0x20000018
 8006e74:	2000001c 	.word	0x2000001c

08006e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b089      	sub	sp, #36	@ 0x24
 8006e7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006e7e:	4b8c      	ldr	r3, [pc, #560]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f003 0318 	and.w	r3, r3, #24
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d102      	bne.n	8006e90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e107      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e90:	4b87      	ldr	r3, [pc, #540]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0318 	and.w	r3, r3, #24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d112      	bne.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006e9c:	4b84      	ldr	r3, [pc, #528]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d009      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ea8:	4b81      	ldr	r3, [pc, #516]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	08db      	lsrs	r3, r3, #3
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	4a81      	ldr	r2, [pc, #516]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e0f1      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e0ee      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f003 0318 	and.w	r3, r3, #24
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d102      	bne.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ece:	4b7b      	ldr	r3, [pc, #492]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x244>)
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e0e5      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ed4:	4b76      	ldr	r3, [pc, #472]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f003 0318 	and.w	r3, r3, #24
 8006edc:	2b18      	cmp	r3, #24
 8006ede:	f040 80dd 	bne.w	800709c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006ee2:	4b73      	ldr	r3, [pc, #460]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006eec:	4b70      	ldr	r3, [pc, #448]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ef8:	4b6d      	ldr	r3, [pc, #436]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	091b      	lsrs	r3, r3, #4
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006f04:	4b6a      	ldr	r3, [pc, #424]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80b7 	beq.w	8007096 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d003      	beq.n	8006f36 <HAL_RCC_GetSysClockFreq+0xbe>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d056      	beq.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x16a>
 8006f34:	e077      	b.n	8007026 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006f36:	4b5e      	ldr	r3, [pc, #376]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d02d      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f42:	4b5b      	ldr	r3, [pc, #364]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	08db      	lsrs	r3, r3, #3
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f52:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6c:	4b50      	ldr	r3, [pc, #320]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f80:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x248>
 8006f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f98:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006f9c:	e065      	b.n	800706a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80070c4 <HAL_RCC_GetSysClockFreq+0x24c>
 8006fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x248>
 8006fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fdc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006fe0:	e043      	b.n	800706a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fec:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80070c8 <HAL_RCC_GetSysClockFreq+0x250>
 8006ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007004:	ed97 6a02 	vldr	s12, [r7, #8]
 8007008:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x248>
 800700c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007010:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007014:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007018:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800701c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007020:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007024:	e021      	b.n	800706a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007030:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80070cc <HAL_RCC_GetSysClockFreq+0x254>
 8007034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007038:	4b1d      	ldr	r3, [pc, #116]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800703a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007048:	ed97 6a02 	vldr	s12, [r7, #8]
 800704c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x248>
 8007050:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007054:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007064:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007068:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800706a:	4b11      	ldr	r3, [pc, #68]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800706c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706e:	0a5b      	lsrs	r3, r3, #9
 8007070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007074:	3301      	adds	r3, #1
 8007076:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007082:	edd7 6a06 	vldr	s13, [r7, #24]
 8007086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 3a90 	vmov	r3, s15
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e004      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
 800709a:	e001      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x240>)
 800709e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80070a0:	69fb      	ldr	r3, [r7, #28]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3724      	adds	r7, #36	@ 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	44020c00 	.word	0x44020c00
 80070b4:	003d0900 	.word	0x003d0900
 80070b8:	03d09000 	.word	0x03d09000
 80070bc:	017d7840 	.word	0x017d7840
 80070c0:	46000000 	.word	0x46000000
 80070c4:	4c742400 	.word	0x4c742400
 80070c8:	4bbebc20 	.word	0x4bbebc20
 80070cc:	4a742400 	.word	0x4a742400

080070d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80070d4:	f7ff fed0 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b08      	ldr	r3, [pc, #32]	@ (80070fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80070dc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80070de:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80070e2:	4907      	ldr	r1, [pc, #28]	@ (8007100 <HAL_RCC_GetHCLKFreq+0x30>)
 80070e4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80070e6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	4a05      	ldr	r2, [pc, #20]	@ (8007104 <HAL_RCC_GetHCLKFreq+0x34>)
 80070f0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80070f2:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <HAL_RCC_GetHCLKFreq+0x34>)
 80070f4:	681b      	ldr	r3, [r3, #0]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	44020c00 	.word	0x44020c00
 8007100:	080125ec 	.word	0x080125ec
 8007104:	20000018 	.word	0x20000018

08007108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800710c:	f7ff ffe0 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8007110:	4602      	mov	r2, r0
 8007112:	4b06      	ldr	r3, [pc, #24]	@ (800712c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	4904      	ldr	r1, [pc, #16]	@ (8007130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800711e:	5ccb      	ldrb	r3, [r1, r3]
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	44020c00 	.word	0x44020c00
 8007130:	080125fc 	.word	0x080125fc

08007134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007138:	f7ff ffca 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 800713c:	4602      	mov	r2, r0
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	4904      	ldr	r1, [pc, #16]	@ (800715c <HAL_RCC_GetPCLK2Freq+0x28>)
 800714a:	5ccb      	ldrb	r3, [r1, r3]
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007154:	4618      	mov	r0, r3
 8007156:	bd80      	pop	{r7, pc}
 8007158:	44020c00 	.word	0x44020c00
 800715c:	080125fc 	.word	0x080125fc

08007160 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007164:	f7ff ffb4 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8007168:	4602      	mov	r2, r0
 800716a:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <HAL_RCC_GetPCLK3Freq+0x24>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	0b1b      	lsrs	r3, r3, #12
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	4904      	ldr	r1, [pc, #16]	@ (8007188 <HAL_RCC_GetPCLK3Freq+0x28>)
 8007176:	5ccb      	ldrb	r3, [r1, r3]
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007180:	4618      	mov	r0, r3
 8007182:	bd80      	pop	{r7, pc}
 8007184:	44020c00 	.word	0x44020c00
 8007188:	080125fc 	.word	0x080125fc

0800718c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800718c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007190:	b0d8      	sub	sp, #352	@ 0x160
 8007192:	af00      	add	r7, sp, #0
 8007194:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007198:	2300      	movs	r3, #0
 800719a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80071b0:	2500      	movs	r5, #0
 80071b2:	ea54 0305 	orrs.w	r3, r4, r5
 80071b6:	d00b      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80071b8:	4bcd      	ldr	r3, [pc, #820]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80071ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071be:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80071c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	4ac9      	ldr	r2, [pc, #804]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80071ca:	430b      	orrs	r3, r1
 80071cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f002 0801 	and.w	r8, r2, #1
 80071dc:	f04f 0900 	mov.w	r9, #0
 80071e0:	ea58 0309 	orrs.w	r3, r8, r9
 80071e4:	d042      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80071e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ec:	2b05      	cmp	r3, #5
 80071ee:	d823      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80071f0:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80071f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f6:	bf00      	nop
 80071f8:	08007241 	.word	0x08007241
 80071fc:	08007211 	.word	0x08007211
 8007200:	08007225 	.word	0x08007225
 8007204:	08007241 	.word	0x08007241
 8007208:	08007241 	.word	0x08007241
 800720c:	08007241 	.word	0x08007241
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007214:	3308      	adds	r3, #8
 8007216:	4618      	mov	r0, r3
 8007218:	f004 feda 	bl	800bfd0 <RCCEx_PLL2_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8007222:	e00e      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007228:	3330      	adds	r3, #48	@ 0x30
 800722a:	4618      	mov	r0, r3
 800722c:	f004 ff68 	bl	800c100 <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10c      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800724a:	4ba9      	ldr	r3, [pc, #676]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800724c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007250:	f023 0107 	bic.w	r1, r3, #7
 8007254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725a:	4aa5      	ldr	r2, [pc, #660]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800725c:	430b      	orrs	r3, r1
 800725e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007262:	e003      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007268:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800726c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f002 0a02 	and.w	sl, r2, #2
 8007278:	f04f 0b00 	mov.w	fp, #0
 800727c:	ea5a 030b 	orrs.w	r3, sl, fp
 8007280:	f000 8088 	beq.w	8007394 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728a:	2b28      	cmp	r3, #40	@ 0x28
 800728c:	d868      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800728e:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	08007369 	.word	0x08007369
 8007298:	08007361 	.word	0x08007361
 800729c:	08007361 	.word	0x08007361
 80072a0:	08007361 	.word	0x08007361
 80072a4:	08007361 	.word	0x08007361
 80072a8:	08007361 	.word	0x08007361
 80072ac:	08007361 	.word	0x08007361
 80072b0:	08007361 	.word	0x08007361
 80072b4:	08007339 	.word	0x08007339
 80072b8:	08007361 	.word	0x08007361
 80072bc:	08007361 	.word	0x08007361
 80072c0:	08007361 	.word	0x08007361
 80072c4:	08007361 	.word	0x08007361
 80072c8:	08007361 	.word	0x08007361
 80072cc:	08007361 	.word	0x08007361
 80072d0:	08007361 	.word	0x08007361
 80072d4:	0800734d 	.word	0x0800734d
 80072d8:	08007361 	.word	0x08007361
 80072dc:	08007361 	.word	0x08007361
 80072e0:	08007361 	.word	0x08007361
 80072e4:	08007361 	.word	0x08007361
 80072e8:	08007361 	.word	0x08007361
 80072ec:	08007361 	.word	0x08007361
 80072f0:	08007361 	.word	0x08007361
 80072f4:	08007369 	.word	0x08007369
 80072f8:	08007361 	.word	0x08007361
 80072fc:	08007361 	.word	0x08007361
 8007300:	08007361 	.word	0x08007361
 8007304:	08007361 	.word	0x08007361
 8007308:	08007361 	.word	0x08007361
 800730c:	08007361 	.word	0x08007361
 8007310:	08007361 	.word	0x08007361
 8007314:	08007369 	.word	0x08007369
 8007318:	08007361 	.word	0x08007361
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007361 	.word	0x08007361
 8007328:	08007361 	.word	0x08007361
 800732c:	08007361 	.word	0x08007361
 8007330:	08007361 	.word	0x08007361
 8007334:	08007369 	.word	0x08007369
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800733c:	3308      	adds	r3, #8
 800733e:	4618      	mov	r0, r3
 8007340:	f004 fe46 	bl	800bfd0 <RCCEx_PLL2_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800734a:	e00e      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800734c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007350:	3330      	adds	r3, #48	@ 0x30
 8007352:	4618      	mov	r0, r3
 8007354:	f004 fed4 	bl	800c100 <RCCEx_PLL3_Config>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800735e:	e004      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007366:	e000      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8007368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007372:	4b5f      	ldr	r3, [pc, #380]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007378:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800737c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007382:	4a5b      	ldr	r2, [pc, #364]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007384:	430b      	orrs	r3, r1
 8007386:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007390:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f002 0304 	and.w	r3, r2, #4
 80073a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80073aa:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d04e      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80073b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80073be:	d02c      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80073c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80073c4:	d825      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ca:	d028      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80073cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d0:	d81f      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073d4:	d025      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80073d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80073d8:	d81b      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073da:	2b80      	cmp	r3, #128	@ 0x80
 80073dc:	d00f      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x272>
 80073de:	2b80      	cmp	r3, #128	@ 0x80
 80073e0:	d817      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01f      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80073e6:	2b40      	cmp	r3, #64	@ 0x40
 80073e8:	d113      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ee:	3308      	adds	r3, #8
 80073f0:	4618      	mov	r0, r3
 80073f2:	f004 fded 	bl	800bfd0 <RCCEx_PLL2_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80073fc:	e014      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007402:	3330      	adds	r3, #48	@ 0x30
 8007404:	4618      	mov	r0, r3
 8007406:	f004 fe7b 	bl	800c100 <RCCEx_PLL3_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007410:	e00a      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007418:	e006      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800741a:	bf00      	nop
 800741c:	e004      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800741e:	bf00      	nop
 8007420:	e002      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007422:	bf00      	nop
 8007424:	e000      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10c      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007430:	4b2f      	ldr	r3, [pc, #188]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007436:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800743a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800743e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007440:	4a2b      	ldr	r2, [pc, #172]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007442:	430b      	orrs	r3, r1
 8007444:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800744e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f002 0308 	and.w	r3, r2, #8
 800745e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007462:	2300      	movs	r3, #0
 8007464:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007468:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800746c:	460b      	mov	r3, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	d056      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007472:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007478:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800747c:	d031      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800747e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007482:	d82a      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007488:	d02d      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748e:	d824      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007490:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007494:	d029      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007496:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800749a:	d81e      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074a0:	d011      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80074a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074a6:	d818      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d023      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80074ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b0:	d113      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074b6:	3308      	adds	r3, #8
 80074b8:	4618      	mov	r0, r3
 80074ba:	f004 fd89 	bl	800bfd0 <RCCEx_PLL2_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80074c4:	e017      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ca:	3330      	adds	r3, #48	@ 0x30
 80074cc:	4618      	mov	r0, r3
 80074ce:	f004 fe17 	bl	800c100 <RCCEx_PLL3_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80074d8:	e00d      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074e0:	e009      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80074e2:	bf00      	nop
 80074e4:	e007      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80074e6:	bf00      	nop
 80074e8:	e005      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80074ea:	bf00      	nop
 80074ec:	e003      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80074ee:	bf00      	nop
 80074f0:	44020c00 	.word	0x44020c00
        break;
 80074f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10c      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80074fe:	4bbb      	ldr	r3, [pc, #748]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007504:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800750c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800750e:	4ab7      	ldr	r2, [pc, #732]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007510:	430b      	orrs	r3, r1
 8007512:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800751c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f002 0310 	and.w	r3, r2, #16
 800752c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007530:	2300      	movs	r3, #0
 8007532:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007536:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800753a:	460b      	mov	r3, r1
 800753c:	4313      	orrs	r3, r2
 800753e:	d053      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007546:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800754a:	d031      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800754c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007550:	d82a      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007552:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007556:	d02d      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800755c:	d824      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800755e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007562:	d029      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007564:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007568:	d81e      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800756a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800756e:	d011      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007574:	d818      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x430>
 800757a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800757e:	d113      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007584:	3308      	adds	r3, #8
 8007586:	4618      	mov	r0, r3
 8007588:	f004 fd22 	bl	800bfd0 <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007592:	e014      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007598:	3330      	adds	r3, #48	@ 0x30
 800759a:	4618      	mov	r0, r3
 800759c:	f004 fdb0 	bl	800c100 <RCCEx_PLL3_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80075a6:	e00a      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075ae:	e006      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80075b0:	bf00      	nop
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80075b4:	bf00      	nop
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80075b8:	bf00      	nop
 80075ba:	e000      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80075bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10c      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80075c6:	4b89      	ldr	r3, [pc, #548]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80075c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80075d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d6:	4a85      	ldr	r2, [pc, #532]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80075d8:	430b      	orrs	r3, r1
 80075da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075de:	e003      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f002 0320 	and.w	r3, r2, #32
 80075f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80075fe:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d053      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007612:	d031      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007614:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007618:	d82a      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800761a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800761e:	d02d      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007624:	d824      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007626:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800762a:	d029      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800762c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007630:	d81e      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007636:	d011      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763c:	d818      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d020      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007646:	d113      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764c:	3308      	adds	r3, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f004 fcbe 	bl	800bfd0 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800765a:	e014      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800765c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007660:	3330      	adds	r3, #48	@ 0x30
 8007662:	4618      	mov	r0, r3
 8007664:	f004 fd4c 	bl	800c100 <RCCEx_PLL3_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800766e:	e00a      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007676:	e006      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007678:	bf00      	nop
 800767a:	e004      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800767c:	bf00      	nop
 800767e:	e002      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007686:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800768e:	4b57      	ldr	r3, [pc, #348]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007694:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769e:	4a53      	ldr	r2, [pc, #332]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80076a6:	e003      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80076bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80076c0:	2300      	movs	r3, #0
 80076c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80076c6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80076ca:	460b      	mov	r3, r1
 80076cc:	4313      	orrs	r3, r2
 80076ce:	d053      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80076d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80076da:	d031      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80076dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80076e0:	d82a      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e6:	d02d      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80076e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ec:	d824      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80076f2:	d029      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80076f8:	d81e      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80076fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80076fe:	d011      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007700:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007704:	d818      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d020      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800770a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800770e:	d113      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007714:	3308      	adds	r3, #8
 8007716:	4618      	mov	r0, r3
 8007718:	f004 fc5a 	bl	800bfd0 <RCCEx_PLL2_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007722:	e014      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007728:	3330      	adds	r3, #48	@ 0x30
 800772a:	4618      	mov	r0, r3
 800772c:	f004 fce8 	bl	800c100 <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007736:	e00a      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800773e:	e006      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007740:	bf00      	nop
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007744:	bf00      	nop
 8007746:	e002      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10c      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007756:	4b25      	ldr	r3, [pc, #148]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800775c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007766:	4a21      	ldr	r2, [pc, #132]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007768:	430b      	orrs	r3, r1
 800776a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800776e:	e003      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007774:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007778:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007784:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007788:	2300      	movs	r3, #0
 800778a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800778e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d055      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800779c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800779e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80077a2:	d033      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80077a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80077a8:	d82c      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80077aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077ae:	d02f      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80077b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077b4:	d826      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80077b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80077ba:	d02b      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80077bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80077c0:	d820      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80077c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077c6:	d013      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80077c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077cc:	d81a      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d022      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80077d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077d6:	d115      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077dc:	3308      	adds	r3, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f004 fbf6 	bl	800bfd0 <RCCEx_PLL2_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80077ea:	e016      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80077ec:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f4:	3330      	adds	r3, #48	@ 0x30
 80077f6:	4618      	mov	r0, r3
 80077f8:	f004 fc82 	bl	800c100 <RCCEx_PLL3_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007802:	e00a      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800780a:	e006      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800780c:	bf00      	nop
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007810:	bf00      	nop
 8007812:	e002      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007822:	4bbb      	ldr	r3, [pc, #748]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007828:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800782c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007832:	4ab7      	ldr	r2, [pc, #732]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007834:	430b      	orrs	r3, r1
 8007836:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800783a:	e003      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007840:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007844:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007850:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800785a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d053      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800786a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800786e:	d031      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007870:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007874:	d82a      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800787a:	d02d      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800787c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007880:	d824      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007882:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007886:	d029      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007888:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800788c:	d81e      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800788e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007892:	d011      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007894:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007898:	d818      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800789e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078a2:	d113      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078a8:	3308      	adds	r3, #8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f004 fb90 	bl	800bfd0 <RCCEx_PLL2_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80078b6:	e014      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078bc:	3330      	adds	r3, #48	@ 0x30
 80078be:	4618      	mov	r0, r3
 80078c0:	f004 fc1e 	bl	800c100 <RCCEx_PLL3_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80078ca:	e00a      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078d2:	e006      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80078d4:	bf00      	nop
 80078d6:	e004      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80078d8:	bf00      	nop
 80078da:	e002      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80078dc:	bf00      	nop
 80078de:	e000      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80078e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10c      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80078ea:	4b89      	ldr	r3, [pc, #548]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80078ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80078f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078fa:	4a85      	ldr	r2, [pc, #532]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007908:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800790c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007918:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007922:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d055      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800792c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007934:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007938:	d031      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800793a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800793e:	d82a      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007944:	d02d      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800794a:	d824      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800794c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007950:	d029      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007952:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007956:	d81e      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800795c:	d011      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800795e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007962:	d818      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800796c:	d113      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800796e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007972:	3308      	adds	r3, #8
 8007974:	4618      	mov	r0, r3
 8007976:	f004 fb2b 	bl	800bfd0 <RCCEx_PLL2_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007980:	e014      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007986:	3330      	adds	r3, #48	@ 0x30
 8007988:	4618      	mov	r0, r3
 800798a:	f004 fbb9 	bl	800c100 <RCCEx_PLL3_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007994:	e00a      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800799c:	e006      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800799e:	bf00      	nop
 80079a0:	e004      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80079a2:	bf00      	nop
 80079a4:	e002      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80079a6:	bf00      	nop
 80079a8:	e000      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80079aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10d      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80079b4:	4b56      	ldr	r3, [pc, #344]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80079b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079ba:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80079be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c6:	4a52      	ldr	r2, [pc, #328]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079ce:	e003      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80079d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80079e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079e8:	2300      	movs	r3, #0
 80079ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80079ee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80079f2:	460b      	mov	r3, r1
 80079f4:	4313      	orrs	r3, r2
 80079f6:	d044      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80079f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	d823      	bhi.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007a04:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a55 	.word	0x08007a55
 8007a10:	08007a25 	.word	0x08007a25
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a55 	.word	0x08007a55
 8007a1c:	08007a55 	.word	0x08007a55
 8007a20:	08007a55 	.word	0x08007a55
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a28:	3308      	adds	r3, #8
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f004 fad0 	bl	800bfd0 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007a36:	e00e      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a3c:	3330      	adds	r3, #48	@ 0x30
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f004 fb5e 	bl	800c100 <RCCEx_PLL3_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007a4a:	e004      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a52:	e000      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10d      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007a60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a64:	f023 0107 	bic.w	r1, r3, #7
 8007a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a70:	4a27      	ldr	r2, [pc, #156]	@ (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007a72:	430b      	orrs	r3, r1
 8007a74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007a78:	e003      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a92:	2300      	movs	r3, #0
 8007a94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a98:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d04f      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aaa:	2b50      	cmp	r3, #80	@ 0x50
 8007aac:	d029      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007aae:	2b50      	cmp	r3, #80	@ 0x50
 8007ab0:	d823      	bhi.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007ab2:	2b40      	cmp	r3, #64	@ 0x40
 8007ab4:	d027      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007ab6:	2b40      	cmp	r3, #64	@ 0x40
 8007ab8:	d81f      	bhi.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007aba:	2b30      	cmp	r3, #48	@ 0x30
 8007abc:	d025      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8007abe:	2b30      	cmp	r3, #48	@ 0x30
 8007ac0:	d81b      	bhi.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d00f      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d817      	bhi.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d022      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d113      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f004 fa79 	bl	800bfd0 <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007ae4:	e017      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aea:	3330      	adds	r3, #48	@ 0x30
 8007aec:	4618      	mov	r0, r3
 8007aee:	f004 fb07 	bl	800c100 <RCCEx_PLL3_Config>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007af8:	e00d      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b00:	e009      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007b02:	bf00      	nop
 8007b04:	e007      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007b06:	bf00      	nop
 8007b08:	e005      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007b0a:	bf00      	nop
 8007b0c:	e003      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007b0e:	bf00      	nop
 8007b10:	44020c00 	.word	0x44020c00
        break;
 8007b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10d      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007b1e:	4baf      	ldr	r3, [pc, #700]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007b20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b24:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b30:	4aaa      	ldr	r2, [pc, #680]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007b32:	430b      	orrs	r3, r1
 8007b34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007b38:	e003      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b52:	2300      	movs	r3, #0
 8007b54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	d055      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007b62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b6e:	d031      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007b70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b74:	d82a      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b7a:	d02d      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b80:	d824      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b86:	d029      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b8c:	d81e      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b92:	d011      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b98:	d818      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d020      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ba2:	d113      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ba8:	3308      	adds	r3, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f004 fa10 	bl	800bfd0 <RCCEx_PLL2_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007bb6:	e014      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bbc:	3330      	adds	r3, #48	@ 0x30
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f004 fa9e 	bl	800c100 <RCCEx_PLL3_Config>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007bca:	e00a      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007bd2:	e006      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007bd4:	bf00      	nop
 8007bd6:	e004      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007bd8:	bf00      	nop
 8007bda:	e002      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007bdc:	bf00      	nop
 8007bde:	e000      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10d      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007bea:	4b7c      	ldr	r3, [pc, #496]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bf0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bfc:	4a77      	ldr	r2, [pc, #476]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c04:	e003      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d03d      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c3a:	d01b      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007c3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c40:	d814      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c46:	d017      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c4c:	d80e      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d014      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c56:	d109      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c5c:	3330      	adds	r3, #48	@ 0x30
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f004 fa4e 	bl	800c100 <RCCEx_PLL3_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007c6a:	e008      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c72:	e004      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10d      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007c86:	4b55      	ldr	r3, [pc, #340]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c98:	4a50      	ldr	r2, [pc, #320]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007ca0:	e003      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ca6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d03d      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007cd6:	d01b      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007cd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007cdc:	d814      	bhi.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007cde:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ce2:	d017      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007ce4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ce8:	d80e      	bhi.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d014      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007cee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cf2:	d109      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cf8:	3330      	adds	r3, #48	@ 0x30
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f004 fa00 	bl	800c100 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007d06:	e008      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007d10:	bf00      	nop
 8007d12:	e002      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007d14:	bf00      	nop
 8007d16:	e000      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007d22:	4b2e      	ldr	r3, [pc, #184]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d28:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d34:	4a29      	ldr	r2, [pc, #164]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007d36:	430b      	orrs	r3, r1
 8007d38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007d3c:	e003      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d56:	2300      	movs	r3, #0
 8007d58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d60:	460b      	mov	r3, r1
 8007d62:	4313      	orrs	r3, r2
 8007d64:	d040      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d72:	d01b      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007d74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d78:	d814      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d7e:	d017      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d84:	d80e      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8e:	d109      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d94:	3330      	adds	r3, #48	@ 0x30
 8007d96:	4618      	mov	r0, r3
 8007d98:	f004 f9b2 	bl	800c100 <RCCEx_PLL3_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007da2:	e008      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007daa:	e004      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007dac:	bf00      	nop
 8007dae:	e002      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d110      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007dbe:	4b07      	ldr	r3, [pc, #28]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007dc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dc4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dd0:	4a02      	ldr	r2, [pc, #8]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007dd8:	e006      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007dda:	bf00      	nop
 8007ddc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007de4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	2100      	movs	r1, #0
 8007df2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8007df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007dfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	d03d      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007e14:	d01b      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007e16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007e1a:	d814      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e20:	d017      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e26:	d80e      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d014      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e30:	d109      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e36:	3330      	adds	r3, #48	@ 0x30
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f004 f961 	bl	800c100 <RCCEx_PLL3_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007e44:	e008      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e4c:	e004      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10d      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007e60:	4bbe      	ldr	r3, [pc, #760]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e72:	4aba      	ldr	r2, [pc, #744]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007e7a:	e003      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e94:	2300      	movs	r3, #0
 8007e96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	d035      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eb0:	d015      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007eb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eb6:	d80e      	bhi.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ec0:	d109      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ec6:	3330      	adds	r3, #48	@ 0x30
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f004 f919 	bl	800c100 <RCCEx_PLL3_Config>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007ed4:	e006      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007edc:	e002      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10d      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007eec:	4b9b      	ldr	r3, [pc, #620]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007eee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ef2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007efe:	4a97      	ldr	r2, [pc, #604]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	d00e      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007f30:	4b8a      	ldr	r3, [pc, #552]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	4a89      	ldr	r2, [pc, #548]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f3a:	61d3      	str	r3, [r2, #28]
 8007f3c:	4b87      	ldr	r3, [pc, #540]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f44:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007f48:	4a84      	ldr	r2, [pc, #528]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	d055      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f76:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007f7a:	d031      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007f7c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007f80:	d82a      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f86:	d02d      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f8c:	d824      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f92:	d029      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f98:	d81e      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f9e:	d011      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa4:	d818      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d020      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8007faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fae:	d113      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f004 f80a 	bl	800bfd0 <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007fc2:	e014      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fc8:	3330      	adds	r3, #48	@ 0x30
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f004 f898 	bl	800c100 <RCCEx_PLL3_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007fd6:	e00a      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fde:	e006      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007fe0:	bf00      	nop
 8007fe2:	e004      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10d      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007ff6:	4b59      	ldr	r3, [pc, #356]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ffc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008000:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008008:	4a54      	ldr	r2, [pc, #336]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800800a:	430b      	orrs	r3, r1
 800800c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008010:	e003      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008012:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008016:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800801a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008030:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008034:	460b      	mov	r3, r1
 8008036:	4313      	orrs	r3, r2
 8008038:	d055      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800803a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800803e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008042:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008046:	d031      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8008048:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800804c:	d82a      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800804e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008052:	d02d      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8008054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008058:	d824      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800805a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800805e:	d029      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8008060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008064:	d81e      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800806a:	d011      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800806c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008070:	d818      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d020      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800807a:	d113      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800807c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008080:	3308      	adds	r3, #8
 8008082:	4618      	mov	r0, r3
 8008084:	f003 ffa4 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800808e:	e014      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008094:	3330      	adds	r3, #48	@ 0x30
 8008096:	4618      	mov	r0, r3
 8008098:	f004 f832 	bl	800c100 <RCCEx_PLL3_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80080a2:	e00a      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80080aa:	e006      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80080ac:	bf00      	nop
 80080ae:	e004      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80080b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10d      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80080c2:	4b26      	ldr	r3, [pc, #152]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80080c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80080c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80080cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80080d4:	4a21      	ldr	r2, [pc, #132]	@ (800815c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80080dc:	e003      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80080e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	2100      	movs	r1, #0
 80080f0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008100:	460b      	mov	r3, r1
 8008102:	4313      	orrs	r3, r2
 8008104:	d057      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8008106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800810a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800810e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008112:	d033      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8008114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008118:	d82c      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800811a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800811e:	d02f      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8008120:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008124:	d826      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800812a:	d02b      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800812c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008130:	d820      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008136:	d013      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800813c:	d81a      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d022      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8008142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008146:	d115      	bne.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800814c:	3308      	adds	r3, #8
 800814e:	4618      	mov	r0, r3
 8008150:	f003 ff3e 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800815a:	e016      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800815c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008164:	3330      	adds	r3, #48	@ 0x30
 8008166:	4618      	mov	r0, r3
 8008168:	f003 ffca 	bl	800c100 <RCCEx_PLL3_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008172:	e00a      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800817a:	e006      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800817c:	bf00      	nop
 800817e:	e004      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008180:	bf00      	nop
 8008182:	e002      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008184:	bf00      	nop
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10d      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8008192:	4bbb      	ldr	r3, [pc, #748]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008194:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008198:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800819c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081a4:	4ab6      	ldr	r2, [pc, #728]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80081a6:	430b      	orrs	r3, r1
 80081a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80081ac:	e003      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80081b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	2100      	movs	r1, #0
 80081c0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80081c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4313      	orrs	r3, r2
 80081d4:	d055      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80081d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081de:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80081e2:	d031      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80081e4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80081e8:	d82a      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80081ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081ee:	d02d      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80081f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081f4:	d824      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80081f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081fa:	d029      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80081fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008200:	d81e      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008206:	d011      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8008208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800820c:	d818      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d020      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008216:	d113      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800821c:	3308      	adds	r3, #8
 800821e:	4618      	mov	r0, r3
 8008220:	f003 fed6 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800822a:	e014      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800822c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008230:	3330      	adds	r3, #48	@ 0x30
 8008232:	4618      	mov	r0, r3
 8008234:	f003 ff64 	bl	800c100 <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800823e:	e00a      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008246:	e006      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008248:	bf00      	nop
 800824a:	e004      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800824c:	bf00      	nop
 800824e:	e002      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008250:	bf00      	nop
 8008252:	e000      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10d      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800825e:	4b88      	ldr	r3, [pc, #544]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008260:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008264:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8008268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800826c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008270:	4a83      	ldr	r2, [pc, #524]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008272:	430b      	orrs	r3, r1
 8008274:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008278:	e003      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800827e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008282:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	2100      	movs	r1, #0
 800828c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008298:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800829c:	460b      	mov	r3, r1
 800829e:	4313      	orrs	r3, r2
 80082a0:	d055      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80082a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80082ae:	d031      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80082b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80082b4:	d82a      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80082b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80082ba:	d02d      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80082bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80082c0:	d824      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80082c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80082c6:	d029      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80082c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80082cc:	d81e      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80082ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082d2:	d011      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80082d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082d8:	d818      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d020      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80082de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082e2:	d113      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082e8:	3308      	adds	r3, #8
 80082ea:	4618      	mov	r0, r3
 80082ec:	f003 fe70 	bl	800bfd0 <RCCEx_PLL2_Config>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80082f6:	e014      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082fc:	3330      	adds	r3, #48	@ 0x30
 80082fe:	4618      	mov	r0, r3
 8008300:	f003 fefe 	bl	800c100 <RCCEx_PLL3_Config>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800830a:	e00a      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008312:	e006      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008314:	bf00      	nop
 8008316:	e004      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008318:	bf00      	nop
 800831a:	e002      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008322:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10d      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800832a:	4b55      	ldr	r3, [pc, #340]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800832c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008330:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800833c:	4a50      	ldr	r2, [pc, #320]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800833e:	430b      	orrs	r3, r1
 8008340:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008344:	e003      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008346:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800834a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800834e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	2100      	movs	r1, #0
 8008358:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800835c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008360:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008364:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008368:	460b      	mov	r3, r1
 800836a:	4313      	orrs	r3, r2
 800836c:	d055      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800836e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008372:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800837a:	d031      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800837c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008380:	d82a      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008386:	d02d      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800838c:	d824      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800838e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008392:	d029      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008394:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008398:	d81e      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800839a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800839e:	d011      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80083a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083a4:	d818      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d020      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80083aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083ae:	d113      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083b4:	3308      	adds	r3, #8
 80083b6:	4618      	mov	r0, r3
 80083b8:	f003 fe0a 	bl	800bfd0 <RCCEx_PLL2_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80083c2:	e014      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083c8:	3330      	adds	r3, #48	@ 0x30
 80083ca:	4618      	mov	r0, r3
 80083cc:	f003 fe98 	bl	800c100 <RCCEx_PLL3_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80083d6:	e00a      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80083de:	e006      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80083e0:	bf00      	nop
 80083e2:	e004      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80083e4:	bf00      	nop
 80083e6:	e002      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80083e8:	bf00      	nop
 80083ea:	e000      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80083ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10d      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80083f6:	4b22      	ldr	r3, [pc, #136]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80083f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80083fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800840a:	430b      	orrs	r3, r1
 800840c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008410:	e003      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008412:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008416:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800841a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800842a:	2300      	movs	r3, #0
 800842c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008430:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008434:	460b      	mov	r3, r1
 8008436:	4313      	orrs	r3, r2
 8008438:	d055      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800843a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800843e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008446:	d035      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8008448:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800844c:	d82e      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800844e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008452:	d031      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008454:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008458:	d828      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800845a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800845e:	d01b      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008464:	d822      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800846a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800846e:	d009      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008470:	e01c      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008472:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	4a02      	ldr	r2, [pc, #8]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800847c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800847e:	e01c      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008480:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008488:	3308      	adds	r3, #8
 800848a:	4618      	mov	r0, r3
 800848c:	f003 fda0 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008496:	e010      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800849c:	3330      	adds	r3, #48	@ 0x30
 800849e:	4618      	mov	r0, r3
 80084a0:	f003 fe2e 	bl	800c100 <RCCEx_PLL3_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80084aa:	e006      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084b2:	e002      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80084b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10d      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80084c2:	4bc3      	ldr	r3, [pc, #780]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80084c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80084cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084d4:	4abe      	ldr	r2, [pc, #760]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80084d6:	430b      	orrs	r3, r1
 80084d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80084dc:	e003      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80084e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80084f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084f6:	2300      	movs	r3, #0
 80084f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008500:	460b      	mov	r3, r1
 8008502:	4313      	orrs	r3, r2
 8008504:	d051      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800850a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800850e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008512:	d033      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008518:	d82c      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800851a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800851e:	d02d      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008520:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008524:	d826      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800852a:	d019      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800852c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008530:	d820      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8008536:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800853a:	d007      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800853c:	e01a      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800853e:	4ba4      	ldr	r3, [pc, #656]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008542:	4aa3      	ldr	r2, [pc, #652]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008548:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800854a:	e018      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800854c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008550:	3308      	adds	r3, #8
 8008552:	4618      	mov	r0, r3
 8008554:	f003 fd3c 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800855e:	e00e      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008564:	3330      	adds	r3, #48	@ 0x30
 8008566:	4618      	mov	r0, r3
 8008568:	f003 fdca 	bl	800c100 <RCCEx_PLL3_Config>
 800856c:	4603      	mov	r3, r0
 800856e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008572:	e004      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800857a:	e000      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800857c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800857e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10d      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008586:	4b92      	ldr	r3, [pc, #584]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800858c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008594:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008598:	4a8d      	ldr	r2, [pc, #564]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800859a:	430b      	orrs	r3, r1
 800859c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80085a0:	e003      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80085aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80085b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085b8:	2300      	movs	r3, #0
 80085ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80085c0:	460b      	mov	r3, r1
 80085c2:	4313      	orrs	r3, r2
 80085c4:	d032      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80085c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d80f      	bhi.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d211      	bcs.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d911      	bls.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d109      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085e2:	3308      	adds	r3, #8
 80085e4:	4618      	mov	r0, r3
 80085e6:	f003 fcf3 	bl	800bfd0 <RCCEx_PLL2_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085f0:	e006      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085f8:	e002      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80085fa:	bf00      	nop
 80085fc:	e000      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80085fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008600:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10d      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008608:	4b71      	ldr	r3, [pc, #452]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800860a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800860e:	f023 0107 	bic.w	r1, r3, #7
 8008612:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800861a:	4a6d      	ldr	r2, [pc, #436]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800861c:	430b      	orrs	r3, r1
 800861e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008622:	e003      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008624:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008628:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800862c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	2100      	movs	r1, #0
 8008636:	6739      	str	r1, [r7, #112]	@ 0x70
 8008638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800863c:	677b      	str	r3, [r7, #116]	@ 0x74
 800863e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008642:	460b      	mov	r3, r1
 8008644:	4313      	orrs	r3, r2
 8008646:	d024      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8008648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800864c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8008654:	2b08      	cmp	r3, #8
 8008656:	d005      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800865e:	e002      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008660:	bf00      	nop
 8008662:	e000      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008666:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10d      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800866e:	4b58      	ldr	r3, [pc, #352]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008674:	f023 0108 	bic.w	r1, r3, #8
 8008678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800867c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008680:	4a53      	ldr	r2, [pc, #332]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008682:	430b      	orrs	r3, r1
 8008684:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008688:	e003      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800868e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800869e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086a0:	2300      	movs	r3, #0
 80086a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80086a8:	460b      	mov	r3, r1
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f000 80b9 	beq.w	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80086b0:	4b48      	ldr	r3, [pc, #288]	@ (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	4a47      	ldr	r2, [pc, #284]	@ (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086bc:	f7fc fd54 	bl	8005168 <HAL_GetTick>
 80086c0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80086c4:	e00b      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c6:	f7fc fd4f 	bl	8005168 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d903      	bls.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80086dc:	e005      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80086de:	4b3d      	ldr	r3, [pc, #244]	@ (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80086e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0ed      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80086ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 8093 	bne.w	800881a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086f4:	4b36      	ldr	r3, [pc, #216]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80086f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086fe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008702:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d023      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800870a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800870e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008712:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008716:	4293      	cmp	r3, r2
 8008718:	d01b      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800871a:	4b2d      	ldr	r3, [pc, #180]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800871c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008724:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008728:	4b29      	ldr	r3, [pc, #164]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800872a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800872e:	4a28      	ldr	r2, [pc, #160]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008734:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008738:	4b25      	ldr	r3, [pc, #148]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800873a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800873e:	4a24      	ldr	r2, [pc, #144]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008748:	4a21      	ldr	r2, [pc, #132]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800874a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800874e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008752:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d019      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875e:	f7fc fd03 	bl	8005168 <HAL_GetTick>
 8008762:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008766:	e00d      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008768:	f7fc fcfe 	bl	8005168 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008772:	1ad2      	subs	r2, r2, r3
 8008774:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008778:	429a      	cmp	r2, r3
 800877a:	d903      	bls.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008782:	e006      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008784:	4b12      	ldr	r3, [pc, #72]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0ea      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008796:	2b00      	cmp	r3, #0
 8008798:	d13a      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800879a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800879e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80087a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087aa:	d115      	bne.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80087ac:	4b08      	ldr	r3, [pc, #32]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80087b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80087bc:	091b      	lsrs	r3, r3, #4
 80087be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80087c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80087c6:	4a02      	ldr	r2, [pc, #8]	@ (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087c8:	430b      	orrs	r3, r1
 80087ca:	61d3      	str	r3, [r2, #28]
 80087cc:	e00a      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80087ce:	bf00      	nop
 80087d0:	44020c00 	.word	0x44020c00
 80087d4:	44020800 	.word	0x44020800
 80087d8:	4b9f      	ldr	r3, [pc, #636]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	4a9e      	ldr	r2, [pc, #632]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087e2:	61d3      	str	r3, [r2, #28]
 80087e4:	4b9c      	ldr	r3, [pc, #624]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ea:	4a9b      	ldr	r2, [pc, #620]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80087f4:	4b98      	ldr	r3, [pc, #608]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087f6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80087fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008806:	4a94      	ldr	r2, [pc, #592]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008808:	430b      	orrs	r3, r1
 800880a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800880e:	e008      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008810:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008814:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008818:	e003      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800881e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008822:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800882e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008830:	2300      	movs	r3, #0
 8008832:	667b      	str	r3, [r7, #100]	@ 0x64
 8008834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008838:	460b      	mov	r3, r1
 800883a:	4313      	orrs	r3, r2
 800883c:	d035      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800883e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008842:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008846:	2b30      	cmp	r3, #48	@ 0x30
 8008848:	d014      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800884a:	2b30      	cmp	r3, #48	@ 0x30
 800884c:	d80e      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800884e:	2b20      	cmp	r3, #32
 8008850:	d012      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008852:	2b20      	cmp	r3, #32
 8008854:	d80a      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800885a:	2b10      	cmp	r3, #16
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885e:	4b7e      	ldr	r3, [pc, #504]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008862:	4a7d      	ldr	r2, [pc, #500]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008868:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800886a:	e008      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008872:	e004      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800887c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10d      	bne.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008886:	4b74      	ldr	r3, [pc, #464]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800888c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008894:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008898:	4a6f      	ldr	r2, [pc, #444]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800889a:	430b      	orrs	r3, r1
 800889c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80088a0:	e003      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80088aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80088b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088b8:	2300      	movs	r3, #0
 80088ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80088c0:	460b      	mov	r3, r1
 80088c2:	4313      	orrs	r3, r2
 80088c4:	d033      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80088c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80088d2:	2b40      	cmp	r3, #64	@ 0x40
 80088d4:	d007      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80088d6:	e010      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80088da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088dc:	4a5e      	ldr	r2, [pc, #376]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80088de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80088e4:	e00d      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ea:	3308      	adds	r3, #8
 80088ec:	4618      	mov	r0, r3
 80088ee:	f003 fb6f 	bl	800bfd0 <RCCEx_PLL2_Config>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80088f8:	e003      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008902:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10d      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800890a:	4b53      	ldr	r3, [pc, #332]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800890c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008910:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8008914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008918:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800891c:	4a4e      	ldr	r2, [pc, #312]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800891e:	430b      	orrs	r3, r1
 8008920:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008924:	e003      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008926:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800892a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800892e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800893a:	653b      	str	r3, [r7, #80]	@ 0x50
 800893c:	2300      	movs	r3, #0
 800893e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008940:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008944:	460b      	mov	r3, r1
 8008946:	4313      	orrs	r3, r2
 8008948:	d033      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800894a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800894e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008956:	2b80      	cmp	r3, #128	@ 0x80
 8008958:	d007      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800895a:	e010      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800895c:	4b3e      	ldr	r3, [pc, #248]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800895e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008960:	4a3d      	ldr	r2, [pc, #244]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008966:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008968:	e00d      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800896a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800896e:	3308      	adds	r3, #8
 8008970:	4618      	mov	r0, r3
 8008972:	f003 fb2d 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10d      	bne.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800898e:	4b32      	ldr	r3, [pc, #200]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008994:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800899c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80089a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80089a2:	430b      	orrs	r3, r1
 80089a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80089a8:	e003      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80089ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80089b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80089be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089c0:	2300      	movs	r3, #0
 80089c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80089c8:	460b      	mov	r3, r1
 80089ca:	4313      	orrs	r3, r2
 80089cc:	d04a      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80089ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d827      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80089da:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	080089f5 	.word	0x080089f5
 80089e4:	08008a03 	.word	0x08008a03
 80089e8:	08008a17 	.word	0x08008a17
 80089ec:	08008a33 	.word	0x08008a33
 80089f0:	08008a33 	.word	0x08008a33
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f4:	4b18      	ldr	r3, [pc, #96]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	4a17      	ldr	r2, [pc, #92]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80089fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008a00:	e018      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a06:	3308      	adds	r3, #8
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f003 fae1 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008a14:	e00e      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a1a:	3330      	adds	r3, #48	@ 0x30
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f003 fb6f 	bl	800c100 <RCCEx_PLL3_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008a28:	e004      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a30:	e000      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8008a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10f      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008a3c:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a42:	f023 0107 	bic.w	r1, r3, #7
 8008a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a4e:	4a02      	ldr	r2, [pc, #8]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a50:	430b      	orrs	r3, r1
 8008a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008a56:	e005      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008a58:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a72:	2300      	movs	r3, #0
 8008a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	f000 8081 	beq.w	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d85f      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8008a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008b4f 	.word	0x08008b4f
 8008a9c:	08008b4f 	.word	0x08008b4f
 8008aa0:	08008b4f 	.word	0x08008b4f
 8008aa4:	08008b4f 	.word	0x08008b4f
 8008aa8:	08008b4f 	.word	0x08008b4f
 8008aac:	08008b4f 	.word	0x08008b4f
 8008ab0:	08008b4f 	.word	0x08008b4f
 8008ab4:	08008b27 	.word	0x08008b27
 8008ab8:	08008b4f 	.word	0x08008b4f
 8008abc:	08008b4f 	.word	0x08008b4f
 8008ac0:	08008b4f 	.word	0x08008b4f
 8008ac4:	08008b4f 	.word	0x08008b4f
 8008ac8:	08008b4f 	.word	0x08008b4f
 8008acc:	08008b4f 	.word	0x08008b4f
 8008ad0:	08008b4f 	.word	0x08008b4f
 8008ad4:	08008b3b 	.word	0x08008b3b
 8008ad8:	08008b4f 	.word	0x08008b4f
 8008adc:	08008b4f 	.word	0x08008b4f
 8008ae0:	08008b4f 	.word	0x08008b4f
 8008ae4:	08008b4f 	.word	0x08008b4f
 8008ae8:	08008b4f 	.word	0x08008b4f
 8008aec:	08008b4f 	.word	0x08008b4f
 8008af0:	08008b4f 	.word	0x08008b4f
 8008af4:	08008b57 	.word	0x08008b57
 8008af8:	08008b4f 	.word	0x08008b4f
 8008afc:	08008b4f 	.word	0x08008b4f
 8008b00:	08008b4f 	.word	0x08008b4f
 8008b04:	08008b4f 	.word	0x08008b4f
 8008b08:	08008b4f 	.word	0x08008b4f
 8008b0c:	08008b4f 	.word	0x08008b4f
 8008b10:	08008b4f 	.word	0x08008b4f
 8008b14:	08008b57 	.word	0x08008b57
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b18:	4bab      	ldr	r3, [pc, #684]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	4aaa      	ldr	r2, [pc, #680]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b22:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008b24:	e018      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f003 fa4f 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008b38:	e00e      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b3e:	3330      	adds	r3, #48	@ 0x30
 8008b40:	4618      	mov	r0, r3
 8008b42:	f003 fadd 	bl	800c100 <RCCEx_PLL3_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008b4c:	e004      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b54:	e000      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10d      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008b60:	4b99      	ldr	r3, [pc, #612]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b72:	4a95      	ldr	r2, [pc, #596]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b74:	430b      	orrs	r3, r1
 8008b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008b7a:	e003      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d04e      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bac:	d02e      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8008bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bb2:	d827      	bhi.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008bb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bb6:	d02b      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008bb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bba:	d823      	bhi.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008bbc:	2b80      	cmp	r3, #128	@ 0x80
 8008bbe:	d017      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008bc0:	2b80      	cmp	r3, #128	@ 0x80
 8008bc2:	d81f      	bhi.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008bc8:	2b40      	cmp	r3, #64	@ 0x40
 8008bca:	d007      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008bcc:	e01a      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bce:	4b7e      	ldr	r3, [pc, #504]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd2:	4a7d      	ldr	r2, [pc, #500]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bd8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008bda:	e01a      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008be0:	3308      	adds	r3, #8
 8008be2:	4618      	mov	r0, r3
 8008be4:	f003 f9f4 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008bee:	e010      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bf4:	3330      	adds	r3, #48	@ 0x30
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f003 fa82 	bl	800c100 <RCCEx_PLL3_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008c02:	e006      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c0a:	e002      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10d      	bne.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008c1a:	4b6b      	ldr	r3, [pc, #428]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c2c:	4a66      	ldr	r2, [pc, #408]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008c34:	e003      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c54:	460b      	mov	r3, r1
 8008c56:	4313      	orrs	r3, r2
 8008c58:	d055      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008c62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008c66:	d031      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008c68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008c6c:	d82a      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c78:	d824      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008c7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008c7e:	d029      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008c80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008c84:	d81e      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c8a:	d011      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c90:	d818      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d020      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c9a:	d113      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f003 f994 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008cae:	e014      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cb4:	3330      	adds	r3, #48	@ 0x30
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f003 fa22 	bl	800c100 <RCCEx_PLL3_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008cc2:	e00a      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008cca:	e006      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008ccc:	bf00      	nop
 8008cce:	e004      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008cd0:	bf00      	nop
 8008cd2:	e002      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10d      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008ce2:	4b39      	ldr	r3, [pc, #228]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ce8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008cf4:	4a34      	ldr	r2, [pc, #208]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d14:	2300      	movs	r3, #0
 8008d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	d058      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d2e:	d031      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008d30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d34:	d82a      	bhi.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d3a:	d02d      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d40:	d824      	bhi.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008d42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d46:	d029      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d4c:	d81e      	bhi.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d52:	d011      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d58:	d818      	bhi.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d020      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d62:	d113      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d68:	3308      	adds	r3, #8
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f003 f930 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008d76:	e014      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d7c:	3330      	adds	r3, #48	@ 0x30
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f003 f9be 	bl	800c100 <RCCEx_PLL3_Config>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008d8a:	e00a      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008d92:	e006      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008d94:	bf00      	nop
 8008d96:	e004      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008d98:	bf00      	nop
 8008d9a:	e002      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008d9c:	bf00      	nop
 8008d9e:	e000      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d110      	bne.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8008daa:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008db0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dbc:	4902      	ldr	r1, [pc, #8]	@ (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008dc4:	e006      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8008dc6:	bf00      	nop
 8008dc8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008dd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6239      	str	r1, [r7, #32]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008de6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008dea:	460b      	mov	r3, r1
 8008dec:	4313      	orrs	r3, r2
 8008dee:	d055      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8008df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008df8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008dfc:	d031      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008dfe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008e02:	d82a      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e08:	d02d      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008e0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e0e:	d824      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008e10:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008e14:	d029      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8008e16:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008e1a:	d81e      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e20:	d011      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8008e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e26:	d818      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d020      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e30:	d113      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e36:	3308      	adds	r3, #8
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f003 f8c9 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e44:	e014      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e4a:	3330      	adds	r3, #48	@ 0x30
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f003 f957 	bl	800c100 <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e58:	e00a      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e60:	e006      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008e62:	bf00      	nop
 8008e64:	e004      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008e66:	bf00      	nop
 8008e68:	e002      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008e6a:	bf00      	nop
 8008e6c:	e000      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10d      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008e78:	4b88      	ldr	r3, [pc, #544]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e7e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e8a:	4984      	ldr	r1, [pc, #528]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	61b9      	str	r1, [r7, #24]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	61fb      	str	r3, [r7, #28]
 8008eae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d03d      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ebc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d81c      	bhi.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008f07 	.word	0x08008f07
 8008ed0:	08008edd 	.word	0x08008edd
 8008ed4:	08008eeb 	.word	0x08008eeb
 8008ed8:	08008f07 	.word	0x08008f07
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008edc:	4b6f      	ldr	r3, [pc, #444]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008ee8:	e00e      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008eea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008eee:	3308      	adds	r3, #8
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f003 f86d 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008efc:	e004      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f04:	e000      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8008f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10d      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008f10:	4b62      	ldr	r3, [pc, #392]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f16:	f023 0203 	bic.w	r2, r3, #3
 8008f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008f22:	495e      	ldr	r1, [pc, #376]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008f2a:	e003      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	6139      	str	r1, [r7, #16]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	d03a      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f5c:	d00e      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f62:	d815      	bhi.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d017      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f6c:	d110      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	4a4a      	ldr	r2, [pc, #296]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008f7a:	e00e      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f80:	3308      	adds	r3, #8
 8008f82:	4618      	mov	r0, r3
 8008f84:	f003 f824 	bl	800bfd0 <RCCEx_PLL2_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008f8e:	e004      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10d      	bne.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008fb4:	4939      	ldr	r1, [pc, #228]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008fbc:	e003      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008fc2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	2100      	movs	r1, #0
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	f003 0310 	and.w	r3, r3, #16
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	d038      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fe6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008fea:	2b30      	cmp	r3, #48	@ 0x30
 8008fec:	d01b      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008fee:	2b30      	cmp	r3, #48	@ 0x30
 8008ff0:	d815      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d002      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d007      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008ffa:	e010      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffc:	4b27      	ldr	r3, [pc, #156]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009000:	4a26      	ldr	r2, [pc, #152]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009006:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8009008:	e00e      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800900a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800900e:	3330      	adds	r3, #48	@ 0x30
 8009010:	4618      	mov	r0, r3
 8009012:	f003 f875 	bl	800c100 <RCCEx_PLL3_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800901c:	e004      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009024:	e000      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8009026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009028:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10d      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8009030:	4b1a      	ldr	r3, [pc, #104]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009036:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800903a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800903e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009042:	4916      	ldr	r1, [pc, #88]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009044:	4313      	orrs	r3, r2
 8009046:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800904a:	e003      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009050:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	2100      	movs	r1, #0
 800905e:	6039      	str	r1, [r7, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	e9d7 1200 	ldrd	r1, r2, [r7]
 800906a:	460b      	mov	r3, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	d00c      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8009070:	4b0a      	ldr	r3, [pc, #40]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800907a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800907e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009082:	4906      	ldr	r1, [pc, #24]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009084:	4313      	orrs	r3, r2
 8009086:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800908a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800908e:	4618      	mov	r0, r3
 8009090:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8009094:	46bd      	mov	sp, r7
 8009096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800909a:	bf00      	nop
 800909c:	44020c00 	.word	0x44020c00

080090a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b08b      	sub	sp, #44	@ 0x2c
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80090a8:	4bad      	ldr	r3, [pc, #692]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80090b2:	4bab      	ldr	r3, [pc, #684]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80090bc:	4ba8      	ldr	r3, [pc, #672]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c0:	0a1b      	lsrs	r3, r3, #8
 80090c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090c6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80090c8:	4ba5      	ldr	r3, [pc, #660]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80090d2:	4ba3      	ldr	r3, [pc, #652]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d6:	08db      	lsrs	r3, r3, #3
 80090d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	fb02 f303 	mul.w	r3, r2, r3
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 8126 	beq.w	8009342 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d053      	beq.n	80091a4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d86f      	bhi.n	80091e2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d003      	beq.n	8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d02b      	beq.n	8009166 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800910e:	e068      	b.n	80091e2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009110:	4b93      	ldr	r3, [pc, #588]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	08db      	lsrs	r3, r3, #3
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	4a92      	ldr	r2, [pc, #584]	@ (8009364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
 8009120:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	ee07 3a90 	vmov	s15, r3
 8009128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009144:	ed97 6a04 	vldr	s12, [r7, #16]
 8009148:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800914c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009160:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009164:	e068      	b.n	8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	ee07 3a90 	vmov	s15, r3
 800916c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009170:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800936c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a04 	vldr	s12, [r7, #16]
 8009186:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80091a2:	e049      	b.n	8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009370 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80091b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80091c4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80091c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80091e0:	e02a      	b.n	8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091e2:	4b5f      	ldr	r3, [pc, #380]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	08db      	lsrs	r3, r3, #3
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	4a5d      	ldr	r2, [pc, #372]	@ (8009364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80091ee:	fa22 f303 	lsr.w	r3, r2, r3
 80091f2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	ee07 3a90 	vmov	s15, r3
 8009204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a04 	vldr	s12, [r7, #16]
 800921a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009236:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009238:	4b49      	ldr	r3, [pc, #292]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009244:	d121      	bne.n	800928a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009246:	4b46      	ldr	r3, [pc, #280]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d017      	beq.n	8009282 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009252:	4b43      	ldr	r3, [pc, #268]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009256:	0a5b      	lsrs	r3, r3, #9
 8009258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800925c:	ee07 3a90 	vmov	s15, r3
 8009260:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8009264:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009268:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800926c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009278:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e006      	b.n	8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	e002      	b.n	8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009290:	4b33      	ldr	r3, [pc, #204]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800929c:	d121      	bne.n	80092e2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800929e:	4b30      	ldr	r3, [pc, #192]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80092a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d017      	beq.n	80092da <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80092aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80092ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ae:	0c1b      	lsrs	r3, r3, #16
 80092b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80092bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80092c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	605a      	str	r2, [r3, #4]
 80092d8:	e006      	b.n	80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	605a      	str	r2, [r3, #4]
 80092e0:	e002      	b.n	80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092f4:	d121      	bne.n	800933a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80092f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d017      	beq.n	8009332 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009302:	4b17      	ldr	r3, [pc, #92]	@ (8009360 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009306:	0e1b      	lsrs	r3, r3, #24
 8009308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8009314:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009318:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800931c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009328:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009330:	e010      	b.n	8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	609a      	str	r2, [r3, #8]
}
 8009338:	e00c      	b.n	8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	609a      	str	r2, [r3, #8]
}
 8009340:	e008      	b.n	8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	609a      	str	r2, [r3, #8]
}
 8009354:	bf00      	nop
 8009356:	372c      	adds	r7, #44	@ 0x2c
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	44020c00 	.word	0x44020c00
 8009364:	03d09000 	.word	0x03d09000
 8009368:	46000000 	.word	0x46000000
 800936c:	4a742400 	.word	0x4a742400
 8009370:	4bbebc20 	.word	0x4bbebc20

08009374 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8009374:	b480      	push	{r7}
 8009376:	b08b      	sub	sp, #44	@ 0x2c
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800937c:	4bad      	ldr	r3, [pc, #692]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800937e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009384:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009386:	4bab      	ldr	r3, [pc, #684]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009390:	4ba8      	ldr	r3, [pc, #672]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800939a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800939c:	4ba5      	ldr	r3, [pc, #660]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	f003 0310 	and.w	r3, r3, #16
 80093a4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80093a6:	4ba3      	ldr	r3, [pc, #652]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80093a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093aa:	08db      	lsrs	r3, r3, #3
 80093ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	fb02 f303 	mul.w	r3, r2, r3
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8126 	beq.w	8009616 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d053      	beq.n	8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d86f      	bhi.n	80094b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d003      	beq.n	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d02b      	beq.n	800943a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80093e2:	e068      	b.n	80094b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093e4:	4b93      	ldr	r3, [pc, #588]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	4a92      	ldr	r2, [pc, #584]	@ (8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80093f0:	fa22 f303 	lsr.w	r3, r2, r3
 80093f4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009418:	ed97 6a04 	vldr	s12, [r7, #16]
 800941c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800963c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009434:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009438:	e068      	b.n	800950c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009444:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009456:	ed97 6a04 	vldr	s12, [r7, #16]
 800945a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800963c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009472:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009476:	e049      	b.n	800950c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8009486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009494:	ed97 6a04 	vldr	s12, [r7, #16]
 8009498:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800963c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800949c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80094b4:	e02a      	b.n	800950c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094b6:	4b5f      	ldr	r3, [pc, #380]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	08db      	lsrs	r3, r3, #3
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	4a5d      	ldr	r2, [pc, #372]	@ (8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80094c2:	fa22 f303 	lsr.w	r3, r2, r3
 80094c6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	ee07 3a90 	vmov	s15, r3
 80094d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80094ee:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800963c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800950a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800950c:	4b49      	ldr	r3, [pc, #292]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009518:	d121      	bne.n	800955e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800951a:	4b46      	ldr	r3, [pc, #280]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800951c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d017      	beq.n	8009556 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009526:	4b43      	ldr	r3, [pc, #268]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800952a:	0a5b      	lsrs	r3, r3, #9
 800952c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009530:	ee07 3a90 	vmov	s15, r3
 8009534:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800953c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009540:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	e006      	b.n	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	e002      	b.n	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009564:	4b33      	ldr	r3, [pc, #204]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800956c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009570:	d121      	bne.n	80095b6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009572:	4b30      	ldr	r3, [pc, #192]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d017      	beq.n	80095ae <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800957e:	4b2d      	ldr	r3, [pc, #180]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009582:	0c1b      	lsrs	r3, r3, #16
 8009584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009588:	ee07 3a90 	vmov	s15, r3
 800958c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009594:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009598:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800959c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	e006      	b.n	80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
 80095b4:	e002      	b.n	80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c8:	d121      	bne.n	800960e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80095ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80095cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d017      	beq.n	8009606 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80095d6:	4b17      	ldr	r3, [pc, #92]	@ (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80095d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095da:	0e1b      	lsrs	r3, r3, #24
 80095dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e0:	ee07 3a90 	vmov	s15, r3
 80095e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80095e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80095f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80095f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009604:	e010      	b.n	8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	609a      	str	r2, [r3, #8]
}
 800960c:	e00c      	b.n	8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	609a      	str	r2, [r3, #8]
}
 8009614:	e008      	b.n	8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	609a      	str	r2, [r3, #8]
}
 8009628:	bf00      	nop
 800962a:	372c      	adds	r7, #44	@ 0x2c
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	44020c00 	.word	0x44020c00
 8009638:	03d09000 	.word	0x03d09000
 800963c:	46000000 	.word	0x46000000
 8009640:	4a742400 	.word	0x4a742400
 8009644:	4bbebc20 	.word	0x4bbebc20

08009648 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8009648:	b480      	push	{r7}
 800964a:	b08b      	sub	sp, #44	@ 0x2c
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009650:	4bad      	ldr	r3, [pc, #692]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009658:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800965a:	4bab      	ldr	r3, [pc, #684]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800965c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009664:	4ba8      	ldr	r3, [pc, #672]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009668:	0a1b      	lsrs	r3, r3, #8
 800966a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800966e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8009670:	4ba5      	ldr	r3, [pc, #660]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800967a:	4ba3      	ldr	r3, [pc, #652]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800967c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800967e:	08db      	lsrs	r3, r3, #3
 8009680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	fb02 f303 	mul.w	r3, r2, r3
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8126 	beq.w	80098ea <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d053      	beq.n	800974c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d86f      	bhi.n	800978a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d003      	beq.n	80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d02b      	beq.n	800970e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80096b6:	e068      	b.n	800978a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096b8:	4b93      	ldr	r3, [pc, #588]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	08db      	lsrs	r3, r3, #3
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	4a92      	ldr	r2, [pc, #584]	@ (800990c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80096c4:	fa22 f303 	lsr.w	r3, r2, r3
 80096c8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80096f0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80096f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009708:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800970c:	e068      	b.n	80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	ee07 3a90 	vmov	s15, r3
 8009714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009718:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009914 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800971c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972a:	ed97 6a04 	vldr	s12, [r7, #16]
 800972e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800973e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009746:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800974a:	e049      	b.n	80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009918 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800975a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009768:	ed97 6a04 	vldr	s12, [r7, #16]
 800976c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800977c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009784:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009788:	e02a      	b.n	80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800978a:	4b5f      	ldr	r3, [pc, #380]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	08db      	lsrs	r3, r3, #3
 8009790:	f003 0303 	and.w	r3, r3, #3
 8009794:	4a5d      	ldr	r2, [pc, #372]	@ (800990c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009796:	fa22 f303 	lsr.w	r3, r2, r3
 800979a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	ee07 3a90 	vmov	s15, r3
 80097ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097be:	ed97 6a04 	vldr	s12, [r7, #16]
 80097c2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80097c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80097de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097e0:	4b49      	ldr	r3, [pc, #292]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ec:	d121      	bne.n	8009832 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80097ee:	4b46      	ldr	r3, [pc, #280]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80097f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d017      	beq.n	800982a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80097fa:	4b43      	ldr	r3, [pc, #268]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80097fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097fe:	0a5b      	lsrs	r3, r3, #9
 8009800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800980c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009810:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009814:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800981c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009820:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e006      	b.n	8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	e002      	b.n	8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009838:	4b33      	ldr	r3, [pc, #204]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009844:	d121      	bne.n	800988a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009846:	4b30      	ldr	r3, [pc, #192]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800984a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d017      	beq.n	8009882 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009852:	4b2d      	ldr	r3, [pc, #180]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800985c:	ee07 3a90 	vmov	s15, r3
 8009860:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009868:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800986c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009878:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	605a      	str	r2, [r3, #4]
 8009880:	e006      	b.n	8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	605a      	str	r2, [r3, #4]
 8009888:	e002      	b.n	8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009890:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800989c:	d121      	bne.n	80098e2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800989e:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80098a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d017      	beq.n	80098da <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098aa:	4b17      	ldr	r3, [pc, #92]	@ (8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80098ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ae:	0e1b      	lsrs	r3, r3, #24
 80098b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098b4:	ee07 3a90 	vmov	s15, r3
 80098b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80098bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80098c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80098c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80098d8:	e010      	b.n	80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	609a      	str	r2, [r3, #8]
}
 80098e0:	e00c      	b.n	80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	609a      	str	r2, [r3, #8]
}
 80098e8:	e008      	b.n	80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	609a      	str	r2, [r3, #8]
}
 80098fc:	bf00      	nop
 80098fe:	372c      	adds	r7, #44	@ 0x2c
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	44020c00 	.word	0x44020c00
 800990c:	03d09000 	.word	0x03d09000
 8009910:	46000000 	.word	0x46000000
 8009914:	4a742400 	.word	0x4a742400
 8009918:	4bbebc20 	.word	0x4bbebc20

0800991c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800991c:	b590      	push	{r4, r7, lr}
 800991e:	b08f      	sub	sp, #60	@ 0x3c
 8009920:	af00      	add	r7, sp, #0
 8009922:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800992a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800992e:	4321      	orrs	r1, r4
 8009930:	d150      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009932:	4b26      	ldr	r3, [pc, #152]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800993e:	4b23      	ldr	r3, [pc, #140]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b02      	cmp	r3, #2
 800994a:	d108      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009952:	d104      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009958:	637b      	str	r3, [r7, #52]	@ 0x34
 800995a:	f002 bb2a 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800995e:	4b1b      	ldr	r3, [pc, #108]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800996c:	d108      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009974:	d104      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009976:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800997a:	637b      	str	r3, [r7, #52]	@ 0x34
 800997c:	f002 bb19 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009980:	4b12      	ldr	r3, [pc, #72]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800998c:	d119      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009994:	d115      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009996:	4b0d      	ldr	r3, [pc, #52]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800999e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a2:	d30a      	bcc.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80099a4:	4b09      	ldr	r3, [pc, #36]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	0a1b      	lsrs	r3, r3, #8
 80099aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099ae:	4a08      	ldr	r2, [pc, #32]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80099b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80099b6:	f002 bafc 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80099be:	f002 baf8 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c6:	f002 baf4 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099ca:	bf00      	nop
 80099cc:	44020c00 	.word	0x44020c00
 80099d0:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80099d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099d8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80099dc:	ea50 0104 	orrs.w	r1, r0, r4
 80099e0:	f001 8275 	beq.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80099e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099e8:	2801      	cmp	r0, #1
 80099ea:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80099ee:	f082 82dd 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099f6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80099fa:	ea50 0104 	orrs.w	r1, r0, r4
 80099fe:	f001 816c 	beq.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a06:	2801      	cmp	r0, #1
 8009a08:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009a0c:	f082 82ce 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a14:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8009a18:	ea50 0104 	orrs.w	r1, r0, r4
 8009a1c:	f001 8602 	beq.w	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a24:	2801      	cmp	r0, #1
 8009a26:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8009a2a:	f082 82bf 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a32:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8009a36:	ea50 0104 	orrs.w	r1, r0, r4
 8009a3a:	f001 854c 	beq.w	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a42:	2801      	cmp	r0, #1
 8009a44:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009a48:	f082 82b0 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a50:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009a54:	ea50 0104 	orrs.w	r1, r0, r4
 8009a58:	f001 849e 	beq.w	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a60:	2801      	cmp	r0, #1
 8009a62:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009a66:	f082 82a1 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a6e:	f1a1 0420 	sub.w	r4, r1, #32
 8009a72:	ea50 0104 	orrs.w	r1, r0, r4
 8009a76:	f001 83e8 	beq.w	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8009a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a7e:	2801      	cmp	r0, #1
 8009a80:	f171 0120 	sbcs.w	r1, r1, #32
 8009a84:	f082 8292 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a8c:	f1a1 0410 	sub.w	r4, r1, #16
 8009a90:	ea50 0104 	orrs.w	r1, r0, r4
 8009a94:	f002 8256 	beq.w	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a9c:	2801      	cmp	r0, #1
 8009a9e:	f171 0110 	sbcs.w	r1, r1, #16
 8009aa2:	f082 8283 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aaa:	f1a1 0408 	sub.w	r4, r1, #8
 8009aae:	ea50 0104 	orrs.w	r1, r0, r4
 8009ab2:	f002 81cc 	beq.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8009ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aba:	2801      	cmp	r0, #1
 8009abc:	f171 0108 	sbcs.w	r1, r1, #8
 8009ac0:	f082 8274 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ac8:	1f0c      	subs	r4, r1, #4
 8009aca:	ea50 0104 	orrs.w	r1, r0, r4
 8009ace:	f001 8648 	beq.w	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ad6:	2801      	cmp	r0, #1
 8009ad8:	f171 0104 	sbcs.w	r1, r1, #4
 8009adc:	f082 8266 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ae4:	1e8c      	subs	r4, r1, #2
 8009ae6:	ea50 0104 	orrs.w	r1, r0, r4
 8009aea:	f002 8143 	beq.w	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8009aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009af2:	2801      	cmp	r0, #1
 8009af4:	f171 0102 	sbcs.w	r1, r1, #2
 8009af8:	f082 8258 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b00:	1e4c      	subs	r4, r1, #1
 8009b02:	ea50 0104 	orrs.w	r1, r0, r4
 8009b06:	f002 80ce 	beq.w	800bca6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8009b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b0e:	2801      	cmp	r0, #1
 8009b10:	f171 0101 	sbcs.w	r1, r1, #1
 8009b14:	f082 824a 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b1c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009b20:	4321      	orrs	r1, r4
 8009b22:	f002 8059 	beq.w	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b2a:	4cd9      	ldr	r4, [pc, #868]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009b2c:	42a0      	cmp	r0, r4
 8009b2e:	f171 0100 	sbcs.w	r1, r1, #0
 8009b32:	f082 823b 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b3a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009b3e:	4321      	orrs	r1, r4
 8009b40:	f001 87d9 	beq.w	800baf6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b48:	4cd2      	ldr	r4, [pc, #840]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009b4a:	42a0      	cmp	r0, r4
 8009b4c:	f171 0100 	sbcs.w	r1, r1, #0
 8009b50:	f082 822c 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b58:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009b5c:	4321      	orrs	r1, r4
 8009b5e:	f001 8751 	beq.w	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b66:	4ccc      	ldr	r4, [pc, #816]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	f171 0100 	sbcs.w	r1, r1, #0
 8009b6e:	f082 821d 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b76:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009b7a:	4321      	orrs	r1, r4
 8009b7c:	f001 869a 	beq.w	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b84:	4cc5      	ldr	r4, [pc, #788]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009b86:	42a0      	cmp	r0, r4
 8009b88:	f171 0100 	sbcs.w	r1, r1, #0
 8009b8c:	f082 820e 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b94:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009b98:	4321      	orrs	r1, r4
 8009b9a:	f001 8612 	beq.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8009b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ba2:	4cbf      	ldr	r4, [pc, #764]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009ba4:	42a0      	cmp	r0, r4
 8009ba6:	f171 0100 	sbcs.w	r1, r1, #0
 8009baa:	f082 81ff 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bb2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009bb6:	4321      	orrs	r1, r4
 8009bb8:	f002 817e 	beq.w	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bc0:	4cb8      	ldr	r4, [pc, #736]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009bc2:	42a0      	cmp	r0, r4
 8009bc4:	f171 0100 	sbcs.w	r1, r1, #0
 8009bc8:	f082 81f0 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bd0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009bd4:	4321      	orrs	r1, r4
 8009bd6:	f000 829e 	beq.w	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bde:	4cb2      	ldr	r4, [pc, #712]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	f171 0100 	sbcs.w	r1, r1, #0
 8009be6:	f082 81e1 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bee:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009bf2:	4321      	orrs	r1, r4
 8009bf4:	f000 826d 	beq.w	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bfc:	4cab      	ldr	r4, [pc, #684]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009bfe:	42a0      	cmp	r0, r4
 8009c00:	f171 0100 	sbcs.w	r1, r1, #0
 8009c04:	f082 81d2 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c0c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009c10:	4321      	orrs	r1, r4
 8009c12:	f001 800d 	beq.w	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c1a:	4ca5      	ldr	r4, [pc, #660]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009c1c:	42a0      	cmp	r0, r4
 8009c1e:	f171 0100 	sbcs.w	r1, r1, #0
 8009c22:	f082 81c3 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c2a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009c2e:	4321      	orrs	r1, r4
 8009c30:	f000 81d0 	beq.w	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c38:	4c9e      	ldr	r4, [pc, #632]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009c3a:	42a0      	cmp	r0, r4
 8009c3c:	f171 0100 	sbcs.w	r1, r1, #0
 8009c40:	f082 81b4 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c48:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009c4c:	4321      	orrs	r1, r4
 8009c4e:	f000 8142 	beq.w	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c56:	4c98      	ldr	r4, [pc, #608]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	f171 0100 	sbcs.w	r1, r1, #0
 8009c5e:	f082 81a5 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c66:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009c6a:	4321      	orrs	r1, r4
 8009c6c:	f001 824e 	beq.w	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c74:	4c91      	ldr	r4, [pc, #580]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009c76:	42a0      	cmp	r0, r4
 8009c78:	f171 0100 	sbcs.w	r1, r1, #0
 8009c7c:	f082 8196 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c84:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009c88:	4321      	orrs	r1, r4
 8009c8a:	f001 8197 	beq.w	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c92:	4c8b      	ldr	r4, [pc, #556]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009c94:	42a0      	cmp	r0, r4
 8009c96:	f171 0100 	sbcs.w	r1, r1, #0
 8009c9a:	f082 8187 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ca2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009ca6:	4321      	orrs	r1, r4
 8009ca8:	f001 8154 	beq.w	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cb0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009cb4:	f171 0100 	sbcs.w	r1, r1, #0
 8009cb8:	f082 8178 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cc0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009cc4:	4321      	orrs	r1, r4
 8009cc6:	f001 80b7 	beq.w	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cce:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009cd2:	42a0      	cmp	r0, r4
 8009cd4:	f171 0100 	sbcs.w	r1, r1, #0
 8009cd8:	f082 8168 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ce0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009ce4:	4321      	orrs	r1, r4
 8009ce6:	f001 8064 	beq.w	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cee:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009cf2:	42a0      	cmp	r0, r4
 8009cf4:	f171 0100 	sbcs.w	r1, r1, #0
 8009cf8:	f082 8158 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d00:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009d04:	4321      	orrs	r1, r4
 8009d06:	f001 8011 	beq.w	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d0e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009d12:	42a0      	cmp	r0, r4
 8009d14:	f171 0100 	sbcs.w	r1, r1, #0
 8009d18:	f082 8148 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d20:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009d24:	4321      	orrs	r1, r4
 8009d26:	f000 871e 	beq.w	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d2e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009d32:	42a0      	cmp	r0, r4
 8009d34:	f171 0100 	sbcs.w	r1, r1, #0
 8009d38:	f082 8138 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d40:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009d44:	4321      	orrs	r1, r4
 8009d46:	f000 86a8 	beq.w	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d4e:	f640 0401 	movw	r4, #2049	@ 0x801
 8009d52:	42a0      	cmp	r0, r4
 8009d54:	f171 0100 	sbcs.w	r1, r1, #0
 8009d58:	f082 8128 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d60:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009d64:	4321      	orrs	r1, r4
 8009d66:	f000 8632 	beq.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8009d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d6e:	f240 4401 	movw	r4, #1025	@ 0x401
 8009d72:	42a0      	cmp	r0, r4
 8009d74:	f171 0100 	sbcs.w	r1, r1, #0
 8009d78:	f082 8118 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d80:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009d84:	4321      	orrs	r1, r4
 8009d86:	f000 85b0 	beq.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8009d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d8e:	f240 2401 	movw	r4, #513	@ 0x201
 8009d92:	42a0      	cmp	r0, r4
 8009d94:	f171 0100 	sbcs.w	r1, r1, #0
 8009d98:	f082 8108 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da0:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009da4:	4321      	orrs	r1, r4
 8009da6:	f000 8535 	beq.w	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dae:	f240 1401 	movw	r4, #257	@ 0x101
 8009db2:	42a0      	cmp	r0, r4
 8009db4:	f171 0100 	sbcs.w	r1, r1, #0
 8009db8:	f082 80f8 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dc0:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8009dc4:	4321      	orrs	r1, r4
 8009dc6:	f000 84ba 	beq.w	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8009dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dce:	2881      	cmp	r0, #129	@ 0x81
 8009dd0:	f171 0100 	sbcs.w	r1, r1, #0
 8009dd4:	f082 80ea 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ddc:	2821      	cmp	r0, #33	@ 0x21
 8009dde:	f171 0100 	sbcs.w	r1, r1, #0
 8009de2:	d26f      	bcs.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de8:	4301      	orrs	r1, r0
 8009dea:	f002 80df 	beq.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009df2:	1e42      	subs	r2, r0, #1
 8009df4:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009df8:	2a20      	cmp	r2, #32
 8009dfa:	f173 0100 	sbcs.w	r1, r3, #0
 8009dfe:	f082 80d5 	bcs.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e02:	2a1f      	cmp	r2, #31
 8009e04:	f202 80d2 	bhi.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e08:	a101      	add	r1, pc, #4	@ (adr r1, 8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009e0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	0800a171 	.word	0x0800a171
 8009e14:	0800a23d 	.word	0x0800a23d
 8009e18:	0800bfad 	.word	0x0800bfad
 8009e1c:	0800a2fd 	.word	0x0800a2fd
 8009e20:	0800bfad 	.word	0x0800bfad
 8009e24:	0800bfad 	.word	0x0800bfad
 8009e28:	0800bfad 	.word	0x0800bfad
 8009e2c:	0800a3cd 	.word	0x0800a3cd
 8009e30:	0800bfad 	.word	0x0800bfad
 8009e34:	0800bfad 	.word	0x0800bfad
 8009e38:	0800bfad 	.word	0x0800bfad
 8009e3c:	0800bfad 	.word	0x0800bfad
 8009e40:	0800bfad 	.word	0x0800bfad
 8009e44:	0800bfad 	.word	0x0800bfad
 8009e48:	0800bfad 	.word	0x0800bfad
 8009e4c:	0800a4af 	.word	0x0800a4af
 8009e50:	0800bfad 	.word	0x0800bfad
 8009e54:	0800bfad 	.word	0x0800bfad
 8009e58:	0800bfad 	.word	0x0800bfad
 8009e5c:	0800bfad 	.word	0x0800bfad
 8009e60:	0800bfad 	.word	0x0800bfad
 8009e64:	0800bfad 	.word	0x0800bfad
 8009e68:	0800bfad 	.word	0x0800bfad
 8009e6c:	0800bfad 	.word	0x0800bfad
 8009e70:	0800bfad 	.word	0x0800bfad
 8009e74:	0800bfad 	.word	0x0800bfad
 8009e78:	0800bfad 	.word	0x0800bfad
 8009e7c:	0800bfad 	.word	0x0800bfad
 8009e80:	0800bfad 	.word	0x0800bfad
 8009e84:	0800bfad 	.word	0x0800bfad
 8009e88:	0800bfad 	.word	0x0800bfad
 8009e8c:	0800a585 	.word	0x0800a585
 8009e90:	80000001 	.word	0x80000001
 8009e94:	40000001 	.word	0x40000001
 8009e98:	20000001 	.word	0x20000001
 8009e9c:	10000001 	.word	0x10000001
 8009ea0:	08000001 	.word	0x08000001
 8009ea4:	04000001 	.word	0x04000001
 8009ea8:	00800001 	.word	0x00800001
 8009eac:	00400001 	.word	0x00400001
 8009eb0:	00200001 	.word	0x00200001
 8009eb4:	00100001 	.word	0x00100001
 8009eb8:	00080001 	.word	0x00080001
 8009ebc:	00040001 	.word	0x00040001
 8009ec0:	00020001 	.word	0x00020001
 8009ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	f000 83c4 	beq.w	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009ed2:	f002 b86b 	b.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009ed6:	4ba1      	ldr	r3, [pc, #644]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009edc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ee8:	d036      	beq.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ef0:	d86b      	bhi.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ef8:	d02b      	beq.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f00:	d863      	bhi.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f08:	d01b      	beq.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f10:	d85b      	bhi.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d004      	beq.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f1e:	d008      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009f20:	e053      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f22:	f107 0320 	add.w	r3, r7, #32
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff f8ba 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f30:	e04e      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f32:	f107 0314 	add.w	r3, r7, #20
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff fa1c 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f40:	e046      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fb7e 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f50:	e03e      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f52:	4b83      	ldr	r3, [pc, #524]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009f54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f56:	e03b      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f58:	4b80      	ldr	r3, [pc, #512]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f62:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f64:	4b7d      	ldr	r3, [pc, #500]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d10c      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8009f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f76:	4b79      	ldr	r3, [pc, #484]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	08db      	lsrs	r3, r3, #3
 8009f7c:	f003 0303 	and.w	r3, r3, #3
 8009f80:	4a78      	ldr	r2, [pc, #480]	@ (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009f82:	fa22 f303 	lsr.w	r3, r2, r3
 8009f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f88:	e01e      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f8a:	4b74      	ldr	r3, [pc, #464]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f96:	d106      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f9e:	d102      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009fa0:	4b71      	ldr	r3, [pc, #452]	@ (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa4:	e010      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb2:	d106      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8009fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fba:	d102      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc0:	e002      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009fc6:	e003      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fce:	bf00      	nop
          }
        }
        break;
 8009fd0:	f001 bfef 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009fd4:	4b61      	ldr	r3, [pc, #388]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fda:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fe6:	d036      	beq.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fee:	d86b      	bhi.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009ff6:	d02b      	beq.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009ffe:	d863      	bhi.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a006:	d01b      	beq.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a00e:	d85b      	bhi.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a018:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a01c:	d008      	beq.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a01e:	e053      	b.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a020:	f107 0320 	add.w	r3, r7, #32
 800a024:	4618      	mov	r0, r3
 800a026:	f7ff f83b 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a02e:	e04e      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a030:	f107 0314 	add.w	r3, r7, #20
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff f99d 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a03e:	e046      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a040:	f107 0308 	add.w	r3, r7, #8
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff faff 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a04e:	e03e      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a050:	4b43      	ldr	r3, [pc, #268]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a052:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a054:	e03b      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a056:	4b41      	ldr	r3, [pc, #260]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a05c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a060:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a062:	4b3e      	ldr	r3, [pc, #248]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d10c      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d109      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a074:	4b39      	ldr	r3, [pc, #228]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	08db      	lsrs	r3, r3, #3
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	4a39      	ldr	r2, [pc, #228]	@ (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a080:	fa22 f303 	lsr.w	r3, r2, r3
 800a084:	637b      	str	r3, [r7, #52]	@ 0x34
 800a086:	e01e      	b.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a088:	4b34      	ldr	r3, [pc, #208]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a094:	d106      	bne.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a09c:	d102      	bne.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a09e:	4b32      	ldr	r3, [pc, #200]	@ (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a2:	e010      	b.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0a4:	4b2d      	ldr	r3, [pc, #180]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0b0:	d106      	bne.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0b8:	d102      	bne.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0ba:	4b2c      	ldr	r3, [pc, #176]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0be:	e002      	b.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a0c4:	e003      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800a0c6:	e002      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0cc:	bf00      	nop
          }
        }
        break;
 800a0ce:	f001 bf70 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a0d2:	4b22      	ldr	r3, [pc, #136]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d108      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0e4:	f107 0320 	add.w	r3, r7, #32
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe ffd9 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0f2:	f001 bf5e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f8:	2b40      	cmp	r3, #64	@ 0x40
 800a0fa:	d108      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0fc:	f107 0314 	add.w	r3, r7, #20
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff f937 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a10a:	f001 bf52 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a112:	f001 bf4e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800a116:	4b11      	ldr	r3, [pc, #68]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a11c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a120:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	2b00      	cmp	r3, #0
 800a126:	d108      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a128:	f107 0320 	add.w	r3, r7, #32
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe ffb7 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a136:	f001 bf3c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	2b80      	cmp	r3, #128	@ 0x80
 800a13e:	d108      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a140:	f107 0314 	add.w	r3, r7, #20
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff f915 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a14e:	f001 bf30 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a156:	f001 bf2c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a15a:	bf00      	nop
 800a15c:	44020c00 	.word	0x44020c00
 800a160:	00bb8000 	.word	0x00bb8000
 800a164:	03d09000 	.word	0x03d09000
 800a168:	003d0900 	.word	0x003d0900
 800a16c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a170:	4b9d      	ldr	r3, [pc, #628]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d104      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a182:	f7fc ffd7 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 800a186:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a188:	f001 bf13 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800a18c:	4b96      	ldr	r3, [pc, #600]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a198:	d10a      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d107      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1a0:	f107 0314 	add.w	r3, r7, #20
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff f8e5 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	e043      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800a1b0:	4b8d      	ldr	r3, [pc, #564]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1bc:	d10a      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d107      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1c4:	f107 0308 	add.w	r3, r7, #8
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fa3d 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d2:	e031      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a1d4:	4b84      	ldr	r3, [pc, #528]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d10c      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d109      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1e6:	4b80      	ldr	r3, [pc, #512]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	08db      	lsrs	r3, r3, #3
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	4a7e      	ldr	r2, [pc, #504]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f8:	e01e      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800a1fa:	4b7b      	ldr	r3, [pc, #492]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a206:	d105      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d102      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800a20e:	4b78      	ldr	r3, [pc, #480]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a210:	637b      	str	r3, [r7, #52]	@ 0x34
 800a212:	e011      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a214:	4b74      	ldr	r3, [pc, #464]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d106      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	2b05      	cmp	r3, #5
 800a226:	d103      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800a228:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a22e:	e003      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a234:	f001 bebd 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a238:	f001 bebb 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a23c:	4b6a      	ldr	r3, [pc, #424]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a23e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a246:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d104      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a24e:	f7fc ff5b 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a252:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a254:	f001 bead 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800a258:	4b63      	ldr	r3, [pc, #396]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a264:	d10a      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d107      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a26c:	f107 0314 	add.w	r3, r7, #20
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff f87f 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27a:	e03d      	b.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	2b10      	cmp	r3, #16
 800a280:	d108      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a282:	f107 0308 	add.w	r3, r7, #8
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff f9de 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a290:	f001 be8f 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a294:	4b54      	ldr	r3, [pc, #336]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d10c      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	2b18      	cmp	r3, #24
 800a2a4:	d109      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2a6:	4b50      	ldr	r3, [pc, #320]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	08db      	lsrs	r3, r3, #3
 800a2ac:	f003 0303 	and.w	r3, r3, #3
 800a2b0:	4a4e      	ldr	r2, [pc, #312]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b8:	e01e      	b.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800a2ba:	4b4b      	ldr	r3, [pc, #300]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c6:	d105      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d102      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800a2ce:	4b48      	ldr	r3, [pc, #288]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d2:	e011      	b.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a2d4:	4b44      	ldr	r3, [pc, #272]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d106      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	2b28      	cmp	r3, #40	@ 0x28
 800a2e6:	d103      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800a2e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ee:	e003      	b.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2f4:	f001 be5d 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2f8:	f001 be5b 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a2fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a302:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a306:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d104      	bne.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a30e:	f7fc fefb 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a312:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a314:	f001 be4d 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800a318:	4b33      	ldr	r3, [pc, #204]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a324:	d10a      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	2b40      	cmp	r3, #64	@ 0x40
 800a32a:	d107      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff f81f 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33a:	e045      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800a33c:	4b2a      	ldr	r3, [pc, #168]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a348:	d10a      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	2b80      	cmp	r3, #128	@ 0x80
 800a34e:	d107      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a350:	f107 0308 	add.w	r3, r7, #8
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff f977 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35e:	e033      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a360:	4b21      	ldr	r3, [pc, #132]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d10c      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a370:	d109      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a372:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	08db      	lsrs	r3, r3, #3
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	4a1b      	ldr	r2, [pc, #108]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a37e:	fa22 f303 	lsr.w	r3, r2, r3
 800a382:	637b      	str	r3, [r7, #52]	@ 0x34
 800a384:	e020      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800a386:	4b18      	ldr	r3, [pc, #96]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a38e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800a394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a39a:	d102      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800a39c:	4b14      	ldr	r3, [pc, #80]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3a0:	e012      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a3a2:	4b11      	ldr	r3, [pc, #68]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a3a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3a8:	f003 0302 	and.w	r3, r3, #2
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d107      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a3b6:	d103      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800a3b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3be:	e003      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3c4:	f001 bdf5 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3c8:	f001 bdf3 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a3cc:	4b06      	ldr	r3, [pc, #24]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a3ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3d2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a3d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3de:	f7fc fe93 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a3e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a3e4:	f001 bde5 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3e8:	44020c00 	.word	0x44020c00
 800a3ec:	03d09000 	.word	0x03d09000
 800a3f0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800a3f4:	4ba0      	ldr	r3, [pc, #640]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a400:	d10b      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a408:	d107      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0314 	add.w	r3, r7, #20
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe ffb0 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	637b      	str	r3, [r7, #52]	@ 0x34
 800a418:	e047      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800a41a:	4b97      	ldr	r3, [pc, #604]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a426:	d10b      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a42e:	d107      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff f907 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a43e:	e034      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a440:	4b8d      	ldr	r3, [pc, #564]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0302 	and.w	r3, r3, #2
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d10d      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a452:	d109      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a454:	4b88      	ldr	r3, [pc, #544]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	08db      	lsrs	r3, r3, #3
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	4a87      	ldr	r2, [pc, #540]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
 800a466:	e020      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a468:	4b83      	ldr	r3, [pc, #524]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a474:	d106      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a47c:	d102      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a47e:	4b80      	ldr	r3, [pc, #512]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a480:	637b      	str	r3, [r7, #52]	@ 0x34
 800a482:	e012      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a484:	4b7c      	ldr	r3, [pc, #496]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d107      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a498:	d103      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a0:	e003      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4a6:	f001 bd84 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4aa:	f001 bd82 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a4ae:	4b72      	ldr	r3, [pc, #456]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a4b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a4b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a4b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d104      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4c0:	f7fc fe22 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a4c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a4c6:	f001 bd74 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a4ca:	4b6b      	ldr	r3, [pc, #428]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4d6:	d10b      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4de:	d107      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e0:	f107 0314 	add.w	r3, r7, #20
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe ff45 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ee:	e047      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a4f0:	4b61      	ldr	r3, [pc, #388]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4fc:	d10b      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a504:	d107      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a506:	f107 0308 	add.w	r3, r7, #8
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff f89c 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	637b      	str	r3, [r7, #52]	@ 0x34
 800a514:	e034      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a516:	4b58      	ldr	r3, [pc, #352]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d10d      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a528:	d109      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a52a:	4b53      	ldr	r3, [pc, #332]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	08db      	lsrs	r3, r3, #3
 800a530:	f003 0303 	and.w	r3, r3, #3
 800a534:	4a51      	ldr	r2, [pc, #324]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a536:	fa22 f303 	lsr.w	r3, r2, r3
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a53c:	e020      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a53e:	4b4e      	ldr	r3, [pc, #312]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a54a:	d106      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a552:	d102      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a554:	4b4a      	ldr	r3, [pc, #296]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
 800a558:	e012      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a55a:	4b47      	ldr	r3, [pc, #284]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a55c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a560:	f003 0302 	and.w	r3, r3, #2
 800a564:	2b02      	cmp	r3, #2
 800a566:	d107      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a56e:	d103      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a574:	637b      	str	r3, [r7, #52]	@ 0x34
 800a576:	e003      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a578:	2300      	movs	r3, #0
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a57c:	f001 bd19 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a580:	f001 bd17 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a584:	4b3c      	ldr	r3, [pc, #240]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a586:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a58a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a58e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	2b00      	cmp	r3, #0
 800a594:	d104      	bne.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a596:	f7fc fdb7 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a59a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a59c:	f001 bd09 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a5a0:	4b35      	ldr	r3, [pc, #212]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ac:	d10b      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5b4:	d107      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5b6:	f107 0314 	add.w	r3, r7, #20
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe feda 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c4:	e047      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a5c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5d2:	d10b      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5da:	d107      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5dc:	f107 0308 	add.w	r3, r7, #8
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff f831 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ea:	e034      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a5ec:	4b22      	ldr	r3, [pc, #136]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d10d      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a5fe:	d109      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a600:	4b1d      	ldr	r3, [pc, #116]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	08db      	lsrs	r3, r3, #3
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	4a1c      	ldr	r2, [pc, #112]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a60c:	fa22 f303 	lsr.w	r3, r2, r3
 800a610:	637b      	str	r3, [r7, #52]	@ 0x34
 800a612:	e020      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a614:	4b18      	ldr	r3, [pc, #96]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a620:	d106      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a628:	d102      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a62a:	4b15      	ldr	r3, [pc, #84]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a62e:	e012      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a630:	4b11      	ldr	r3, [pc, #68]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d107      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a644:	d103      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a64c:	e003      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a652:	f001 bcae 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a656:	f001 bcac 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a65a:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a65c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a660:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a664:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10b      	bne.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a66c:	f7fc fd4c 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a670:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a672:	f001 bc9e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a676:	bf00      	nop
 800a678:	44020c00 	.word	0x44020c00
 800a67c:	03d09000 	.word	0x03d09000
 800a680:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a684:	4ba0      	ldr	r3, [pc, #640]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a68c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a690:	d10b      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a698:	d107      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a69a:	f107 0314 	add.w	r3, r7, #20
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe fe68 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a8:	e047      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a6aa:	4b97      	ldr	r3, [pc, #604]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6b6:	d10b      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c0:	f107 0308 	add.w	r3, r7, #8
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe ffbf 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ce:	e034      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a6d0:	4b8d      	ldr	r3, [pc, #564]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d10d      	bne.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a6e2:	d109      	bne.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6e4:	4b88      	ldr	r3, [pc, #544]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	08db      	lsrs	r3, r3, #3
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	4a87      	ldr	r2, [pc, #540]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f6:	e020      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a6f8:	4b83      	ldr	r3, [pc, #524]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a704:	d106      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a70c:	d102      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a70e:	4b80      	ldr	r3, [pc, #512]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a710:	637b      	str	r3, [r7, #52]	@ 0x34
 800a712:	e012      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a714:	4b7c      	ldr	r3, [pc, #496]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a71a:	f003 0302 	and.w	r3, r3, #2
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d107      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a728:	d103      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a730:	e003      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a736:	f001 bc3c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a73a:	f001 bc3a 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a73e:	4b72      	ldr	r3, [pc, #456]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a744:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a748:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a750:	f7fc fcda 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a754:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a756:	f001 bc2c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a75a:	4b6b      	ldr	r3, [pc, #428]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a766:	d10b      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a76e:	d107      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a770:	f107 0314 	add.w	r3, r7, #20
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fdfd 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a77e:	e047      	b.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a780:	4b61      	ldr	r3, [pc, #388]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a78c:	d10b      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a794:	d107      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe ff54 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a4:	e034      	b.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a7a6:	4b58      	ldr	r3, [pc, #352]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d10d      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a7b8:	d109      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7ba:	4b53      	ldr	r3, [pc, #332]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	08db      	lsrs	r3, r3, #3
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	4a51      	ldr	r2, [pc, #324]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7cc:	e020      	b.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a7ce:	4b4e      	ldr	r3, [pc, #312]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7da:	d106      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7e2:	d102      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a7e4:	4b4a      	ldr	r3, [pc, #296]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e8:	e012      	b.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a7ea:	4b47      	ldr	r3, [pc, #284]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a7fe:	d103      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a804:	637b      	str	r3, [r7, #52]	@ 0x34
 800a806:	e003      	b.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a80c:	f001 bbd1 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a810:	f001 bbcf 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a814:	4b3c      	ldr	r3, [pc, #240]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a816:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a81a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a81e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a822:	2b00      	cmp	r3, #0
 800a824:	d104      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a826:	f7fc fc6f 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a82a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a82c:	f001 bbc1 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a830:	4b35      	ldr	r3, [pc, #212]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a83c:	d10b      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a844:	d107      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a846:	f107 0314 	add.w	r3, r7, #20
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fd92 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	637b      	str	r3, [r7, #52]	@ 0x34
 800a854:	e047      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a856:	4b2c      	ldr	r3, [pc, #176]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a85e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a862:	d10b      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a86a:	d107      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86c:	f107 0308 	add.w	r3, r7, #8
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe fee9 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87a:	e034      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a87c:	4b22      	ldr	r3, [pc, #136]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b02      	cmp	r3, #2
 800a886:	d10d      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a88e:	d109      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a890:	4b1d      	ldr	r3, [pc, #116]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	08db      	lsrs	r3, r3, #3
 800a896:	f003 0303 	and.w	r3, r3, #3
 800a89a:	4a1c      	ldr	r2, [pc, #112]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a89c:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8a2:	e020      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a8a4:	4b18      	ldr	r3, [pc, #96]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8b0:	d106      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8b8:	d102      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a8ba:	4b15      	ldr	r3, [pc, #84]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8be:	e012      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a8c0:	4b11      	ldr	r3, [pc, #68]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a8c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d107      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a8d4:	d103      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a8d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8dc:	e003      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8e2:	f001 bb66 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8e6:	f001 bb64 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a8ea:	4b07      	ldr	r3, [pc, #28]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a8ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8f0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a8f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10b      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a8fc:	f7fc fc04 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a900:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a902:	f001 bb56 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a906:	bf00      	nop
 800a908:	44020c00 	.word	0x44020c00
 800a90c:	03d09000 	.word	0x03d09000
 800a910:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a914:	4ba1      	ldr	r3, [pc, #644]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a91c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a920:	d10b      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a928:	d107      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92a:	f107 0314 	add.w	r3, r7, #20
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe fd20 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
 800a938:	e047      	b.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a93a:	4b98      	ldr	r3, [pc, #608]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a946:	d10b      	bne.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a94e:	d107      	bne.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a950:	f107 0308 	add.w	r3, r7, #8
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fe77 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a95e:	e034      	b.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a960:	4b8e      	ldr	r3, [pc, #568]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d10d      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a972:	d109      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a974:	4b89      	ldr	r3, [pc, #548]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	08db      	lsrs	r3, r3, #3
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	4a88      	ldr	r2, [pc, #544]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a980:	fa22 f303 	lsr.w	r3, r2, r3
 800a984:	637b      	str	r3, [r7, #52]	@ 0x34
 800a986:	e020      	b.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a988:	4b84      	ldr	r3, [pc, #528]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a994:	d106      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a99c:	d102      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a99e:	4b81      	ldr	r3, [pc, #516]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a2:	e012      	b.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a9a4:	4b7d      	ldr	r3, [pc, #500]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a9a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d107      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a9b8:	d103      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a9ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c0:	e003      	b.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9c6:	f001 baf4 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9ca:	f001 baf2 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a9ce:	4b73      	ldr	r3, [pc, #460]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a9d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a9e0:	f7fc fb92 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800a9e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a9e6:	f001 bae4 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a9ea:	4b6c      	ldr	r3, [pc, #432]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9f6:	d10a      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fe:	f107 0314 	add.w	r3, r7, #20
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe fcb6 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0c:	e043      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800aa0e:	4b63      	ldr	r3, [pc, #396]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa1a:	d10a      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d107      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fe0e 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa30:	e031      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800aa32:	4b5a      	ldr	r3, [pc, #360]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d10c      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d109      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa44:	4b55      	ldr	r3, [pc, #340]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	08db      	lsrs	r3, r3, #3
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	4a54      	ldr	r2, [pc, #336]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
 800aa54:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa56:	e01e      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800aa58:	4b50      	ldr	r3, [pc, #320]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa64:	d105      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d102      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800aa6c:	4b4d      	ldr	r3, [pc, #308]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800aa6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa70:	e011      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800aa72:	4b4a      	ldr	r3, [pc, #296]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa78:	f003 0302 	and.w	r3, r3, #2
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d106      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	d103      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800aa86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa8c:	e003      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa92:	f001 ba8e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa96:	f001 ba8c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800aa9a:	4b40      	ldr	r3, [pc, #256]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aaa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aaa4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aaac:	f7fc fb2c 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800aab0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800aab2:	f001 ba7e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800aab6:	4b39      	ldr	r3, [pc, #228]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aabe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aac2:	d10a      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	2b10      	cmp	r3, #16
 800aac8:	d107      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaca:	f107 0314 	add.w	r3, r7, #20
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fc50 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aad8:	e043      	b.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800aada:	4b30      	ldr	r3, [pc, #192]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aae6:	d10a      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	d107      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaee:	f107 0308 	add.w	r3, r7, #8
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fda8 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aafc:	e031      	b.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800aafe:	4b27      	ldr	r3, [pc, #156]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d10c      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0c:	2b30      	cmp	r3, #48	@ 0x30
 800ab0e:	d109      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab10:	4b22      	ldr	r3, [pc, #136]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	08db      	lsrs	r3, r3, #3
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	4a21      	ldr	r2, [pc, #132]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800ab1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab22:	e01e      	b.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800ab24:	4b1d      	ldr	r3, [pc, #116]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab30:	d105      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	2b40      	cmp	r3, #64	@ 0x40
 800ab36:	d102      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800ab38:	4b1a      	ldr	r3, [pc, #104]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ab3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab3c:	e011      	b.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800ab3e:	4b17      	ldr	r3, [pc, #92]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ab40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d106      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4e:	2b50      	cmp	r3, #80	@ 0x50
 800ab50:	d103      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800ab52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab58:	e003      	b.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab5e:	f001 ba28 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab62:	f001 ba26 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ab66:	4b0d      	ldr	r3, [pc, #52]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ab68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab6c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ab70:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d104      	bne.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ab78:	f7fc faf2 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800ab7c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ab7e:	f001 ba18 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab88:	d10e      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab8a:	f107 0314 	add.w	r3, r7, #20
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fbf0 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab98:	f001 ba0b 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab9c:	44020c00 	.word	0x44020c00
 800aba0:	03d09000 	.word	0x03d09000
 800aba4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abae:	d108      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb0:	f107 0308 	add.w	r3, r7, #8
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe fd47 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abbe:	f001 b9f8 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800abc2:	4ba4      	ldr	r3, [pc, #656]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d10d      	bne.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abd4:	d109      	bne.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800abd6:	4b9f      	ldr	r3, [pc, #636]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	08db      	lsrs	r3, r3, #3
 800abdc:	f003 0303 	and.w	r3, r3, #3
 800abe0:	4a9d      	ldr	r2, [pc, #628]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800abe2:	fa22 f303 	lsr.w	r3, r2, r3
 800abe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800abe8:	e020      	b.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800abea:	4b9a      	ldr	r3, [pc, #616]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abf6:	d106      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abfe:	d102      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800ac00:	4b96      	ldr	r3, [pc, #600]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ac02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac04:	e012      	b.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ac06:	4b93      	ldr	r3, [pc, #588]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d107      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800ac14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac16:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ac1a:	d103      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800ac1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac22:	e003      	b.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac28:	f001 b9c3 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac2c:	f001 b9c1 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ac30:	4b88      	ldr	r3, [pc, #544]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800ac42:	f7fc fa45 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 800ac46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800ac48:	f001 b9b3 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d104      	bne.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac52:	f7fc f911 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 800ac56:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ac58:	f001 b9ab 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d108      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac62:	f107 0314 	add.w	r3, r7, #20
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe fb84 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac70:	f001 b99f 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ac74:	4b77      	ldr	r3, [pc, #476]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac80:	d105      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d102      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800ac88:	4b75      	ldr	r3, [pc, #468]	@ (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800ac8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8c:	e023      	b.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ac8e:	4b71      	ldr	r3, [pc, #452]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d10c      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d109      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aca0:	4b6c      	ldr	r3, [pc, #432]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	08db      	lsrs	r3, r3, #3
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	4a6b      	ldr	r2, [pc, #428]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
 800acb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acb2:	e010      	b.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800acb4:	4b67      	ldr	r3, [pc, #412]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acc0:	d105      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800acc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc4:	2b05      	cmp	r3, #5
 800acc6:	d102      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800acc8:	4b64      	ldr	r3, [pc, #400]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
 800accc:	e003      	b.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acd2:	f001 b96e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acd6:	f001 b96c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800acda:	4b5e      	ldr	r3, [pc, #376]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800acdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ace0:	f003 0308 	and.w	r3, r3, #8
 800ace4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800ace6:	4b5b      	ldr	r3, [pc, #364]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ace8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acec:	f003 0302 	and.w	r3, r3, #2
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d106      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d103      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800acfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad00:	e012      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800ad02:	4b54      	ldr	r3, [pc, #336]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad10:	d106      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	d103      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800ad18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ad1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad1e:	e003      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ad24:	f001 b945 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad28:	f001 b943 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ad2c:	4b49      	ldr	r3, [pc, #292]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ad38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d104      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad3e:	f7fc f9e3 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800ad42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad44:	f001 b935 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800ad48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad4e:	d108      	bne.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad50:	f107 0308 	add.w	r3, r7, #8
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fc77 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad5e:	f001 b928 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ad62:	4b3c      	ldr	r3, [pc, #240]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d10d      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad74:	d109      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad76:	4b37      	ldr	r3, [pc, #220]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	08db      	lsrs	r3, r3, #3
 800ad7c:	f003 0303 	and.w	r3, r3, #3
 800ad80:	4a35      	ldr	r2, [pc, #212]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ad82:	fa22 f303 	lsr.w	r3, r2, r3
 800ad86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad88:	e011      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800ad8a:	4b32      	ldr	r3, [pc, #200]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad96:	d106      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800ad98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad9e:	d102      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800ada0:	4b2e      	ldr	r3, [pc, #184]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ada2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ada4:	e003      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adaa:	f001 b902 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800adae:	f001 b900 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800adb2:	4b28      	ldr	r3, [pc, #160]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800adb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800adb8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800adbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800adc4:	f7fc f9a0 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800adc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800adca:	f001 b8f2 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800add4:	d108      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add6:	f107 0308 	add.w	r3, r7, #8
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe fc34 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ade4:	f001 b8e5 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ade8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d10d      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800adfa:	d109      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adfc:	4b15      	ldr	r3, [pc, #84]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	08db      	lsrs	r3, r3, #3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	4a14      	ldr	r2, [pc, #80]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae0e:	e011      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800ae10:	4b10      	ldr	r3, [pc, #64]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae1c:	d106      	bne.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ae24:	d102      	bne.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800ae26:	4b0d      	ldr	r3, [pc, #52]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ae28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2a:	e003      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae30:	f001 b8bf 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae34:	f001 b8bd 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ae38:	4b06      	ldr	r3, [pc, #24]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ae42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10c      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ae4a:	f7fc f989 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800ae4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae50:	f001 b8af 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae54:	44020c00 	.word	0x44020c00
 800ae58:	03d09000 	.word	0x03d09000
 800ae5c:	003d0900 	.word	0x003d0900
 800ae60:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae6a:	d108      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae6c:	f107 0308 	add.w	r3, r7, #8
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fe fbe9 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae7a:	f001 b89a 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800ae7e:	4b9f      	ldr	r3, [pc, #636]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d10d      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae90:	d109      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae92:	4b9a      	ldr	r3, [pc, #616]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	08db      	lsrs	r3, r3, #3
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	4a98      	ldr	r2, [pc, #608]	@ (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ae9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aea2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea4:	e011      	b.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800aea6:	4b95      	ldr	r3, [pc, #596]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeb2:	d106      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aeba:	d102      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800aebc:	4b91      	ldr	r3, [pc, #580]	@ (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec0:	e003      	b.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aec6:	f001 b874 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aeca:	f001 b872 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800aece:	4b8b      	ldr	r3, [pc, #556]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aed4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800aed8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800aeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800aee0:	f7fc f93e 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800aee4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800aee6:	f001 b864 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aef0:	d108      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aef2:	f107 0308 	add.w	r3, r7, #8
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe fba6 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af00:	f001 b857 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800af04:	4b7d      	ldr	r3, [pc, #500]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d10d      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800af10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af16:	d109      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af18:	4b78      	ldr	r3, [pc, #480]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	08db      	lsrs	r3, r3, #3
 800af1e:	f003 0303 	and.w	r3, r3, #3
 800af22:	4a77      	ldr	r2, [pc, #476]	@ (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800af24:	fa22 f303 	lsr.w	r3, r2, r3
 800af28:	637b      	str	r3, [r7, #52]	@ 0x34
 800af2a:	e011      	b.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800af2c:	4b73      	ldr	r3, [pc, #460]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af38:	d106      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800af40:	d102      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800af42:	4b70      	ldr	r3, [pc, #448]	@ (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800af44:	637b      	str	r3, [r7, #52]	@ 0x34
 800af46:	e003      	b.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af4c:	f001 b831 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af50:	f001 b82f 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800af54:	4b69      	ldr	r3, [pc, #420]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af5a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800af5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	2b00      	cmp	r3, #0
 800af64:	d104      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800af66:	f7fc f8cf 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800af6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800af6c:	f001 b821 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af76:	d108      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af78:	f107 0308 	add.w	r3, r7, #8
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe fb63 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af86:	f001 b814 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800af8a:	4b5c      	ldr	r3, [pc, #368]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b02      	cmp	r3, #2
 800af94:	d10e      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af9c:	d10a      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af9e:	4b57      	ldr	r3, [pc, #348]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	08db      	lsrs	r3, r3, #3
 800afa4:	f003 0303 	and.w	r3, r3, #3
 800afa8:	4a55      	ldr	r2, [pc, #340]	@ (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800afaa:	fa22 f303 	lsr.w	r3, r2, r3
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afb0:	f000 bfff 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afb8:	f000 bffb 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800afbc:	4b4f      	ldr	r3, [pc, #316]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800afbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800afc2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800afce:	d056      	beq.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800afd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800afd6:	f200 808b 	bhi.w	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afe0:	d03e      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800afe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afe8:	f200 8082 	bhi.w	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800afec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aff2:	d027      	beq.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800affa:	d879      	bhi.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b002:	d017      	beq.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800b004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b00a:	d871      	bhi.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b018:	d004      	beq.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800b01a:	e069      	b.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b01c:	f7fc f8a0 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800b020:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b022:	e068      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b024:	f107 0314 	add.w	r3, r7, #20
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe f9a3 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b032:	e060      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fe fb05 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b042:	e058      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b044:	4b2d      	ldr	r3, [pc, #180]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d103      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800b052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b056:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b058:	e04d      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b05e:	e04a      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b060:	4b26      	ldr	r3, [pc, #152]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b06a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b06e:	d103      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800b070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b074:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b076:	e03e      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b07c:	e03b      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b07e:	4b1f      	ldr	r3, [pc, #124]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b084:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b088:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b08a:	4b1c      	ldr	r3, [pc, #112]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b02      	cmp	r3, #2
 800b094:	d10c      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d109      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b09c:	4b17      	ldr	r3, [pc, #92]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	08db      	lsrs	r3, r3, #3
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	4a16      	ldr	r2, [pc, #88]	@ (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ae:	e01e      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0b0:	4b12      	ldr	r3, [pc, #72]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0bc:	d106      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0c4:	d102      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ca:	e010      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0d8:	d106      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800b0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0e0:	d102      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b0e2:	4b09      	ldr	r3, [pc, #36]	@ (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0e6:	e002      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b0ec:	e003      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800b0ee:	e002      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0f4:	bf00      	nop
          }
        }
        break;
 800b0f6:	f000 bf5c 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0fa:	bf00      	nop
 800b0fc:	44020c00 	.word	0x44020c00
 800b100:	03d09000 	.word	0x03d09000
 800b104:	003d0900 	.word	0x003d0900
 800b108:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b10c:	4b9e      	ldr	r3, [pc, #632]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b10e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b112:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b116:	633b      	str	r3, [r7, #48]	@ 0x30
 800b118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b11e:	d056      	beq.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800b120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b122:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b126:	f200 808b 	bhi.w	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b130:	d03e      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b138:	f200 8082 	bhi.w	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b142:	d027      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b14a:	d879      	bhi.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b152:	d017      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b15a:	d871      	bhi.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b168:	d004      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800b16a:	e069      	b.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800b16c:	f7fb ffcc 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 800b170:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b172:	e068      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b174:	f107 0314 	add.w	r3, r7, #20
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe f8fb 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b182:	e060      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b184:	f107 0308 	add.w	r3, r7, #8
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fa5d 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b192:	e058      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b194:	4b7c      	ldr	r3, [pc, #496]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b19a:	f003 0302 	and.w	r3, r3, #2
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d103      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800b1a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b1a8:	e04d      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b1ae:	e04a      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b1b0:	4b75      	ldr	r3, [pc, #468]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b1b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1be:	d103      	bne.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800b1c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b1c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b1c6:	e03e      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b1cc:	e03b      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1ce:	4b6e      	ldr	r3, [pc, #440]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b1d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1d4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1da:	4b6b      	ldr	r3, [pc, #428]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0302 	and.w	r3, r3, #2
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d10c      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800b1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d109      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b1ec:	4b66      	ldr	r3, [pc, #408]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	08db      	lsrs	r3, r3, #3
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	4a65      	ldr	r2, [pc, #404]	@ (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1fe:	e01e      	b.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b200:	4b61      	ldr	r3, [pc, #388]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b20c:	d106      	bne.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800b20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b214:	d102      	bne.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b216:	4b5e      	ldr	r3, [pc, #376]	@ (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b218:	637b      	str	r3, [r7, #52]	@ 0x34
 800b21a:	e010      	b.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b21c:	4b5a      	ldr	r3, [pc, #360]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b228:	d106      	bne.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b230:	d102      	bne.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b232:	4b58      	ldr	r3, [pc, #352]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b234:	637b      	str	r3, [r7, #52]	@ 0x34
 800b236:	e002      	b.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b23c:	e003      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800b23e:	e002      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b244:	bf00      	nop
          }
        }
        break;
 800b246:	f000 beb4 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b24a:	4b4f      	ldr	r3, [pc, #316]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b24c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b250:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b254:	633b      	str	r3, [r7, #48]	@ 0x30
 800b256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b25c:	d056      	beq.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b264:	f200 808b 	bhi.w	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b26e:	d03e      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b272:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b276:	f200 8082 	bhi.w	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b280:	d027      	beq.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b288:	d879      	bhi.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b290:	d017      	beq.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800b292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b298:	d871      	bhi.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d004      	beq.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2a6:	d004      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800b2a8:	e069      	b.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b2aa:	f7fb ff59 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800b2ae:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b2b0:	e068      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b2:	f107 0314 	add.w	r3, r7, #20
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe f85c 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2c0:	e060      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe f9be 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2d0:	e058      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b2d2:	4b2d      	ldr	r3, [pc, #180]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b2d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d103      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800b2e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b2e6:	e04d      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2ec:	e04a      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b2ee:	4b26      	ldr	r3, [pc, #152]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b2f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2fc:	d103      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800b2fe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b304:	e03e      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b30a:	e03b      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b30c:	4b1e      	ldr	r3, [pc, #120]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b30e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b312:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b316:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b318:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b02      	cmp	r3, #2
 800b322:	d10c      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b32a:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	4a15      	ldr	r2, [pc, #84]	@ (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b33c:	e01e      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b33e:	4b12      	ldr	r3, [pc, #72]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b34a:	d106      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800b34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b352:	d102      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b354:	4b0e      	ldr	r3, [pc, #56]	@ (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b356:	637b      	str	r3, [r7, #52]	@ 0x34
 800b358:	e010      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b35a:	4b0b      	ldr	r3, [pc, #44]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b366:	d106      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b36e:	d102      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b370:	4b08      	ldr	r3, [pc, #32]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b372:	637b      	str	r3, [r7, #52]	@ 0x34
 800b374:	e002      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b37a:	e003      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800b37c:	e002      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b382:	bf00      	nop
          }
        }
        break;
 800b384:	f000 be15 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b388:	44020c00 	.word	0x44020c00
 800b38c:	03d09000 	.word	0x03d09000
 800b390:	003d0900 	.word	0x003d0900
 800b394:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b398:	4b9e      	ldr	r3, [pc, #632]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b39a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b39e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800b3a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b3aa:	d056      	beq.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b3b2:	f200 808b 	bhi.w	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3bc:	d03e      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3c4:	f200 8082 	bhi.w	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3ce:	d027      	beq.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3d6:	d879      	bhi.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3de:	d017      	beq.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3e6:	d871      	bhi.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d004      	beq.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3f4:	d004      	beq.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800b3f6:	e069      	b.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b3f8:	f7fb feb2 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800b3fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b3fe:	e068      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b400:	f107 0314 	add.w	r3, r7, #20
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd ffb5 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b40e:	e060      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b410:	f107 0308 	add.w	r3, r7, #8
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe f917 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b41e:	e058      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b420:	4b7c      	ldr	r3, [pc, #496]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d103      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800b42e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b432:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b434:	e04d      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b43a:	e04a      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b43c:	4b75      	ldr	r3, [pc, #468]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b43e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b44a:	d103      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b44c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b452:	e03e      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b458:	e03b      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b45a:	4b6e      	ldr	r3, [pc, #440]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b45c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b460:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b464:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b466:	4b6b      	ldr	r3, [pc, #428]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d10c      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d109      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b478:	4b66      	ldr	r3, [pc, #408]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	08db      	lsrs	r3, r3, #3
 800b47e:	f003 0303 	and.w	r3, r3, #3
 800b482:	4a65      	ldr	r2, [pc, #404]	@ (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b484:	fa22 f303 	lsr.w	r3, r2, r3
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	e01e      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b48c:	4b61      	ldr	r3, [pc, #388]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b498:	d106      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a0:	d102      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b4a2:	4b5e      	ldr	r3, [pc, #376]	@ (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4a6:	e010      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4b4:	d106      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4bc:	d102      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b4be:	4b58      	ldr	r3, [pc, #352]	@ (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4c2:	e002      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b4c8:	e003      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b4ca:	e002      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4d0:	bf00      	nop
          }
        }
        break;
 800b4d2:	f000 bd6e 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b4d6:	4b4f      	ldr	r3, [pc, #316]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b4dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b4e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b4e8:	d056      	beq.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b4f0:	f200 808b 	bhi.w	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4fa:	d03e      	beq.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b502:	f200 8082 	bhi.w	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b50c:	d027      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b514:	d879      	bhi.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b51c:	d017      	beq.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b524:	d871      	bhi.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d004      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b532:	d004      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b534:	e069      	b.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b536:	f7fb fe13 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800b53a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b53c:	e068      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b53e:	f107 0314 	add.w	r3, r7, #20
 800b542:	4618      	mov	r0, r3
 800b544:	f7fd ff16 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b54c:	e060      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe f878 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b55c:	e058      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b55e:	4b2d      	ldr	r3, [pc, #180]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d103      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b56c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b570:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b572:	e04d      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b578:	e04a      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b57a:	4b26      	ldr	r3, [pc, #152]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b57c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b588:	d103      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b58a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b58e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b590:	e03e      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b596:	e03b      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b598:	4b1e      	ldr	r3, [pc, #120]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b59a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b59e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d10c      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d109      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b5b6:	4b17      	ldr	r3, [pc, #92]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	08db      	lsrs	r3, r3, #3
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	4a15      	ldr	r2, [pc, #84]	@ (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c8:	e01e      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5ca:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5d6:	d106      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5de:	d102      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5e4:	e010      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5f2:	d106      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5fa:	d102      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b5fc:	4b08      	ldr	r3, [pc, #32]	@ (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b5fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b600:	e002      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b606:	e003      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b608:	e002      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b60e:	bf00      	nop
          }
        }
        break;
 800b610:	f000 bccf 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b614:	44020c00 	.word	0x44020c00
 800b618:	03d09000 	.word	0x03d09000
 800b61c:	003d0900 	.word	0x003d0900
 800b620:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b624:	4b9e      	ldr	r3, [pc, #632]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b626:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b62a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b62e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b636:	d056      	beq.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b63e:	f200 808b 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b648:	d03e      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b650:	f200 8082 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b656:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b65a:	d027      	beq.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b662:	d879      	bhi.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b66a:	d017      	beq.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b672:	d871      	bhi.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	2b00      	cmp	r3, #0
 800b678:	d004      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b680:	d004      	beq.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b682:	e069      	b.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b684:	f7fb fd6c 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800b688:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b68a:	e068      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b68c:	f107 0314 	add.w	r3, r7, #20
 800b690:	4618      	mov	r0, r3
 800b692:	f7fd fe6f 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b69a:	e060      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fd ffd1 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6aa:	e058      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b6ac:	4b7c      	ldr	r3, [pc, #496]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b6ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d103      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b6ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b6c0:	e04d      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6c6:	e04a      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b6c8:	4b75      	ldr	r3, [pc, #468]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b6ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6d6:	d103      	bne.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b6d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b6dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b6de:	e03e      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6e4:	e03b      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b6e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6f2:	4b6b      	ldr	r3, [pc, #428]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d10c      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b704:	4b66      	ldr	r3, [pc, #408]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	08db      	lsrs	r3, r3, #3
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	4a65      	ldr	r2, [pc, #404]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b710:	fa22 f303 	lsr.w	r3, r2, r3
 800b714:	637b      	str	r3, [r7, #52]	@ 0x34
 800b716:	e01e      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b718:	4b61      	ldr	r3, [pc, #388]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b724:	d106      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b72c:	d102      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b72e:	4b5e      	ldr	r3, [pc, #376]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b730:	637b      	str	r3, [r7, #52]	@ 0x34
 800b732:	e010      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b734:	4b5a      	ldr	r3, [pc, #360]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b73c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b740:	d106      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b748:	d102      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b74a:	4b58      	ldr	r3, [pc, #352]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74e:	e002      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b754:	e003      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b756:	e002      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b75c:	bf00      	nop
          }
        }
        break;
 800b75e:	f000 bc28 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b762:	4b4f      	ldr	r3, [pc, #316]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b76c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b76e:	4b4c      	ldr	r3, [pc, #304]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b77a:	d106      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d103      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b782:	4b4a      	ldr	r3, [pc, #296]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b784:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b786:	f000 bc14 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b790:	d108      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b792:	f107 0320 	add.w	r3, r7, #32
 800b796:	4618      	mov	r0, r3
 800b798:	f7fd fc82 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7a0:	f000 bc07 	b.w	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7aa:	d107      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fd fddf 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7ba:	e3fa      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7c0:	e3f7      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b7c2:	4b37      	ldr	r3, [pc, #220]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b7c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7c8:	f003 0307 	and.w	r3, r3, #7
 800b7cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d0:	2b04      	cmp	r3, #4
 800b7d2:	d861      	bhi.n	800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b7f1 	.word	0x0800b7f1
 800b7e0:	0800b801 	.word	0x0800b801
 800b7e4:	0800b811 	.word	0x0800b811
 800b7e8:	0800b821 	.word	0x0800b821
 800b7ec:	0800b827 	.word	0x0800b827
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7f0:	f107 0320 	add.w	r3, r7, #32
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd fc53 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7fe:	e04e      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b800:	f107 0314 	add.w	r3, r7, #20
 800b804:	4618      	mov	r0, r3
 800b806:	f7fd fdb5 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b80e:	e046      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b810:	f107 0308 	add.w	r3, r7, #8
 800b814:	4618      	mov	r0, r3
 800b816:	f7fd ff17 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b81e:	e03e      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b820:	4b23      	ldr	r3, [pc, #140]	@ (800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b822:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b824:	e03b      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b826:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b82c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b830:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b832:	4b1b      	ldr	r3, [pc, #108]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d10c      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d109      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b844:	4b16      	ldr	r3, [pc, #88]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	08db      	lsrs	r3, r3, #3
 800b84a:	f003 0303 	and.w	r3, r3, #3
 800b84e:	4a15      	ldr	r2, [pc, #84]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b850:	fa22 f303 	lsr.w	r3, r2, r3
 800b854:	637b      	str	r3, [r7, #52]	@ 0x34
 800b856:	e01e      	b.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b858:	4b11      	ldr	r3, [pc, #68]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b864:	d106      	bne.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b86c:	d102      	bne.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b86e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b870:	637b      	str	r3, [r7, #52]	@ 0x34
 800b872:	e010      	b.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b874:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b87c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b880:	d106      	bne.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b888:	d102      	bne.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b88a:	4b08      	ldr	r3, [pc, #32]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b88e:	e002      	b.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b894:	e003      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b896:	e002      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b89c:	bf00      	nop
          }
        }
        break;
 800b89e:	e388      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8a0:	44020c00 	.word	0x44020c00
 800b8a4:	03d09000 	.word	0x03d09000
 800b8a8:	003d0900 	.word	0x003d0900
 800b8ac:	017d7840 	.word	0x017d7840
 800b8b0:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b8b4:	4ba9      	ldr	r3, [pc, #676]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8be:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c2:	2b20      	cmp	r3, #32
 800b8c4:	f200 809a 	bhi.w	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b8c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ce:	bf00      	nop
 800b8d0:	0800b955 	.word	0x0800b955
 800b8d4:	0800b9fd 	.word	0x0800b9fd
 800b8d8:	0800b9fd 	.word	0x0800b9fd
 800b8dc:	0800b9fd 	.word	0x0800b9fd
 800b8e0:	0800b9fd 	.word	0x0800b9fd
 800b8e4:	0800b9fd 	.word	0x0800b9fd
 800b8e8:	0800b9fd 	.word	0x0800b9fd
 800b8ec:	0800b9fd 	.word	0x0800b9fd
 800b8f0:	0800b965 	.word	0x0800b965
 800b8f4:	0800b9fd 	.word	0x0800b9fd
 800b8f8:	0800b9fd 	.word	0x0800b9fd
 800b8fc:	0800b9fd 	.word	0x0800b9fd
 800b900:	0800b9fd 	.word	0x0800b9fd
 800b904:	0800b9fd 	.word	0x0800b9fd
 800b908:	0800b9fd 	.word	0x0800b9fd
 800b90c:	0800b9fd 	.word	0x0800b9fd
 800b910:	0800b975 	.word	0x0800b975
 800b914:	0800b9fd 	.word	0x0800b9fd
 800b918:	0800b9fd 	.word	0x0800b9fd
 800b91c:	0800b9fd 	.word	0x0800b9fd
 800b920:	0800b9fd 	.word	0x0800b9fd
 800b924:	0800b9fd 	.word	0x0800b9fd
 800b928:	0800b9fd 	.word	0x0800b9fd
 800b92c:	0800b9fd 	.word	0x0800b9fd
 800b930:	0800b985 	.word	0x0800b985
 800b934:	0800b9fd 	.word	0x0800b9fd
 800b938:	0800b9fd 	.word	0x0800b9fd
 800b93c:	0800b9fd 	.word	0x0800b9fd
 800b940:	0800b9fd 	.word	0x0800b9fd
 800b944:	0800b9fd 	.word	0x0800b9fd
 800b948:	0800b9fd 	.word	0x0800b9fd
 800b94c:	0800b9fd 	.word	0x0800b9fd
 800b950:	0800b98b 	.word	0x0800b98b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b954:	f107 0320 	add.w	r3, r7, #32
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fd fba1 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b962:	e04e      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b964:	f107 0314 	add.w	r3, r7, #20
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fd fd03 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b972:	e046      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b974:	f107 0308 	add.w	r3, r7, #8
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fd fe65 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b982:	e03e      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b984:	4b76      	ldr	r3, [pc, #472]	@ (800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b986:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b988:	e03b      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b98a:	4b74      	ldr	r3, [pc, #464]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b98c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b990:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b994:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b996:	4b71      	ldr	r3, [pc, #452]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0302 	and.w	r3, r3, #2
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d10c      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d109      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9a8:	4b6c      	ldr	r3, [pc, #432]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	08db      	lsrs	r3, r3, #3
 800b9ae:	f003 0303 	and.w	r3, r3, #3
 800b9b2:	4a6c      	ldr	r2, [pc, #432]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ba:	e01e      	b.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9bc:	4b67      	ldr	r3, [pc, #412]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9c8:	d106      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9d0:	d102      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b9d2:	4b65      	ldr	r3, [pc, #404]	@ (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d6:	e010      	b.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9d8:	4b60      	ldr	r3, [pc, #384]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9e4:	d106      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9ec:	d102      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b9ee:	4b5f      	ldr	r3, [pc, #380]	@ (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f2:	e002      	b.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b9f8:	e003      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b9fa:	e002      	b.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba00:	bf00      	nop
          }
        }
        break;
 800ba02:	e2d6      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ba04:	4b55      	ldr	r3, [pc, #340]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba0a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ba0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba16:	d031      	beq.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba1e:	d866      	bhi.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ba20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba22:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba24:	d027      	beq.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba28:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba2a:	d860      	bhi.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	2b80      	cmp	r3, #128	@ 0x80
 800ba30:	d019      	beq.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	2b80      	cmp	r3, #128	@ 0x80
 800ba36:	d85a      	bhi.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ba38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	2b40      	cmp	r3, #64	@ 0x40
 800ba42:	d008      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800ba44:	e053      	b.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba46:	f107 0320 	add.w	r3, r7, #32
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fd fb28 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba54:	e04e      	b.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba56:	f107 0314 	add.w	r3, r7, #20
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fd fc8a 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba64:	e046      	b.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd fdec 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba74:	e03e      	b.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ba76:	4b3a      	ldr	r3, [pc, #232]	@ (800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800ba78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba7a:	e03b      	b.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba7c:	4b37      	ldr	r3, [pc, #220]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba82:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ba86:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba88:	4b34      	ldr	r3, [pc, #208]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d10c      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800ba94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d109      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba9a:	4b30      	ldr	r3, [pc, #192]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	08db      	lsrs	r3, r3, #3
 800baa0:	f003 0303 	and.w	r3, r3, #3
 800baa4:	4a2f      	ldr	r2, [pc, #188]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800baa6:	fa22 f303 	lsr.w	r3, r2, r3
 800baaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800baac:	e01e      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baae:	4b2b      	ldr	r3, [pc, #172]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baba:	d106      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800babc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bac2:	d102      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bac4:	4b28      	ldr	r3, [pc, #160]	@ (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bac6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac8:	e010      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baca:	4b24      	ldr	r3, [pc, #144]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bad6:	d106      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bada:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bade:	d102      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bae0:	4b22      	ldr	r3, [pc, #136]	@ (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bae2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bae4:	e002      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800baea:	e003      	b.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800baec:	e002      	b.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800baf2:	bf00      	nop
          }
        }
        break;
 800baf4:	e25d      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800baf6:	4b19      	ldr	r3, [pc, #100]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800baf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bafc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800bb00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800bb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d103      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bb08:	f7fb fb14 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 800bb0c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bb0e:	e250      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800bb10:	4b12      	ldr	r3, [pc, #72]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb1c:	d10b      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb24:	d107      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb26:	f107 0314 	add.w	r3, r7, #20
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fd fc22 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb34:	e04f      	b.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800bb36:	4b09      	ldr	r3, [pc, #36]	@ (800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb42:	d115      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb4a:	d111      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb4c:	f107 0308 	add.w	r3, r7, #8
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fd fd79 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb5a:	e03c      	b.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800bb5c:	44020c00 	.word	0x44020c00
 800bb60:	00bb8000 	.word	0x00bb8000
 800bb64:	03d09000 	.word	0x03d09000
 800bb68:	003d0900 	.word	0x003d0900
 800bb6c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800bb70:	4b94      	ldr	r3, [pc, #592]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0302 	and.w	r3, r3, #2
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d10d      	bne.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bb82:	d109      	bne.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb84:	4b8f      	ldr	r3, [pc, #572]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	08db      	lsrs	r3, r3, #3
 800bb8a:	f003 0303 	and.w	r3, r3, #3
 800bb8e:	4a8e      	ldr	r2, [pc, #568]	@ (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bb90:	fa22 f303 	lsr.w	r3, r2, r3
 800bb94:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb96:	e01e      	b.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800bb98:	4b8a      	ldr	r3, [pc, #552]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba4:	d106      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbac:	d102      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800bbae:	4b87      	ldr	r3, [pc, #540]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bbb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbb2:	e010      	b.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800bbb4:	4b83      	ldr	r3, [pc, #524]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbc0:	d106      	bne.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bbc8:	d102      	bne.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800bbca:	4b81      	ldr	r3, [pc, #516]	@ (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bbcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbce:	e002      	b.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbd4:	e1ed      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbd6:	e1ec      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800bbd8:	4b7a      	ldr	r3, [pc, #488]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bbda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbde:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bbe2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d103      	bne.n	800bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bbea:	f7fb fab9 	bl	8007160 <HAL_RCC_GetPCLK3Freq>
 800bbee:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bbf0:	e1df      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800bbf2:	4b74      	ldr	r3, [pc, #464]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbfe:	d10b      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800bc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc06:	d107      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc08:	f107 0314 	add.w	r3, r7, #20
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fd fbb1 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc16:	e045      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800bc18:	4b6a      	ldr	r3, [pc, #424]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc24:	d10b      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800bc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc2c:	d107      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc2e:	f107 0308 	add.w	r3, r7, #8
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fd fd08 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3c:	e032      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800bc3e:	4b61      	ldr	r3, [pc, #388]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0302 	and.w	r3, r3, #2
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	d10d      	bne.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc50:	d109      	bne.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc52:	4b5c      	ldr	r3, [pc, #368]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	08db      	lsrs	r3, r3, #3
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	4a5a      	ldr	r2, [pc, #360]	@ (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bc5e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc62:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc64:	e01e      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800bc66:	4b57      	ldr	r3, [pc, #348]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc72:	d106      	bne.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800bc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc7a:	d102      	bne.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800bc7c:	4b53      	ldr	r3, [pc, #332]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bc7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc80:	e010      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800bc82:	4b50      	ldr	r3, [pc, #320]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc8e:	d106      	bne.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc92:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bc96:	d102      	bne.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800bc98:	4b4d      	ldr	r3, [pc, #308]	@ (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bc9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc9c:	e002      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bca2:	e186      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bca4:	e185      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bca6:	4b47      	ldr	r3, [pc, #284]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcac:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800bcb0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d103      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bcb8:	f7fb fa3c 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 800bcbc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bcbe:	e178      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800bcc0:	4b40      	ldr	r3, [pc, #256]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bccc:	d10b      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcd4:	d107      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd6:	f107 0314 	add.w	r3, r7, #20
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fd fb4a 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bce4:	e045      	b.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800bce6:	4b37      	ldr	r3, [pc, #220]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcf2:	d10b      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcfa:	d107      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcfc:	f107 0308 	add.w	r3, r7, #8
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd fca1 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd0a:	e032      	b.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800bd0c:	4b2d      	ldr	r3, [pc, #180]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d10d      	bne.n	800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bd1e:	d109      	bne.n	800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd20:	4b28      	ldr	r3, [pc, #160]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	08db      	lsrs	r3, r3, #3
 800bd26:	f003 0303 	and.w	r3, r3, #3
 800bd2a:	4a27      	ldr	r2, [pc, #156]	@ (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd30:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd32:	e01e      	b.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800bd34:	4b23      	ldr	r3, [pc, #140]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd40:	d106      	bne.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd48:	d102      	bne.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800bd4a:	4b20      	ldr	r3, [pc, #128]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bd4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd4e:	e010      	b.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800bd50:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd5c:	d106      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800bd64:	d102      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800bd66:	4b1a      	ldr	r3, [pc, #104]	@ (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd6a:	e002      	b.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd70:	e11f      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd72:	e11e      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bd74:	4b13      	ldr	r3, [pc, #76]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bd76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd7a:	f003 0303 	and.w	r3, r3, #3
 800bd7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d85f      	bhi.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800bd86:	a201      	add	r2, pc, #4	@ (adr r2, 800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800bd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bda5 	.word	0x0800bda5
 800bd94:	0800bdb5 	.word	0x0800bdb5
 800bd98:	0800bdd5 	.word	0x0800bdd5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800bd9c:	f7fb f998 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 800bda0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bda2:	e053      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bda4:	f107 0320 	add.w	r3, r7, #32
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fd f979 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bdb2:	e04b      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb4:	f107 0314 	add.w	r3, r7, #20
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fd fadb 	bl	8009374 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bdc2:	e043      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800bdc4:	44020c00 	.word	0x44020c00
 800bdc8:	03d09000 	.word	0x03d09000
 800bdcc:	003d0900 	.word	0x003d0900
 800bdd0:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdd4:	4b79      	ldr	r3, [pc, #484]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bdd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bdda:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bdde:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bde0:	4b76      	ldr	r3, [pc, #472]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d10c      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bdf2:	4b72      	ldr	r3, [pc, #456]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	08db      	lsrs	r3, r3, #3
 800bdf8:	f003 0303 	and.w	r3, r3, #3
 800bdfc:	4a70      	ldr	r2, [pc, #448]	@ (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800bdfe:	fa22 f303 	lsr.w	r3, r2, r3
 800be02:	637b      	str	r3, [r7, #52]	@ 0x34
 800be04:	e01e      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be06:	4b6d      	ldr	r3, [pc, #436]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be12:	d106      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800be14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be1a:	d102      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800be1c:	4b69      	ldr	r3, [pc, #420]	@ (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be20:	e010      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be22:	4b66      	ldr	r3, [pc, #408]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be2e:	d106      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800be30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be36:	d102      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800be38:	4b63      	ldr	r3, [pc, #396]	@ (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800be3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800be3c:	e002      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800be42:	e003      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800be44:	e002      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be4a:	bf00      	nop
          }
        }
        break;
 800be4c:	e0b1      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800be4e:	4b5b      	ldr	r3, [pc, #364]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800be58:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800be5a:	4b58      	ldr	r3, [pc, #352]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be60:	f003 0302 	and.w	r3, r3, #2
 800be64:	2b02      	cmp	r3, #2
 800be66:	d106      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800be68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d103      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800be6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be72:	637b      	str	r3, [r7, #52]	@ 0x34
 800be74:	e01f      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800be76:	4b51      	ldr	r3, [pc, #324]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be84:	d106      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	2b40      	cmp	r3, #64	@ 0x40
 800be8a:	d103      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800be8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be90:	637b      	str	r3, [r7, #52]	@ 0x34
 800be92:	e010      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800be94:	4b49      	ldr	r3, [pc, #292]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bea0:	d106      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	2b80      	cmp	r3, #128	@ 0x80
 800bea6:	d103      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800bea8:	f248 0312 	movw	r3, #32786	@ 0x8012
 800beac:	637b      	str	r3, [r7, #52]	@ 0x34
 800beae:	e002      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800beb0:	2300      	movs	r3, #0
 800beb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800beb4:	e07d      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800beb6:	e07c      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800beb8:	4b40      	ldr	r3, [pc, #256]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800beba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bebe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bec2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800bec4:	4b3d      	ldr	r3, [pc, #244]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800becc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bed0:	d105      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d102      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800bed8:	4b3c      	ldr	r3, [pc, #240]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800beda:	637b      	str	r3, [r7, #52]	@ 0x34
 800bedc:	e031      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800bede:	4b37      	ldr	r3, [pc, #220]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800beea:	d10a      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800beec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beee:	2b10      	cmp	r3, #16
 800bef0:	d107      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bef2:	f107 0320 	add.w	r3, r7, #32
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd f8d2 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf00:	e01f      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800bf02:	4b2e      	ldr	r3, [pc, #184]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bf04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d106      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf12:	2b20      	cmp	r3, #32
 800bf14:	d103      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800bf16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1c:	e011      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800bf1e:	4b27      	ldr	r3, [pc, #156]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bf20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf2c:	d106      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf30:	2b30      	cmp	r3, #48	@ 0x30
 800bf32:	d103      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800bf34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf3a:	e002      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800bf40:	e037      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf42:	e036      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800bf44:	4b1d      	ldr	r3, [pc, #116]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bf46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bf4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800bf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf52:	2b10      	cmp	r3, #16
 800bf54:	d107      	bne.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf56:	f107 0320 	add.w	r3, r7, #32
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fd f8a0 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf62:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bf64:	e025      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800bf66:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf72:	d10a      	bne.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800bf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf76:	2b20      	cmp	r3, #32
 800bf78:	d107      	bne.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf7a:	f107 0308 	add.w	r3, r7, #8
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fd fb62 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf88:	e00f      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf96:	d105      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	2b30      	cmp	r3, #48	@ 0x30
 800bf9c:	d102      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800bf9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800bfa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa2:	e002      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800bfa8:	e003      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bfaa:	e002      	b.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfb0:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800bfb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	373c      	adds	r7, #60	@ 0x3c
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd90      	pop	{r4, r7, pc}
 800bfbc:	44020c00 	.word	0x44020c00
 800bfc0:	03d09000 	.word	0x03d09000
 800bfc4:	003d0900 	.word	0x003d0900
 800bfc8:	017d7840 	.word	0x017d7840
 800bfcc:	02dc6c00 	.word	0x02dc6c00

0800bfd0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800bfd8:	4b48      	ldr	r3, [pc, #288]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a47      	ldr	r2, [pc, #284]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800bfde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bfe2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bfe4:	f7f9 f8c0 	bl	8005168 <HAL_GetTick>
 800bfe8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfea:	e008      	b.n	800bffe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bfec:	f7f9 f8bc 	bl	8005168 <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d901      	bls.n	800bffe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e07a      	b.n	800c0f4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bffe:	4b3f      	ldr	r3, [pc, #252]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f0      	bne.n	800bfec <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c00a:	4b3c      	ldr	r3, [pc, #240]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c012:	f023 0303 	bic.w	r3, r3, #3
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6811      	ldr	r1, [r2, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6852      	ldr	r2, [r2, #4]
 800c01e:	0212      	lsls	r2, r2, #8
 800c020:	430a      	orrs	r2, r1
 800c022:	4936      	ldr	r1, [pc, #216]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c024:	4313      	orrs	r3, r2
 800c026:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	3b01      	subs	r3, #1
 800c038:	025b      	lsls	r3, r3, #9
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	3b01      	subs	r3, #1
 800c044:	041b      	lsls	r3, r3, #16
 800c046:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c04a:	431a      	orrs	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	3b01      	subs	r3, #1
 800c052:	061b      	lsls	r3, r3, #24
 800c054:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c058:	4928      	ldr	r1, [pc, #160]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c05a:	4313      	orrs	r3, r2
 800c05c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c05e:	4b27      	ldr	r3, [pc, #156]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c062:	f023 020c 	bic.w	r2, r3, #12
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	4924      	ldr	r1, [pc, #144]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800c070:	4b22      	ldr	r3, [pc, #136]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c074:	f023 0220 	bic.w	r2, r3, #32
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	491f      	ldr	r1, [pc, #124]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c082:	4b1e      	ldr	r3, [pc, #120]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08a:	491c      	ldr	r1, [pc, #112]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c08c:	4313      	orrs	r3, r2
 800c08e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800c090:	4b1a      	ldr	r3, [pc, #104]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c094:	4a19      	ldr	r2, [pc, #100]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c096:	f023 0310 	bic.w	r3, r3, #16
 800c09a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800c09c:	4b17      	ldr	r3, [pc, #92]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c0a4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	6a12      	ldr	r2, [r2, #32]
 800c0ac:	00d2      	lsls	r2, r2, #3
 800c0ae:	4913      	ldr	r1, [pc, #76]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800c0b4:	4b11      	ldr	r3, [pc, #68]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b8:	4a10      	ldr	r2, [pc, #64]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c0ba:	f043 0310 	orr.w	r3, r3, #16
 800c0be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c0c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a0d      	ldr	r2, [pc, #52]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c0c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c0ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0cc:	f7f9 f84c 	bl	8005168 <HAL_GetTick>
 800c0d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0d2:	e008      	b.n	800c0e6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c0d4:	f7f9 f848 	bl	8005168 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d901      	bls.n	800c0e6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e006      	b.n	800c0f4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0e6:	4b05      	ldr	r3, [pc, #20]	@ (800c0fc <RCCEx_PLL2_Config+0x12c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0f0      	beq.n	800c0d4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0

}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	44020c00 	.word	0x44020c00

0800c100 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c108:	4b48      	ldr	r3, [pc, #288]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a47      	ldr	r2, [pc, #284]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c10e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c112:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c114:	f7f9 f828 	bl	8005168 <HAL_GetTick>
 800c118:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c11a:	e008      	b.n	800c12e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c11c:	f7f9 f824 	bl	8005168 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b02      	cmp	r3, #2
 800c128:	d901      	bls.n	800c12e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e07a      	b.n	800c224 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c12e:	4b3f      	ldr	r3, [pc, #252]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1f0      	bne.n	800c11c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c13a:	4b3c      	ldr	r3, [pc, #240]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c13e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c142:	f023 0303 	bic.w	r3, r3, #3
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	6811      	ldr	r1, [r2, #0]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	6852      	ldr	r2, [r2, #4]
 800c14e:	0212      	lsls	r2, r2, #8
 800c150:	430a      	orrs	r2, r1
 800c152:	4936      	ldr	r1, [pc, #216]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c154:	4313      	orrs	r3, r2
 800c156:	630b      	str	r3, [r1, #48]	@ 0x30
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	3b01      	subs	r3, #1
 800c168:	025b      	lsls	r3, r3, #9
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	431a      	orrs	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	3b01      	subs	r3, #1
 800c174:	041b      	lsls	r3, r3, #16
 800c176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c17a:	431a      	orrs	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	695b      	ldr	r3, [r3, #20]
 800c180:	3b01      	subs	r3, #1
 800c182:	061b      	lsls	r3, r3, #24
 800c184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c188:	4928      	ldr	r1, [pc, #160]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c18e:	4b27      	ldr	r3, [pc, #156]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c192:	f023 020c 	bic.w	r2, r3, #12
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	4924      	ldr	r1, [pc, #144]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800c1a0:	4b22      	ldr	r3, [pc, #136]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1a4:	f023 0220 	bic.w	r2, r3, #32
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	491f      	ldr	r1, [pc, #124]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c1b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ba:	491c      	ldr	r1, [pc, #112]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800c1c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1c4:	4a19      	ldr	r2, [pc, #100]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1c6:	f023 0310 	bic.w	r3, r3, #16
 800c1ca:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800c1cc:	4b17      	ldr	r3, [pc, #92]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c1d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6a12      	ldr	r2, [r2, #32]
 800c1dc:	00d2      	lsls	r2, r2, #3
 800c1de:	4913      	ldr	r1, [pc, #76]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800c1e4:	4b11      	ldr	r3, [pc, #68]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e8:	4a10      	ldr	r2, [pc, #64]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1ea:	f043 0310 	orr.w	r3, r3, #16
 800c1ee:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800c1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c1f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c1fc:	f7f8 ffb4 	bl	8005168 <HAL_GetTick>
 800c200:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c202:	e008      	b.n	800c216 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c204:	f7f8 ffb0 	bl	8005168 <HAL_GetTick>
 800c208:	4602      	mov	r2, r0
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d901      	bls.n	800c216 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e006      	b.n	800c224 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c216:	4b05      	ldr	r3, [pc, #20]	@ (800c22c <RCCEx_PLL3_Config+0x12c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0f0      	beq.n	800c204 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	44020c00 	.word	0x44020c00

0800c230 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e162      	b.n	800c508 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a70      	ldr	r2, [pc, #448]	@ (800c408 <HAL_SPI_Init+0x1d8>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d018      	beq.n	800c27e <HAL_SPI_Init+0x4e>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a6e      	ldr	r2, [pc, #440]	@ (800c40c <HAL_SPI_Init+0x1dc>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d013      	beq.n	800c27e <HAL_SPI_Init+0x4e>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a6d      	ldr	r2, [pc, #436]	@ (800c410 <HAL_SPI_Init+0x1e0>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00e      	beq.n	800c27e <HAL_SPI_Init+0x4e>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a6b      	ldr	r2, [pc, #428]	@ (800c414 <HAL_SPI_Init+0x1e4>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d009      	beq.n	800c27e <HAL_SPI_Init+0x4e>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a6a      	ldr	r2, [pc, #424]	@ (800c418 <HAL_SPI_Init+0x1e8>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_SPI_Init+0x4e>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a68      	ldr	r2, [pc, #416]	@ (800c41c <HAL_SPI_Init+0x1ec>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	e000      	b.n	800c280 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c27e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a5f      	ldr	r2, [pc, #380]	@ (800c408 <HAL_SPI_Init+0x1d8>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d018      	beq.n	800c2c2 <HAL_SPI_Init+0x92>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a5d      	ldr	r2, [pc, #372]	@ (800c40c <HAL_SPI_Init+0x1dc>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d013      	beq.n	800c2c2 <HAL_SPI_Init+0x92>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a5c      	ldr	r2, [pc, #368]	@ (800c410 <HAL_SPI_Init+0x1e0>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d00e      	beq.n	800c2c2 <HAL_SPI_Init+0x92>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a5a      	ldr	r2, [pc, #360]	@ (800c414 <HAL_SPI_Init+0x1e4>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d009      	beq.n	800c2c2 <HAL_SPI_Init+0x92>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a59      	ldr	r2, [pc, #356]	@ (800c418 <HAL_SPI_Init+0x1e8>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d004      	beq.n	800c2c2 <HAL_SPI_Init+0x92>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a57      	ldr	r2, [pc, #348]	@ (800c41c <HAL_SPI_Init+0x1ec>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d105      	bne.n	800c2ce <HAL_SPI_Init+0x9e>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	2b0f      	cmp	r3, #15
 800c2c8:	d901      	bls.n	800c2ce <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e11c      	b.n	800c508 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fdac 	bl	800ce2c <SPI_GetPacketSize>
 800c2d4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a4b      	ldr	r2, [pc, #300]	@ (800c408 <HAL_SPI_Init+0x1d8>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d018      	beq.n	800c312 <HAL_SPI_Init+0xe2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a49      	ldr	r2, [pc, #292]	@ (800c40c <HAL_SPI_Init+0x1dc>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d013      	beq.n	800c312 <HAL_SPI_Init+0xe2>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a48      	ldr	r2, [pc, #288]	@ (800c410 <HAL_SPI_Init+0x1e0>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d00e      	beq.n	800c312 <HAL_SPI_Init+0xe2>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a46      	ldr	r2, [pc, #280]	@ (800c414 <HAL_SPI_Init+0x1e4>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d009      	beq.n	800c312 <HAL_SPI_Init+0xe2>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a45      	ldr	r2, [pc, #276]	@ (800c418 <HAL_SPI_Init+0x1e8>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d004      	beq.n	800c312 <HAL_SPI_Init+0xe2>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a43      	ldr	r2, [pc, #268]	@ (800c41c <HAL_SPI_Init+0x1ec>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d102      	bne.n	800c318 <HAL_SPI_Init+0xe8>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b08      	cmp	r3, #8
 800c316:	d820      	bhi.n	800c35a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c31c:	4a40      	ldr	r2, [pc, #256]	@ (800c420 <HAL_SPI_Init+0x1f0>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d018      	beq.n	800c354 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a3f      	ldr	r2, [pc, #252]	@ (800c424 <HAL_SPI_Init+0x1f4>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d013      	beq.n	800c354 <HAL_SPI_Init+0x124>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a3d      	ldr	r2, [pc, #244]	@ (800c428 <HAL_SPI_Init+0x1f8>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00e      	beq.n	800c354 <HAL_SPI_Init+0x124>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a3c      	ldr	r2, [pc, #240]	@ (800c42c <HAL_SPI_Init+0x1fc>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d009      	beq.n	800c354 <HAL_SPI_Init+0x124>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a3a      	ldr	r2, [pc, #232]	@ (800c430 <HAL_SPI_Init+0x200>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d004      	beq.n	800c354 <HAL_SPI_Init+0x124>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a39      	ldr	r2, [pc, #228]	@ (800c434 <HAL_SPI_Init+0x204>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d104      	bne.n	800c35e <HAL_SPI_Init+0x12e>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b10      	cmp	r3, #16
 800c358:	d901      	bls.n	800c35e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e0d4      	b.n	800c508 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c364:	b2db      	uxtb	r3, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7f8 f866 	bl	8004444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2202      	movs	r2, #2
 800c37c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 0201 	bic.w	r2, r2, #1
 800c38e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c39a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3a4:	d119      	bne.n	800c3da <HAL_SPI_Init+0x1aa>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3ae:	d103      	bne.n	800c3b8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10c      	bne.n	800c3da <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c3c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3c8:	d107      	bne.n	800c3da <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c3d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d028      	beq.n	800c438 <HAL_SPI_Init+0x208>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	2b06      	cmp	r3, #6
 800c3ec:	d924      	bls.n	800c438 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	430a      	orrs	r2, r1
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	e020      	b.n	800c448 <HAL_SPI_Init+0x218>
 800c406:	bf00      	nop
 800c408:	40014c00 	.word	0x40014c00
 800c40c:	50014c00 	.word	0x50014c00
 800c410:	44002000 	.word	0x44002000
 800c414:	54002000 	.word	0x54002000
 800c418:	40015000 	.word	0x40015000
 800c41c:	50015000 	.word	0x50015000
 800c420:	40013000 	.word	0x40013000
 800c424:	50013000 	.word	0x50013000
 800c428:	40003800 	.word	0x40003800
 800c42c:	50003800 	.word	0x50003800
 800c430:	40003c00 	.word	0x40003c00
 800c434:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c446:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	69da      	ldr	r2, [r3, #28]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c450:	431a      	orrs	r2, r3
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	431a      	orrs	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c45a:	ea42 0103 	orr.w	r1, r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	430a      	orrs	r2, r1
 800c468:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c472:	431a      	orrs	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c478:	431a      	orrs	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	699b      	ldr	r3, [r3, #24]
 800c47e:	431a      	orrs	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	431a      	orrs	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	431a      	orrs	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	431a      	orrs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	431a      	orrs	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c49c:	431a      	orrs	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4a8:	431a      	orrs	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ae:	431a      	orrs	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b4:	ea42 0103 	orr.w	r1, r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	430a      	orrs	r2, r1
 800c4c2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0201 	bic.w	r2, r2, #1
 800c4d2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00a      	beq.n	800c4f6 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af02      	add	r7, sp, #8
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	4613      	mov	r3, r2
 800c51e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3320      	adds	r3, #32
 800c526:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c528:	f7f8 fe1e 	bl	8005168 <HAL_GetTick>
 800c52c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b01      	cmp	r3, #1
 800c538:	d001      	beq.n	800c53e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c53a:	2302      	movs	r3, #2
 800c53c:	e1f9      	b.n	800c932 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <HAL_SPI_Transmit+0x3a>
 800c544:	88fb      	ldrh	r3, [r7, #6]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e1f1      	b.n	800c932 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c554:	2b01      	cmp	r3, #1
 800c556:	d101      	bne.n	800c55c <HAL_SPI_Transmit+0x4c>
 800c558:	2302      	movs	r3, #2
 800c55a:	e1ea      	b.n	800c932 <HAL_SPI_Transmit+0x422>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2203      	movs	r2, #3
 800c568:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	88fa      	ldrh	r2, [r7, #6]
 800c57e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	88fa      	ldrh	r2, [r7, #6]
 800c586:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c5b4:	d108      	bne.n	800c5c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	e009      	b.n	800c5dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c5da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	0c1b      	lsrs	r3, r3, #16
 800c5e4:	041b      	lsls	r3, r3, #16
 800c5e6:	88f9      	ldrh	r1, [r7, #6]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	6812      	ldr	r2, [r2, #0]
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f042 0201 	orr.w	r2, r2, #1
 800c5fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c608:	d107      	bne.n	800c61a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	2b0f      	cmp	r3, #15
 800c620:	d965      	bls.n	800c6ee <HAL_SPI_Transmit+0x1de>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a94      	ldr	r2, [pc, #592]	@ (800c878 <HAL_SPI_Transmit+0x368>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d059      	beq.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a92      	ldr	r2, [pc, #584]	@ (800c87c <HAL_SPI_Transmit+0x36c>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d054      	beq.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a91      	ldr	r2, [pc, #580]	@ (800c880 <HAL_SPI_Transmit+0x370>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d04f      	beq.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a8f      	ldr	r2, [pc, #572]	@ (800c884 <HAL_SPI_Transmit+0x374>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d04a      	beq.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a8e      	ldr	r2, [pc, #568]	@ (800c888 <HAL_SPI_Transmit+0x378>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d045      	beq.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a8c      	ldr	r2, [pc, #560]	@ (800c88c <HAL_SPI_Transmit+0x37c>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d147      	bne.n	800c6ee <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c65e:	e03f      	b.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d114      	bne.n	800c698 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c67e:	1d1a      	adds	r2, r3, #4
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	3b01      	subs	r3, #1
 800c68e:	b29a      	uxth	r2, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c696:	e023      	b.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c698:	f7f8 fd66 	bl	8005168 <HAL_GetTick>
 800c69c:	4602      	mov	r2, r0
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d803      	bhi.n	800c6b0 <HAL_SPI_Transmit+0x1a0>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ae:	d102      	bne.n	800c6b6 <HAL_SPI_Transmit+0x1a6>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d114      	bne.n	800c6e0 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 faea 	bl	800cc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	e128      	b.n	800c932 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1b9      	bne.n	800c660 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c6ec:	e0fb      	b.n	800c8e6 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	2b07      	cmp	r3, #7
 800c6f4:	f240 80f0 	bls.w	800c8d8 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c6f8:	e05d      	b.n	800c7b6 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	f003 0302 	and.w	r3, r3, #2
 800c704:	2b02      	cmp	r3, #2
 800c706:	d132      	bne.n	800c76e <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c70e:	b29b      	uxth	r3, r3
 800c710:	2b01      	cmp	r3, #1
 800c712:	d918      	bls.n	800c746 <HAL_SPI_Transmit+0x236>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d014      	beq.n	800c746 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c72c:	1d1a      	adds	r2, r3, #4
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c738:	b29b      	uxth	r3, r3
 800c73a:	3b02      	subs	r3, #2
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c744:	e037      	b.n	800c7b6 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c74a:	881a      	ldrh	r2, [r3, #0]
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c754:	1c9a      	adds	r2, r3, #2
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c760:	b29b      	uxth	r3, r3
 800c762:	3b01      	subs	r3, #1
 800c764:	b29a      	uxth	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c76c:	e023      	b.n	800c7b6 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c76e:	f7f8 fcfb 	bl	8005168 <HAL_GetTick>
 800c772:	4602      	mov	r2, r0
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d803      	bhi.n	800c786 <HAL_SPI_Transmit+0x276>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c784:	d102      	bne.n	800c78c <HAL_SPI_Transmit+0x27c>
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d114      	bne.n	800c7b6 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 fa7f 	bl	800cc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c798:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e0bd      	b.n	800c932 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d19b      	bne.n	800c6fa <HAL_SPI_Transmit+0x1ea>
 800c7c2:	e090      	b.n	800c8e6 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	f003 0302 	and.w	r3, r3, #2
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d15e      	bne.n	800c890 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d918      	bls.n	800c810 <HAL_SPI_Transmit+0x300>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7e2:	2b40      	cmp	r3, #64	@ 0x40
 800c7e4:	d914      	bls.n	800c810 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6812      	ldr	r2, [r2, #0]
 800c7f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c802:	b29b      	uxth	r3, r3
 800c804:	3b04      	subs	r3, #4
 800c806:	b29a      	uxth	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c80e:	e063      	b.n	800c8d8 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c816:	b29b      	uxth	r3, r3
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d917      	bls.n	800c84c <HAL_SPI_Transmit+0x33c>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d013      	beq.n	800c84c <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c828:	881a      	ldrh	r2, [r3, #0]
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c832:	1c9a      	adds	r2, r3, #2
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c83e:	b29b      	uxth	r3, r3
 800c840:	3b02      	subs	r3, #2
 800c842:	b29a      	uxth	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c84a:	e045      	b.n	800c8d8 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3320      	adds	r3, #32
 800c856:	7812      	ldrb	r2, [r2, #0]
 800c858:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	3b01      	subs	r3, #1
 800c86e:	b29a      	uxth	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c876:	e02f      	b.n	800c8d8 <HAL_SPI_Transmit+0x3c8>
 800c878:	40013000 	.word	0x40013000
 800c87c:	50013000 	.word	0x50013000
 800c880:	40003800 	.word	0x40003800
 800c884:	50003800 	.word	0x50003800
 800c888:	40003c00 	.word	0x40003c00
 800c88c:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c890:	f7f8 fc6a 	bl	8005168 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d803      	bhi.n	800c8a8 <HAL_SPI_Transmit+0x398>
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a6:	d102      	bne.n	800c8ae <HAL_SPI_Transmit+0x39e>
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d114      	bne.n	800c8d8 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 f9ee 	bl	800cc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e02c      	b.n	800c932 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f47f af6f 	bne.w	800c7c4 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2108      	movs	r1, #8
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 fa6d 	bl	800cdd0 <SPI_WaitOnFlagUntilTimeout>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d007      	beq.n	800c90c <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c902:	f043 0220 	orr.w	r2, r3, #32
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f000 f9bf 	bl	800cc90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800c92c:	2301      	movs	r3, #1
 800c92e:	e000      	b.n	800c932 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800c930:	2300      	movs	r3, #0
  }
}
 800c932:	4618      	mov	r0, r3
 800c934:	3718      	adds	r7, #24
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop

0800c93c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	603b      	str	r3, [r7, #0]
 800c948:	4613      	mov	r3, r2
 800c94a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3330      	adds	r3, #48	@ 0x30
 800c952:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c954:	f7f8 fc08 	bl	8005168 <HAL_GetTick>
 800c958:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b01      	cmp	r3, #1
 800c964:	d001      	beq.n	800c96a <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800c966:	2302      	movs	r3, #2
 800c968:	e181      	b.n	800cc6e <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <HAL_SPI_Receive+0x3a>
 800c970:	88fb      	ldrh	r3, [r7, #6]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d101      	bne.n	800c97a <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e179      	b.n	800cc6e <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c980:	2b01      	cmp	r3, #1
 800c982:	d101      	bne.n	800c988 <HAL_SPI_Receive+0x4c>
 800c984:	2302      	movs	r3, #2
 800c986:	e172      	b.n	800cc6e <HAL_SPI_Receive+0x332>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2204      	movs	r2, #4
 800c994:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	88fa      	ldrh	r2, [r7, #6]
 800c9aa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	88fa      	ldrh	r2, [r7, #6]
 800c9b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c9e0:	d108      	bne.n	800c9f4 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c9f0:	601a      	str	r2, [r3, #0]
 800c9f2:	e009      	b.n	800ca08 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ca06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	0c1b      	lsrs	r3, r3, #16
 800ca10:	041b      	lsls	r3, r3, #16
 800ca12:	88f9      	ldrh	r1, [r7, #6]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	6812      	ldr	r2, [r2, #0]
 800ca18:	430b      	orrs	r3, r1
 800ca1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f042 0201 	orr.w	r2, r2, #1
 800ca2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca34:	d107      	bne.n	800ca46 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	2b0f      	cmp	r3, #15
 800ca4c:	d966      	bls.n	800cb1c <HAL_SPI_Receive+0x1e0>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a89      	ldr	r2, [pc, #548]	@ (800cc78 <HAL_SPI_Receive+0x33c>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d05a      	beq.n	800cb0e <HAL_SPI_Receive+0x1d2>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a87      	ldr	r2, [pc, #540]	@ (800cc7c <HAL_SPI_Receive+0x340>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d055      	beq.n	800cb0e <HAL_SPI_Receive+0x1d2>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a86      	ldr	r2, [pc, #536]	@ (800cc80 <HAL_SPI_Receive+0x344>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d050      	beq.n	800cb0e <HAL_SPI_Receive+0x1d2>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a84      	ldr	r2, [pc, #528]	@ (800cc84 <HAL_SPI_Receive+0x348>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d04b      	beq.n	800cb0e <HAL_SPI_Receive+0x1d2>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a83      	ldr	r2, [pc, #524]	@ (800cc88 <HAL_SPI_Receive+0x34c>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d046      	beq.n	800cb0e <HAL_SPI_Receive+0x1d2>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a81      	ldr	r2, [pc, #516]	@ (800cc8c <HAL_SPI_Receive+0x350>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d148      	bne.n	800cb1c <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca8a:	e040      	b.n	800cb0e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	695a      	ldr	r2, [r3, #20]
 800ca92:	f248 0308 	movw	r3, #32776	@ 0x8008
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d014      	beq.n	800cac6 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caa4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800caa6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caac:	1d1a      	adds	r2, r3, #4
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cac4:	e023      	b.n	800cb0e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cac6:	f7f8 fb4f 	bl	8005168 <HAL_GetTick>
 800caca:	4602      	mov	r2, r0
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d803      	bhi.n	800cade <HAL_SPI_Receive+0x1a2>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cadc:	d102      	bne.n	800cae4 <HAL_SPI_Receive+0x1a8>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d114      	bne.n	800cb0e <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 f8d3 	bl	800cc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800caf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2201      	movs	r2, #1
 800cafe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e0af      	b.n	800cc6e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1b8      	bne.n	800ca8c <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800cb1a:	e095      	b.n	800cc48 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	2b07      	cmp	r3, #7
 800cb22:	f240 808b 	bls.w	800cc3c <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb26:	e03f      	b.n	800cba8 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d114      	bne.n	800cb60 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	8812      	ldrh	r2, [r2, #0]
 800cb3e:	b292      	uxth	r2, r2
 800cb40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb46:	1c9a      	adds	r2, r3, #2
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	3b01      	subs	r3, #1
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cb5e:	e023      	b.n	800cba8 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb60:	f7f8 fb02 	bl	8005168 <HAL_GetTick>
 800cb64:	4602      	mov	r2, r0
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d803      	bhi.n	800cb78 <HAL_SPI_Receive+0x23c>
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb76:	d102      	bne.n	800cb7e <HAL_SPI_Receive+0x242>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d114      	bne.n	800cba8 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f000 f886 	bl	800cc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2201      	movs	r2, #1
 800cb98:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e062      	b.n	800cc6e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1b9      	bne.n	800cb28 <HAL_SPI_Receive+0x1ec>
 800cbb4:	e048      	b.n	800cc48 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	f003 0301 	and.w	r3, r3, #1
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d117      	bne.n	800cbf4 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbd0:	7812      	ldrb	r2, [r2, #0]
 800cbd2:	b2d2      	uxtb	r2, r2
 800cbd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cbf2:	e023      	b.n	800cc3c <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbf4:	f7f8 fab8 	bl	8005168 <HAL_GetTick>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d803      	bhi.n	800cc0c <HAL_SPI_Receive+0x2d0>
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc0a:	d102      	bne.n	800cc12 <HAL_SPI_Receive+0x2d6>
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d114      	bne.n	800cc3c <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f83c 	bl	800cc90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	e018      	b.n	800cc6e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1b6      	bne.n	800cbb6 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 f821 	bl	800cc90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
  }
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	40013000 	.word	0x40013000
 800cc7c:	50013000 	.word	0x50013000
 800cc80:	40003800 	.word	0x40003800
 800cc84:	50003800 	.word	0x50003800
 800cc88:	40003c00 	.word	0x40003c00
 800cc8c:	50003c00 	.word	0x50003c00

0800cc90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0208 	orr.w	r2, r2, #8
 800ccae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699a      	ldr	r2, [r3, #24]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f042 0210 	orr.w	r2, r2, #16
 800ccbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f022 0201 	bic.w	r2, r2, #1
 800ccce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	6812      	ldr	r2, [r2, #0]
 800ccda:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800ccde:	f023 0303 	bic.w	r3, r3, #3
 800cce2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689a      	ldr	r2, [r3, #8]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ccf2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d014      	beq.n	800cd2a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00f      	beq.n	800cd2a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	699a      	ldr	r2, [r3, #24]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f042 0220 	orr.w	r2, r2, #32
 800cd28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d014      	beq.n	800cd60 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00f      	beq.n	800cd60 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd46:	f043 0204 	orr.w	r2, r3, #4
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	699a      	ldr	r2, [r3, #24]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00f      	beq.n	800cd8a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd70:	f043 0201 	orr.w	r2, r3, #1
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	699a      	ldr	r2, [r3, #24]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00f      	beq.n	800cdb4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd9a:	f043 0208 	orr.w	r2, r3, #8
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	699a      	ldr	r2, [r3, #24]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cdb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800cdc4:	bf00      	nop
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	4613      	mov	r3, r2
 800cdde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cde0:	e010      	b.n	800ce04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cde2:	f7f8 f9c1 	bl	8005168 <HAL_GetTick>
 800cde6:	4602      	mov	r2, r0
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	1ad3      	subs	r3, r2, r3
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d803      	bhi.n	800cdfa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d102      	bne.n	800ce00 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e00f      	b.n	800ce24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	695a      	ldr	r2, [r3, #20]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	4013      	ands	r3, r2
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	bf0c      	ite	eq
 800ce14:	2301      	moveq	r3, #1
 800ce16:	2300      	movne	r3, #0
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	79fb      	ldrb	r3, [r7, #7]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d0df      	beq.n	800cde2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce38:	095b      	lsrs	r3, r3, #5
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	3301      	adds	r3, #1
 800ce44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	3307      	adds	r3, #7
 800ce4a:	08db      	lsrs	r3, r3, #3
 800ce4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	fb02 f303 	mul.w	r3, r2, r3
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
	...

0800ce64 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e03e      	b.n	800cef8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d106      	bne.n	800ce94 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f7f7 feca 	bl	8004c28 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	4610      	mov	r0, r2
 800cea0:	f002 fa92 	bl	800f3c8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	461a      	mov	r2, r3
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	f002 fb58 	bl	800f564 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6858      	ldr	r0, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	689a      	ldr	r2, [r3, #8]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	f002 fb9c 	bl	800f5fe <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	6892      	ldr	r2, [r2, #8]
 800cece:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	6892      	ldr	r2, [r2, #8]
 800ceda:	f041 0101 	orr.w	r1, r1, #1
 800cede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800cee2:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <HAL_SRAM_Init+0x9c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a06      	ldr	r2, [pc, #24]	@ (800cf00 <HAL_SRAM_Init+0x9c>)
 800cee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ceec:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	47000400 	.word	0x47000400

0800cf04 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	61bb      	str	r3, [r7, #24]
  uint8_t *pdestbuff = pDstBuffer;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	617b      	str	r3, [r7, #20]
  HAL_SRAM_StateTypeDef state = hsram->State;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cf20:	74fb      	strb	r3, [r7, #19]

  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800cf22:	7cfb      	ldrb	r3, [r7, #19]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d002      	beq.n	800cf2e <HAL_SRAM_Read_8b+0x2a>
 800cf28:	7cfb      	ldrb	r3, [r7, #19]
 800cf2a:	2b04      	cmp	r3, #4
 800cf2c:	d12f      	bne.n	800cf8e <HAL_SRAM_Read_8b+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d101      	bne.n	800cf3c <HAL_SRAM_Read_8b+0x38>
 800cf38:	2302      	movs	r3, #2
 800cf3a:	e029      	b.n	800cf90 <HAL_SRAM_Read_8b+0x8c>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2202      	movs	r2, #2
 800cf48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    HAL_Delay(100);
 800cf4c:	2064      	movs	r0, #100	@ 0x64
 800cf4e:	f7f8 f917 	bl	8005180 <HAL_Delay>
    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	61fb      	str	r3, [r7, #28]
 800cf56:	e00d      	b.n	800cf74 <HAL_SRAM_Read_8b+0x70>
    {
      *pdestbuff = *psramaddress;
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	3301      	adds	r3, #1
 800cf66:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	61fb      	str	r3, [r7, #28]
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1ee      	bne.n	800cf58 <HAL_SRAM_Read_8b+0x54>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	7cfa      	ldrb	r2, [r7, #19]
 800cf7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	e000      	b.n	800cf90 <HAL_SRAM_Read_8b+0x8c>
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3720      	adds	r7, #32
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d12e      	bne.n	800d018 <HAL_SRAM_Write_8b+0x80>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d101      	bne.n	800cfc8 <HAL_SRAM_Write_8b+0x30>
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	e028      	b.n	800d01a <HAL_SRAM_Write_8b+0x82>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    HAL_Delay(100);
 800cfd8:	2064      	movs	r0, #100	@ 0x64
 800cfda:	f7f8 f8d1 	bl	8005180 <HAL_Delay>
    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	61fb      	str	r3, [r7, #28]
 800cfe2:	e00c      	b.n	800cffe <HAL_SRAM_Write_8b+0x66>
    {
      *psramaddress = *psrcbuff;
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	781a      	ldrb	r2, [r3, #0]
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	3301      	adds	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	3301      	adds	r3, #1
 800cff6:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	61fb      	str	r3, [r7, #28]
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1ef      	bne.n	800cfe4 <HAL_SRAM_Write_8b+0x4c>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	e000      	b.n	800d01a <HAL_SRAM_Write_8b+0x82>
    return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3720      	adds	r7, #32
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b082      	sub	sp, #8
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e042      	b.n	800d0ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7f7 fb64 	bl	8004714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2224      	movs	r2, #36	@ 0x24
 800d050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 0201 	bic.w	r2, r2, #1
 800d062:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d002      	beq.n	800d072 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fe2b 	bl	800dcc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fc3a 	bl	800d8ec <UART_SetConfig>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d101      	bne.n	800d082 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e01b      	b.n	800d0ba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d090:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f042 0201 	orr.w	r2, r2, #1
 800d0b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 feaa 	bl	800de0c <UART_CheckIdleState>
 800d0b8:	4603      	mov	r3, r0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b091      	sub	sp, #68	@ 0x44
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0d8:	2b20      	cmp	r3, #32
 800d0da:	f040 8088 	bne.w	800d1ee <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <HAL_UART_Transmit_IT+0x26>
 800d0e4:	88fb      	ldrh	r3, [r7, #6]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e080      	b.n	800d1f0 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f8:	2b80      	cmp	r3, #128	@ 0x80
 800d0fa:	d107      	bne.n	800d10c <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689a      	ldr	r2, [r3, #8]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d10a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	88fa      	ldrh	r2, [r7, #6]
 800d116:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	88fa      	ldrh	r2, [r7, #6]
 800d11e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2221      	movs	r2, #33	@ 0x21
 800d134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d13c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d140:	d12a      	bne.n	800d198 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d14a:	d107      	bne.n	800d15c <HAL_UART_Transmit_IT+0x98>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d103      	bne.n	800d15c <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4a29      	ldr	r2, [pc, #164]	@ (800d1fc <HAL_UART_Transmit_IT+0x138>)
 800d158:	679a      	str	r2, [r3, #120]	@ 0x78
 800d15a:	e002      	b.n	800d162 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	4a28      	ldr	r2, [pc, #160]	@ (800d200 <HAL_UART_Transmit_IT+0x13c>)
 800d160:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	3308      	adds	r3, #8
 800d168:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16c:	e853 3f00 	ldrex	r3, [r3]
 800d170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d174:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	3308      	adds	r3, #8
 800d180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d182:	637a      	str	r2, [r7, #52]	@ 0x34
 800d184:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d186:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d18a:	e841 2300 	strex	r3, r2, [r1]
 800d18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	2b00      	cmp	r3, #0
 800d194:	d1e5      	bne.n	800d162 <HAL_UART_Transmit_IT+0x9e>
 800d196:	e028      	b.n	800d1ea <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1a0:	d107      	bne.n	800d1b2 <HAL_UART_Transmit_IT+0xee>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d103      	bne.n	800d1b2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	4a15      	ldr	r2, [pc, #84]	@ (800d204 <HAL_UART_Transmit_IT+0x140>)
 800d1ae:	679a      	str	r2, [r3, #120]	@ 0x78
 800d1b0:	e002      	b.n	800d1b8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	4a14      	ldr	r2, [pc, #80]	@ (800d208 <HAL_UART_Transmit_IT+0x144>)
 800d1b6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	e853 3f00 	ldrex	r3, [r3]
 800d1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d6:	623b      	str	r3, [r7, #32]
 800d1d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1da:	69f9      	ldr	r1, [r7, #28]
 800d1dc:	6a3a      	ldr	r2, [r7, #32]
 800d1de:	e841 2300 	strex	r3, r2, [r1]
 800d1e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1e6      	bne.n	800d1b8 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e000      	b.n	800d1f0 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800d1ee:	2302      	movs	r3, #2
  }
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3744      	adds	r7, #68	@ 0x44
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	0800e5d3 	.word	0x0800e5d3
 800d200:	0800e4f3 	.word	0x0800e4f3
 800d204:	0800e431 	.word	0x0800e431
 800d208:	0800e379 	.word	0x0800e379

0800d20c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08a      	sub	sp, #40	@ 0x28
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4613      	mov	r3, r2
 800d218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d220:	2b20      	cmp	r3, #32
 800d222:	d14b      	bne.n	800d2bc <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <HAL_UART_Receive_IT+0x24>
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d101      	bne.n	800d234 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	e044      	b.n	800d2be <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d244:	2b40      	cmp	r3, #64	@ 0x40
 800d246:	d107      	bne.n	800d258 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689a      	ldr	r2, [r3, #8]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d256:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a1a      	ldr	r2, [pc, #104]	@ (800d2c8 <HAL_UART_Receive_IT+0xbc>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d024      	beq.n	800d2ac <HAL_UART_Receive_IT+0xa0>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a19      	ldr	r2, [pc, #100]	@ (800d2cc <HAL_UART_Receive_IT+0xc0>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d01f      	beq.n	800d2ac <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d018      	beq.n	800d2ac <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	613b      	str	r3, [r7, #16]
   return(result);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d28e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	461a      	mov	r2, r3
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	623b      	str	r3, [r7, #32]
 800d29a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29c:	69f9      	ldr	r1, [r7, #28]
 800d29e:	6a3a      	ldr	r2, [r7, #32]
 800d2a0:	e841 2300 	strex	r3, r2, [r1]
 800d2a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e6      	bne.n	800d27a <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d2ac:	88fb      	ldrh	r3, [r7, #6]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	68b9      	ldr	r1, [r7, #8]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f000 fec2 	bl	800e03c <UART_Start_Receive_IT>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	e000      	b.n	800d2be <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800d2bc:	2302      	movs	r3, #2
  }
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3728      	adds	r7, #40	@ 0x28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	44002400 	.word	0x44002400
 800d2cc:	54002400 	.word	0x54002400

0800d2d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b0ae      	sub	sp, #184	@ 0xb8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d2fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d2fe:	4013      	ands	r3, r2
 800d300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800d304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d11b      	bne.n	800d344 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d30c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d310:	f003 0320 	and.w	r3, r3, #32
 800d314:	2b00      	cmp	r3, #0
 800d316:	d015      	beq.n	800d344 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d31c:	f003 0320 	and.w	r3, r3, #32
 800d320:	2b00      	cmp	r3, #0
 800d322:	d105      	bne.n	800d330 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d009      	beq.n	800d344 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 82ac 	beq.w	800d892 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	4798      	blx	r3
      }
      return;
 800d342:	e2a6      	b.n	800d892 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 80fd 	beq.w	800d548 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d34e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d352:	4b7a      	ldr	r3, [pc, #488]	@ (800d53c <HAL_UART_IRQHandler+0x26c>)
 800d354:	4013      	ands	r3, r2
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d35a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d35e:	4b78      	ldr	r3, [pc, #480]	@ (800d540 <HAL_UART_IRQHandler+0x270>)
 800d360:	4013      	ands	r3, r2
 800d362:	2b00      	cmp	r3, #0
 800d364:	f000 80f0 	beq.w	800d548 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d011      	beq.n	800d398 <HAL_UART_IRQHandler+0xc8>
 800d374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00b      	beq.n	800d398 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2201      	movs	r2, #1
 800d386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d38e:	f043 0201 	orr.w	r2, r3, #1
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d39c:	f003 0302 	and.w	r3, r3, #2
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d011      	beq.n	800d3c8 <HAL_UART_IRQHandler+0xf8>
 800d3a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3be:	f043 0204 	orr.w	r2, r3, #4
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3cc:	f003 0304 	and.w	r3, r3, #4
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d011      	beq.n	800d3f8 <HAL_UART_IRQHandler+0x128>
 800d3d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2204      	movs	r2, #4
 800d3e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ee:	f043 0202 	orr.w	r2, r3, #2
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3fc:	f003 0308 	and.w	r3, r3, #8
 800d400:	2b00      	cmp	r3, #0
 800d402:	d017      	beq.n	800d434 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d105      	bne.n	800d41c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d410:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d414:	4b49      	ldr	r3, [pc, #292]	@ (800d53c <HAL_UART_IRQHandler+0x26c>)
 800d416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00b      	beq.n	800d434 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2208      	movs	r2, #8
 800d422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d42a:	f043 0208 	orr.w	r2, r3, #8
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d012      	beq.n	800d466 <HAL_UART_IRQHandler+0x196>
 800d440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d444:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00c      	beq.n	800d466 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d45c:	f043 0220 	orr.w	r2, r3, #32
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 8212 	beq.w	800d896 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d476:	f003 0320 	and.w	r3, r3, #32
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d013      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d47e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d482:	f003 0320 	and.w	r3, r3, #32
 800d486:	2b00      	cmp	r3, #0
 800d488:	d105      	bne.n	800d496 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d48e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d492:	2b00      	cmp	r3, #0
 800d494:	d007      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ba:	2b40      	cmp	r3, #64	@ 0x40
 800d4bc:	d005      	beq.n	800d4ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d02e      	beq.n	800d528 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fed8 	bl	800e280 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4da:	2b40      	cmp	r3, #64	@ 0x40
 800d4dc:	d120      	bne.n	800d520 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d017      	beq.n	800d518 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4ee:	4a15      	ldr	r2, [pc, #84]	@ (800d544 <HAL_UART_IRQHandler+0x274>)
 800d4f0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f8 f871 	bl	80055e0 <HAL_DMA_Abort_IT>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d019      	beq.n	800d538 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d512:	4610      	mov	r0, r2
 800d514:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d516:	e00f      	b.n	800d538 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f9d1 	bl	800d8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d51e:	e00b      	b.n	800d538 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f9cd 	bl	800d8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d526:	e007      	b.n	800d538 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 f9c9 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d536:	e1ae      	b.n	800d896 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d538:	bf00      	nop
    return;
 800d53a:	e1ac      	b.n	800d896 <HAL_UART_IRQHandler+0x5c6>
 800d53c:	10000001 	.word	0x10000001
 800d540:	04000120 	.word	0x04000120
 800d544:	0800e34d 	.word	0x0800e34d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	f040 8142 	bne.w	800d7d6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d556:	f003 0310 	and.w	r3, r3, #16
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 813b 	beq.w	800d7d6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d564:	f003 0310 	and.w	r3, r3, #16
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8134 	beq.w	800d7d6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2210      	movs	r2, #16
 800d574:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d580:	2b40      	cmp	r3, #64	@ 0x40
 800d582:	f040 80aa 	bne.w	800d6da <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d590:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800d594:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 8084 	beq.w	800d6a6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d5a4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d27c      	bcs.n	800d6a6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d5b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5be:	2b81      	cmp	r3, #129	@ 0x81
 800d5c0:	d060      	beq.n	800d684 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d5ca:	e853 3f00 	ldrex	r3, [r3]
 800d5ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d5d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d5e8:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d5ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d5f0:	e841 2300 	strex	r3, r2, [r1]
 800d5f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d5f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e2      	bne.n	800d5c2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3308      	adds	r3, #8
 800d602:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d606:	e853 3f00 	ldrex	r3, [r3]
 800d60a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d60c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d60e:	f023 0301 	bic.w	r3, r3, #1
 800d612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3308      	adds	r3, #8
 800d61c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d620:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d622:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d624:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d626:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d628:	e841 2300 	strex	r3, r2, [r1]
 800d62c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d62e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1e3      	bne.n	800d5fc <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2220      	movs	r2, #32
 800d638:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d64a:	e853 3f00 	ldrex	r3, [r3]
 800d64e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d652:	f023 0310 	bic.w	r3, r3, #16
 800d656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d664:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d666:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d66a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e4      	bne.n	800d642 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d67e:	4618      	mov	r0, r3
 800d680:	f7f7 ff32 	bl	80054e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d696:	b29b      	uxth	r3, r3
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 f918 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d6a4:	e0f9      	b.n	800d89a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6ac:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	f040 80f2 	bne.w	800d89a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6be:	2b81      	cmp	r3, #129	@ 0x81
 800d6c0:	f040 80eb 	bne.w	800d89a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f8fe 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
      return;
 800d6d8:	e0df      	b.n	800d89a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 80d1 	beq.w	800d89e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800d6fc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 80cc 	beq.w	800d89e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70e:	e853 3f00 	ldrex	r3, [r3]
 800d712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d71a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d728:	647b      	str	r3, [r7, #68]	@ 0x44
 800d72a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d72e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e4      	bne.n	800d706 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3308      	adds	r3, #8
 800d742:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d746:	e853 3f00 	ldrex	r3, [r3]
 800d74a:	623b      	str	r3, [r7, #32]
   return(result);
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d752:	f023 0301 	bic.w	r3, r3, #1
 800d756:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	3308      	adds	r3, #8
 800d760:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d764:	633a      	str	r2, [r7, #48]	@ 0x30
 800d766:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d76a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d76c:	e841 2300 	strex	r3, r2, [r1]
 800d770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1e1      	bne.n	800d73c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2220      	movs	r2, #32
 800d77c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	60fb      	str	r3, [r7, #12]
   return(result);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f023 0310 	bic.w	r3, r3, #16
 800d7a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d7ae:	61fb      	str	r3, [r7, #28]
 800d7b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	69b9      	ldr	r1, [r7, #24]
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	617b      	str	r3, [r7, #20]
   return(result);
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e4      	bne.n	800d78c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2202      	movs	r2, #2
 800d7c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d7c8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f880 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7d4:	e063      	b.n	800d89e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d7d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d7da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00e      	beq.n	800d800 <HAL_UART_IRQHandler+0x530>
 800d7e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d7f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f001 fcc3 	bl	800f184 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7fe:	e051      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d800:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d014      	beq.n	800d836 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d80c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d814:	2b00      	cmp	r3, #0
 800d816:	d105      	bne.n	800d824 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d81c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d008      	beq.n	800d836 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d03a      	beq.n	800d8a2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	4798      	blx	r3
    }
    return;
 800d834:	e035      	b.n	800d8a2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d83a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d009      	beq.n	800d856 <HAL_UART_IRQHandler+0x586>
 800d842:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 ff34 	bl	800e6bc <UART_EndTransmit_IT>
    return;
 800d854:	e026      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d85a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d009      	beq.n	800d876 <HAL_UART_IRQHandler+0x5a6>
 800d862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d866:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d003      	beq.n	800d876 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f001 fc9c 	bl	800f1ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d874:	e016      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d87a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d010      	beq.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
 800d882:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d886:	2b00      	cmp	r3, #0
 800d888:	da0c      	bge.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f001 fc84 	bl	800f198 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d890:	e008      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d892:	bf00      	nop
 800d894:	e006      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d896:	bf00      	nop
 800d898:	e004      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d89a:	bf00      	nop
 800d89c:	e002      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d89e:	bf00      	nop
 800d8a0:	e000      	b.n	800d8a4 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d8a2:	bf00      	nop
  }
}
 800d8a4:	37b8      	adds	r7, #184	@ 0xb8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop

0800d8ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8f0:	b094      	sub	sp, #80	@ 0x50
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	4b78      	ldr	r3, [pc, #480]	@ (800dae4 <UART_SetConfig+0x1f8>)
 800d902:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d906:	689a      	ldr	r2, [r3, #8]
 800d908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	431a      	orrs	r2, r3
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	431a      	orrs	r2, r3
 800d914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d916:	69db      	ldr	r3, [r3, #28]
 800d918:	4313      	orrs	r3, r2
 800d91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4971      	ldr	r1, [pc, #452]	@ (800dae8 <UART_SetConfig+0x1fc>)
 800d924:	4019      	ands	r1, r3
 800d926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d92c:	430b      	orrs	r3, r1
 800d92e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93c:	68d9      	ldr	r1, [r3, #12]
 800d93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	ea40 0301 	orr.w	r3, r0, r1
 800d946:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	4b64      	ldr	r3, [pc, #400]	@ (800dae4 <UART_SetConfig+0x1f8>)
 800d954:	429a      	cmp	r2, r3
 800d956:	d009      	beq.n	800d96c <UART_SetConfig+0x80>
 800d958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	4b63      	ldr	r3, [pc, #396]	@ (800daec <UART_SetConfig+0x200>)
 800d95e:	429a      	cmp	r2, r3
 800d960:	d004      	beq.n	800d96c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d964:	6a1a      	ldr	r2, [r3, #32]
 800d966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d968:	4313      	orrs	r3, r2
 800d96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d976:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d980:	430b      	orrs	r3, r1
 800d982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d98a:	f023 000f 	bic.w	r0, r3, #15
 800d98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d990:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	ea40 0301 	orr.w	r3, r0, r1
 800d99a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	4b53      	ldr	r3, [pc, #332]	@ (800daf0 <UART_SetConfig+0x204>)
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d102      	bne.n	800d9ac <UART_SetConfig+0xc0>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9aa:	e066      	b.n	800da7a <UART_SetConfig+0x18e>
 800d9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	4b50      	ldr	r3, [pc, #320]	@ (800daf4 <UART_SetConfig+0x208>)
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d102      	bne.n	800d9bc <UART_SetConfig+0xd0>
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9ba:	e05e      	b.n	800da7a <UART_SetConfig+0x18e>
 800d9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	4b4d      	ldr	r3, [pc, #308]	@ (800daf8 <UART_SetConfig+0x20c>)
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d102      	bne.n	800d9cc <UART_SetConfig+0xe0>
 800d9c6:	2304      	movs	r3, #4
 800d9c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9ca:	e056      	b.n	800da7a <UART_SetConfig+0x18e>
 800d9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	4b4a      	ldr	r3, [pc, #296]	@ (800dafc <UART_SetConfig+0x210>)
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d102      	bne.n	800d9dc <UART_SetConfig+0xf0>
 800d9d6:	2308      	movs	r3, #8
 800d9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9da:	e04e      	b.n	800da7a <UART_SetConfig+0x18e>
 800d9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	4b47      	ldr	r3, [pc, #284]	@ (800db00 <UART_SetConfig+0x214>)
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d102      	bne.n	800d9ec <UART_SetConfig+0x100>
 800d9e6:	2310      	movs	r3, #16
 800d9e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9ea:	e046      	b.n	800da7a <UART_SetConfig+0x18e>
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	4b44      	ldr	r3, [pc, #272]	@ (800db04 <UART_SetConfig+0x218>)
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d102      	bne.n	800d9fc <UART_SetConfig+0x110>
 800d9f6:	2320      	movs	r3, #32
 800d9f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9fa:	e03e      	b.n	800da7a <UART_SetConfig+0x18e>
 800d9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	4b41      	ldr	r3, [pc, #260]	@ (800db08 <UART_SetConfig+0x21c>)
 800da02:	429a      	cmp	r2, r3
 800da04:	d102      	bne.n	800da0c <UART_SetConfig+0x120>
 800da06:	2340      	movs	r3, #64	@ 0x40
 800da08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da0a:	e036      	b.n	800da7a <UART_SetConfig+0x18e>
 800da0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	4b3e      	ldr	r3, [pc, #248]	@ (800db0c <UART_SetConfig+0x220>)
 800da12:	429a      	cmp	r2, r3
 800da14:	d102      	bne.n	800da1c <UART_SetConfig+0x130>
 800da16:	2380      	movs	r3, #128	@ 0x80
 800da18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da1a:	e02e      	b.n	800da7a <UART_SetConfig+0x18e>
 800da1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	4b3b      	ldr	r3, [pc, #236]	@ (800db10 <UART_SetConfig+0x224>)
 800da22:	429a      	cmp	r2, r3
 800da24:	d103      	bne.n	800da2e <UART_SetConfig+0x142>
 800da26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da2c:	e025      	b.n	800da7a <UART_SetConfig+0x18e>
 800da2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	4b38      	ldr	r3, [pc, #224]	@ (800db14 <UART_SetConfig+0x228>)
 800da34:	429a      	cmp	r2, r3
 800da36:	d103      	bne.n	800da40 <UART_SetConfig+0x154>
 800da38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da3e:	e01c      	b.n	800da7a <UART_SetConfig+0x18e>
 800da40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	4b34      	ldr	r3, [pc, #208]	@ (800db18 <UART_SetConfig+0x22c>)
 800da46:	429a      	cmp	r2, r3
 800da48:	d103      	bne.n	800da52 <UART_SetConfig+0x166>
 800da4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da50:	e013      	b.n	800da7a <UART_SetConfig+0x18e>
 800da52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	4b31      	ldr	r3, [pc, #196]	@ (800db1c <UART_SetConfig+0x230>)
 800da58:	429a      	cmp	r2, r3
 800da5a:	d103      	bne.n	800da64 <UART_SetConfig+0x178>
 800da5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da62:	e00a      	b.n	800da7a <UART_SetConfig+0x18e>
 800da64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	4b1e      	ldr	r3, [pc, #120]	@ (800dae4 <UART_SetConfig+0x1f8>)
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d103      	bne.n	800da76 <UART_SetConfig+0x18a>
 800da6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da74:	e001      	b.n	800da7a <UART_SetConfig+0x18e>
 800da76:	2300      	movs	r3, #0
 800da78:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	4b19      	ldr	r3, [pc, #100]	@ (800dae4 <UART_SetConfig+0x1f8>)
 800da80:	429a      	cmp	r2, r3
 800da82:	d005      	beq.n	800da90 <UART_SetConfig+0x1a4>
 800da84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	4b18      	ldr	r3, [pc, #96]	@ (800daec <UART_SetConfig+0x200>)
 800da8a:	429a      	cmp	r2, r3
 800da8c:	f040 8094 	bne.w	800dbb8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800da90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da92:	2200      	movs	r2, #0
 800da94:	623b      	str	r3, [r7, #32]
 800da96:	627a      	str	r2, [r7, #36]	@ 0x24
 800da98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800da9c:	f7fb ff3e 	bl	800991c <HAL_RCCEx_GetPeriphCLKFreq>
 800daa0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800daa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80f7 	beq.w	800dc98 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800daaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daae:	4a1c      	ldr	r2, [pc, #112]	@ (800db20 <UART_SetConfig+0x234>)
 800dab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dab4:	461a      	mov	r2, r3
 800dab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dabc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	4613      	mov	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4413      	add	r3, r2
 800dac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800daca:	429a      	cmp	r2, r3
 800dacc:	d305      	bcc.n	800dada <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d924      	bls.n	800db24 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dae0:	e069      	b.n	800dbb6 <UART_SetConfig+0x2ca>
 800dae2:	bf00      	nop
 800dae4:	44002400 	.word	0x44002400
 800dae8:	cfff69f3 	.word	0xcfff69f3
 800daec:	54002400 	.word	0x54002400
 800daf0:	40013800 	.word	0x40013800
 800daf4:	40004400 	.word	0x40004400
 800daf8:	40004800 	.word	0x40004800
 800dafc:	40004c00 	.word	0x40004c00
 800db00:	40005000 	.word	0x40005000
 800db04:	40006400 	.word	0x40006400
 800db08:	40007800 	.word	0x40007800
 800db0c:	40007c00 	.word	0x40007c00
 800db10:	40008000 	.word	0x40008000
 800db14:	40006800 	.word	0x40006800
 800db18:	40006c00 	.word	0x40006c00
 800db1c:	40008400 	.word	0x40008400
 800db20:	08012604 	.word	0x08012604
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db26:	2200      	movs	r2, #0
 800db28:	61bb      	str	r3, [r7, #24]
 800db2a:	61fa      	str	r2, [r7, #28]
 800db2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db30:	4a64      	ldr	r2, [pc, #400]	@ (800dcc4 <UART_SetConfig+0x3d8>)
 800db32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db36:	b29b      	uxth	r3, r3
 800db38:	2200      	movs	r2, #0
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	617a      	str	r2, [r7, #20]
 800db3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800db42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800db46:	f7f3 f88f 	bl	8000c68 <__aeabi_uldivmod>
 800db4a:	4602      	mov	r2, r0
 800db4c:	460b      	mov	r3, r1
 800db4e:	4610      	mov	r0, r2
 800db50:	4619      	mov	r1, r3
 800db52:	f04f 0200 	mov.w	r2, #0
 800db56:	f04f 0300 	mov.w	r3, #0
 800db5a:	020b      	lsls	r3, r1, #8
 800db5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db60:	0202      	lsls	r2, r0, #8
 800db62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db64:	6849      	ldr	r1, [r1, #4]
 800db66:	0849      	lsrs	r1, r1, #1
 800db68:	2000      	movs	r0, #0
 800db6a:	460c      	mov	r4, r1
 800db6c:	4605      	mov	r5, r0
 800db6e:	eb12 0804 	adds.w	r8, r2, r4
 800db72:	eb43 0905 	adc.w	r9, r3, r5
 800db76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	60bb      	str	r3, [r7, #8]
 800db7e:	60fa      	str	r2, [r7, #12]
 800db80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db84:	4640      	mov	r0, r8
 800db86:	4649      	mov	r1, r9
 800db88:	f7f3 f86e 	bl	8000c68 <__aeabi_uldivmod>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4613      	mov	r3, r2
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db9a:	d308      	bcc.n	800dbae <UART_SetConfig+0x2c2>
 800db9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dba2:	d204      	bcs.n	800dbae <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800dba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dbaa:	60da      	str	r2, [r3, #12]
 800dbac:	e003      	b.n	800dbb6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800dbb4:	e070      	b.n	800dc98 <UART_SetConfig+0x3ac>
 800dbb6:	e06f      	b.n	800dc98 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbba:	69db      	ldr	r3, [r3, #28]
 800dbbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dbc0:	d13c      	bne.n	800dc3c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dbc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	607a      	str	r2, [r7, #4]
 800dbca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbce:	f7fb fea5 	bl	800991c <HAL_RCCEx_GetPeriphCLKFreq>
 800dbd2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d05e      	beq.n	800dc98 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbde:	4a39      	ldr	r2, [pc, #228]	@ (800dcc4 <UART_SetConfig+0x3d8>)
 800dbe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbec:	005a      	lsls	r2, r3, #1
 800dbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	085b      	lsrs	r3, r3, #1
 800dbf4:	441a      	add	r2, r3
 800dbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc02:	2b0f      	cmp	r3, #15
 800dc04:	d916      	bls.n	800dc34 <UART_SetConfig+0x348>
 800dc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc0c:	d212      	bcs.n	800dc34 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	f023 030f 	bic.w	r3, r3, #15
 800dc16:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f003 0307 	and.w	r3, r3, #7
 800dc22:	b29a      	uxth	r2, r3
 800dc24:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dc26:	4313      	orrs	r3, r2
 800dc28:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800dc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800dc30:	60da      	str	r2, [r3, #12]
 800dc32:	e031      	b.n	800dc98 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dc3a:	e02d      	b.n	800dc98 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dc3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc3e:	2200      	movs	r2, #0
 800dc40:	469a      	mov	sl, r3
 800dc42:	4693      	mov	fp, r2
 800dc44:	4650      	mov	r0, sl
 800dc46:	4659      	mov	r1, fp
 800dc48:	f7fb fe68 	bl	800991c <HAL_RCCEx_GetPeriphCLKFreq>
 800dc4c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800dc4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d021      	beq.n	800dc98 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc58:	4a1a      	ldr	r2, [pc, #104]	@ (800dcc4 <UART_SetConfig+0x3d8>)
 800dc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc62:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	085b      	lsrs	r3, r3, #1
 800dc6c:	441a      	add	r2, r3
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc7a:	2b0f      	cmp	r3, #15
 800dc7c:	d909      	bls.n	800dc92 <UART_SetConfig+0x3a6>
 800dc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc84:	d205      	bcs.n	800dc92 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60da      	str	r2, [r3, #12]
 800dc90:	e002      	b.n	800dc98 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca2:	2201      	movs	r2, #1
 800dca4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcaa:	2200      	movs	r2, #0
 800dcac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dcae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dcb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3750      	adds	r7, #80	@ 0x50
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcc2:	bf00      	nop
 800dcc4:	08012604 	.word	0x08012604

0800dcc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd4:	f003 0308 	and.w	r3, r3, #8
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00a      	beq.n	800dcf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	430a      	orrs	r2, r1
 800dcf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00a      	beq.n	800dd14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	430a      	orrs	r2, r1
 800dd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd18:	f003 0302 	and.w	r3, r3, #2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00a      	beq.n	800dd36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd3a:	f003 0304 	and.w	r3, r3, #4
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00a      	beq.n	800dd58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	430a      	orrs	r2, r1
 800dd56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd5c:	f003 0310 	and.w	r3, r3, #16
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00a      	beq.n	800dd7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00a      	beq.n	800dd9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	430a      	orrs	r2, r1
 800dd9a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dda0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d01a      	beq.n	800ddde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddc6:	d10a      	bne.n	800ddde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	430a      	orrs	r2, r1
 800dddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00a      	beq.n	800de00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	430a      	orrs	r2, r1
 800ddfe:	605a      	str	r2, [r3, #4]
  }
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b098      	sub	sp, #96	@ 0x60
 800de10:	af02      	add	r7, sp, #8
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de1c:	f7f7 f9a4 	bl	8005168 <HAL_GetTick>
 800de20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f003 0308 	and.w	r3, r3, #8
 800de2c:	2b08      	cmp	r3, #8
 800de2e:	d12f      	bne.n	800de90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de38:	2200      	movs	r2, #0
 800de3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f88e 	bl	800df60 <UART_WaitOnFlagUntilTimeout>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d022      	beq.n	800de90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de52:	e853 3f00 	ldrex	r3, [r3]
 800de56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	461a      	mov	r2, r3
 800de66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de68:	647b      	str	r3, [r7, #68]	@ 0x44
 800de6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de70:	e841 2300 	strex	r3, r2, [r1]
 800de74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1e6      	bne.n	800de4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2220      	movs	r2, #32
 800de80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de8c:	2303      	movs	r3, #3
 800de8e:	e063      	b.n	800df58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 0304 	and.w	r3, r3, #4
 800de9a:	2b04      	cmp	r3, #4
 800de9c:	d149      	bne.n	800df32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dea6:	2200      	movs	r2, #0
 800dea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 f857 	bl	800df60 <UART_WaitOnFlagUntilTimeout>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d03c      	beq.n	800df32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec0:	e853 3f00 	ldrex	r3, [r3]
 800dec4:	623b      	str	r3, [r7, #32]
   return(result);
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800decc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ded8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dedc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e6      	bne.n	800deb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	3308      	adds	r3, #8
 800def0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	e853 3f00 	ldrex	r3, [r3]
 800def8:	60fb      	str	r3, [r7, #12]
   return(result);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f023 0301 	bic.w	r3, r3, #1
 800df00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	3308      	adds	r3, #8
 800df08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df0a:	61fa      	str	r2, [r7, #28]
 800df0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0e:	69b9      	ldr	r1, [r7, #24]
 800df10:	69fa      	ldr	r2, [r7, #28]
 800df12:	e841 2300 	strex	r3, r2, [r1]
 800df16:	617b      	str	r3, [r7, #20]
   return(result);
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1e5      	bne.n	800deea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2220      	movs	r2, #32
 800df22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e012      	b.n	800df58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2220      	movs	r2, #32
 800df36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2220      	movs	r2, #32
 800df3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3758      	adds	r7, #88	@ 0x58
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	4613      	mov	r3, r2
 800df6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df70:	e04f      	b.n	800e012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df78:	d04b      	beq.n	800e012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df7a:	f7f7 f8f5 	bl	8005168 <HAL_GetTick>
 800df7e:	4602      	mov	r2, r0
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	69ba      	ldr	r2, [r7, #24]
 800df86:	429a      	cmp	r2, r3
 800df88:	d302      	bcc.n	800df90 <UART_WaitOnFlagUntilTimeout+0x30>
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800df90:	2303      	movs	r3, #3
 800df92:	e04e      	b.n	800e032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 0304 	and.w	r3, r3, #4
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d037      	beq.n	800e012 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	2b80      	cmp	r3, #128	@ 0x80
 800dfa6:	d034      	beq.n	800e012 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b40      	cmp	r3, #64	@ 0x40
 800dfac:	d031      	beq.n	800e012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	69db      	ldr	r3, [r3, #28]
 800dfb4:	f003 0308 	and.w	r3, r3, #8
 800dfb8:	2b08      	cmp	r3, #8
 800dfba:	d110      	bne.n	800dfde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2208      	movs	r2, #8
 800dfc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f95b 	bl	800e280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2208      	movs	r2, #8
 800dfce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e029      	b.n	800e032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	69db      	ldr	r3, [r3, #28]
 800dfe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfec:	d111      	bne.n	800e012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f000 f941 	bl	800e280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2220      	movs	r2, #32
 800e002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e00e:	2303      	movs	r3, #3
 800e010:	e00f      	b.n	800e032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	69da      	ldr	r2, [r3, #28]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	4013      	ands	r3, r2
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	429a      	cmp	r2, r3
 800e020:	bf0c      	ite	eq
 800e022:	2301      	moveq	r3, #1
 800e024:	2300      	movne	r3, #0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	461a      	mov	r2, r3
 800e02a:	79fb      	ldrb	r3, [r7, #7]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d0a0      	beq.n	800df72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
	...

0800e03c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b0a3      	sub	sp, #140	@ 0x8c
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	4613      	mov	r3, r2
 800e048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	88fa      	ldrh	r2, [r7, #6]
 800e054:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	88fa      	ldrh	r2, [r7, #6]
 800e05c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e06e:	d10e      	bne.n	800e08e <UART_Start_Receive_IT+0x52>
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d105      	bne.n	800e084 <UART_Start_Receive_IT+0x48>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e07e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e082:	e02d      	b.n	800e0e0 <UART_Start_Receive_IT+0xa4>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	22ff      	movs	r2, #255	@ 0xff
 800e088:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e08c:	e028      	b.n	800e0e0 <UART_Start_Receive_IT+0xa4>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10d      	bne.n	800e0b2 <UART_Start_Receive_IT+0x76>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d104      	bne.n	800e0a8 <UART_Start_Receive_IT+0x6c>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	22ff      	movs	r2, #255	@ 0xff
 800e0a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e0a6:	e01b      	b.n	800e0e0 <UART_Start_Receive_IT+0xa4>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	227f      	movs	r2, #127	@ 0x7f
 800e0ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e0b0:	e016      	b.n	800e0e0 <UART_Start_Receive_IT+0xa4>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0ba:	d10d      	bne.n	800e0d8 <UART_Start_Receive_IT+0x9c>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d104      	bne.n	800e0ce <UART_Start_Receive_IT+0x92>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	227f      	movs	r2, #127	@ 0x7f
 800e0c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e0cc:	e008      	b.n	800e0e0 <UART_Start_Receive_IT+0xa4>
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	223f      	movs	r2, #63	@ 0x3f
 800e0d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e0d6:	e003      	b.n	800e0e0 <UART_Start_Receive_IT+0xa4>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2222      	movs	r2, #34	@ 0x22
 800e0ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0fa:	e853 3f00 	ldrex	r3, [r3]
 800e0fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e102:	f043 0301 	orr.w	r3, r3, #1
 800e106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	3308      	adds	r3, #8
 800e110:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e114:	673a      	str	r2, [r7, #112]	@ 0x70
 800e116:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e118:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e11a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e11c:	e841 2300 	strex	r3, r2, [r1]
 800e120:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e3      	bne.n	800e0f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e12c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e130:	d14f      	bne.n	800e1d2 <UART_Start_Receive_IT+0x196>
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e138:	88fa      	ldrh	r2, [r7, #6]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d349      	bcc.n	800e1d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e146:	d107      	bne.n	800e158 <UART_Start_Receive_IT+0x11c>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d103      	bne.n	800e158 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	4a47      	ldr	r2, [pc, #284]	@ (800e270 <UART_Start_Receive_IT+0x234>)
 800e154:	675a      	str	r2, [r3, #116]	@ 0x74
 800e156:	e002      	b.n	800e15e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	4a46      	ldr	r2, [pc, #280]	@ (800e274 <UART_Start_Receive_IT+0x238>)
 800e15c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	691b      	ldr	r3, [r3, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d01a      	beq.n	800e19c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e16e:	e853 3f00 	ldrex	r3, [r3]
 800e172:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e17a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	461a      	mov	r2, r3
 800e184:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e18a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e18e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e190:	e841 2300 	strex	r3, r2, [r1]
 800e194:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1e4      	bne.n	800e166 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1a6:	e853 3f00 	ldrex	r3, [r3]
 800e1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3308      	adds	r3, #8
 800e1ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e1bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e1be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1c4:	e841 2300 	strex	r3, r2, [r1]
 800e1c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1e5      	bne.n	800e19c <UART_Start_Receive_IT+0x160>
 800e1d0:	e046      	b.n	800e260 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1da:	d107      	bne.n	800e1ec <UART_Start_Receive_IT+0x1b0>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	4a24      	ldr	r2, [pc, #144]	@ (800e278 <UART_Start_Receive_IT+0x23c>)
 800e1e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800e1ea:	e002      	b.n	800e1f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4a23      	ldr	r2, [pc, #140]	@ (800e27c <UART_Start_Receive_IT+0x240>)
 800e1f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d019      	beq.n	800e22e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	e853 3f00 	ldrex	r3, [r3]
 800e206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e20e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	461a      	mov	r2, r3
 800e216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e218:	637b      	str	r3, [r7, #52]	@ 0x34
 800e21a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e21e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e220:	e841 2300 	strex	r3, r2, [r1]
 800e224:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1e6      	bne.n	800e1fa <UART_Start_Receive_IT+0x1be>
 800e22c:	e018      	b.n	800e260 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	e853 3f00 	ldrex	r3, [r3]
 800e23a:	613b      	str	r3, [r7, #16]
   return(result);
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	f043 0320 	orr.w	r3, r3, #32
 800e242:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	461a      	mov	r2, r3
 800e24a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e24c:	623b      	str	r3, [r7, #32]
 800e24e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e250:	69f9      	ldr	r1, [r7, #28]
 800e252:	6a3a      	ldr	r2, [r7, #32]
 800e254:	e841 2300 	strex	r3, r2, [r1]
 800e258:	61bb      	str	r3, [r7, #24]
   return(result);
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1e6      	bne.n	800e22e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	378c      	adds	r7, #140	@ 0x8c
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	0800ee0d 	.word	0x0800ee0d
 800e274:	0800ea9d 	.word	0x0800ea9d
 800e278:	0800e8d9 	.word	0x0800e8d9
 800e27c:	0800e715 	.word	0x0800e715

0800e280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e280:	b480      	push	{r7}
 800e282:	b095      	sub	sp, #84	@ 0x54
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e29c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e2ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2ae:	e841 2300 	strex	r3, r2, [r1]
 800e2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1e6      	bne.n	800e288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	3308      	adds	r3, #8
 800e2c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	e853 3f00 	ldrex	r3, [r3]
 800e2c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2d0:	f023 0301 	bic.w	r3, r3, #1
 800e2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2e6:	e841 2300 	strex	r3, r2, [r1]
 800e2ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1e3      	bne.n	800e2ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d118      	bne.n	800e32c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	e853 3f00 	ldrex	r3, [r3]
 800e306:	60bb      	str	r3, [r7, #8]
   return(result);
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f023 0310 	bic.w	r3, r3, #16
 800e30e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	461a      	mov	r2, r3
 800e316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e318:	61bb      	str	r3, [r7, #24]
 800e31a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31c:	6979      	ldr	r1, [r7, #20]
 800e31e:	69ba      	ldr	r2, [r7, #24]
 800e320:	e841 2300 	strex	r3, r2, [r1]
 800e324:	613b      	str	r3, [r7, #16]
   return(result);
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1e6      	bne.n	800e2fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2220      	movs	r2, #32
 800e330:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e340:	bf00      	nop
 800e342:	3754      	adds	r7, #84	@ 0x54
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f7ff faa8 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e370:	bf00      	nop
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e378:	b480      	push	{r7}
 800e37a:	b08f      	sub	sp, #60	@ 0x3c
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e386:	2b21      	cmp	r3, #33	@ 0x21
 800e388:	d14c      	bne.n	800e424 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e390:	b29b      	uxth	r3, r3
 800e392:	2b00      	cmp	r3, #0
 800e394:	d132      	bne.n	800e3fc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39c:	6a3b      	ldr	r3, [r7, #32]
 800e39e:	e853 3f00 	ldrex	r3, [r3]
 800e3a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3bc:	e841 2300 	strex	r3, r2, [r1]
 800e3c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1e6      	bne.n	800e396 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	e853 3f00 	ldrex	r3, [r3]
 800e3d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e6:	61bb      	str	r3, [r7, #24]
 800e3e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ea:	6979      	ldr	r1, [r7, #20]
 800e3ec:	69ba      	ldr	r2, [r7, #24]
 800e3ee:	e841 2300 	strex	r3, r2, [r1]
 800e3f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1e6      	bne.n	800e3c8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e3fa:	e013      	b.n	800e424 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e400:	781a      	ldrb	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e40c:	1c5a      	adds	r2, r3, #1
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3b01      	subs	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e424:	bf00      	nop
 800e426:	373c      	adds	r7, #60	@ 0x3c
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e430:	b480      	push	{r7}
 800e432:	b091      	sub	sp, #68	@ 0x44
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e43e:	2b21      	cmp	r3, #33	@ 0x21
 800e440:	d151      	bne.n	800e4e6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e448:	b29b      	uxth	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d132      	bne.n	800e4b4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	623b      	str	r3, [r7, #32]
   return(result);
 800e45c:	6a3b      	ldr	r3, [r7, #32]
 800e45e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e462:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e46e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e6      	bne.n	800e44e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	e853 3f00 	ldrex	r3, [r3]
 800e48c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e494:	637b      	str	r3, [r7, #52]	@ 0x34
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e49e:	61fb      	str	r3, [r7, #28]
 800e4a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a2:	69b9      	ldr	r1, [r7, #24]
 800e4a4:	69fa      	ldr	r2, [r7, #28]
 800e4a6:	e841 2300 	strex	r3, r2, [r1]
 800e4aa:	617b      	str	r3, [r7, #20]
   return(result);
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1e6      	bne.n	800e480 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e4b2:	e018      	b.n	800e4e6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4c8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4ce:	1c9a      	adds	r2, r3, #2
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e4e6:	bf00      	nop
 800e4e8:	3744      	adds	r7, #68	@ 0x44
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	b091      	sub	sp, #68	@ 0x44
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e500:	2b21      	cmp	r3, #33	@ 0x21
 800e502:	d160      	bne.n	800e5c6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e50a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e50c:	e057      	b.n	800e5be <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e514:	b29b      	uxth	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d133      	bne.n	800e582 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	3308      	adds	r3, #8
 800e520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e524:	e853 3f00 	ldrex	r3, [r3]
 800e528:	623b      	str	r3, [r7, #32]
   return(result);
 800e52a:	6a3b      	ldr	r3, [r7, #32]
 800e52c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e530:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3308      	adds	r3, #8
 800e538:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e53a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e542:	e841 2300 	strex	r3, r2, [r1]
 800e546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1e5      	bne.n	800e51a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	e853 3f00 	ldrex	r3, [r3]
 800e55a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e562:	637b      	str	r3, [r7, #52]	@ 0x34
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	461a      	mov	r2, r3
 800e56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e56c:	61fb      	str	r3, [r7, #28]
 800e56e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e570:	69b9      	ldr	r1, [r7, #24]
 800e572:	69fa      	ldr	r2, [r7, #28]
 800e574:	e841 2300 	strex	r3, r2, [r1]
 800e578:	617b      	str	r3, [r7, #20]
   return(result);
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1e6      	bne.n	800e54e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e580:	e021      	b.n	800e5c6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	69db      	ldr	r3, [r3, #28]
 800e588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d013      	beq.n	800e5b8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e594:	781a      	ldrb	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5a0:	1c5a      	adds	r2, r3, #1
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e5b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e5be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1a4      	bne.n	800e50e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e5c4:	e7ff      	b.n	800e5c6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e5c6:	bf00      	nop
 800e5c8:	3744      	adds	r7, #68	@ 0x44
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e5d2:	b480      	push	{r7}
 800e5d4:	b091      	sub	sp, #68	@ 0x44
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5e0:	2b21      	cmp	r3, #33	@ 0x21
 800e5e2:	d165      	bne.n	800e6b0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e5ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e5ec:	e05c      	b.n	800e6a8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d133      	bne.n	800e662 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	3308      	adds	r3, #8
 800e600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	e853 3f00 	ldrex	r3, [r3]
 800e608:	61fb      	str	r3, [r7, #28]
   return(result);
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e610:	637b      	str	r3, [r7, #52]	@ 0x34
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3308      	adds	r3, #8
 800e618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e61a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e61c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e622:	e841 2300 	strex	r3, r2, [r1]
 800e626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1e5      	bne.n	800e5fa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	e853 3f00 	ldrex	r3, [r3]
 800e63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e642:	633b      	str	r3, [r7, #48]	@ 0x30
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	461a      	mov	r2, r3
 800e64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64c:	61bb      	str	r3, [r7, #24]
 800e64e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e650:	6979      	ldr	r1, [r7, #20]
 800e652:	69ba      	ldr	r2, [r7, #24]
 800e654:	e841 2300 	strex	r3, r2, [r1]
 800e658:	613b      	str	r3, [r7, #16]
   return(result);
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1e6      	bne.n	800e62e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e660:	e026      	b.n	800e6b0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	69db      	ldr	r3, [r3, #28]
 800e668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d018      	beq.n	800e6a2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e674:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e684:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e68a:	1c9a      	adds	r2, r3, #2
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e696:	b29b      	uxth	r3, r3
 800e698:	3b01      	subs	r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e6a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e6a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d19f      	bne.n	800e5ee <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e6ae:	e7ff      	b.n	800e6b0 <UART_TxISR_16BIT_FIFOEN+0xde>
 800e6b0:	bf00      	nop
 800e6b2:	3744      	adds	r7, #68	@ 0x44
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b088      	sub	sp, #32
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	e853 3f00 	ldrex	r3, [r3]
 800e6d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6d8:	61fb      	str	r3, [r7, #28]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	61bb      	str	r3, [r7, #24]
 800e6e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e6:	6979      	ldr	r1, [r7, #20]
 800e6e8:	69ba      	ldr	r2, [r7, #24]
 800e6ea:	e841 2300 	strex	r3, r2, [r1]
 800e6ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1e6      	bne.n	800e6c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2220      	movs	r2, #32
 800e6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7ff f8d1 	bl	800d8ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e70a:	bf00      	nop
 800e70c:	3720      	adds	r7, #32
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
	...

0800e714 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b09c      	sub	sp, #112	@ 0x70
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e722:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e72c:	2b22      	cmp	r3, #34	@ 0x22
 800e72e:	f040 80c3 	bne.w	800e8b8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e738:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e73c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e740:	b2d9      	uxtb	r1, r3
 800e742:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e746:	b2da      	uxtb	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e74c:	400a      	ands	r2, r1
 800e74e:	b2d2      	uxtb	r2, r2
 800e750:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e756:	1c5a      	adds	r2, r3, #1
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e762:	b29b      	uxth	r3, r3
 800e764:	3b01      	subs	r3, #1
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e774:	b29b      	uxth	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	f040 80a6 	bne.w	800e8c8 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e784:	e853 3f00 	ldrex	r3, [r3]
 800e788:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e78a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e78c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e790:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e79a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e79c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e7a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e7a2:	e841 2300 	strex	r3, r2, [r1]
 800e7a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1e6      	bne.n	800e77c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b8:	e853 3f00 	ldrex	r3, [r3]
 800e7bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7c0:	f023 0301 	bic.w	r3, r3, #1
 800e7c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7ce:	647a      	str	r2, [r7, #68]	@ 0x44
 800e7d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7d6:	e841 2300 	strex	r3, r2, [r1]
 800e7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1e5      	bne.n	800e7ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2220      	movs	r2, #32
 800e7e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a35      	ldr	r2, [pc, #212]	@ (800e8d0 <UART_RxISR_8BIT+0x1bc>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d024      	beq.n	800e84a <UART_RxISR_8BIT+0x136>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a33      	ldr	r2, [pc, #204]	@ (800e8d4 <UART_RxISR_8BIT+0x1c0>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d01f      	beq.n	800e84a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d018      	beq.n	800e84a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e820:	e853 3f00 	ldrex	r3, [r3]
 800e824:	623b      	str	r3, [r7, #32]
   return(result);
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e82c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	461a      	mov	r2, r3
 800e834:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e836:	633b      	str	r3, [r7, #48]	@ 0x30
 800e838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e83c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e83e:	e841 2300 	strex	r3, r2, [r1]
 800e842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1e6      	bne.n	800e818 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d12e      	bne.n	800e8b0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	60fb      	str	r3, [r7, #12]
   return(result);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f023 0310 	bic.w	r3, r3, #16
 800e86c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e876:	61fb      	str	r3, [r7, #28]
 800e878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87a:	69b9      	ldr	r1, [r7, #24]
 800e87c:	69fa      	ldr	r2, [r7, #28]
 800e87e:	e841 2300 	strex	r3, r2, [r1]
 800e882:	617b      	str	r3, [r7, #20]
   return(result);
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e6      	bne.n	800e858 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	69db      	ldr	r3, [r3, #28]
 800e890:	f003 0310 	and.w	r3, r3, #16
 800e894:	2b10      	cmp	r3, #16
 800e896:	d103      	bne.n	800e8a0 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2210      	movs	r2, #16
 800e89e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff f813 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8ae:	e00b      	b.n	800e8c8 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7f5 fb89 	bl	8003fc8 <HAL_UART_RxCpltCallback>
}
 800e8b6:	e007      	b.n	800e8c8 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	699a      	ldr	r2, [r3, #24]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f042 0208 	orr.w	r2, r2, #8
 800e8c6:	619a      	str	r2, [r3, #24]
}
 800e8c8:	bf00      	nop
 800e8ca:	3770      	adds	r7, #112	@ 0x70
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	44002400 	.word	0x44002400
 800e8d4:	54002400 	.word	0x54002400

0800e8d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b09c      	sub	sp, #112	@ 0x70
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e8e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8f0:	2b22      	cmp	r3, #34	@ 0x22
 800e8f2:	f040 80c3 	bne.w	800ea7c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e904:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e906:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e90a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e90e:	4013      	ands	r3, r2
 800e910:	b29a      	uxth	r2, r3
 800e912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e914:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e91a:	1c9a      	adds	r2, r3, #2
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e926:	b29b      	uxth	r3, r3
 800e928:	3b01      	subs	r3, #1
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e938:	b29b      	uxth	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f040 80a6 	bne.w	800ea8c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e948:	e853 3f00 	ldrex	r3, [r3]
 800e94c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e94e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e954:	667b      	str	r3, [r7, #100]	@ 0x64
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e95e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e960:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e962:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e964:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e966:	e841 2300 	strex	r3, r2, [r1]
 800e96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e96c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1e6      	bne.n	800e940 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3308      	adds	r3, #8
 800e978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e984:	f023 0301 	bic.w	r3, r3, #1
 800e988:	663b      	str	r3, [r7, #96]	@ 0x60
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3308      	adds	r3, #8
 800e990:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e992:	643a      	str	r2, [r7, #64]	@ 0x40
 800e994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e99a:	e841 2300 	strex	r3, r2, [r1]
 800e99e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e5      	bne.n	800e972 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2220      	movs	r2, #32
 800e9aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a35      	ldr	r2, [pc, #212]	@ (800ea94 <UART_RxISR_16BIT+0x1bc>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d024      	beq.n	800ea0e <UART_RxISR_16BIT+0x136>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a33      	ldr	r2, [pc, #204]	@ (800ea98 <UART_RxISR_16BIT+0x1c0>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d01f      	beq.n	800ea0e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d018      	beq.n	800ea0e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e2:	6a3b      	ldr	r3, [r7, #32]
 800e9e4:	e853 3f00 	ldrex	r3, [r3]
 800e9e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e9f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea02:	e841 2300 	strex	r3, r2, [r1]
 800ea06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1e6      	bne.n	800e9dc <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d12e      	bne.n	800ea74 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	e853 3f00 	ldrex	r3, [r3]
 800ea28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	f023 0310 	bic.w	r3, r3, #16
 800ea30:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea3a:	61bb      	str	r3, [r7, #24]
 800ea3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6979      	ldr	r1, [r7, #20]
 800ea40:	69ba      	ldr	r2, [r7, #24]
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	613b      	str	r3, [r7, #16]
   return(result);
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e6      	bne.n	800ea1c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	69db      	ldr	r3, [r3, #28]
 800ea54:	f003 0310 	and.w	r3, r3, #16
 800ea58:	2b10      	cmp	r3, #16
 800ea5a:	d103      	bne.n	800ea64 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2210      	movs	r2, #16
 800ea62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7fe ff31 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea72:	e00b      	b.n	800ea8c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7f5 faa7 	bl	8003fc8 <HAL_UART_RxCpltCallback>
}
 800ea7a:	e007      	b.n	800ea8c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	699a      	ldr	r2, [r3, #24]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f042 0208 	orr.w	r2, r2, #8
 800ea8a:	619a      	str	r2, [r3, #24]
}
 800ea8c:	bf00      	nop
 800ea8e:	3770      	adds	r7, #112	@ 0x70
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	44002400 	.word	0x44002400
 800ea98:	54002400 	.word	0x54002400

0800ea9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b0ac      	sub	sp, #176	@ 0xb0
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eaaa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	69db      	ldr	r3, [r3, #28]
 800eab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ead2:	2b22      	cmp	r3, #34	@ 0x22
 800ead4:	f040 8188 	bne.w	800ede8 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eade:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eae2:	e12b      	b.n	800ed3c <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eaee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800eaf2:	b2d9      	uxtb	r1, r3
 800eaf4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800eaf8:	b2da      	uxtb	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eafe:	400a      	ands	r2, r1
 800eb00:	b2d2      	uxtb	r2, r2
 800eb02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb08:	1c5a      	adds	r2, r3, #1
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	3b01      	subs	r3, #1
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	69db      	ldr	r3, [r3, #28]
 800eb26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eb2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb2e:	f003 0307 	and.w	r3, r3, #7
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d053      	beq.n	800ebde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb3a:	f003 0301 	and.w	r3, r3, #1
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d011      	beq.n	800eb66 <UART_RxISR_8BIT_FIFOEN+0xca>
 800eb42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00b      	beq.n	800eb66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2201      	movs	r2, #1
 800eb54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb5c:	f043 0201 	orr.w	r2, r3, #1
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb6a:	f003 0302 	and.w	r3, r3, #2
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d011      	beq.n	800eb96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800eb72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00b      	beq.n	800eb96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2202      	movs	r2, #2
 800eb84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb8c:	f043 0204 	orr.w	r2, r3, #4
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb9a:	f003 0304 	and.w	r3, r3, #4
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d011      	beq.n	800ebc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800eba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00b      	beq.n	800ebc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2204      	movs	r2, #4
 800ebb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebbc:	f043 0202 	orr.w	r2, r3, #2
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d006      	beq.n	800ebde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7fe fe75 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f040 80a8 	bne.w	800ed3c <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ebf4:	e853 3f00 	ldrex	r3, [r3]
 800ebf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ebfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec10:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ec14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ec1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e4      	bne.n	800ebec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3308      	adds	r3, #8
 800ec28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec2c:	e853 3f00 	ldrex	r3, [r3]
 800ec30:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ec32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec38:	f023 0301 	bic.w	r3, r3, #1
 800ec3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3308      	adds	r3, #8
 800ec46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ec4a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ec4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ec50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ec52:	e841 2300 	strex	r3, r2, [r1]
 800ec56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ec58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1e1      	bne.n	800ec22 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2220      	movs	r2, #32
 800ec62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a62      	ldr	r2, [pc, #392]	@ (800ee00 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d026      	beq.n	800ecca <UART_RxISR_8BIT_FIFOEN+0x22e>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a60      	ldr	r2, [pc, #384]	@ (800ee04 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d021      	beq.n	800ecca <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d01a      	beq.n	800ecca <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec9c:	e853 3f00 	ldrex	r3, [r3]
 800eca0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ecb6:	657b      	str	r3, [r7, #84]	@ 0x54
 800ecb8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ecbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ecbe:	e841 2300 	strex	r3, r2, [r1]
 800ecc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ecc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1e4      	bne.n	800ec94 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d130      	bne.n	800ed34 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ece0:	e853 3f00 	ldrex	r3, [r3]
 800ece4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ece6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece8:	f023 0310 	bic.w	r3, r3, #16
 800ecec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ecfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed02:	e841 2300 	strex	r3, r2, [r1]
 800ed06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e4      	bne.n	800ecd8 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	69db      	ldr	r3, [r3, #28]
 800ed14:	f003 0310 	and.w	r3, r3, #16
 800ed18:	2b10      	cmp	r3, #16
 800ed1a:	d103      	bne.n	800ed24 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2210      	movs	r2, #16
 800ed22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7fe fdd1 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ed32:	e00e      	b.n	800ed52 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7f5 f947 	bl	8003fc8 <HAL_UART_RxCpltCallback>
        break;
 800ed3a:	e00a      	b.n	800ed52 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed3c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d006      	beq.n	800ed52 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800ed44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed48:	f003 0320 	and.w	r3, r3, #32
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f47f aec9 	bne.w	800eae4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ed5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d049      	beq.n	800edf8 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ed6a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d242      	bcs.n	800edf8 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	3308      	adds	r3, #8
 800ed78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	e853 3f00 	ldrex	r3, [r3]
 800ed80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	3308      	adds	r3, #8
 800ed92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ed96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed9e:	e841 2300 	strex	r3, r2, [r1]
 800eda2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d1e3      	bne.n	800ed72 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a16      	ldr	r2, [pc, #88]	@ (800ee08 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800edae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	e853 3f00 	ldrex	r3, [r3]
 800edbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	f043 0320 	orr.w	r3, r3, #32
 800edc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	461a      	mov	r2, r3
 800edce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800edd2:	61bb      	str	r3, [r7, #24]
 800edd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd6:	6979      	ldr	r1, [r7, #20]
 800edd8:	69ba      	ldr	r2, [r7, #24]
 800edda:	e841 2300 	strex	r3, r2, [r1]
 800edde:	613b      	str	r3, [r7, #16]
   return(result);
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1e4      	bne.n	800edb0 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ede6:	e007      	b.n	800edf8 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	699a      	ldr	r2, [r3, #24]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f042 0208 	orr.w	r2, r2, #8
 800edf6:	619a      	str	r2, [r3, #24]
}
 800edf8:	bf00      	nop
 800edfa:	37b0      	adds	r7, #176	@ 0xb0
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	44002400 	.word	0x44002400
 800ee04:	54002400 	.word	0x54002400
 800ee08:	0800e715 	.word	0x0800e715

0800ee0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b0ae      	sub	sp, #184	@ 0xb8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	69db      	ldr	r3, [r3, #28]
 800ee24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee42:	2b22      	cmp	r3, #34	@ 0x22
 800ee44:	f040 818c 	bne.w	800f160 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ee4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee52:	e12f      	b.n	800f0b4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ee66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ee6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ee6e:	4013      	ands	r3, r2
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee7c:	1c9a      	adds	r2, r3, #2
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	69db      	ldr	r3, [r3, #28]
 800ee9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ee9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d053      	beq.n	800ef52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eeaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eeae:	f003 0301 	and.w	r3, r3, #1
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d011      	beq.n	800eeda <UART_RxISR_16BIT_FIFOEN+0xce>
 800eeb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eeba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00b      	beq.n	800eeda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2201      	movs	r2, #1
 800eec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eed0:	f043 0201 	orr.w	r2, r3, #1
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eeda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eede:	f003 0302 	and.w	r3, r3, #2
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d011      	beq.n	800ef0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800eee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eeea:	f003 0301 	and.w	r3, r3, #1
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00b      	beq.n	800ef0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2202      	movs	r2, #2
 800eef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef00:	f043 0204 	orr.w	r2, r3, #4
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef0e:	f003 0304 	and.w	r3, r3, #4
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d011      	beq.n	800ef3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ef16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ef1a:	f003 0301 	and.w	r3, r3, #1
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00b      	beq.n	800ef3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2204      	movs	r2, #4
 800ef28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef30:	f043 0202 	orr.w	r2, r3, #2
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d006      	beq.n	800ef52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7fe fcbb 	bl	800d8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f040 80aa 	bne.w	800f0b4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef68:	e853 3f00 	ldrex	r3, [r3]
 800ef6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef86:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef8e:	e841 2300 	strex	r3, r2, [r1]
 800ef92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1e2      	bne.n	800ef60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	3308      	adds	r3, #8
 800efa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efa4:	e853 3f00 	ldrex	r3, [r3]
 800efa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800efaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800efb0:	f023 0301 	bic.w	r3, r3, #1
 800efb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	3308      	adds	r3, #8
 800efbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800efc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800efc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efca:	e841 2300 	strex	r3, r2, [r1]
 800efce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800efd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1e1      	bne.n	800ef9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2220      	movs	r2, #32
 800efda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a62      	ldr	r2, [pc, #392]	@ (800f178 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d026      	beq.n	800f042 <UART_RxISR_16BIT_FIFOEN+0x236>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a60      	ldr	r2, [pc, #384]	@ (800f17c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d021      	beq.n	800f042 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d01a      	beq.n	800f042 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f014:	e853 3f00 	ldrex	r3, [r3]
 800f018:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f01c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	461a      	mov	r2, r3
 800f02a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f02e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f030:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f036:	e841 2300 	strex	r3, r2, [r1]
 800f03a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1e4      	bne.n	800f00c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f046:	2b01      	cmp	r3, #1
 800f048:	d130      	bne.n	800f0ac <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f058:	e853 3f00 	ldrex	r3, [r3]
 800f05c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f060:	f023 0310 	bic.w	r3, r3, #16
 800f064:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	461a      	mov	r2, r3
 800f06e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f072:	647b      	str	r3, [r7, #68]	@ 0x44
 800f074:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f076:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f07a:	e841 2300 	strex	r3, r2, [r1]
 800f07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e4      	bne.n	800f050 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	f003 0310 	and.w	r3, r3, #16
 800f090:	2b10      	cmp	r3, #16
 800f092:	d103      	bne.n	800f09c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2210      	movs	r2, #16
 800f09a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f7fe fc15 	bl	800d8d4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f0aa:	e00e      	b.n	800f0ca <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7f4 ff8b 	bl	8003fc8 <HAL_UART_RxCpltCallback>
        break;
 800f0b2:	e00a      	b.n	800f0ca <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f0b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d006      	beq.n	800f0ca <UART_RxISR_16BIT_FIFOEN+0x2be>
 800f0bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f0c0:	f003 0320 	and.w	r3, r3, #32
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f47f aec5 	bne.w	800ee54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f0d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d049      	beq.n	800f170 <UART_RxISR_16BIT_FIFOEN+0x364>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f0e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d242      	bcs.n	800f170 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	3308      	adds	r3, #8
 800f0f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	e853 3f00 	ldrex	r3, [r3]
 800f0f8:	623b      	str	r3, [r7, #32]
   return(result);
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	3308      	adds	r3, #8
 800f10a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f10e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f116:	e841 2300 	strex	r3, r2, [r1]
 800f11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1e3      	bne.n	800f0ea <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a16      	ldr	r2, [pc, #88]	@ (800f180 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800f126:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	e853 3f00 	ldrex	r3, [r3]
 800f134:	60fb      	str	r3, [r7, #12]
   return(result);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f043 0320 	orr.w	r3, r3, #32
 800f13c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	461a      	mov	r2, r3
 800f146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f14a:	61fb      	str	r3, [r7, #28]
 800f14c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14e:	69b9      	ldr	r1, [r7, #24]
 800f150:	69fa      	ldr	r2, [r7, #28]
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	617b      	str	r3, [r7, #20]
   return(result);
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e4      	bne.n	800f128 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f15e:	e007      	b.n	800f170 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	699a      	ldr	r2, [r3, #24]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f042 0208 	orr.w	r2, r2, #8
 800f16e:	619a      	str	r2, [r3, #24]
}
 800f170:	bf00      	nop
 800f172:	37b8      	adds	r7, #184	@ 0xb8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	44002400 	.word	0x44002400
 800f17c:	54002400 	.word	0x54002400
 800f180:	0800e8d9 	.word	0x0800e8d9

0800f184 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d101      	bne.n	800f1d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f1d2:	2302      	movs	r3, #2
 800f1d4:	e027      	b.n	800f226 <HAL_UARTEx_DisableFifoMode+0x66>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2224      	movs	r2, #36	@ 0x24
 800f1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f022 0201 	bic.w	r2, r2, #1
 800f1fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f204:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2220      	movs	r2, #32
 800f218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr

0800f232 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b084      	sub	sp, #16
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f242:	2b01      	cmp	r3, #1
 800f244:	d101      	bne.n	800f24a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f246:	2302      	movs	r3, #2
 800f248:	e02d      	b.n	800f2a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2201      	movs	r2, #1
 800f24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2224      	movs	r2, #36	@ 0x24
 800f256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f022 0201 	bic.w	r2, r2, #1
 800f270:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	430a      	orrs	r2, r1
 800f284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f850 	bl	800f32c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2220      	movs	r2, #32
 800f298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b084      	sub	sp, #16
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d101      	bne.n	800f2c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	e02d      	b.n	800f322 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2224      	movs	r2, #36	@ 0x24
 800f2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f022 0201 	bic.w	r2, r2, #1
 800f2ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	683a      	ldr	r2, [r7, #0]
 800f2fe:	430a      	orrs	r2, r1
 800f300:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 f812 	bl	800f32c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2220      	movs	r2, #32
 800f314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d108      	bne.n	800f34e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f34c:	e031      	b.n	800f3b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f34e:	2308      	movs	r3, #8
 800f350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f352:	2308      	movs	r3, #8
 800f354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	0e5b      	lsrs	r3, r3, #25
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	f003 0307 	and.w	r3, r3, #7
 800f364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	0f5b      	lsrs	r3, r3, #29
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	f003 0307 	and.w	r3, r3, #7
 800f374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	7b3a      	ldrb	r2, [r7, #12]
 800f37a:	4911      	ldr	r1, [pc, #68]	@ (800f3c0 <UARTEx_SetNbDataToProcess+0x94>)
 800f37c:	5c8a      	ldrb	r2, [r1, r2]
 800f37e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f382:	7b3a      	ldrb	r2, [r7, #12]
 800f384:	490f      	ldr	r1, [pc, #60]	@ (800f3c4 <UARTEx_SetNbDataToProcess+0x98>)
 800f386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f388:	fb93 f3f2 	sdiv	r3, r3, r2
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f394:	7bfb      	ldrb	r3, [r7, #15]
 800f396:	7b7a      	ldrb	r2, [r7, #13]
 800f398:	4909      	ldr	r1, [pc, #36]	@ (800f3c0 <UARTEx_SetNbDataToProcess+0x94>)
 800f39a:	5c8a      	ldrb	r2, [r1, r2]
 800f39c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f3a0:	7b7a      	ldrb	r2, [r7, #13]
 800f3a2:	4908      	ldr	r1, [pc, #32]	@ (800f3c4 <UARTEx_SetNbDataToProcess+0x98>)
 800f3a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f3b2:	bf00      	nop
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	0801261c 	.word	0x0801261c
 800f3c4:	08012624 	.word	0x08012624

0800f3c8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	6812      	ldr	r2, [r2, #0]
 800f3e0:	f023 0101 	bic.w	r1, r3, #1
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	2b08      	cmp	r3, #8
 800f3f0:	d102      	bne.n	800f3f8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f3f2:	2340      	movs	r3, #64	@ 0x40
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	e001      	b.n	800f3fc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f408:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f40e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f414:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f41a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f420:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f426:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f42c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800f432:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800f438:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800f43e:	4313      	orrs	r3, r2
 800f440:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	4313      	orrs	r3, r2
 800f44a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	4313      	orrs	r3, r2
 800f454:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f45a:	693a      	ldr	r2, [r7, #16]
 800f45c:	4313      	orrs	r3, r2
 800f45e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f464:	693a      	ldr	r2, [r7, #16]
 800f466:	4313      	orrs	r3, r2
 800f468:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f46a:	4b3d      	ldr	r3, [pc, #244]	@ (800f560 <FMC_NORSRAM_Init+0x198>)
 800f46c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f474:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f47c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800f484:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800f48c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	43db      	mvns	r3, r3
 800f49c:	ea02 0103 	and.w	r1, r2, r3
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	4319      	orrs	r1, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4b6:	d10c      	bne.n	800f4d2 <FMC_NORSRAM_Init+0x10a>
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d008      	beq.n	800f4d2 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d006      	beq.n	800f4e8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4e2:	431a      	orrs	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d12f      	bne.n	800f552 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a1b      	ldr	r3, [r3, #32]
 800f4f6:	0c1b      	lsrs	r3, r3, #16
 800f4f8:	041b      	lsls	r3, r3, #16
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f4fe:	431a      	orrs	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b04      	cmp	r3, #4
 800f50a:	d014      	beq.n	800f536 <FMC_NORSRAM_Init+0x16e>
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d819      	bhi.n	800f544 <FMC_NORSRAM_Init+0x17c>
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <FMC_NORSRAM_Init+0x152>
 800f514:	2b02      	cmp	r3, #2
 800f516:	d007      	beq.n	800f528 <FMC_NORSRAM_Init+0x160>
 800f518:	e014      	b.n	800f544 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a1b      	ldr	r3, [r3, #32]
 800f51e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	621a      	str	r2, [r3, #32]
        break;
 800f526:	e014      	b.n	800f552 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a1b      	ldr	r3, [r3, #32]
 800f52c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	621a      	str	r2, [r3, #32]
        break;
 800f534:	e00d      	b.n	800f552 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6a1b      	ldr	r3, [r3, #32]
 800f53a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	621a      	str	r2, [r3, #32]
        break;
 800f542:	e006      	b.n	800f552 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a1b      	ldr	r3, [r3, #32]
 800f548:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	621a      	str	r2, [r3, #32]
        break;
 800f550:	bf00      	nop
    }
  }

  return HAL_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	371c      	adds	r7, #28
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	0008fb7f 	.word	0x0008fb7f

0800f564 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f57a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f582:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f58a:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f592:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	695b      	ldr	r3, [r3, #20]
 800f598:	3b01      	subs	r3, #1
 800f59a:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f59c:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	3b02      	subs	r3, #2
 800f5a4:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f5a6:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f5b2:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f5c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5c6:	d113      	bne.n	800f5f0 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f5d0:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	695b      	ldr	r3, [r3, #20]
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	051b      	lsls	r3, r3, #20
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	371c      	adds	r7, #28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr

0800f5fe <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b085      	sub	sp, #20
 800f602:	af00      	add	r7, sp, #0
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	60b9      	str	r1, [r7, #8]
 800f608:	607a      	str	r2, [r7, #4]
 800f60a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f612:	d121      	bne.n	800f658 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f61c:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	6819      	ldr	r1, [r3, #0]
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	011b      	lsls	r3, r3, #4
 800f62a:	4319      	orrs	r1, r3
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	021b      	lsls	r3, r3, #8
 800f632:	4319      	orrs	r1, r3
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	079b      	lsls	r3, r3, #30
 800f63a:	4319      	orrs	r1, r3
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	69db      	ldr	r3, [r3, #28]
 800f640:	4319      	orrs	r1, r3
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	041b      	lsls	r3, r3, #16
 800f648:	430b      	orrs	r3, r1
 800f64a:	ea42 0103 	orr.w	r1, r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f656:	e005      	b.n	800f664 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3714      	adds	r7, #20
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
	...

0800f674 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	4b10      	ldr	r3, [pc, #64]	@ (800f6c4 <FMC_NAND_Init+0x50>)
 800f684:	4013      	ands	r3, r2
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	6851      	ldr	r1, [r2, #4]
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	6892      	ldr	r2, [r2, #8]
 800f68e:	4311      	orrs	r1, r2
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	68d2      	ldr	r2, [r2, #12]
 800f694:	4311      	orrs	r1, r2
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	6912      	ldr	r2, [r2, #16]
 800f69a:	4311      	orrs	r1, r2
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	6952      	ldr	r2, [r2, #20]
 800f6a0:	0252      	lsls	r2, r2, #9
 800f6a2:	4311      	orrs	r1, r2
 800f6a4:	683a      	ldr	r2, [r7, #0]
 800f6a6:	6992      	ldr	r2, [r2, #24]
 800f6a8:	0352      	lsls	r2, r2, #13
 800f6aa:	430a      	orrs	r2, r1
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	f043 0208 	orr.w	r2, r3, #8
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr
 800f6c4:	fff00181 	.word	0xfff00181

0800f6c8 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800f6de:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f6e6:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f6ee:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3714      	adds	r7, #20
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr

0800f702 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f702:	b480      	push	{r7}
 800f704:	b085      	sub	sp, #20
 800f706:	af00      	add	r7, sp, #0
 800f708:	60f8      	str	r0, [r7, #12]
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800f718:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f720:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f728:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3714      	adds	r7, #20
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <__cvt>:
 800f73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f740:	ec57 6b10 	vmov	r6, r7, d0
 800f744:	2f00      	cmp	r7, #0
 800f746:	460c      	mov	r4, r1
 800f748:	4619      	mov	r1, r3
 800f74a:	463b      	mov	r3, r7
 800f74c:	bfb4      	ite	lt
 800f74e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f752:	2300      	movge	r3, #0
 800f754:	4691      	mov	r9, r2
 800f756:	bfbf      	itttt	lt
 800f758:	4632      	movlt	r2, r6
 800f75a:	461f      	movlt	r7, r3
 800f75c:	232d      	movlt	r3, #45	@ 0x2d
 800f75e:	4616      	movlt	r6, r2
 800f760:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f764:	700b      	strb	r3, [r1, #0]
 800f766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f768:	f023 0820 	bic.w	r8, r3, #32
 800f76c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f770:	d005      	beq.n	800f77e <__cvt+0x42>
 800f772:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f776:	d100      	bne.n	800f77a <__cvt+0x3e>
 800f778:	3401      	adds	r4, #1
 800f77a:	2102      	movs	r1, #2
 800f77c:	e000      	b.n	800f780 <__cvt+0x44>
 800f77e:	2103      	movs	r1, #3
 800f780:	ab03      	add	r3, sp, #12
 800f782:	4622      	mov	r2, r4
 800f784:	9301      	str	r3, [sp, #4]
 800f786:	ab02      	add	r3, sp, #8
 800f788:	ec47 6b10 	vmov	d0, r6, r7
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	4653      	mov	r3, sl
 800f790:	f000 fe7e 	bl	8010490 <_dtoa_r>
 800f794:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f798:	4605      	mov	r5, r0
 800f79a:	d119      	bne.n	800f7d0 <__cvt+0x94>
 800f79c:	f019 0f01 	tst.w	r9, #1
 800f7a0:	d00e      	beq.n	800f7c0 <__cvt+0x84>
 800f7a2:	eb00 0904 	add.w	r9, r0, r4
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	4639      	mov	r1, r7
 800f7ae:	f7f1 f99b 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7b2:	b108      	cbz	r0, 800f7b8 <__cvt+0x7c>
 800f7b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7b8:	2230      	movs	r2, #48	@ 0x30
 800f7ba:	9b03      	ldr	r3, [sp, #12]
 800f7bc:	454b      	cmp	r3, r9
 800f7be:	d31e      	bcc.n	800f7fe <__cvt+0xc2>
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7c6:	1b5b      	subs	r3, r3, r5
 800f7c8:	6013      	str	r3, [r2, #0]
 800f7ca:	b004      	add	sp, #16
 800f7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7d4:	eb00 0904 	add.w	r9, r0, r4
 800f7d8:	d1e5      	bne.n	800f7a6 <__cvt+0x6a>
 800f7da:	7803      	ldrb	r3, [r0, #0]
 800f7dc:	2b30      	cmp	r3, #48	@ 0x30
 800f7de:	d10a      	bne.n	800f7f6 <__cvt+0xba>
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	4639      	mov	r1, r7
 800f7e8:	f7f1 f97e 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7ec:	b918      	cbnz	r0, 800f7f6 <__cvt+0xba>
 800f7ee:	f1c4 0401 	rsb	r4, r4, #1
 800f7f2:	f8ca 4000 	str.w	r4, [sl]
 800f7f6:	f8da 3000 	ldr.w	r3, [sl]
 800f7fa:	4499      	add	r9, r3
 800f7fc:	e7d3      	b.n	800f7a6 <__cvt+0x6a>
 800f7fe:	1c59      	adds	r1, r3, #1
 800f800:	9103      	str	r1, [sp, #12]
 800f802:	701a      	strb	r2, [r3, #0]
 800f804:	e7d9      	b.n	800f7ba <__cvt+0x7e>

0800f806 <__exponent>:
 800f806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f808:	2900      	cmp	r1, #0
 800f80a:	7002      	strb	r2, [r0, #0]
 800f80c:	bfba      	itte	lt
 800f80e:	4249      	neglt	r1, r1
 800f810:	232d      	movlt	r3, #45	@ 0x2d
 800f812:	232b      	movge	r3, #43	@ 0x2b
 800f814:	2909      	cmp	r1, #9
 800f816:	7043      	strb	r3, [r0, #1]
 800f818:	dd28      	ble.n	800f86c <__exponent+0x66>
 800f81a:	f10d 0307 	add.w	r3, sp, #7
 800f81e:	270a      	movs	r7, #10
 800f820:	461d      	mov	r5, r3
 800f822:	461a      	mov	r2, r3
 800f824:	3b01      	subs	r3, #1
 800f826:	fbb1 f6f7 	udiv	r6, r1, r7
 800f82a:	fb07 1416 	mls	r4, r7, r6, r1
 800f82e:	3430      	adds	r4, #48	@ 0x30
 800f830:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f834:	460c      	mov	r4, r1
 800f836:	4631      	mov	r1, r6
 800f838:	2c63      	cmp	r4, #99	@ 0x63
 800f83a:	dcf2      	bgt.n	800f822 <__exponent+0x1c>
 800f83c:	3130      	adds	r1, #48	@ 0x30
 800f83e:	1e94      	subs	r4, r2, #2
 800f840:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f844:	1c41      	adds	r1, r0, #1
 800f846:	4623      	mov	r3, r4
 800f848:	42ab      	cmp	r3, r5
 800f84a:	d30a      	bcc.n	800f862 <__exponent+0x5c>
 800f84c:	f10d 0309 	add.w	r3, sp, #9
 800f850:	1a9b      	subs	r3, r3, r2
 800f852:	42ac      	cmp	r4, r5
 800f854:	bf88      	it	hi
 800f856:	2300      	movhi	r3, #0
 800f858:	3302      	adds	r3, #2
 800f85a:	4403      	add	r3, r0
 800f85c:	1a18      	subs	r0, r3, r0
 800f85e:	b003      	add	sp, #12
 800f860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f862:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f866:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f86a:	e7ed      	b.n	800f848 <__exponent+0x42>
 800f86c:	2330      	movs	r3, #48	@ 0x30
 800f86e:	3130      	adds	r1, #48	@ 0x30
 800f870:	7083      	strb	r3, [r0, #2]
 800f872:	1d03      	adds	r3, r0, #4
 800f874:	70c1      	strb	r1, [r0, #3]
 800f876:	e7f1      	b.n	800f85c <__exponent+0x56>

0800f878 <_printf_float>:
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	b08d      	sub	sp, #52	@ 0x34
 800f87e:	460c      	mov	r4, r1
 800f880:	4616      	mov	r6, r2
 800f882:	461f      	mov	r7, r3
 800f884:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f888:	4605      	mov	r5, r0
 800f88a:	f000 fcdf 	bl	801024c <_localeconv_r>
 800f88e:	6803      	ldr	r3, [r0, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	9304      	str	r3, [sp, #16]
 800f894:	f7f0 fcfc 	bl	8000290 <strlen>
 800f898:	2300      	movs	r3, #0
 800f89a:	9005      	str	r0, [sp, #20]
 800f89c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f89e:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a2:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f8a6:	3307      	adds	r3, #7
 800f8a8:	f8d4 b000 	ldr.w	fp, [r4]
 800f8ac:	f023 0307 	bic.w	r3, r3, #7
 800f8b0:	f103 0208 	add.w	r2, r3, #8
 800f8b4:	f8c8 2000 	str.w	r2, [r8]
 800f8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f8c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f8c8:	9307      	str	r3, [sp, #28]
 800f8ca:	4b9d      	ldr	r3, [pc, #628]	@ (800fb40 <_printf_float+0x2c8>)
 800f8cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f8d4:	f7f1 f93a 	bl	8000b4c <__aeabi_dcmpun>
 800f8d8:	bb70      	cbnz	r0, 800f938 <_printf_float+0xc0>
 800f8da:	f04f 32ff 	mov.w	r2, #4294967295
 800f8de:	4b98      	ldr	r3, [pc, #608]	@ (800fb40 <_printf_float+0x2c8>)
 800f8e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8e4:	f7f1 f914 	bl	8000b10 <__aeabi_dcmple>
 800f8e8:	bb30      	cbnz	r0, 800f938 <_printf_float+0xc0>
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4640      	mov	r0, r8
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	f7f1 f903 	bl	8000afc <__aeabi_dcmplt>
 800f8f6:	b110      	cbz	r0, 800f8fe <_printf_float+0x86>
 800f8f8:	232d      	movs	r3, #45	@ 0x2d
 800f8fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8fe:	4a91      	ldr	r2, [pc, #580]	@ (800fb44 <_printf_float+0x2cc>)
 800f900:	4b91      	ldr	r3, [pc, #580]	@ (800fb48 <_printf_float+0x2d0>)
 800f902:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f906:	bf94      	ite	ls
 800f908:	4690      	movls	r8, r2
 800f90a:	4698      	movhi	r8, r3
 800f90c:	2303      	movs	r3, #3
 800f90e:	f04f 0900 	mov.w	r9, #0
 800f912:	6123      	str	r3, [r4, #16]
 800f914:	f02b 0304 	bic.w	r3, fp, #4
 800f918:	6023      	str	r3, [r4, #0]
 800f91a:	4633      	mov	r3, r6
 800f91c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f91e:	4621      	mov	r1, r4
 800f920:	4628      	mov	r0, r5
 800f922:	9700      	str	r7, [sp, #0]
 800f924:	f000 f9d2 	bl	800fccc <_printf_common>
 800f928:	3001      	adds	r0, #1
 800f92a:	f040 808d 	bne.w	800fa48 <_printf_float+0x1d0>
 800f92e:	f04f 30ff 	mov.w	r0, #4294967295
 800f932:	b00d      	add	sp, #52	@ 0x34
 800f934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f938:	4642      	mov	r2, r8
 800f93a:	464b      	mov	r3, r9
 800f93c:	4640      	mov	r0, r8
 800f93e:	4649      	mov	r1, r9
 800f940:	f7f1 f904 	bl	8000b4c <__aeabi_dcmpun>
 800f944:	b140      	cbz	r0, 800f958 <_printf_float+0xe0>
 800f946:	464b      	mov	r3, r9
 800f948:	4a80      	ldr	r2, [pc, #512]	@ (800fb4c <_printf_float+0x2d4>)
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	bfbc      	itt	lt
 800f94e:	232d      	movlt	r3, #45	@ 0x2d
 800f950:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f954:	4b7e      	ldr	r3, [pc, #504]	@ (800fb50 <_printf_float+0x2d8>)
 800f956:	e7d4      	b.n	800f902 <_printf_float+0x8a>
 800f958:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f95c:	6863      	ldr	r3, [r4, #4]
 800f95e:	9206      	str	r2, [sp, #24]
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	d13b      	bne.n	800f9dc <_printf_float+0x164>
 800f964:	2306      	movs	r3, #6
 800f966:	6063      	str	r3, [r4, #4]
 800f968:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f96c:	2300      	movs	r3, #0
 800f96e:	4628      	mov	r0, r5
 800f970:	6022      	str	r2, [r4, #0]
 800f972:	9303      	str	r3, [sp, #12]
 800f974:	ab0a      	add	r3, sp, #40	@ 0x28
 800f976:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f97a:	ab09      	add	r3, sp, #36	@ 0x24
 800f97c:	ec49 8b10 	vmov	d0, r8, r9
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f986:	6861      	ldr	r1, [r4, #4]
 800f988:	f7ff fed8 	bl	800f73c <__cvt>
 800f98c:	9b06      	ldr	r3, [sp, #24]
 800f98e:	4680      	mov	r8, r0
 800f990:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f992:	2b47      	cmp	r3, #71	@ 0x47
 800f994:	d129      	bne.n	800f9ea <_printf_float+0x172>
 800f996:	1cc8      	adds	r0, r1, #3
 800f998:	db02      	blt.n	800f9a0 <_printf_float+0x128>
 800f99a:	6863      	ldr	r3, [r4, #4]
 800f99c:	4299      	cmp	r1, r3
 800f99e:	dd41      	ble.n	800fa24 <_printf_float+0x1ac>
 800f9a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800f9a4:	fa5f fa8a 	uxtb.w	sl, sl
 800f9a8:	3901      	subs	r1, #1
 800f9aa:	4652      	mov	r2, sl
 800f9ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f9b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9b2:	f7ff ff28 	bl	800f806 <__exponent>
 800f9b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9b8:	4681      	mov	r9, r0
 800f9ba:	1813      	adds	r3, r2, r0
 800f9bc:	2a01      	cmp	r2, #1
 800f9be:	6123      	str	r3, [r4, #16]
 800f9c0:	dc02      	bgt.n	800f9c8 <_printf_float+0x150>
 800f9c2:	6822      	ldr	r2, [r4, #0]
 800f9c4:	07d2      	lsls	r2, r2, #31
 800f9c6:	d501      	bpl.n	800f9cc <_printf_float+0x154>
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	6123      	str	r3, [r4, #16]
 800f9cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d0a2      	beq.n	800f91a <_printf_float+0xa2>
 800f9d4:	232d      	movs	r3, #45	@ 0x2d
 800f9d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9da:	e79e      	b.n	800f91a <_printf_float+0xa2>
 800f9dc:	9a06      	ldr	r2, [sp, #24]
 800f9de:	2a47      	cmp	r2, #71	@ 0x47
 800f9e0:	d1c2      	bne.n	800f968 <_printf_float+0xf0>
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1c0      	bne.n	800f968 <_printf_float+0xf0>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e7bd      	b.n	800f966 <_printf_float+0xee>
 800f9ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f9ee:	d9db      	bls.n	800f9a8 <_printf_float+0x130>
 800f9f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f9f4:	d118      	bne.n	800fa28 <_printf_float+0x1b0>
 800f9f6:	2900      	cmp	r1, #0
 800f9f8:	6863      	ldr	r3, [r4, #4]
 800f9fa:	dd0b      	ble.n	800fa14 <_printf_float+0x19c>
 800f9fc:	6121      	str	r1, [r4, #16]
 800f9fe:	b913      	cbnz	r3, 800fa06 <_printf_float+0x18e>
 800fa00:	6822      	ldr	r2, [r4, #0]
 800fa02:	07d0      	lsls	r0, r2, #31
 800fa04:	d502      	bpl.n	800fa0c <_printf_float+0x194>
 800fa06:	3301      	adds	r3, #1
 800fa08:	440b      	add	r3, r1
 800fa0a:	6123      	str	r3, [r4, #16]
 800fa0c:	f04f 0900 	mov.w	r9, #0
 800fa10:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa12:	e7db      	b.n	800f9cc <_printf_float+0x154>
 800fa14:	b913      	cbnz	r3, 800fa1c <_printf_float+0x1a4>
 800fa16:	6822      	ldr	r2, [r4, #0]
 800fa18:	07d2      	lsls	r2, r2, #31
 800fa1a:	d501      	bpl.n	800fa20 <_printf_float+0x1a8>
 800fa1c:	3302      	adds	r3, #2
 800fa1e:	e7f4      	b.n	800fa0a <_printf_float+0x192>
 800fa20:	2301      	movs	r3, #1
 800fa22:	e7f2      	b.n	800fa0a <_printf_float+0x192>
 800fa24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa2a:	4299      	cmp	r1, r3
 800fa2c:	db05      	blt.n	800fa3a <_printf_float+0x1c2>
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	6121      	str	r1, [r4, #16]
 800fa32:	07d8      	lsls	r0, r3, #31
 800fa34:	d5ea      	bpl.n	800fa0c <_printf_float+0x194>
 800fa36:	1c4b      	adds	r3, r1, #1
 800fa38:	e7e7      	b.n	800fa0a <_printf_float+0x192>
 800fa3a:	2900      	cmp	r1, #0
 800fa3c:	bfd4      	ite	le
 800fa3e:	f1c1 0202 	rsble	r2, r1, #2
 800fa42:	2201      	movgt	r2, #1
 800fa44:	4413      	add	r3, r2
 800fa46:	e7e0      	b.n	800fa0a <_printf_float+0x192>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	055a      	lsls	r2, r3, #21
 800fa4c:	d407      	bmi.n	800fa5e <_printf_float+0x1e6>
 800fa4e:	6923      	ldr	r3, [r4, #16]
 800fa50:	4642      	mov	r2, r8
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b8      	blx	r7
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d12b      	bne.n	800fab4 <_printf_float+0x23c>
 800fa5c:	e767      	b.n	800f92e <_printf_float+0xb6>
 800fa5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa62:	f240 80dd 	bls.w	800fc20 <_printf_float+0x3a8>
 800fa66:	2200      	movs	r2, #0
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa6e:	f7f1 f83b 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d033      	beq.n	800fade <_printf_float+0x266>
 800fa76:	2301      	movs	r3, #1
 800fa78:	4a36      	ldr	r2, [pc, #216]	@ (800fb54 <_printf_float+0x2dc>)
 800fa7a:	4631      	mov	r1, r6
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	47b8      	blx	r7
 800fa80:	3001      	adds	r0, #1
 800fa82:	f43f af54 	beq.w	800f92e <_printf_float+0xb6>
 800fa86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fa8a:	4543      	cmp	r3, r8
 800fa8c:	db02      	blt.n	800fa94 <_printf_float+0x21c>
 800fa8e:	6823      	ldr	r3, [r4, #0]
 800fa90:	07d8      	lsls	r0, r3, #31
 800fa92:	d50f      	bpl.n	800fab4 <_printf_float+0x23c>
 800fa94:	4631      	mov	r1, r6
 800fa96:	4628      	mov	r0, r5
 800fa98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa9c:	47b8      	blx	r7
 800fa9e:	3001      	adds	r0, #1
 800faa0:	f43f af45 	beq.w	800f92e <_printf_float+0xb6>
 800faa4:	f04f 0900 	mov.w	r9, #0
 800faa8:	f108 38ff 	add.w	r8, r8, #4294967295
 800faac:	f104 0a1a 	add.w	sl, r4, #26
 800fab0:	45c8      	cmp	r8, r9
 800fab2:	dc09      	bgt.n	800fac8 <_printf_float+0x250>
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	079b      	lsls	r3, r3, #30
 800fab8:	f100 8103 	bmi.w	800fcc2 <_printf_float+0x44a>
 800fabc:	68e0      	ldr	r0, [r4, #12]
 800fabe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fac0:	4298      	cmp	r0, r3
 800fac2:	bfb8      	it	lt
 800fac4:	4618      	movlt	r0, r3
 800fac6:	e734      	b.n	800f932 <_printf_float+0xba>
 800fac8:	2301      	movs	r3, #1
 800faca:	4652      	mov	r2, sl
 800facc:	4631      	mov	r1, r6
 800face:	4628      	mov	r0, r5
 800fad0:	47b8      	blx	r7
 800fad2:	3001      	adds	r0, #1
 800fad4:	f43f af2b 	beq.w	800f92e <_printf_float+0xb6>
 800fad8:	f109 0901 	add.w	r9, r9, #1
 800fadc:	e7e8      	b.n	800fab0 <_printf_float+0x238>
 800fade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	dc39      	bgt.n	800fb58 <_printf_float+0x2e0>
 800fae4:	2301      	movs	r3, #1
 800fae6:	4a1b      	ldr	r2, [pc, #108]	@ (800fb54 <_printf_float+0x2dc>)
 800fae8:	4631      	mov	r1, r6
 800faea:	4628      	mov	r0, r5
 800faec:	47b8      	blx	r7
 800faee:	3001      	adds	r0, #1
 800faf0:	f43f af1d 	beq.w	800f92e <_printf_float+0xb6>
 800faf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800faf8:	ea59 0303 	orrs.w	r3, r9, r3
 800fafc:	d102      	bne.n	800fb04 <_printf_float+0x28c>
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	07d9      	lsls	r1, r3, #31
 800fb02:	d5d7      	bpl.n	800fab4 <_printf_float+0x23c>
 800fb04:	4631      	mov	r1, r6
 800fb06:	4628      	mov	r0, r5
 800fb08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb0c:	47b8      	blx	r7
 800fb0e:	3001      	adds	r0, #1
 800fb10:	f43f af0d 	beq.w	800f92e <_printf_float+0xb6>
 800fb14:	f04f 0a00 	mov.w	sl, #0
 800fb18:	f104 0b1a 	add.w	fp, r4, #26
 800fb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb1e:	425b      	negs	r3, r3
 800fb20:	4553      	cmp	r3, sl
 800fb22:	dc01      	bgt.n	800fb28 <_printf_float+0x2b0>
 800fb24:	464b      	mov	r3, r9
 800fb26:	e793      	b.n	800fa50 <_printf_float+0x1d8>
 800fb28:	2301      	movs	r3, #1
 800fb2a:	465a      	mov	r2, fp
 800fb2c:	4631      	mov	r1, r6
 800fb2e:	4628      	mov	r0, r5
 800fb30:	47b8      	blx	r7
 800fb32:	3001      	adds	r0, #1
 800fb34:	f43f aefb 	beq.w	800f92e <_printf_float+0xb6>
 800fb38:	f10a 0a01 	add.w	sl, sl, #1
 800fb3c:	e7ee      	b.n	800fb1c <_printf_float+0x2a4>
 800fb3e:	bf00      	nop
 800fb40:	7fefffff 	.word	0x7fefffff
 800fb44:	0801262c 	.word	0x0801262c
 800fb48:	08012630 	.word	0x08012630
 800fb4c:	08012634 	.word	0x08012634
 800fb50:	08012638 	.word	0x08012638
 800fb54:	0801263c 	.word	0x0801263c
 800fb58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb5e:	4553      	cmp	r3, sl
 800fb60:	bfa8      	it	ge
 800fb62:	4653      	movge	r3, sl
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	4699      	mov	r9, r3
 800fb68:	dc36      	bgt.n	800fbd8 <_printf_float+0x360>
 800fb6a:	f04f 0b00 	mov.w	fp, #0
 800fb6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb72:	f104 021a 	add.w	r2, r4, #26
 800fb76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb78:	9306      	str	r3, [sp, #24]
 800fb7a:	eba3 0309 	sub.w	r3, r3, r9
 800fb7e:	455b      	cmp	r3, fp
 800fb80:	dc31      	bgt.n	800fbe6 <_printf_float+0x36e>
 800fb82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb84:	459a      	cmp	sl, r3
 800fb86:	dc3a      	bgt.n	800fbfe <_printf_float+0x386>
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	07da      	lsls	r2, r3, #31
 800fb8c:	d437      	bmi.n	800fbfe <_printf_float+0x386>
 800fb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb90:	ebaa 0903 	sub.w	r9, sl, r3
 800fb94:	9b06      	ldr	r3, [sp, #24]
 800fb96:	ebaa 0303 	sub.w	r3, sl, r3
 800fb9a:	4599      	cmp	r9, r3
 800fb9c:	bfa8      	it	ge
 800fb9e:	4699      	movge	r9, r3
 800fba0:	f1b9 0f00 	cmp.w	r9, #0
 800fba4:	dc33      	bgt.n	800fc0e <_printf_float+0x396>
 800fba6:	f04f 0800 	mov.w	r8, #0
 800fbaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbae:	f104 0b1a 	add.w	fp, r4, #26
 800fbb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb4:	ebaa 0303 	sub.w	r3, sl, r3
 800fbb8:	eba3 0309 	sub.w	r3, r3, r9
 800fbbc:	4543      	cmp	r3, r8
 800fbbe:	f77f af79 	ble.w	800fab4 <_printf_float+0x23c>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	465a      	mov	r2, fp
 800fbc6:	4631      	mov	r1, r6
 800fbc8:	4628      	mov	r0, r5
 800fbca:	47b8      	blx	r7
 800fbcc:	3001      	adds	r0, #1
 800fbce:	f43f aeae 	beq.w	800f92e <_printf_float+0xb6>
 800fbd2:	f108 0801 	add.w	r8, r8, #1
 800fbd6:	e7ec      	b.n	800fbb2 <_printf_float+0x33a>
 800fbd8:	4642      	mov	r2, r8
 800fbda:	4631      	mov	r1, r6
 800fbdc:	4628      	mov	r0, r5
 800fbde:	47b8      	blx	r7
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d1c2      	bne.n	800fb6a <_printf_float+0x2f2>
 800fbe4:	e6a3      	b.n	800f92e <_printf_float+0xb6>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	4631      	mov	r1, r6
 800fbea:	4628      	mov	r0, r5
 800fbec:	9206      	str	r2, [sp, #24]
 800fbee:	47b8      	blx	r7
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	f43f ae9c 	beq.w	800f92e <_printf_float+0xb6>
 800fbf6:	f10b 0b01 	add.w	fp, fp, #1
 800fbfa:	9a06      	ldr	r2, [sp, #24]
 800fbfc:	e7bb      	b.n	800fb76 <_printf_float+0x2fe>
 800fbfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc02:	4631      	mov	r1, r6
 800fc04:	4628      	mov	r0, r5
 800fc06:	47b8      	blx	r7
 800fc08:	3001      	adds	r0, #1
 800fc0a:	d1c0      	bne.n	800fb8e <_printf_float+0x316>
 800fc0c:	e68f      	b.n	800f92e <_printf_float+0xb6>
 800fc0e:	9a06      	ldr	r2, [sp, #24]
 800fc10:	464b      	mov	r3, r9
 800fc12:	4631      	mov	r1, r6
 800fc14:	4628      	mov	r0, r5
 800fc16:	4442      	add	r2, r8
 800fc18:	47b8      	blx	r7
 800fc1a:	3001      	adds	r0, #1
 800fc1c:	d1c3      	bne.n	800fba6 <_printf_float+0x32e>
 800fc1e:	e686      	b.n	800f92e <_printf_float+0xb6>
 800fc20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc24:	f1ba 0f01 	cmp.w	sl, #1
 800fc28:	dc01      	bgt.n	800fc2e <_printf_float+0x3b6>
 800fc2a:	07db      	lsls	r3, r3, #31
 800fc2c:	d536      	bpl.n	800fc9c <_printf_float+0x424>
 800fc2e:	2301      	movs	r3, #1
 800fc30:	4642      	mov	r2, r8
 800fc32:	4631      	mov	r1, r6
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b8      	blx	r7
 800fc38:	3001      	adds	r0, #1
 800fc3a:	f43f ae78 	beq.w	800f92e <_printf_float+0xb6>
 800fc3e:	4631      	mov	r1, r6
 800fc40:	4628      	mov	r0, r5
 800fc42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc46:	47b8      	blx	r7
 800fc48:	3001      	adds	r0, #1
 800fc4a:	f43f ae70 	beq.w	800f92e <_printf_float+0xb6>
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2300      	movs	r3, #0
 800fc52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fc5a:	f7f0 ff45 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc5e:	b9c0      	cbnz	r0, 800fc92 <_printf_float+0x41a>
 800fc60:	4653      	mov	r3, sl
 800fc62:	f108 0201 	add.w	r2, r8, #1
 800fc66:	4631      	mov	r1, r6
 800fc68:	4628      	mov	r0, r5
 800fc6a:	47b8      	blx	r7
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d10c      	bne.n	800fc8a <_printf_float+0x412>
 800fc70:	e65d      	b.n	800f92e <_printf_float+0xb6>
 800fc72:	2301      	movs	r3, #1
 800fc74:	465a      	mov	r2, fp
 800fc76:	4631      	mov	r1, r6
 800fc78:	4628      	mov	r0, r5
 800fc7a:	47b8      	blx	r7
 800fc7c:	3001      	adds	r0, #1
 800fc7e:	f43f ae56 	beq.w	800f92e <_printf_float+0xb6>
 800fc82:	f108 0801 	add.w	r8, r8, #1
 800fc86:	45d0      	cmp	r8, sl
 800fc88:	dbf3      	blt.n	800fc72 <_printf_float+0x3fa>
 800fc8a:	464b      	mov	r3, r9
 800fc8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fc90:	e6df      	b.n	800fa52 <_printf_float+0x1da>
 800fc92:	f04f 0800 	mov.w	r8, #0
 800fc96:	f104 0b1a 	add.w	fp, r4, #26
 800fc9a:	e7f4      	b.n	800fc86 <_printf_float+0x40e>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	4642      	mov	r2, r8
 800fca0:	e7e1      	b.n	800fc66 <_printf_float+0x3ee>
 800fca2:	2301      	movs	r3, #1
 800fca4:	464a      	mov	r2, r9
 800fca6:	4631      	mov	r1, r6
 800fca8:	4628      	mov	r0, r5
 800fcaa:	47b8      	blx	r7
 800fcac:	3001      	adds	r0, #1
 800fcae:	f43f ae3e 	beq.w	800f92e <_printf_float+0xb6>
 800fcb2:	f108 0801 	add.w	r8, r8, #1
 800fcb6:	68e3      	ldr	r3, [r4, #12]
 800fcb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcba:	1a5b      	subs	r3, r3, r1
 800fcbc:	4543      	cmp	r3, r8
 800fcbe:	dcf0      	bgt.n	800fca2 <_printf_float+0x42a>
 800fcc0:	e6fc      	b.n	800fabc <_printf_float+0x244>
 800fcc2:	f04f 0800 	mov.w	r8, #0
 800fcc6:	f104 0919 	add.w	r9, r4, #25
 800fcca:	e7f4      	b.n	800fcb6 <_printf_float+0x43e>

0800fccc <_printf_common>:
 800fccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd0:	4616      	mov	r6, r2
 800fcd2:	4698      	mov	r8, r3
 800fcd4:	688a      	ldr	r2, [r1, #8]
 800fcd6:	4607      	mov	r7, r0
 800fcd8:	690b      	ldr	r3, [r1, #16]
 800fcda:	460c      	mov	r4, r1
 800fcdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fce0:	4293      	cmp	r3, r2
 800fce2:	bfb8      	it	lt
 800fce4:	4613      	movlt	r3, r2
 800fce6:	6033      	str	r3, [r6, #0]
 800fce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fcec:	b10a      	cbz	r2, 800fcf2 <_printf_common+0x26>
 800fcee:	3301      	adds	r3, #1
 800fcf0:	6033      	str	r3, [r6, #0]
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	0699      	lsls	r1, r3, #26
 800fcf6:	bf42      	ittt	mi
 800fcf8:	6833      	ldrmi	r3, [r6, #0]
 800fcfa:	3302      	addmi	r3, #2
 800fcfc:	6033      	strmi	r3, [r6, #0]
 800fcfe:	6825      	ldr	r5, [r4, #0]
 800fd00:	f015 0506 	ands.w	r5, r5, #6
 800fd04:	d106      	bne.n	800fd14 <_printf_common+0x48>
 800fd06:	f104 0a19 	add.w	sl, r4, #25
 800fd0a:	68e3      	ldr	r3, [r4, #12]
 800fd0c:	6832      	ldr	r2, [r6, #0]
 800fd0e:	1a9b      	subs	r3, r3, r2
 800fd10:	42ab      	cmp	r3, r5
 800fd12:	dc2b      	bgt.n	800fd6c <_printf_common+0xa0>
 800fd14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd18:	6822      	ldr	r2, [r4, #0]
 800fd1a:	3b00      	subs	r3, #0
 800fd1c:	bf18      	it	ne
 800fd1e:	2301      	movne	r3, #1
 800fd20:	0692      	lsls	r2, r2, #26
 800fd22:	d430      	bmi.n	800fd86 <_printf_common+0xba>
 800fd24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd28:	4641      	mov	r1, r8
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	47c8      	blx	r9
 800fd2e:	3001      	adds	r0, #1
 800fd30:	d023      	beq.n	800fd7a <_printf_common+0xae>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	341a      	adds	r4, #26
 800fd36:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800fd3a:	f003 0306 	and.w	r3, r3, #6
 800fd3e:	2b04      	cmp	r3, #4
 800fd40:	bf0a      	itet	eq
 800fd42:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fd46:	2500      	movne	r5, #0
 800fd48:	6833      	ldreq	r3, [r6, #0]
 800fd4a:	f04f 0600 	mov.w	r6, #0
 800fd4e:	bf08      	it	eq
 800fd50:	1aed      	subeq	r5, r5, r3
 800fd52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800fd56:	bf08      	it	eq
 800fd58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	bfc4      	itt	gt
 800fd60:	1a9b      	subgt	r3, r3, r2
 800fd62:	18ed      	addgt	r5, r5, r3
 800fd64:	42b5      	cmp	r5, r6
 800fd66:	d11a      	bne.n	800fd9e <_printf_common+0xd2>
 800fd68:	2000      	movs	r0, #0
 800fd6a:	e008      	b.n	800fd7e <_printf_common+0xb2>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	4652      	mov	r2, sl
 800fd70:	4641      	mov	r1, r8
 800fd72:	4638      	mov	r0, r7
 800fd74:	47c8      	blx	r9
 800fd76:	3001      	adds	r0, #1
 800fd78:	d103      	bne.n	800fd82 <_printf_common+0xb6>
 800fd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd82:	3501      	adds	r5, #1
 800fd84:	e7c1      	b.n	800fd0a <_printf_common+0x3e>
 800fd86:	18e1      	adds	r1, r4, r3
 800fd88:	1c5a      	adds	r2, r3, #1
 800fd8a:	2030      	movs	r0, #48	@ 0x30
 800fd8c:	3302      	adds	r3, #2
 800fd8e:	4422      	add	r2, r4
 800fd90:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fd94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fd98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fd9c:	e7c2      	b.n	800fd24 <_printf_common+0x58>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	4622      	mov	r2, r4
 800fda2:	4641      	mov	r1, r8
 800fda4:	4638      	mov	r0, r7
 800fda6:	47c8      	blx	r9
 800fda8:	3001      	adds	r0, #1
 800fdaa:	d0e6      	beq.n	800fd7a <_printf_common+0xae>
 800fdac:	3601      	adds	r6, #1
 800fdae:	e7d9      	b.n	800fd64 <_printf_common+0x98>

0800fdb0 <_printf_i>:
 800fdb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb4:	7e0f      	ldrb	r7, [r1, #24]
 800fdb6:	4691      	mov	r9, r2
 800fdb8:	4680      	mov	r8, r0
 800fdba:	460c      	mov	r4, r1
 800fdbc:	2f78      	cmp	r7, #120	@ 0x78
 800fdbe:	469a      	mov	sl, r3
 800fdc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fdc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fdc6:	d807      	bhi.n	800fdd8 <_printf_i+0x28>
 800fdc8:	2f62      	cmp	r7, #98	@ 0x62
 800fdca:	d80a      	bhi.n	800fde2 <_printf_i+0x32>
 800fdcc:	2f00      	cmp	r7, #0
 800fdce:	f000 80d2 	beq.w	800ff76 <_printf_i+0x1c6>
 800fdd2:	2f58      	cmp	r7, #88	@ 0x58
 800fdd4:	f000 80b9 	beq.w	800ff4a <_printf_i+0x19a>
 800fdd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fde0:	e03a      	b.n	800fe58 <_printf_i+0xa8>
 800fde2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fde6:	2b15      	cmp	r3, #21
 800fde8:	d8f6      	bhi.n	800fdd8 <_printf_i+0x28>
 800fdea:	a101      	add	r1, pc, #4	@ (adr r1, 800fdf0 <_printf_i+0x40>)
 800fdec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdf0:	0800fe49 	.word	0x0800fe49
 800fdf4:	0800fe5d 	.word	0x0800fe5d
 800fdf8:	0800fdd9 	.word	0x0800fdd9
 800fdfc:	0800fdd9 	.word	0x0800fdd9
 800fe00:	0800fdd9 	.word	0x0800fdd9
 800fe04:	0800fdd9 	.word	0x0800fdd9
 800fe08:	0800fe5d 	.word	0x0800fe5d
 800fe0c:	0800fdd9 	.word	0x0800fdd9
 800fe10:	0800fdd9 	.word	0x0800fdd9
 800fe14:	0800fdd9 	.word	0x0800fdd9
 800fe18:	0800fdd9 	.word	0x0800fdd9
 800fe1c:	0800ff5d 	.word	0x0800ff5d
 800fe20:	0800fe87 	.word	0x0800fe87
 800fe24:	0800ff17 	.word	0x0800ff17
 800fe28:	0800fdd9 	.word	0x0800fdd9
 800fe2c:	0800fdd9 	.word	0x0800fdd9
 800fe30:	0800ff7f 	.word	0x0800ff7f
 800fe34:	0800fdd9 	.word	0x0800fdd9
 800fe38:	0800fe87 	.word	0x0800fe87
 800fe3c:	0800fdd9 	.word	0x0800fdd9
 800fe40:	0800fdd9 	.word	0x0800fdd9
 800fe44:	0800ff1f 	.word	0x0800ff1f
 800fe48:	6833      	ldr	r3, [r6, #0]
 800fe4a:	1d1a      	adds	r2, r3, #4
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6032      	str	r2, [r6, #0]
 800fe50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e09d      	b.n	800ff98 <_printf_i+0x1e8>
 800fe5c:	6833      	ldr	r3, [r6, #0]
 800fe5e:	6820      	ldr	r0, [r4, #0]
 800fe60:	1d19      	adds	r1, r3, #4
 800fe62:	6031      	str	r1, [r6, #0]
 800fe64:	0606      	lsls	r6, r0, #24
 800fe66:	d501      	bpl.n	800fe6c <_printf_i+0xbc>
 800fe68:	681d      	ldr	r5, [r3, #0]
 800fe6a:	e003      	b.n	800fe74 <_printf_i+0xc4>
 800fe6c:	0645      	lsls	r5, r0, #25
 800fe6e:	d5fb      	bpl.n	800fe68 <_printf_i+0xb8>
 800fe70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fe74:	2d00      	cmp	r5, #0
 800fe76:	da03      	bge.n	800fe80 <_printf_i+0xd0>
 800fe78:	232d      	movs	r3, #45	@ 0x2d
 800fe7a:	426d      	negs	r5, r5
 800fe7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe80:	4859      	ldr	r0, [pc, #356]	@ (800ffe8 <_printf_i+0x238>)
 800fe82:	230a      	movs	r3, #10
 800fe84:	e011      	b.n	800feaa <_printf_i+0xfa>
 800fe86:	6821      	ldr	r1, [r4, #0]
 800fe88:	6833      	ldr	r3, [r6, #0]
 800fe8a:	0608      	lsls	r0, r1, #24
 800fe8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fe90:	d402      	bmi.n	800fe98 <_printf_i+0xe8>
 800fe92:	0649      	lsls	r1, r1, #25
 800fe94:	bf48      	it	mi
 800fe96:	b2ad      	uxthmi	r5, r5
 800fe98:	2f6f      	cmp	r7, #111	@ 0x6f
 800fe9a:	6033      	str	r3, [r6, #0]
 800fe9c:	4852      	ldr	r0, [pc, #328]	@ (800ffe8 <_printf_i+0x238>)
 800fe9e:	bf14      	ite	ne
 800fea0:	230a      	movne	r3, #10
 800fea2:	2308      	moveq	r3, #8
 800fea4:	2100      	movs	r1, #0
 800fea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800feaa:	6866      	ldr	r6, [r4, #4]
 800feac:	2e00      	cmp	r6, #0
 800feae:	60a6      	str	r6, [r4, #8]
 800feb0:	bfa2      	ittt	ge
 800feb2:	6821      	ldrge	r1, [r4, #0]
 800feb4:	f021 0104 	bicge.w	r1, r1, #4
 800feb8:	6021      	strge	r1, [r4, #0]
 800feba:	b90d      	cbnz	r5, 800fec0 <_printf_i+0x110>
 800febc:	2e00      	cmp	r6, #0
 800febe:	d04b      	beq.n	800ff58 <_printf_i+0x1a8>
 800fec0:	4616      	mov	r6, r2
 800fec2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fec6:	fb03 5711 	mls	r7, r3, r1, r5
 800feca:	5dc7      	ldrb	r7, [r0, r7]
 800fecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fed0:	462f      	mov	r7, r5
 800fed2:	460d      	mov	r5, r1
 800fed4:	42bb      	cmp	r3, r7
 800fed6:	d9f4      	bls.n	800fec2 <_printf_i+0x112>
 800fed8:	2b08      	cmp	r3, #8
 800feda:	d10b      	bne.n	800fef4 <_printf_i+0x144>
 800fedc:	6823      	ldr	r3, [r4, #0]
 800fede:	07df      	lsls	r7, r3, #31
 800fee0:	d508      	bpl.n	800fef4 <_printf_i+0x144>
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	6861      	ldr	r1, [r4, #4]
 800fee6:	4299      	cmp	r1, r3
 800fee8:	bfde      	ittt	le
 800feea:	2330      	movle	r3, #48	@ 0x30
 800feec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fef4:	1b92      	subs	r2, r2, r6
 800fef6:	6122      	str	r2, [r4, #16]
 800fef8:	464b      	mov	r3, r9
 800fefa:	aa03      	add	r2, sp, #12
 800fefc:	4621      	mov	r1, r4
 800fefe:	4640      	mov	r0, r8
 800ff00:	f8cd a000 	str.w	sl, [sp]
 800ff04:	f7ff fee2 	bl	800fccc <_printf_common>
 800ff08:	3001      	adds	r0, #1
 800ff0a:	d14a      	bne.n	800ffa2 <_printf_i+0x1f2>
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff10:	b004      	add	sp, #16
 800ff12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff16:	6823      	ldr	r3, [r4, #0]
 800ff18:	f043 0320 	orr.w	r3, r3, #32
 800ff1c:	6023      	str	r3, [r4, #0]
 800ff1e:	2778      	movs	r7, #120	@ 0x78
 800ff20:	4832      	ldr	r0, [pc, #200]	@ (800ffec <_printf_i+0x23c>)
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff28:	061f      	lsls	r7, r3, #24
 800ff2a:	6831      	ldr	r1, [r6, #0]
 800ff2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff30:	d402      	bmi.n	800ff38 <_printf_i+0x188>
 800ff32:	065f      	lsls	r7, r3, #25
 800ff34:	bf48      	it	mi
 800ff36:	b2ad      	uxthmi	r5, r5
 800ff38:	6031      	str	r1, [r6, #0]
 800ff3a:	07d9      	lsls	r1, r3, #31
 800ff3c:	bf44      	itt	mi
 800ff3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ff42:	6023      	strmi	r3, [r4, #0]
 800ff44:	b11d      	cbz	r5, 800ff4e <_printf_i+0x19e>
 800ff46:	2310      	movs	r3, #16
 800ff48:	e7ac      	b.n	800fea4 <_printf_i+0xf4>
 800ff4a:	4827      	ldr	r0, [pc, #156]	@ (800ffe8 <_printf_i+0x238>)
 800ff4c:	e7e9      	b.n	800ff22 <_printf_i+0x172>
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	f023 0320 	bic.w	r3, r3, #32
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	e7f6      	b.n	800ff46 <_printf_i+0x196>
 800ff58:	4616      	mov	r6, r2
 800ff5a:	e7bd      	b.n	800fed8 <_printf_i+0x128>
 800ff5c:	6833      	ldr	r3, [r6, #0]
 800ff5e:	6825      	ldr	r5, [r4, #0]
 800ff60:	1d18      	adds	r0, r3, #4
 800ff62:	6961      	ldr	r1, [r4, #20]
 800ff64:	6030      	str	r0, [r6, #0]
 800ff66:	062e      	lsls	r6, r5, #24
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	d501      	bpl.n	800ff70 <_printf_i+0x1c0>
 800ff6c:	6019      	str	r1, [r3, #0]
 800ff6e:	e002      	b.n	800ff76 <_printf_i+0x1c6>
 800ff70:	0668      	lsls	r0, r5, #25
 800ff72:	d5fb      	bpl.n	800ff6c <_printf_i+0x1bc>
 800ff74:	8019      	strh	r1, [r3, #0]
 800ff76:	2300      	movs	r3, #0
 800ff78:	4616      	mov	r6, r2
 800ff7a:	6123      	str	r3, [r4, #16]
 800ff7c:	e7bc      	b.n	800fef8 <_printf_i+0x148>
 800ff7e:	6833      	ldr	r3, [r6, #0]
 800ff80:	2100      	movs	r1, #0
 800ff82:	1d1a      	adds	r2, r3, #4
 800ff84:	6032      	str	r2, [r6, #0]
 800ff86:	681e      	ldr	r6, [r3, #0]
 800ff88:	6862      	ldr	r2, [r4, #4]
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f000 f9d5 	bl	801033a <memchr>
 800ff90:	b108      	cbz	r0, 800ff96 <_printf_i+0x1e6>
 800ff92:	1b80      	subs	r0, r0, r6
 800ff94:	6060      	str	r0, [r4, #4]
 800ff96:	6863      	ldr	r3, [r4, #4]
 800ff98:	6123      	str	r3, [r4, #16]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffa0:	e7aa      	b.n	800fef8 <_printf_i+0x148>
 800ffa2:	6923      	ldr	r3, [r4, #16]
 800ffa4:	4632      	mov	r2, r6
 800ffa6:	4649      	mov	r1, r9
 800ffa8:	4640      	mov	r0, r8
 800ffaa:	47d0      	blx	sl
 800ffac:	3001      	adds	r0, #1
 800ffae:	d0ad      	beq.n	800ff0c <_printf_i+0x15c>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	079b      	lsls	r3, r3, #30
 800ffb4:	d413      	bmi.n	800ffde <_printf_i+0x22e>
 800ffb6:	68e0      	ldr	r0, [r4, #12]
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	4298      	cmp	r0, r3
 800ffbc:	bfb8      	it	lt
 800ffbe:	4618      	movlt	r0, r3
 800ffc0:	e7a6      	b.n	800ff10 <_printf_i+0x160>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	4632      	mov	r2, r6
 800ffc6:	4649      	mov	r1, r9
 800ffc8:	4640      	mov	r0, r8
 800ffca:	47d0      	blx	sl
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d09d      	beq.n	800ff0c <_printf_i+0x15c>
 800ffd0:	3501      	adds	r5, #1
 800ffd2:	68e3      	ldr	r3, [r4, #12]
 800ffd4:	9903      	ldr	r1, [sp, #12]
 800ffd6:	1a5b      	subs	r3, r3, r1
 800ffd8:	42ab      	cmp	r3, r5
 800ffda:	dcf2      	bgt.n	800ffc2 <_printf_i+0x212>
 800ffdc:	e7eb      	b.n	800ffb6 <_printf_i+0x206>
 800ffde:	2500      	movs	r5, #0
 800ffe0:	f104 0619 	add.w	r6, r4, #25
 800ffe4:	e7f5      	b.n	800ffd2 <_printf_i+0x222>
 800ffe6:	bf00      	nop
 800ffe8:	0801263e 	.word	0x0801263e
 800ffec:	0801264f 	.word	0x0801264f

0800fff0 <std>:
 800fff0:	2300      	movs	r3, #0
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	6083      	str	r3, [r0, #8]
 800fff8:	8181      	strh	r1, [r0, #12]
 800fffa:	4619      	mov	r1, r3
 800fffc:	6643      	str	r3, [r0, #100]	@ 0x64
 800fffe:	81c2      	strh	r2, [r0, #14]
 8010000:	2208      	movs	r2, #8
 8010002:	6183      	str	r3, [r0, #24]
 8010004:	e9c0 3300 	strd	r3, r3, [r0]
 8010008:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801000c:	305c      	adds	r0, #92	@ 0x5c
 801000e:	f000 f914 	bl	801023a <memset>
 8010012:	4b0d      	ldr	r3, [pc, #52]	@ (8010048 <std+0x58>)
 8010014:	6224      	str	r4, [r4, #32]
 8010016:	6263      	str	r3, [r4, #36]	@ 0x24
 8010018:	4b0c      	ldr	r3, [pc, #48]	@ (801004c <std+0x5c>)
 801001a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801001c:	4b0c      	ldr	r3, [pc, #48]	@ (8010050 <std+0x60>)
 801001e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010020:	4b0c      	ldr	r3, [pc, #48]	@ (8010054 <std+0x64>)
 8010022:	6323      	str	r3, [r4, #48]	@ 0x30
 8010024:	4b0c      	ldr	r3, [pc, #48]	@ (8010058 <std+0x68>)
 8010026:	429c      	cmp	r4, r3
 8010028:	d006      	beq.n	8010038 <std+0x48>
 801002a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801002e:	4294      	cmp	r4, r2
 8010030:	d002      	beq.n	8010038 <std+0x48>
 8010032:	33d0      	adds	r3, #208	@ 0xd0
 8010034:	429c      	cmp	r4, r3
 8010036:	d105      	bne.n	8010044 <std+0x54>
 8010038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801003c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010040:	f000 b978 	b.w	8010334 <__retarget_lock_init_recursive>
 8010044:	bd10      	pop	{r4, pc}
 8010046:	bf00      	nop
 8010048:	080101b5 	.word	0x080101b5
 801004c:	080101d7 	.word	0x080101d7
 8010050:	0801020f 	.word	0x0801020f
 8010054:	08010233 	.word	0x08010233
 8010058:	20004c5c 	.word	0x20004c5c

0801005c <stdio_exit_handler>:
 801005c:	4a02      	ldr	r2, [pc, #8]	@ (8010068 <stdio_exit_handler+0xc>)
 801005e:	4903      	ldr	r1, [pc, #12]	@ (801006c <stdio_exit_handler+0x10>)
 8010060:	4803      	ldr	r0, [pc, #12]	@ (8010070 <stdio_exit_handler+0x14>)
 8010062:	f000 b869 	b.w	8010138 <_fwalk_sglue>
 8010066:	bf00      	nop
 8010068:	20000024 	.word	0x20000024
 801006c:	08011ce1 	.word	0x08011ce1
 8010070:	20000034 	.word	0x20000034

08010074 <cleanup_stdio>:
 8010074:	6841      	ldr	r1, [r0, #4]
 8010076:	4b0c      	ldr	r3, [pc, #48]	@ (80100a8 <cleanup_stdio+0x34>)
 8010078:	4299      	cmp	r1, r3
 801007a:	b510      	push	{r4, lr}
 801007c:	4604      	mov	r4, r0
 801007e:	d001      	beq.n	8010084 <cleanup_stdio+0x10>
 8010080:	f001 fe2e 	bl	8011ce0 <_fflush_r>
 8010084:	68a1      	ldr	r1, [r4, #8]
 8010086:	4b09      	ldr	r3, [pc, #36]	@ (80100ac <cleanup_stdio+0x38>)
 8010088:	4299      	cmp	r1, r3
 801008a:	d002      	beq.n	8010092 <cleanup_stdio+0x1e>
 801008c:	4620      	mov	r0, r4
 801008e:	f001 fe27 	bl	8011ce0 <_fflush_r>
 8010092:	68e1      	ldr	r1, [r4, #12]
 8010094:	4b06      	ldr	r3, [pc, #24]	@ (80100b0 <cleanup_stdio+0x3c>)
 8010096:	4299      	cmp	r1, r3
 8010098:	d004      	beq.n	80100a4 <cleanup_stdio+0x30>
 801009a:	4620      	mov	r0, r4
 801009c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a0:	f001 be1e 	b.w	8011ce0 <_fflush_r>
 80100a4:	bd10      	pop	{r4, pc}
 80100a6:	bf00      	nop
 80100a8:	20004c5c 	.word	0x20004c5c
 80100ac:	20004cc4 	.word	0x20004cc4
 80100b0:	20004d2c 	.word	0x20004d2c

080100b4 <global_stdio_init.part.0>:
 80100b4:	b510      	push	{r4, lr}
 80100b6:	4b0b      	ldr	r3, [pc, #44]	@ (80100e4 <global_stdio_init.part.0+0x30>)
 80100b8:	2104      	movs	r1, #4
 80100ba:	4c0b      	ldr	r4, [pc, #44]	@ (80100e8 <global_stdio_init.part.0+0x34>)
 80100bc:	4a0b      	ldr	r2, [pc, #44]	@ (80100ec <global_stdio_init.part.0+0x38>)
 80100be:	4620      	mov	r0, r4
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	2200      	movs	r2, #0
 80100c4:	f7ff ff94 	bl	800fff0 <std>
 80100c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100cc:	2201      	movs	r2, #1
 80100ce:	2109      	movs	r1, #9
 80100d0:	f7ff ff8e 	bl	800fff0 <std>
 80100d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100d8:	2202      	movs	r2, #2
 80100da:	2112      	movs	r1, #18
 80100dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e0:	f7ff bf86 	b.w	800fff0 <std>
 80100e4:	20004d94 	.word	0x20004d94
 80100e8:	20004c5c 	.word	0x20004c5c
 80100ec:	0801005d 	.word	0x0801005d

080100f0 <__sfp_lock_acquire>:
 80100f0:	4801      	ldr	r0, [pc, #4]	@ (80100f8 <__sfp_lock_acquire+0x8>)
 80100f2:	f000 b920 	b.w	8010336 <__retarget_lock_acquire_recursive>
 80100f6:	bf00      	nop
 80100f8:	20004d9d 	.word	0x20004d9d

080100fc <__sfp_lock_release>:
 80100fc:	4801      	ldr	r0, [pc, #4]	@ (8010104 <__sfp_lock_release+0x8>)
 80100fe:	f000 b91b 	b.w	8010338 <__retarget_lock_release_recursive>
 8010102:	bf00      	nop
 8010104:	20004d9d 	.word	0x20004d9d

08010108 <__sinit>:
 8010108:	b510      	push	{r4, lr}
 801010a:	4604      	mov	r4, r0
 801010c:	f7ff fff0 	bl	80100f0 <__sfp_lock_acquire>
 8010110:	6a23      	ldr	r3, [r4, #32]
 8010112:	b11b      	cbz	r3, 801011c <__sinit+0x14>
 8010114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010118:	f7ff bff0 	b.w	80100fc <__sfp_lock_release>
 801011c:	4b04      	ldr	r3, [pc, #16]	@ (8010130 <__sinit+0x28>)
 801011e:	6223      	str	r3, [r4, #32]
 8010120:	4b04      	ldr	r3, [pc, #16]	@ (8010134 <__sinit+0x2c>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d1f5      	bne.n	8010114 <__sinit+0xc>
 8010128:	f7ff ffc4 	bl	80100b4 <global_stdio_init.part.0>
 801012c:	e7f2      	b.n	8010114 <__sinit+0xc>
 801012e:	bf00      	nop
 8010130:	08010075 	.word	0x08010075
 8010134:	20004d94 	.word	0x20004d94

08010138 <_fwalk_sglue>:
 8010138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801013c:	4607      	mov	r7, r0
 801013e:	4688      	mov	r8, r1
 8010140:	4614      	mov	r4, r2
 8010142:	2600      	movs	r6, #0
 8010144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010148:	f1b9 0901 	subs.w	r9, r9, #1
 801014c:	d505      	bpl.n	801015a <_fwalk_sglue+0x22>
 801014e:	6824      	ldr	r4, [r4, #0]
 8010150:	2c00      	cmp	r4, #0
 8010152:	d1f7      	bne.n	8010144 <_fwalk_sglue+0xc>
 8010154:	4630      	mov	r0, r6
 8010156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015a:	89ab      	ldrh	r3, [r5, #12]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d907      	bls.n	8010170 <_fwalk_sglue+0x38>
 8010160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010164:	3301      	adds	r3, #1
 8010166:	d003      	beq.n	8010170 <_fwalk_sglue+0x38>
 8010168:	4629      	mov	r1, r5
 801016a:	4638      	mov	r0, r7
 801016c:	47c0      	blx	r8
 801016e:	4306      	orrs	r6, r0
 8010170:	3568      	adds	r5, #104	@ 0x68
 8010172:	e7e9      	b.n	8010148 <_fwalk_sglue+0x10>

08010174 <siprintf>:
 8010174:	b40e      	push	{r1, r2, r3}
 8010176:	b500      	push	{lr}
 8010178:	b09c      	sub	sp, #112	@ 0x70
 801017a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801017e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010180:	9002      	str	r0, [sp, #8]
 8010182:	9006      	str	r0, [sp, #24]
 8010184:	9107      	str	r1, [sp, #28]
 8010186:	9104      	str	r1, [sp, #16]
 8010188:	4808      	ldr	r0, [pc, #32]	@ (80101ac <siprintf+0x38>)
 801018a:	4909      	ldr	r1, [pc, #36]	@ (80101b0 <siprintf+0x3c>)
 801018c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010190:	9105      	str	r1, [sp, #20]
 8010192:	a902      	add	r1, sp, #8
 8010194:	6800      	ldr	r0, [r0, #0]
 8010196:	9301      	str	r3, [sp, #4]
 8010198:	f001 fc22 	bl	80119e0 <_svfiprintf_r>
 801019c:	9b02      	ldr	r3, [sp, #8]
 801019e:	2200      	movs	r2, #0
 80101a0:	701a      	strb	r2, [r3, #0]
 80101a2:	b01c      	add	sp, #112	@ 0x70
 80101a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80101a8:	b003      	add	sp, #12
 80101aa:	4770      	bx	lr
 80101ac:	20000030 	.word	0x20000030
 80101b0:	ffff0208 	.word	0xffff0208

080101b4 <__sread>:
 80101b4:	b510      	push	{r4, lr}
 80101b6:	460c      	mov	r4, r1
 80101b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101bc:	f000 f86c 	bl	8010298 <_read_r>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	bfab      	itete	ge
 80101c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80101c6:	89a3      	ldrhlt	r3, [r4, #12]
 80101c8:	181b      	addge	r3, r3, r0
 80101ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80101ce:	bfac      	ite	ge
 80101d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80101d2:	81a3      	strhlt	r3, [r4, #12]
 80101d4:	bd10      	pop	{r4, pc}

080101d6 <__swrite>:
 80101d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101da:	461f      	mov	r7, r3
 80101dc:	898b      	ldrh	r3, [r1, #12]
 80101de:	4605      	mov	r5, r0
 80101e0:	460c      	mov	r4, r1
 80101e2:	05db      	lsls	r3, r3, #23
 80101e4:	4616      	mov	r6, r2
 80101e6:	d505      	bpl.n	80101f4 <__swrite+0x1e>
 80101e8:	2302      	movs	r3, #2
 80101ea:	2200      	movs	r2, #0
 80101ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f0:	f000 f840 	bl	8010274 <_lseek_r>
 80101f4:	89a3      	ldrh	r3, [r4, #12]
 80101f6:	4632      	mov	r2, r6
 80101f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101fc:	4628      	mov	r0, r5
 80101fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010202:	81a3      	strh	r3, [r4, #12]
 8010204:	463b      	mov	r3, r7
 8010206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801020a:	f000 b857 	b.w	80102bc <_write_r>

0801020e <__sseek>:
 801020e:	b510      	push	{r4, lr}
 8010210:	460c      	mov	r4, r1
 8010212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010216:	f000 f82d 	bl	8010274 <_lseek_r>
 801021a:	1c43      	adds	r3, r0, #1
 801021c:	89a3      	ldrh	r3, [r4, #12]
 801021e:	bf15      	itete	ne
 8010220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801022a:	81a3      	strheq	r3, [r4, #12]
 801022c:	bf18      	it	ne
 801022e:	81a3      	strhne	r3, [r4, #12]
 8010230:	bd10      	pop	{r4, pc}

08010232 <__sclose>:
 8010232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010236:	f000 b80d 	b.w	8010254 <_close_r>

0801023a <memset>:
 801023a:	4402      	add	r2, r0
 801023c:	4603      	mov	r3, r0
 801023e:	4293      	cmp	r3, r2
 8010240:	d100      	bne.n	8010244 <memset+0xa>
 8010242:	4770      	bx	lr
 8010244:	f803 1b01 	strb.w	r1, [r3], #1
 8010248:	e7f9      	b.n	801023e <memset+0x4>
	...

0801024c <_localeconv_r>:
 801024c:	4800      	ldr	r0, [pc, #0]	@ (8010250 <_localeconv_r+0x4>)
 801024e:	4770      	bx	lr
 8010250:	20000170 	.word	0x20000170

08010254 <_close_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	2300      	movs	r3, #0
 8010258:	4d05      	ldr	r5, [pc, #20]	@ (8010270 <_close_r+0x1c>)
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	602b      	str	r3, [r5, #0]
 8010260:	f7f4 fdc0 	bl	8004de4 <_close>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_close_r+0x1a>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_close_r+0x1a>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	20004d98 	.word	0x20004d98

08010274 <_lseek_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4604      	mov	r4, r0
 8010278:	4d06      	ldr	r5, [pc, #24]	@ (8010294 <_lseek_r+0x20>)
 801027a:	4608      	mov	r0, r1
 801027c:	4611      	mov	r1, r2
 801027e:	2200      	movs	r2, #0
 8010280:	602a      	str	r2, [r5, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	f7f4 fdd5 	bl	8004e32 <_lseek>
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	d102      	bne.n	8010292 <_lseek_r+0x1e>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	b103      	cbz	r3, 8010292 <_lseek_r+0x1e>
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	20004d98 	.word	0x20004d98

08010298 <_read_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4604      	mov	r4, r0
 801029c:	4d06      	ldr	r5, [pc, #24]	@ (80102b8 <_read_r+0x20>)
 801029e:	4608      	mov	r0, r1
 80102a0:	4611      	mov	r1, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	602a      	str	r2, [r5, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	f7f4 fd63 	bl	8004d72 <_read>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	d102      	bne.n	80102b6 <_read_r+0x1e>
 80102b0:	682b      	ldr	r3, [r5, #0]
 80102b2:	b103      	cbz	r3, 80102b6 <_read_r+0x1e>
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
 80102b8:	20004d98 	.word	0x20004d98

080102bc <_write_r>:
 80102bc:	b538      	push	{r3, r4, r5, lr}
 80102be:	4604      	mov	r4, r0
 80102c0:	4d06      	ldr	r5, [pc, #24]	@ (80102dc <_write_r+0x20>)
 80102c2:	4608      	mov	r0, r1
 80102c4:	4611      	mov	r1, r2
 80102c6:	2200      	movs	r2, #0
 80102c8:	602a      	str	r2, [r5, #0]
 80102ca:	461a      	mov	r2, r3
 80102cc:	f7f4 fd6e 	bl	8004dac <_write>
 80102d0:	1c43      	adds	r3, r0, #1
 80102d2:	d102      	bne.n	80102da <_write_r+0x1e>
 80102d4:	682b      	ldr	r3, [r5, #0]
 80102d6:	b103      	cbz	r3, 80102da <_write_r+0x1e>
 80102d8:	6023      	str	r3, [r4, #0]
 80102da:	bd38      	pop	{r3, r4, r5, pc}
 80102dc:	20004d98 	.word	0x20004d98

080102e0 <__errno>:
 80102e0:	4b01      	ldr	r3, [pc, #4]	@ (80102e8 <__errno+0x8>)
 80102e2:	6818      	ldr	r0, [r3, #0]
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	20000030 	.word	0x20000030

080102ec <__libc_init_array>:
 80102ec:	b570      	push	{r4, r5, r6, lr}
 80102ee:	4d0d      	ldr	r5, [pc, #52]	@ (8010324 <__libc_init_array+0x38>)
 80102f0:	2600      	movs	r6, #0
 80102f2:	4c0d      	ldr	r4, [pc, #52]	@ (8010328 <__libc_init_array+0x3c>)
 80102f4:	1b64      	subs	r4, r4, r5
 80102f6:	10a4      	asrs	r4, r4, #2
 80102f8:	42a6      	cmp	r6, r4
 80102fa:	d109      	bne.n	8010310 <__libc_init_array+0x24>
 80102fc:	4d0b      	ldr	r5, [pc, #44]	@ (801032c <__libc_init_array+0x40>)
 80102fe:	2600      	movs	r6, #0
 8010300:	4c0b      	ldr	r4, [pc, #44]	@ (8010330 <__libc_init_array+0x44>)
 8010302:	f002 f87d 	bl	8012400 <_init>
 8010306:	1b64      	subs	r4, r4, r5
 8010308:	10a4      	asrs	r4, r4, #2
 801030a:	42a6      	cmp	r6, r4
 801030c:	d105      	bne.n	801031a <__libc_init_array+0x2e>
 801030e:	bd70      	pop	{r4, r5, r6, pc}
 8010310:	f855 3b04 	ldr.w	r3, [r5], #4
 8010314:	3601      	adds	r6, #1
 8010316:	4798      	blx	r3
 8010318:	e7ee      	b.n	80102f8 <__libc_init_array+0xc>
 801031a:	f855 3b04 	ldr.w	r3, [r5], #4
 801031e:	3601      	adds	r6, #1
 8010320:	4798      	blx	r3
 8010322:	e7f2      	b.n	801030a <__libc_init_array+0x1e>
 8010324:	080129a8 	.word	0x080129a8
 8010328:	080129a8 	.word	0x080129a8
 801032c:	080129a8 	.word	0x080129a8
 8010330:	080129ac 	.word	0x080129ac

08010334 <__retarget_lock_init_recursive>:
 8010334:	4770      	bx	lr

08010336 <__retarget_lock_acquire_recursive>:
 8010336:	4770      	bx	lr

08010338 <__retarget_lock_release_recursive>:
 8010338:	4770      	bx	lr

0801033a <memchr>:
 801033a:	b2c9      	uxtb	r1, r1
 801033c:	4603      	mov	r3, r0
 801033e:	4402      	add	r2, r0
 8010340:	b510      	push	{r4, lr}
 8010342:	4293      	cmp	r3, r2
 8010344:	4618      	mov	r0, r3
 8010346:	d101      	bne.n	801034c <memchr+0x12>
 8010348:	2000      	movs	r0, #0
 801034a:	e003      	b.n	8010354 <memchr+0x1a>
 801034c:	7804      	ldrb	r4, [r0, #0]
 801034e:	3301      	adds	r3, #1
 8010350:	428c      	cmp	r4, r1
 8010352:	d1f6      	bne.n	8010342 <memchr+0x8>
 8010354:	bd10      	pop	{r4, pc}

08010356 <memcpy>:
 8010356:	440a      	add	r2, r1
 8010358:	1e43      	subs	r3, r0, #1
 801035a:	4291      	cmp	r1, r2
 801035c:	d100      	bne.n	8010360 <memcpy+0xa>
 801035e:	4770      	bx	lr
 8010360:	b510      	push	{r4, lr}
 8010362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010366:	4291      	cmp	r1, r2
 8010368:	f803 4f01 	strb.w	r4, [r3, #1]!
 801036c:	d1f9      	bne.n	8010362 <memcpy+0xc>
 801036e:	bd10      	pop	{r4, pc}

08010370 <quorem>:
 8010370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	6903      	ldr	r3, [r0, #16]
 8010376:	4607      	mov	r7, r0
 8010378:	690c      	ldr	r4, [r1, #16]
 801037a:	42a3      	cmp	r3, r4
 801037c:	f2c0 8083 	blt.w	8010486 <quorem+0x116>
 8010380:	3c01      	subs	r4, #1
 8010382:	f100 0514 	add.w	r5, r0, #20
 8010386:	f101 0814 	add.w	r8, r1, #20
 801038a:	00a3      	lsls	r3, r4, #2
 801038c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010390:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801039a:	9301      	str	r3, [sp, #4]
 801039c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80103a0:	3301      	adds	r3, #1
 80103a2:	429a      	cmp	r2, r3
 80103a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80103a8:	d331      	bcc.n	801040e <quorem+0x9e>
 80103aa:	f04f 0a00 	mov.w	sl, #0
 80103ae:	46c4      	mov	ip, r8
 80103b0:	46ae      	mov	lr, r5
 80103b2:	46d3      	mov	fp, sl
 80103b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80103b8:	b298      	uxth	r0, r3
 80103ba:	45e1      	cmp	r9, ip
 80103bc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80103c0:	fb06 a000 	mla	r0, r6, r0, sl
 80103c4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80103c8:	b280      	uxth	r0, r0
 80103ca:	fb06 2303 	mla	r3, r6, r3, r2
 80103ce:	f8de 2000 	ldr.w	r2, [lr]
 80103d2:	b292      	uxth	r2, r2
 80103d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103d8:	eba2 0200 	sub.w	r2, r2, r0
 80103dc:	b29b      	uxth	r3, r3
 80103de:	f8de 0000 	ldr.w	r0, [lr]
 80103e2:	445a      	add	r2, fp
 80103e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80103e8:	b292      	uxth	r2, r2
 80103ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80103ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80103f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80103f6:	f84e 2b04 	str.w	r2, [lr], #4
 80103fa:	d2db      	bcs.n	80103b4 <quorem+0x44>
 80103fc:	9b00      	ldr	r3, [sp, #0]
 80103fe:	58eb      	ldr	r3, [r5, r3]
 8010400:	b92b      	cbnz	r3, 801040e <quorem+0x9e>
 8010402:	9b01      	ldr	r3, [sp, #4]
 8010404:	3b04      	subs	r3, #4
 8010406:	429d      	cmp	r5, r3
 8010408:	461a      	mov	r2, r3
 801040a:	d330      	bcc.n	801046e <quorem+0xfe>
 801040c:	613c      	str	r4, [r7, #16]
 801040e:	4638      	mov	r0, r7
 8010410:	f001 f97e 	bl	8011710 <__mcmp>
 8010414:	2800      	cmp	r0, #0
 8010416:	db26      	blt.n	8010466 <quorem+0xf6>
 8010418:	4629      	mov	r1, r5
 801041a:	2000      	movs	r0, #0
 801041c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010420:	f8d1 c000 	ldr.w	ip, [r1]
 8010424:	fa1f fe82 	uxth.w	lr, r2
 8010428:	45c1      	cmp	r9, r8
 801042a:	fa1f f38c 	uxth.w	r3, ip
 801042e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010432:	eba3 030e 	sub.w	r3, r3, lr
 8010436:	4403      	add	r3, r0
 8010438:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801043c:	b29b      	uxth	r3, r3
 801043e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010446:	ea4f 4022 	mov.w	r0, r2, asr #16
 801044a:	f841 3b04 	str.w	r3, [r1], #4
 801044e:	d2e5      	bcs.n	801041c <quorem+0xac>
 8010450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010458:	b922      	cbnz	r2, 8010464 <quorem+0xf4>
 801045a:	3b04      	subs	r3, #4
 801045c:	429d      	cmp	r5, r3
 801045e:	461a      	mov	r2, r3
 8010460:	d30b      	bcc.n	801047a <quorem+0x10a>
 8010462:	613c      	str	r4, [r7, #16]
 8010464:	3601      	adds	r6, #1
 8010466:	4630      	mov	r0, r6
 8010468:	b003      	add	sp, #12
 801046a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046e:	6812      	ldr	r2, [r2, #0]
 8010470:	3b04      	subs	r3, #4
 8010472:	2a00      	cmp	r2, #0
 8010474:	d1ca      	bne.n	801040c <quorem+0x9c>
 8010476:	3c01      	subs	r4, #1
 8010478:	e7c5      	b.n	8010406 <quorem+0x96>
 801047a:	6812      	ldr	r2, [r2, #0]
 801047c:	3b04      	subs	r3, #4
 801047e:	2a00      	cmp	r2, #0
 8010480:	d1ef      	bne.n	8010462 <quorem+0xf2>
 8010482:	3c01      	subs	r4, #1
 8010484:	e7ea      	b.n	801045c <quorem+0xec>
 8010486:	2000      	movs	r0, #0
 8010488:	e7ee      	b.n	8010468 <quorem+0xf8>
 801048a:	0000      	movs	r0, r0
 801048c:	0000      	movs	r0, r0
	...

08010490 <_dtoa_r>:
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	69c7      	ldr	r7, [r0, #28]
 8010496:	b099      	sub	sp, #100	@ 0x64
 8010498:	4683      	mov	fp, r0
 801049a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801049c:	9109      	str	r1, [sp, #36]	@ 0x24
 801049e:	920e      	str	r2, [sp, #56]	@ 0x38
 80104a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80104a2:	ec55 4b10 	vmov	r4, r5, d0
 80104a6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80104aa:	b97f      	cbnz	r7, 80104cc <_dtoa_r+0x3c>
 80104ac:	2010      	movs	r0, #16
 80104ae:	f000 fdfd 	bl	80110ac <malloc>
 80104b2:	4602      	mov	r2, r0
 80104b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80104b8:	b920      	cbnz	r0, 80104c4 <_dtoa_r+0x34>
 80104ba:	4ba7      	ldr	r3, [pc, #668]	@ (8010758 <_dtoa_r+0x2c8>)
 80104bc:	21ef      	movs	r1, #239	@ 0xef
 80104be:	48a7      	ldr	r0, [pc, #668]	@ (801075c <_dtoa_r+0x2cc>)
 80104c0:	f001 fc60 	bl	8011d84 <__assert_func>
 80104c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80104c8:	6007      	str	r7, [r0, #0]
 80104ca:	60c7      	str	r7, [r0, #12]
 80104cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104d0:	6819      	ldr	r1, [r3, #0]
 80104d2:	b159      	cbz	r1, 80104ec <_dtoa_r+0x5c>
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	2301      	movs	r3, #1
 80104d8:	4658      	mov	r0, fp
 80104da:	4093      	lsls	r3, r2
 80104dc:	604a      	str	r2, [r1, #4]
 80104de:	608b      	str	r3, [r1, #8]
 80104e0:	f000 feda 	bl	8011298 <_Bfree>
 80104e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104e8:	2200      	movs	r2, #0
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	1e2b      	subs	r3, r5, #0
 80104ee:	bfb7      	itett	lt
 80104f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80104f4:	2300      	movge	r3, #0
 80104f6:	2201      	movlt	r2, #1
 80104f8:	9303      	strlt	r3, [sp, #12]
 80104fa:	bfa8      	it	ge
 80104fc:	6033      	strge	r3, [r6, #0]
 80104fe:	9f03      	ldr	r7, [sp, #12]
 8010500:	4b97      	ldr	r3, [pc, #604]	@ (8010760 <_dtoa_r+0x2d0>)
 8010502:	bfb8      	it	lt
 8010504:	6032      	strlt	r2, [r6, #0]
 8010506:	43bb      	bics	r3, r7
 8010508:	d112      	bne.n	8010530 <_dtoa_r+0xa0>
 801050a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801050e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010510:	6013      	str	r3, [r2, #0]
 8010512:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010516:	4323      	orrs	r3, r4
 8010518:	f000 854c 	beq.w	8010fb4 <_dtoa_r+0xb24>
 801051c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801051e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010774 <_dtoa_r+0x2e4>
 8010522:	2b00      	cmp	r3, #0
 8010524:	f000 854e 	beq.w	8010fc4 <_dtoa_r+0xb34>
 8010528:	f10a 0303 	add.w	r3, sl, #3
 801052c:	f000 bd48 	b.w	8010fc0 <_dtoa_r+0xb30>
 8010530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010534:	2200      	movs	r2, #0
 8010536:	2300      	movs	r3, #0
 8010538:	ec51 0b17 	vmov	r0, r1, d7
 801053c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010540:	f7f0 fad2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010544:	4680      	mov	r8, r0
 8010546:	b158      	cbz	r0, 8010560 <_dtoa_r+0xd0>
 8010548:	2301      	movs	r3, #1
 801054a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801054c:	6013      	str	r3, [r2, #0]
 801054e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010550:	b113      	cbz	r3, 8010558 <_dtoa_r+0xc8>
 8010552:	4b84      	ldr	r3, [pc, #528]	@ (8010764 <_dtoa_r+0x2d4>)
 8010554:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8010778 <_dtoa_r+0x2e8>
 801055c:	f000 bd32 	b.w	8010fc4 <_dtoa_r+0xb34>
 8010560:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010564:	aa16      	add	r2, sp, #88	@ 0x58
 8010566:	a917      	add	r1, sp, #92	@ 0x5c
 8010568:	4658      	mov	r0, fp
 801056a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801056e:	f001 f983 	bl	8011878 <__d2b>
 8010572:	4681      	mov	r9, r0
 8010574:	2e00      	cmp	r6, #0
 8010576:	d075      	beq.n	8010664 <_dtoa_r+0x1d4>
 8010578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801057a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801057e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010586:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801058a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801058e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010592:	4619      	mov	r1, r3
 8010594:	2200      	movs	r2, #0
 8010596:	4b74      	ldr	r3, [pc, #464]	@ (8010768 <_dtoa_r+0x2d8>)
 8010598:	f7ef fe86 	bl	80002a8 <__aeabi_dsub>
 801059c:	a368      	add	r3, pc, #416	@ (adr r3, 8010740 <_dtoa_r+0x2b0>)
 801059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a2:	f7f0 f839 	bl	8000618 <__aeabi_dmul>
 80105a6:	a368      	add	r3, pc, #416	@ (adr r3, 8010748 <_dtoa_r+0x2b8>)
 80105a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ac:	f7ef fe7e 	bl	80002ac <__adddf3>
 80105b0:	4604      	mov	r4, r0
 80105b2:	460d      	mov	r5, r1
 80105b4:	4630      	mov	r0, r6
 80105b6:	f7ef ffc5 	bl	8000544 <__aeabi_i2d>
 80105ba:	a365      	add	r3, pc, #404	@ (adr r3, 8010750 <_dtoa_r+0x2c0>)
 80105bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c0:	f7f0 f82a 	bl	8000618 <__aeabi_dmul>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	4620      	mov	r0, r4
 80105ca:	4629      	mov	r1, r5
 80105cc:	f7ef fe6e 	bl	80002ac <__adddf3>
 80105d0:	4604      	mov	r4, r0
 80105d2:	460d      	mov	r5, r1
 80105d4:	f7f0 fad0 	bl	8000b78 <__aeabi_d2iz>
 80105d8:	2200      	movs	r2, #0
 80105da:	4607      	mov	r7, r0
 80105dc:	2300      	movs	r3, #0
 80105de:	4620      	mov	r0, r4
 80105e0:	4629      	mov	r1, r5
 80105e2:	f7f0 fa8b 	bl	8000afc <__aeabi_dcmplt>
 80105e6:	b140      	cbz	r0, 80105fa <_dtoa_r+0x16a>
 80105e8:	4638      	mov	r0, r7
 80105ea:	f7ef ffab 	bl	8000544 <__aeabi_i2d>
 80105ee:	4622      	mov	r2, r4
 80105f0:	462b      	mov	r3, r5
 80105f2:	f7f0 fa79 	bl	8000ae8 <__aeabi_dcmpeq>
 80105f6:	b900      	cbnz	r0, 80105fa <_dtoa_r+0x16a>
 80105f8:	3f01      	subs	r7, #1
 80105fa:	2f16      	cmp	r7, #22
 80105fc:	d851      	bhi.n	80106a2 <_dtoa_r+0x212>
 80105fe:	4b5b      	ldr	r3, [pc, #364]	@ (801076c <_dtoa_r+0x2dc>)
 8010600:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060c:	f7f0 fa76 	bl	8000afc <__aeabi_dcmplt>
 8010610:	2800      	cmp	r0, #0
 8010612:	d048      	beq.n	80106a6 <_dtoa_r+0x216>
 8010614:	3f01      	subs	r7, #1
 8010616:	2300      	movs	r3, #0
 8010618:	9312      	str	r3, [sp, #72]	@ 0x48
 801061a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801061c:	1b9b      	subs	r3, r3, r6
 801061e:	1e5a      	subs	r2, r3, #1
 8010620:	bf46      	itte	mi
 8010622:	f1c3 0801 	rsbmi	r8, r3, #1
 8010626:	2300      	movmi	r3, #0
 8010628:	f04f 0800 	movpl.w	r8, #0
 801062c:	9208      	str	r2, [sp, #32]
 801062e:	bf48      	it	mi
 8010630:	9308      	strmi	r3, [sp, #32]
 8010632:	2f00      	cmp	r7, #0
 8010634:	db39      	blt.n	80106aa <_dtoa_r+0x21a>
 8010636:	9b08      	ldr	r3, [sp, #32]
 8010638:	970f      	str	r7, [sp, #60]	@ 0x3c
 801063a:	443b      	add	r3, r7
 801063c:	9308      	str	r3, [sp, #32]
 801063e:	2300      	movs	r3, #0
 8010640:	930a      	str	r3, [sp, #40]	@ 0x28
 8010642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010644:	2b09      	cmp	r3, #9
 8010646:	d864      	bhi.n	8010712 <_dtoa_r+0x282>
 8010648:	2b05      	cmp	r3, #5
 801064a:	bfc5      	ittet	gt
 801064c:	3b04      	subgt	r3, #4
 801064e:	2400      	movgt	r4, #0
 8010650:	2401      	movle	r4, #1
 8010652:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010656:	3b02      	subs	r3, #2
 8010658:	2b03      	cmp	r3, #3
 801065a:	d865      	bhi.n	8010728 <_dtoa_r+0x298>
 801065c:	e8df f003 	tbb	[pc, r3]
 8010660:	5737392c 	.word	0x5737392c
 8010664:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010668:	441e      	add	r6, r3
 801066a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801066e:	2b20      	cmp	r3, #32
 8010670:	bfc9      	itett	gt
 8010672:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010676:	f1c3 0320 	rsble	r3, r3, #32
 801067a:	409f      	lslgt	r7, r3
 801067c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010680:	bfd8      	it	le
 8010682:	fa04 f003 	lslle.w	r0, r4, r3
 8010686:	f106 36ff 	add.w	r6, r6, #4294967295
 801068a:	bfc4      	itt	gt
 801068c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010690:	ea47 0003 	orrgt.w	r0, r7, r3
 8010694:	f7ef ff46 	bl	8000524 <__aeabi_ui2d>
 8010698:	2201      	movs	r2, #1
 801069a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801069e:	9214      	str	r2, [sp, #80]	@ 0x50
 80106a0:	e777      	b.n	8010592 <_dtoa_r+0x102>
 80106a2:	2301      	movs	r3, #1
 80106a4:	e7b8      	b.n	8010618 <_dtoa_r+0x188>
 80106a6:	9012      	str	r0, [sp, #72]	@ 0x48
 80106a8:	e7b7      	b.n	801061a <_dtoa_r+0x18a>
 80106aa:	427b      	negs	r3, r7
 80106ac:	eba8 0807 	sub.w	r8, r8, r7
 80106b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80106b2:	2300      	movs	r3, #0
 80106b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80106b6:	e7c4      	b.n	8010642 <_dtoa_r+0x1b2>
 80106b8:	2300      	movs	r3, #0
 80106ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106be:	2b00      	cmp	r3, #0
 80106c0:	dc35      	bgt.n	801072e <_dtoa_r+0x29e>
 80106c2:	2301      	movs	r3, #1
 80106c4:	461a      	mov	r2, r3
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	9307      	str	r3, [sp, #28]
 80106ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80106cc:	e00b      	b.n	80106e6 <_dtoa_r+0x256>
 80106ce:	2301      	movs	r3, #1
 80106d0:	e7f3      	b.n	80106ba <_dtoa_r+0x22a>
 80106d2:	2300      	movs	r3, #0
 80106d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106d8:	18fb      	adds	r3, r7, r3
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	2b01      	cmp	r3, #1
 80106e0:	9307      	str	r3, [sp, #28]
 80106e2:	bfb8      	it	lt
 80106e4:	2301      	movlt	r3, #1
 80106e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80106ea:	2100      	movs	r1, #0
 80106ec:	2204      	movs	r2, #4
 80106ee:	f102 0514 	add.w	r5, r2, #20
 80106f2:	429d      	cmp	r5, r3
 80106f4:	d91f      	bls.n	8010736 <_dtoa_r+0x2a6>
 80106f6:	6041      	str	r1, [r0, #4]
 80106f8:	4658      	mov	r0, fp
 80106fa:	f000 fd8d 	bl	8011218 <_Balloc>
 80106fe:	4682      	mov	sl, r0
 8010700:	2800      	cmp	r0, #0
 8010702:	d13b      	bne.n	801077c <_dtoa_r+0x2ec>
 8010704:	4b1a      	ldr	r3, [pc, #104]	@ (8010770 <_dtoa_r+0x2e0>)
 8010706:	4602      	mov	r2, r0
 8010708:	f240 11af 	movw	r1, #431	@ 0x1af
 801070c:	e6d7      	b.n	80104be <_dtoa_r+0x2e>
 801070e:	2301      	movs	r3, #1
 8010710:	e7e0      	b.n	80106d4 <_dtoa_r+0x244>
 8010712:	2401      	movs	r4, #1
 8010714:	2300      	movs	r3, #0
 8010716:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010718:	9309      	str	r3, [sp, #36]	@ 0x24
 801071a:	f04f 33ff 	mov.w	r3, #4294967295
 801071e:	2200      	movs	r2, #0
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	9307      	str	r3, [sp, #28]
 8010724:	2312      	movs	r3, #18
 8010726:	e7d0      	b.n	80106ca <_dtoa_r+0x23a>
 8010728:	2301      	movs	r3, #1
 801072a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801072c:	e7f5      	b.n	801071a <_dtoa_r+0x28a>
 801072e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010730:	9300      	str	r3, [sp, #0]
 8010732:	9307      	str	r3, [sp, #28]
 8010734:	e7d7      	b.n	80106e6 <_dtoa_r+0x256>
 8010736:	3101      	adds	r1, #1
 8010738:	0052      	lsls	r2, r2, #1
 801073a:	e7d8      	b.n	80106ee <_dtoa_r+0x25e>
 801073c:	f3af 8000 	nop.w
 8010740:	636f4361 	.word	0x636f4361
 8010744:	3fd287a7 	.word	0x3fd287a7
 8010748:	8b60c8b3 	.word	0x8b60c8b3
 801074c:	3fc68a28 	.word	0x3fc68a28
 8010750:	509f79fb 	.word	0x509f79fb
 8010754:	3fd34413 	.word	0x3fd34413
 8010758:	0801266d 	.word	0x0801266d
 801075c:	08012684 	.word	0x08012684
 8010760:	7ff00000 	.word	0x7ff00000
 8010764:	0801263d 	.word	0x0801263d
 8010768:	3ff80000 	.word	0x3ff80000
 801076c:	08012780 	.word	0x08012780
 8010770:	080126dc 	.word	0x080126dc
 8010774:	08012669 	.word	0x08012669
 8010778:	0801263c 	.word	0x0801263c
 801077c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010780:	6018      	str	r0, [r3, #0]
 8010782:	9b07      	ldr	r3, [sp, #28]
 8010784:	2b0e      	cmp	r3, #14
 8010786:	f200 80a4 	bhi.w	80108d2 <_dtoa_r+0x442>
 801078a:	2c00      	cmp	r4, #0
 801078c:	f000 80a1 	beq.w	80108d2 <_dtoa_r+0x442>
 8010790:	2f00      	cmp	r7, #0
 8010792:	dd33      	ble.n	80107fc <_dtoa_r+0x36c>
 8010794:	f007 020f 	and.w	r2, r7, #15
 8010798:	4bac      	ldr	r3, [pc, #688]	@ (8010a4c <_dtoa_r+0x5bc>)
 801079a:	05f8      	lsls	r0, r7, #23
 801079c:	ea4f 1427 	mov.w	r4, r7, asr #4
 80107a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107a4:	ed93 7b00 	vldr	d7, [r3]
 80107a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80107ac:	d516      	bpl.n	80107dc <_dtoa_r+0x34c>
 80107ae:	4ba8      	ldr	r3, [pc, #672]	@ (8010a50 <_dtoa_r+0x5c0>)
 80107b0:	f004 040f 	and.w	r4, r4, #15
 80107b4:	2603      	movs	r6, #3
 80107b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80107ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107be:	f7f0 f855 	bl	800086c <__aeabi_ddiv>
 80107c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107c6:	4da2      	ldr	r5, [pc, #648]	@ (8010a50 <_dtoa_r+0x5c0>)
 80107c8:	b954      	cbnz	r4, 80107e0 <_dtoa_r+0x350>
 80107ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d2:	f7f0 f84b 	bl	800086c <__aeabi_ddiv>
 80107d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107da:	e028      	b.n	801082e <_dtoa_r+0x39e>
 80107dc:	2602      	movs	r6, #2
 80107de:	e7f2      	b.n	80107c6 <_dtoa_r+0x336>
 80107e0:	07e1      	lsls	r1, r4, #31
 80107e2:	d508      	bpl.n	80107f6 <_dtoa_r+0x366>
 80107e4:	3601      	adds	r6, #1
 80107e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80107ee:	f7ef ff13 	bl	8000618 <__aeabi_dmul>
 80107f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107f6:	1064      	asrs	r4, r4, #1
 80107f8:	3508      	adds	r5, #8
 80107fa:	e7e5      	b.n	80107c8 <_dtoa_r+0x338>
 80107fc:	f000 80d2 	beq.w	80109a4 <_dtoa_r+0x514>
 8010800:	427c      	negs	r4, r7
 8010802:	4b92      	ldr	r3, [pc, #584]	@ (8010a4c <_dtoa_r+0x5bc>)
 8010804:	4d92      	ldr	r5, [pc, #584]	@ (8010a50 <_dtoa_r+0x5c0>)
 8010806:	2602      	movs	r6, #2
 8010808:	f004 020f 	and.w	r2, r4, #15
 801080c:	1124      	asrs	r4, r4, #4
 801080e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081a:	f7ef fefd 	bl	8000618 <__aeabi_dmul>
 801081e:	2300      	movs	r3, #0
 8010820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010824:	2c00      	cmp	r4, #0
 8010826:	f040 80b2 	bne.w	801098e <_dtoa_r+0x4fe>
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1d3      	bne.n	80107d6 <_dtoa_r+0x346>
 801082e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010830:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 80b7 	beq.w	80109a8 <_dtoa_r+0x518>
 801083a:	2200      	movs	r2, #0
 801083c:	4b85      	ldr	r3, [pc, #532]	@ (8010a54 <_dtoa_r+0x5c4>)
 801083e:	4620      	mov	r0, r4
 8010840:	4629      	mov	r1, r5
 8010842:	f7f0 f95b 	bl	8000afc <__aeabi_dcmplt>
 8010846:	2800      	cmp	r0, #0
 8010848:	f000 80ae 	beq.w	80109a8 <_dtoa_r+0x518>
 801084c:	9b07      	ldr	r3, [sp, #28]
 801084e:	2b00      	cmp	r3, #0
 8010850:	f000 80aa 	beq.w	80109a8 <_dtoa_r+0x518>
 8010854:	9b00      	ldr	r3, [sp, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	dd37      	ble.n	80108ca <_dtoa_r+0x43a>
 801085a:	1e7b      	subs	r3, r7, #1
 801085c:	4620      	mov	r0, r4
 801085e:	2200      	movs	r2, #0
 8010860:	4629      	mov	r1, r5
 8010862:	9304      	str	r3, [sp, #16]
 8010864:	3601      	adds	r6, #1
 8010866:	4b7c      	ldr	r3, [pc, #496]	@ (8010a58 <_dtoa_r+0x5c8>)
 8010868:	f7ef fed6 	bl	8000618 <__aeabi_dmul>
 801086c:	9c00      	ldr	r4, [sp, #0]
 801086e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010872:	4630      	mov	r0, r6
 8010874:	f7ef fe66 	bl	8000544 <__aeabi_i2d>
 8010878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801087c:	f7ef fecc 	bl	8000618 <__aeabi_dmul>
 8010880:	2200      	movs	r2, #0
 8010882:	4b76      	ldr	r3, [pc, #472]	@ (8010a5c <_dtoa_r+0x5cc>)
 8010884:	f7ef fd12 	bl	80002ac <__adddf3>
 8010888:	4605      	mov	r5, r0
 801088a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801088e:	2c00      	cmp	r4, #0
 8010890:	f040 808d 	bne.w	80109ae <_dtoa_r+0x51e>
 8010894:	2200      	movs	r2, #0
 8010896:	4b72      	ldr	r3, [pc, #456]	@ (8010a60 <_dtoa_r+0x5d0>)
 8010898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801089c:	f7ef fd04 	bl	80002a8 <__aeabi_dsub>
 80108a0:	4602      	mov	r2, r0
 80108a2:	460b      	mov	r3, r1
 80108a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80108a8:	462a      	mov	r2, r5
 80108aa:	4633      	mov	r3, r6
 80108ac:	f7f0 f944 	bl	8000b38 <__aeabi_dcmpgt>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	f040 828b 	bne.w	8010dcc <_dtoa_r+0x93c>
 80108b6:	462a      	mov	r2, r5
 80108b8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80108bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108c0:	f7f0 f91c 	bl	8000afc <__aeabi_dcmplt>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f040 8128 	bne.w	8010b1a <_dtoa_r+0x68a>
 80108ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80108ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80108d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f2c0 815a 	blt.w	8010b8e <_dtoa_r+0x6fe>
 80108da:	2f0e      	cmp	r7, #14
 80108dc:	f300 8157 	bgt.w	8010b8e <_dtoa_r+0x6fe>
 80108e0:	4b5a      	ldr	r3, [pc, #360]	@ (8010a4c <_dtoa_r+0x5bc>)
 80108e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80108e6:	ed93 7b00 	vldr	d7, [r3]
 80108ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	ed8d 7b00 	vstr	d7, [sp]
 80108f2:	da03      	bge.n	80108fc <_dtoa_r+0x46c>
 80108f4:	9b07      	ldr	r3, [sp, #28]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	f340 8101 	ble.w	8010afe <_dtoa_r+0x66e>
 80108fc:	4656      	mov	r6, sl
 80108fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010902:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010906:	4620      	mov	r0, r4
 8010908:	4629      	mov	r1, r5
 801090a:	f7ef ffaf 	bl	800086c <__aeabi_ddiv>
 801090e:	f7f0 f933 	bl	8000b78 <__aeabi_d2iz>
 8010912:	4680      	mov	r8, r0
 8010914:	f7ef fe16 	bl	8000544 <__aeabi_i2d>
 8010918:	e9dd 2300 	ldrd	r2, r3, [sp]
 801091c:	f7ef fe7c 	bl	8000618 <__aeabi_dmul>
 8010920:	4602      	mov	r2, r0
 8010922:	4620      	mov	r0, r4
 8010924:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010928:	460b      	mov	r3, r1
 801092a:	4629      	mov	r1, r5
 801092c:	f7ef fcbc 	bl	80002a8 <__aeabi_dsub>
 8010930:	9d07      	ldr	r5, [sp, #28]
 8010932:	f806 4b01 	strb.w	r4, [r6], #1
 8010936:	eba6 040a 	sub.w	r4, r6, sl
 801093a:	4602      	mov	r2, r0
 801093c:	460b      	mov	r3, r1
 801093e:	42a5      	cmp	r5, r4
 8010940:	f040 8117 	bne.w	8010b72 <_dtoa_r+0x6e2>
 8010944:	f7ef fcb2 	bl	80002ac <__adddf3>
 8010948:	4604      	mov	r4, r0
 801094a:	460d      	mov	r5, r1
 801094c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010950:	f7f0 f8f2 	bl	8000b38 <__aeabi_dcmpgt>
 8010954:	2800      	cmp	r0, #0
 8010956:	f040 80f9 	bne.w	8010b4c <_dtoa_r+0x6bc>
 801095a:	4620      	mov	r0, r4
 801095c:	4629      	mov	r1, r5
 801095e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010962:	f7f0 f8c1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010966:	b118      	cbz	r0, 8010970 <_dtoa_r+0x4e0>
 8010968:	f018 0f01 	tst.w	r8, #1
 801096c:	f040 80ee 	bne.w	8010b4c <_dtoa_r+0x6bc>
 8010970:	4649      	mov	r1, r9
 8010972:	4658      	mov	r0, fp
 8010974:	f000 fc90 	bl	8011298 <_Bfree>
 8010978:	2300      	movs	r3, #0
 801097a:	3701      	adds	r7, #1
 801097c:	7033      	strb	r3, [r6, #0]
 801097e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010980:	601f      	str	r7, [r3, #0]
 8010982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 831d 	beq.w	8010fc4 <_dtoa_r+0xb34>
 801098a:	601e      	str	r6, [r3, #0]
 801098c:	e31a      	b.n	8010fc4 <_dtoa_r+0xb34>
 801098e:	07e2      	lsls	r2, r4, #31
 8010990:	d505      	bpl.n	801099e <_dtoa_r+0x50e>
 8010992:	3601      	adds	r6, #1
 8010994:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010998:	f7ef fe3e 	bl	8000618 <__aeabi_dmul>
 801099c:	2301      	movs	r3, #1
 801099e:	1064      	asrs	r4, r4, #1
 80109a0:	3508      	adds	r5, #8
 80109a2:	e73f      	b.n	8010824 <_dtoa_r+0x394>
 80109a4:	2602      	movs	r6, #2
 80109a6:	e742      	b.n	801082e <_dtoa_r+0x39e>
 80109a8:	9c07      	ldr	r4, [sp, #28]
 80109aa:	9704      	str	r7, [sp, #16]
 80109ac:	e761      	b.n	8010872 <_dtoa_r+0x3e2>
 80109ae:	4b27      	ldr	r3, [pc, #156]	@ (8010a4c <_dtoa_r+0x5bc>)
 80109b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80109b6:	4454      	add	r4, sl
 80109b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80109bc:	2900      	cmp	r1, #0
 80109be:	d053      	beq.n	8010a68 <_dtoa_r+0x5d8>
 80109c0:	2000      	movs	r0, #0
 80109c2:	4928      	ldr	r1, [pc, #160]	@ (8010a64 <_dtoa_r+0x5d4>)
 80109c4:	f7ef ff52 	bl	800086c <__aeabi_ddiv>
 80109c8:	4633      	mov	r3, r6
 80109ca:	4656      	mov	r6, sl
 80109cc:	462a      	mov	r2, r5
 80109ce:	f7ef fc6b 	bl	80002a8 <__aeabi_dsub>
 80109d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80109d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109da:	f7f0 f8cd 	bl	8000b78 <__aeabi_d2iz>
 80109de:	4605      	mov	r5, r0
 80109e0:	f7ef fdb0 	bl	8000544 <__aeabi_i2d>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	3530      	adds	r5, #48	@ 0x30
 80109ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ee:	f7ef fc5b 	bl	80002a8 <__aeabi_dsub>
 80109f2:	4602      	mov	r2, r0
 80109f4:	460b      	mov	r3, r1
 80109f6:	f806 5b01 	strb.w	r5, [r6], #1
 80109fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a02:	f7f0 f87b 	bl	8000afc <__aeabi_dcmplt>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d171      	bne.n	8010aee <_dtoa_r+0x65e>
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	4911      	ldr	r1, [pc, #68]	@ (8010a54 <_dtoa_r+0x5c4>)
 8010a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a12:	f7ef fc49 	bl	80002a8 <__aeabi_dsub>
 8010a16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a1a:	f7f0 f86f 	bl	8000afc <__aeabi_dcmplt>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f040 8095 	bne.w	8010b4e <_dtoa_r+0x6be>
 8010a24:	42a6      	cmp	r6, r4
 8010a26:	f43f af50 	beq.w	80108ca <_dtoa_r+0x43a>
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a58 <_dtoa_r+0x5c8>)
 8010a2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a32:	f7ef fdf1 	bl	8000618 <__aeabi_dmul>
 8010a36:	2200      	movs	r2, #0
 8010a38:	4b07      	ldr	r3, [pc, #28]	@ (8010a58 <_dtoa_r+0x5c8>)
 8010a3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a42:	f7ef fde9 	bl	8000618 <__aeabi_dmul>
 8010a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a4a:	e7c4      	b.n	80109d6 <_dtoa_r+0x546>
 8010a4c:	08012780 	.word	0x08012780
 8010a50:	08012758 	.word	0x08012758
 8010a54:	3ff00000 	.word	0x3ff00000
 8010a58:	40240000 	.word	0x40240000
 8010a5c:	401c0000 	.word	0x401c0000
 8010a60:	40140000 	.word	0x40140000
 8010a64:	3fe00000 	.word	0x3fe00000
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4656      	mov	r6, sl
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f7ef fdd3 	bl	8000618 <__aeabi_dmul>
 8010a72:	9415      	str	r4, [sp, #84]	@ 0x54
 8010a74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a7c:	f7f0 f87c 	bl	8000b78 <__aeabi_d2iz>
 8010a80:	4605      	mov	r5, r0
 8010a82:	f7ef fd5f 	bl	8000544 <__aeabi_i2d>
 8010a86:	4602      	mov	r2, r0
 8010a88:	3530      	adds	r5, #48	@ 0x30
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a90:	f7ef fc0a 	bl	80002a8 <__aeabi_dsub>
 8010a94:	f806 5b01 	strb.w	r5, [r6], #1
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	42a6      	cmp	r6, r4
 8010a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010aa2:	f04f 0200 	mov.w	r2, #0
 8010aa6:	d124      	bne.n	8010af2 <_dtoa_r+0x662>
 8010aa8:	4bac      	ldr	r3, [pc, #688]	@ (8010d5c <_dtoa_r+0x8cc>)
 8010aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010aae:	f7ef fbfd 	bl	80002ac <__adddf3>
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aba:	f7f0 f83d 	bl	8000b38 <__aeabi_dcmpgt>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d145      	bne.n	8010b4e <_dtoa_r+0x6be>
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	49a5      	ldr	r1, [pc, #660]	@ (8010d5c <_dtoa_r+0x8cc>)
 8010ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010aca:	f7ef fbed 	bl	80002a8 <__aeabi_dsub>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ad6:	f7f0 f811 	bl	8000afc <__aeabi_dcmplt>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	f43f aef5 	beq.w	80108ca <_dtoa_r+0x43a>
 8010ae0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010ae2:	1e73      	subs	r3, r6, #1
 8010ae4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ae6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010aea:	2b30      	cmp	r3, #48	@ 0x30
 8010aec:	d0f8      	beq.n	8010ae0 <_dtoa_r+0x650>
 8010aee:	9f04      	ldr	r7, [sp, #16]
 8010af0:	e73e      	b.n	8010970 <_dtoa_r+0x4e0>
 8010af2:	4b9b      	ldr	r3, [pc, #620]	@ (8010d60 <_dtoa_r+0x8d0>)
 8010af4:	f7ef fd90 	bl	8000618 <__aeabi_dmul>
 8010af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010afc:	e7bc      	b.n	8010a78 <_dtoa_r+0x5e8>
 8010afe:	d10c      	bne.n	8010b1a <_dtoa_r+0x68a>
 8010b00:	2200      	movs	r2, #0
 8010b02:	4b98      	ldr	r3, [pc, #608]	@ (8010d64 <_dtoa_r+0x8d4>)
 8010b04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b08:	f7ef fd86 	bl	8000618 <__aeabi_dmul>
 8010b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b10:	f7f0 f808 	bl	8000b24 <__aeabi_dcmpge>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	f000 8157 	beq.w	8010dc8 <_dtoa_r+0x938>
 8010b1a:	2400      	movs	r4, #0
 8010b1c:	4625      	mov	r5, r4
 8010b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b20:	4656      	mov	r6, sl
 8010b22:	43db      	mvns	r3, r3
 8010b24:	9304      	str	r3, [sp, #16]
 8010b26:	2700      	movs	r7, #0
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4658      	mov	r0, fp
 8010b2c:	f000 fbb4 	bl	8011298 <_Bfree>
 8010b30:	2d00      	cmp	r5, #0
 8010b32:	d0dc      	beq.n	8010aee <_dtoa_r+0x65e>
 8010b34:	b12f      	cbz	r7, 8010b42 <_dtoa_r+0x6b2>
 8010b36:	42af      	cmp	r7, r5
 8010b38:	d003      	beq.n	8010b42 <_dtoa_r+0x6b2>
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	4658      	mov	r0, fp
 8010b3e:	f000 fbab 	bl	8011298 <_Bfree>
 8010b42:	4629      	mov	r1, r5
 8010b44:	4658      	mov	r0, fp
 8010b46:	f000 fba7 	bl	8011298 <_Bfree>
 8010b4a:	e7d0      	b.n	8010aee <_dtoa_r+0x65e>
 8010b4c:	9704      	str	r7, [sp, #16]
 8010b4e:	4633      	mov	r3, r6
 8010b50:	461e      	mov	r6, r3
 8010b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b56:	2a39      	cmp	r2, #57	@ 0x39
 8010b58:	d107      	bne.n	8010b6a <_dtoa_r+0x6da>
 8010b5a:	459a      	cmp	sl, r3
 8010b5c:	d1f8      	bne.n	8010b50 <_dtoa_r+0x6c0>
 8010b5e:	9a04      	ldr	r2, [sp, #16]
 8010b60:	3201      	adds	r2, #1
 8010b62:	9204      	str	r2, [sp, #16]
 8010b64:	2230      	movs	r2, #48	@ 0x30
 8010b66:	f88a 2000 	strb.w	r2, [sl]
 8010b6a:	781a      	ldrb	r2, [r3, #0]
 8010b6c:	3201      	adds	r2, #1
 8010b6e:	701a      	strb	r2, [r3, #0]
 8010b70:	e7bd      	b.n	8010aee <_dtoa_r+0x65e>
 8010b72:	2200      	movs	r2, #0
 8010b74:	4b7a      	ldr	r3, [pc, #488]	@ (8010d60 <_dtoa_r+0x8d0>)
 8010b76:	f7ef fd4f 	bl	8000618 <__aeabi_dmul>
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	4604      	mov	r4, r0
 8010b80:	460d      	mov	r5, r1
 8010b82:	f7ef ffb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b86:	2800      	cmp	r0, #0
 8010b88:	f43f aebb 	beq.w	8010902 <_dtoa_r+0x472>
 8010b8c:	e6f0      	b.n	8010970 <_dtoa_r+0x4e0>
 8010b8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	f000 80db 	beq.w	8010d4c <_dtoa_r+0x8bc>
 8010b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b98:	2a01      	cmp	r2, #1
 8010b9a:	f300 80bf 	bgt.w	8010d1c <_dtoa_r+0x88c>
 8010b9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010ba0:	2a00      	cmp	r2, #0
 8010ba2:	f000 80b7 	beq.w	8010d14 <_dtoa_r+0x884>
 8010ba6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010baa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010bac:	4646      	mov	r6, r8
 8010bae:	9a08      	ldr	r2, [sp, #32]
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	4658      	mov	r0, fp
 8010bb4:	4498      	add	r8, r3
 8010bb6:	441a      	add	r2, r3
 8010bb8:	9208      	str	r2, [sp, #32]
 8010bba:	f000 fc23 	bl	8011404 <__i2b>
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	b15e      	cbz	r6, 8010bda <_dtoa_r+0x74a>
 8010bc2:	9b08      	ldr	r3, [sp, #32]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	dd08      	ble.n	8010bda <_dtoa_r+0x74a>
 8010bc8:	42b3      	cmp	r3, r6
 8010bca:	9a08      	ldr	r2, [sp, #32]
 8010bcc:	bfa8      	it	ge
 8010bce:	4633      	movge	r3, r6
 8010bd0:	eba8 0803 	sub.w	r8, r8, r3
 8010bd4:	1af6      	subs	r6, r6, r3
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	9308      	str	r3, [sp, #32]
 8010bda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bdc:	b1f3      	cbz	r3, 8010c1c <_dtoa_r+0x78c>
 8010bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 80b7 	beq.w	8010d54 <_dtoa_r+0x8c4>
 8010be6:	b18c      	cbz	r4, 8010c0c <_dtoa_r+0x77c>
 8010be8:	4629      	mov	r1, r5
 8010bea:	4622      	mov	r2, r4
 8010bec:	4658      	mov	r0, fp
 8010bee:	f000 fcc9 	bl	8011584 <__pow5mult>
 8010bf2:	464a      	mov	r2, r9
 8010bf4:	4601      	mov	r1, r0
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	4658      	mov	r0, fp
 8010bfa:	f000 fc19 	bl	8011430 <__multiply>
 8010bfe:	4649      	mov	r1, r9
 8010c00:	9004      	str	r0, [sp, #16]
 8010c02:	4658      	mov	r0, fp
 8010c04:	f000 fb48 	bl	8011298 <_Bfree>
 8010c08:	9b04      	ldr	r3, [sp, #16]
 8010c0a:	4699      	mov	r9, r3
 8010c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c0e:	1b1a      	subs	r2, r3, r4
 8010c10:	d004      	beq.n	8010c1c <_dtoa_r+0x78c>
 8010c12:	4649      	mov	r1, r9
 8010c14:	4658      	mov	r0, fp
 8010c16:	f000 fcb5 	bl	8011584 <__pow5mult>
 8010c1a:	4681      	mov	r9, r0
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	4658      	mov	r0, fp
 8010c20:	f000 fbf0 	bl	8011404 <__i2b>
 8010c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c26:	4604      	mov	r4, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 81cf 	beq.w	8010fcc <_dtoa_r+0xb3c>
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4601      	mov	r1, r0
 8010c32:	4658      	mov	r0, fp
 8010c34:	f000 fca6 	bl	8011584 <__pow5mult>
 8010c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	f300 8095 	bgt.w	8010d6c <_dtoa_r+0x8dc>
 8010c42:	9b02      	ldr	r3, [sp, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f040 8087 	bne.w	8010d58 <_dtoa_r+0x8c8>
 8010c4a:	9b03      	ldr	r3, [sp, #12]
 8010c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f040 8089 	bne.w	8010d68 <_dtoa_r+0x8d8>
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c5c:	0d1b      	lsrs	r3, r3, #20
 8010c5e:	051b      	lsls	r3, r3, #20
 8010c60:	b12b      	cbz	r3, 8010c6e <_dtoa_r+0x7de>
 8010c62:	9b08      	ldr	r3, [sp, #32]
 8010c64:	f108 0801 	add.w	r8, r8, #1
 8010c68:	3301      	adds	r3, #1
 8010c6a:	9308      	str	r3, [sp, #32]
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 81b0 	beq.w	8010fd8 <_dtoa_r+0xb48>
 8010c78:	6923      	ldr	r3, [r4, #16]
 8010c7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c7e:	6918      	ldr	r0, [r3, #16]
 8010c80:	f000 fb74 	bl	801136c <__hi0bits>
 8010c84:	f1c0 0020 	rsb	r0, r0, #32
 8010c88:	9b08      	ldr	r3, [sp, #32]
 8010c8a:	4418      	add	r0, r3
 8010c8c:	f010 001f 	ands.w	r0, r0, #31
 8010c90:	d077      	beq.n	8010d82 <_dtoa_r+0x8f2>
 8010c92:	f1c0 0320 	rsb	r3, r0, #32
 8010c96:	2b04      	cmp	r3, #4
 8010c98:	dd6b      	ble.n	8010d72 <_dtoa_r+0x8e2>
 8010c9a:	f1c0 001c 	rsb	r0, r0, #28
 8010c9e:	9b08      	ldr	r3, [sp, #32]
 8010ca0:	4480      	add	r8, r0
 8010ca2:	4403      	add	r3, r0
 8010ca4:	4406      	add	r6, r0
 8010ca6:	9308      	str	r3, [sp, #32]
 8010ca8:	f1b8 0f00 	cmp.w	r8, #0
 8010cac:	dd05      	ble.n	8010cba <_dtoa_r+0x82a>
 8010cae:	4649      	mov	r1, r9
 8010cb0:	4642      	mov	r2, r8
 8010cb2:	4658      	mov	r0, fp
 8010cb4:	f000 fcc0 	bl	8011638 <__lshift>
 8010cb8:	4681      	mov	r9, r0
 8010cba:	9b08      	ldr	r3, [sp, #32]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	dd05      	ble.n	8010ccc <_dtoa_r+0x83c>
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	4658      	mov	r0, fp
 8010cc6:	f000 fcb7 	bl	8011638 <__lshift>
 8010cca:	4604      	mov	r4, r0
 8010ccc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d059      	beq.n	8010d86 <_dtoa_r+0x8f6>
 8010cd2:	4621      	mov	r1, r4
 8010cd4:	4648      	mov	r0, r9
 8010cd6:	f000 fd1b 	bl	8011710 <__mcmp>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	da53      	bge.n	8010d86 <_dtoa_r+0x8f6>
 8010cde:	1e7b      	subs	r3, r7, #1
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	220a      	movs	r2, #10
 8010ce4:	4658      	mov	r0, fp
 8010ce6:	9304      	str	r3, [sp, #16]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	f000 faf7 	bl	80112dc <__multadd>
 8010cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cf0:	4681      	mov	r9, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 8172 	beq.w	8010fdc <_dtoa_r+0xb4c>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	220a      	movs	r2, #10
 8010cfe:	4658      	mov	r0, fp
 8010d00:	f000 faec 	bl	80112dc <__multadd>
 8010d04:	9b00      	ldr	r3, [sp, #0]
 8010d06:	4605      	mov	r5, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	dc67      	bgt.n	8010ddc <_dtoa_r+0x94c>
 8010d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	dc41      	bgt.n	8010d96 <_dtoa_r+0x906>
 8010d12:	e063      	b.n	8010ddc <_dtoa_r+0x94c>
 8010d14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010d16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010d1a:	e746      	b.n	8010baa <_dtoa_r+0x71a>
 8010d1c:	9b07      	ldr	r3, [sp, #28]
 8010d1e:	1e5c      	subs	r4, r3, #1
 8010d20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d22:	42a3      	cmp	r3, r4
 8010d24:	bfb7      	itett	lt
 8010d26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010d28:	1b1c      	subge	r4, r3, r4
 8010d2a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010d2c:	1ae3      	sublt	r3, r4, r3
 8010d2e:	bfbe      	ittt	lt
 8010d30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010d32:	2400      	movlt	r4, #0
 8010d34:	18d2      	addlt	r2, r2, r3
 8010d36:	9b07      	ldr	r3, [sp, #28]
 8010d38:	bfb8      	it	lt
 8010d3a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	bfb5      	itete	lt
 8010d40:	eba8 0603 	sublt.w	r6, r8, r3
 8010d44:	4646      	movge	r6, r8
 8010d46:	2300      	movlt	r3, #0
 8010d48:	9b07      	ldrge	r3, [sp, #28]
 8010d4a:	e730      	b.n	8010bae <_dtoa_r+0x71e>
 8010d4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010d4e:	4646      	mov	r6, r8
 8010d50:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010d52:	e735      	b.n	8010bc0 <_dtoa_r+0x730>
 8010d54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d56:	e75c      	b.n	8010c12 <_dtoa_r+0x782>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e788      	b.n	8010c6e <_dtoa_r+0x7de>
 8010d5c:	3fe00000 	.word	0x3fe00000
 8010d60:	40240000 	.word	0x40240000
 8010d64:	40140000 	.word	0x40140000
 8010d68:	9b02      	ldr	r3, [sp, #8]
 8010d6a:	e780      	b.n	8010c6e <_dtoa_r+0x7de>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d70:	e782      	b.n	8010c78 <_dtoa_r+0x7e8>
 8010d72:	d099      	beq.n	8010ca8 <_dtoa_r+0x818>
 8010d74:	331c      	adds	r3, #28
 8010d76:	9a08      	ldr	r2, [sp, #32]
 8010d78:	441a      	add	r2, r3
 8010d7a:	4498      	add	r8, r3
 8010d7c:	441e      	add	r6, r3
 8010d7e:	9208      	str	r2, [sp, #32]
 8010d80:	e792      	b.n	8010ca8 <_dtoa_r+0x818>
 8010d82:	4603      	mov	r3, r0
 8010d84:	e7f6      	b.n	8010d74 <_dtoa_r+0x8e4>
 8010d86:	9b07      	ldr	r3, [sp, #28]
 8010d88:	9704      	str	r7, [sp, #16]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	dc20      	bgt.n	8010dd0 <_dtoa_r+0x940>
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d92:	2b02      	cmp	r3, #2
 8010d94:	dd1e      	ble.n	8010dd4 <_dtoa_r+0x944>
 8010d96:	9b00      	ldr	r3, [sp, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f47f aec0 	bne.w	8010b1e <_dtoa_r+0x68e>
 8010d9e:	4621      	mov	r1, r4
 8010da0:	2205      	movs	r2, #5
 8010da2:	4658      	mov	r0, fp
 8010da4:	f000 fa9a 	bl	80112dc <__multadd>
 8010da8:	4601      	mov	r1, r0
 8010daa:	4604      	mov	r4, r0
 8010dac:	4648      	mov	r0, r9
 8010dae:	f000 fcaf 	bl	8011710 <__mcmp>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f77f aeb3 	ble.w	8010b1e <_dtoa_r+0x68e>
 8010db8:	2331      	movs	r3, #49	@ 0x31
 8010dba:	4656      	mov	r6, sl
 8010dbc:	f806 3b01 	strb.w	r3, [r6], #1
 8010dc0:	9b04      	ldr	r3, [sp, #16]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	9304      	str	r3, [sp, #16]
 8010dc6:	e6ae      	b.n	8010b26 <_dtoa_r+0x696>
 8010dc8:	9c07      	ldr	r4, [sp, #28]
 8010dca:	9704      	str	r7, [sp, #16]
 8010dcc:	4625      	mov	r5, r4
 8010dce:	e7f3      	b.n	8010db8 <_dtoa_r+0x928>
 8010dd0:	9b07      	ldr	r3, [sp, #28]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f000 8104 	beq.w	8010fe4 <_dtoa_r+0xb54>
 8010ddc:	2e00      	cmp	r6, #0
 8010dde:	dd05      	ble.n	8010dec <_dtoa_r+0x95c>
 8010de0:	4629      	mov	r1, r5
 8010de2:	4632      	mov	r2, r6
 8010de4:	4658      	mov	r0, fp
 8010de6:	f000 fc27 	bl	8011638 <__lshift>
 8010dea:	4605      	mov	r5, r0
 8010dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d05a      	beq.n	8010ea8 <_dtoa_r+0xa18>
 8010df2:	6869      	ldr	r1, [r5, #4]
 8010df4:	4658      	mov	r0, fp
 8010df6:	f000 fa0f 	bl	8011218 <_Balloc>
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	b928      	cbnz	r0, 8010e0a <_dtoa_r+0x97a>
 8010dfe:	4b84      	ldr	r3, [pc, #528]	@ (8011010 <_dtoa_r+0xb80>)
 8010e00:	4602      	mov	r2, r0
 8010e02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010e06:	f7ff bb5a 	b.w	80104be <_dtoa_r+0x2e>
 8010e0a:	692a      	ldr	r2, [r5, #16]
 8010e0c:	f105 010c 	add.w	r1, r5, #12
 8010e10:	300c      	adds	r0, #12
 8010e12:	3202      	adds	r2, #2
 8010e14:	0092      	lsls	r2, r2, #2
 8010e16:	f7ff fa9e 	bl	8010356 <memcpy>
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	4631      	mov	r1, r6
 8010e1e:	4658      	mov	r0, fp
 8010e20:	f000 fc0a 	bl	8011638 <__lshift>
 8010e24:	f10a 0301 	add.w	r3, sl, #1
 8010e28:	462f      	mov	r7, r5
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	9307      	str	r3, [sp, #28]
 8010e2e:	9b00      	ldr	r3, [sp, #0]
 8010e30:	4453      	add	r3, sl
 8010e32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e34:	9b02      	ldr	r3, [sp, #8]
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e3c:	9b07      	ldr	r3, [sp, #28]
 8010e3e:	4621      	mov	r1, r4
 8010e40:	4648      	mov	r0, r9
 8010e42:	3b01      	subs	r3, #1
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	f7ff fa93 	bl	8010370 <quorem>
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	9002      	str	r0, [sp, #8]
 8010e4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010e52:	4648      	mov	r0, r9
 8010e54:	f000 fc5c 	bl	8011710 <__mcmp>
 8010e58:	462a      	mov	r2, r5
 8010e5a:	9008      	str	r0, [sp, #32]
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	4658      	mov	r0, fp
 8010e60:	f000 fc72 	bl	8011748 <__mdiff>
 8010e64:	68c2      	ldr	r2, [r0, #12]
 8010e66:	4606      	mov	r6, r0
 8010e68:	bb02      	cbnz	r2, 8010eac <_dtoa_r+0xa1c>
 8010e6a:	4601      	mov	r1, r0
 8010e6c:	4648      	mov	r0, r9
 8010e6e:	f000 fc4f 	bl	8011710 <__mcmp>
 8010e72:	4602      	mov	r2, r0
 8010e74:	4631      	mov	r1, r6
 8010e76:	4658      	mov	r0, fp
 8010e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e7a:	f000 fa0d 	bl	8011298 <_Bfree>
 8010e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e82:	9e07      	ldr	r6, [sp, #28]
 8010e84:	ea43 0102 	orr.w	r1, r3, r2
 8010e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e8a:	4319      	orrs	r1, r3
 8010e8c:	d110      	bne.n	8010eb0 <_dtoa_r+0xa20>
 8010e8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010e92:	d029      	beq.n	8010ee8 <_dtoa_r+0xa58>
 8010e94:	9b08      	ldr	r3, [sp, #32]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	dd02      	ble.n	8010ea0 <_dtoa_r+0xa10>
 8010e9a:	9b02      	ldr	r3, [sp, #8]
 8010e9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010ea0:	9b00      	ldr	r3, [sp, #0]
 8010ea2:	f883 8000 	strb.w	r8, [r3]
 8010ea6:	e63f      	b.n	8010b28 <_dtoa_r+0x698>
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	e7bb      	b.n	8010e24 <_dtoa_r+0x994>
 8010eac:	2201      	movs	r2, #1
 8010eae:	e7e1      	b.n	8010e74 <_dtoa_r+0x9e4>
 8010eb0:	9b08      	ldr	r3, [sp, #32]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	db04      	blt.n	8010ec0 <_dtoa_r+0xa30>
 8010eb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010eb8:	430b      	orrs	r3, r1
 8010eba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ebc:	430b      	orrs	r3, r1
 8010ebe:	d120      	bne.n	8010f02 <_dtoa_r+0xa72>
 8010ec0:	2a00      	cmp	r2, #0
 8010ec2:	dded      	ble.n	8010ea0 <_dtoa_r+0xa10>
 8010ec4:	4649      	mov	r1, r9
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	4658      	mov	r0, fp
 8010eca:	f000 fbb5 	bl	8011638 <__lshift>
 8010ece:	4621      	mov	r1, r4
 8010ed0:	4681      	mov	r9, r0
 8010ed2:	f000 fc1d 	bl	8011710 <__mcmp>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	dc03      	bgt.n	8010ee2 <_dtoa_r+0xa52>
 8010eda:	d1e1      	bne.n	8010ea0 <_dtoa_r+0xa10>
 8010edc:	f018 0f01 	tst.w	r8, #1
 8010ee0:	d0de      	beq.n	8010ea0 <_dtoa_r+0xa10>
 8010ee2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ee6:	d1d8      	bne.n	8010e9a <_dtoa_r+0xa0a>
 8010ee8:	2339      	movs	r3, #57	@ 0x39
 8010eea:	9a00      	ldr	r2, [sp, #0]
 8010eec:	7013      	strb	r3, [r2, #0]
 8010eee:	4633      	mov	r3, r6
 8010ef0:	461e      	mov	r6, r3
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ef8:	2a39      	cmp	r2, #57	@ 0x39
 8010efa:	d052      	beq.n	8010fa2 <_dtoa_r+0xb12>
 8010efc:	3201      	adds	r2, #1
 8010efe:	701a      	strb	r2, [r3, #0]
 8010f00:	e612      	b.n	8010b28 <_dtoa_r+0x698>
 8010f02:	2a00      	cmp	r2, #0
 8010f04:	dd07      	ble.n	8010f16 <_dtoa_r+0xa86>
 8010f06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010f0a:	d0ed      	beq.n	8010ee8 <_dtoa_r+0xa58>
 8010f0c:	f108 0301 	add.w	r3, r8, #1
 8010f10:	9a00      	ldr	r2, [sp, #0]
 8010f12:	7013      	strb	r3, [r2, #0]
 8010f14:	e608      	b.n	8010b28 <_dtoa_r+0x698>
 8010f16:	9b07      	ldr	r3, [sp, #28]
 8010f18:	9a07      	ldr	r2, [sp, #28]
 8010f1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d028      	beq.n	8010f76 <_dtoa_r+0xae6>
 8010f24:	4649      	mov	r1, r9
 8010f26:	2300      	movs	r3, #0
 8010f28:	220a      	movs	r2, #10
 8010f2a:	4658      	mov	r0, fp
 8010f2c:	f000 f9d6 	bl	80112dc <__multadd>
 8010f30:	42af      	cmp	r7, r5
 8010f32:	4681      	mov	r9, r0
 8010f34:	f04f 0300 	mov.w	r3, #0
 8010f38:	f04f 020a 	mov.w	r2, #10
 8010f3c:	4639      	mov	r1, r7
 8010f3e:	4658      	mov	r0, fp
 8010f40:	d107      	bne.n	8010f52 <_dtoa_r+0xac2>
 8010f42:	f000 f9cb 	bl	80112dc <__multadd>
 8010f46:	4607      	mov	r7, r0
 8010f48:	4605      	mov	r5, r0
 8010f4a:	9b07      	ldr	r3, [sp, #28]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	9307      	str	r3, [sp, #28]
 8010f50:	e774      	b.n	8010e3c <_dtoa_r+0x9ac>
 8010f52:	f000 f9c3 	bl	80112dc <__multadd>
 8010f56:	4629      	mov	r1, r5
 8010f58:	4607      	mov	r7, r0
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	220a      	movs	r2, #10
 8010f5e:	4658      	mov	r0, fp
 8010f60:	f000 f9bc 	bl	80112dc <__multadd>
 8010f64:	4605      	mov	r5, r0
 8010f66:	e7f0      	b.n	8010f4a <_dtoa_r+0xaba>
 8010f68:	9b00      	ldr	r3, [sp, #0]
 8010f6a:	2700      	movs	r7, #0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	bfcc      	ite	gt
 8010f70:	461e      	movgt	r6, r3
 8010f72:	2601      	movle	r6, #1
 8010f74:	4456      	add	r6, sl
 8010f76:	4649      	mov	r1, r9
 8010f78:	2201      	movs	r2, #1
 8010f7a:	4658      	mov	r0, fp
 8010f7c:	f000 fb5c 	bl	8011638 <__lshift>
 8010f80:	4621      	mov	r1, r4
 8010f82:	4681      	mov	r9, r0
 8010f84:	f000 fbc4 	bl	8011710 <__mcmp>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	dcb0      	bgt.n	8010eee <_dtoa_r+0xa5e>
 8010f8c:	d102      	bne.n	8010f94 <_dtoa_r+0xb04>
 8010f8e:	f018 0f01 	tst.w	r8, #1
 8010f92:	d1ac      	bne.n	8010eee <_dtoa_r+0xa5e>
 8010f94:	4633      	mov	r3, r6
 8010f96:	461e      	mov	r6, r3
 8010f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f9c:	2a30      	cmp	r2, #48	@ 0x30
 8010f9e:	d0fa      	beq.n	8010f96 <_dtoa_r+0xb06>
 8010fa0:	e5c2      	b.n	8010b28 <_dtoa_r+0x698>
 8010fa2:	459a      	cmp	sl, r3
 8010fa4:	d1a4      	bne.n	8010ef0 <_dtoa_r+0xa60>
 8010fa6:	9b04      	ldr	r3, [sp, #16]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	9304      	str	r3, [sp, #16]
 8010fac:	2331      	movs	r3, #49	@ 0x31
 8010fae:	f88a 3000 	strb.w	r3, [sl]
 8010fb2:	e5b9      	b.n	8010b28 <_dtoa_r+0x698>
 8010fb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010fb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011014 <_dtoa_r+0xb84>
 8010fba:	b11b      	cbz	r3, 8010fc4 <_dtoa_r+0xb34>
 8010fbc:	f10a 0308 	add.w	r3, sl, #8
 8010fc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010fc2:	6013      	str	r3, [r2, #0]
 8010fc4:	4650      	mov	r0, sl
 8010fc6:	b019      	add	sp, #100	@ 0x64
 8010fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	f77f ae37 	ble.w	8010c42 <_dtoa_r+0x7b2>
 8010fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fd8:	2001      	movs	r0, #1
 8010fda:	e655      	b.n	8010c88 <_dtoa_r+0x7f8>
 8010fdc:	9b00      	ldr	r3, [sp, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f77f aed6 	ble.w	8010d90 <_dtoa_r+0x900>
 8010fe4:	4656      	mov	r6, sl
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4648      	mov	r0, r9
 8010fea:	f7ff f9c1 	bl	8010370 <quorem>
 8010fee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010ff2:	9b00      	ldr	r3, [sp, #0]
 8010ff4:	f806 8b01 	strb.w	r8, [r6], #1
 8010ff8:	eba6 020a 	sub.w	r2, r6, sl
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	ddb3      	ble.n	8010f68 <_dtoa_r+0xad8>
 8011000:	4649      	mov	r1, r9
 8011002:	2300      	movs	r3, #0
 8011004:	220a      	movs	r2, #10
 8011006:	4658      	mov	r0, fp
 8011008:	f000 f968 	bl	80112dc <__multadd>
 801100c:	4681      	mov	r9, r0
 801100e:	e7ea      	b.n	8010fe6 <_dtoa_r+0xb56>
 8011010:	080126dc 	.word	0x080126dc
 8011014:	08012660 	.word	0x08012660

08011018 <_free_r>:
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	4605      	mov	r5, r0
 801101c:	2900      	cmp	r1, #0
 801101e:	d041      	beq.n	80110a4 <_free_r+0x8c>
 8011020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011024:	1f0c      	subs	r4, r1, #4
 8011026:	2b00      	cmp	r3, #0
 8011028:	bfb8      	it	lt
 801102a:	18e4      	addlt	r4, r4, r3
 801102c:	f000 f8e8 	bl	8011200 <__malloc_lock>
 8011030:	4a1d      	ldr	r2, [pc, #116]	@ (80110a8 <_free_r+0x90>)
 8011032:	6813      	ldr	r3, [r2, #0]
 8011034:	b933      	cbnz	r3, 8011044 <_free_r+0x2c>
 8011036:	6063      	str	r3, [r4, #4]
 8011038:	6014      	str	r4, [r2, #0]
 801103a:	4628      	mov	r0, r5
 801103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011040:	f000 b8e4 	b.w	801120c <__malloc_unlock>
 8011044:	42a3      	cmp	r3, r4
 8011046:	d908      	bls.n	801105a <_free_r+0x42>
 8011048:	6820      	ldr	r0, [r4, #0]
 801104a:	1821      	adds	r1, r4, r0
 801104c:	428b      	cmp	r3, r1
 801104e:	bf01      	itttt	eq
 8011050:	6819      	ldreq	r1, [r3, #0]
 8011052:	685b      	ldreq	r3, [r3, #4]
 8011054:	1809      	addeq	r1, r1, r0
 8011056:	6021      	streq	r1, [r4, #0]
 8011058:	e7ed      	b.n	8011036 <_free_r+0x1e>
 801105a:	461a      	mov	r2, r3
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	b10b      	cbz	r3, 8011064 <_free_r+0x4c>
 8011060:	42a3      	cmp	r3, r4
 8011062:	d9fa      	bls.n	801105a <_free_r+0x42>
 8011064:	6811      	ldr	r1, [r2, #0]
 8011066:	1850      	adds	r0, r2, r1
 8011068:	42a0      	cmp	r0, r4
 801106a:	d10b      	bne.n	8011084 <_free_r+0x6c>
 801106c:	6820      	ldr	r0, [r4, #0]
 801106e:	4401      	add	r1, r0
 8011070:	1850      	adds	r0, r2, r1
 8011072:	6011      	str	r1, [r2, #0]
 8011074:	4283      	cmp	r3, r0
 8011076:	d1e0      	bne.n	801103a <_free_r+0x22>
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	4408      	add	r0, r1
 801107e:	6053      	str	r3, [r2, #4]
 8011080:	6010      	str	r0, [r2, #0]
 8011082:	e7da      	b.n	801103a <_free_r+0x22>
 8011084:	d902      	bls.n	801108c <_free_r+0x74>
 8011086:	230c      	movs	r3, #12
 8011088:	602b      	str	r3, [r5, #0]
 801108a:	e7d6      	b.n	801103a <_free_r+0x22>
 801108c:	6820      	ldr	r0, [r4, #0]
 801108e:	1821      	adds	r1, r4, r0
 8011090:	428b      	cmp	r3, r1
 8011092:	bf02      	ittt	eq
 8011094:	6819      	ldreq	r1, [r3, #0]
 8011096:	685b      	ldreq	r3, [r3, #4]
 8011098:	1809      	addeq	r1, r1, r0
 801109a:	6063      	str	r3, [r4, #4]
 801109c:	bf08      	it	eq
 801109e:	6021      	streq	r1, [r4, #0]
 80110a0:	6054      	str	r4, [r2, #4]
 80110a2:	e7ca      	b.n	801103a <_free_r+0x22>
 80110a4:	bd38      	pop	{r3, r4, r5, pc}
 80110a6:	bf00      	nop
 80110a8:	20004da4 	.word	0x20004da4

080110ac <malloc>:
 80110ac:	4b02      	ldr	r3, [pc, #8]	@ (80110b8 <malloc+0xc>)
 80110ae:	4601      	mov	r1, r0
 80110b0:	6818      	ldr	r0, [r3, #0]
 80110b2:	f000 b825 	b.w	8011100 <_malloc_r>
 80110b6:	bf00      	nop
 80110b8:	20000030 	.word	0x20000030

080110bc <sbrk_aligned>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	4e0f      	ldr	r6, [pc, #60]	@ (80110fc <sbrk_aligned+0x40>)
 80110c0:	460c      	mov	r4, r1
 80110c2:	4605      	mov	r5, r0
 80110c4:	6831      	ldr	r1, [r6, #0]
 80110c6:	b911      	cbnz	r1, 80110ce <sbrk_aligned+0x12>
 80110c8:	f000 fe4c 	bl	8011d64 <_sbrk_r>
 80110cc:	6030      	str	r0, [r6, #0]
 80110ce:	4621      	mov	r1, r4
 80110d0:	4628      	mov	r0, r5
 80110d2:	f000 fe47 	bl	8011d64 <_sbrk_r>
 80110d6:	1c43      	adds	r3, r0, #1
 80110d8:	d103      	bne.n	80110e2 <sbrk_aligned+0x26>
 80110da:	f04f 34ff 	mov.w	r4, #4294967295
 80110de:	4620      	mov	r0, r4
 80110e0:	bd70      	pop	{r4, r5, r6, pc}
 80110e2:	1cc4      	adds	r4, r0, #3
 80110e4:	f024 0403 	bic.w	r4, r4, #3
 80110e8:	42a0      	cmp	r0, r4
 80110ea:	d0f8      	beq.n	80110de <sbrk_aligned+0x22>
 80110ec:	1a21      	subs	r1, r4, r0
 80110ee:	4628      	mov	r0, r5
 80110f0:	f000 fe38 	bl	8011d64 <_sbrk_r>
 80110f4:	3001      	adds	r0, #1
 80110f6:	d1f2      	bne.n	80110de <sbrk_aligned+0x22>
 80110f8:	e7ef      	b.n	80110da <sbrk_aligned+0x1e>
 80110fa:	bf00      	nop
 80110fc:	20004da0 	.word	0x20004da0

08011100 <_malloc_r>:
 8011100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011104:	1ccd      	adds	r5, r1, #3
 8011106:	4606      	mov	r6, r0
 8011108:	f025 0503 	bic.w	r5, r5, #3
 801110c:	3508      	adds	r5, #8
 801110e:	2d0c      	cmp	r5, #12
 8011110:	bf38      	it	cc
 8011112:	250c      	movcc	r5, #12
 8011114:	2d00      	cmp	r5, #0
 8011116:	db01      	blt.n	801111c <_malloc_r+0x1c>
 8011118:	42a9      	cmp	r1, r5
 801111a:	d904      	bls.n	8011126 <_malloc_r+0x26>
 801111c:	230c      	movs	r3, #12
 801111e:	6033      	str	r3, [r6, #0]
 8011120:	2000      	movs	r0, #0
 8011122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80111fc <_malloc_r+0xfc>
 801112a:	f000 f869 	bl	8011200 <__malloc_lock>
 801112e:	f8d8 3000 	ldr.w	r3, [r8]
 8011132:	461c      	mov	r4, r3
 8011134:	bb44      	cbnz	r4, 8011188 <_malloc_r+0x88>
 8011136:	4629      	mov	r1, r5
 8011138:	4630      	mov	r0, r6
 801113a:	f7ff ffbf 	bl	80110bc <sbrk_aligned>
 801113e:	1c43      	adds	r3, r0, #1
 8011140:	4604      	mov	r4, r0
 8011142:	d158      	bne.n	80111f6 <_malloc_r+0xf6>
 8011144:	f8d8 4000 	ldr.w	r4, [r8]
 8011148:	4627      	mov	r7, r4
 801114a:	2f00      	cmp	r7, #0
 801114c:	d143      	bne.n	80111d6 <_malloc_r+0xd6>
 801114e:	2c00      	cmp	r4, #0
 8011150:	d04b      	beq.n	80111ea <_malloc_r+0xea>
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	4639      	mov	r1, r7
 8011156:	4630      	mov	r0, r6
 8011158:	eb04 0903 	add.w	r9, r4, r3
 801115c:	f000 fe02 	bl	8011d64 <_sbrk_r>
 8011160:	4581      	cmp	r9, r0
 8011162:	d142      	bne.n	80111ea <_malloc_r+0xea>
 8011164:	6821      	ldr	r1, [r4, #0]
 8011166:	4630      	mov	r0, r6
 8011168:	1a6d      	subs	r5, r5, r1
 801116a:	4629      	mov	r1, r5
 801116c:	f7ff ffa6 	bl	80110bc <sbrk_aligned>
 8011170:	3001      	adds	r0, #1
 8011172:	d03a      	beq.n	80111ea <_malloc_r+0xea>
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	442b      	add	r3, r5
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	f8d8 3000 	ldr.w	r3, [r8]
 801117e:	685a      	ldr	r2, [r3, #4]
 8011180:	bb62      	cbnz	r2, 80111dc <_malloc_r+0xdc>
 8011182:	f8c8 7000 	str.w	r7, [r8]
 8011186:	e00f      	b.n	80111a8 <_malloc_r+0xa8>
 8011188:	6822      	ldr	r2, [r4, #0]
 801118a:	1b52      	subs	r2, r2, r5
 801118c:	d420      	bmi.n	80111d0 <_malloc_r+0xd0>
 801118e:	2a0b      	cmp	r2, #11
 8011190:	d917      	bls.n	80111c2 <_malloc_r+0xc2>
 8011192:	1961      	adds	r1, r4, r5
 8011194:	42a3      	cmp	r3, r4
 8011196:	6025      	str	r5, [r4, #0]
 8011198:	bf18      	it	ne
 801119a:	6059      	strne	r1, [r3, #4]
 801119c:	6863      	ldr	r3, [r4, #4]
 801119e:	bf08      	it	eq
 80111a0:	f8c8 1000 	streq.w	r1, [r8]
 80111a4:	5162      	str	r2, [r4, r5]
 80111a6:	604b      	str	r3, [r1, #4]
 80111a8:	4630      	mov	r0, r6
 80111aa:	f000 f82f 	bl	801120c <__malloc_unlock>
 80111ae:	f104 000b 	add.w	r0, r4, #11
 80111b2:	1d23      	adds	r3, r4, #4
 80111b4:	f020 0007 	bic.w	r0, r0, #7
 80111b8:	1ac2      	subs	r2, r0, r3
 80111ba:	bf1c      	itt	ne
 80111bc:	1a1b      	subne	r3, r3, r0
 80111be:	50a3      	strne	r3, [r4, r2]
 80111c0:	e7af      	b.n	8011122 <_malloc_r+0x22>
 80111c2:	6862      	ldr	r2, [r4, #4]
 80111c4:	42a3      	cmp	r3, r4
 80111c6:	bf0c      	ite	eq
 80111c8:	f8c8 2000 	streq.w	r2, [r8]
 80111cc:	605a      	strne	r2, [r3, #4]
 80111ce:	e7eb      	b.n	80111a8 <_malloc_r+0xa8>
 80111d0:	4623      	mov	r3, r4
 80111d2:	6864      	ldr	r4, [r4, #4]
 80111d4:	e7ae      	b.n	8011134 <_malloc_r+0x34>
 80111d6:	463c      	mov	r4, r7
 80111d8:	687f      	ldr	r7, [r7, #4]
 80111da:	e7b6      	b.n	801114a <_malloc_r+0x4a>
 80111dc:	461a      	mov	r2, r3
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	42a3      	cmp	r3, r4
 80111e2:	d1fb      	bne.n	80111dc <_malloc_r+0xdc>
 80111e4:	2300      	movs	r3, #0
 80111e6:	6053      	str	r3, [r2, #4]
 80111e8:	e7de      	b.n	80111a8 <_malloc_r+0xa8>
 80111ea:	230c      	movs	r3, #12
 80111ec:	4630      	mov	r0, r6
 80111ee:	6033      	str	r3, [r6, #0]
 80111f0:	f000 f80c 	bl	801120c <__malloc_unlock>
 80111f4:	e794      	b.n	8011120 <_malloc_r+0x20>
 80111f6:	6005      	str	r5, [r0, #0]
 80111f8:	e7d6      	b.n	80111a8 <_malloc_r+0xa8>
 80111fa:	bf00      	nop
 80111fc:	20004da4 	.word	0x20004da4

08011200 <__malloc_lock>:
 8011200:	4801      	ldr	r0, [pc, #4]	@ (8011208 <__malloc_lock+0x8>)
 8011202:	f7ff b898 	b.w	8010336 <__retarget_lock_acquire_recursive>
 8011206:	bf00      	nop
 8011208:	20004d9c 	.word	0x20004d9c

0801120c <__malloc_unlock>:
 801120c:	4801      	ldr	r0, [pc, #4]	@ (8011214 <__malloc_unlock+0x8>)
 801120e:	f7ff b893 	b.w	8010338 <__retarget_lock_release_recursive>
 8011212:	bf00      	nop
 8011214:	20004d9c 	.word	0x20004d9c

08011218 <_Balloc>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	69c6      	ldr	r6, [r0, #28]
 801121c:	4604      	mov	r4, r0
 801121e:	460d      	mov	r5, r1
 8011220:	b976      	cbnz	r6, 8011240 <_Balloc+0x28>
 8011222:	2010      	movs	r0, #16
 8011224:	f7ff ff42 	bl	80110ac <malloc>
 8011228:	4602      	mov	r2, r0
 801122a:	61e0      	str	r0, [r4, #28]
 801122c:	b920      	cbnz	r0, 8011238 <_Balloc+0x20>
 801122e:	4b18      	ldr	r3, [pc, #96]	@ (8011290 <_Balloc+0x78>)
 8011230:	216b      	movs	r1, #107	@ 0x6b
 8011232:	4818      	ldr	r0, [pc, #96]	@ (8011294 <_Balloc+0x7c>)
 8011234:	f000 fda6 	bl	8011d84 <__assert_func>
 8011238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801123c:	6006      	str	r6, [r0, #0]
 801123e:	60c6      	str	r6, [r0, #12]
 8011240:	69e6      	ldr	r6, [r4, #28]
 8011242:	68f3      	ldr	r3, [r6, #12]
 8011244:	b183      	cbz	r3, 8011268 <_Balloc+0x50>
 8011246:	69e3      	ldr	r3, [r4, #28]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801124e:	b9b8      	cbnz	r0, 8011280 <_Balloc+0x68>
 8011250:	2101      	movs	r1, #1
 8011252:	4620      	mov	r0, r4
 8011254:	fa01 f605 	lsl.w	r6, r1, r5
 8011258:	1d72      	adds	r2, r6, #5
 801125a:	0092      	lsls	r2, r2, #2
 801125c:	f000 fdb0 	bl	8011dc0 <_calloc_r>
 8011260:	b160      	cbz	r0, 801127c <_Balloc+0x64>
 8011262:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011266:	e00e      	b.n	8011286 <_Balloc+0x6e>
 8011268:	2221      	movs	r2, #33	@ 0x21
 801126a:	2104      	movs	r1, #4
 801126c:	4620      	mov	r0, r4
 801126e:	f000 fda7 	bl	8011dc0 <_calloc_r>
 8011272:	69e3      	ldr	r3, [r4, #28]
 8011274:	60f0      	str	r0, [r6, #12]
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d1e4      	bne.n	8011246 <_Balloc+0x2e>
 801127c:	2000      	movs	r0, #0
 801127e:	bd70      	pop	{r4, r5, r6, pc}
 8011280:	6802      	ldr	r2, [r0, #0]
 8011282:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011286:	2300      	movs	r3, #0
 8011288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801128c:	e7f7      	b.n	801127e <_Balloc+0x66>
 801128e:	bf00      	nop
 8011290:	0801266d 	.word	0x0801266d
 8011294:	080126ed 	.word	0x080126ed

08011298 <_Bfree>:
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	69c6      	ldr	r6, [r0, #28]
 801129c:	4605      	mov	r5, r0
 801129e:	460c      	mov	r4, r1
 80112a0:	b976      	cbnz	r6, 80112c0 <_Bfree+0x28>
 80112a2:	2010      	movs	r0, #16
 80112a4:	f7ff ff02 	bl	80110ac <malloc>
 80112a8:	4602      	mov	r2, r0
 80112aa:	61e8      	str	r0, [r5, #28]
 80112ac:	b920      	cbnz	r0, 80112b8 <_Bfree+0x20>
 80112ae:	4b09      	ldr	r3, [pc, #36]	@ (80112d4 <_Bfree+0x3c>)
 80112b0:	218f      	movs	r1, #143	@ 0x8f
 80112b2:	4809      	ldr	r0, [pc, #36]	@ (80112d8 <_Bfree+0x40>)
 80112b4:	f000 fd66 	bl	8011d84 <__assert_func>
 80112b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112bc:	6006      	str	r6, [r0, #0]
 80112be:	60c6      	str	r6, [r0, #12]
 80112c0:	b13c      	cbz	r4, 80112d2 <_Bfree+0x3a>
 80112c2:	69eb      	ldr	r3, [r5, #28]
 80112c4:	6862      	ldr	r2, [r4, #4]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112cc:	6021      	str	r1, [r4, #0]
 80112ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	0801266d 	.word	0x0801266d
 80112d8:	080126ed 	.word	0x080126ed

080112dc <__multadd>:
 80112dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112e0:	f101 0c14 	add.w	ip, r1, #20
 80112e4:	4607      	mov	r7, r0
 80112e6:	460c      	mov	r4, r1
 80112e8:	461e      	mov	r6, r3
 80112ea:	690d      	ldr	r5, [r1, #16]
 80112ec:	2000      	movs	r0, #0
 80112ee:	f8dc 3000 	ldr.w	r3, [ip]
 80112f2:	3001      	adds	r0, #1
 80112f4:	b299      	uxth	r1, r3
 80112f6:	4285      	cmp	r5, r0
 80112f8:	fb02 6101 	mla	r1, r2, r1, r6
 80112fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011300:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011304:	b289      	uxth	r1, r1
 8011306:	fb02 3306 	mla	r3, r2, r6, r3
 801130a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801130e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011312:	f84c 1b04 	str.w	r1, [ip], #4
 8011316:	dcea      	bgt.n	80112ee <__multadd+0x12>
 8011318:	b30e      	cbz	r6, 801135e <__multadd+0x82>
 801131a:	68a3      	ldr	r3, [r4, #8]
 801131c:	42ab      	cmp	r3, r5
 801131e:	dc19      	bgt.n	8011354 <__multadd+0x78>
 8011320:	6861      	ldr	r1, [r4, #4]
 8011322:	4638      	mov	r0, r7
 8011324:	3101      	adds	r1, #1
 8011326:	f7ff ff77 	bl	8011218 <_Balloc>
 801132a:	4680      	mov	r8, r0
 801132c:	b928      	cbnz	r0, 801133a <__multadd+0x5e>
 801132e:	4602      	mov	r2, r0
 8011330:	4b0c      	ldr	r3, [pc, #48]	@ (8011364 <__multadd+0x88>)
 8011332:	21ba      	movs	r1, #186	@ 0xba
 8011334:	480c      	ldr	r0, [pc, #48]	@ (8011368 <__multadd+0x8c>)
 8011336:	f000 fd25 	bl	8011d84 <__assert_func>
 801133a:	6922      	ldr	r2, [r4, #16]
 801133c:	f104 010c 	add.w	r1, r4, #12
 8011340:	300c      	adds	r0, #12
 8011342:	3202      	adds	r2, #2
 8011344:	0092      	lsls	r2, r2, #2
 8011346:	f7ff f806 	bl	8010356 <memcpy>
 801134a:	4621      	mov	r1, r4
 801134c:	4644      	mov	r4, r8
 801134e:	4638      	mov	r0, r7
 8011350:	f7ff ffa2 	bl	8011298 <_Bfree>
 8011354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011358:	3501      	adds	r5, #1
 801135a:	615e      	str	r6, [r3, #20]
 801135c:	6125      	str	r5, [r4, #16]
 801135e:	4620      	mov	r0, r4
 8011360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011364:	080126dc 	.word	0x080126dc
 8011368:	080126ed 	.word	0x080126ed

0801136c <__hi0bits>:
 801136c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011370:	4603      	mov	r3, r0
 8011372:	bf36      	itet	cc
 8011374:	0403      	lslcc	r3, r0, #16
 8011376:	2000      	movcs	r0, #0
 8011378:	2010      	movcc	r0, #16
 801137a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801137e:	bf3c      	itt	cc
 8011380:	021b      	lslcc	r3, r3, #8
 8011382:	3008      	addcc	r0, #8
 8011384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011388:	bf3c      	itt	cc
 801138a:	011b      	lslcc	r3, r3, #4
 801138c:	3004      	addcc	r0, #4
 801138e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011392:	bf3c      	itt	cc
 8011394:	009b      	lslcc	r3, r3, #2
 8011396:	3002      	addcc	r0, #2
 8011398:	2b00      	cmp	r3, #0
 801139a:	db05      	blt.n	80113a8 <__hi0bits+0x3c>
 801139c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80113a0:	f100 0001 	add.w	r0, r0, #1
 80113a4:	bf08      	it	eq
 80113a6:	2020      	moveq	r0, #32
 80113a8:	4770      	bx	lr

080113aa <__lo0bits>:
 80113aa:	6803      	ldr	r3, [r0, #0]
 80113ac:	4602      	mov	r2, r0
 80113ae:	f013 0007 	ands.w	r0, r3, #7
 80113b2:	d00b      	beq.n	80113cc <__lo0bits+0x22>
 80113b4:	07d9      	lsls	r1, r3, #31
 80113b6:	d421      	bmi.n	80113fc <__lo0bits+0x52>
 80113b8:	0798      	lsls	r0, r3, #30
 80113ba:	bf47      	ittee	mi
 80113bc:	085b      	lsrmi	r3, r3, #1
 80113be:	2001      	movmi	r0, #1
 80113c0:	089b      	lsrpl	r3, r3, #2
 80113c2:	2002      	movpl	r0, #2
 80113c4:	bf4c      	ite	mi
 80113c6:	6013      	strmi	r3, [r2, #0]
 80113c8:	6013      	strpl	r3, [r2, #0]
 80113ca:	4770      	bx	lr
 80113cc:	b299      	uxth	r1, r3
 80113ce:	b909      	cbnz	r1, 80113d4 <__lo0bits+0x2a>
 80113d0:	0c1b      	lsrs	r3, r3, #16
 80113d2:	2010      	movs	r0, #16
 80113d4:	b2d9      	uxtb	r1, r3
 80113d6:	b909      	cbnz	r1, 80113dc <__lo0bits+0x32>
 80113d8:	3008      	adds	r0, #8
 80113da:	0a1b      	lsrs	r3, r3, #8
 80113dc:	0719      	lsls	r1, r3, #28
 80113de:	bf04      	itt	eq
 80113e0:	091b      	lsreq	r3, r3, #4
 80113e2:	3004      	addeq	r0, #4
 80113e4:	0799      	lsls	r1, r3, #30
 80113e6:	bf04      	itt	eq
 80113e8:	089b      	lsreq	r3, r3, #2
 80113ea:	3002      	addeq	r0, #2
 80113ec:	07d9      	lsls	r1, r3, #31
 80113ee:	d403      	bmi.n	80113f8 <__lo0bits+0x4e>
 80113f0:	085b      	lsrs	r3, r3, #1
 80113f2:	f100 0001 	add.w	r0, r0, #1
 80113f6:	d003      	beq.n	8011400 <__lo0bits+0x56>
 80113f8:	6013      	str	r3, [r2, #0]
 80113fa:	4770      	bx	lr
 80113fc:	2000      	movs	r0, #0
 80113fe:	4770      	bx	lr
 8011400:	2020      	movs	r0, #32
 8011402:	4770      	bx	lr

08011404 <__i2b>:
 8011404:	b510      	push	{r4, lr}
 8011406:	460c      	mov	r4, r1
 8011408:	2101      	movs	r1, #1
 801140a:	f7ff ff05 	bl	8011218 <_Balloc>
 801140e:	4602      	mov	r2, r0
 8011410:	b928      	cbnz	r0, 801141e <__i2b+0x1a>
 8011412:	4b05      	ldr	r3, [pc, #20]	@ (8011428 <__i2b+0x24>)
 8011414:	f240 1145 	movw	r1, #325	@ 0x145
 8011418:	4804      	ldr	r0, [pc, #16]	@ (801142c <__i2b+0x28>)
 801141a:	f000 fcb3 	bl	8011d84 <__assert_func>
 801141e:	2301      	movs	r3, #1
 8011420:	6144      	str	r4, [r0, #20]
 8011422:	6103      	str	r3, [r0, #16]
 8011424:	bd10      	pop	{r4, pc}
 8011426:	bf00      	nop
 8011428:	080126dc 	.word	0x080126dc
 801142c:	080126ed 	.word	0x080126ed

08011430 <__multiply>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	4614      	mov	r4, r2
 8011436:	690a      	ldr	r2, [r1, #16]
 8011438:	460f      	mov	r7, r1
 801143a:	b085      	sub	sp, #20
 801143c:	6923      	ldr	r3, [r4, #16]
 801143e:	429a      	cmp	r2, r3
 8011440:	bfa2      	ittt	ge
 8011442:	4623      	movge	r3, r4
 8011444:	460c      	movge	r4, r1
 8011446:	461f      	movge	r7, r3
 8011448:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801144c:	68a3      	ldr	r3, [r4, #8]
 801144e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011452:	6861      	ldr	r1, [r4, #4]
 8011454:	eb0a 0609 	add.w	r6, sl, r9
 8011458:	42b3      	cmp	r3, r6
 801145a:	bfb8      	it	lt
 801145c:	3101      	addlt	r1, #1
 801145e:	f7ff fedb 	bl	8011218 <_Balloc>
 8011462:	b930      	cbnz	r0, 8011472 <__multiply+0x42>
 8011464:	4602      	mov	r2, r0
 8011466:	4b45      	ldr	r3, [pc, #276]	@ (801157c <__multiply+0x14c>)
 8011468:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801146c:	4844      	ldr	r0, [pc, #272]	@ (8011580 <__multiply+0x150>)
 801146e:	f000 fc89 	bl	8011d84 <__assert_func>
 8011472:	f100 0514 	add.w	r5, r0, #20
 8011476:	2200      	movs	r2, #0
 8011478:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801147c:	462b      	mov	r3, r5
 801147e:	4543      	cmp	r3, r8
 8011480:	d321      	bcc.n	80114c6 <__multiply+0x96>
 8011482:	f107 0114 	add.w	r1, r7, #20
 8011486:	f104 0214 	add.w	r2, r4, #20
 801148a:	f104 0715 	add.w	r7, r4, #21
 801148e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011492:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011496:	9302      	str	r3, [sp, #8]
 8011498:	1b13      	subs	r3, r2, r4
 801149a:	3b15      	subs	r3, #21
 801149c:	f023 0303 	bic.w	r3, r3, #3
 80114a0:	3304      	adds	r3, #4
 80114a2:	42ba      	cmp	r2, r7
 80114a4:	bf38      	it	cc
 80114a6:	2304      	movcc	r3, #4
 80114a8:	9301      	str	r3, [sp, #4]
 80114aa:	9b02      	ldr	r3, [sp, #8]
 80114ac:	9103      	str	r1, [sp, #12]
 80114ae:	428b      	cmp	r3, r1
 80114b0:	d80c      	bhi.n	80114cc <__multiply+0x9c>
 80114b2:	2e00      	cmp	r6, #0
 80114b4:	dd03      	ble.n	80114be <__multiply+0x8e>
 80114b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d05b      	beq.n	8011576 <__multiply+0x146>
 80114be:	6106      	str	r6, [r0, #16]
 80114c0:	b005      	add	sp, #20
 80114c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c6:	f843 2b04 	str.w	r2, [r3], #4
 80114ca:	e7d8      	b.n	801147e <__multiply+0x4e>
 80114cc:	f8b1 a000 	ldrh.w	sl, [r1]
 80114d0:	f1ba 0f00 	cmp.w	sl, #0
 80114d4:	d024      	beq.n	8011520 <__multiply+0xf0>
 80114d6:	f104 0e14 	add.w	lr, r4, #20
 80114da:	46a9      	mov	r9, r5
 80114dc:	f04f 0c00 	mov.w	ip, #0
 80114e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114e4:	f8d9 3000 	ldr.w	r3, [r9]
 80114e8:	fa1f fb87 	uxth.w	fp, r7
 80114ec:	4572      	cmp	r2, lr
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80114f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80114f8:	f8d9 7000 	ldr.w	r7, [r9]
 80114fc:	4463      	add	r3, ip
 80114fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011502:	fb0a c70b 	mla	r7, sl, fp, ip
 8011506:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801150a:	b29b      	uxth	r3, r3
 801150c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011514:	f849 3b04 	str.w	r3, [r9], #4
 8011518:	d8e2      	bhi.n	80114e0 <__multiply+0xb0>
 801151a:	9b01      	ldr	r3, [sp, #4]
 801151c:	f845 c003 	str.w	ip, [r5, r3]
 8011520:	9b03      	ldr	r3, [sp, #12]
 8011522:	3104      	adds	r1, #4
 8011524:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011528:	f1b9 0f00 	cmp.w	r9, #0
 801152c:	d021      	beq.n	8011572 <__multiply+0x142>
 801152e:	682b      	ldr	r3, [r5, #0]
 8011530:	f104 0c14 	add.w	ip, r4, #20
 8011534:	46ae      	mov	lr, r5
 8011536:	f04f 0a00 	mov.w	sl, #0
 801153a:	f8bc b000 	ldrh.w	fp, [ip]
 801153e:	b29b      	uxth	r3, r3
 8011540:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011544:	fb09 770b 	mla	r7, r9, fp, r7
 8011548:	4457      	add	r7, sl
 801154a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801154e:	f84e 3b04 	str.w	r3, [lr], #4
 8011552:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801155a:	f8be 3000 	ldrh.w	r3, [lr]
 801155e:	4562      	cmp	r2, ip
 8011560:	fb09 330a 	mla	r3, r9, sl, r3
 8011564:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801156c:	d8e5      	bhi.n	801153a <__multiply+0x10a>
 801156e:	9f01      	ldr	r7, [sp, #4]
 8011570:	51eb      	str	r3, [r5, r7]
 8011572:	3504      	adds	r5, #4
 8011574:	e799      	b.n	80114aa <__multiply+0x7a>
 8011576:	3e01      	subs	r6, #1
 8011578:	e79b      	b.n	80114b2 <__multiply+0x82>
 801157a:	bf00      	nop
 801157c:	080126dc 	.word	0x080126dc
 8011580:	080126ed 	.word	0x080126ed

08011584 <__pow5mult>:
 8011584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011588:	4615      	mov	r5, r2
 801158a:	f012 0203 	ands.w	r2, r2, #3
 801158e:	4607      	mov	r7, r0
 8011590:	460e      	mov	r6, r1
 8011592:	d007      	beq.n	80115a4 <__pow5mult+0x20>
 8011594:	3a01      	subs	r2, #1
 8011596:	4c25      	ldr	r4, [pc, #148]	@ (801162c <__pow5mult+0xa8>)
 8011598:	2300      	movs	r3, #0
 801159a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801159e:	f7ff fe9d 	bl	80112dc <__multadd>
 80115a2:	4606      	mov	r6, r0
 80115a4:	10ad      	asrs	r5, r5, #2
 80115a6:	d03d      	beq.n	8011624 <__pow5mult+0xa0>
 80115a8:	69fc      	ldr	r4, [r7, #28]
 80115aa:	b97c      	cbnz	r4, 80115cc <__pow5mult+0x48>
 80115ac:	2010      	movs	r0, #16
 80115ae:	f7ff fd7d 	bl	80110ac <malloc>
 80115b2:	4602      	mov	r2, r0
 80115b4:	61f8      	str	r0, [r7, #28]
 80115b6:	b928      	cbnz	r0, 80115c4 <__pow5mult+0x40>
 80115b8:	4b1d      	ldr	r3, [pc, #116]	@ (8011630 <__pow5mult+0xac>)
 80115ba:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80115be:	481d      	ldr	r0, [pc, #116]	@ (8011634 <__pow5mult+0xb0>)
 80115c0:	f000 fbe0 	bl	8011d84 <__assert_func>
 80115c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115c8:	6004      	str	r4, [r0, #0]
 80115ca:	60c4      	str	r4, [r0, #12]
 80115cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80115d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115d4:	b94c      	cbnz	r4, 80115ea <__pow5mult+0x66>
 80115d6:	f240 2171 	movw	r1, #625	@ 0x271
 80115da:	4638      	mov	r0, r7
 80115dc:	f7ff ff12 	bl	8011404 <__i2b>
 80115e0:	2300      	movs	r3, #0
 80115e2:	4604      	mov	r4, r0
 80115e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80115e8:	6003      	str	r3, [r0, #0]
 80115ea:	f04f 0900 	mov.w	r9, #0
 80115ee:	07eb      	lsls	r3, r5, #31
 80115f0:	d50a      	bpl.n	8011608 <__pow5mult+0x84>
 80115f2:	4631      	mov	r1, r6
 80115f4:	4622      	mov	r2, r4
 80115f6:	4638      	mov	r0, r7
 80115f8:	f7ff ff1a 	bl	8011430 <__multiply>
 80115fc:	4680      	mov	r8, r0
 80115fe:	4631      	mov	r1, r6
 8011600:	4638      	mov	r0, r7
 8011602:	4646      	mov	r6, r8
 8011604:	f7ff fe48 	bl	8011298 <_Bfree>
 8011608:	106d      	asrs	r5, r5, #1
 801160a:	d00b      	beq.n	8011624 <__pow5mult+0xa0>
 801160c:	6820      	ldr	r0, [r4, #0]
 801160e:	b938      	cbnz	r0, 8011620 <__pow5mult+0x9c>
 8011610:	4622      	mov	r2, r4
 8011612:	4621      	mov	r1, r4
 8011614:	4638      	mov	r0, r7
 8011616:	f7ff ff0b 	bl	8011430 <__multiply>
 801161a:	6020      	str	r0, [r4, #0]
 801161c:	f8c0 9000 	str.w	r9, [r0]
 8011620:	4604      	mov	r4, r0
 8011622:	e7e4      	b.n	80115ee <__pow5mult+0x6a>
 8011624:	4630      	mov	r0, r6
 8011626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801162a:	bf00      	nop
 801162c:	08012748 	.word	0x08012748
 8011630:	0801266d 	.word	0x0801266d
 8011634:	080126ed 	.word	0x080126ed

08011638 <__lshift>:
 8011638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801163c:	460c      	mov	r4, r1
 801163e:	4607      	mov	r7, r0
 8011640:	4691      	mov	r9, r2
 8011642:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011646:	6923      	ldr	r3, [r4, #16]
 8011648:	6849      	ldr	r1, [r1, #4]
 801164a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	f108 0601 	add.w	r6, r8, #1
 8011654:	42b3      	cmp	r3, r6
 8011656:	db0b      	blt.n	8011670 <__lshift+0x38>
 8011658:	4638      	mov	r0, r7
 801165a:	f7ff fddd 	bl	8011218 <_Balloc>
 801165e:	4605      	mov	r5, r0
 8011660:	b948      	cbnz	r0, 8011676 <__lshift+0x3e>
 8011662:	4602      	mov	r2, r0
 8011664:	4b28      	ldr	r3, [pc, #160]	@ (8011708 <__lshift+0xd0>)
 8011666:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801166a:	4828      	ldr	r0, [pc, #160]	@ (801170c <__lshift+0xd4>)
 801166c:	f000 fb8a 	bl	8011d84 <__assert_func>
 8011670:	3101      	adds	r1, #1
 8011672:	005b      	lsls	r3, r3, #1
 8011674:	e7ee      	b.n	8011654 <__lshift+0x1c>
 8011676:	2300      	movs	r3, #0
 8011678:	f100 0114 	add.w	r1, r0, #20
 801167c:	f100 0210 	add.w	r2, r0, #16
 8011680:	4618      	mov	r0, r3
 8011682:	4553      	cmp	r3, sl
 8011684:	db33      	blt.n	80116ee <__lshift+0xb6>
 8011686:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801168a:	f104 0314 	add.w	r3, r4, #20
 801168e:	6920      	ldr	r0, [r4, #16]
 8011690:	f019 091f 	ands.w	r9, r9, #31
 8011694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011698:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801169c:	d02b      	beq.n	80116f6 <__lshift+0xbe>
 801169e:	f1c9 0e20 	rsb	lr, r9, #32
 80116a2:	468a      	mov	sl, r1
 80116a4:	2200      	movs	r2, #0
 80116a6:	6818      	ldr	r0, [r3, #0]
 80116a8:	fa00 f009 	lsl.w	r0, r0, r9
 80116ac:	4310      	orrs	r0, r2
 80116ae:	f84a 0b04 	str.w	r0, [sl], #4
 80116b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b6:	459c      	cmp	ip, r3
 80116b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80116bc:	d8f3      	bhi.n	80116a6 <__lshift+0x6e>
 80116be:	ebac 0304 	sub.w	r3, ip, r4
 80116c2:	f104 0015 	add.w	r0, r4, #21
 80116c6:	3b15      	subs	r3, #21
 80116c8:	f023 0303 	bic.w	r3, r3, #3
 80116cc:	3304      	adds	r3, #4
 80116ce:	4584      	cmp	ip, r0
 80116d0:	bf38      	it	cc
 80116d2:	2304      	movcc	r3, #4
 80116d4:	50ca      	str	r2, [r1, r3]
 80116d6:	b10a      	cbz	r2, 80116dc <__lshift+0xa4>
 80116d8:	f108 0602 	add.w	r6, r8, #2
 80116dc:	3e01      	subs	r6, #1
 80116de:	4638      	mov	r0, r7
 80116e0:	4621      	mov	r1, r4
 80116e2:	612e      	str	r6, [r5, #16]
 80116e4:	f7ff fdd8 	bl	8011298 <_Bfree>
 80116e8:	4628      	mov	r0, r5
 80116ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ee:	3301      	adds	r3, #1
 80116f0:	f842 0f04 	str.w	r0, [r2, #4]!
 80116f4:	e7c5      	b.n	8011682 <__lshift+0x4a>
 80116f6:	3904      	subs	r1, #4
 80116f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80116fc:	459c      	cmp	ip, r3
 80116fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8011702:	d8f9      	bhi.n	80116f8 <__lshift+0xc0>
 8011704:	e7ea      	b.n	80116dc <__lshift+0xa4>
 8011706:	bf00      	nop
 8011708:	080126dc 	.word	0x080126dc
 801170c:	080126ed 	.word	0x080126ed

08011710 <__mcmp>:
 8011710:	4603      	mov	r3, r0
 8011712:	690a      	ldr	r2, [r1, #16]
 8011714:	6900      	ldr	r0, [r0, #16]
 8011716:	1a80      	subs	r0, r0, r2
 8011718:	b530      	push	{r4, r5, lr}
 801171a:	d10e      	bne.n	801173a <__mcmp+0x2a>
 801171c:	3314      	adds	r3, #20
 801171e:	3114      	adds	r1, #20
 8011720:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011724:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801172c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011730:	4295      	cmp	r5, r2
 8011732:	d003      	beq.n	801173c <__mcmp+0x2c>
 8011734:	d205      	bcs.n	8011742 <__mcmp+0x32>
 8011736:	f04f 30ff 	mov.w	r0, #4294967295
 801173a:	bd30      	pop	{r4, r5, pc}
 801173c:	42a3      	cmp	r3, r4
 801173e:	d3f3      	bcc.n	8011728 <__mcmp+0x18>
 8011740:	e7fb      	b.n	801173a <__mcmp+0x2a>
 8011742:	2001      	movs	r0, #1
 8011744:	e7f9      	b.n	801173a <__mcmp+0x2a>
	...

08011748 <__mdiff>:
 8011748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	4689      	mov	r9, r1
 801174e:	4606      	mov	r6, r0
 8011750:	4611      	mov	r1, r2
 8011752:	4614      	mov	r4, r2
 8011754:	4648      	mov	r0, r9
 8011756:	f7ff ffdb 	bl	8011710 <__mcmp>
 801175a:	1e05      	subs	r5, r0, #0
 801175c:	d112      	bne.n	8011784 <__mdiff+0x3c>
 801175e:	4629      	mov	r1, r5
 8011760:	4630      	mov	r0, r6
 8011762:	f7ff fd59 	bl	8011218 <_Balloc>
 8011766:	4602      	mov	r2, r0
 8011768:	b928      	cbnz	r0, 8011776 <__mdiff+0x2e>
 801176a:	4b41      	ldr	r3, [pc, #260]	@ (8011870 <__mdiff+0x128>)
 801176c:	f240 2137 	movw	r1, #567	@ 0x237
 8011770:	4840      	ldr	r0, [pc, #256]	@ (8011874 <__mdiff+0x12c>)
 8011772:	f000 fb07 	bl	8011d84 <__assert_func>
 8011776:	2301      	movs	r3, #1
 8011778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801177c:	4610      	mov	r0, r2
 801177e:	b003      	add	sp, #12
 8011780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011784:	bfbc      	itt	lt
 8011786:	464b      	movlt	r3, r9
 8011788:	46a1      	movlt	r9, r4
 801178a:	4630      	mov	r0, r6
 801178c:	bfb8      	it	lt
 801178e:	2501      	movlt	r5, #1
 8011790:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011794:	bfb4      	ite	lt
 8011796:	461c      	movlt	r4, r3
 8011798:	2500      	movge	r5, #0
 801179a:	f7ff fd3d 	bl	8011218 <_Balloc>
 801179e:	4602      	mov	r2, r0
 80117a0:	b918      	cbnz	r0, 80117aa <__mdiff+0x62>
 80117a2:	4b33      	ldr	r3, [pc, #204]	@ (8011870 <__mdiff+0x128>)
 80117a4:	f240 2145 	movw	r1, #581	@ 0x245
 80117a8:	e7e2      	b.n	8011770 <__mdiff+0x28>
 80117aa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80117ae:	f104 0e14 	add.w	lr, r4, #20
 80117b2:	6926      	ldr	r6, [r4, #16]
 80117b4:	f100 0b14 	add.w	fp, r0, #20
 80117b8:	60c5      	str	r5, [r0, #12]
 80117ba:	f109 0514 	add.w	r5, r9, #20
 80117be:	f109 0310 	add.w	r3, r9, #16
 80117c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80117c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80117ca:	46d9      	mov	r9, fp
 80117cc:	f04f 0c00 	mov.w	ip, #0
 80117d0:	9301      	str	r3, [sp, #4]
 80117d2:	9b01      	ldr	r3, [sp, #4]
 80117d4:	f85e 0b04 	ldr.w	r0, [lr], #4
 80117d8:	f853 af04 	ldr.w	sl, [r3, #4]!
 80117dc:	4576      	cmp	r6, lr
 80117de:	9301      	str	r3, [sp, #4]
 80117e0:	fa1f f38a 	uxth.w	r3, sl
 80117e4:	4619      	mov	r1, r3
 80117e6:	b283      	uxth	r3, r0
 80117e8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80117ec:	eba1 0303 	sub.w	r3, r1, r3
 80117f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80117f4:	4463      	add	r3, ip
 80117f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011800:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011804:	f849 3b04 	str.w	r3, [r9], #4
 8011808:	d8e3      	bhi.n	80117d2 <__mdiff+0x8a>
 801180a:	1b33      	subs	r3, r6, r4
 801180c:	3415      	adds	r4, #21
 801180e:	3b15      	subs	r3, #21
 8011810:	f023 0303 	bic.w	r3, r3, #3
 8011814:	3304      	adds	r3, #4
 8011816:	42a6      	cmp	r6, r4
 8011818:	bf38      	it	cc
 801181a:	2304      	movcc	r3, #4
 801181c:	441d      	add	r5, r3
 801181e:	445b      	add	r3, fp
 8011820:	462c      	mov	r4, r5
 8011822:	461e      	mov	r6, r3
 8011824:	4544      	cmp	r4, r8
 8011826:	d30e      	bcc.n	8011846 <__mdiff+0xfe>
 8011828:	f108 0103 	add.w	r1, r8, #3
 801182c:	1b49      	subs	r1, r1, r5
 801182e:	3d03      	subs	r5, #3
 8011830:	f021 0103 	bic.w	r1, r1, #3
 8011834:	45a8      	cmp	r8, r5
 8011836:	bf38      	it	cc
 8011838:	2100      	movcc	r1, #0
 801183a:	440b      	add	r3, r1
 801183c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011840:	b199      	cbz	r1, 801186a <__mdiff+0x122>
 8011842:	6117      	str	r7, [r2, #16]
 8011844:	e79a      	b.n	801177c <__mdiff+0x34>
 8011846:	f854 1b04 	ldr.w	r1, [r4], #4
 801184a:	46e6      	mov	lr, ip
 801184c:	fa1f fc81 	uxth.w	ip, r1
 8011850:	0c08      	lsrs	r0, r1, #16
 8011852:	4471      	add	r1, lr
 8011854:	44f4      	add	ip, lr
 8011856:	b289      	uxth	r1, r1
 8011858:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801185c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011860:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011864:	f846 1b04 	str.w	r1, [r6], #4
 8011868:	e7dc      	b.n	8011824 <__mdiff+0xdc>
 801186a:	3f01      	subs	r7, #1
 801186c:	e7e6      	b.n	801183c <__mdiff+0xf4>
 801186e:	bf00      	nop
 8011870:	080126dc 	.word	0x080126dc
 8011874:	080126ed 	.word	0x080126ed

08011878 <__d2b>:
 8011878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801187c:	460f      	mov	r7, r1
 801187e:	2101      	movs	r1, #1
 8011880:	4616      	mov	r6, r2
 8011882:	ec59 8b10 	vmov	r8, r9, d0
 8011886:	f7ff fcc7 	bl	8011218 <_Balloc>
 801188a:	4604      	mov	r4, r0
 801188c:	b930      	cbnz	r0, 801189c <__d2b+0x24>
 801188e:	4602      	mov	r2, r0
 8011890:	4b23      	ldr	r3, [pc, #140]	@ (8011920 <__d2b+0xa8>)
 8011892:	f240 310f 	movw	r1, #783	@ 0x30f
 8011896:	4823      	ldr	r0, [pc, #140]	@ (8011924 <__d2b+0xac>)
 8011898:	f000 fa74 	bl	8011d84 <__assert_func>
 801189c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80118a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118a4:	b10d      	cbz	r5, 80118aa <__d2b+0x32>
 80118a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	f1b8 0300 	subs.w	r3, r8, #0
 80118b0:	d023      	beq.n	80118fa <__d2b+0x82>
 80118b2:	4668      	mov	r0, sp
 80118b4:	9300      	str	r3, [sp, #0]
 80118b6:	f7ff fd78 	bl	80113aa <__lo0bits>
 80118ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118be:	b1d0      	cbz	r0, 80118f6 <__d2b+0x7e>
 80118c0:	f1c0 0320 	rsb	r3, r0, #32
 80118c4:	fa02 f303 	lsl.w	r3, r2, r3
 80118c8:	40c2      	lsrs	r2, r0
 80118ca:	430b      	orrs	r3, r1
 80118cc:	9201      	str	r2, [sp, #4]
 80118ce:	6163      	str	r3, [r4, #20]
 80118d0:	9b01      	ldr	r3, [sp, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	61a3      	str	r3, [r4, #24]
 80118d6:	bf0c      	ite	eq
 80118d8:	2201      	moveq	r2, #1
 80118da:	2202      	movne	r2, #2
 80118dc:	6122      	str	r2, [r4, #16]
 80118de:	b1a5      	cbz	r5, 801190a <__d2b+0x92>
 80118e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80118e4:	4405      	add	r5, r0
 80118e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80118ea:	603d      	str	r5, [r7, #0]
 80118ec:	6030      	str	r0, [r6, #0]
 80118ee:	4620      	mov	r0, r4
 80118f0:	b003      	add	sp, #12
 80118f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118f6:	6161      	str	r1, [r4, #20]
 80118f8:	e7ea      	b.n	80118d0 <__d2b+0x58>
 80118fa:	a801      	add	r0, sp, #4
 80118fc:	f7ff fd55 	bl	80113aa <__lo0bits>
 8011900:	9b01      	ldr	r3, [sp, #4]
 8011902:	3020      	adds	r0, #32
 8011904:	2201      	movs	r2, #1
 8011906:	6163      	str	r3, [r4, #20]
 8011908:	e7e8      	b.n	80118dc <__d2b+0x64>
 801190a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801190e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011912:	6038      	str	r0, [r7, #0]
 8011914:	6918      	ldr	r0, [r3, #16]
 8011916:	f7ff fd29 	bl	801136c <__hi0bits>
 801191a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801191e:	e7e5      	b.n	80118ec <__d2b+0x74>
 8011920:	080126dc 	.word	0x080126dc
 8011924:	080126ed 	.word	0x080126ed

08011928 <__ssputs_r>:
 8011928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801192c:	461f      	mov	r7, r3
 801192e:	688e      	ldr	r6, [r1, #8]
 8011930:	4682      	mov	sl, r0
 8011932:	460c      	mov	r4, r1
 8011934:	42be      	cmp	r6, r7
 8011936:	4690      	mov	r8, r2
 8011938:	680b      	ldr	r3, [r1, #0]
 801193a:	d82d      	bhi.n	8011998 <__ssputs_r+0x70>
 801193c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011940:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011944:	d026      	beq.n	8011994 <__ssputs_r+0x6c>
 8011946:	6965      	ldr	r5, [r4, #20]
 8011948:	6909      	ldr	r1, [r1, #16]
 801194a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801194e:	eba3 0901 	sub.w	r9, r3, r1
 8011952:	1c7b      	adds	r3, r7, #1
 8011954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011958:	444b      	add	r3, r9
 801195a:	106d      	asrs	r5, r5, #1
 801195c:	429d      	cmp	r5, r3
 801195e:	bf38      	it	cc
 8011960:	461d      	movcc	r5, r3
 8011962:	0553      	lsls	r3, r2, #21
 8011964:	d527      	bpl.n	80119b6 <__ssputs_r+0x8e>
 8011966:	4629      	mov	r1, r5
 8011968:	f7ff fbca 	bl	8011100 <_malloc_r>
 801196c:	4606      	mov	r6, r0
 801196e:	b360      	cbz	r0, 80119ca <__ssputs_r+0xa2>
 8011970:	464a      	mov	r2, r9
 8011972:	6921      	ldr	r1, [r4, #16]
 8011974:	f7fe fcef 	bl	8010356 <memcpy>
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801197e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011982:	81a3      	strh	r3, [r4, #12]
 8011984:	6126      	str	r6, [r4, #16]
 8011986:	444e      	add	r6, r9
 8011988:	6165      	str	r5, [r4, #20]
 801198a:	eba5 0509 	sub.w	r5, r5, r9
 801198e:	6026      	str	r6, [r4, #0]
 8011990:	463e      	mov	r6, r7
 8011992:	60a5      	str	r5, [r4, #8]
 8011994:	42be      	cmp	r6, r7
 8011996:	d900      	bls.n	801199a <__ssputs_r+0x72>
 8011998:	463e      	mov	r6, r7
 801199a:	4632      	mov	r2, r6
 801199c:	4641      	mov	r1, r8
 801199e:	6820      	ldr	r0, [r4, #0]
 80119a0:	f000 f9c6 	bl	8011d30 <memmove>
 80119a4:	68a3      	ldr	r3, [r4, #8]
 80119a6:	2000      	movs	r0, #0
 80119a8:	1b9b      	subs	r3, r3, r6
 80119aa:	60a3      	str	r3, [r4, #8]
 80119ac:	6823      	ldr	r3, [r4, #0]
 80119ae:	4433      	add	r3, r6
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b6:	462a      	mov	r2, r5
 80119b8:	f000 fa28 	bl	8011e0c <_realloc_r>
 80119bc:	4606      	mov	r6, r0
 80119be:	2800      	cmp	r0, #0
 80119c0:	d1e0      	bne.n	8011984 <__ssputs_r+0x5c>
 80119c2:	6921      	ldr	r1, [r4, #16]
 80119c4:	4650      	mov	r0, sl
 80119c6:	f7ff fb27 	bl	8011018 <_free_r>
 80119ca:	230c      	movs	r3, #12
 80119cc:	f04f 30ff 	mov.w	r0, #4294967295
 80119d0:	f8ca 3000 	str.w	r3, [sl]
 80119d4:	89a3      	ldrh	r3, [r4, #12]
 80119d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119da:	81a3      	strh	r3, [r4, #12]
 80119dc:	e7e9      	b.n	80119b2 <__ssputs_r+0x8a>
	...

080119e0 <_svfiprintf_r>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	4698      	mov	r8, r3
 80119e6:	898b      	ldrh	r3, [r1, #12]
 80119e8:	b09d      	sub	sp, #116	@ 0x74
 80119ea:	4607      	mov	r7, r0
 80119ec:	061b      	lsls	r3, r3, #24
 80119ee:	460d      	mov	r5, r1
 80119f0:	4614      	mov	r4, r2
 80119f2:	d510      	bpl.n	8011a16 <_svfiprintf_r+0x36>
 80119f4:	690b      	ldr	r3, [r1, #16]
 80119f6:	b973      	cbnz	r3, 8011a16 <_svfiprintf_r+0x36>
 80119f8:	2140      	movs	r1, #64	@ 0x40
 80119fa:	f7ff fb81 	bl	8011100 <_malloc_r>
 80119fe:	6028      	str	r0, [r5, #0]
 8011a00:	6128      	str	r0, [r5, #16]
 8011a02:	b930      	cbnz	r0, 8011a12 <_svfiprintf_r+0x32>
 8011a04:	230c      	movs	r3, #12
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0c:	b01d      	add	sp, #116	@ 0x74
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a12:	2340      	movs	r3, #64	@ 0x40
 8011a14:	616b      	str	r3, [r5, #20]
 8011a16:	2300      	movs	r3, #0
 8011a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a1c:	f04f 0901 	mov.w	r9, #1
 8011a20:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8011bc4 <_svfiprintf_r+0x1e4>
 8011a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a26:	2320      	movs	r3, #32
 8011a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a2c:	2330      	movs	r3, #48	@ 0x30
 8011a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a32:	4623      	mov	r3, r4
 8011a34:	469a      	mov	sl, r3
 8011a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a3a:	b10a      	cbz	r2, 8011a40 <_svfiprintf_r+0x60>
 8011a3c:	2a25      	cmp	r2, #37	@ 0x25
 8011a3e:	d1f9      	bne.n	8011a34 <_svfiprintf_r+0x54>
 8011a40:	ebba 0b04 	subs.w	fp, sl, r4
 8011a44:	d00b      	beq.n	8011a5e <_svfiprintf_r+0x7e>
 8011a46:	465b      	mov	r3, fp
 8011a48:	4622      	mov	r2, r4
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	f7ff ff6b 	bl	8011928 <__ssputs_r>
 8011a52:	3001      	adds	r0, #1
 8011a54:	f000 80a7 	beq.w	8011ba6 <_svfiprintf_r+0x1c6>
 8011a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a5a:	445a      	add	r2, fp
 8011a5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 809f 	beq.w	8011ba6 <_svfiprintf_r+0x1c6>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6e:	f10a 0a01 	add.w	sl, sl, #1
 8011a72:	9304      	str	r3, [sp, #16]
 8011a74:	9307      	str	r3, [sp, #28]
 8011a76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a80:	4654      	mov	r4, sl
 8011a82:	2205      	movs	r2, #5
 8011a84:	484f      	ldr	r0, [pc, #316]	@ (8011bc4 <_svfiprintf_r+0x1e4>)
 8011a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a8a:	f7fe fc56 	bl	801033a <memchr>
 8011a8e:	9a04      	ldr	r2, [sp, #16]
 8011a90:	b9d8      	cbnz	r0, 8011aca <_svfiprintf_r+0xea>
 8011a92:	06d0      	lsls	r0, r2, #27
 8011a94:	bf44      	itt	mi
 8011a96:	2320      	movmi	r3, #32
 8011a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a9c:	0711      	lsls	r1, r2, #28
 8011a9e:	bf44      	itt	mi
 8011aa0:	232b      	movmi	r3, #43	@ 0x2b
 8011aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8011aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aac:	d015      	beq.n	8011ada <_svfiprintf_r+0xfa>
 8011aae:	9a07      	ldr	r2, [sp, #28]
 8011ab0:	4654      	mov	r4, sl
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	f04f 0c0a 	mov.w	ip, #10
 8011ab8:	4621      	mov	r1, r4
 8011aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011abe:	3b30      	subs	r3, #48	@ 0x30
 8011ac0:	2b09      	cmp	r3, #9
 8011ac2:	d94b      	bls.n	8011b5c <_svfiprintf_r+0x17c>
 8011ac4:	b1b0      	cbz	r0, 8011af4 <_svfiprintf_r+0x114>
 8011ac6:	9207      	str	r2, [sp, #28]
 8011ac8:	e014      	b.n	8011af4 <_svfiprintf_r+0x114>
 8011aca:	eba0 0308 	sub.w	r3, r0, r8
 8011ace:	46a2      	mov	sl, r4
 8011ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	9304      	str	r3, [sp, #16]
 8011ad8:	e7d2      	b.n	8011a80 <_svfiprintf_r+0xa0>
 8011ada:	9b03      	ldr	r3, [sp, #12]
 8011adc:	1d19      	adds	r1, r3, #4
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	9103      	str	r1, [sp, #12]
 8011ae4:	bfbb      	ittet	lt
 8011ae6:	425b      	neglt	r3, r3
 8011ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8011aec:	9307      	strge	r3, [sp, #28]
 8011aee:	9307      	strlt	r3, [sp, #28]
 8011af0:	bfb8      	it	lt
 8011af2:	9204      	strlt	r2, [sp, #16]
 8011af4:	7823      	ldrb	r3, [r4, #0]
 8011af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011af8:	d10a      	bne.n	8011b10 <_svfiprintf_r+0x130>
 8011afa:	7863      	ldrb	r3, [r4, #1]
 8011afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011afe:	d132      	bne.n	8011b66 <_svfiprintf_r+0x186>
 8011b00:	9b03      	ldr	r3, [sp, #12]
 8011b02:	3402      	adds	r4, #2
 8011b04:	1d1a      	adds	r2, r3, #4
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b0c:	9203      	str	r2, [sp, #12]
 8011b0e:	9305      	str	r3, [sp, #20]
 8011b10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bd4 <_svfiprintf_r+0x1f4>
 8011b14:	2203      	movs	r2, #3
 8011b16:	7821      	ldrb	r1, [r4, #0]
 8011b18:	4650      	mov	r0, sl
 8011b1a:	f7fe fc0e 	bl	801033a <memchr>
 8011b1e:	b138      	cbz	r0, 8011b30 <_svfiprintf_r+0x150>
 8011b20:	eba0 000a 	sub.w	r0, r0, sl
 8011b24:	2240      	movs	r2, #64	@ 0x40
 8011b26:	9b04      	ldr	r3, [sp, #16]
 8011b28:	3401      	adds	r4, #1
 8011b2a:	4082      	lsls	r2, r0
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	9304      	str	r3, [sp, #16]
 8011b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b34:	2206      	movs	r2, #6
 8011b36:	4824      	ldr	r0, [pc, #144]	@ (8011bc8 <_svfiprintf_r+0x1e8>)
 8011b38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b3c:	f7fe fbfd 	bl	801033a <memchr>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d036      	beq.n	8011bb2 <_svfiprintf_r+0x1d2>
 8011b44:	4b21      	ldr	r3, [pc, #132]	@ (8011bcc <_svfiprintf_r+0x1ec>)
 8011b46:	bb1b      	cbnz	r3, 8011b90 <_svfiprintf_r+0x1b0>
 8011b48:	9b03      	ldr	r3, [sp, #12]
 8011b4a:	3307      	adds	r3, #7
 8011b4c:	f023 0307 	bic.w	r3, r3, #7
 8011b50:	3308      	adds	r3, #8
 8011b52:	9303      	str	r3, [sp, #12]
 8011b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b56:	4433      	add	r3, r6
 8011b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b5a:	e76a      	b.n	8011a32 <_svfiprintf_r+0x52>
 8011b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b60:	460c      	mov	r4, r1
 8011b62:	2001      	movs	r0, #1
 8011b64:	e7a8      	b.n	8011ab8 <_svfiprintf_r+0xd8>
 8011b66:	2300      	movs	r3, #0
 8011b68:	3401      	adds	r4, #1
 8011b6a:	f04f 0c0a 	mov.w	ip, #10
 8011b6e:	4619      	mov	r1, r3
 8011b70:	9305      	str	r3, [sp, #20]
 8011b72:	4620      	mov	r0, r4
 8011b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b78:	3a30      	subs	r2, #48	@ 0x30
 8011b7a:	2a09      	cmp	r2, #9
 8011b7c:	d903      	bls.n	8011b86 <_svfiprintf_r+0x1a6>
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0c6      	beq.n	8011b10 <_svfiprintf_r+0x130>
 8011b82:	9105      	str	r1, [sp, #20]
 8011b84:	e7c4      	b.n	8011b10 <_svfiprintf_r+0x130>
 8011b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	e7f0      	b.n	8011b72 <_svfiprintf_r+0x192>
 8011b90:	ab03      	add	r3, sp, #12
 8011b92:	462a      	mov	r2, r5
 8011b94:	a904      	add	r1, sp, #16
 8011b96:	4638      	mov	r0, r7
 8011b98:	9300      	str	r3, [sp, #0]
 8011b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011bd0 <_svfiprintf_r+0x1f0>)
 8011b9c:	f7fd fe6c 	bl	800f878 <_printf_float>
 8011ba0:	1c42      	adds	r2, r0, #1
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	d1d6      	bne.n	8011b54 <_svfiprintf_r+0x174>
 8011ba6:	89ab      	ldrh	r3, [r5, #12]
 8011ba8:	065b      	lsls	r3, r3, #25
 8011baa:	f53f af2d 	bmi.w	8011a08 <_svfiprintf_r+0x28>
 8011bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bb0:	e72c      	b.n	8011a0c <_svfiprintf_r+0x2c>
 8011bb2:	ab03      	add	r3, sp, #12
 8011bb4:	462a      	mov	r2, r5
 8011bb6:	a904      	add	r1, sp, #16
 8011bb8:	4638      	mov	r0, r7
 8011bba:	9300      	str	r3, [sp, #0]
 8011bbc:	4b04      	ldr	r3, [pc, #16]	@ (8011bd0 <_svfiprintf_r+0x1f0>)
 8011bbe:	f7fe f8f7 	bl	800fdb0 <_printf_i>
 8011bc2:	e7ed      	b.n	8011ba0 <_svfiprintf_r+0x1c0>
 8011bc4:	08012848 	.word	0x08012848
 8011bc8:	08012852 	.word	0x08012852
 8011bcc:	0800f879 	.word	0x0800f879
 8011bd0:	08011929 	.word	0x08011929
 8011bd4:	0801284e 	.word	0x0801284e

08011bd8 <__sflush_r>:
 8011bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be0:	0716      	lsls	r6, r2, #28
 8011be2:	4605      	mov	r5, r0
 8011be4:	460c      	mov	r4, r1
 8011be6:	d454      	bmi.n	8011c92 <__sflush_r+0xba>
 8011be8:	684b      	ldr	r3, [r1, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	dc02      	bgt.n	8011bf4 <__sflush_r+0x1c>
 8011bee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dd48      	ble.n	8011c86 <__sflush_r+0xae>
 8011bf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bf6:	2e00      	cmp	r6, #0
 8011bf8:	d045      	beq.n	8011c86 <__sflush_r+0xae>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c00:	682f      	ldr	r7, [r5, #0]
 8011c02:	6a21      	ldr	r1, [r4, #32]
 8011c04:	602b      	str	r3, [r5, #0]
 8011c06:	d030      	beq.n	8011c6a <__sflush_r+0x92>
 8011c08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	0759      	lsls	r1, r3, #29
 8011c0e:	d505      	bpl.n	8011c1c <__sflush_r+0x44>
 8011c10:	6863      	ldr	r3, [r4, #4]
 8011c12:	1ad2      	subs	r2, r2, r3
 8011c14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c16:	b10b      	cbz	r3, 8011c1c <__sflush_r+0x44>
 8011c18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c1a:	1ad2      	subs	r2, r2, r3
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c20:	6a21      	ldr	r1, [r4, #32]
 8011c22:	4628      	mov	r0, r5
 8011c24:	47b0      	blx	r6
 8011c26:	1c43      	adds	r3, r0, #1
 8011c28:	89a3      	ldrh	r3, [r4, #12]
 8011c2a:	d106      	bne.n	8011c3a <__sflush_r+0x62>
 8011c2c:	6829      	ldr	r1, [r5, #0]
 8011c2e:	291d      	cmp	r1, #29
 8011c30:	d82b      	bhi.n	8011c8a <__sflush_r+0xb2>
 8011c32:	4a2a      	ldr	r2, [pc, #168]	@ (8011cdc <__sflush_r+0x104>)
 8011c34:	410a      	asrs	r2, r1
 8011c36:	07d6      	lsls	r6, r2, #31
 8011c38:	d427      	bmi.n	8011c8a <__sflush_r+0xb2>
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	04d9      	lsls	r1, r3, #19
 8011c3e:	6062      	str	r2, [r4, #4]
 8011c40:	6922      	ldr	r2, [r4, #16]
 8011c42:	6022      	str	r2, [r4, #0]
 8011c44:	d504      	bpl.n	8011c50 <__sflush_r+0x78>
 8011c46:	1c42      	adds	r2, r0, #1
 8011c48:	d101      	bne.n	8011c4e <__sflush_r+0x76>
 8011c4a:	682b      	ldr	r3, [r5, #0]
 8011c4c:	b903      	cbnz	r3, 8011c50 <__sflush_r+0x78>
 8011c4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c52:	602f      	str	r7, [r5, #0]
 8011c54:	b1b9      	cbz	r1, 8011c86 <__sflush_r+0xae>
 8011c56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c5a:	4299      	cmp	r1, r3
 8011c5c:	d002      	beq.n	8011c64 <__sflush_r+0x8c>
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f7ff f9da 	bl	8011018 <_free_r>
 8011c64:	2300      	movs	r3, #0
 8011c66:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c68:	e00d      	b.n	8011c86 <__sflush_r+0xae>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	47b0      	blx	r6
 8011c70:	4602      	mov	r2, r0
 8011c72:	1c50      	adds	r0, r2, #1
 8011c74:	d1c9      	bne.n	8011c0a <__sflush_r+0x32>
 8011c76:	682b      	ldr	r3, [r5, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d0c6      	beq.n	8011c0a <__sflush_r+0x32>
 8011c7c:	2b1d      	cmp	r3, #29
 8011c7e:	d001      	beq.n	8011c84 <__sflush_r+0xac>
 8011c80:	2b16      	cmp	r3, #22
 8011c82:	d11d      	bne.n	8011cc0 <__sflush_r+0xe8>
 8011c84:	602f      	str	r7, [r5, #0]
 8011c86:	2000      	movs	r0, #0
 8011c88:	e021      	b.n	8011cce <__sflush_r+0xf6>
 8011c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c8e:	b21b      	sxth	r3, r3
 8011c90:	e01a      	b.n	8011cc8 <__sflush_r+0xf0>
 8011c92:	690f      	ldr	r7, [r1, #16]
 8011c94:	2f00      	cmp	r7, #0
 8011c96:	d0f6      	beq.n	8011c86 <__sflush_r+0xae>
 8011c98:	0793      	lsls	r3, r2, #30
 8011c9a:	680e      	ldr	r6, [r1, #0]
 8011c9c:	600f      	str	r7, [r1, #0]
 8011c9e:	bf0c      	ite	eq
 8011ca0:	694b      	ldreq	r3, [r1, #20]
 8011ca2:	2300      	movne	r3, #0
 8011ca4:	eba6 0807 	sub.w	r8, r6, r7
 8011ca8:	608b      	str	r3, [r1, #8]
 8011caa:	f1b8 0f00 	cmp.w	r8, #0
 8011cae:	ddea      	ble.n	8011c86 <__sflush_r+0xae>
 8011cb0:	4643      	mov	r3, r8
 8011cb2:	463a      	mov	r2, r7
 8011cb4:	6a21      	ldr	r1, [r4, #32]
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011cba:	47b0      	blx	r6
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	dc08      	bgt.n	8011cd2 <__sflush_r+0xfa>
 8011cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd2:	4407      	add	r7, r0
 8011cd4:	eba8 0800 	sub.w	r8, r8, r0
 8011cd8:	e7e7      	b.n	8011caa <__sflush_r+0xd2>
 8011cda:	bf00      	nop
 8011cdc:	dfbffffe 	.word	0xdfbffffe

08011ce0 <_fflush_r>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	690b      	ldr	r3, [r1, #16]
 8011ce4:	4605      	mov	r5, r0
 8011ce6:	460c      	mov	r4, r1
 8011ce8:	b913      	cbnz	r3, 8011cf0 <_fflush_r+0x10>
 8011cea:	2500      	movs	r5, #0
 8011cec:	4628      	mov	r0, r5
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
 8011cf0:	b118      	cbz	r0, 8011cfa <_fflush_r+0x1a>
 8011cf2:	6a03      	ldr	r3, [r0, #32]
 8011cf4:	b90b      	cbnz	r3, 8011cfa <_fflush_r+0x1a>
 8011cf6:	f7fe fa07 	bl	8010108 <__sinit>
 8011cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d0f3      	beq.n	8011cea <_fflush_r+0xa>
 8011d02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d04:	07d0      	lsls	r0, r2, #31
 8011d06:	d404      	bmi.n	8011d12 <_fflush_r+0x32>
 8011d08:	0599      	lsls	r1, r3, #22
 8011d0a:	d402      	bmi.n	8011d12 <_fflush_r+0x32>
 8011d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d0e:	f7fe fb12 	bl	8010336 <__retarget_lock_acquire_recursive>
 8011d12:	4628      	mov	r0, r5
 8011d14:	4621      	mov	r1, r4
 8011d16:	f7ff ff5f 	bl	8011bd8 <__sflush_r>
 8011d1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d1c:	4605      	mov	r5, r0
 8011d1e:	07da      	lsls	r2, r3, #31
 8011d20:	d4e4      	bmi.n	8011cec <_fflush_r+0xc>
 8011d22:	89a3      	ldrh	r3, [r4, #12]
 8011d24:	059b      	lsls	r3, r3, #22
 8011d26:	d4e1      	bmi.n	8011cec <_fflush_r+0xc>
 8011d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d2a:	f7fe fb05 	bl	8010338 <__retarget_lock_release_recursive>
 8011d2e:	e7dd      	b.n	8011cec <_fflush_r+0xc>

08011d30 <memmove>:
 8011d30:	4288      	cmp	r0, r1
 8011d32:	b510      	push	{r4, lr}
 8011d34:	eb01 0402 	add.w	r4, r1, r2
 8011d38:	d902      	bls.n	8011d40 <memmove+0x10>
 8011d3a:	4284      	cmp	r4, r0
 8011d3c:	4623      	mov	r3, r4
 8011d3e:	d807      	bhi.n	8011d50 <memmove+0x20>
 8011d40:	1e43      	subs	r3, r0, #1
 8011d42:	42a1      	cmp	r1, r4
 8011d44:	d008      	beq.n	8011d58 <memmove+0x28>
 8011d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d4e:	e7f8      	b.n	8011d42 <memmove+0x12>
 8011d50:	4402      	add	r2, r0
 8011d52:	4601      	mov	r1, r0
 8011d54:	428a      	cmp	r2, r1
 8011d56:	d100      	bne.n	8011d5a <memmove+0x2a>
 8011d58:	bd10      	pop	{r4, pc}
 8011d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d62:	e7f7      	b.n	8011d54 <memmove+0x24>

08011d64 <_sbrk_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	2300      	movs	r3, #0
 8011d68:	4d05      	ldr	r5, [pc, #20]	@ (8011d80 <_sbrk_r+0x1c>)
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	4608      	mov	r0, r1
 8011d6e:	602b      	str	r3, [r5, #0]
 8011d70:	f7f3 f86c 	bl	8004e4c <_sbrk>
 8011d74:	1c43      	adds	r3, r0, #1
 8011d76:	d102      	bne.n	8011d7e <_sbrk_r+0x1a>
 8011d78:	682b      	ldr	r3, [r5, #0]
 8011d7a:	b103      	cbz	r3, 8011d7e <_sbrk_r+0x1a>
 8011d7c:	6023      	str	r3, [r4, #0]
 8011d7e:	bd38      	pop	{r3, r4, r5, pc}
 8011d80:	20004d98 	.word	0x20004d98

08011d84 <__assert_func>:
 8011d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d86:	4614      	mov	r4, r2
 8011d88:	461a      	mov	r2, r3
 8011d8a:	4b09      	ldr	r3, [pc, #36]	@ (8011db0 <__assert_func+0x2c>)
 8011d8c:	4605      	mov	r5, r0
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	68d8      	ldr	r0, [r3, #12]
 8011d92:	b954      	cbnz	r4, 8011daa <__assert_func+0x26>
 8011d94:	4b07      	ldr	r3, [pc, #28]	@ (8011db4 <__assert_func+0x30>)
 8011d96:	461c      	mov	r4, r3
 8011d98:	9100      	str	r1, [sp, #0]
 8011d9a:	4907      	ldr	r1, [pc, #28]	@ (8011db8 <__assert_func+0x34>)
 8011d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011da0:	462b      	mov	r3, r5
 8011da2:	f000 f86f 	bl	8011e84 <fiprintf>
 8011da6:	f000 f87f 	bl	8011ea8 <abort>
 8011daa:	4b04      	ldr	r3, [pc, #16]	@ (8011dbc <__assert_func+0x38>)
 8011dac:	e7f4      	b.n	8011d98 <__assert_func+0x14>
 8011dae:	bf00      	nop
 8011db0:	20000030 	.word	0x20000030
 8011db4:	0801289e 	.word	0x0801289e
 8011db8:	08012870 	.word	0x08012870
 8011dbc:	08012863 	.word	0x08012863

08011dc0 <_calloc_r>:
 8011dc0:	b570      	push	{r4, r5, r6, lr}
 8011dc2:	fba1 5402 	umull	r5, r4, r1, r2
 8011dc6:	b93c      	cbnz	r4, 8011dd8 <_calloc_r+0x18>
 8011dc8:	4629      	mov	r1, r5
 8011dca:	f7ff f999 	bl	8011100 <_malloc_r>
 8011dce:	4606      	mov	r6, r0
 8011dd0:	b928      	cbnz	r0, 8011dde <_calloc_r+0x1e>
 8011dd2:	2600      	movs	r6, #0
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	bd70      	pop	{r4, r5, r6, pc}
 8011dd8:	220c      	movs	r2, #12
 8011dda:	6002      	str	r2, [r0, #0]
 8011ddc:	e7f9      	b.n	8011dd2 <_calloc_r+0x12>
 8011dde:	462a      	mov	r2, r5
 8011de0:	4621      	mov	r1, r4
 8011de2:	f7fe fa2a 	bl	801023a <memset>
 8011de6:	e7f5      	b.n	8011dd4 <_calloc_r+0x14>

08011de8 <__ascii_mbtowc>:
 8011de8:	b082      	sub	sp, #8
 8011dea:	b901      	cbnz	r1, 8011dee <__ascii_mbtowc+0x6>
 8011dec:	a901      	add	r1, sp, #4
 8011dee:	b142      	cbz	r2, 8011e02 <__ascii_mbtowc+0x1a>
 8011df0:	b14b      	cbz	r3, 8011e06 <__ascii_mbtowc+0x1e>
 8011df2:	7813      	ldrb	r3, [r2, #0]
 8011df4:	600b      	str	r3, [r1, #0]
 8011df6:	7812      	ldrb	r2, [r2, #0]
 8011df8:	1e10      	subs	r0, r2, #0
 8011dfa:	bf18      	it	ne
 8011dfc:	2001      	movne	r0, #1
 8011dfe:	b002      	add	sp, #8
 8011e00:	4770      	bx	lr
 8011e02:	4610      	mov	r0, r2
 8011e04:	e7fb      	b.n	8011dfe <__ascii_mbtowc+0x16>
 8011e06:	f06f 0001 	mvn.w	r0, #1
 8011e0a:	e7f8      	b.n	8011dfe <__ascii_mbtowc+0x16>

08011e0c <_realloc_r>:
 8011e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e10:	4680      	mov	r8, r0
 8011e12:	4615      	mov	r5, r2
 8011e14:	460c      	mov	r4, r1
 8011e16:	b921      	cbnz	r1, 8011e22 <_realloc_r+0x16>
 8011e18:	4611      	mov	r1, r2
 8011e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e1e:	f7ff b96f 	b.w	8011100 <_malloc_r>
 8011e22:	b92a      	cbnz	r2, 8011e30 <_realloc_r+0x24>
 8011e24:	f7ff f8f8 	bl	8011018 <_free_r>
 8011e28:	2400      	movs	r4, #0
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e30:	f000 f841 	bl	8011eb6 <_malloc_usable_size_r>
 8011e34:	4285      	cmp	r5, r0
 8011e36:	4606      	mov	r6, r0
 8011e38:	d802      	bhi.n	8011e40 <_realloc_r+0x34>
 8011e3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011e3e:	d8f4      	bhi.n	8011e2a <_realloc_r+0x1e>
 8011e40:	4629      	mov	r1, r5
 8011e42:	4640      	mov	r0, r8
 8011e44:	f7ff f95c 	bl	8011100 <_malloc_r>
 8011e48:	4607      	mov	r7, r0
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d0ec      	beq.n	8011e28 <_realloc_r+0x1c>
 8011e4e:	42b5      	cmp	r5, r6
 8011e50:	462a      	mov	r2, r5
 8011e52:	4621      	mov	r1, r4
 8011e54:	bf28      	it	cs
 8011e56:	4632      	movcs	r2, r6
 8011e58:	f7fe fa7d 	bl	8010356 <memcpy>
 8011e5c:	4621      	mov	r1, r4
 8011e5e:	4640      	mov	r0, r8
 8011e60:	463c      	mov	r4, r7
 8011e62:	f7ff f8d9 	bl	8011018 <_free_r>
 8011e66:	e7e0      	b.n	8011e2a <_realloc_r+0x1e>

08011e68 <__ascii_wctomb>:
 8011e68:	4603      	mov	r3, r0
 8011e6a:	4608      	mov	r0, r1
 8011e6c:	b141      	cbz	r1, 8011e80 <__ascii_wctomb+0x18>
 8011e6e:	2aff      	cmp	r2, #255	@ 0xff
 8011e70:	d904      	bls.n	8011e7c <__ascii_wctomb+0x14>
 8011e72:	228a      	movs	r2, #138	@ 0x8a
 8011e74:	f04f 30ff 	mov.w	r0, #4294967295
 8011e78:	601a      	str	r2, [r3, #0]
 8011e7a:	4770      	bx	lr
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	700a      	strb	r2, [r1, #0]
 8011e80:	4770      	bx	lr
	...

08011e84 <fiprintf>:
 8011e84:	b40e      	push	{r1, r2, r3}
 8011e86:	b503      	push	{r0, r1, lr}
 8011e88:	ab03      	add	r3, sp, #12
 8011e8a:	4601      	mov	r1, r0
 8011e8c:	4805      	ldr	r0, [pc, #20]	@ (8011ea4 <fiprintf+0x20>)
 8011e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e92:	6800      	ldr	r0, [r0, #0]
 8011e94:	9301      	str	r3, [sp, #4]
 8011e96:	f000 f83f 	bl	8011f18 <_vfiprintf_r>
 8011e9a:	b002      	add	sp, #8
 8011e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ea0:	b003      	add	sp, #12
 8011ea2:	4770      	bx	lr
 8011ea4:	20000030 	.word	0x20000030

08011ea8 <abort>:
 8011ea8:	2006      	movs	r0, #6
 8011eaa:	b508      	push	{r3, lr}
 8011eac:	f000 fa08 	bl	80122c0 <raise>
 8011eb0:	2001      	movs	r0, #1
 8011eb2:	f7f2 ff53 	bl	8004d5c <_exit>

08011eb6 <_malloc_usable_size_r>:
 8011eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eba:	1f18      	subs	r0, r3, #4
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	bfbc      	itt	lt
 8011ec0:	580b      	ldrlt	r3, [r1, r0]
 8011ec2:	18c0      	addlt	r0, r0, r3
 8011ec4:	4770      	bx	lr

08011ec6 <__sfputc_r>:
 8011ec6:	6893      	ldr	r3, [r2, #8]
 8011ec8:	3b01      	subs	r3, #1
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	6093      	str	r3, [r2, #8]
 8011ece:	b410      	push	{r4}
 8011ed0:	da08      	bge.n	8011ee4 <__sfputc_r+0x1e>
 8011ed2:	6994      	ldr	r4, [r2, #24]
 8011ed4:	42a3      	cmp	r3, r4
 8011ed6:	db01      	blt.n	8011edc <__sfputc_r+0x16>
 8011ed8:	290a      	cmp	r1, #10
 8011eda:	d103      	bne.n	8011ee4 <__sfputc_r+0x1e>
 8011edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ee0:	f000 b932 	b.w	8012148 <__swbuf_r>
 8011ee4:	6813      	ldr	r3, [r2, #0]
 8011ee6:	1c58      	adds	r0, r3, #1
 8011ee8:	6010      	str	r0, [r2, #0]
 8011eea:	4608      	mov	r0, r1
 8011eec:	7019      	strb	r1, [r3, #0]
 8011eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <__sfputs_r>:
 8011ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	460f      	mov	r7, r1
 8011efa:	4614      	mov	r4, r2
 8011efc:	18d5      	adds	r5, r2, r3
 8011efe:	42ac      	cmp	r4, r5
 8011f00:	d101      	bne.n	8011f06 <__sfputs_r+0x12>
 8011f02:	2000      	movs	r0, #0
 8011f04:	e007      	b.n	8011f16 <__sfputs_r+0x22>
 8011f06:	463a      	mov	r2, r7
 8011f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f7ff ffda 	bl	8011ec6 <__sfputc_r>
 8011f12:	1c43      	adds	r3, r0, #1
 8011f14:	d1f3      	bne.n	8011efe <__sfputs_r+0xa>
 8011f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f18 <_vfiprintf_r>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	460d      	mov	r5, r1
 8011f1e:	b09d      	sub	sp, #116	@ 0x74
 8011f20:	4614      	mov	r4, r2
 8011f22:	4698      	mov	r8, r3
 8011f24:	4606      	mov	r6, r0
 8011f26:	b118      	cbz	r0, 8011f30 <_vfiprintf_r+0x18>
 8011f28:	6a03      	ldr	r3, [r0, #32]
 8011f2a:	b90b      	cbnz	r3, 8011f30 <_vfiprintf_r+0x18>
 8011f2c:	f7fe f8ec 	bl	8010108 <__sinit>
 8011f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f32:	07d9      	lsls	r1, r3, #31
 8011f34:	d405      	bmi.n	8011f42 <_vfiprintf_r+0x2a>
 8011f36:	89ab      	ldrh	r3, [r5, #12]
 8011f38:	059a      	lsls	r2, r3, #22
 8011f3a:	d402      	bmi.n	8011f42 <_vfiprintf_r+0x2a>
 8011f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f3e:	f7fe f9fa 	bl	8010336 <__retarget_lock_acquire_recursive>
 8011f42:	89ab      	ldrh	r3, [r5, #12]
 8011f44:	071b      	lsls	r3, r3, #28
 8011f46:	d501      	bpl.n	8011f4c <_vfiprintf_r+0x34>
 8011f48:	692b      	ldr	r3, [r5, #16]
 8011f4a:	b99b      	cbnz	r3, 8011f74 <_vfiprintf_r+0x5c>
 8011f4c:	4629      	mov	r1, r5
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f000 f938 	bl	80121c4 <__swsetup_r>
 8011f54:	b170      	cbz	r0, 8011f74 <_vfiprintf_r+0x5c>
 8011f56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f58:	07dc      	lsls	r4, r3, #31
 8011f5a:	d504      	bpl.n	8011f66 <_vfiprintf_r+0x4e>
 8011f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f60:	b01d      	add	sp, #116	@ 0x74
 8011f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f66:	89ab      	ldrh	r3, [r5, #12]
 8011f68:	0598      	lsls	r0, r3, #22
 8011f6a:	d4f7      	bmi.n	8011f5c <_vfiprintf_r+0x44>
 8011f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f6e:	f7fe f9e3 	bl	8010338 <__retarget_lock_release_recursive>
 8011f72:	e7f3      	b.n	8011f5c <_vfiprintf_r+0x44>
 8011f74:	2300      	movs	r3, #0
 8011f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f7a:	f04f 0901 	mov.w	r9, #1
 8011f7e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012134 <_vfiprintf_r+0x21c>
 8011f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f84:	2320      	movs	r3, #32
 8011f86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f8a:	2330      	movs	r3, #48	@ 0x30
 8011f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f90:	4623      	mov	r3, r4
 8011f92:	469a      	mov	sl, r3
 8011f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f98:	b10a      	cbz	r2, 8011f9e <_vfiprintf_r+0x86>
 8011f9a:	2a25      	cmp	r2, #37	@ 0x25
 8011f9c:	d1f9      	bne.n	8011f92 <_vfiprintf_r+0x7a>
 8011f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8011fa2:	d00b      	beq.n	8011fbc <_vfiprintf_r+0xa4>
 8011fa4:	465b      	mov	r3, fp
 8011fa6:	4622      	mov	r2, r4
 8011fa8:	4629      	mov	r1, r5
 8011faa:	4630      	mov	r0, r6
 8011fac:	f7ff ffa2 	bl	8011ef4 <__sfputs_r>
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	f000 80a7 	beq.w	8012104 <_vfiprintf_r+0x1ec>
 8011fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fb8:	445a      	add	r2, fp
 8011fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	f000 809f 	beq.w	8012104 <_vfiprintf_r+0x1ec>
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011fcc:	f10a 0a01 	add.w	sl, sl, #1
 8011fd0:	9304      	str	r3, [sp, #16]
 8011fd2:	9307      	str	r3, [sp, #28]
 8011fd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011fd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fde:	4654      	mov	r4, sl
 8011fe0:	2205      	movs	r2, #5
 8011fe2:	4854      	ldr	r0, [pc, #336]	@ (8012134 <_vfiprintf_r+0x21c>)
 8011fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe8:	f7fe f9a7 	bl	801033a <memchr>
 8011fec:	9a04      	ldr	r2, [sp, #16]
 8011fee:	b9d8      	cbnz	r0, 8012028 <_vfiprintf_r+0x110>
 8011ff0:	06d1      	lsls	r1, r2, #27
 8011ff2:	bf44      	itt	mi
 8011ff4:	2320      	movmi	r3, #32
 8011ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ffa:	0713      	lsls	r3, r2, #28
 8011ffc:	bf44      	itt	mi
 8011ffe:	232b      	movmi	r3, #43	@ 0x2b
 8012000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012004:	f89a 3000 	ldrb.w	r3, [sl]
 8012008:	2b2a      	cmp	r3, #42	@ 0x2a
 801200a:	d015      	beq.n	8012038 <_vfiprintf_r+0x120>
 801200c:	9a07      	ldr	r2, [sp, #28]
 801200e:	4654      	mov	r4, sl
 8012010:	2000      	movs	r0, #0
 8012012:	f04f 0c0a 	mov.w	ip, #10
 8012016:	4621      	mov	r1, r4
 8012018:	f811 3b01 	ldrb.w	r3, [r1], #1
 801201c:	3b30      	subs	r3, #48	@ 0x30
 801201e:	2b09      	cmp	r3, #9
 8012020:	d94b      	bls.n	80120ba <_vfiprintf_r+0x1a2>
 8012022:	b1b0      	cbz	r0, 8012052 <_vfiprintf_r+0x13a>
 8012024:	9207      	str	r2, [sp, #28]
 8012026:	e014      	b.n	8012052 <_vfiprintf_r+0x13a>
 8012028:	eba0 0308 	sub.w	r3, r0, r8
 801202c:	46a2      	mov	sl, r4
 801202e:	fa09 f303 	lsl.w	r3, r9, r3
 8012032:	4313      	orrs	r3, r2
 8012034:	9304      	str	r3, [sp, #16]
 8012036:	e7d2      	b.n	8011fde <_vfiprintf_r+0xc6>
 8012038:	9b03      	ldr	r3, [sp, #12]
 801203a:	1d19      	adds	r1, r3, #4
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	9103      	str	r1, [sp, #12]
 8012042:	bfbb      	ittet	lt
 8012044:	425b      	neglt	r3, r3
 8012046:	f042 0202 	orrlt.w	r2, r2, #2
 801204a:	9307      	strge	r3, [sp, #28]
 801204c:	9307      	strlt	r3, [sp, #28]
 801204e:	bfb8      	it	lt
 8012050:	9204      	strlt	r2, [sp, #16]
 8012052:	7823      	ldrb	r3, [r4, #0]
 8012054:	2b2e      	cmp	r3, #46	@ 0x2e
 8012056:	d10a      	bne.n	801206e <_vfiprintf_r+0x156>
 8012058:	7863      	ldrb	r3, [r4, #1]
 801205a:	2b2a      	cmp	r3, #42	@ 0x2a
 801205c:	d132      	bne.n	80120c4 <_vfiprintf_r+0x1ac>
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	3402      	adds	r4, #2
 8012062:	1d1a      	adds	r2, r3, #4
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801206a:	9203      	str	r2, [sp, #12]
 801206c:	9305      	str	r3, [sp, #20]
 801206e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012144 <_vfiprintf_r+0x22c>
 8012072:	2203      	movs	r2, #3
 8012074:	7821      	ldrb	r1, [r4, #0]
 8012076:	4650      	mov	r0, sl
 8012078:	f7fe f95f 	bl	801033a <memchr>
 801207c:	b138      	cbz	r0, 801208e <_vfiprintf_r+0x176>
 801207e:	eba0 000a 	sub.w	r0, r0, sl
 8012082:	2240      	movs	r2, #64	@ 0x40
 8012084:	9b04      	ldr	r3, [sp, #16]
 8012086:	3401      	adds	r4, #1
 8012088:	4082      	lsls	r2, r0
 801208a:	4313      	orrs	r3, r2
 801208c:	9304      	str	r3, [sp, #16]
 801208e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012092:	2206      	movs	r2, #6
 8012094:	4828      	ldr	r0, [pc, #160]	@ (8012138 <_vfiprintf_r+0x220>)
 8012096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801209a:	f7fe f94e 	bl	801033a <memchr>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d03f      	beq.n	8012122 <_vfiprintf_r+0x20a>
 80120a2:	4b26      	ldr	r3, [pc, #152]	@ (801213c <_vfiprintf_r+0x224>)
 80120a4:	bb1b      	cbnz	r3, 80120ee <_vfiprintf_r+0x1d6>
 80120a6:	9b03      	ldr	r3, [sp, #12]
 80120a8:	3307      	adds	r3, #7
 80120aa:	f023 0307 	bic.w	r3, r3, #7
 80120ae:	3308      	adds	r3, #8
 80120b0:	9303      	str	r3, [sp, #12]
 80120b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120b4:	443b      	add	r3, r7
 80120b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80120b8:	e76a      	b.n	8011f90 <_vfiprintf_r+0x78>
 80120ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80120be:	460c      	mov	r4, r1
 80120c0:	2001      	movs	r0, #1
 80120c2:	e7a8      	b.n	8012016 <_vfiprintf_r+0xfe>
 80120c4:	2300      	movs	r3, #0
 80120c6:	3401      	adds	r4, #1
 80120c8:	f04f 0c0a 	mov.w	ip, #10
 80120cc:	4619      	mov	r1, r3
 80120ce:	9305      	str	r3, [sp, #20]
 80120d0:	4620      	mov	r0, r4
 80120d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120d6:	3a30      	subs	r2, #48	@ 0x30
 80120d8:	2a09      	cmp	r2, #9
 80120da:	d903      	bls.n	80120e4 <_vfiprintf_r+0x1cc>
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d0c6      	beq.n	801206e <_vfiprintf_r+0x156>
 80120e0:	9105      	str	r1, [sp, #20]
 80120e2:	e7c4      	b.n	801206e <_vfiprintf_r+0x156>
 80120e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80120e8:	4604      	mov	r4, r0
 80120ea:	2301      	movs	r3, #1
 80120ec:	e7f0      	b.n	80120d0 <_vfiprintf_r+0x1b8>
 80120ee:	ab03      	add	r3, sp, #12
 80120f0:	462a      	mov	r2, r5
 80120f2:	a904      	add	r1, sp, #16
 80120f4:	4630      	mov	r0, r6
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	4b11      	ldr	r3, [pc, #68]	@ (8012140 <_vfiprintf_r+0x228>)
 80120fa:	f7fd fbbd 	bl	800f878 <_printf_float>
 80120fe:	4607      	mov	r7, r0
 8012100:	1c78      	adds	r0, r7, #1
 8012102:	d1d6      	bne.n	80120b2 <_vfiprintf_r+0x19a>
 8012104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012106:	07d9      	lsls	r1, r3, #31
 8012108:	d405      	bmi.n	8012116 <_vfiprintf_r+0x1fe>
 801210a:	89ab      	ldrh	r3, [r5, #12]
 801210c:	059a      	lsls	r2, r3, #22
 801210e:	d402      	bmi.n	8012116 <_vfiprintf_r+0x1fe>
 8012110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012112:	f7fe f911 	bl	8010338 <__retarget_lock_release_recursive>
 8012116:	89ab      	ldrh	r3, [r5, #12]
 8012118:	065b      	lsls	r3, r3, #25
 801211a:	f53f af1f 	bmi.w	8011f5c <_vfiprintf_r+0x44>
 801211e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012120:	e71e      	b.n	8011f60 <_vfiprintf_r+0x48>
 8012122:	ab03      	add	r3, sp, #12
 8012124:	462a      	mov	r2, r5
 8012126:	a904      	add	r1, sp, #16
 8012128:	4630      	mov	r0, r6
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	4b04      	ldr	r3, [pc, #16]	@ (8012140 <_vfiprintf_r+0x228>)
 801212e:	f7fd fe3f 	bl	800fdb0 <_printf_i>
 8012132:	e7e4      	b.n	80120fe <_vfiprintf_r+0x1e6>
 8012134:	08012848 	.word	0x08012848
 8012138:	08012852 	.word	0x08012852
 801213c:	0800f879 	.word	0x0800f879
 8012140:	08011ef5 	.word	0x08011ef5
 8012144:	0801284e 	.word	0x0801284e

08012148 <__swbuf_r>:
 8012148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801214a:	460e      	mov	r6, r1
 801214c:	4614      	mov	r4, r2
 801214e:	4605      	mov	r5, r0
 8012150:	b118      	cbz	r0, 801215a <__swbuf_r+0x12>
 8012152:	6a03      	ldr	r3, [r0, #32]
 8012154:	b90b      	cbnz	r3, 801215a <__swbuf_r+0x12>
 8012156:	f7fd ffd7 	bl	8010108 <__sinit>
 801215a:	69a3      	ldr	r3, [r4, #24]
 801215c:	60a3      	str	r3, [r4, #8]
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	071a      	lsls	r2, r3, #28
 8012162:	d501      	bpl.n	8012168 <__swbuf_r+0x20>
 8012164:	6923      	ldr	r3, [r4, #16]
 8012166:	b943      	cbnz	r3, 801217a <__swbuf_r+0x32>
 8012168:	4621      	mov	r1, r4
 801216a:	4628      	mov	r0, r5
 801216c:	f000 f82a 	bl	80121c4 <__swsetup_r>
 8012170:	b118      	cbz	r0, 801217a <__swbuf_r+0x32>
 8012172:	f04f 37ff 	mov.w	r7, #4294967295
 8012176:	4638      	mov	r0, r7
 8012178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801217a:	6823      	ldr	r3, [r4, #0]
 801217c:	b2f6      	uxtb	r6, r6
 801217e:	6922      	ldr	r2, [r4, #16]
 8012180:	4637      	mov	r7, r6
 8012182:	1a98      	subs	r0, r3, r2
 8012184:	6963      	ldr	r3, [r4, #20]
 8012186:	4283      	cmp	r3, r0
 8012188:	dc05      	bgt.n	8012196 <__swbuf_r+0x4e>
 801218a:	4621      	mov	r1, r4
 801218c:	4628      	mov	r0, r5
 801218e:	f7ff fda7 	bl	8011ce0 <_fflush_r>
 8012192:	2800      	cmp	r0, #0
 8012194:	d1ed      	bne.n	8012172 <__swbuf_r+0x2a>
 8012196:	68a3      	ldr	r3, [r4, #8]
 8012198:	3b01      	subs	r3, #1
 801219a:	60a3      	str	r3, [r4, #8]
 801219c:	6823      	ldr	r3, [r4, #0]
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	6022      	str	r2, [r4, #0]
 80121a2:	701e      	strb	r6, [r3, #0]
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	6962      	ldr	r2, [r4, #20]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d004      	beq.n	80121b6 <__swbuf_r+0x6e>
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	07db      	lsls	r3, r3, #31
 80121b0:	d5e1      	bpl.n	8012176 <__swbuf_r+0x2e>
 80121b2:	2e0a      	cmp	r6, #10
 80121b4:	d1df      	bne.n	8012176 <__swbuf_r+0x2e>
 80121b6:	4621      	mov	r1, r4
 80121b8:	4628      	mov	r0, r5
 80121ba:	f7ff fd91 	bl	8011ce0 <_fflush_r>
 80121be:	2800      	cmp	r0, #0
 80121c0:	d0d9      	beq.n	8012176 <__swbuf_r+0x2e>
 80121c2:	e7d6      	b.n	8012172 <__swbuf_r+0x2a>

080121c4 <__swsetup_r>:
 80121c4:	b538      	push	{r3, r4, r5, lr}
 80121c6:	4b29      	ldr	r3, [pc, #164]	@ (801226c <__swsetup_r+0xa8>)
 80121c8:	4605      	mov	r5, r0
 80121ca:	460c      	mov	r4, r1
 80121cc:	6818      	ldr	r0, [r3, #0]
 80121ce:	b118      	cbz	r0, 80121d8 <__swsetup_r+0x14>
 80121d0:	6a03      	ldr	r3, [r0, #32]
 80121d2:	b90b      	cbnz	r3, 80121d8 <__swsetup_r+0x14>
 80121d4:	f7fd ff98 	bl	8010108 <__sinit>
 80121d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121dc:	0719      	lsls	r1, r3, #28
 80121de:	d422      	bmi.n	8012226 <__swsetup_r+0x62>
 80121e0:	06da      	lsls	r2, r3, #27
 80121e2:	d407      	bmi.n	80121f4 <__swsetup_r+0x30>
 80121e4:	2209      	movs	r2, #9
 80121e6:	602a      	str	r2, [r5, #0]
 80121e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ec:	f04f 30ff 	mov.w	r0, #4294967295
 80121f0:	81a3      	strh	r3, [r4, #12]
 80121f2:	e033      	b.n	801225c <__swsetup_r+0x98>
 80121f4:	0758      	lsls	r0, r3, #29
 80121f6:	d512      	bpl.n	801221e <__swsetup_r+0x5a>
 80121f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121fa:	b141      	cbz	r1, 801220e <__swsetup_r+0x4a>
 80121fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012200:	4299      	cmp	r1, r3
 8012202:	d002      	beq.n	801220a <__swsetup_r+0x46>
 8012204:	4628      	mov	r0, r5
 8012206:	f7fe ff07 	bl	8011018 <_free_r>
 801220a:	2300      	movs	r3, #0
 801220c:	6363      	str	r3, [r4, #52]	@ 0x34
 801220e:	89a3      	ldrh	r3, [r4, #12]
 8012210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012214:	81a3      	strh	r3, [r4, #12]
 8012216:	2300      	movs	r3, #0
 8012218:	6063      	str	r3, [r4, #4]
 801221a:	6923      	ldr	r3, [r4, #16]
 801221c:	6023      	str	r3, [r4, #0]
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	f043 0308 	orr.w	r3, r3, #8
 8012224:	81a3      	strh	r3, [r4, #12]
 8012226:	6923      	ldr	r3, [r4, #16]
 8012228:	b94b      	cbnz	r3, 801223e <__swsetup_r+0x7a>
 801222a:	89a3      	ldrh	r3, [r4, #12]
 801222c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012234:	d003      	beq.n	801223e <__swsetup_r+0x7a>
 8012236:	4621      	mov	r1, r4
 8012238:	4628      	mov	r0, r5
 801223a:	f000 f882 	bl	8012342 <__smakebuf_r>
 801223e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012242:	f013 0201 	ands.w	r2, r3, #1
 8012246:	d00a      	beq.n	801225e <__swsetup_r+0x9a>
 8012248:	2200      	movs	r2, #0
 801224a:	60a2      	str	r2, [r4, #8]
 801224c:	6962      	ldr	r2, [r4, #20]
 801224e:	4252      	negs	r2, r2
 8012250:	61a2      	str	r2, [r4, #24]
 8012252:	6922      	ldr	r2, [r4, #16]
 8012254:	b942      	cbnz	r2, 8012268 <__swsetup_r+0xa4>
 8012256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801225a:	d1c5      	bne.n	80121e8 <__swsetup_r+0x24>
 801225c:	bd38      	pop	{r3, r4, r5, pc}
 801225e:	0799      	lsls	r1, r3, #30
 8012260:	bf58      	it	pl
 8012262:	6962      	ldrpl	r2, [r4, #20]
 8012264:	60a2      	str	r2, [r4, #8]
 8012266:	e7f4      	b.n	8012252 <__swsetup_r+0x8e>
 8012268:	2000      	movs	r0, #0
 801226a:	e7f7      	b.n	801225c <__swsetup_r+0x98>
 801226c:	20000030 	.word	0x20000030

08012270 <_raise_r>:
 8012270:	291f      	cmp	r1, #31
 8012272:	b538      	push	{r3, r4, r5, lr}
 8012274:	4605      	mov	r5, r0
 8012276:	460c      	mov	r4, r1
 8012278:	d904      	bls.n	8012284 <_raise_r+0x14>
 801227a:	2316      	movs	r3, #22
 801227c:	6003      	str	r3, [r0, #0]
 801227e:	f04f 30ff 	mov.w	r0, #4294967295
 8012282:	bd38      	pop	{r3, r4, r5, pc}
 8012284:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012286:	b112      	cbz	r2, 801228e <_raise_r+0x1e>
 8012288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801228c:	b94b      	cbnz	r3, 80122a2 <_raise_r+0x32>
 801228e:	4628      	mov	r0, r5
 8012290:	f000 f830 	bl	80122f4 <_getpid_r>
 8012294:	4622      	mov	r2, r4
 8012296:	4601      	mov	r1, r0
 8012298:	4628      	mov	r0, r5
 801229a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801229e:	f000 b817 	b.w	80122d0 <_kill_r>
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d00a      	beq.n	80122bc <_raise_r+0x4c>
 80122a6:	1c59      	adds	r1, r3, #1
 80122a8:	d103      	bne.n	80122b2 <_raise_r+0x42>
 80122aa:	2316      	movs	r3, #22
 80122ac:	6003      	str	r3, [r0, #0]
 80122ae:	2001      	movs	r0, #1
 80122b0:	e7e7      	b.n	8012282 <_raise_r+0x12>
 80122b2:	2100      	movs	r1, #0
 80122b4:	4620      	mov	r0, r4
 80122b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80122ba:	4798      	blx	r3
 80122bc:	2000      	movs	r0, #0
 80122be:	e7e0      	b.n	8012282 <_raise_r+0x12>

080122c0 <raise>:
 80122c0:	4b02      	ldr	r3, [pc, #8]	@ (80122cc <raise+0xc>)
 80122c2:	4601      	mov	r1, r0
 80122c4:	6818      	ldr	r0, [r3, #0]
 80122c6:	f7ff bfd3 	b.w	8012270 <_raise_r>
 80122ca:	bf00      	nop
 80122cc:	20000030 	.word	0x20000030

080122d0 <_kill_r>:
 80122d0:	b538      	push	{r3, r4, r5, lr}
 80122d2:	2300      	movs	r3, #0
 80122d4:	4d06      	ldr	r5, [pc, #24]	@ (80122f0 <_kill_r+0x20>)
 80122d6:	4604      	mov	r4, r0
 80122d8:	4608      	mov	r0, r1
 80122da:	4611      	mov	r1, r2
 80122dc:	602b      	str	r3, [r5, #0]
 80122de:	f7f2 fd2d 	bl	8004d3c <_kill>
 80122e2:	1c43      	adds	r3, r0, #1
 80122e4:	d102      	bne.n	80122ec <_kill_r+0x1c>
 80122e6:	682b      	ldr	r3, [r5, #0]
 80122e8:	b103      	cbz	r3, 80122ec <_kill_r+0x1c>
 80122ea:	6023      	str	r3, [r4, #0]
 80122ec:	bd38      	pop	{r3, r4, r5, pc}
 80122ee:	bf00      	nop
 80122f0:	20004d98 	.word	0x20004d98

080122f4 <_getpid_r>:
 80122f4:	f7f2 bd1a 	b.w	8004d2c <_getpid>

080122f8 <__swhatbuf_r>:
 80122f8:	b570      	push	{r4, r5, r6, lr}
 80122fa:	460c      	mov	r4, r1
 80122fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012300:	b096      	sub	sp, #88	@ 0x58
 8012302:	4615      	mov	r5, r2
 8012304:	2900      	cmp	r1, #0
 8012306:	461e      	mov	r6, r3
 8012308:	da0c      	bge.n	8012324 <__swhatbuf_r+0x2c>
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	2100      	movs	r1, #0
 801230e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012312:	bf14      	ite	ne
 8012314:	2340      	movne	r3, #64	@ 0x40
 8012316:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801231a:	2000      	movs	r0, #0
 801231c:	6031      	str	r1, [r6, #0]
 801231e:	602b      	str	r3, [r5, #0]
 8012320:	b016      	add	sp, #88	@ 0x58
 8012322:	bd70      	pop	{r4, r5, r6, pc}
 8012324:	466a      	mov	r2, sp
 8012326:	f000 f849 	bl	80123bc <_fstat_r>
 801232a:	2800      	cmp	r0, #0
 801232c:	dbed      	blt.n	801230a <__swhatbuf_r+0x12>
 801232e:	9901      	ldr	r1, [sp, #4]
 8012330:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012334:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012338:	4259      	negs	r1, r3
 801233a:	4159      	adcs	r1, r3
 801233c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012340:	e7eb      	b.n	801231a <__swhatbuf_r+0x22>

08012342 <__smakebuf_r>:
 8012342:	898b      	ldrh	r3, [r1, #12]
 8012344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012346:	079d      	lsls	r5, r3, #30
 8012348:	4606      	mov	r6, r0
 801234a:	460c      	mov	r4, r1
 801234c:	d507      	bpl.n	801235e <__smakebuf_r+0x1c>
 801234e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012352:	6023      	str	r3, [r4, #0]
 8012354:	6123      	str	r3, [r4, #16]
 8012356:	2301      	movs	r3, #1
 8012358:	6163      	str	r3, [r4, #20]
 801235a:	b003      	add	sp, #12
 801235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801235e:	ab01      	add	r3, sp, #4
 8012360:	466a      	mov	r2, sp
 8012362:	f7ff ffc9 	bl	80122f8 <__swhatbuf_r>
 8012366:	9f00      	ldr	r7, [sp, #0]
 8012368:	4605      	mov	r5, r0
 801236a:	4630      	mov	r0, r6
 801236c:	4639      	mov	r1, r7
 801236e:	f7fe fec7 	bl	8011100 <_malloc_r>
 8012372:	b948      	cbnz	r0, 8012388 <__smakebuf_r+0x46>
 8012374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012378:	059a      	lsls	r2, r3, #22
 801237a:	d4ee      	bmi.n	801235a <__smakebuf_r+0x18>
 801237c:	f023 0303 	bic.w	r3, r3, #3
 8012380:	f043 0302 	orr.w	r3, r3, #2
 8012384:	81a3      	strh	r3, [r4, #12]
 8012386:	e7e2      	b.n	801234e <__smakebuf_r+0xc>
 8012388:	89a3      	ldrh	r3, [r4, #12]
 801238a:	6020      	str	r0, [r4, #0]
 801238c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012390:	81a3      	strh	r3, [r4, #12]
 8012392:	9b01      	ldr	r3, [sp, #4]
 8012394:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012398:	b15b      	cbz	r3, 80123b2 <__smakebuf_r+0x70>
 801239a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801239e:	4630      	mov	r0, r6
 80123a0:	f000 f81e 	bl	80123e0 <_isatty_r>
 80123a4:	b128      	cbz	r0, 80123b2 <__smakebuf_r+0x70>
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	f023 0303 	bic.w	r3, r3, #3
 80123ac:	f043 0301 	orr.w	r3, r3, #1
 80123b0:	81a3      	strh	r3, [r4, #12]
 80123b2:	89a3      	ldrh	r3, [r4, #12]
 80123b4:	431d      	orrs	r5, r3
 80123b6:	81a5      	strh	r5, [r4, #12]
 80123b8:	e7cf      	b.n	801235a <__smakebuf_r+0x18>
	...

080123bc <_fstat_r>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	2300      	movs	r3, #0
 80123c0:	4d06      	ldr	r5, [pc, #24]	@ (80123dc <_fstat_r+0x20>)
 80123c2:	4604      	mov	r4, r0
 80123c4:	4608      	mov	r0, r1
 80123c6:	4611      	mov	r1, r2
 80123c8:	602b      	str	r3, [r5, #0]
 80123ca:	f7f2 fd17 	bl	8004dfc <_fstat>
 80123ce:	1c43      	adds	r3, r0, #1
 80123d0:	d102      	bne.n	80123d8 <_fstat_r+0x1c>
 80123d2:	682b      	ldr	r3, [r5, #0]
 80123d4:	b103      	cbz	r3, 80123d8 <_fstat_r+0x1c>
 80123d6:	6023      	str	r3, [r4, #0]
 80123d8:	bd38      	pop	{r3, r4, r5, pc}
 80123da:	bf00      	nop
 80123dc:	20004d98 	.word	0x20004d98

080123e0 <_isatty_r>:
 80123e0:	b538      	push	{r3, r4, r5, lr}
 80123e2:	2300      	movs	r3, #0
 80123e4:	4d05      	ldr	r5, [pc, #20]	@ (80123fc <_isatty_r+0x1c>)
 80123e6:	4604      	mov	r4, r0
 80123e8:	4608      	mov	r0, r1
 80123ea:	602b      	str	r3, [r5, #0]
 80123ec:	f7f2 fd16 	bl	8004e1c <_isatty>
 80123f0:	1c43      	adds	r3, r0, #1
 80123f2:	d102      	bne.n	80123fa <_isatty_r+0x1a>
 80123f4:	682b      	ldr	r3, [r5, #0]
 80123f6:	b103      	cbz	r3, 80123fa <_isatty_r+0x1a>
 80123f8:	6023      	str	r3, [r4, #0]
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	20004d98 	.word	0x20004d98

08012400 <_init>:
 8012400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012402:	bf00      	nop
 8012404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012406:	bc08      	pop	{r3}
 8012408:	469e      	mov	lr, r3
 801240a:	4770      	bx	lr

0801240c <_fini>:
 801240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240e:	bf00      	nop
 8012410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012412:	bc08      	pop	{r3}
 8012414:	469e      	mov	lr, r3
 8012416:	4770      	bx	lr
