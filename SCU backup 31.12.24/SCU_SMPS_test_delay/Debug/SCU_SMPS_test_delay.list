
SCU_SMPS_test_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fbc  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08012210  08012210  00013210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126c8  080126c8  00014210  2**0
                  CONTENTS
  4 .ARM          00000008  080126c8  080126c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126d0  080126d0  00014210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126d0  080126d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126d4  080126d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080126d8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a38  20000210  080128e8  00014210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c48  080128e8  00014c48  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b48b  00000000  00000000  00014246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ca  00000000  00000000  0002f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d64  00000000  00000000  00033d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b76  00000000  00000000  00034a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b42d  00000000  00000000  000695ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141b55  00000000  00000000  00084a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c656c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  001c65b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001cbf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000210 	.word	0x20000210
 800026c:	00000000 	.word	0x00000000
 8000270:	080121f4 	.word	0x080121f4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000214 	.word	0x20000214
 800028c:	080121f4 	.word	0x080121f4

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
const float A = 3.9083e-3;
const float B = -5.775e-7;
float temperature;

// Function to handle ADC operations
uint8_t ADC_operation() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
#if 1
	// Loop through each ADC and channel
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e017      	b.n	8000fbc <ADC_operation+0x3c>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e008      	b.n	8000fa4 <ADC_operation+0x24>
		{
			ADC_READ(ADC_idx, Chn_idx);  // Read ADC value
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f81d 	bl	8000fd8 <ADC_READ>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	71bb      	strb	r3, [r7, #6]
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d9f3      	bls.n	8000f92 <ADC_operation+0x12>
		}

		if(SRAM_check)
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <ADC_operation+0x54>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <ADC_operation+0x36>
			SRAM_operation();
 8000fb2:	f001 f901 	bl	80021b8 <SRAM_operation>
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d9e4      	bls.n	8000f8c <ADC_operation+0xc>
	}
	SRAM_check  = 1;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <ADC_operation+0x54>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		}
		if(ADC_idx == 2)
			SRAM_operation();
	}
#endif
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000028c 	.word	0x2000028c

08000fd8 <ADC_READ>:
#endif

#if 1

uint16_t ADC_READ(uint8_t adc_num,uint8_t channel)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b092      	sub	sp, #72	@ 0x48
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	//	uint8_t txd_buf[30]={0};
	//	uint8_t status;
	//	uint16_t sensor_value = 0x7FFF;

	uint8_t rxd_buf[30]={0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	831a      	strh	r2, [r3, #24]
	uint8_t wirestatus=0;
 8001000:	2300      	movs	r3, #0
 8001002:	72fb      	strb	r3, [r7, #11]
	float resistance = 0;
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sum = 0;           // Sum for averaging
 800100a:	2300      	movs	r3, #0
 800100c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint16_t adchex=0;
 800100e:	2300      	movs	r3, #0
 8001010:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	float average = 0.0;        // Average value
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c


	txd_buf[0] = 0x40; // To write data from 0 register
 800101a:	4b94      	ldr	r3, [pc, #592]	@ (800126c <ADC_READ+0x294>)
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x11;	//	Number of register to write
 8001020:	4b92      	ldr	r3, [pc, #584]	@ (800126c <ADC_READ+0x294>)
 8001022:	2211      	movs	r2, #17
 8001024:	705a      	strb	r2, [r3, #1]
	// Register 0x00: Device ID (read-only, value is reserved or device-specific)
	txd_buf[2] = 0x0C; // Device ID
 8001026:	4b91      	ldr	r3, [pc, #580]	@ (800126c <ADC_READ+0x294>)
 8001028:	220c      	movs	r2, #12
 800102a:	709a      	strb	r2, [r3, #2]

	// Register 0x01: STATUS (status flags and ready indicator, typically read-only)
	txd_buf[3] = 0x00; // Placeholder, this is usually not written as it’s read-only
 800102c:	4b8f      	ldr	r3, [pc, #572]	@ (800126c <ADC_READ+0x294>)
 800102e:	2200      	movs	r2, #0
 8001030:	70da      	strb	r2, [r3, #3]

	// Register 0x02: INPMUX (input multiplexer configuration for RTD leg selection)
	txd_buf[4] = 0x76; // Configures the input multiplexer (MUXP and MUXN) for specific RTD connections
 8001032:	4b8e      	ldr	r3, [pc, #568]	@ (800126c <ADC_READ+0x294>)
 8001034:	2276      	movs	r2, #118	@ 0x76
 8001036:	711a      	strb	r2, [r3, #4]

	// Register 0x03: PGA (programmable gain amplifier configuration)
	txd_buf[5] = 0xEA; // Sets PGA gain = 1, enabling precise low-signal measurement
 8001038:	4b8c      	ldr	r3, [pc, #560]	@ (800126c <ADC_READ+0x294>)
 800103a:	22ea      	movs	r2, #234	@ 0xea
 800103c:	715a      	strb	r2, [r3, #5]

	// Register 0x04: DATARATE (data rate and conversion settings)
	txd_buf[6] = 0x1E; // Sets data rate to 4000 SPS and other configurations
 800103e:	4b8b      	ldr	r3, [pc, #556]	@ (800126c <ADC_READ+0x294>)
 8001040:	221e      	movs	r2, #30
 8001042:	719a      	strb	r2, [r3, #6]

	// Register 0x05: REF (reference voltage configuration)
	txd_buf[7] = 0x82; // Reference configuration (enable internal/external reference, etc.)
 8001044:	4b89      	ldr	r3, [pc, #548]	@ (800126c <ADC_READ+0x294>)
 8001046:	2282      	movs	r2, #130	@ 0x82
 8001048:	71da      	strb	r2, [r3, #7]

	// Register 0x06: IDACMAG (IDAC magnitude configuration)
	txd_buf[8] = 0x87; // Configures excitation current for RTD measurement
 800104a:	4b88      	ldr	r3, [pc, #544]	@ (800126c <ADC_READ+0x294>)
 800104c:	2287      	movs	r2, #135	@ 0x87
 800104e:	721a      	strb	r2, [r3, #8]

	// Register 0x07: IDACMUX (routes IDAC currents to specific pins)
	txd_buf[9] = 0xFB; // Routes IDAC currents to appropriate RTD pins
 8001050:	4b86      	ldr	r3, [pc, #536]	@ (800126c <ADC_READ+0x294>)
 8001052:	22fb      	movs	r2, #251	@ 0xfb
 8001054:	725a      	strb	r2, [r3, #9]

	// Register 0x08: VBIAS (voltage bias configuration)
	txd_buf[10] = 0x00; // Disables voltage bias
 8001056:	4b85      	ldr	r3, [pc, #532]	@ (800126c <ADC_READ+0x294>)
 8001058:	2200      	movs	r2, #0
 800105a:	729a      	strb	r2, [r3, #10]

	// Register 0x09: SYS (system configuration, including timeout and calibration settings)
	txd_buf[11] = 0x10; // Configures timeout and calibration sample averaging
 800105c:	4b83      	ldr	r3, [pc, #524]	@ (800126c <ADC_READ+0x294>)
 800105e:	2210      	movs	r2, #16
 8001060:	72da      	strb	r2, [r3, #11]

	// Registers 0x0A to 0x0F: Reserved or calibration-related (placeholders in this code)
	txd_buf[12] = 0x00; // Placeholder
 8001062:	4b82      	ldr	r3, [pc, #520]	@ (800126c <ADC_READ+0x294>)
 8001064:	2200      	movs	r2, #0
 8001066:	731a      	strb	r2, [r3, #12]
	txd_buf[13] = 0x00; // Placeholder
 8001068:	4b80      	ldr	r3, [pc, #512]	@ (800126c <ADC_READ+0x294>)
 800106a:	2200      	movs	r2, #0
 800106c:	735a      	strb	r2, [r3, #13]
	txd_buf[14] = 0x00; // Placeholder
 800106e:	4b7f      	ldr	r3, [pc, #508]	@ (800126c <ADC_READ+0x294>)
 8001070:	2200      	movs	r2, #0
 8001072:	739a      	strb	r2, [r3, #14]
	txd_buf[15] = 0x00; // Placeholder
 8001074:	4b7d      	ldr	r3, [pc, #500]	@ (800126c <ADC_READ+0x294>)
 8001076:	2200      	movs	r2, #0
 8001078:	73da      	strb	r2, [r3, #15]
	txd_buf[16] = 0x00; // Placeholder
 800107a:	4b7c      	ldr	r3, [pc, #496]	@ (800126c <ADC_READ+0x294>)
 800107c:	2200      	movs	r2, #0
 800107e:	741a      	strb	r2, [r3, #16]

	// Register 0x10: GPIODAT (GPIO data configuration)
	txd_buf[17] = 0x40; // Configures GPIO pin states
 8001080:	4b7a      	ldr	r3, [pc, #488]	@ (800126c <ADC_READ+0x294>)
 8001082:	2240      	movs	r2, #64	@ 0x40
 8001084:	745a      	strb	r2, [r3, #17]

	// Registers 0x11 to 0x14: Placeholder or unused
	txd_buf[18] = 0x00; // Placeholder
 8001086:	4b79      	ldr	r3, [pc, #484]	@ (800126c <ADC_READ+0x294>)
 8001088:	2200      	movs	r2, #0
 800108a:	749a      	strb	r2, [r3, #18]
	txd_buf[19] = 0x00; // Placeholder
 800108c:	4b77      	ldr	r3, [pc, #476]	@ (800126c <ADC_READ+0x294>)
 800108e:	2200      	movs	r2, #0
 8001090:	74da      	strb	r2, [r3, #19]
	txd_buf[20] = 0x00; // Placeholder
 8001092:	4b76      	ldr	r3, [pc, #472]	@ (800126c <ADC_READ+0x294>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]

	// Note: txd_buf[18] is redundantly assigned. The last assignment will overwrite earlier ones.
	txd_buf[18] = 0x00; // Redundant; ensure this matches intended use.
 8001098:	4b74      	ldr	r3, [pc, #464]	@ (800126c <ADC_READ+0x294>)
 800109a:	2200      	movs	r2, #0
 800109c:	749a      	strb	r2, [r3, #18]

	switch(channel)
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d827      	bhi.n	80010f4 <ADC_READ+0x11c>
 80010a4:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <ADC_READ+0xd4>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010cb 	.word	0x080010cb
 80010b4:	080010d9 	.word	0x080010d9
 80010b8:	080010e7 	.word	0x080010e7
	{
	case CHANNEL_1:
		txd_buf[4] = 0x43;// Input MUX for RTD legs selection (MUX configuration)
 80010bc:	4b6b      	ldr	r3, [pc, #428]	@ (800126c <ADC_READ+0x294>)
 80010be:	2243      	movs	r2, #67	@ 0x43
 80010c0:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf5; // IDAC MUX
 80010c2:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <ADC_READ+0x294>)
 80010c4:	22f5      	movs	r2, #245	@ 0xf5
 80010c6:	725a      	strb	r2, [r3, #9]
		break;
 80010c8:	e014      	b.n	80010f4 <ADC_READ+0x11c>

	case CHANNEL_2:
		txd_buf[4] = 0x10; // Input MUX for RTD legs selection (MUX configuration)
 80010ca:	4b68      	ldr	r3, [pc, #416]	@ (800126c <ADC_READ+0x294>)
 80010cc:	2210      	movs	r2, #16
 80010ce:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf2; // IDAC MUX
 80010d0:	4b66      	ldr	r3, [pc, #408]	@ (800126c <ADC_READ+0x294>)
 80010d2:	22f2      	movs	r2, #242	@ 0xf2
 80010d4:	725a      	strb	r2, [r3, #9]
		break;
 80010d6:	e00d      	b.n	80010f4 <ADC_READ+0x11c>

	case CHANNEL_3:
		txd_buf[4] = 0x9A; // Input MUX for RTD legs selection (MUX configuration)
 80010d8:	4b64      	ldr	r3, [pc, #400]	@ (800126c <ADC_READ+0x294>)
 80010da:	229a      	movs	r2, #154	@ 0x9a
 80010dc:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf8; // IDAC MUX
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <ADC_READ+0x294>)
 80010e0:	22f8      	movs	r2, #248	@ 0xf8
 80010e2:	725a      	strb	r2, [r3, #9]
		break;
 80010e4:	e006      	b.n	80010f4 <ADC_READ+0x11c>
	case CHANNEL_4:
		txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 80010e6:	4b61      	ldr	r3, [pc, #388]	@ (800126c <ADC_READ+0x294>)
 80010e8:	2276      	movs	r2, #118	@ 0x76
 80010ea:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xfb;// IDAC MUX
 80010ec:	4b5f      	ldr	r3, [pc, #380]	@ (800126c <ADC_READ+0x294>)
 80010ee:	22fb      	movs	r2, #251	@ 0xfb
 80010f0:	725a      	strb	r2, [r3, #9]
		break;
 80010f2:	bf00      	nop
	}

	switch(adc_num)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	f000 8426 	beq.w	8001948 <ADC_READ+0x970>
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	f300 861c 	bgt.w	8001d3a <ADC_READ+0xd62>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <ADC_READ+0x138>
 8001106:	2b01      	cmp	r3, #1
 8001108:	f000 81e9 	beq.w	80014de <ADC_READ+0x506>
 800110c:	f000 be15 	b.w	8001d3a <ADC_READ+0xd62>
	{
	case ADC_1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4856      	ldr	r0, [pc, #344]	@ (8001270 <ADC_READ+0x298>)
 8001116:	f003 fe9d 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001120:	4853      	ldr	r0, [pc, #332]	@ (8001270 <ADC_READ+0x298>)
 8001122:	f003 fe97 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4852      	ldr	r0, [pc, #328]	@ (8001274 <ADC_READ+0x29c>)
 800112c:	f003 fe92 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2104      	movs	r1, #4
 8001134:	484f      	ldr	r0, [pc, #316]	@ (8001274 <ADC_READ+0x29c>)
 8001136:	f003 fe8d 	bl	8004e54 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	484c      	ldr	r0, [pc, #304]	@ (8001270 <ADC_READ+0x298>)
 8001140:	f003 fe88 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2213      	movs	r2, #19
 800114a:	4948      	ldr	r1, [pc, #288]	@ (800126c <ADC_READ+0x294>)
 800114c:	484a      	ldr	r0, [pc, #296]	@ (8001278 <ADC_READ+0x2a0>)
 800114e:	f00a ff25 	bl	800bf9c <HAL_SPI_Transmit>
		HAL_Delay(1); // don't touch
 8001152:	2001      	movs	r0, #1
 8001154:	f003 fad2 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	2140      	movs	r1, #64	@ 0x40
 800115c:	4844      	ldr	r0, [pc, #272]	@ (8001270 <ADC_READ+0x298>)
 800115e:	f003 fe79 	bl	8004e54 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001168:	4841      	ldr	r0, [pc, #260]	@ (8001270 <ADC_READ+0x298>)
 800116a:	f003 fe73 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_Delay(1); // don't touch
 800116e:	2001      	movs	r0, #1
 8001170:	f003 fac4 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	483d      	ldr	r0, [pc, #244]	@ (8001270 <ADC_READ+0x298>)
 800117a:	f003 fe6b 	bl	8004e54 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19; // self offset calibration
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <ADC_READ+0x294>)
 8001180:	2219      	movs	r2, #25
 8001182:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	4938      	ldr	r1, [pc, #224]	@ (800126c <ADC_READ+0x294>)
 800118c:	483a      	ldr	r0, [pc, #232]	@ (8001278 <ADC_READ+0x2a0>)
 800118e:	f00a ff05 	bl	800bf9c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4836      	ldr	r0, [pc, #216]	@ (8001270 <ADC_READ+0x298>)
 8001198:	f003 fe5c 	bl	8004e54 <HAL_GPIO_WritePin>

		HAL_Delay(wait_time);
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <ADC_READ+0x2a4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 faab 	bl	80046fc <HAL_Delay>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	@ 0x40
 80011aa:	4831      	ldr	r0, [pc, #196]	@ (8001270 <ADC_READ+0x298>)
 80011ac:	f003 fe52 	bl	8004e54 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <ADC_READ+0x294>)
 80011b2:	2213      	movs	r2, #19
 80011b4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011ba:	e070      	b.n	800129e <ADC_READ+0x2c6>
		{
			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80011bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c0:	2201      	movs	r2, #1
 80011c2:	492a      	ldr	r1, [pc, #168]	@ (800126c <ADC_READ+0x294>)
 80011c4:	482c      	ldr	r0, [pc, #176]	@ (8001278 <ADC_READ+0x2a0>)
 80011c6:	f00a fee9 	bl	800bf9c <HAL_SPI_Transmit>
			HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fa96 	bl	80046fc <HAL_Delay>
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1[i], 0x2, 0xFFFF);
 80011d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001280 <ADC_READ+0x2a8>)
 80011d6:	1899      	adds	r1, r3, r2
 80011d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011dc:	2202      	movs	r2, #2
 80011de:	4826      	ldr	r0, [pc, #152]	@ (8001278 <ADC_READ+0x2a0>)
 80011e0:	f00b f8f2 	bl	800c3c8 <HAL_SPI_Receive>
			HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fa89 	bl	80046fc <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_1[i] = (reg_data_ADC_1[i] >> 8) | (reg_data_ADC_1[i] << 8);
 80011ea:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <ADC_READ+0x2a8>)
 80011ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4921      	ldr	r1, [pc, #132]	@ (8001280 <ADC_READ+0x2a8>)
 80011fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	b299      	uxth	r1, r3
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <ADC_READ+0x2a8>)
 800120c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800120e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 8001212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd37      	ble.n	8001288 <ADC_READ+0x2b0>
			{
				if(((reg_data_ADC_1[i]-reg_data_ADC_1[i-1])<2)||((reg_data_ADC_1[i-1]-reg_data_ADC_1[i])<2))
 8001218:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <ADC_READ+0x2a8>)
 800121a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800121c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001220:	4619      	mov	r1, r3
 8001222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001224:	3b01      	subs	r3, #1
 8001226:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <ADC_READ+0x2a8>)
 8001228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122c:	1acb      	subs	r3, r1, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	dd0c      	ble.n	800124c <ADC_READ+0x274>
 8001232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001234:	3b01      	subs	r3, #1
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <ADC_READ+0x2a8>)
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	4619      	mov	r1, r3
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <ADC_READ+0x2a8>)
 8001240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	dc08      	bgt.n	800125e <ADC_READ+0x286>
				{
					sum += reg_data_ADC_1[i];
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <ADC_READ+0x2a8>)
 800124e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001254:	461a      	mov	r2, r3
 8001256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001258:	4413      	add	r3, r2
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
 800125c:	e01c      	b.n	8001298 <ADC_READ+0x2c0>
				}
				else
				{
					diff_count++;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <ADC_READ+0x2ac>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <ADC_READ+0x2ac>)
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e015      	b.n	8001298 <ADC_READ+0x2c0>
 800126c:	2000022c 	.word	0x2000022c
 8001270:	42021400 	.word	0x42021400
 8001274:	42020800 	.word	0x42020800
 8001278:	20005748 	.word	0x20005748
 800127c:	20000000 	.word	0x20000000
 8001280:	20000250 	.word	0x20000250
 8001284:	2000028d 	.word	0x2000028d
				}
			}
			else
			{
				sum += reg_data_ADC_1[i];
 8001288:	4ac5      	ldr	r2, [pc, #788]	@ (80015a0 <ADC_READ+0x5c8>)
 800128a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800128c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001290:	461a      	mov	r2, r3
 8001292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001294:	4413      	add	r3, r2
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 8001298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129a:	3301      	adds	r3, #1
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800129e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	dd8b      	ble.n	80011bc <ADC_READ+0x1e4>
			}

		}

		if(diff_count > 5) sum =0;
 80012a4:	4bbf      	ldr	r3, [pc, #764]	@ (80015a4 <ADC_READ+0x5cc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d901      	bls.n	80012b0 <ADC_READ+0x2d8>
 80012ac:	2300      	movs	r3, #0
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 80012b0:	4bbc      	ldr	r3, [pc, #752]	@ (80015a4 <ADC_READ+0x5cc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_1[i];  // Add to sum for averaging
	}
#endif

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	48bb      	ldr	r0, [pc, #748]	@ (80015a8 <ADC_READ+0x5d0>)
 80012bc:	f003 fdca 	bl	8004e54 <HAL_GPIO_WritePin>

	average = sum / 10.0;
 80012c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80012c2:	f7ff f92f 	bl	8000524 <__aeabi_ui2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4bb8      	ldr	r3, [pc, #736]	@ (80015ac <ADC_READ+0x5d4>)
 80012cc:	f7ff face 	bl	800086c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc76 	bl	8000bc8 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adchex  = sum / 10;
 80012e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012e2:	4ab3      	ldr	r2, [pc, #716]	@ (80015b0 <ADC_READ+0x5d8>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 80012ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 80015b4 <ADC_READ+0x5dc>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80012fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001302:	eddf 6aad 	vldr	s13, [pc, #692]	@ 80015b8 <ADC_READ+0x5e0>
 8001306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	//Callendar-Van Dusen Equation
	if (resistance >= R0) {  // Above 0°C
 800130e:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80015bc <ADC_READ+0x5e4>
 8001312:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	db50      	blt.n	80013c2 <ADC_READ+0x3ea>
		temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001320:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 80015c0 <ADC_READ+0x5e8>
 8001324:	eef1 7a67 	vneg.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f91b 	bl	8000568 <__aeabi_f2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80015c0 <ADC_READ+0x5e8>
 800133a:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 80015c0 <ADC_READ+0x5e8>
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80015c4 <ADC_READ+0x5ec>
 8001346:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800134a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800134e:	eddf 5a9b 	vldr	s11, [pc, #620]	@ 80015bc <ADC_READ+0x5e4>
 8001352:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800135a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800135e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136a:	ee17 0a90 	vmov	r0, s15
 800136e:	f7ff f8fb 	bl	8000568 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	ec43 2b10 	vmov	d0, r2, r3
 800137a:	f010 fe31 	bl	8011fe0 <sqrt>
 800137e:	ec53 2b10 	vmov	r2, r3, d0
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7fe ff91 	bl	80002ac <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4614      	mov	r4, r2
 8001390:	461d      	mov	r5, r3
 8001392:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 80015c4 <ADC_READ+0x5ec>
 8001396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8e3 	bl	8000568 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7ff fa5f 	bl	800086c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc07 	bl	8000bc8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <ADC_READ+0x5f0>)
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e017      	b.n	80013f2 <ADC_READ+0x41a>
	}
	else
	{  // Below 0°C, use simpler approximation
		temperature = (resistance - R0) / 0.385;
 80013c2:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80015bc <ADC_READ+0x5e4>
 80013c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	ee17 0a90 	vmov	r0, s15
 80013d2:	f7ff f8c9 	bl	8000568 <__aeabi_f2d>
 80013d6:	a370      	add	r3, pc, #448	@ (adr r3, 8001598 <ADC_READ+0x5c0>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa46 	bl	800086c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbee 	bl	8000bc8 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a76      	ldr	r2, [pc, #472]	@ (80015c8 <ADC_READ+0x5f0>)
 80013f0:	6013      	str	r3, [r2, #0]
	}

	if(rxd_buf[7]==txd_buf[9])
 80013f2:	7cfa      	ldrb	r2, [r7, #19]
 80013f4:	4b75      	ldr	r3, [pc, #468]	@ (80015cc <ADC_READ+0x5f4>)
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <ADC_READ+0x442>
	{
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001402:	4873      	ldr	r0, [pc, #460]	@ (80015d0 <ADC_READ+0x5f8>)
 8001404:	f003 fd26 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f003 f977 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001414:	486e      	ldr	r0, [pc, #440]	@ (80015d0 <ADC_READ+0x5f8>)
 8001416:	f003 fd1d 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
#endif

#ifdef WIREBREAK

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2140      	movs	r1, #64	@ 0x40
 800141e:	4862      	ldr	r0, [pc, #392]	@ (80015a8 <ADC_READ+0x5d0>)
 8001420:	f003 fd18 	bl	8004e54 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x21;
 8001424:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <ADC_READ+0x5f4>)
 8001426:	2221      	movs	r2, #33	@ 0x21
 8001428:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x00;
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <ADC_READ+0x5f4>)
 800142c:	2200      	movs	r2, #0
 800142e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFFFF);
 8001430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001434:	2202      	movs	r2, #2
 8001436:	4965      	ldr	r1, [pc, #404]	@ (80015cc <ADC_READ+0x5f4>)
 8001438:	4866      	ldr	r0, [pc, #408]	@ (80015d4 <ADC_READ+0x5fc>)
 800143a:	f00a fdaf 	bl	800bf9c <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_SPI_Receive(&hspi5, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800143e:	f107 010b 	add.w	r1, r7, #11
 8001442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001446:	2201      	movs	r2, #1
 8001448:	4862      	ldr	r0, [pc, #392]	@ (80015d4 <ADC_READ+0x5fc>)
 800144a:	f00a ffbd 	bl	800c3c8 <HAL_SPI_Receive>
//	HAL_Delay(1);

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	4855      	ldr	r0, [pc, #340]	@ (80015a8 <ADC_READ+0x5d0>)
 8001454:	f003 fcfe 	bl	8004e54 <HAL_GPIO_WritePin>

	if (wire_break(wirestatus))
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fca0 	bl	8001da0 <wire_break>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00e      	beq.n	8001484 <ADC_READ+0x4ac>
	{
		wirestatus=0;
 8001466:	2300      	movs	r3, #0
 8001468:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800146a:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <ADC_READ+0x5f0>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
		adchex =0;
 8001472:	2300      	movs	r3, #0
 8001474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 8001478:	2214      	movs	r2, #20
 800147a:	2100      	movs	r1, #0
 800147c:	4848      	ldr	r0, [pc, #288]	@ (80015a0 <ADC_READ+0x5c8>)
 800147e:	f00e fcce 	bl	800fe1e <memset>
 8001482:	e015      	b.n	80014b0 <ADC_READ+0x4d8>
	}
	else if(check_sensor_validity(adchex))
 8001484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fc71 	bl	8001d70 <check_sensor_validity>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <ADC_READ+0x4d8>
	{
		wirestatus=0;
 8001494:	2300      	movs	r3, #0
 8001496:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 8001498:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <ADC_READ+0x5f0>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
		adchex =0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 80014a6:	2214      	movs	r2, #20
 80014a8:	2100      	movs	r1, #0
 80014aa:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <ADC_READ+0x5c8>)
 80014ac:	f00e fcb7 	bl	800fe1e <memset>
	}
	wirestatus=0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	72fb      	strb	r3, [r7, #11]

#endif
	temp_sensor[adc_num][channel] = temperature ;
 80014b4:	79f9      	ldrb	r1, [r7, #7]
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	4a43      	ldr	r2, [pc, #268]	@ (80015c8 <ADC_READ+0x5f0>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4846      	ldr	r0, [pc, #280]	@ (80015d8 <ADC_READ+0x600>)
 80014be:	0089      	lsls	r1, r1, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4403      	add	r3, r0
 80014c6:	601a      	str	r2, [r3, #0]
	sensor_hex[adc_num][channel] = 	adchex ;
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	4943      	ldr	r1, [pc, #268]	@ (80015dc <ADC_READ+0x604>)
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80014d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	//		sensor_value =	sum / 10;
	break;
 80014da:	f000 bc2e 	b.w	8001d3a <ADC_READ+0xd62>

	case ADC_2:

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e4:	483e      	ldr	r0, [pc, #248]	@ (80015e0 <ADC_READ+0x608>)
 80014e6:	f003 fcb5 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2140      	movs	r1, #64	@ 0x40
 80014ee:	483d      	ldr	r0, [pc, #244]	@ (80015e4 <ADC_READ+0x60c>)
 80014f0:	f003 fcb0 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014fa:	483a      	ldr	r0, [pc, #232]	@ (80015e4 <ADC_READ+0x60c>)
 80014fc:	f003 fcaa 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001506:	4837      	ldr	r0, [pc, #220]	@ (80015e4 <ADC_READ+0x60c>)
 8001508:	f003 fca4 	bl	8004e54 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001512:	4833      	ldr	r0, [pc, #204]	@ (80015e0 <ADC_READ+0x608>)
 8001514:	f003 fc9e 	bl	8004e54 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	2213      	movs	r2, #19
 800151e:	492b      	ldr	r1, [pc, #172]	@ (80015cc <ADC_READ+0x5f4>)
 8001520:	4831      	ldr	r0, [pc, #196]	@ (80015e8 <ADC_READ+0x610>)
 8001522:	f00a fd3b 	bl	800bf9c <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f003 f8e8 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001532:	482b      	ldr	r0, [pc, #172]	@ (80015e0 <ADC_READ+0x608>)
 8001534:	f003 fc8e 	bl	8004e54 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2140      	movs	r1, #64	@ 0x40
 800153c:	4829      	ldr	r0, [pc, #164]	@ (80015e4 <ADC_READ+0x60c>)
 800153e:	f003 fc89 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f003 f8da 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800154e:	4824      	ldr	r0, [pc, #144]	@ (80015e0 <ADC_READ+0x608>)
 8001550:	f003 fc80 	bl	8004e54 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <ADC_READ+0x5f4>)
 8001556:	2219      	movs	r2, #25
 8001558:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2201      	movs	r2, #1
 8001560:	491a      	ldr	r1, [pc, #104]	@ (80015cc <ADC_READ+0x5f4>)
 8001562:	4821      	ldr	r0, [pc, #132]	@ (80015e8 <ADC_READ+0x610>)
 8001564:	f00a fd1a 	bl	800bf9c <HAL_SPI_Transmit>
//		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800156e:	481c      	ldr	r0, [pc, #112]	@ (80015e0 <ADC_READ+0x608>)
 8001570:	f003 fc70 	bl	8004e54 <HAL_GPIO_WritePin>


		HAL_Delay(wait_time);
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <ADC_READ+0x614>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f003 f8bf 	bl	80046fc <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001584:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <ADC_READ+0x608>)
 8001586:	f003 fc65 	bl	8004e54 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <ADC_READ+0x5f4>)
 800158c:	2213      	movs	r2, #19
 800158e:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 10; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001594:	e08f      	b.n	80016b6 <ADC_READ+0x6de>
 8001596:	bf00      	nop
 8001598:	0a3d70a4 	.word	0x0a3d70a4
 800159c:	3fd8a3d7 	.word	0x3fd8a3d7
 80015a0:	20000250 	.word	0x20000250
 80015a4:	2000028d 	.word	0x2000028d
 80015a8:	42021400 	.word	0x42021400
 80015ac:	40240000 	.word	0x40240000
 80015b0:	cccccccd 	.word	0xcccccccd
 80015b4:	44fa0000 	.word	0x44fa0000
 80015b8:	477fff00 	.word	0x477fff00
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	3b801132 	.word	0x3b801132
 80015c4:	b51b057f 	.word	0xb51b057f
 80015c8:	2000024c 	.word	0x2000024c
 80015cc:	2000022c 	.word	0x2000022c
 80015d0:	42021000 	.word	0x42021000
 80015d4:	20005748 	.word	0x20005748
 80015d8:	20000290 	.word	0x20000290
 80015dc:	200002c0 	.word	0x200002c0
 80015e0:	42020400 	.word	0x42020400
 80015e4:	42021800 	.word	0x42021800
 80015e8:	20005628 	.word	0x20005628
 80015ec:	20000000 	.word	0x20000000
		{
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80015f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f4:	2201      	movs	r2, #1
 80015f6:	49c4      	ldr	r1, [pc, #784]	@ (8001908 <ADC_READ+0x930>)
 80015f8:	48c4      	ldr	r0, [pc, #784]	@ (800190c <ADC_READ+0x934>)
 80015fa:	f00a fccf 	bl	800bf9c <HAL_SPI_Transmit>
			HAL_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f003 f87c 	bl	80046fc <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2[i], 0x2, 0xFFFF);
 8001604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4ac1      	ldr	r2, [pc, #772]	@ (8001910 <ADC_READ+0x938>)
 800160a:	1899      	adds	r1, r3, r2
 800160c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001610:	2202      	movs	r2, #2
 8001612:	48be      	ldr	r0, [pc, #760]	@ (800190c <ADC_READ+0x934>)
 8001614:	f00a fed8 	bl	800c3c8 <HAL_SPI_Receive>
			HAL_Delay(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f003 f86f 	bl	80046fc <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_2[i] = (reg_data_ADC_2[i] >> 8) | (reg_data_ADC_2[i] << 8);
 800161e:	4abc      	ldr	r2, [pc, #752]	@ (8001910 <ADC_READ+0x938>)
 8001620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21a      	sxth	r2, r3
 800162c:	49b8      	ldr	r1, [pc, #736]	@ (8001910 <ADC_READ+0x938>)
 800162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	b299      	uxth	r1, r3
 800163e:	4ab4      	ldr	r2, [pc, #720]	@ (8001910 <ADC_READ+0x938>)
 8001640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 8001646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001648:	2b00      	cmp	r3, #0
 800164a:	dd29      	ble.n	80016a0 <ADC_READ+0x6c8>
			{
				if(((reg_data_ADC_2[i]-reg_data_ADC_2[i-1])<2)||((reg_data_ADC_2[i-1]-reg_data_ADC_2[i])<2))
 800164c:	4ab0      	ldr	r2, [pc, #704]	@ (8001910 <ADC_READ+0x938>)
 800164e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001654:	4619      	mov	r1, r3
 8001656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001658:	3b01      	subs	r3, #1
 800165a:	4aad      	ldr	r2, [pc, #692]	@ (8001910 <ADC_READ+0x938>)
 800165c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	dd0c      	ble.n	8001680 <ADC_READ+0x6a8>
 8001666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001668:	3b01      	subs	r3, #1
 800166a:	4aa9      	ldr	r2, [pc, #676]	@ (8001910 <ADC_READ+0x938>)
 800166c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001670:	4619      	mov	r1, r3
 8001672:	4aa7      	ldr	r2, [pc, #668]	@ (8001910 <ADC_READ+0x938>)
 8001674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167a:	1acb      	subs	r3, r1, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	dc08      	bgt.n	8001692 <ADC_READ+0x6ba>
				{
					sum += reg_data_ADC_2[i];
 8001680:	4aa3      	ldr	r2, [pc, #652]	@ (8001910 <ADC_READ+0x938>)
 8001682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001688:	461a      	mov	r2, r3
 800168a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800168c:	4413      	add	r3, r2
 800168e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001690:	e00e      	b.n	80016b0 <ADC_READ+0x6d8>
				}
				else
				{
					diff_count++;
 8001692:	4ba0      	ldr	r3, [pc, #640]	@ (8001914 <ADC_READ+0x93c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b9e      	ldr	r3, [pc, #632]	@ (8001914 <ADC_READ+0x93c>)
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <ADC_READ+0x6d8>
				}
			}
			else
			{
				sum += reg_data_ADC_2[i];
 80016a0:	4a9b      	ldr	r2, [pc, #620]	@ (8001910 <ADC_READ+0x938>)
 80016a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a8:	461a      	mov	r2, r3
 80016aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ac:	4413      	add	r3, r2
 80016ae:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 80016b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b2:	3301      	adds	r3, #1
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	dd99      	ble.n	80015f0 <ADC_READ+0x618>
			}

		}

		if(diff_count > 5) sum =0;
 80016bc:	4b95      	ldr	r3, [pc, #596]	@ (8001914 <ADC_READ+0x93c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d901      	bls.n	80016c8 <ADC_READ+0x6f0>
 80016c4:	2300      	movs	r3, #0
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 80016c8:	4b92      	ldr	r3, [pc, #584]	@ (8001914 <ADC_READ+0x93c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_2[i];  // Add to sum for averaging
}
#endif

adchex =  sum / 10;
 80016ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016d0:	4a91      	ldr	r2, [pc, #580]	@ (8001918 <ADC_READ+0x940>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 80016dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80016de:	f7fe ff21 	bl	8000524 <__aeabi_ui2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b8d      	ldr	r3, [pc, #564]	@ (800191c <ADC_READ+0x944>)
 80016e8:	f7ff f8c0 	bl	800086c <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa68 	bl	8000bc8 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001702:	4887      	ldr	r0, [pc, #540]	@ (8001920 <ADC_READ+0x948>)
 8001704:	f003 fba6 	bl	8004e54 <HAL_GPIO_WritePin>

resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001708:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800170c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001924 <ADC_READ+0x94c>
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001718:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800171c:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8001928 <ADC_READ+0x950>
 8001720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001724:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 8001728:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800192c <ADC_READ+0x954>
 800172c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	db50      	blt.n	80017dc <ADC_READ+0x804>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800173a:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 8001930 <ADC_READ+0x958>
 800173e:	eef1 7a67 	vneg.f32	s15, s15
 8001742:	ee17 3a90 	vmov	r3, s15
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff0e 	bl	8000568 <__aeabi_f2d>
 800174c:	4604      	mov	r4, r0
 800174e:	460d      	mov	r5, r1
 8001750:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001930 <ADC_READ+0x958>
 8001754:	eddf 7a76 	vldr	s15, [pc, #472]	@ 8001930 <ADC_READ+0x958>
 8001758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175c:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001934 <ADC_READ+0x95c>
 8001760:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001764:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001768:	eddf 5a70 	vldr	s11, [pc, #448]	@ 800192c <ADC_READ+0x954>
 800176c:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001774:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001778:	ee76 7a67 	vsub.f32	s15, s12, s15
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001784:	ee17 0a90 	vmov	r0, s15
 8001788:	f7fe feee 	bl	8000568 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	ec43 2b10 	vmov	d0, r2, r3
 8001794:	f010 fc24 	bl	8011fe0 <sqrt>
 8001798:	ec53 2b10 	vmov	r2, r3, d0
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd84 	bl	80002ac <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8001934 <ADC_READ+0x95c>
 80017b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017b4:	ee17 0a90 	vmov	r0, s15
 80017b8:	f7fe fed6 	bl	8000568 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7ff f852 	bl	800086c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9fa 	bl	8000bc8 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a58      	ldr	r2, [pc, #352]	@ (8001938 <ADC_READ+0x960>)
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e017      	b.n	800180c <ADC_READ+0x834>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 80017dc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800192c <ADC_READ+0x954>
 80017e0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e8:	ee17 0a90 	vmov	r0, s15
 80017ec:	f7fe febc 	bl	8000568 <__aeabi_f2d>
 80017f0:	a343      	add	r3, pc, #268	@ (adr r3, 8001900 <ADC_READ+0x928>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7ff f839 	bl	800086c <__aeabi_ddiv>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9e1 	bl	8000bc8 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	4a4b      	ldr	r2, [pc, #300]	@ (8001938 <ADC_READ+0x960>)
 800180a:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9] )
 800180c:	7cfa      	ldrb	r2, [r7, #19]
 800180e:	4b3e      	ldr	r3, [pc, #248]	@ (8001908 <ADC_READ+0x930>)
 8001810:	7a5b      	ldrb	r3, [r3, #9]
 8001812:	429a      	cmp	r2, r3
 8001814:	d10e      	bne.n	8001834 <ADC_READ+0x85c>
{
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 1); // Toggle LED for visual feedback
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181c:	4847      	ldr	r0, [pc, #284]	@ (800193c <ADC_READ+0x964>)
 800181e:	f003 fb19 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f002 ff6a 	bl	80046fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800182e:	4843      	ldr	r0, [pc, #268]	@ (800193c <ADC_READ+0x964>)
 8001830:	f003 fb10 	bl	8004e54 <HAL_GPIO_WritePin>
HAL_Delay(20);
#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800183a:	4839      	ldr	r0, [pc, #228]	@ (8001920 <ADC_READ+0x948>)
 800183c:	f003 fb0a 	bl	8004e54 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <ADC_READ+0x930>)
 8001842:	2221      	movs	r2, #33	@ 0x21
 8001844:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 8001846:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <ADC_READ+0x930>)
 8001848:	2200      	movs	r2, #0
 800184a:	705a      	strb	r2, [r3, #1]

HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800184c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001850:	2202      	movs	r2, #2
 8001852:	492d      	ldr	r1, [pc, #180]	@ (8001908 <ADC_READ+0x930>)
 8001854:	482d      	ldr	r0, [pc, #180]	@ (800190c <ADC_READ+0x934>)
 8001856:	f00a fba1 	bl	800bf9c <HAL_SPI_Transmit>
//HAL_Delay(1);
HAL_SPI_Receive(&hspi2, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800185a:	f107 010b 	add.w	r1, r7, #11
 800185e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001862:	2201      	movs	r2, #1
 8001864:	4829      	ldr	r0, [pc, #164]	@ (800190c <ADC_READ+0x934>)
 8001866:	f00a fdaf 	bl	800c3c8 <HAL_SPI_Receive>
//HAL_Delay(1);

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001870:	482b      	ldr	r0, [pc, #172]	@ (8001920 <ADC_READ+0x948>)
 8001872:	f003 faef 	bl	8004e54 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fa91 	bl	8001da0 <wire_break>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <ADC_READ+0x8ca>
{
	wirestatus=0;
 8001884:	2300      	movs	r3, #0
 8001886:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001888:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <ADC_READ+0x960>)
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
	adchex=0;
 8001890:	2300      	movs	r3, #0
 8001892:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 8001896:	2214      	movs	r2, #20
 8001898:	2100      	movs	r1, #0
 800189a:	481d      	ldr	r0, [pc, #116]	@ (8001910 <ADC_READ+0x938>)
 800189c:	f00e fabf 	bl	800fe1e <memset>
 80018a0:	e015      	b.n	80018ce <ADC_READ+0x8f6>
}
else if(check_sensor_validity(adchex))
 80018a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fa62 	bl	8001d70 <check_sensor_validity>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <ADC_READ+0x8f6>
{
	wirestatus=0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <ADC_READ+0x960>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
	adchex =0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 80018c4:	2214      	movs	r2, #20
 80018c6:	2100      	movs	r1, #0
 80018c8:	4811      	ldr	r0, [pc, #68]	@ (8001910 <ADC_READ+0x938>)
 80018ca:	f00e faa8 	bl	800fe1e <memset>
}
wirestatus=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 80018d2:	79f9      	ldrb	r1, [r7, #7]
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <ADC_READ+0x960>)
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4819      	ldr	r0, [pc, #100]	@ (8001940 <ADC_READ+0x968>)
 80018dc:	0089      	lsls	r1, r1, #2
 80018de:	440b      	add	r3, r1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	4916      	ldr	r1, [pc, #88]	@ (8001944 <ADC_READ+0x96c>)
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80018f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 80018f8:	e21f      	b.n	8001d3a <ADC_READ+0xd62>
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w
 8001900:	0a3d70a4 	.word	0x0a3d70a4
 8001904:	3fd8a3d7 	.word	0x3fd8a3d7
 8001908:	2000022c 	.word	0x2000022c
 800190c:	20005628 	.word	0x20005628
 8001910:	20000264 	.word	0x20000264
 8001914:	2000028d 	.word	0x2000028d
 8001918:	cccccccd 	.word	0xcccccccd
 800191c:	40240000 	.word	0x40240000
 8001920:	42020400 	.word	0x42020400
 8001924:	44fa0000 	.word	0x44fa0000
 8001928:	477fff00 	.word	0x477fff00
 800192c:	42c80000 	.word	0x42c80000
 8001930:	3b801132 	.word	0x3b801132
 8001934:	b51b057f 	.word	0xb51b057f
 8001938:	2000024c 	.word	0x2000024c
 800193c:	42021000 	.word	0x42021000
 8001940:	20000290 	.word	0x20000290
 8001944:	200002c0 	.word	0x200002c0

case ADC_3:

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2110      	movs	r1, #16
 800194c:	48a5      	ldr	r0, [pc, #660]	@ (8001be4 <ADC_READ+0xc0c>)
 800194e:	f003 fa81 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001958:	48a3      	ldr	r0, [pc, #652]	@ (8001be8 <ADC_READ+0xc10>)
 800195a:	f003 fa7b 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001964:	48a0      	ldr	r0, [pc, #640]	@ (8001be8 <ADC_READ+0xc10>)
 8001966:	f003 fa75 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001970:	489d      	ldr	r0, [pc, #628]	@ (8001be8 <ADC_READ+0xc10>)
 8001972:	f003 fa6f 	bl	8004e54 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2110      	movs	r1, #16
 800197a:	489a      	ldr	r0, [pc, #616]	@ (8001be4 <ADC_READ+0xc0c>)
 800197c:	f003 fa6a 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2213      	movs	r2, #19
 8001986:	4999      	ldr	r1, [pc, #612]	@ (8001bec <ADC_READ+0xc14>)
 8001988:	4899      	ldr	r0, [pc, #612]	@ (8001bf0 <ADC_READ+0xc18>)
 800198a:	f00a fb07 	bl	800bf9c <HAL_SPI_Transmit>
	HAL_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f002 feb4 	bl	80046fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001994:	2201      	movs	r2, #1
 8001996:	2110      	movs	r1, #16
 8001998:	4892      	ldr	r0, [pc, #584]	@ (8001be4 <ADC_READ+0xc0c>)
 800199a:	f003 fa5b 	bl	8004e54 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019a4:	4890      	ldr	r0, [pc, #576]	@ (8001be8 <ADC_READ+0xc10>)
 80019a6:	f003 fa55 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f002 fea6 	bl	80046fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	488b      	ldr	r0, [pc, #556]	@ (8001be4 <ADC_READ+0xc0c>)
 80019b6:	f003 fa4d 	bl	8004e54 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x19;
 80019ba:	4b8c      	ldr	r3, [pc, #560]	@ (8001bec <ADC_READ+0xc14>)
 80019bc:	2219      	movs	r2, #25
 80019be:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	2201      	movs	r2, #1
 80019c6:	4989      	ldr	r1, [pc, #548]	@ (8001bec <ADC_READ+0xc14>)
 80019c8:	4889      	ldr	r0, [pc, #548]	@ (8001bf0 <ADC_READ+0xc18>)
 80019ca:	f00a fae7 	bl	800bf9c <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2110      	movs	r1, #16
 80019d2:	4884      	ldr	r0, [pc, #528]	@ (8001be4 <ADC_READ+0xc0c>)
 80019d4:	f003 fa3e 	bl	8004e54 <HAL_GPIO_WritePin>

	HAL_Delay(wait_time);
 80019d8:	4b86      	ldr	r3, [pc, #536]	@ (8001bf4 <ADC_READ+0xc1c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fe8d 	bl	80046fc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2110      	movs	r1, #16
 80019e6:	487f      	ldr	r0, [pc, #508]	@ (8001be4 <ADC_READ+0xc0c>)
 80019e8:	f003 fa34 	bl	8004e54 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x13;
 80019ec:	4b7f      	ldr	r3, [pc, #508]	@ (8001bec <ADC_READ+0xc14>)
 80019ee:	2213      	movs	r2, #19
 80019f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f6:	e062      	b.n	8001abe <ADC_READ+0xae6>
	{
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80019f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019fc:	2201      	movs	r2, #1
 80019fe:	497b      	ldr	r1, [pc, #492]	@ (8001bec <ADC_READ+0xc14>)
 8001a00:	487b      	ldr	r0, [pc, #492]	@ (8001bf0 <ADC_READ+0xc18>)
 8001a02:	f00a facb 	bl	800bf9c <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f002 fe78 	bl	80046fc <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3[i], 0x2, 0xFFFF);
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4a79      	ldr	r2, [pc, #484]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a12:	1899      	adds	r1, r3, r2
 8001a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4875      	ldr	r0, [pc, #468]	@ (8001bf0 <ADC_READ+0xc18>)
 8001a1c:	f00a fcd4 	bl	800c3c8 <HAL_SPI_Receive>
		HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f002 fe6b 	bl	80046fc <HAL_Delay>
		// Byte-wise flip
		reg_data_ADC_3[i] = (reg_data_ADC_3[i] >> 8) | (reg_data_ADC_3[i] << 8);
 8001a26:	4a74      	ldr	r2, [pc, #464]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4970      	ldr	r1, [pc, #448]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	b299      	uxth	r1, r3
 8001a46:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
		if(i > 0)
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd29      	ble.n	8001aa8 <ADC_READ+0xad0>
		{
			if(((reg_data_ADC_3[i]-reg_data_ADC_3[i-1])<2)||((reg_data_ADC_3[i-1]-reg_data_ADC_3[i])<2))
 8001a54:	4a68      	ldr	r2, [pc, #416]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a65      	ldr	r2, [pc, #404]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a68:	1acb      	subs	r3, r1, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	dd0c      	ble.n	8001a88 <ADC_READ+0xab0>
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a70:	3b01      	subs	r3, #1
 8001a72:	4a61      	ldr	r2, [pc, #388]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a82:	1acb      	subs	r3, r1, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	dc08      	bgt.n	8001a9a <ADC_READ+0xac2>
			{
				sum += reg_data_ADC_3[i];
 8001a88:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <ADC_READ+0xc20>)
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a94:	4413      	add	r3, r2
 8001a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a98:	e00e      	b.n	8001ab8 <ADC_READ+0xae0>
			}
			else
			{
				diff_count++;
 8001a9a:	4b58      	ldr	r3, [pc, #352]	@ (8001bfc <ADC_READ+0xc24>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <ADC_READ+0xc24>)
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <ADC_READ+0xae0>
			}
		}
		else
		{
			sum += reg_data_ADC_3[i];
 8001aa8:	4a53      	ldr	r2, [pc, #332]	@ (8001bf8 <ADC_READ+0xc20>)
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab4:	4413      	add	r3, r2
 8001ab6:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 10; i++)
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aba:	3301      	adds	r3, #1
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	dd99      	ble.n	80019f8 <ADC_READ+0xa20>
		}

	}

	if(diff_count > 5) sum =0;
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <ADC_READ+0xc24>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d901      	bls.n	8001ad0 <ADC_READ+0xaf8>
 8001acc:	2300      	movs	r3, #0
 8001ace:	647b      	str	r3, [r7, #68]	@ 0x44
	diff_count=0;
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <ADC_READ+0xc24>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
#else

	sum += reg_data_ADC_3[i];  // Add to sum for averaging
}
#endif
adchex = sum / 10;
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad8:	4a49      	ldr	r2, [pc, #292]	@ (8001c00 <ADC_READ+0xc28>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	08db      	lsrs	r3, r3, #3
 8001ae0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 8001ae4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ae6:	f7fe fd1d 	bl	8000524 <__aeabi_ui2d>
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b45      	ldr	r3, [pc, #276]	@ (8001c04 <ADC_READ+0xc2c>)
 8001af0:	f7fe febc 	bl	800086c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f864 	bl	8000bc8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2110      	movs	r1, #16
 8001b08:	4836      	ldr	r0, [pc, #216]	@ (8001be4 <ADC_READ+0xc0c>)
 8001b0a:	f003 f9a3 	bl	8004e54 <HAL_GPIO_WritePin>
resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001b0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b12:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001c08 <ADC_READ+0xc30>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b22:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001c0c <ADC_READ+0xc34>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 8001b2e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001c1c <ADC_READ+0xc44>
 8001b32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	db6f      	blt.n	8001c20 <ADC_READ+0xc48>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001b40:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8001c10 <ADC_READ+0xc38>
 8001b44:	eef1 7a67 	vneg.f32	s15, s15
 8001b48:	ee17 3a90 	vmov	r3, s15
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd0b 	bl	8000568 <__aeabi_f2d>
 8001b52:	4604      	mov	r4, r0
 8001b54:	460d      	mov	r5, r1
 8001b56:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001c10 <ADC_READ+0xc38>
 8001b5a:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8001c10 <ADC_READ+0xc38>
 8001b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b62:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001c14 <ADC_READ+0xc3c>
 8001b66:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6e:	eddf 5a2b 	vldr	s11, [pc, #172]	@ 8001c1c <ADC_READ+0xc44>
 8001b72:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b7a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001b7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8a:	ee17 0a90 	vmov	r0, s15
 8001b8e:	f7fe fceb 	bl	8000568 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ec43 2b10 	vmov	d0, r2, r3
 8001b9a:	f010 fa21 	bl	8011fe0 <sqrt>
 8001b9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fb81 	bl	80002ac <__adddf3>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001c14 <ADC_READ+0xc3c>
 8001bb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bba:	ee17 0a90 	vmov	r0, s15
 8001bbe:	f7fe fcd3 	bl	8000568 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fe4f 	bl	800086c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe fff7 	bl	8000bc8 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <ADC_READ+0xc40>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e036      	b.n	8001c50 <ADC_READ+0xc78>
 8001be2:	bf00      	nop
 8001be4:	42020c00 	.word	0x42020c00
 8001be8:	42020000 	.word	0x42020000
 8001bec:	2000022c 	.word	0x2000022c
 8001bf0:	200056b8 	.word	0x200056b8
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000278 	.word	0x20000278
 8001bfc:	2000028d 	.word	0x2000028d
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	40240000 	.word	0x40240000
 8001c08:	44fa0000 	.word	0x44fa0000
 8001c0c:	477fff00 	.word	0x477fff00
 8001c10:	3b801132 	.word	0x3b801132
 8001c14:	b51b057f 	.word	0xb51b057f
 8001c18:	2000024c 	.word	0x2000024c
 8001c1c:	42c80000 	.word	0x42c80000
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 8001c20:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8001c1c <ADC_READ+0xc44>
 8001c24:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2c:	ee17 0a90 	vmov	r0, s15
 8001c30:	f7fe fc9a 	bl	8000568 <__aeabi_f2d>
 8001c34:	a34c      	add	r3, pc, #304	@ (adr r3, 8001d68 <ADC_READ+0xd90>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fe17 	bl	800086c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffbf 	bl	8000bc8 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d48 <ADC_READ+0xd70>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9])
 8001c50:	7cfa      	ldrb	r2, [r7, #19]
 8001c52:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <ADC_READ+0xd74>)
 8001c54:	7a5b      	ldrb	r3, [r3, #9]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d10e      	bne.n	8001c78 <ADC_READ+0xca0>
{
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 1); // Toggle LED for visual feedback
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c60:	483b      	ldr	r0, [pc, #236]	@ (8001d50 <ADC_READ+0xd78>)
 8001c62:	f003 f8f7 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f002 fd48 	bl	80046fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c72:	4837      	ldr	r0, [pc, #220]	@ (8001d50 <ADC_READ+0xd78>)
 8001c74:	f003 f8ee 	bl	8004e54 <HAL_GPIO_WritePin>

#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	4835      	ldr	r0, [pc, #212]	@ (8001d54 <ADC_READ+0xd7c>)
 8001c7e:	f003 f8e9 	bl	8004e54 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 8001c82:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <ADC_READ+0xd74>)
 8001c84:	2221      	movs	r2, #33	@ 0x21
 8001c86:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 8001c88:	4b30      	ldr	r3, [pc, #192]	@ (8001d4c <ADC_READ+0xd74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFFFF);
 8001c8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c92:	2202      	movs	r2, #2
 8001c94:	492d      	ldr	r1, [pc, #180]	@ (8001d4c <ADC_READ+0xd74>)
 8001c96:	4830      	ldr	r0, [pc, #192]	@ (8001d58 <ADC_READ+0xd80>)
 8001c98:	f00a f980 	bl	800bf9c <HAL_SPI_Transmit>

HAL_SPI_Receive(&hspi3, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 8001c9c:	f107 010b 	add.w	r1, r7, #11
 8001ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	482c      	ldr	r0, [pc, #176]	@ (8001d58 <ADC_READ+0xd80>)
 8001ca8:	f00a fb8e 	bl	800c3c8 <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4828      	ldr	r0, [pc, #160]	@ (8001d54 <ADC_READ+0xd7c>)
 8001cb2:	f003 f8cf 	bl	8004e54 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f871 	bl	8001da0 <wire_break>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <ADC_READ+0xd0a>
{
	wirestatus=0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <ADC_READ+0xd70>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
	adchex=0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8001cd6:	2214      	movs	r2, #20
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4820      	ldr	r0, [pc, #128]	@ (8001d5c <ADC_READ+0xd84>)
 8001cdc:	f00e f89f 	bl	800fe1e <memset>
 8001ce0:	e015      	b.n	8001d0e <ADC_READ+0xd36>
}
else if(check_sensor_validity(adchex))
 8001ce2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f842 	bl	8001d70 <check_sensor_validity>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <ADC_READ+0xd36>
{
	wirestatus=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <ADC_READ+0xd70>)
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
	adchex =0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8001d04:	2214      	movs	r2, #20
 8001d06:	2100      	movs	r1, #0
 8001d08:	4814      	ldr	r0, [pc, #80]	@ (8001d5c <ADC_READ+0xd84>)
 8001d0a:	f00e f888 	bl	800fe1e <memset>
}
wirestatus=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 8001d12:	79f9      	ldrb	r1, [r7, #7]
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <ADC_READ+0xd70>)
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	4811      	ldr	r0, [pc, #68]	@ (8001d60 <ADC_READ+0xd88>)
 8001d1c:	0089      	lsls	r1, r1, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 8001d26:	79fa      	ldrb	r2, [r7, #7]
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	490e      	ldr	r1, [pc, #56]	@ (8001d64 <ADC_READ+0xd8c>)
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001d34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 8001d38:	bf00      	nop
}
//	return sensor_value;
return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3748      	adds	r7, #72	@ 0x48
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}
 8001d44:	f3af 8000 	nop.w
 8001d48:	2000024c 	.word	0x2000024c
 8001d4c:	2000022c 	.word	0x2000022c
 8001d50:	42021000 	.word	0x42021000
 8001d54:	42020c00 	.word	0x42020c00
 8001d58:	200056b8 	.word	0x200056b8
 8001d5c:	20000278 	.word	0x20000278
 8001d60:	20000290 	.word	0x20000290
 8001d64:	200002c0 	.word	0x200002c0
 8001d68:	0a3d70a4 	.word	0x0a3d70a4
 8001d6c:	3fd8a3d7 	.word	0x3fd8a3d7

08001d70 <check_sensor_validity>:
	check_channel = 0 ;
}
#endif

uint8_t check_sensor_validity(uint16_t data)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	80fb      	strh	r3, [r7, #6]

	if(data<ADC_MIN_VAL || data>ADC_MAX_VAL)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d904      	bls.n	8001d8e <check_sensor_validity+0x1e>
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	f246 6266 	movw	r2, #26214	@ 0x6666
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <check_sensor_validity+0x22>
		return 1 ;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <check_sensor_validity+0x24>

	else
		return 0 ;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <wire_break>:

uint8_t wire_break(uint8_t flag)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	uint8_t FL_REF =0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]

	if(txd_buf[7] == 0xC2)//0xC2
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <wire_break+0x7c>)
 8001db0:	79db      	ldrb	r3, [r3, #7]
 8001db2:	2bc2      	cmp	r3, #194	@ 0xc2
 8001db4:	d102      	bne.n	8001dbc <wire_break+0x1c>
	{
		FL_REF= 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e008      	b.n	8001dce <wire_break+0x2e>
	}
	else if(txd_buf[7] == 0x82)//0x82
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <wire_break+0x7c>)
 8001dbe:	79db      	ldrb	r3, [r3, #7]
 8001dc0:	2b82      	cmp	r3, #130	@ 0x82
 8001dc2:	d102      	bne.n	8001dca <wire_break+0x2a>
	{
		FL_REF= 2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <wire_break+0x2e>
	}
	else
	{
		FL_REF=0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
	}

	switch(FL_REF)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d002      	beq.n	8001dda <wire_break+0x3a>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d00a      	beq.n	8001dee <wire_break+0x4e>
 8001dd8:	e013      	b.n	8001e02 <wire_break+0x62>
	{
	case 1:
		if(0x01 == flag)  //0x29 w/o interface card :  0x01  with interface card
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <wire_break+0x44>
			return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e014      	b.n	8001e0e <wire_break+0x6e>

		else if(0x00 == flag) //0x00 w/o interface card :  0x00  with interface card
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <wire_break+0x66>
			return 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e00f      	b.n	8001e0e <wire_break+0x6e>

		break;
	case 2:
		if(0x3 == flag) //0x2b w/o interface card :  0x03  with interface card
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d101      	bne.n	8001df8 <wire_break+0x58>
			return 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e00a      	b.n	8001e0e <wire_break+0x6e>

		else if(0x2 == flag) //0x2 w/o interface card :  0x02  with interface card
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d105      	bne.n	8001e0a <wire_break+0x6a>
			return 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e005      	b.n	8001e0e <wire_break+0x6e>

		break;
	default:
		return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e003      	b.n	8001e0e <wire_break+0x6e>
		break;
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <wire_break+0x6c>
		break;
 8001e0a:	bf00      	nop
		break;
	}
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000022c 	.word	0x2000022c

08001e20 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0


	HAL_GPIO_TogglePin(GPIOE, LED5_Pin);  // Toggle status LED
 8001e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e2a:	4838      	ldr	r0, [pc, #224]	@ (8001f0c <NAND_operation+0xec>)
 8001e2c:	f003 f82a 	bl	8004e84 <HAL_GPIO_TogglePin>
	// Move to the next block if all pages in the current block have been written
	if (nand_address.Page > 127)
 8001e30:	4b37      	ldr	r3, [pc, #220]	@ (8001f10 <NAND_operation+0xf0>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e36:	d90b      	bls.n	8001e50 <NAND_operation+0x30>
	{
		get_Good_NAND_block();
 8001e38:	f000 f980 	bl	800213c <get_Good_NAND_block>
		nand_address.Page = 0;
 8001e3c:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <NAND_operation+0xf0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]
		HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8001e42:	4933      	ldr	r1, [pc, #204]	@ (8001f10 <NAND_operation+0xf0>)
 8001e44:	4833      	ldr	r0, [pc, #204]	@ (8001f14 <NAND_operation+0xf4>)
 8001e46:	f003 feab 	bl	8005ba0 <HAL_NAND_Erase_Block>
		HAL_Delay(100);
 8001e4a:	2064      	movs	r0, #100	@ 0x64
 8001e4c:	f002 fc56 	bl	80046fc <HAL_Delay>
	}

	memset(read_data, 0, 8192);
 8001e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e54:	2100      	movs	r1, #0
 8001e56:	4830      	ldr	r0, [pc, #192]	@ (8001f18 <NAND_operation+0xf8>)
 8001e58:	f00d ffe1 	bl	800fe1e <memset>
	memset(NAND_data, 0, 8192);
 8001e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e60:	2100      	movs	r1, #0
 8001e62:	482e      	ldr	r0, [pc, #184]	@ (8001f1c <NAND_operation+0xfc>)
 8001e64:	f00d ffdb 	bl	800fe1e <memset>

	// Prepare data for NAND write
	get_NAND_data(NAND_data);
 8001e68:	482c      	ldr	r0, [pc, #176]	@ (8001f1c <NAND_operation+0xfc>)
 8001e6a:	f000 fb85 	bl	8002578 <get_NAND_data>

	HAL_UART_Transmit(&huart5, (uint8_t *)&NAND_data, 8192,HAL_MAX_DELAY);
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e76:	4929      	ldr	r1, [pc, #164]	@ (8001f1c <NAND_operation+0xfc>)
 8001e78:	4829      	ldr	r0, [pc, #164]	@ (8001f20 <NAND_operation+0x100>)
 8001e7a:	f00a fe77 	bl	800cb6c <HAL_UART_Transmit>
//	HAL_Delay(100);
	// Write data to NAND flash
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4a26      	ldr	r2, [pc, #152]	@ (8001f1c <NAND_operation+0xfc>)
 8001e82:	4923      	ldr	r1, [pc, #140]	@ (8001f10 <NAND_operation+0xf0>)
 8001e84:	4823      	ldr	r0, [pc, #140]	@ (8001f14 <NAND_operation+0xf4>)
 8001e86:	f003 fa57 	bl	8005338 <HAL_NAND_Write_Page_8b>

	// Read data back from NAND flash for verification
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <NAND_operation+0xf8>)
 8001e8e:	4920      	ldr	r1, [pc, #128]	@ (8001f10 <NAND_operation+0xf0>)
 8001e90:	4820      	ldr	r0, [pc, #128]	@ (8001f14 <NAND_operation+0xf4>)
 8001e92:	f003 f8f7 	bl	8005084 <HAL_NAND_Read_Page_8b>
	HAL_UART_Transmit(&huart5, read_data, sizeof(read_data),HAL_MAX_DELAY);
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e9e:	491e      	ldr	r1, [pc, #120]	@ (8001f18 <NAND_operation+0xf8>)
 8001ea0:	481f      	ldr	r0, [pc, #124]	@ (8001f20 <NAND_operation+0x100>)
 8001ea2:	f00a fe63 	bl	800cb6c <HAL_UART_Transmit>
	//	HAL_Delay(20);
	// Calculate bit difference between written and read data
	uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 8001ea6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eaa:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <NAND_operation+0xf8>)
 8001eac:	481b      	ldr	r0, [pc, #108]	@ (8001f1c <NAND_operation+0xfc>)
 8001eae:	f000 f8c0 	bl	8002032 <calculate_hamming_distance>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]

	// Check if data read matches data written
	if (bit_difference <50) // Data matches
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b31      	cmp	r3, #49	@ 0x31
 8001eba:	d813      	bhi.n	8001ee4 <NAND_operation+0xc4>
	{
		if (nand_address.Page == 0)
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <NAND_operation+0xf0>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d108      	bne.n	8001ed6 <NAND_operation+0xb6>
		{
			set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <NAND_operation+0xf0>)
 8001ec6:	8818      	ldrh	r0, [r3, #0]
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <NAND_operation+0xf0>)
 8001eca:	8899      	ldrh	r1, [r3, #4]
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <NAND_operation+0xf0>)
 8001ece:	885a      	ldrh	r2, [r3, #2]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f000 f859 	bl	8001f88 <set_NAND_block_status>
		}
		nand_address.Page++;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <NAND_operation+0xf0>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <NAND_operation+0xf0>)
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <NAND_operation+0xd4>

	}
	else // Data mismatch - possible bad block
	{
		bad_block_check_counter = 0 ;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <NAND_operation+0x104>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	801a      	strh	r2, [r3, #0]
		handle_bad_block(); // Call function to handle the bad block scenario
 8001eea:	f000 f8cb 	bl	8002084 <handle_bad_block>
		bad_block_check_counter = 0;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <NAND_operation+0x104>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
	}

	nand_update = 1;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <NAND_operation+0x108>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
	update_NAND_addr();
 8001efa:	f000 fba9 	bl	8002650 <update_NAND_addr>
	update_NAND_CyclicAddr();
 8001efe:	f000 fbbb 	bl	8002678 <update_NAND_CyclicAddr>

}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	42021000 	.word	0x42021000
 8001f10:	200002f0 	.word	0x200002f0
 8001f14:	20005a80 	.word	0x20005a80
 8001f18:	200002fc 	.word	0x200002fc
 8001f1c:	200022fc 	.word	0x200022fc
 8001f20:	2000586c 	.word	0x2000586c
 8001f24:	200054be 	.word	0x200054be
 8001f28:	200054bc 	.word	0x200054bc

08001f2c <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

	for (uint16_t i = 0; i < 4096; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	80fb      	strh	r3, [r7, #6]
 8001f36:	e016      	b.n	8001f66 <get_NAND_block_status+0x3a>
	{
		nand_address.Block = i;
 8001f38:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <get_NAND_block_status+0x4c>)
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	8093      	strh	r3, [r2, #4]
		HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <get_NAND_block_status+0x50>)
 8001f42:	490d      	ldr	r1, [pc, #52]	@ (8001f78 <get_NAND_block_status+0x4c>)
 8001f44:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <get_NAND_block_status+0x54>)
 8001f46:	f003 fb4f 	bl	80055e8 <HAL_NAND_Read_SpareArea_8b>
		nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <get_NAND_block_status+0x50>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2bff      	cmp	r3, #255	@ 0xff
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4a09      	ldr	r2, [pc, #36]	@ (8001f84 <get_NAND_block_status+0x58>)
 8001f5e:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4096; i++)
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	3301      	adds	r3, #1
 8001f64:	80fb      	strh	r3, [r7, #6]
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f6c:	d3e4      	bcc.n	8001f38 <get_NAND_block_status+0xc>
//	{
//		nand_address.Block=0;
//		nand_address.Page=0;
//		nand_address.Plane=0;
//	}
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200002f0 	.word	0x200002f0
 8001f7c:	200042fc 	.word	0x200042fc
 8001f80:	20005a80 	.word	0x20005a80
 8001f84:	200044bc 	.word	0x200044bc

08001f88 <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	80fb      	strh	r3, [r7, #6]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80bb      	strh	r3, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	707b      	strb	r3, [r7, #1]
	NAND_AddressTypeDef nand_address_block = {0, block, plane};
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	813b      	strh	r3, [r7, #8]
 8001faa:	88bb      	ldrh	r3, [r7, #4]
 8001fac:	817b      	strh	r3, [r7, #10]
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	81bb      	strh	r3, [r7, #12]
	HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 8001fb2:	f107 0108 	add.w	r1, r7, #8
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <set_NAND_block_status+0x68>)
 8001fba:	480e      	ldr	r0, [pc, #56]	@ (8001ff4 <set_NAND_block_status+0x6c>)
 8001fbc:	f003 fb14 	bl	80055e8 <HAL_NAND_Read_SpareArea_8b>

	spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <set_NAND_block_status+0x42>
 8001fc6:	22ff      	movs	r2, #255	@ 0xff
 8001fc8:	e000      	b.n	8001fcc <set_NAND_block_status+0x44>
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <set_NAND_block_status+0x68>)
 8001fce:	701a      	strb	r2, [r3, #0]
	nand_block_status[block] = block_state;          // Update block status array
 8001fd0:	88bb      	ldrh	r3, [r7, #4]
 8001fd2:	4909      	ldr	r1, [pc, #36]	@ (8001ff8 <set_NAND_block_status+0x70>)
 8001fd4:	787a      	ldrb	r2, [r7, #1]
 8001fd6:	54ca      	strb	r2, [r1, r3]
	HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 8001fd8:	f107 0108 	add.w	r1, r7, #8
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <set_NAND_block_status+0x68>)
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <set_NAND_block_status+0x6c>)
 8001fe2:	f003 fc6c 	bl	80058be <HAL_NAND_Write_SpareArea_8b>
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200042fc 	.word	0x200042fc
 8001ff4:	20005a80 	.word	0x20005a80
 8001ff8:	200044bc 	.word	0x200044bc

08001ffc <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
	while (byte)
 800200a:	e008      	b.n	800201e <count_set_bits+0x22>
	{
		count += byte & 1;
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
		byte >>= 1;
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
	while (byte)
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f3      	bne.n	800200c <count_set_bits+0x10>
	}
	return count;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
	int differing_bits = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e013      	b.n	8002070 <calculate_hamming_distance+0x3e>
	{
		differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	440b      	add	r3, r1
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4053      	eors	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ffcd 	bl	8001ffc <count_set_bits>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4413      	add	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3301      	adds	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3e7      	bcc.n	8002048 <calculate_hamming_distance+0x16>
	}
	return differing_bits;
 8002078:	697b      	ldr	r3, [r7, #20]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	nand_address.Page = 0;
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <handle_bad_block+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
	HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800208e:	4926      	ldr	r1, [pc, #152]	@ (8002128 <handle_bad_block+0xa4>)
 8002090:	4826      	ldr	r0, [pc, #152]	@ (800212c <handle_bad_block+0xa8>)
 8002092:	f003 fd85 	bl	8005ba0 <HAL_NAND_Erase_Block>
	HAL_Delay(100);
 8002096:	2064      	movs	r0, #100	@ 0x64
 8002098:	f002 fb30 	bl	80046fc <HAL_Delay>
	if(bad_block_check_counter++ > 4094 )
 800209c:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <handle_bad_block+0xac>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	b291      	uxth	r1, r2
 80020a4:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <handle_bad_block+0xac>)
 80020a6:	8011      	strh	r1, [r2, #0]
 80020a8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d838      	bhi.n	8002122 <handle_bad_block+0x9e>
	{
		return ;
	}
	// Attempt to rewrite data after erasing the block
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 80020b0:	2301      	movs	r3, #1
 80020b2:	4a20      	ldr	r2, [pc, #128]	@ (8002134 <handle_bad_block+0xb0>)
 80020b4:	491c      	ldr	r1, [pc, #112]	@ (8002128 <handle_bad_block+0xa4>)
 80020b6:	481d      	ldr	r0, [pc, #116]	@ (800212c <handle_bad_block+0xa8>)
 80020b8:	f003 f93e 	bl	8005338 <HAL_NAND_Write_Page_8b>
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 80020bc:	2301      	movs	r3, #1
 80020be:	4a1e      	ldr	r2, [pc, #120]	@ (8002138 <handle_bad_block+0xb4>)
 80020c0:	4919      	ldr	r1, [pc, #100]	@ (8002128 <handle_bad_block+0xa4>)
 80020c2:	481a      	ldr	r0, [pc, #104]	@ (800212c <handle_bad_block+0xa8>)
 80020c4:	f002 ffde 	bl	8005084 <HAL_NAND_Read_Page_8b>

	// Verify written data again
	if (calculate_hamming_distance(NAND_data, read_data, 8192) < 50) // Data matches
 80020c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020cc:	491a      	ldr	r1, [pc, #104]	@ (8002138 <handle_bad_block+0xb4>)
 80020ce:	4819      	ldr	r0, [pc, #100]	@ (8002134 <handle_bad_block+0xb0>)
 80020d0:	f7ff ffaf 	bl	8002032 <calculate_hamming_distance>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b31      	cmp	r3, #49	@ 0x31
 80020d8:	dc0f      	bgt.n	80020fa <handle_bad_block+0x76>
	{

		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1);
 80020da:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <handle_bad_block+0xa4>)
 80020dc:	8818      	ldrh	r0, [r3, #0]
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <handle_bad_block+0xa4>)
 80020e0:	8899      	ldrh	r1, [r3, #4]
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <handle_bad_block+0xa4>)
 80020e4:	885a      	ldrh	r2, [r3, #2]
 80020e6:	2301      	movs	r3, #1
 80020e8:	f7ff ff4e 	bl	8001f88 <set_NAND_block_status>

		nand_address.Page++;
 80020ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <handle_bad_block+0xa4>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <handle_bad_block+0xa4>)
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	e014      	b.n	8002124 <handle_bad_block+0xa0>
	}
	else // Mark block as bad and attempt to move data
	{
		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <handle_bad_block+0xa4>)
 80020fc:	8818      	ldrh	r0, [r3, #0]
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <handle_bad_block+0xa4>)
 8002100:	8899      	ldrh	r1, [r3, #4]
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <handle_bad_block+0xa4>)
 8002104:	885a      	ldrh	r2, [r3, #2]
 8002106:	2300      	movs	r3, #0
 8002108:	f7ff ff3e 	bl	8001f88 <set_NAND_block_status>
		nand_address.Page = 0;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <handle_bad_block+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	801a      	strh	r2, [r3, #0]
		get_Good_NAND_block();
 8002112:	f000 f813 	bl	800213c <get_Good_NAND_block>
		handle_bad_block();
 8002116:	f7ff ffb5 	bl	8002084 <handle_bad_block>
		HAL_Delay(10);
 800211a:	200a      	movs	r0, #10
 800211c:	f002 faee 	bl	80046fc <HAL_Delay>
 8002120:	e000      	b.n	8002124 <handle_bad_block+0xa0>
		return ;
 8002122:	bf00      	nop
	}
}
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002f0 	.word	0x200002f0
 800212c:	20005a80 	.word	0x20005a80
 8002130:	200054be 	.word	0x200054be
 8002134:	200022fc 	.word	0x200022fc
 8002138:	200002fc 	.word	0x200002fc

0800213c <get_Good_NAND_block>:

void get_Good_NAND_block()
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 8002140:	e010      	b.n	8002164 <get_Good_NAND_block+0x28>
	{
		nand_address.Block++;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002144:	889b      	ldrh	r3, [r3, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <get_Good_NAND_block+0x70>)
 800214c:	809a      	strh	r2, [r3, #4]
		// Handle block wrapping around in case of overflow
		if (nand_address.Block > 4095)
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002150:	889b      	ldrh	r3, [r3, #4]
 8002152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002156:	d305      	bcc.n	8002164 <get_Good_NAND_block+0x28>
		{
			nand_address.Block = 0;
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <get_Good_NAND_block+0x70>)
 800215a:	2200      	movs	r2, #0
 800215c:	809a      	strh	r2, [r3, #4]
			nand_cyclic_run = 1;
 800215e:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <get_Good_NAND_block+0x74>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002166:	889b      	ldrh	r3, [r3, #4]
 8002168:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800216c:	4293      	cmp	r3, r2
 800216e:	d806      	bhi.n	800217e <get_Good_NAND_block+0x42>
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002172:	889b      	ldrh	r3, [r3, #4]
 8002174:	3301      	adds	r3, #1
 8002176:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <get_Good_NAND_block+0x78>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0e1      	beq.n	8002142 <get_Good_NAND_block+0x6>
		}
	}
	nand_address.Block++;
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002180:	889b      	ldrh	r3, [r3, #4]
 8002182:	3301      	adds	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002188:	809a      	strh	r2, [r3, #4]
	if (nand_address.Block > 4095)
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <get_Good_NAND_block+0x70>)
 800218c:	889b      	ldrh	r3, [r3, #4]
 800218e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002192:	d305      	bcc.n	80021a0 <get_Good_NAND_block+0x64>
	{
		nand_address.Block = 0;
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <get_Good_NAND_block+0x70>)
 8002196:	2200      	movs	r2, #0
 8002198:	809a      	strh	r2, [r3, #4]
		nand_cyclic_run = 1;
 800219a:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <get_Good_NAND_block+0x74>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
	}
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200002f0 	.word	0x200002f0
 80021b0:	200054bd 	.word	0x200054bd
 80021b4:	200044bc 	.word	0x200044bc

080021b8 <SRAM_operation>:
/*
 * SRAM_operation
 * Reads time data from SRAM, updates temperature readings, and writes formatted
 * data back to SRAM. Checks for time changes and triggers NAND update if necessary.
 */
uint8_t SRAM_operation() {
 80021b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021bc:	b0d7      	sub	sp, #348	@ 0x15c
 80021be:	af34      	add	r7, sp, #208	@ 0xd0

	uint8_t time_data[8] = {0};
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	// Read current second from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data, 7);
 80021cc:	4ba6      	ldr	r3, [pc, #664]	@ (8002468 <SRAM_operation+0x2b0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80021d6:	2307      	movs	r3, #7
 80021d8:	48a4      	ldr	r0, [pc, #656]	@ (800246c <SRAM_operation+0x2b4>)
 80021da:	f00a fbd9 	bl	800c990 <HAL_SRAM_Read_8b>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)unused_sramAddr, (uint8_t *)&unused, 1);
 80021de:	4ba4      	ldr	r3, [pc, #656]	@ (8002470 <SRAM_operation+0x2b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	2301      	movs	r3, #1
 80021e6:	4aa3      	ldr	r2, [pc, #652]	@ (8002474 <SRAM_operation+0x2bc>)
 80021e8:	48a0      	ldr	r0, [pc, #640]	@ (800246c <SRAM_operation+0x2b4>)
 80021ea:	f00a fc2b 	bl	800ca44 <HAL_SRAM_Write_8b>
	// Check if the second has changed
	if (time_data[0] != old_sec) {
 80021ee:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80021f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002478 <SRAM_operation+0x2c0>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	f000 819b 	beq.w	8002532 <SRAM_operation+0x37a>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 1); // Toggle LED for visual feedback
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002202:	489e      	ldr	r0, [pc, #632]	@ (800247c <SRAM_operation+0x2c4>)
 8002204:	f002 fe26 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002208:	2001      	movs	r0, #1
 800220a:	f002 fa77 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002214:	4899      	ldr	r0, [pc, #612]	@ (800247c <SRAM_operation+0x2c4>)
 8002216:	f002 fe1d 	bl	8004e54 <HAL_GPIO_WritePin>

		// Format temperature and time data into the buffer
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 800221a:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800221e:	2100      	movs	r1, #0
 8002220:	4897      	ldr	r0, [pc, #604]	@ (8002480 <SRAM_operation+0x2c8>)
 8002222:	f00d fdfc 	bl	800fe1e <memset>
		SRAMopt.Startbyte=SoF;
 8002226:	4b97      	ldr	r3, [pc, #604]	@ (8002484 <SRAM_operation+0x2cc>)
 8002228:	2240      	movs	r2, #64	@ 0x40
 800222a:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
				"{\"TS1\": \"%.2f#%X\", \"TS2\": \"%.2f#%X\", \"TS3\": \"%.2f#%X\", \"TS4\": \"%.2f#%X\", \"TS5\": \"%.2f#%X\", "
				"\"TS6\": \"%.2f#%X\", \"TS7\": \"%.2f#%X\", \"TS8\": \"%.2f#%X\", \"TS9\": \"%.2f#%X\", \"TS10\": \"%.2f#%X\", "
				"\"TS11\": \"%.2f#%X\", \"TS12\": \"%.2f#%X\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"} \n\r",
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800222c:	4b96      	ldr	r3, [pc, #600]	@ (8002488 <SRAM_operation+0x2d0>)
 800222e:	681b      	ldr	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f999 	bl	8000568 <__aeabi_f2d>
 8002236:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800223a:	4b94      	ldr	r3, [pc, #592]	@ (800248c <SRAM_operation+0x2d4>)
 800223c:	881b      	ldrh	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800223e:	677b      	str	r3, [r7, #116]	@ 0x74
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002240:	4b91      	ldr	r3, [pc, #580]	@ (8002488 <SRAM_operation+0x2d0>)
 8002242:	685b      	ldr	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f98f 	bl	8000568 <__aeabi_f2d>
 800224a:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800224e:	4b8f      	ldr	r3, [pc, #572]	@ (800248c <SRAM_operation+0x2d4>)
 8002250:	885b      	ldrh	r3, [r3, #2]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002252:	673b      	str	r3, [r7, #112]	@ 0x70
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002254:	4b8c      	ldr	r3, [pc, #560]	@ (8002488 <SRAM_operation+0x2d0>)
 8002256:	689b      	ldr	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f985 	bl	8000568 <__aeabi_f2d>
 800225e:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002262:	4b8a      	ldr	r3, [pc, #552]	@ (800248c <SRAM_operation+0x2d4>)
 8002264:	889b      	ldrh	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002266:	65fb      	str	r3, [r7, #92]	@ 0x5c
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002268:	4b87      	ldr	r3, [pc, #540]	@ (8002488 <SRAM_operation+0x2d0>)
 800226a:	68db      	ldr	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f97b 	bl	8000568 <__aeabi_f2d>
 8002272:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002276:	4b85      	ldr	r3, [pc, #532]	@ (800248c <SRAM_operation+0x2d4>)
 8002278:	88db      	ldrh	r3, [r3, #6]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800227a:	65bb      	str	r3, [r7, #88]	@ 0x58
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800227c:	4b82      	ldr	r3, [pc, #520]	@ (8002488 <SRAM_operation+0x2d0>)
 800227e:	691b      	ldr	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f971 	bl	8000568 <__aeabi_f2d>
 8002286:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800228a:	4b80      	ldr	r3, [pc, #512]	@ (800248c <SRAM_operation+0x2d4>)
 800228c:	891b      	ldrh	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800228e:	647b      	str	r3, [r7, #68]	@ 0x44
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002290:	4b7d      	ldr	r3, [pc, #500]	@ (8002488 <SRAM_operation+0x2d0>)
 8002292:	695b      	ldr	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f967 	bl	8000568 <__aeabi_f2d>
 800229a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800229e:	4b7b      	ldr	r3, [pc, #492]	@ (800248c <SRAM_operation+0x2d4>)
 80022a0:	895b      	ldrh	r3, [r3, #10]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022a2:	643b      	str	r3, [r7, #64]	@ 0x40
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 80022a4:	4b78      	ldr	r3, [pc, #480]	@ (8002488 <SRAM_operation+0x2d0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe f95d 	bl	8000568 <__aeabi_f2d>
 80022ae:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 80022b2:	4b76      	ldr	r3, [pc, #472]	@ (800248c <SRAM_operation+0x2d4>)
 80022b4:	899b      	ldrh	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 80022b8:	4b73      	ldr	r3, [pc, #460]	@ (8002488 <SRAM_operation+0x2d0>)
 80022ba:	69db      	ldr	r3, [r3, #28]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f953 	bl	8000568 <__aeabi_f2d>
 80022c2:	e9c7 0108 	strd	r0, r1, [r7, #32]
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 80022c6:	4b71      	ldr	r3, [pc, #452]	@ (800248c <SRAM_operation+0x2d4>)
 80022c8:	89db      	ldrh	r3, [r3, #14]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80022cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002488 <SRAM_operation+0x2d0>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f949 	bl	8000568 <__aeabi_f2d>
 80022d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80022da:	4b6c      	ldr	r3, [pc, #432]	@ (800248c <SRAM_operation+0x2d4>)
 80022dc:	8a1b      	ldrh	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022de:	617b      	str	r3, [r7, #20]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80022e0:	4b69      	ldr	r3, [pc, #420]	@ (8002488 <SRAM_operation+0x2d0>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f93f 	bl	8000568 <__aeabi_f2d>
 80022ea:	4682      	mov	sl, r0
 80022ec:	468b      	mov	fp, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80022ee:	4b67      	ldr	r3, [pc, #412]	@ (800248c <SRAM_operation+0x2d4>)
 80022f0:	8a5b      	ldrh	r3, [r3, #18]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022f2:	613b      	str	r3, [r7, #16]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 80022f4:	4b64      	ldr	r3, [pc, #400]	@ (8002488 <SRAM_operation+0x2d0>)
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f935 	bl	8000568 <__aeabi_f2d>
 80022fe:	4680      	mov	r8, r0
 8002300:	4689      	mov	r9, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8002302:	4b62      	ldr	r3, [pc, #392]	@ (800248c <SRAM_operation+0x2d4>)
 8002304:	8a9b      	ldrh	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002306:	60fb      	str	r3, [r7, #12]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8002308:	4b5f      	ldr	r3, [pc, #380]	@ (8002488 <SRAM_operation+0x2d0>)
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f92b 	bl	8000568 <__aeabi_f2d>
 8002312:	4604      	mov	r4, r0
 8002314:	460d      	mov	r5, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8002316:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <SRAM_operation+0x2d4>)
 8002318:	8adb      	ldrh	r3, [r3, #22]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800231a:	60bb      	str	r3, [r7, #8]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800231c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002320:	607b      	str	r3, [r7, #4]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 8002322:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002326:	461e      	mov	r6, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 8002328:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800232c:	4618      	mov	r0, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800232e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002332:	4619      	mov	r1, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 8002334:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002338:	461a      	mov	r2, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800233a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800233e:	9332      	str	r3, [sp, #200]	@ 0xc8
 8002340:	9231      	str	r2, [sp, #196]	@ 0xc4
 8002342:	9130      	str	r1, [sp, #192]	@ 0xc0
 8002344:	902f      	str	r0, [sp, #188]	@ 0xbc
 8002346:	962e      	str	r6, [sp, #184]	@ 0xb8
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	912d      	str	r1, [sp, #180]	@ 0xb4
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	912c      	str	r1, [sp, #176]	@ 0xb0
 8002350:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	9128      	str	r1, [sp, #160]	@ 0xa0
 8002358:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 800235c:	6939      	ldr	r1, [r7, #16]
 800235e:	9124      	str	r1, [sp, #144]	@ 0x90
 8002360:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
 8002364:	6979      	ldr	r1, [r7, #20]
 8002366:	9120      	str	r1, [sp, #128]	@ 0x80
 8002368:	ed97 7b06 	vldr	d7, [r7, #24]
 800236c:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8002370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002372:	911c      	str	r1, [sp, #112]	@ 0x70
 8002374:	ed97 7b08 	vldr	d7, [r7, #32]
 8002378:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 800237c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800237e:	9118      	str	r1, [sp, #96]	@ 0x60
 8002380:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002384:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8002388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800238a:	9114      	str	r1, [sp, #80]	@ 0x50
 800238c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002390:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8002394:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002396:	9110      	str	r1, [sp, #64]	@ 0x40
 8002398:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800239c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80023a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80023a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80023a4:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80023a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80023ac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80023ae:	9108      	str	r1, [sp, #32]
 80023b0:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80023b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023b8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80023ba:	9104      	str	r1, [sp, #16]
 80023bc:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80023c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80023c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80023cc:	4930      	ldr	r1, [pc, #192]	@ (8002490 <SRAM_operation+0x2d8>)
 80023ce:	482c      	ldr	r0, [pc, #176]	@ (8002480 <SRAM_operation+0x2c8>)
 80023d0:	f00d fcc2 	bl	800fd58 <siprintf>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <SRAM_operation+0x2cc>)
 80023da:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-3]=EoF;
 80023de:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <SRAM_operation+0x2cc>)
 80023e0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80023e4:	3b03      	subs	r3, #3
 80023e6:	4a27      	ldr	r2, [pc, #156]	@ (8002484 <SRAM_operation+0x2cc>)
 80023e8:	4413      	add	r3, r2
 80023ea:	2224      	movs	r2, #36	@ 0x24
 80023ec:	705a      	strb	r2, [r3, #1]

		// Write the buffer to SRAM
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 80023ee:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <SRAM_operation+0x2dc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <SRAM_operation+0x2cc>)
 80023f6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80023fa:	3301      	adds	r3, #1
 80023fc:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <SRAM_operation+0x2cc>)
 80023fe:	481b      	ldr	r0, [pc, #108]	@ (800246c <SRAM_operation+0x2b4>)
 8002400:	f00a fb20 	bl	800ca44 <HAL_SRAM_Write_8b>


		// Update SRAM location and size counter
		sram_location += ((SRAMopt.Idxcount)+1);
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <SRAM_operation+0x2cc>)
 8002406:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800240a:	461a      	mov	r2, r3
 800240c:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <SRAM_operation+0x2dc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4413      	add	r3, r2
 8002412:	3301      	adds	r3, #1
 8002414:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <SRAM_operation+0x2dc>)
 8002416:	6013      	str	r3, [r2, #0]
		size_counter  += ((SRAMopt.Idxcount)+1);
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <SRAM_operation+0x2cc>)
 800241a:	f8b3 2162 	ldrh.w	r2, [r3, #354]	@ 0x162
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <SRAM_operation+0x2e0>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	b29b      	uxth	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <SRAM_operation+0x2e0>)
 800242c:	801a      	strh	r2, [r3, #0]

#if 1
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2102      	movs	r1, #2
 8002432:	481a      	ldr	r0, [pc, #104]	@ (800249c <SRAM_operation+0x2e4>)
 8002434:	f002 fd0e 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2104      	movs	r1, #4
 800243c:	4817      	ldr	r0, [pc, #92]	@ (800249c <SRAM_operation+0x2e4>)
 800243e:	f002 fd09 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 8002442:	2201      	movs	r2, #1
 8002444:	2101      	movs	r1, #1
 8002446:	4815      	ldr	r0, [pc, #84]	@ (800249c <SRAM_operation+0x2e4>)
 8002448:	f002 fd04 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800244c:	2002      	movs	r0, #2
 800244e:	f002 f955 	bl	80046fc <HAL_Delay>
		HAL_UART_Transmit_IT(&huart8, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <SRAM_operation+0x2cc>)
 8002454:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8002458:	3301      	adds	r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4909      	ldr	r1, [pc, #36]	@ (8002484 <SRAM_operation+0x2cc>)
 8002460:	480f      	ldr	r0, [pc, #60]	@ (80024a0 <SRAM_operation+0x2e8>)
 8002462:	f00a fc21 	bl	800cca8 <HAL_UART_Transmit_IT>
 8002466:	e01d      	b.n	80024a4 <SRAM_operation+0x2ec>
 8002468:	20000018 	.word	0x20000018
 800246c:	20005a28 	.word	0x20005a28
 8002470:	2000001c 	.word	0x2000001c
 8002474:	20000020 	.word	0x20000020
 8002478:	200054c2 	.word	0x200054c2
 800247c:	42021000 	.word	0x42021000
 8002480:	200054c5 	.word	0x200054c5
 8002484:	200054c4 	.word	0x200054c4
 8002488:	20000290 	.word	0x20000290
 800248c:	200002c0 	.word	0x200002c0
 8002490:	08012210 	.word	0x08012210
 8002494:	20000004 	.word	0x20000004
 8002498:	200054c0 	.word	0x200054c0
 800249c:	42020000 	.word	0x42020000
 80024a0:	20005900 	.word	0x20005900
		HAL_UART_Transmit_IT(&huart10,(uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <SRAM_operation+0x398>)
 80024a6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80024aa:	3301      	adds	r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	4927      	ldr	r1, [pc, #156]	@ (8002550 <SRAM_operation+0x398>)
 80024b2:	4828      	ldr	r0, [pc, #160]	@ (8002554 <SRAM_operation+0x39c>)
 80024b4:	f00a fbf8 	bl	800cca8 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <SRAM_operation+0x398>)
 80024ba:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80024be:	3301      	adds	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	4922      	ldr	r1, [pc, #136]	@ (8002550 <SRAM_operation+0x398>)
 80024c6:	4824      	ldr	r0, [pc, #144]	@ (8002558 <SRAM_operation+0x3a0>)
 80024c8:	f00a fbee 	bl	800cca8 <HAL_UART_Transmit_IT>
//		HAL_UART_Transmit_IT(&huart5, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
		HAL_Delay(100);
 80024cc:	2064      	movs	r0, #100	@ 0x64
 80024ce:	f002 f915 	bl	80046fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2101      	movs	r1, #1
 80024d6:	4821      	ldr	r0, [pc, #132]	@ (800255c <SRAM_operation+0x3a4>)
 80024d8:	f002 fcbc 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 80024dc:	2200      	movs	r2, #0
 80024de:	2102      	movs	r1, #2
 80024e0:	481e      	ldr	r0, [pc, #120]	@ (800255c <SRAM_operation+0x3a4>)
 80024e2:	f002 fcb7 	bl	8004e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2104      	movs	r1, #4
 80024ea:	481c      	ldr	r0, [pc, #112]	@ (800255c <SRAM_operation+0x3a4>)
 80024ec:	f002 fcb2 	bl	8004e54 <HAL_GPIO_WritePin>
#endif

//		HAL_Delay(200); // remove after testing

		// Check if the buffer exceeds the NAND page size
		if (size_counter + ((SRAMopt.Idxcount)+1) > NAND_PAGE_SIZE) {
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <SRAM_operation+0x3a8>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <SRAM_operation+0x398>)
 80024f8:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80024fc:	3301      	adds	r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002504:	dd0f      	ble.n	8002526 <SRAM_operation+0x36e>
			sram_location = sram_base_location;
 8002506:	4b17      	ldr	r3, [pc, #92]	@ (8002564 <SRAM_operation+0x3ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <SRAM_operation+0x3b0>)
 800250c:	6013      	str	r3, [r2, #0]
			memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 800250e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002512:	2100      	movs	r1, #0
 8002514:	4815      	ldr	r0, [pc, #84]	@ (800256c <SRAM_operation+0x3b4>)
 8002516:	f00d fc82 	bl	800fe1e <memset>
			SRAMopt.Idxcount=0;
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <SRAM_operation+0x398>)
 800251c:	2200      	movs	r2, #0
 800251e:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
			NAND_operation();
 8002522:	f7ff fc7d 	bl	8001e20 <NAND_operation>
		}

		update_SRAM_Addr();   /*********** update the sram last address at location 0x6000000e ************/
 8002526:	f000 f8cd 	bl	80026c4 <update_SRAM_Addr>

		// Update old_sec to current second
		old_sec = time_data[0];
 800252a:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <SRAM_operation+0x3b8>)
 8002530:	701a      	strb	r2, [r3, #0]
	}

	// If time setting flag is set, call time_setter
	if (time_set) {
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <SRAM_operation+0x3bc>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <SRAM_operation+0x38c>
		time_set = 0;
 800253a:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <SRAM_operation+0x3bc>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
		time_setter();
 8002540:	f000 f914 	bl	800276c <time_setter>
	}
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	378c      	adds	r7, #140	@ 0x8c
 800254a:	46bd      	mov	sp, r7
 800254c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002550:	200054c4 	.word	0x200054c4
 8002554:	20005994 	.word	0x20005994
 8002558:	200057d8 	.word	0x200057d8
 800255c:	42020000 	.word	0x42020000
 8002560:	200054c0 	.word	0x200054c0
 8002564:	20000008 	.word	0x20000008
 8002568:	20000004 	.word	0x20000004
 800256c:	200054c5 	.word	0x200054c5
 8002570:	200054c2 	.word	0x200054c2
 8002574:	20005ae6 	.word	0x20005ae6

08002578 <get_NAND_data>:

/*
 * get_NAND_data
 * Reads a full page of data from SRAM into sram_data buffer and clears SRAM.
 */
void get_NAND_data(uint8_t *sram_data) {
 8002578:	b580      	push	{r7, lr}
 800257a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	3304      	adds	r3, #4
 8002594:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f00d fc3f 	bl	800fe1e <memset>
	// Read NAND page from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <get_NAND_data+0x7c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	461a      	mov	r2, r3
 80025ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025b0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80025b4:	4810      	ldr	r0, [pc, #64]	@ (80025f8 <get_NAND_data+0x80>)
 80025b6:	f00a f9eb 	bl	800c990 <HAL_SRAM_Read_8b>
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <get_NAND_data+0x7c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	461a      	mov	r2, r3
 80025c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ca:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80025ce:	480a      	ldr	r0, [pc, #40]	@ (80025f8 <get_NAND_data+0x80>)
 80025d0:	f00a f9de 	bl	800c990 <HAL_SRAM_Read_8b>
	// Clear the SRAM location
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <get_NAND_data+0x7c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f107 0208 	add.w	r2, r7, #8
 80025de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e2:	4805      	ldr	r0, [pc, #20]	@ (80025f8 <get_NAND_data+0x80>)
 80025e4:	f00a fa2e 	bl	800ca44 <HAL_SRAM_Write_8b>
}
 80025e8:	bf00      	nop
 80025ea:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000008 	.word	0x20000008
 80025f8:	20005a28 	.word	0x20005a28

080025fc <get_NAND_address>:

/*
 * get_NAND_address
 * Reads the current NAND address from SRAM.
 */
uint8_t get_NAND_address(void) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <get_NAND_address+0x48>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3308      	adds	r3, #8
 8002606:	4619      	mov	r1, r3
 8002608:	2306      	movs	r3, #6
 800260a:	4a0f      	ldr	r2, [pc, #60]	@ (8002648 <get_NAND_address+0x4c>)
 800260c:	480f      	ldr	r0, [pc, #60]	@ (800264c <get_NAND_address+0x50>)
 800260e:	f00a f9bf 	bl	800c990 <HAL_SRAM_Read_8b>
	if(nand_address.Page >= 128)
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <get_NAND_address+0x4c>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	2b7f      	cmp	r3, #127	@ 0x7f
 8002618:	d902      	bls.n	8002620 <get_NAND_address+0x24>
		nand_address.Page=0;
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <get_NAND_address+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	801a      	strh	r2, [r3, #0]
	if(nand_address.Block >= 4096)
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <get_NAND_address+0x4c>)
 8002622:	889b      	ldrh	r3, [r3, #4]
 8002624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002628:	d302      	bcc.n	8002630 <get_NAND_address+0x34>
		nand_address.Block=0;
 800262a:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <get_NAND_address+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	809a      	strh	r2, [r3, #4]
	if(nand_address.Plane > 2)
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <get_NAND_address+0x4c>)
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d902      	bls.n	800263e <get_NAND_address+0x42>
		nand_address.Plane=0;
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <get_NAND_address+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	805a      	strh	r2, [r3, #2]

	return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000000c 	.word	0x2000000c
 8002648:	200002f0 	.word	0x200002f0
 800264c:	20005a28 	.word	0x20005a28

08002650 <update_NAND_addr>:

/*
 * update_NAND_addr
 * Writes the current NAND address to SRAM.
 */
void update_NAND_addr() {
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <update_NAND_addr+0x1c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3308      	adds	r3, #8
 800265a:	4619      	mov	r1, r3
 800265c:	2306      	movs	r3, #6
 800265e:	4a04      	ldr	r2, [pc, #16]	@ (8002670 <update_NAND_addr+0x20>)
 8002660:	4804      	ldr	r0, [pc, #16]	@ (8002674 <update_NAND_addr+0x24>)
 8002662:	f00a f9ef 	bl	800ca44 <HAL_SRAM_Write_8b>
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000000c 	.word	0x2000000c
 8002670:	200002f0 	.word	0x200002f0
 8002674:	20005a28 	.word	0x20005a28

08002678 <update_NAND_CyclicAddr>:

/*
 * update_NAND_CyclicAddr
 * Writes the current nand_cyclic_run to SRAM.
 */
void update_NAND_CyclicAddr() {
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <update_NAND_CyclicAddr+0x18>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	2301      	movs	r3, #1
 8002684:	4a03      	ldr	r2, [pc, #12]	@ (8002694 <update_NAND_CyclicAddr+0x1c>)
 8002686:	4804      	ldr	r0, [pc, #16]	@ (8002698 <update_NAND_CyclicAddr+0x20>)
 8002688:	f00a f9dc 	bl	800ca44 <HAL_SRAM_Write_8b>
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000010 	.word	0x20000010
 8002694:	200054bd 	.word	0x200054bd
 8002698:	20005a28 	.word	0x20005a28

0800269c <get_NAND_CyclicAddr>:

/*
 * get_NAND_CyclicAddr
 * Reads the last nand_cyclic_run from SRAM.
 */
uint8_t get_NAND_CyclicAddr(void) {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <get_NAND_CyclicAddr+0x1c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	2301      	movs	r3, #1
 80026a8:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <get_NAND_CyclicAddr+0x20>)
 80026aa:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <get_NAND_CyclicAddr+0x24>)
 80026ac:	f00a f970 	bl	800c990 <HAL_SRAM_Read_8b>
	return nand_cyclic_run;
 80026b0:	4b02      	ldr	r3, [pc, #8]	@ (80026bc <get_NAND_CyclicAddr+0x20>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000010 	.word	0x20000010
 80026bc:	200054bd 	.word	0x200054bd
 80026c0:	20005a28 	.word	0x20005a28

080026c4 <update_SRAM_Addr>:

/*
 * update_SRAM_Addr
 * Writes the current size_counter to SRAM.
 */
void update_SRAM_Addr() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <update_SRAM_Addr+0x2c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	2302      	movs	r3, #2
 80026d0:	4a08      	ldr	r2, [pc, #32]	@ (80026f4 <update_SRAM_Addr+0x30>)
 80026d2:	4809      	ldr	r0, [pc, #36]	@ (80026f8 <update_SRAM_Addr+0x34>)
 80026d4:	f00a f9b6 	bl	800ca44 <HAL_SRAM_Write_8b>
	if (nand_update==1)
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <update_SRAM_Addr+0x38>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <update_SRAM_Addr+0x28>
	{
		nand_update=0;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <update_SRAM_Addr+0x38>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
		size_counter=0;
 80026e6:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <update_SRAM_Addr+0x30>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	801a      	strh	r2, [r3, #0]
	}
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000014 	.word	0x20000014
 80026f4:	200054c0 	.word	0x200054c0
 80026f8:	20005a28 	.word	0x20005a28
 80026fc:	200054bc 	.word	0x200054bc

08002700 <get_SRAM_Addr>:

/*
 * get_SRAM_Addr
 * Reads the last size_counter from SRAM.
 */
uint32_t get_SRAM_Addr(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	//	_sSRAM_LastAddr SRAM_LastAddr;
	uint32_t last_update_location = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
	//	memset(&SRAM_LastAddr,0,sizeof(SRAM_LastAddr));
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800270a:	4b14      	ldr	r3, [pc, #80]	@ (800275c <get_SRAM_Addr+0x5c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	2302      	movs	r3, #2
 8002712:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <get_SRAM_Addr+0x60>)
 8002714:	4813      	ldr	r0, [pc, #76]	@ (8002764 <get_SRAM_Addr+0x64>)
 8002716:	f00a f93b 	bl	800c990 <HAL_SRAM_Read_8b>

	if(size_counter==0){
 800271a:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <get_SRAM_Addr+0x60>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <get_SRAM_Addr+0x28>
		return sram_base_location;
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <get_SRAM_Addr+0x68>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e015      	b.n	8002754 <get_SRAM_Addr+0x54>
	}
	else if((size_counter+251) > NAND_PAGE_SIZE){
 8002728:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <get_SRAM_Addr+0x60>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f641 7205 	movw	r2, #7941	@ 0x1f05
 8002730:	4293      	cmp	r3, r2
 8002732:	d907      	bls.n	8002744 <get_SRAM_Addr+0x44>
		size_counter=0;
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <get_SRAM_Addr+0x60>)
 8002736:	2200      	movs	r2, #0
 8002738:	801a      	strh	r2, [r3, #0]
		update_SRAM_Addr();
 800273a:	f7ff ffc3 	bl	80026c4 <update_SRAM_Addr>
		return sram_base_location;
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <get_SRAM_Addr+0x68>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e007      	b.n	8002754 <get_SRAM_Addr+0x54>
	}
	else{
		last_update_location = (sram_base_location + size_counter);
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <get_SRAM_Addr+0x60>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <get_SRAM_Addr+0x68>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	607b      	str	r3, [r7, #4]
	}
	//	SRAM_LastAddr.sram_count= size_counter;
	//	SRAM_LastAddr.last_update_location = (sram_base_location + size_counter);

	return last_update_location;
 8002752:	687b      	ldr	r3, [r7, #4]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000014 	.word	0x20000014
 8002760:	200054c0 	.word	0x200054c0
 8002764:	20005a28 	.word	0x20005a28
 8002768:	20000008 	.word	0x20000008

0800276c <time_setter>:

/*
 * time_setter
 * Sets the time in SRAM using the format "SDD-MM-YYYY HH:MM:SS E".
 */
void time_setter() {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
	uint8_t day, month, year, hours, minutes, seconds;
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	@ D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  $
	// Parse the time string if it follows the expected format
	if (time_str[0] == '@' && time_str[20] == '$' &&
 8002772:	4b7b      	ldr	r3, [pc, #492]	@ (8002960 <time_setter+0x1f4>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b40      	cmp	r3, #64	@ 0x40
 8002778:	f040 80ed 	bne.w	8002956 <time_setter+0x1ea>
 800277c:	4b78      	ldr	r3, [pc, #480]	@ (8002960 <time_setter+0x1f4>)
 800277e:	7d1b      	ldrb	r3, [r3, #20]
 8002780:	2b24      	cmp	r3, #36	@ 0x24
 8002782:	f040 80e8 	bne.w	8002956 <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 8002786:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <time_setter+0x1f4>)
 8002788:	795b      	ldrb	r3, [r3, #5]
	if (time_str[0] == '@' && time_str[20] == '$' &&
 800278a:	2b2d      	cmp	r3, #45	@ 0x2d
 800278c:	f040 80e3 	bne.w	8002956 <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 8002790:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <time_setter+0x1f4>)
 8002792:	7a1b      	ldrb	r3, [r3, #8]
 8002794:	2b2d      	cmp	r3, #45	@ 0x2d
 8002796:	f040 80de 	bne.w	8002956 <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 800279a:	4b71      	ldr	r3, [pc, #452]	@ (8002960 <time_setter+0x1f4>)
 800279c:	7adb      	ldrb	r3, [r3, #11]
			time_str[5] == '-' && time_str[8] == '-' &&
 800279e:	2b20      	cmp	r3, #32
 80027a0:	f040 80d9 	bne.w	8002956 <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 80027a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002960 <time_setter+0x1f4>)
 80027a6:	7b9b      	ldrb	r3, [r3, #14]
 80027a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80027aa:	f040 80d4 	bne.w	8002956 <time_setter+0x1ea>
 80027ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002960 <time_setter+0x1f4>)
 80027b0:	7c5b      	ldrb	r3, [r3, #17]
 80027b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80027b4:	f040 80cf 	bne.w	8002956 <time_setter+0x1ea>

		// Extract date and time components from time_str
		month = (time_str[6] - '0') * 16 + (time_str[7] - '0');
 80027b8:	4b69      	ldr	r3, [pc, #420]	@ (8002960 <time_setter+0x1f4>)
 80027ba:	799b      	ldrb	r3, [r3, #6]
 80027bc:	3b30      	subs	r3, #48	@ 0x30
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <time_setter+0x1f4>)
 80027c6:	79db      	ldrb	r3, [r3, #7]
 80027c8:	4413      	add	r3, r2
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3b30      	subs	r3, #48	@ 0x30
 80027ce:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - '0') * 16 + (time_str[4] - '0');
 80027d0:	4b63      	ldr	r3, [pc, #396]	@ (8002960 <time_setter+0x1f4>)
 80027d2:	78db      	ldrb	r3, [r3, #3]
 80027d4:	3b30      	subs	r3, #48	@ 0x30
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b60      	ldr	r3, [pc, #384]	@ (8002960 <time_setter+0x1f4>)
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3b30      	subs	r3, #48	@ 0x30
 80027e6:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - '0') * 16 + (time_str[10] - '0');
 80027e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002960 <time_setter+0x1f4>)
 80027ea:	7a5b      	ldrb	r3, [r3, #9]
 80027ec:	3b30      	subs	r3, #48	@ 0x30
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002960 <time_setter+0x1f4>)
 80027f6:	7a9b      	ldrb	r3, [r3, #10]
 80027f8:	4413      	add	r3, r2
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3b30      	subs	r3, #48	@ 0x30
 80027fe:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - '0') * 16 + (time_str[16] - '0');
 8002800:	4b57      	ldr	r3, [pc, #348]	@ (8002960 <time_setter+0x1f4>)
 8002802:	7bdb      	ldrb	r3, [r3, #15]
 8002804:	3b30      	subs	r3, #48	@ 0x30
 8002806:	b2db      	uxtb	r3, r3
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b54      	ldr	r3, [pc, #336]	@ (8002960 <time_setter+0x1f4>)
 800280e:	7c1b      	ldrb	r3, [r3, #16]
 8002810:	4413      	add	r3, r2
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3b30      	subs	r3, #48	@ 0x30
 8002816:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - '0') * 16 + (time_str[13] - '0');
 8002818:	4b51      	ldr	r3, [pc, #324]	@ (8002960 <time_setter+0x1f4>)
 800281a:	7b1b      	ldrb	r3, [r3, #12]
 800281c:	3b30      	subs	r3, #48	@ 0x30
 800281e:	b2db      	uxtb	r3, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b4e      	ldr	r3, [pc, #312]	@ (8002960 <time_setter+0x1f4>)
 8002826:	7b5b      	ldrb	r3, [r3, #13]
 8002828:	4413      	add	r3, r2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3b30      	subs	r3, #48	@ 0x30
 800282e:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - '0') * 16 + (time_str[19] - '0');
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <time_setter+0x1f4>)
 8002832:	7c9b      	ldrb	r3, [r3, #18]
 8002834:	3b30      	subs	r3, #48	@ 0x30
 8002836:	b2db      	uxtb	r3, r3
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b48      	ldr	r3, [pc, #288]	@ (8002960 <time_setter+0x1f4>)
 800283e:	7cdb      	ldrb	r3, [r3, #19]
 8002840:	4413      	add	r3, r2
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3b30      	subs	r3, #48	@ 0x30
 8002846:	70bb      	strb	r3, [r7, #2]

		// Write time components to SRAM
		sramAddr = 0x60000000 | 0x7FFF8;
 8002848:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <time_setter+0x1f8>)
 800284a:	4a47      	ldr	r2, [pc, #284]	@ (8002968 <time_setter+0x1fc>)
 800284c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 800284e:	4b47      	ldr	r3, [pc, #284]	@ (800296c <time_setter+0x200>)
 8002850:	2280      	movs	r2, #128	@ 0x80
 8002852:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002854:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <time_setter+0x1f8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <time_setter+0x204>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a43      	ldr	r2, [pc, #268]	@ (800296c <time_setter+0x200>)
 8002860:	4844      	ldr	r0, [pc, #272]	@ (8002974 <time_setter+0x208>)
 8002862:	f00a f8ef 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF9;
 8002866:	4b3f      	ldr	r3, [pc, #252]	@ (8002964 <time_setter+0x1f8>)
 8002868:	4a43      	ldr	r2, [pc, #268]	@ (8002978 <time_setter+0x20c>)
 800286a:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 800286c:	4a3f      	ldr	r2, [pc, #252]	@ (800296c <time_setter+0x200>)
 800286e:	78bb      	ldrb	r3, [r7, #2]
 8002870:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002872:	4b3c      	ldr	r3, [pc, #240]	@ (8002964 <time_setter+0x1f8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4b3d      	ldr	r3, [pc, #244]	@ (8002970 <time_setter+0x204>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3b      	ldr	r2, [pc, #236]	@ (800296c <time_setter+0x200>)
 800287e:	483d      	ldr	r0, [pc, #244]	@ (8002974 <time_setter+0x208>)
 8002880:	f00a f8e0 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 8002884:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <time_setter+0x1f8>)
 8002886:	4a3d      	ldr	r2, [pc, #244]	@ (800297c <time_setter+0x210>)
 8002888:	601a      	str	r2, [r3, #0]
		pSrcBuffer = minutes;
 800288a:	4a38      	ldr	r2, [pc, #224]	@ (800296c <time_setter+0x200>)
 800288c:	793b      	ldrb	r3, [r7, #4]
 800288e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <time_setter+0x1f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <time_setter+0x204>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a34      	ldr	r2, [pc, #208]	@ (800296c <time_setter+0x200>)
 800289c:	4835      	ldr	r0, [pc, #212]	@ (8002974 <time_setter+0x208>)
 800289e:	f00a f8d1 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 80028a2:	4b30      	ldr	r3, [pc, #192]	@ (8002964 <time_setter+0x1f8>)
 80028a4:	4a36      	ldr	r2, [pc, #216]	@ (8002980 <time_setter+0x214>)
 80028a6:	601a      	str	r2, [r3, #0]
		pSrcBuffer = hours;
 80028a8:	4a30      	ldr	r2, [pc, #192]	@ (800296c <time_setter+0x200>)
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80028ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <time_setter+0x1f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <time_setter+0x204>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	@ (800296c <time_setter+0x200>)
 80028ba:	482e      	ldr	r0, [pc, #184]	@ (8002974 <time_setter+0x208>)
 80028bc:	f00a f8c2 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 80028c0:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <time_setter+0x1f8>)
 80028c2:	4a30      	ldr	r2, [pc, #192]	@ (8002984 <time_setter+0x218>)
 80028c4:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 80028c6:	4b29      	ldr	r3, [pc, #164]	@ (800296c <time_setter+0x200>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80028cc:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <time_setter+0x1f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <time_setter+0x204>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a25      	ldr	r2, [pc, #148]	@ (800296c <time_setter+0x200>)
 80028d8:	4826      	ldr	r0, [pc, #152]	@ (8002974 <time_setter+0x208>)
 80028da:	f00a f8b3 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 80028de:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <time_setter+0x1f8>)
 80028e0:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <time_setter+0x21c>)
 80028e2:	601a      	str	r2, [r3, #0]
		pSrcBuffer = day;
 80028e4:	4a21      	ldr	r2, [pc, #132]	@ (800296c <time_setter+0x200>)
 80028e6:	797b      	ldrb	r3, [r7, #5]
 80028e8:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <time_setter+0x1f8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <time_setter+0x204>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <time_setter+0x200>)
 80028f6:	481f      	ldr	r0, [pc, #124]	@ (8002974 <time_setter+0x208>)
 80028f8:	f00a f8a4 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <time_setter+0x1f8>)
 80028fe:	4a23      	ldr	r2, [pc, #140]	@ (800298c <time_setter+0x220>)
 8002900:	601a      	str	r2, [r3, #0]
		pSrcBuffer = month;
 8002902:	4a1a      	ldr	r2, [pc, #104]	@ (800296c <time_setter+0x200>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <time_setter+0x1f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <time_setter+0x204>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a16      	ldr	r2, [pc, #88]	@ (800296c <time_setter+0x200>)
 8002914:	4817      	ldr	r0, [pc, #92]	@ (8002974 <time_setter+0x208>)
 8002916:	f00a f895 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 800291a:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <time_setter+0x1f8>)
 800291c:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <time_setter+0x224>)
 800291e:	601a      	str	r2, [r3, #0]
		pSrcBuffer = year;
 8002920:	4a12      	ldr	r2, [pc, #72]	@ (800296c <time_setter+0x200>)
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <time_setter+0x1f8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <time_setter+0x204>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0e      	ldr	r2, [pc, #56]	@ (800296c <time_setter+0x200>)
 8002932:	4810      	ldr	r0, [pc, #64]	@ (8002974 <time_setter+0x208>)
 8002934:	f00a f886 	bl	800ca44 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF8;
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <time_setter+0x1f8>)
 800293a:	4a0b      	ldr	r2, [pc, #44]	@ (8002968 <time_setter+0x1fc>)
 800293c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 800293e:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <time_setter+0x200>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002944:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <time_setter+0x1f8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <time_setter+0x204>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <time_setter+0x200>)
 8002950:	4808      	ldr	r0, [pc, #32]	@ (8002974 <time_setter+0x208>)
 8002952:	f00a f877 	bl	800ca44 <HAL_SRAM_Write_8b>
	}
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20005ac4 	.word	0x20005ac4
 8002964:	20005ac0 	.word	0x20005ac0
 8002968:	6007fff8 	.word	0x6007fff8
 800296c:	20000021 	.word	0x20000021
 8002970:	20000024 	.word	0x20000024
 8002974:	20005a28 	.word	0x20005a28
 8002978:	6007fff9 	.word	0x6007fff9
 800297c:	6007fffa 	.word	0x6007fffa
 8002980:	6007fffb 	.word	0x6007fffb
 8002984:	6007fffc 	.word	0x6007fffc
 8002988:	6007fffd 	.word	0x6007fffd
 800298c:	6007fffe 	.word	0x6007fffe
 8002990:	6007ffff 	.word	0x6007ffff

08002994 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800299a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800299c:	f001 fdf0 	bl	8004580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80029a0:	f000 f852 	bl	8002a48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80029a4:	f000 fbd4 	bl	8003150 <MX_GPIO_Init>
	MX_FMC_Init();
 80029a8:	f000 fb06 	bl	8002fb8 <MX_FMC_Init>
	MX_SPI2_Init();
 80029ac:	f000 f8d0 	bl	8002b50 <MX_SPI2_Init>
	MX_SPI3_Init();
 80029b0:	f000 f924 	bl	8002bfc <MX_SPI3_Init>
	MX_SPI5_Init();
 80029b4:	f000 f978 	bl	8002ca8 <MX_SPI5_Init>
	MX_UART4_Init();
 80029b8:	f000 f9cc 	bl	8002d54 <MX_UART4_Init>
	MX_UART5_Init();
 80029bc:	f000 fa16 	bl	8002dec <MX_UART5_Init>
	MX_UART8_Init();
 80029c0:	f000 fa60 	bl	8002e84 <MX_UART8_Init>
	MX_USART10_UART_Init();
 80029c4:	f000 faac 	bl	8002f20 <MX_USART10_UART_Init>
	MX_ICACHE_Init();
 80029c8:	f000 f8ae 	bl	8002b28 <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */

	UART_InitAllHandlers();
 80029cc:	f000 fd70 	bl	80034b0 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <main+0x98>)
 80029d2:	4a17      	ldr	r2, [pc, #92]	@ (8002a30 <main+0x9c>)
 80029d4:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 80029d6:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <main+0xa0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80029dc:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <main+0x98>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	2301      	movs	r3, #1
 80029e4:	4a13      	ldr	r2, [pc, #76]	@ (8002a34 <main+0xa0>)
 80029e6:	4814      	ldr	r0, [pc, #80]	@ (8002a38 <main+0xa4>)
 80029e8:	f00a f82c 	bl	800ca44 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 80029ec:	4813      	ldr	r0, [pc, #76]	@ (8002a3c <main+0xa8>)
 80029ee:	f002 fb0f 	bl	8005010 <HAL_NAND_Reset>
	get_NAND_block_status();
 80029f2:	f7ff fa9b 	bl	8001f2c <get_NAND_block_status>
	get_NAND_address();
 80029f6:	f7ff fe01 	bl	80025fc <get_NAND_address>
	get_NAND_CyclicAddr();
 80029fa:	f7ff fe4f 	bl	800269c <get_NAND_CyclicAddr>
	sram_location = get_SRAM_Addr();
 80029fe:	f7ff fe7f 	bl	8002700 <get_SRAM_Addr>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4a0e      	ldr	r2, [pc, #56]	@ (8002a40 <main+0xac>)
 8002a06:	6013      	str	r3, [r2, #0]

	uint8_t SRAM_clean[8192] = {0};
 8002a08:	463b      	mov	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00d fa01 	bl	800fe1e <memset>
	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4808      	ldr	r0, [pc, #32]	@ (8002a44 <main+0xb0>)
 8002a22:	f002 fa17 	bl	8004e54 <HAL_GPIO_WritePin>
		}
#endif

#if 1

		ADC_operation();
 8002a26:	f7fe faab 	bl	8000f80 <ADC_operation>
 8002a2a:	e7fc      	b.n	8002a26 <main+0x92>
 8002a2c:	20005ac0 	.word	0x20005ac0
 8002a30:	6007fff8 	.word	0x6007fff8
 8002a34:	20000021 	.word	0x20000021
 8002a38:	20005a28 	.word	0x20005a28
 8002a3c:	20005a80 	.word	0x20005a80
 8002a40:	20000004 	.word	0x20000004
 8002a44:	42020000 	.word	0x42020000

08002a48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b09c      	sub	sp, #112	@ 0x70
 8002a4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a4e:	f107 0320 	add.w	r3, r7, #32
 8002a52:	2250      	movs	r2, #80	@ 0x50
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00d f9e1 	bl	800fe1e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
 8002a6c:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b20 <SystemClock_Config+0xd8>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <SystemClock_Config+0xd8>)
 8002a74:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002a78:	6113      	str	r3, [r2, #16]
 8002a7a:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <SystemClock_Config+0xd8>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002a86:	bf00      	nop
 8002a88:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <SystemClock_Config+0xd8>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d1f9      	bne.n	8002a88 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002aaa:	2350      	movs	r3, #80	@ 0x50
 8002aac:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002aba:	2308      	movs	r3, #8
 8002abc:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac6:	f107 0320 	add.w	r3, r7, #32
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 f92a 	bl	8005d24 <HAL_RCC_OscConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002ad6:	f000 ff5e 	bl	8003996 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ada:	231f      	movs	r3, #31
 8002adc:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	2105      	movs	r1, #5
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fd4b 	bl	8006594 <HAL_RCC_ClockConfig>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002b04:	f000 ff47 	bl	8003996 <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <SystemClock_Config+0xdc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <SystemClock_Config+0xdc>)
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3770      	adds	r7, #112	@ 0x70
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	44020800 	.word	0x44020800
 8002b24:	40022000 	.word	0x40022000

08002b28 <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f002 f9f5 	bl	8004f1c <HAL_ICACHE_ConfigAssociativityMode>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 8002b38:	f000 ff2d 	bl	8003996 <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 8002b3c:	f002 fa0e 	bl	8004f5c <HAL_ICACHE_Enable>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 8002b46:	f000 ff26 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002b54:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b56:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <MX_SPI2_Init+0xa8>)
 8002b58:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b5c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002b60:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b62:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b74:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b7a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b7e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b82:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002b8a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b98:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 8002b9e:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002bd4:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002be0:	4804      	ldr	r0, [pc, #16]	@ (8002bf4 <MX_SPI2_Init+0xa4>)
 8002be2:	f009 f86b 	bl	800bcbc <HAL_SPI_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 8002bec:	f000 fed3 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20005628 	.word	0x20005628
 8002bf8:	40003800 	.word	0x40003800

08002bfc <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002c00:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c02:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <MX_SPI3_Init+0xa8>)
 8002c04:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c0c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c14:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c16:	2207      	movs	r2, #7
 8002c18:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c26:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c2e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002c36:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c38:	4b19      	ldr	r3, [pc, #100]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c44:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c50:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c8c:	4804      	ldr	r0, [pc, #16]	@ (8002ca0 <MX_SPI3_Init+0xa4>)
 8002c8e:	f009 f815 	bl	800bcbc <HAL_SPI_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 8002c98:	f000 fe7d 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200056b8 	.word	0x200056b8
 8002ca4:	40003c00 	.word	0x40003c00

08002ca8 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cae:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <MX_SPI5_Init+0xa8>)
 8002cb0:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cb4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002cb8:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002cba:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cd2:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cd6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002cda:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002ce2:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d02:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d08:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d20:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002d2c:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002d38:	4804      	ldr	r0, [pc, #16]	@ (8002d4c <MX_SPI5_Init+0xa4>)
 8002d3a:	f008 ffbf 	bl	800bcbc <HAL_SPI_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 8002d44:	f000 fe27 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20005748 	.word	0x20005748
 8002d50:	44002000 	.word	0x44002000

08002d54 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002d58:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d5a:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <MX_UART4_Init+0x94>)
 8002d5c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002d5e:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d64:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d66:	4b1f      	ldr	r3, [pc, #124]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002d78:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7e:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d84:	4b17      	ldr	r3, [pc, #92]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d8a:	4b16      	ldr	r3, [pc, #88]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d96:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d9c:	4811      	ldr	r0, [pc, #68]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002d9e:	f009 fe95 	bl	800cacc <HAL_UART_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8002da8:	f000 fdf5 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dac:	2100      	movs	r1, #0
 8002dae:	480d      	ldr	r0, [pc, #52]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002db0:	f00c f831 	bl	800ee16 <HAL_UARTEx_SetTxFifoThreshold>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 8002dba:	f000 fdec 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4808      	ldr	r0, [pc, #32]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002dc2:	f00c f866 	bl	800ee92 <HAL_UARTEx_SetRxFifoThreshold>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 8002dcc:	f000 fde3 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002dd0:	4804      	ldr	r0, [pc, #16]	@ (8002de4 <MX_UART4_Init+0x90>)
 8002dd2:	f00b ffe7 	bl	800eda4 <HAL_UARTEx_DisableFifoMode>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8002ddc:	f000 fddb 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200057d8 	.word	0x200057d8
 8002de8:	40004c00 	.word	0x40004c00

08002dec <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8002df0:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002df2:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <MX_UART5_Init+0x94>)
 8002df4:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8002df6:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dfc:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e12:	220c      	movs	r2, #12
 8002e14:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e16:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e22:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e28:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e34:	4811      	ldr	r0, [pc, #68]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e36:	f009 fe49 	bl	800cacc <HAL_UART_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8002e40:	f000 fda9 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e44:	2100      	movs	r1, #0
 8002e46:	480d      	ldr	r0, [pc, #52]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e48:	f00b ffe5 	bl	800ee16 <HAL_UARTEx_SetTxFifoThreshold>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 8002e52:	f000 fda0 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e56:	2100      	movs	r1, #0
 8002e58:	4808      	ldr	r0, [pc, #32]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e5a:	f00c f81a 	bl	800ee92 <HAL_UARTEx_SetRxFifoThreshold>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 8002e64:	f000 fd97 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002e68:	4804      	ldr	r0, [pc, #16]	@ (8002e7c <MX_UART5_Init+0x90>)
 8002e6a:	f00b ff9b 	bl	800eda4 <HAL_UARTEx_DisableFifoMode>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 8002e74:	f000 fd8f 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	2000586c 	.word	0x2000586c
 8002e80:	40005000 	.word	0x40005000

08002e84 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002e8a:	4a24      	ldr	r2, [pc, #144]	@ (8002f1c <MX_UART8_Init+0x98>)
 8002e8c:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e94:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eba:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec6:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8002ecc:	4812      	ldr	r0, [pc, #72]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ece:	f009 fdfd 	bl	800cacc <HAL_UART_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8002ed8:	f000 fd5d 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002edc:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ee2:	f00b ff98 	bl	800ee16 <HAL_UARTEx_SetTxFifoThreshold>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 8002eec:	f000 fd53 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4809      	ldr	r0, [pc, #36]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002ef4:	f00b ffcd 	bl	800ee92 <HAL_UARTEx_SetRxFifoThreshold>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 8002efe:	f000 fd4a 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	@ (8002f18 <MX_UART8_Init+0x94>)
 8002f04:	f00b ff4e 	bl	800eda4 <HAL_UARTEx_DisableFifoMode>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 8002f0e:	f000 fd42 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20005900 	.word	0x20005900
 8002f1c:	40007c00 	.word	0x40007c00

08002f20 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 8002f24:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f26:	4a23      	ldr	r2, [pc, #140]	@ (8002fb4 <MX_USART10_UART_Init+0x94>)
 8002f28:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 8002f2a:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f30:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002f32:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f46:	220c      	movs	r2, #12
 8002f48:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f50:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f62:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 8002f68:	4811      	ldr	r0, [pc, #68]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f6a:	f009 fdaf 	bl	800cacc <HAL_UART_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 8002f74:	f000 fd0f 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f78:	2100      	movs	r1, #0
 8002f7a:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f7c:	f00b ff4b 	bl	800ee16 <HAL_UARTEx_SetTxFifoThreshold>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 8002f86:	f000 fd06 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4808      	ldr	r0, [pc, #32]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f8e:	f00b ff80 	bl	800ee92 <HAL_UARTEx_SetRxFifoThreshold>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 8002f98:	f000 fcfd 	bl	8003996 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002f9c:	4804      	ldr	r0, [pc, #16]	@ (8002fb0 <MX_USART10_UART_Init+0x90>)
 8002f9e:	f00b ff01 	bl	800eda4 <HAL_UARTEx_DisableFifoMode>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 8002fa8:	f000 fcf5 	bl	8003996 <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20005994 	.word	0x20005994
 8002fb4:	40006800 	.word	0x40006800

08002fb8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b090      	sub	sp, #64	@ 0x40
 8002fbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002fbe:	f107 0320 	add.w	r3, r7, #32
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f00c ff29 	bl	800fe1e <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8002fda:	463b      	mov	r3, r7
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002fe6:	4b55      	ldr	r3, [pc, #340]	@ (800313c <MX_FMC_Init+0x184>)
 8002fe8:	4a55      	ldr	r2, [pc, #340]	@ (8003140 <MX_FMC_Init+0x188>)
 8002fea:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002fec:	4b53      	ldr	r3, [pc, #332]	@ (800313c <MX_FMC_Init+0x184>)
 8002fee:	4a55      	ldr	r2, [pc, #340]	@ (8003144 <MX_FMC_Init+0x18c>)
 8002ff0:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002ff2:	4b52      	ldr	r3, [pc, #328]	@ (800313c <MX_FMC_Init+0x184>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002ff8:	4b50      	ldr	r3, [pc, #320]	@ (800313c <MX_FMC_Init+0x184>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800313c <MX_FMC_Init+0x184>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003004:	4b4d      	ldr	r3, [pc, #308]	@ (800313c <MX_FMC_Init+0x184>)
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800300a:	4b4c      	ldr	r3, [pc, #304]	@ (800313c <MX_FMC_Init+0x184>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003010:	4b4a      	ldr	r3, [pc, #296]	@ (800313c <MX_FMC_Init+0x184>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003016:	4b49      	ldr	r3, [pc, #292]	@ (800313c <MX_FMC_Init+0x184>)
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800301c:	4b47      	ldr	r3, [pc, #284]	@ (800313c <MX_FMC_Init+0x184>)
 800301e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003024:	4b45      	ldr	r3, [pc, #276]	@ (800313c <MX_FMC_Init+0x184>)
 8003026:	2200      	movs	r2, #0
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800302a:	4b44      	ldr	r3, [pc, #272]	@ (800313c <MX_FMC_Init+0x184>)
 800302c:	2200      	movs	r2, #0
 800302e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003030:	4b42      	ldr	r3, [pc, #264]	@ (800313c <MX_FMC_Init+0x184>)
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003036:	4b41      	ldr	r3, [pc, #260]	@ (800313c <MX_FMC_Init+0x184>)
 8003038:	2200      	movs	r2, #0
 800303a:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800303c:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <MX_FMC_Init+0x184>)
 800303e:	2200      	movs	r2, #0
 8003040:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003042:	4b3e      	ldr	r3, [pc, #248]	@ (800313c <MX_FMC_Init+0x184>)
 8003044:	2200      	movs	r2, #0
 8003046:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 8003048:	4b3c      	ldr	r3, [pc, #240]	@ (800313c <MX_FMC_Init+0x184>)
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800304e:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <MX_FMC_Init+0x184>)
 8003050:	2200      	movs	r2, #0
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 8003054:	4b39      	ldr	r3, [pc, #228]	@ (800313c <MX_FMC_Init+0x184>)
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 800305c:	230f      	movs	r3, #15
 800305e:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 8003060:	230f      	movs	r3, #15
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 8003064:	23ff      	movs	r3, #255	@ 0xff
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 8003068:	2303      	movs	r3, #3
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 800306c:	230f      	movs	r3, #15
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 8003070:	2310      	movs	r3, #16
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 8003074:	2311      	movs	r3, #17
 8003076:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003078:	2300      	movs	r3, #0
 800307a:	63fb      	str	r3, [r7, #60]	@ 0x3c
//	Timing.DataLatency = 0;          // Not applicable for asynchronous SRAM
//	Timing.AccessMode = FMC_ACCESS_MODE_A;

	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800307c:	f107 0320 	add.w	r3, r7, #32
 8003080:	2200      	movs	r2, #0
 8003082:	4619      	mov	r1, r3
 8003084:	482d      	ldr	r0, [pc, #180]	@ (800313c <MX_FMC_Init+0x184>)
 8003086:	f009 fc33 	bl	800c8f0 <HAL_SRAM_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 8003090:	f000 fc81 	bl	8003996 <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 8003094:	4b2c      	ldr	r3, [pc, #176]	@ (8003148 <MX_FMC_Init+0x190>)
 8003096:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <MX_FMC_Init+0x194>)
 8003098:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 800309a:	4b2b      	ldr	r3, [pc, #172]	@ (8003148 <MX_FMC_Init+0x190>)
 800309c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030a0:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <MX_FMC_Init+0x190>)
 80030a4:	2202      	movs	r2, #2
 80030a6:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80030a8:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <MX_FMC_Init+0x190>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <MX_FMC_Init+0x190>)
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 80030b4:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <MX_FMC_Init+0x190>)
 80030b6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80030ba:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 80030bc:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <MX_FMC_Init+0x190>)
 80030be:	220f      	movs	r2, #15
 80030c0:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 80030c2:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <MX_FMC_Init+0x190>)
 80030c4:	220f      	movs	r2, #15
 80030c6:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <MX_FMC_Init+0x190>)
 80030ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 80030d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003148 <MX_FMC_Init+0x190>)
 80030d2:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 80030d6:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <MX_FMC_Init+0x190>)
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 80030de:	4b1a      	ldr	r3, [pc, #104]	@ (8003148 <MX_FMC_Init+0x190>)
 80030e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 80030e6:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <MX_FMC_Init+0x190>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 80030ec:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <MX_FMC_Init+0x190>)
 80030ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = ENABLE;
 80030f4:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <MX_FMC_Init+0x190>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 80030fc:	2313      	movs	r3, #19
 80030fe:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 8003100:	2313      	movs	r3, #19
 8003102:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 8003104:	2306      	movs	r3, #6
 8003106:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 8003108:	2303      	movs	r3, #3
 800310a:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 800310c:	2313      	movs	r3, #19
 800310e:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 8003110:	2313      	movs	r3, #19
 8003112:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 8003114:	230a      	movs	r3, #10
 8003116:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 8003118:	2309      	movs	r3, #9
 800311a:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800311c:	463a      	mov	r2, r7
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	4619      	mov	r1, r3
 8003124:	4808      	ldr	r0, [pc, #32]	@ (8003148 <MX_FMC_Init+0x190>)
 8003126:	f001 ff29 	bl	8004f7c <HAL_NAND_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 8003130:	f000 fc31 	bl	8003996 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8003134:	bf00      	nop
 8003136:	3740      	adds	r7, #64	@ 0x40
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20005a28 	.word	0x20005a28
 8003140:	47000400 	.word	0x47000400
 8003144:	47000504 	.word	0x47000504
 8003148:	20005a80 	.word	0x20005a80
 800314c:	47000480 	.word	0x47000480

08003150 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08e      	sub	sp, #56	@ 0x38
 8003154:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003166:	4bc2      	ldr	r3, [pc, #776]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800316c:	4ac0      	ldr	r2, [pc, #768]	@ (8003470 <MX_GPIO_Init+0x320>)
 800316e:	f043 0310 	orr.w	r3, r3, #16
 8003172:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003176:	4bbe      	ldr	r3, [pc, #760]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003184:	4bba      	ldr	r3, [pc, #744]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800318a:	4ab9      	ldr	r2, [pc, #740]	@ (8003470 <MX_GPIO_Init+0x320>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003194:	4bb6      	ldr	r3, [pc, #728]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80031a2:	4bb3      	ldr	r3, [pc, #716]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a8:	4ab1      	ldr	r2, [pc, #708]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031aa:	f043 0320 	orr.w	r3, r3, #32
 80031ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031b2:	4baf      	ldr	r3, [pc, #700]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80031c0:	4bab      	ldr	r3, [pc, #684]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c6:	4aaa      	ldr	r2, [pc, #680]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031d0:	4ba7      	ldr	r3, [pc, #668]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	4ba4      	ldr	r3, [pc, #656]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e4:	4aa2      	ldr	r2, [pc, #648]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003470 <MX_GPIO_Init+0x320>)
 80031fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003202:	4a9b      	ldr	r2, [pc, #620]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800320c:	4b98      	ldr	r3, [pc, #608]	@ (8003470 <MX_GPIO_Init+0x320>)
 800320e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800321a:	4b95      	ldr	r3, [pc, #596]	@ (8003470 <MX_GPIO_Init+0x320>)
 800321c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003220:	4a93      	ldr	r2, [pc, #588]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003226:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800322a:	4b91      	ldr	r3, [pc, #580]	@ (8003470 <MX_GPIO_Init+0x320>)
 800322c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003238:	4b8d      	ldr	r3, [pc, #564]	@ (8003470 <MX_GPIO_Init+0x320>)
 800323a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800323e:	4a8c      	ldr	r2, [pc, #560]	@ (8003470 <MX_GPIO_Init+0x320>)
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003248:	4b89      	ldr	r3, [pc, #548]	@ (8003470 <MX_GPIO_Init+0x320>)
 800324a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 800325c:	4885      	ldr	r0, [pc, #532]	@ (8003474 <MX_GPIO_Init+0x324>)
 800325e:	f001 fdf9 	bl	8004e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	2104      	movs	r1, #4
 8003266:	4884      	ldr	r0, [pc, #528]	@ (8003478 <MX_GPIO_Init+0x328>)
 8003268:	f001 fdf4 	bl	8004e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 800326c:	2200      	movs	r2, #0
 800326e:	f241 4167 	movw	r1, #5223	@ 0x1467
 8003272:	4882      	ldr	r0, [pc, #520]	@ (800347c <MX_GPIO_Init+0x32c>)
 8003274:	f001 fdee 	bl	8004e54 <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	f640 0103 	movw	r1, #2051	@ 0x803
 800327e:	4880      	ldr	r0, [pc, #512]	@ (8003480 <MX_GPIO_Init+0x330>)
 8003280:	f001 fde8 	bl	8004e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8003284:	2200      	movs	r2, #0
 8003286:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800328a:	487e      	ldr	r0, [pc, #504]	@ (8003484 <MX_GPIO_Init+0x334>)
 800328c:	f001 fde2 	bl	8004e54 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003290:	2201      	movs	r2, #1
 8003292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003296:	487a      	ldr	r0, [pc, #488]	@ (8003480 <MX_GPIO_Init+0x330>)
 8003298:	f001 fddc 	bl	8004e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 800329c:	2200      	movs	r2, #0
 800329e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80032a2:	4879      	ldr	r0, [pc, #484]	@ (8003488 <MX_GPIO_Init+0x338>)
 80032a4:	f001 fdd6 	bl	8004e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2110      	movs	r1, #16
 80032ac:	4877      	ldr	r0, [pc, #476]	@ (800348c <MX_GPIO_Init+0x33c>)
 80032ae:	f001 fdd1 	bl	8004e54 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 80032b2:	2370      	movs	r3, #112	@ 0x70
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c2:	4619      	mov	r1, r3
 80032c4:	486f      	ldr	r0, [pc, #444]	@ (8003484 <MX_GPIO_Init+0x334>)
 80032c6:	f001 fc73 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 80032ca:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e0:	4619      	mov	r1, r3
 80032e2:	4864      	ldr	r0, [pc, #400]	@ (8003474 <MX_GPIO_Init+0x324>)
 80032e4:	f001 fc64 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 80032e8:	2302      	movs	r3, #2
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032ec:	4b68      	ldr	r3, [pc, #416]	@ (8003490 <MX_GPIO_Init+0x340>)
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 80032f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f8:	4619      	mov	r1, r3
 80032fa:	485f      	ldr	r0, [pc, #380]	@ (8003478 <MX_GPIO_Init+0x328>)
 80032fc:	f001 fc58 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 8003300:	2304      	movs	r3, #4
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	2301      	movs	r3, #1
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330c:	2303      	movs	r3, #3
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8003310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	4858      	ldr	r0, [pc, #352]	@ (8003478 <MX_GPIO_Init+0x328>)
 8003318:	f001 fc4a 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 800331c:	2367      	movs	r3, #103	@ 0x67
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	2301      	movs	r3, #1
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003330:	4619      	mov	r1, r3
 8003332:	4852      	ldr	r0, [pc, #328]	@ (800347c <MX_GPIO_Init+0x32c>)
 8003334:	f001 fc3c 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 8003338:	2303      	movs	r3, #3
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333c:	2301      	movs	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2300      	movs	r3, #0
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800334c:	4619      	mov	r1, r3
 800334e:	484c      	ldr	r0, [pc, #304]	@ (8003480 <MX_GPIO_Init+0x330>)
 8003350:	f001 fc2e 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 8003354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335a:	2301      	movs	r3, #1
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800336a:	4619      	mov	r1, r3
 800336c:	4841      	ldr	r0, [pc, #260]	@ (8003474 <MX_GPIO_Init+0x324>)
 800336e:	f001 fc1f 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8003372:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003378:	2301      	movs	r3, #1
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003388:	4619      	mov	r1, r3
 800338a:	483e      	ldr	r0, [pc, #248]	@ (8003484 <MX_GPIO_Init+0x334>)
 800338c:	f001 fc10 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8003390:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	2301      	movs	r3, #1
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a6:	4619      	mov	r1, r3
 80033a8:	4835      	ldr	r0, [pc, #212]	@ (8003480 <MX_GPIO_Init+0x330>)
 80033aa:	f001 fc01 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 80033ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b4:	2301      	movs	r3, #1
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c4:	4619      	mov	r1, r3
 80033c6:	4830      	ldr	r0, [pc, #192]	@ (8003488 <MX_GPIO_Init+0x338>)
 80033c8:	f001 fbf2 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003490 <MX_GPIO_Init+0x340>)
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	482a      	ldr	r0, [pc, #168]	@ (8003488 <MX_GPIO_Init+0x338>)
 80033e0:	f001 fbe6 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 80033e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ea:	2301      	movs	r3, #1
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f2:	2303      	movs	r3, #3
 80033f4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	481f      	ldr	r0, [pc, #124]	@ (800347c <MX_GPIO_Init+0x32c>)
 80033fe:	f001 fbd7 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 8003402:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003408:	4b21      	ldr	r3, [pc, #132]	@ (8003490 <MX_GPIO_Init+0x340>)
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8003410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	4819      	ldr	r0, [pc, #100]	@ (800347c <MX_GPIO_Init+0x32c>)
 8003418:	f001 fbca 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 800341c:	230c      	movs	r3, #12
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342c:	4619      	mov	r1, r3
 800342e:	4817      	ldr	r0, [pc, #92]	@ (800348c <MX_GPIO_Init+0x33c>)
 8003430:	f001 fbbe 	bl	8004bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 8003434:	2310      	movs	r3, #16
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	2301      	movs	r3, #1
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 8003444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003448:	4619      	mov	r1, r3
 800344a:	4810      	ldr	r0, [pc, #64]	@ (800348c <MX_GPIO_Init+0x33c>)
 800344c:	f001 fbb0 	bl	8004bb0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	200c      	movs	r0, #12
 8003456:	f001 fa2d 	bl	80048b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800345a:	200c      	movs	r0, #12
 800345c:	f001 fa44 	bl	80048e8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	2012      	movs	r0, #18
 8003466:	f001 fa25 	bl	80048b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 800346a:	2012      	movs	r0, #18
 800346c:	e012      	b.n	8003494 <MX_GPIO_Init+0x344>
 800346e:	bf00      	nop
 8003470:	44020c00 	.word	0x44020c00
 8003474:	42021400 	.word	0x42021400
 8003478:	42020800 	.word	0x42020800
 800347c:	42020000 	.word	0x42020000
 8003480:	42020400 	.word	0x42020400
 8003484:	42021000 	.word	0x42021000
 8003488:	42021800 	.word	0x42021800
 800348c:	42020c00 	.word	0x42020c00
 8003490:	10210000 	.word	0x10210000
 8003494:	f001 fa28 	bl	80048e8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	2016      	movs	r0, #22
 800349e:	f001 fa09 	bl	80048b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 80034a2:	2016      	movs	r0, #22
 80034a4:	f001 fa20 	bl	80048e8 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80034a8:	bf00      	nop
 80034aa:	3738      	adds	r7, #56	@ 0x38
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */


void UART_InitAllHandlers(void) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 80034b4:	2201      	movs	r2, #1
 80034b6:	490a      	ldr	r1, [pc, #40]	@ (80034e0 <UART_InitAllHandlers+0x30>)
 80034b8:	480a      	ldr	r0, [pc, #40]	@ (80034e4 <UART_InitAllHandlers+0x34>)
 80034ba:	f009 fc99 	bl	800cdf0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 80034be:	2201      	movs	r2, #1
 80034c0:	4909      	ldr	r1, [pc, #36]	@ (80034e8 <UART_InitAllHandlers+0x38>)
 80034c2:	480a      	ldr	r0, [pc, #40]	@ (80034ec <UART_InitAllHandlers+0x3c>)
 80034c4:	f009 fc94 	bl	800cdf0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], sizeof(uart3_rx_buffer));
 80034c8:	2201      	movs	r2, #1
 80034ca:	4909      	ldr	r1, [pc, #36]	@ (80034f0 <UART_InitAllHandlers+0x40>)
 80034cc:	4809      	ldr	r0, [pc, #36]	@ (80034f4 <UART_InitAllHandlers+0x44>)
 80034ce:	f009 fc8f 	bl	800cdf0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 80034d2:	2201      	movs	r2, #1
 80034d4:	4908      	ldr	r1, [pc, #32]	@ (80034f8 <UART_InitAllHandlers+0x48>)
 80034d6:	4809      	ldr	r0, [pc, #36]	@ (80034fc <UART_InitAllHandlers+0x4c>)
 80034d8:	f009 fc8a 	bl	800cdf0 <HAL_UART_Receive_IT>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20005ae0 	.word	0x20005ae0
 80034e4:	200057d8 	.word	0x200057d8
 80034e8:	20005ae4 	.word	0x20005ae4
 80034ec:	20005900 	.word	0x20005900
 80034f0:	20005ae8 	.word	0x20005ae8
 80034f4:	2000586c 	.word	0x2000586c
 80034f8:	20005aec 	.word	0x20005aec
 80034fc:	20005994 	.word	0x20005994

08003500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a9b      	ldr	r2, [pc, #620]	@ (800377c <HAL_UART_RxCpltCallback+0x27c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d169      	bne.n	80035e6 <HAL_UART_RxCpltCallback+0xe6>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 8003512:	2201      	movs	r2, #1
 8003514:	499a      	ldr	r1, [pc, #616]	@ (8003780 <HAL_UART_RxCpltCallback+0x280>)
 8003516:	489b      	ldr	r0, [pc, #620]	@ (8003784 <HAL_UART_RxCpltCallback+0x284>)
 8003518:	f009 fc6a 	bl	800cdf0 <HAL_UART_Receive_IT>

		if(uart1_rx_buffer[0] == '#')//T
 800351c:	4b98      	ldr	r3, [pc, #608]	@ (8003780 <HAL_UART_RxCpltCallback+0x280>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b23      	cmp	r3, #35	@ 0x23
 8003522:	d10e      	bne.n	8003542 <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 8003524:	4b98      	ldr	r3, [pc, #608]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	b2d1      	uxtb	r1, r2
 800352c:	4a96      	ldr	r2, [pc, #600]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 800352e:	7011      	strb	r1, [r2, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b93      	ldr	r3, [pc, #588]	@ (8003780 <HAL_UART_RxCpltCallback+0x280>)
 8003534:	7819      	ldrb	r1, [r3, #0]
 8003536:	4b95      	ldr	r3, [pc, #596]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003538:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800353a:	4b95      	ldr	r3, [pc, #596]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e018      	b.n	8003574 <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 8003542:	4b93      	ldr	r3, [pc, #588]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d114      	bne.n	8003574 <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 800354a:	4b8f      	ldr	r3, [pc, #572]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	b2d1      	uxtb	r1, r2
 8003552:	4a8d      	ldr	r2, [pc, #564]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003554:	7011      	strb	r1, [r2, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b89      	ldr	r3, [pc, #548]	@ (8003780 <HAL_UART_RxCpltCallback+0x280>)
 800355a:	7819      	ldrb	r1, [r3, #0]
 800355c:	4b8b      	ldr	r3, [pc, #556]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 800355e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003560:	4b89      	ldr	r3, [pc, #548]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d905      	bls.n	8003574 <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 8003568:	4b87      	ldr	r3, [pc, #540]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800356e:	4b88      	ldr	r3, [pc, #544]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer[0] == '$')
 8003574:	4b86      	ldr	r3, [pc, #536]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	f040 81e8 	bne.w	800394e <HAL_UART_RxCpltCallback+0x44e>
 800357e:	4b80      	ldr	r3, [pc, #512]	@ (8003780 <HAL_UART_RxCpltCallback+0x280>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b24      	cmp	r3, #36	@ 0x24
 8003584:	f040 81e3 	bne.w	800394e <HAL_UART_RxCpltCallback+0x44e>
		{
			if(command_str[command_str_index-1] == '$')
 8003588:	4b7f      	ldr	r3, [pc, #508]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	3b01      	subs	r3, #1
 800358e:	4a7f      	ldr	r2, [pc, #508]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
 8003592:	2b24      	cmp	r3, #36	@ 0x24
 8003594:	d109      	bne.n	80035aa <HAL_UART_RxCpltCallback+0xaa>
			{
				ATP_test  = 1;
 8003596:	4b7f      	ldr	r3, [pc, #508]	@ (8003794 <HAL_UART_RxCpltCallback+0x294>)
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 800359c:	4b7a      	ldr	r3, [pc, #488]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80035a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
			}
		}
	}

}
 80035a8:	e1d1      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='9'))
 80035aa:	4b78      	ldr	r3, [pc, #480]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b32      	cmp	r3, #50	@ 0x32
 80035b0:	d10d      	bne.n	80035ce <HAL_UART_RxCpltCallback+0xce>
 80035b2:	4b76      	ldr	r3, [pc, #472]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 80035b4:	789b      	ldrb	r3, [r3, #2]
 80035b6:	2b39      	cmp	r3, #57	@ 0x39
 80035b8:	d109      	bne.n	80035ce <HAL_UART_RxCpltCallback+0xce>
				ATP_test  = 1;
 80035ba:	4b76      	ldr	r3, [pc, #472]	@ (8003794 <HAL_UART_RxCpltCallback+0x294>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80035c0:	4b71      	ldr	r3, [pc, #452]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80035c6:	4b72      	ldr	r3, [pc, #456]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e1bf      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 80035ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80035d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80035da:	220f      	movs	r2, #15
 80035dc:	2100      	movs	r1, #0
 80035de:	486b      	ldr	r0, [pc, #428]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 80035e0:	f00c fc1d 	bl	800fe1e <memset>
}
 80035e4:	e1b3      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == UART5) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003798 <HAL_UART_RxCpltCallback+0x298>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	f040 80e3 	bne.w	80037b8 <HAL_UART_RxCpltCallback+0x2b8>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], 1);
 80035f2:	2201      	movs	r2, #1
 80035f4:	4969      	ldr	r1, [pc, #420]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 80035f6:	486a      	ldr	r0, [pc, #424]	@ (80037a0 <HAL_UART_RxCpltCallback+0x2a0>)
 80035f8:	f009 fbfa 	bl	800cdf0 <HAL_UART_Receive_IT>
		if(uart3_rx_buffer[0] == '@' )//S
 80035fc:	4b67      	ldr	r3, [pc, #412]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b40      	cmp	r3, #64	@ 0x40
 8003602:	d111      	bne.n	8003628 <HAL_UART_RxCpltCallback+0x128>
			time_str_length=0;
 8003604:	4b67      	ldr	r3, [pc, #412]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer[0];
 800360a:	4b66      	ldr	r3, [pc, #408]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	b2d1      	uxtb	r1, r2
 8003612:	4a64      	ldr	r2, [pc, #400]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 8003614:	7011      	strb	r1, [r2, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	4b60      	ldr	r3, [pc, #384]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 800361a:	7819      	ldrb	r1, [r3, #0]
 800361c:	4b62      	ldr	r3, [pc, #392]	@ (80037a8 <HAL_UART_RxCpltCallback+0x2a8>)
 800361e:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 8003620:	4b62      	ldr	r3, [pc, #392]	@ (80037ac <HAL_UART_RxCpltCallback+0x2ac>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e018      	b.n	800365a <HAL_UART_RxCpltCallback+0x15a>
		else if(time_rcv==1)
 8003628:	4b60      	ldr	r3, [pc, #384]	@ (80037ac <HAL_UART_RxCpltCallback+0x2ac>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d114      	bne.n	800365a <HAL_UART_RxCpltCallback+0x15a>
			time_str[time_str_length++] = uart3_rx_buffer[0];
 8003630:	4b5c      	ldr	r3, [pc, #368]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	b2d1      	uxtb	r1, r2
 8003638:	4a5a      	ldr	r2, [pc, #360]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 800363a:	7011      	strb	r1, [r2, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b57      	ldr	r3, [pc, #348]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 8003640:	7819      	ldrb	r1, [r3, #0]
 8003642:	4b59      	ldr	r3, [pc, #356]	@ (80037a8 <HAL_UART_RxCpltCallback+0x2a8>)
 8003644:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 8003646:	4b57      	ldr	r3, [pc, #348]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b16      	cmp	r3, #22
 800364c:	d905      	bls.n	800365a <HAL_UART_RxCpltCallback+0x15a>
				time_str_length = 0 ;
 800364e:	4b55      	ldr	r3, [pc, #340]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 8003654:	4b55      	ldr	r3, [pc, #340]	@ (80037ac <HAL_UART_RxCpltCallback+0x2ac>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer[0] == '$' )//E
 800365a:	4b50      	ldr	r3, [pc, #320]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b24      	cmp	r3, #36	@ 0x24
 8003660:	d112      	bne.n	8003688 <HAL_UART_RxCpltCallback+0x188>
			if(time_str_length == 21)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b15      	cmp	r3, #21
 8003668:	d103      	bne.n	8003672 <HAL_UART_RxCpltCallback+0x172>
				time_set = 1;
 800366a:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_UART_RxCpltCallback+0x2b0>)
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e00a      	b.n	8003688 <HAL_UART_RxCpltCallback+0x188>
				time_rcv = 0 ;
 8003672:	4b4e      	ldr	r3, [pc, #312]	@ (80037ac <HAL_UART_RxCpltCallback+0x2ac>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 8003678:	4b4a      	ldr	r3, [pc, #296]	@ (80037a4 <HAL_UART_RxCpltCallback+0x2a4>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 800367e:	2219      	movs	r2, #25
 8003680:	2100      	movs	r1, #0
 8003682:	4849      	ldr	r0, [pc, #292]	@ (80037a8 <HAL_UART_RxCpltCallback+0x2a8>)
 8003684:	f00c fbcb 	bl	800fe1e <memset>
		if(uart3_rx_buffer[0] == '#')//T
 8003688:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b23      	cmp	r3, #35	@ 0x23
 800368e:	d10e      	bne.n	80036ae <HAL_UART_RxCpltCallback+0x1ae>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 8003690:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	b2d1      	uxtb	r1, r2
 8003698:	4a3b      	ldr	r2, [pc, #236]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 800369a:	7011      	strb	r1, [r2, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b3f      	ldr	r3, [pc, #252]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 80036a0:	7819      	ldrb	r1, [r3, #0]
 80036a2:	4b3a      	ldr	r3, [pc, #232]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 80036a4:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80036a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e018      	b.n	80036e0 <HAL_UART_RxCpltCallback+0x1e0>
		else if(command_rcv==1)
 80036ae:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d114      	bne.n	80036e0 <HAL_UART_RxCpltCallback+0x1e0>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 80036b6:	4b34      	ldr	r3, [pc, #208]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	b2d1      	uxtb	r1, r2
 80036be:	4a32      	ldr	r2, [pc, #200]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80036c0:	7011      	strb	r1, [r2, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b35      	ldr	r3, [pc, #212]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 80036c6:	7819      	ldrb	r1, [r3, #0]
 80036c8:	4b30      	ldr	r3, [pc, #192]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 80036ca:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80036cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d905      	bls.n	80036e0 <HAL_UART_RxCpltCallback+0x1e0>
				command_str_index = 0 ;
 80036d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80036da:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer[0] == '$')
 80036e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	f040 8132 	bne.w	800394e <HAL_UART_RxCpltCallback+0x44e>
 80036ea:	4b2c      	ldr	r3, [pc, #176]	@ (800379c <HAL_UART_RxCpltCallback+0x29c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b24      	cmp	r3, #36	@ 0x24
 80036f0:	f040 812d 	bne.w	800394e <HAL_UART_RxCpltCallback+0x44e>
			if(command_str_index < 4)
 80036f4:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d812      	bhi.n	8003722 <HAL_UART_RxCpltCallback+0x222>
				memcpy(nand_stop_read_CMD,command_str,command_str_index); // #*$
 80036fc:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	4922      	ldr	r1, [pc, #136]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003704:	482b      	ldr	r0, [pc, #172]	@ (80037b4 <HAL_UART_RxCpltCallback+0x2b4>)
 8003706:	f00c fc18 	bl	800ff3a <memcpy>
				memset(command_str,0,sizeof(command_str));
 800370a:	220f      	movs	r2, #15
 800370c:	2100      	movs	r1, #0
 800370e:	481f      	ldr	r0, [pc, #124]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003710:	f00c fb85 	bl	800fe1e <memset>
				command_str_index = 0 ;
 8003714:	4b1c      	ldr	r3, [pc, #112]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800371a:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
}
 8003720:	e115      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
			else if(command_str_index == 4)
 8003722:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_UART_RxCpltCallback+0x23e>
				ATP_test  = 1;
 800372a:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_UART_RxCpltCallback+0x294>)
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003730:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
}
 800373c:	e107      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	2b32      	cmp	r3, #50	@ 0x32
 8003744:	d10d      	bne.n	8003762 <HAL_UART_RxCpltCallback+0x262>
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003748:	789b      	ldrb	r3, [r3, #2]
 800374a:	2b36      	cmp	r3, #54	@ 0x36
 800374c:	d109      	bne.n	8003762 <HAL_UART_RxCpltCallback+0x262>
				ATP_test  = 1;
 800374e:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_UART_RxCpltCallback+0x294>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003754:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e0f5      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_UART_RxCpltCallback+0x288>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003768:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <HAL_UART_RxCpltCallback+0x290>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 800376e:	220f      	movs	r2, #15
 8003770:	2100      	movs	r1, #0
 8003772:	4806      	ldr	r0, [pc, #24]	@ (800378c <HAL_UART_RxCpltCallback+0x28c>)
 8003774:	f00c fb53 	bl	800fe1e <memset>
}
 8003778:	e0e9      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
 800377a:	bf00      	nop
 800377c:	40004c00 	.word	0x40004c00
 8003780:	20005ae0 	.word	0x20005ae0
 8003784:	200057d8 	.word	0x200057d8
 8003788:	200002ec 	.word	0x200002ec
 800378c:	200002d8 	.word	0x200002d8
 8003790:	20005ade 	.word	0x20005ade
 8003794:	200002ed 	.word	0x200002ed
 8003798:	40005000 	.word	0x40005000
 800379c:	20005ae8 	.word	0x20005ae8
 80037a0:	2000586c 	.word	0x2000586c
 80037a4:	20005add 	.word	0x20005add
 80037a8:	20005ac4 	.word	0x20005ac4
 80037ac:	20005ae5 	.word	0x20005ae5
 80037b0:	20005ae6 	.word	0x20005ae6
 80037b4:	200002f8 	.word	0x200002f8
	else if (huart->Instance == UART8) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a66      	ldr	r2, [pc, #408]	@ (8003958 <HAL_UART_RxCpltCallback+0x458>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d158      	bne.n	8003874 <HAL_UART_RxCpltCallback+0x374>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 80037c2:	2201      	movs	r2, #1
 80037c4:	4965      	ldr	r1, [pc, #404]	@ (800395c <HAL_UART_RxCpltCallback+0x45c>)
 80037c6:	4866      	ldr	r0, [pc, #408]	@ (8003960 <HAL_UART_RxCpltCallback+0x460>)
 80037c8:	f009 fb12 	bl	800cdf0 <HAL_UART_Receive_IT>
		if(uart2_rx_buffer[0] == '#')//T
 80037cc:	4b63      	ldr	r3, [pc, #396]	@ (800395c <HAL_UART_RxCpltCallback+0x45c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b23      	cmp	r3, #35	@ 0x23
 80037d2:	d10e      	bne.n	80037f2 <HAL_UART_RxCpltCallback+0x2f2>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 80037d4:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	b2d1      	uxtb	r1, r2
 80037dc:	4a61      	ldr	r2, [pc, #388]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80037de:	7011      	strb	r1, [r2, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b5e      	ldr	r3, [pc, #376]	@ (800395c <HAL_UART_RxCpltCallback+0x45c>)
 80037e4:	7819      	ldrb	r1, [r3, #0]
 80037e6:	4b60      	ldr	r3, [pc, #384]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 80037e8:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80037ea:	4b60      	ldr	r3, [pc, #384]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e018      	b.n	8003824 <HAL_UART_RxCpltCallback+0x324>
		else if(command_rcv==1)
 80037f2:	4b5e      	ldr	r3, [pc, #376]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d114      	bne.n	8003824 <HAL_UART_RxCpltCallback+0x324>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 80037fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	b2d1      	uxtb	r1, r2
 8003802:	4a58      	ldr	r2, [pc, #352]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 8003804:	7011      	strb	r1, [r2, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	4b54      	ldr	r3, [pc, #336]	@ (800395c <HAL_UART_RxCpltCallback+0x45c>)
 800380a:	7819      	ldrb	r1, [r3, #0]
 800380c:	4b56      	ldr	r3, [pc, #344]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 800380e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003810:	4b54      	ldr	r3, [pc, #336]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d905      	bls.n	8003824 <HAL_UART_RxCpltCallback+0x324>
				command_str_index = 0 ;
 8003818:	4b52      	ldr	r3, [pc, #328]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800381e:	4b53      	ldr	r3, [pc, #332]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer[0] == '$')
 8003824:	4b51      	ldr	r3, [pc, #324]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 8090 	bne.w	800394e <HAL_UART_RxCpltCallback+0x44e>
 800382e:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_UART_RxCpltCallback+0x45c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b24      	cmp	r3, #36	@ 0x24
 8003834:	f040 808b 	bne.w	800394e <HAL_UART_RxCpltCallback+0x44e>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 8003838:	4b4b      	ldr	r3, [pc, #300]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b32      	cmp	r3, #50	@ 0x32
 800383e:	d10d      	bne.n	800385c <HAL_UART_RxCpltCallback+0x35c>
 8003840:	4b49      	ldr	r3, [pc, #292]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 8003842:	789b      	ldrb	r3, [r3, #2]
 8003844:	2b37      	cmp	r3, #55	@ 0x37
 8003846:	d109      	bne.n	800385c <HAL_UART_RxCpltCallback+0x35c>
				ATP_test  = 1;
 8003848:	4b49      	ldr	r3, [pc, #292]	@ (8003970 <HAL_UART_RxCpltCallback+0x470>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 800384e:	4b45      	ldr	r3, [pc, #276]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003854:	4b45      	ldr	r3, [pc, #276]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e078      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 800385c:	4b41      	ldr	r3, [pc, #260]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003862:	4b42      	ldr	r3, [pc, #264]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003868:	220f      	movs	r2, #15
 800386a:	2100      	movs	r1, #0
 800386c:	483e      	ldr	r0, [pc, #248]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 800386e:	f00c fad6 	bl	800fe1e <memset>
}
 8003872:	e06c      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == USART10) {
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3e      	ldr	r2, [pc, #248]	@ (8003974 <HAL_UART_RxCpltCallback+0x474>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d167      	bne.n	800394e <HAL_UART_RxCpltCallback+0x44e>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 800387e:	2201      	movs	r2, #1
 8003880:	493d      	ldr	r1, [pc, #244]	@ (8003978 <HAL_UART_RxCpltCallback+0x478>)
 8003882:	483e      	ldr	r0, [pc, #248]	@ (800397c <HAL_UART_RxCpltCallback+0x47c>)
 8003884:	f009 fab4 	bl	800cdf0 <HAL_UART_Receive_IT>
		if(uart4_rx_buffer[0] == '#')//T
 8003888:	4b3b      	ldr	r3, [pc, #236]	@ (8003978 <HAL_UART_RxCpltCallback+0x478>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b23      	cmp	r3, #35	@ 0x23
 800388e:	d10e      	bne.n	80038ae <HAL_UART_RxCpltCallback+0x3ae>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 8003890:	4b34      	ldr	r3, [pc, #208]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	b2d1      	uxtb	r1, r2
 8003898:	4a32      	ldr	r2, [pc, #200]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 800389a:	7011      	strb	r1, [r2, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4b36      	ldr	r3, [pc, #216]	@ (8003978 <HAL_UART_RxCpltCallback+0x478>)
 80038a0:	7819      	ldrb	r1, [r3, #0]
 80038a2:	4b31      	ldr	r3, [pc, #196]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 80038a4:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80038a6:	4b31      	ldr	r3, [pc, #196]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e018      	b.n	80038e0 <HAL_UART_RxCpltCallback+0x3e0>
		else if(command_rcv==1)
 80038ae:	4b2f      	ldr	r3, [pc, #188]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d114      	bne.n	80038e0 <HAL_UART_RxCpltCallback+0x3e0>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 80038b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	b2d1      	uxtb	r1, r2
 80038be:	4a29      	ldr	r2, [pc, #164]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80038c0:	7011      	strb	r1, [r2, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003978 <HAL_UART_RxCpltCallback+0x478>)
 80038c6:	7819      	ldrb	r1, [r3, #0]
 80038c8:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 80038ca:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80038cc:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d905      	bls.n	80038e0 <HAL_UART_RxCpltCallback+0x3e0>
				command_str_index = 0 ;
 80038d4:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80038da:	4b24      	ldr	r3, [pc, #144]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer[0] == '$')
 80038e0:	4b22      	ldr	r3, [pc, #136]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d132      	bne.n	800394e <HAL_UART_RxCpltCallback+0x44e>
 80038e8:	4b23      	ldr	r3, [pc, #140]	@ (8003978 <HAL_UART_RxCpltCallback+0x478>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b24      	cmp	r3, #36	@ 0x24
 80038ee:	d12e      	bne.n	800394e <HAL_UART_RxCpltCallback+0x44e>
			if(command_str[command_str_index-1] == '$')
 80038f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 80038f8:	5cd3      	ldrb	r3, [r2, r3]
 80038fa:	2b24      	cmp	r3, #36	@ 0x24
 80038fc:	d109      	bne.n	8003912 <HAL_UART_RxCpltCallback+0x412>
				ATP_test  = 1;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003970 <HAL_UART_RxCpltCallback+0x470>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003904:	4b17      	ldr	r3, [pc, #92]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800390a:	4b18      	ldr	r3, [pc, #96]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
}
 8003910:	e01d      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b32      	cmp	r3, #50	@ 0x32
 8003918:	d10d      	bne.n	8003936 <HAL_UART_RxCpltCallback+0x436>
 800391a:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 800391c:	789b      	ldrb	r3, [r3, #2]
 800391e:	2b38      	cmp	r3, #56	@ 0x38
 8003920:	d109      	bne.n	8003936 <HAL_UART_RxCpltCallback+0x436>
				ATP_test  = 1;
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_UART_RxCpltCallback+0x470>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003928:	4b0e      	ldr	r3, [pc, #56]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800392e:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	e00b      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8003936:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_UART_RxCpltCallback+0x464>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_UART_RxCpltCallback+0x46c>)
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003942:	220f      	movs	r2, #15
 8003944:	2100      	movs	r1, #0
 8003946:	4808      	ldr	r0, [pc, #32]	@ (8003968 <HAL_UART_RxCpltCallback+0x468>)
 8003948:	f00c fa69 	bl	800fe1e <memset>
}
 800394c:	e7ff      	b.n	800394e <HAL_UART_RxCpltCallback+0x44e>
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40007c00 	.word	0x40007c00
 800395c:	20005ae4 	.word	0x20005ae4
 8003960:	20005900 	.word	0x20005900
 8003964:	200002ec 	.word	0x200002ec
 8003968:	200002d8 	.word	0x200002d8
 800396c:	20005ade 	.word	0x20005ade
 8003970:	200002ed 	.word	0x200002ed
 8003974:	40006800 	.word	0x40006800
 8003978:	20005aec 	.word	0x20005aec
 800397c:	20005994 	.word	0x20005994

08003980 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800399a:	b672      	cpsid	i
}
 800399c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <Error_Handler+0x8>

080039a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0d0      	sub	sp, #320	@ 0x140
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80039ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80039be:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80039d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039d8:	4618      	mov	r0, r3
 80039da:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80039de:	461a      	mov	r2, r3
 80039e0:	2100      	movs	r1, #0
 80039e2:	f00c fa1c 	bl	800fe1e <memset>
  if(hspi->Instance==SPI2)
 80039e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80039ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a9c      	ldr	r2, [pc, #624]	@ (8003c64 <HAL_SPI_MspInit+0x2b4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d15f      	bne.n	8003ab8 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80039f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80039fc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8003a0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003a10:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1a:	f107 0320 	add.w	r3, r7, #32
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 f8fa 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8003a2a:	f7ff ffb4 	bl	8003996 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a2e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a34:	4a8c      	ldr	r2, [pc, #560]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a3a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003a3e:	4b8a      	ldr	r3, [pc, #552]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003a40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a44:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003a48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003a4c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003a56:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a5a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5c:	4b82      	ldr	r3, [pc, #520]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a62:	4a81      	ldr	r2, [pc, #516]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a72:	f003 0202 	and.w	r2, r3, #2
 8003a76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003a7a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003a84:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a88:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 8003a8a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003a8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aa4:	2305      	movs	r3, #5
 8003aa6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aaa:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003aae:	4619      	mov	r1, r3
 8003ab0:	486e      	ldr	r0, [pc, #440]	@ (8003c6c <HAL_SPI_MspInit+0x2bc>)
 8003ab2:	f001 f87d 	bl	8004bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003ab6:	e0d0      	b.n	8003c5a <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 8003ab8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003abc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c70 <HAL_SPI_MspInit+0x2c0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d15f      	bne.n	8003b8a <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003aca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003ace:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003ad2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8003ade:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003ae2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aec:	f107 0320 	add.w	r3, r7, #32
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 f891 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8003afc:	f7ff ff4b 	bl	8003996 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b00:	4b59      	ldr	r3, [pc, #356]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b06:	4a58      	ldr	r2, [pc, #352]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b0c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003b10:	4b55      	ldr	r3, [pc, #340]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b16:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8003b1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b2c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b34:	4a4c      	ldr	r2, [pc, #304]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b44:	f003 0204 	and.w	r2, r3, #4
 8003b48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003b5a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 8003b5c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003b60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b76:	2306      	movs	r3, #6
 8003b78:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003b80:	4619      	mov	r1, r3
 8003b82:	483c      	ldr	r0, [pc, #240]	@ (8003c74 <HAL_SPI_MspInit+0x2c4>)
 8003b84:	f001 f814 	bl	8004bb0 <HAL_GPIO_Init>
}
 8003b88:	e067      	b.n	8003c5a <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 8003b8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b8e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a38      	ldr	r2, [pc, #224]	@ (8003c78 <HAL_SPI_MspInit+0x2c8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d15e      	bne.n	8003c5a <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003b9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003ba0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003ba4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 8003bb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003bb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bbe:	f107 0320 	add.w	r3, r7, #32
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 f828 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8003bce:	f7ff fee2 	bl	8003996 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003bd2:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bd8:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003bda:	f043 0320 	orr.w	r3, r3, #32
 8003bde:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003be2:	4b21      	ldr	r3, [pc, #132]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003be8:	f003 0220 	and.w	r2, r3, #32
 8003bec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003bf0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003bfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003bfe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c10:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <HAL_SPI_MspInit+0x2b8>)
 8003c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c16:	f003 0220 	and.w	r2, r3, #32
 8003c1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c28:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c2c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 8003c2e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003c48:	2305      	movs	r3, #5
 8003c4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c4e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003c52:	4619      	mov	r1, r3
 8003c54:	4809      	ldr	r0, [pc, #36]	@ (8003c7c <HAL_SPI_MspInit+0x2cc>)
 8003c56:	f000 ffab 	bl	8004bb0 <HAL_GPIO_Init>
}
 8003c5a:	bf00      	nop
 8003c5c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40003800 	.word	0x40003800
 8003c68:	44020c00 	.word	0x44020c00
 8003c6c:	42020400 	.word	0x42020400
 8003c70:	40003c00 	.word	0x40003c00
 8003c74:	42020800 	.word	0x42020800
 8003c78:	44002000 	.word	0x44002000
 8003c7c:	42021400 	.word	0x42021400

08003c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0d2      	sub	sp, #328	@ 0x148
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c8a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c8e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ca4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f00c f8b4 	bl	800fe1e <memset>
  if(huart->Instance==UART4)
 8003cb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003cba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4aa4      	ldr	r2, [pc, #656]	@ (8003f54 <HAL_UART_MspInit+0x2d4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d166      	bne.n	8003d96 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003cc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ccc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003cd0:	f04f 0208 	mov.w	r2, #8
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003cdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ce0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ce8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 ff93 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8003cf8:	f7ff fe4d 	bl	8003996 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cfc:	4b96      	ldr	r3, [pc, #600]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d02:	4a95      	ldr	r2, [pc, #596]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003d04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d08:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d0c:	4b92      	ldr	r3, [pc, #584]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d12:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8003d16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d1a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d28:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d30:	4a89      	ldr	r2, [pc, #548]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d3a:	4b87      	ldr	r3, [pc, #540]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d40:	f003 0202 	and.w	r2, r3, #2
 8003d44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d56:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 8003d58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d5c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d72:	2308      	movs	r3, #8
 8003d74:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d78:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4877      	ldr	r0, [pc, #476]	@ (8003f5c <HAL_UART_MspInit+0x2dc>)
 8003d80:	f000 ff16 	bl	8004bb0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003d84:	2200      	movs	r2, #0
 8003d86:	2100      	movs	r1, #0
 8003d88:	203d      	movs	r0, #61	@ 0x3d
 8003d8a:	f000 fd93 	bl	80048b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003d8e:	203d      	movs	r0, #61	@ 0x3d
 8003d90:	f000 fdaa 	bl	80048e8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE END USART10_MspInit 1 */
  }

}
 8003d94:	e159      	b.n	800404a <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 8003d96:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6f      	ldr	r2, [pc, #444]	@ (8003f60 <HAL_UART_MspInit+0x2e0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d165      	bne.n	8003e74 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003da8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003dac:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003db0:	f04f 0210 	mov.w	r2, #16
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003dbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003dc0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 ff23 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003dd8:	f7ff fddd 	bl	8003996 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003de2:	4a5d      	ldr	r2, [pc, #372]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003de4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003dec:	4b5a      	ldr	r3, [pc, #360]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003df2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003df6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003dfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e08:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0a:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e10:	4a51      	ldr	r2, [pc, #324]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e20:	f003 0202 	and.w	r2, r3, #2
 8003e24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e36:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 8003e38:	2360      	movs	r3, #96	@ 0x60
 8003e3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003e50:	230e      	movs	r3, #14
 8003e52:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e56:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	483f      	ldr	r0, [pc, #252]	@ (8003f5c <HAL_UART_MspInit+0x2dc>)
 8003e5e:	f000 fea7 	bl	8004bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2100      	movs	r1, #0
 8003e66:	203e      	movs	r0, #62	@ 0x3e
 8003e68:	f000 fd24 	bl	80048b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003e6c:	203e      	movs	r0, #62	@ 0x3e
 8003e6e:	f000 fd3b 	bl	80048e8 <HAL_NVIC_EnableIRQ>
}
 8003e72:	e0ea      	b.n	800404a <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 8003e74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e78:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a38      	ldr	r2, [pc, #224]	@ (8003f64 <HAL_UART_MspInit+0x2e4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d172      	bne.n	8003f6c <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003e86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e8a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003e8e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8003e9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f002 feb4 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8003eb6:	f7ff fd6e 	bl	8003996 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003eba:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec0:	4a25      	ldr	r2, [pc, #148]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003ec2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ec6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003eca:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ed0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003ed4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ed8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ee2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003ee6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eee:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003ef0:	f043 0310 	orr.w	r3, r3, #16
 8003ef4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <HAL_UART_MspInit+0x2d8>)
 8003efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003efe:	f003 0210 	and.w	r2, r3, #16
 8003f02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f10:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f14:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 8003f16:	2303      	movs	r3, #3
 8003f18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003f2e:	2308      	movs	r3, #8
 8003f30:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f34:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003f38:	4619      	mov	r1, r3
 8003f3a:	480b      	ldr	r0, [pc, #44]	@ (8003f68 <HAL_UART_MspInit+0x2e8>)
 8003f3c:	f000 fe38 	bl	8004bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	2063      	movs	r0, #99	@ 0x63
 8003f46:	f000 fcb5 	bl	80048b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003f4a:	2063      	movs	r0, #99	@ 0x63
 8003f4c:	f000 fccc 	bl	80048e8 <HAL_NVIC_EnableIRQ>
}
 8003f50:	e07b      	b.n	800404a <HAL_UART_MspInit+0x3ca>
 8003f52:	bf00      	nop
 8003f54:	40004c00 	.word	0x40004c00
 8003f58:	44020c00 	.word	0x44020c00
 8003f5c:	42020400 	.word	0x42020400
 8003f60:	40005000 	.word	0x40005000
 8003f64:	40007c00 	.word	0x40007c00
 8003f68:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 8003f6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f70:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a36      	ldr	r2, [pc, #216]	@ (8004054 <HAL_UART_MspInit+0x3d4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d165      	bne.n	800404a <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8003f7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f82:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 8003f92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f002 fe37 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8003fb0:	f7ff fcf1 	bl	8003996 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8003fb4:	4b28      	ldr	r3, [pc, #160]	@ (8004058 <HAL_UART_MspInit+0x3d8>)
 8003fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fba:	4a27      	ldr	r2, [pc, #156]	@ (8004058 <HAL_UART_MspInit+0x3d8>)
 8003fbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fc0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003fc4:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <HAL_UART_MspInit+0x3d8>)
 8003fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fca:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8003fce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fe0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <HAL_UART_MspInit+0x3d8>)
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <HAL_UART_MspInit+0x3d8>)
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ff2:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <HAL_UART_MspInit+0x3d8>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff8:	f003 0210 	and.w	r2, r3, #16
 8003ffc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004000:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800400a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800400e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8004010:	230c      	movs	r3, #12
 8004012:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8004028:	2307      	movs	r3, #7
 800402a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800402e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004032:	4619      	mov	r1, r3
 8004034:	4809      	ldr	r0, [pc, #36]	@ (800405c <HAL_UART_MspInit+0x3dc>)
 8004036:	f000 fdbb 	bl	8004bb0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	2056      	movs	r0, #86	@ 0x56
 8004040:	f000 fc38 	bl	80048b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004044:	2056      	movs	r0, #86	@ 0x56
 8004046:	f000 fc4f 	bl	80048e8 <HAL_NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40006800 	.word	0x40006800
 8004058:	44020c00 	.word	0x44020c00
 800405c:	42021000 	.word	0x42021000

08004060 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004074:	4b43      	ldr	r3, [pc, #268]	@ (8004184 <HAL_FMC_MspInit+0x124>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d17f      	bne.n	800417c <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 800407c:	4b41      	ldr	r3, [pc, #260]	@ (8004184 <HAL_FMC_MspInit+0x124>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004082:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_FMC_MspInit+0x128>)
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004088:	4a3f      	ldr	r2, [pc, #252]	@ (8004188 <HAL_FMC_MspInit+0x128>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004092:	4b3d      	ldr	r3, [pc, #244]	@ (8004188 <HAL_FMC_MspInit+0x128>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80040a0:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 80040a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040b2:	230c      	movs	r3, #12
 80040b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4834      	ldr	r0, [pc, #208]	@ (800418c <HAL_FMC_MspInit+0x12c>)
 80040bc:	f000 fd78 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040c0:	2380      	movs	r3, #128	@ 0x80
 80040c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040cc:	2303      	movs	r3, #3
 80040ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 80040d0:	230d      	movs	r3, #13
 80040d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	482d      	ldr	r0, [pc, #180]	@ (8004190 <HAL_FMC_MspInit+0x130>)
 80040da:	f000 fd69 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80040de:	233f      	movs	r3, #63	@ 0x3f
 80040e0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e2:	2302      	movs	r3, #2
 80040e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ea:	2303      	movs	r3, #3
 80040ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040ee:	230c      	movs	r3, #12
 80040f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4827      	ldr	r0, [pc, #156]	@ (8004194 <HAL_FMC_MspInit+0x134>)
 80040f8:	f000 fd5a 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80040fc:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8004100:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	2302      	movs	r3, #2
 8004104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410a:	2303      	movs	r3, #3
 800410c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800410e:	230c      	movs	r3, #12
 8004110:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4820      	ldr	r0, [pc, #128]	@ (8004198 <HAL_FMC_MspInit+0x138>)
 8004118:	f000 fd4a 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800411c:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8004120:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004122:	2302      	movs	r3, #2
 8004124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412a:	2303      	movs	r3, #3
 800412c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800412e:	230c      	movs	r3, #12
 8004130:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4819      	ldr	r0, [pc, #100]	@ (800419c <HAL_FMC_MspInit+0x13c>)
 8004138:	f000 fd3a 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800413c:	23c0      	movs	r3, #192	@ 0xc0
 800413e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004148:	2303      	movs	r3, #3
 800414a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800414c:	2309      	movs	r3, #9
 800414e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4812      	ldr	r0, [pc, #72]	@ (80041a0 <HAL_FMC_MspInit+0x140>)
 8004156:	f000 fd2b 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800415a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800415e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800416c:	230c      	movs	r3, #12
 800416e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4806      	ldr	r0, [pc, #24]	@ (8004190 <HAL_FMC_MspInit+0x130>)
 8004176:	f000 fd1b 	bl	8004bb0 <HAL_GPIO_Init>
 800417a:	e000      	b.n	800417e <HAL_FMC_MspInit+0x11e>
    return;
 800417c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20005af0 	.word	0x20005af0
 8004188:	44020c00 	.word	0x44020c00
 800418c:	42021400 	.word	0x42021400
 8004190:	42020000 	.word	0x42020000
 8004194:	42021800 	.word	0x42021800
 8004198:	42021000 	.word	0x42021000
 800419c:	42020c00 	.word	0x42020c00
 80041a0:	42020800 	.word	0x42020800

080041a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80041ac:	f7ff ff58 	bl	8004060 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80041c0:	f7ff ff4e 	bl	8004060 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <NMI_Handler+0x4>

080041d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <HardFault_Handler+0x4>

080041dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <MemManage_Handler+0x4>

080041e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <BusFault_Handler+0x4>

080041ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <UsageFault_Handler+0x4>

080041f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004222:	f000 fa4b 	bl	80046bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}

0800422a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 800422e:	2002      	movs	r0, #2
 8004230:	f000 fe42 	bl	8004eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}

08004238 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 800423c:	2080      	movs	r0, #128	@ 0x80
 800423e:	f000 fe3b 	bl	8004eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}

08004246 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 800424a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800424e:	f000 fe33 	bl	8004eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800425c:	4802      	ldr	r0, [pc, #8]	@ (8004268 <UART4_IRQHandler+0x10>)
 800425e:	f008 fe29 	bl	800ceb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200057d8 	.word	0x200057d8

0800426c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004270:	4802      	ldr	r0, [pc, #8]	@ (800427c <UART5_IRQHandler+0x10>)
 8004272:	f008 fe1f 	bl	800ceb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000586c 	.word	0x2000586c

08004280 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004284:	4802      	ldr	r0, [pc, #8]	@ (8004290 <UART8_IRQHandler+0x10>)
 8004286:	f008 fe15 	bl	800ceb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20005900 	.word	0x20005900

08004294 <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 8004298:	4802      	ldr	r0, [pc, #8]	@ (80042a4 <USART10_IRQHandler+0x10>)
 800429a:	f008 fe0b 	bl	800ceb4 <HAL_UART_IRQHandler>
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20005994 	.word	0x20005994

080042a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return 1;
 80042ac:	2301      	movs	r3, #1
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_kill>:

int _kill(int pid, int sig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042c2:	f00b fdff 	bl	800fec4 <__errno>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2216      	movs	r2, #22
 80042ca:	601a      	str	r2, [r3, #0]
  return -1;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_exit>:

void _exit (int status)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffe7 	bl	80042b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042ea:	bf00      	nop
 80042ec:	e7fd      	b.n	80042ea <_exit+0x12>

080042ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e00a      	b.n	8004316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004300:	f3af 8000 	nop.w
 8004304:	4601      	mov	r1, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	60ba      	str	r2, [r7, #8]
 800430c:	b2ca      	uxtb	r2, r1
 800430e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3301      	adds	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	dbf0      	blt.n	8004300 <_read+0x12>
  }

  return len;
 800431e:	687b      	ldr	r3, [r7, #4]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e009      	b.n	800434e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	60ba      	str	r2, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	dbf1      	blt.n	800433a <_write+0x12>
  }
  return len;
 8004356:	687b      	ldr	r3, [r7, #4]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <_close>:

int _close(int file)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004388:	605a      	str	r2, [r3, #4]
  return 0;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <_isatty>:

int _isatty(int file)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043a0:	2301      	movs	r3, #1
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <_sbrk+0x5c>)
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <_sbrk+0x60>)
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043dc:	4b13      	ldr	r3, [pc, #76]	@ (800442c <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <_sbrk+0x64>)
 80043e6:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <_sbrk+0x68>)
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <_sbrk+0x64>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043f8:	f00b fd64 	bl	800fec4 <__errno>
 80043fc:	4603      	mov	r3, r0
 80043fe:	220c      	movs	r2, #12
 8004400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	e009      	b.n	800441c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <_sbrk+0x64>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	4a05      	ldr	r2, [pc, #20]	@ (800442c <_sbrk+0x64>)
 8004418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200a0000 	.word	0x200a0000
 8004428:	00000400 	.word	0x00000400
 800442c:	20005af4 	.word	0x20005af4
 8004430:	20005c48 	.word	0x20005c48

08004434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800443a:	4b35      	ldr	r3, [pc, #212]	@ (8004510 <SystemInit+0xdc>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	4a33      	ldr	r2, [pc, #204]	@ (8004510 <SystemInit+0xdc>)
 8004442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004446:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800444a:	4b32      	ldr	r3, [pc, #200]	@ (8004514 <SystemInit+0xe0>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004450:	4b30      	ldr	r3, [pc, #192]	@ (8004514 <SystemInit+0xe0>)
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004456:	4b2f      	ldr	r3, [pc, #188]	@ (8004514 <SystemInit+0xe0>)
 8004458:	2200      	movs	r2, #0
 800445a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800445c:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <SystemInit+0xe0>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	492c      	ldr	r1, [pc, #176]	@ (8004514 <SystemInit+0xe0>)
 8004462:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <SystemInit+0xe4>)
 8004464:	4013      	ands	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8004468:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <SystemInit+0xe0>)
 800446a:	2200      	movs	r2, #0
 800446c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800446e:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <SystemInit+0xe0>)
 8004470:	2200      	movs	r2, #0
 8004472:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8004474:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <SystemInit+0xe0>)
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800447a:	4b26      	ldr	r3, [pc, #152]	@ (8004514 <SystemInit+0xe0>)
 800447c:	4a27      	ldr	r2, [pc, #156]	@ (800451c <SystemInit+0xe8>)
 800447e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8004480:	4b24      	ldr	r3, [pc, #144]	@ (8004514 <SystemInit+0xe0>)
 8004482:	2200      	movs	r2, #0
 8004484:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8004486:	4b23      	ldr	r3, [pc, #140]	@ (8004514 <SystemInit+0xe0>)
 8004488:	4a24      	ldr	r2, [pc, #144]	@ (800451c <SystemInit+0xe8>)
 800448a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800448c:	4b21      	ldr	r3, [pc, #132]	@ (8004514 <SystemInit+0xe0>)
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8004492:	4b20      	ldr	r3, [pc, #128]	@ (8004514 <SystemInit+0xe0>)
 8004494:	4a21      	ldr	r2, [pc, #132]	@ (800451c <SystemInit+0xe8>)
 8004496:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8004498:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <SystemInit+0xe0>)
 800449a:	2200      	movs	r2, #0
 800449c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <SystemInit+0xe0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <SystemInit+0xe0>)
 80044a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80044aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <SystemInit+0xe0>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044b0:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <SystemInit+0xdc>)
 80044b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80044b6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <SystemInit+0xec>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80044c0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80044c8:	d003      	beq.n	80044d2 <SystemInit+0x9e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044d0:	d117      	bne.n	8004502 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80044d2:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <SystemInit+0xec>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <SystemInit+0xec>)
 80044e0:	4a10      	ldr	r2, [pc, #64]	@ (8004524 <SystemInit+0xf0>)
 80044e2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <SystemInit+0xec>)
 80044e6:	4a10      	ldr	r2, [pc, #64]	@ (8004528 <SystemInit+0xf4>)
 80044e8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <SystemInit+0xec>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004520 <SystemInit+0xec>)
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80044f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <SystemInit+0xec>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4a09      	ldr	r2, [pc, #36]	@ (8004520 <SystemInit+0xec>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	61d3      	str	r3, [r2, #28]
  }
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000ed00 	.word	0xe000ed00
 8004514:	44020c00 	.word	0x44020c00
 8004518:	eae2eae3 	.word	0xeae2eae3
 800451c:	01010280 	.word	0x01010280
 8004520:	40022000 	.word	0x40022000
 8004524:	08192a3b 	.word	0x08192a3b
 8004528:	4c5d6e7f 	.word	0x4c5d6e7f

0800452c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800452c:	480d      	ldr	r0, [pc, #52]	@ (8004564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800452e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004530:	f7ff ff80 	bl	8004434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004534:	480c      	ldr	r0, [pc, #48]	@ (8004568 <LoopForever+0x6>)
  ldr r1, =_edata
 8004536:	490d      	ldr	r1, [pc, #52]	@ (800456c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004538:	4a0d      	ldr	r2, [pc, #52]	@ (8004570 <LoopForever+0xe>)
  movs r3, #0
 800453a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800453c:	e002      	b.n	8004544 <LoopCopyDataInit>

0800453e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800453e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004542:	3304      	adds	r3, #4

08004544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004548:	d3f9      	bcc.n	800453e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800454a:	4a0a      	ldr	r2, [pc, #40]	@ (8004574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800454c:	4c0a      	ldr	r4, [pc, #40]	@ (8004578 <LoopForever+0x16>)
  movs r3, #0
 800454e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004550:	e001      	b.n	8004556 <LoopFillZerobss>

08004552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004554:	3204      	adds	r2, #4

08004556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004558:	d3fb      	bcc.n	8004552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800455a:	f00b fcb9 	bl	800fed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800455e:	f7fe fa19 	bl	8002994 <main>

08004562 <LoopForever>:

LoopForever:
    b LoopForever
 8004562:	e7fe      	b.n	8004562 <LoopForever>
  ldr   r0, =_estack
 8004564:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800456c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004570:	080126d8 	.word	0x080126d8
  ldr r2, =_sbss
 8004574:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004578:	20005c48 	.word	0x20005c48

0800457c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800457c:	e7fe      	b.n	800457c <ADC1_IRQHandler>
	...

08004580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004584:	2003      	movs	r0, #3
 8004586:	f000 f98a 	bl	800489e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800458a:	f002 f9bb 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 800458e:	4602      	mov	r2, r0
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <HAL_Init+0x44>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	490b      	ldr	r1, [pc, #44]	@ (80045c8 <HAL_Init+0x48>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <HAL_Init+0x4c>)
 80045a2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80045a4:	2004      	movs	r0, #4
 80045a6:	f000 f9cf 	bl	8004948 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045aa:	200f      	movs	r0, #15
 80045ac:	f000 f810 	bl	80045d0 <HAL_InitTick>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e002      	b.n	80045c0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80045ba:	f7ff f9f2 	bl	80039a2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	44020c00 	.word	0x44020c00
 80045c8:	08012318 	.word	0x08012318
 80045cc:	20000028 	.word	0x20000028

080045d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80045dc:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <HAL_InitTick+0xdc>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e05c      	b.n	80046a2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80045e8:	4b31      	ldr	r3, [pc, #196]	@ (80046b0 <HAL_InitTick+0xe0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d10c      	bne.n	800460e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80045f4:	4b2f      	ldr	r3, [pc, #188]	@ (80046b4 <HAL_InitTick+0xe4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <HAL_InitTick+0xdc>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004602:	fbb3 f3f1 	udiv	r3, r3, r1
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e037      	b.n	800467e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800460e:	f000 f9f3 	bl	80049f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8004612:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d023      	beq.n	8004662 <HAL_InitTick+0x92>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d82d      	bhi.n	800467c <HAL_InitTick+0xac>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_InitTick+0x5e>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d00d      	beq.n	8004648 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800462c:	e026      	b.n	800467c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800462e:	4b21      	ldr	r3, [pc, #132]	@ (80046b4 <HAL_InitTick+0xe4>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b1e      	ldr	r3, [pc, #120]	@ (80046ac <HAL_InitTick+0xdc>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	4619      	mov	r1, r3
 8004638:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800463c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	60fb      	str	r3, [r7, #12]
        break;
 8004646:	e01a      	b.n	800467e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <HAL_InitTick+0xdc>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004652:	fbb3 f3f2 	udiv	r3, r3, r2
 8004656:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	60fb      	str	r3, [r7, #12]
        break;
 8004660:	e00d      	b.n	800467e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8004662:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_InitTick+0xdc>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004670:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	60fb      	str	r3, [r7, #12]
        break;
 800467a:	e000      	b.n	800467e <HAL_InitTick+0xae>
        break;
 800467c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f940 	bl	8004904 <HAL_SYSTICK_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e009      	b.n	80046a2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800468e:	2200      	movs	r2, #0
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	f04f 30ff 	mov.w	r0, #4294967295
 8004696:	f000 f90d 	bl	80048b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800469a:	4a07      	ldr	r2, [pc, #28]	@ (80046b8 <HAL_InitTick+0xe8>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000030 	.word	0x20000030
 80046b0:	e000e010 	.word	0xe000e010
 80046b4:	20000028 	.word	0x20000028
 80046b8:	2000002c 	.word	0x2000002c

080046bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046c0:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <HAL_IncTick+0x20>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <HAL_IncTick+0x24>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4413      	add	r3, r2
 80046cc:	4a04      	ldr	r2, [pc, #16]	@ (80046e0 <HAL_IncTick+0x24>)
 80046ce:	6013      	str	r3, [r2, #0]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000030 	.word	0x20000030
 80046e0:	20005af8 	.word	0x20005af8

080046e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return uwTick;
 80046e8:	4b03      	ldr	r3, [pc, #12]	@ (80046f8 <HAL_GetTick+0x14>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20005af8 	.word	0x20005af8

080046fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff ffee 	bl	80046e4 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d005      	beq.n	8004722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_Delay+0x44>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004722:	bf00      	nop
 8004724:	f7ff ffde 	bl	80046e4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d8f7      	bhi.n	8004724 <HAL_Delay+0x28>
  {
  }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000030 	.word	0x20000030

08004744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <__NVIC_SetPriorityGrouping+0x44>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004760:	4013      	ands	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800476c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004776:	4a04      	ldr	r2, [pc, #16]	@ (8004788 <__NVIC_SetPriorityGrouping+0x44>)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	60d3      	str	r3, [r2, #12]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0a1b      	lsrs	r3, r3, #8
 8004796:	f003 0307 	and.w	r3, r3, #7
}
 800479a:	4618      	mov	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	db0b      	blt.n	80047d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	4907      	ldr	r1, [pc, #28]	@ (80047e0 <__NVIC_EnableIRQ+0x38>)
 80047c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2001      	movs	r0, #1
 80047ca:	fa00 f202 	lsl.w	r2, r0, r2
 80047ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000e100 	.word	0xe000e100

080047e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	6039      	str	r1, [r7, #0]
 80047ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	db0a      	blt.n	800480e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	490c      	ldr	r1, [pc, #48]	@ (8004830 <__NVIC_SetPriority+0x4c>)
 80047fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	440b      	add	r3, r1
 8004808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800480c:	e00a      	b.n	8004824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	4908      	ldr	r1, [pc, #32]	@ (8004834 <__NVIC_SetPriority+0x50>)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	3b04      	subs	r3, #4
 800481c:	0112      	lsls	r2, r2, #4
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	440b      	add	r3, r1
 8004822:	761a      	strb	r2, [r3, #24]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	e000e100 	.word	0xe000e100
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	@ 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f1c3 0307 	rsb	r3, r3, #7
 8004852:	2b04      	cmp	r3, #4
 8004854:	bf28      	it	cs
 8004856:	2304      	movcs	r3, #4
 8004858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3304      	adds	r3, #4
 800485e:	2b06      	cmp	r3, #6
 8004860:	d902      	bls.n	8004868 <NVIC_EncodePriority+0x30>
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3b03      	subs	r3, #3
 8004866:	e000      	b.n	800486a <NVIC_EncodePriority+0x32>
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800486c:	f04f 32ff 	mov.w	r2, #4294967295
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	401a      	ands	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004880:	f04f 31ff 	mov.w	r1, #4294967295
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	43d9      	mvns	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004890:	4313      	orrs	r3, r2
         );
}
 8004892:	4618      	mov	r0, r3
 8004894:	3724      	adds	r7, #36	@ 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff ff4c 	bl	8004744 <__NVIC_SetPriorityGrouping>
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048c2:	f7ff ff63 	bl	800478c <__NVIC_GetPriorityGrouping>
 80048c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	6978      	ldr	r0, [r7, #20]
 80048ce:	f7ff ffb3 	bl	8004838 <NVIC_EncodePriority>
 80048d2:	4602      	mov	r2, r0
 80048d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ff82 	bl	80047e4 <__NVIC_SetPriority>
}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ff56 	bl	80047a8 <__NVIC_EnableIRQ>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004914:	d301      	bcc.n	800491a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004916:	2301      	movs	r3, #1
 8004918:	e00d      	b.n	8004936 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800491a:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <HAL_SYSTICK_Config+0x40>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004922:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <HAL_SYSTICK_Config+0x40>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <HAL_SYSTICK_Config+0x40>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a05      	ldr	r2, [pc, #20]	@ (8004944 <HAL_SYSTICK_Config+0x40>)
 800492e:	f043 0303 	orr.w	r3, r3, #3
 8004932:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000e010 	.word	0xe000e010

08004948 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b04      	cmp	r3, #4
 8004954:	d844      	bhi.n	80049e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004956:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	0800497f 	.word	0x0800497f
 8004960:	0800499d 	.word	0x0800499d
 8004964:	080049bf 	.word	0x080049bf
 8004968:	080049e1 	.word	0x080049e1
 800496c:	08004971 	.word	0x08004971
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004970:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6013      	str	r3, [r2, #0]
      break;
 800497c:	e031      	b.n	80049e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800497e:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800498a:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800498c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004990:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004992:	f023 030c 	bic.w	r3, r3, #12
 8004996:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800499a:	e022      	b.n	80049e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800499c:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80049a2:	f023 0304 	bic.w	r3, r3, #4
 80049a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80049a8:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80049aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049ae:	f023 030c 	bic.w	r3, r3, #12
 80049b2:	4a10      	ldr	r2, [pc, #64]	@ (80049f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80049bc:	e011      	b.n	80049e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80049be:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80049c4:	f023 0304 	bic.w	r3, r3, #4
 80049c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80049ca:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80049cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049d0:	f023 030c 	bic.w	r3, r3, #12
 80049d4:	4a07      	ldr	r2, [pc, #28]	@ (80049f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80049d6:	f043 0308 	orr.w	r3, r3, #8
 80049da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80049de:	e000      	b.n	80049e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80049e0:	bf00      	nop
  }
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e010 	.word	0xe000e010
 80049f4:	44020c00 	.word	0x44020c00

080049f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80049fe:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	e01e      	b.n	8004a4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8004a12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d00f      	beq.n	8004a42 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d80f      	bhi.n	8004a48 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d003      	beq.n	8004a3c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004a34:	e008      	b.n	8004a48 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
        break;
 8004a3a:	e008      	b.n	8004a4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	607b      	str	r3, [r7, #4]
        break;
 8004a40:	e005      	b.n	8004a4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004a42:	2302      	movs	r3, #2
 8004a44:	607b      	str	r3, [r7, #4]
        break;
 8004a46:	e002      	b.n	8004a4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	607b      	str	r3, [r7, #4]
        break;
 8004a4c:	bf00      	nop
    }
  }
  return systick_source;
 8004a4e:	687b      	ldr	r3, [r7, #4]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e010 	.word	0xe000e010
 8004a60:	44020c00 	.word	0x44020c00

08004a64 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004a6c:	f7ff fe3a 	bl	80046e4 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e06b      	b.n	8004b54 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d008      	beq.n	8004a9a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e05c      	b.n	8004b54 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0204 	orr.w	r2, r2, #4
 8004aa8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2205      	movs	r2, #5
 8004aae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004ab2:	e020      	b.n	8004af6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004ab4:	f7ff fe16 	bl	80046e4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d919      	bls.n	8004af6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	f043 0210 	orr.w	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e02e      	b.n	8004b54 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0d7      	beq.n	8004ab4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0202 	orr.w	r2, r2, #2
 8004b12:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2204      	movs	r2, #4
 8004b18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004b24:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	2201      	movs	r2, #1
 8004b40:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e019      	b.n	8004ba2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d004      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e00e      	b.n	8004ba2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2204      	movs	r2, #4
 8004b88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004bbe:	e136      	b.n	8004e2e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8128 	beq.w	8004e28 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x38>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d125      	bne.n	8004c34 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	08da      	lsrs	r2, r3, #3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3208      	adds	r2, #8
 8004bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	220f      	movs	r2, #15
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	08da      	lsrs	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3208      	adds	r2, #8
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0203 	and.w	r2, r3, #3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d00b      	beq.n	8004c88 <HAL_GPIO_Init+0xd8>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d007      	beq.n	8004c88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c7c:	2b11      	cmp	r3, #17
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b12      	cmp	r3, #18
 8004c86:	d130      	bne.n	8004cea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	2203      	movs	r2, #3
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0201 	and.w	r2, r3, #1
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d017      	beq.n	8004d22 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4013      	ands	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d07c      	beq.n	8004e28 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004d2e:	4a47      	ldr	r2, [pc, #284]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3318      	adds	r3, #24
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	0a9a      	lsrs	r2, r3, #10
 8004d56:	4b3e      	ldr	r3, [pc, #248]	@ (8004e50 <HAL_GPIO_Init+0x2a0>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	f002 0203 	and.w	r2, r2, #3
 8004d60:	00d2      	lsls	r2, r2, #3
 8004d62:	4093      	lsls	r3, r2
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004d6a:	4938      	ldr	r1, [pc, #224]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3318      	adds	r3, #24
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004d78:	4b34      	ldr	r3, [pc, #208]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4013      	ands	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004da2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4013      	ands	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004dc6:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004df2:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004dfa:	4b14      	ldr	r3, [pc, #80]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004e20:	4a0a      	ldr	r2, [pc, #40]	@ (8004e4c <HAL_GPIO_Init+0x29c>)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f47f aec1 	bne.w	8004bc0 <HAL_GPIO_Init+0x10>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	44022000 	.word	0x44022000
 8004e50:	002f7f7f 	.word	0x002f7f7f

08004e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
 8004e60:	4613      	mov	r3, r2
 8004e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e64:	787b      	ldrb	r3, [r7, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e70:	e002      	b.n	8004e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	041a      	lsls	r2, r3, #16
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	43d9      	mvns	r1, r3
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004ece:	4a0c      	ldr	r2, [pc, #48]	@ (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f814 	bl	8004f04 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004edc:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004ee8:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fd45 	bl	8003980 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	44022000 	.word	0x44022000

08004f04 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	e007      	b.n	8004f4a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004f3a:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 0204 	bic.w	r2, r3, #4
 8004f42:	4905      	ldr	r1, [pc, #20]	@ (8004f58 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40030400 	.word	0x40030400

08004f5c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <HAL_ICACHE_Enable+0x1c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a04      	ldr	r2, [pc, #16]	@ (8004f78 <HAL_ICACHE_Enable+0x1c>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40030400 	.word	0x40030400

08004f7c <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e037      	b.n	8005002 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff f906 	bl	80041b8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f00a f94e 	bl	800f258 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	f00a f970 	bl	800f2ac <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	f00a f985 	bl	800f2e6 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0204 	orr.w	r2, r2, #4
 8004fea:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004fec:	4b07      	ldr	r3, [pc, #28]	@ (800500c <HAL_NAND_Init+0x90>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a06      	ldr	r2, [pc, #24]	@ (800500c <HAL_NAND_Init+0x90>)
 8004ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff6:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	47000400 	.word	0x47000400

08005010 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d101      	bne.n	8005028 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
 8005026:	e027      	b.n	8005078 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d120      	bne.n	8005076 <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_NAND_Reset+0x32>
 800503e:	2302      	movs	r3, #2
 8005040:	e01a      	b.n	8005078 <HAL_NAND_Reset+0x68>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005052:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005056:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800505e:	22ff      	movs	r2, #255	@ 0xff
 8005060:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1

}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	@ 0x30
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d101      	bne.n	80050ae <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e140      	b.n	8005330 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	f040 8139 	bne.w	800532e <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_NAND_Read_Page_8b+0x46>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e132      	b.n	8005330 <HAL_NAND_Read_Page_8b+0x2ac>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80050da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80050de:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	889b      	ldrh	r3, [r3, #4]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	885b      	ldrh	r3, [r3, #2]
 80050f0:	4618      	mov	r0, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	fb00 f303 	mul.w	r3, r0, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	440b      	add	r3, r1
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005108:	e0fa      	b.n	8005300 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005114:	f3bf 8f4f 	dsb	sy
}
 8005118:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005122:	d848      	bhi.n	80051b6 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005134:	d21a      	bcs.n	800516c <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005140:	f3bf 8f4f 	dsb	sy
}
 8005144:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005152:	f3bf 8f4f 	dsb	sy
}
 8005156:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	0a1a      	lsrs	r2, r3, #8
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005166:	f3bf 8f4f 	dsb	sy
}
 800516a:	e07d      	b.n	8005268 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005176:	f3bf 8f4f 	dsb	sy
}
 800517a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005188:	f3bf 8f4f 	dsb	sy
}
 800518c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	0a1a      	lsrs	r2, r3, #8
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800519c:	f3bf 8f4f 	dsb	sy
}
 80051a0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	0c1a      	lsrs	r2, r3, #16
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051b0:	f3bf 8f4f 	dsb	sy
}
 80051b4:	e058      	b.n	8005268 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c6:	d222      	bcs.n	800520e <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051d2:	f3bf 8f4f 	dsb	sy
}
 80051d6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051e2:	f3bf 8f4f 	dsb	sy
}
 80051e6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051f4:	f3bf 8f4f 	dsb	sy
}
 80051f8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	0a1a      	lsrs	r2, r3, #8
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005208:	f3bf 8f4f 	dsb	sy
}
 800520c:	e02c      	b.n	8005268 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005218:	f3bf 8f4f 	dsb	sy
}
 800521c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005228:	f3bf 8f4f 	dsb	sy
}
 800522c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800523a:	f3bf 8f4f 	dsb	sy
}
 800523e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	0a1a      	lsrs	r2, r3, #8
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800524e:	f3bf 8f4f 	dsb	sy
}
 8005252:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	0c1a      	lsrs	r2, r3, #16
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005262:	f3bf 8f4f 	dsb	sy
}
 8005266:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526e:	2230      	movs	r2, #48	@ 0x30
 8005270:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005272:	f3bf 8f4f 	dsb	sy
}
 8005276:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d123      	bne.n	80052ca <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005282:	f7ff fa2f 	bl	80046e4 <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005288:	e011      	b.n	80052ae <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 800528a:	f7ff fa2b 	bl	80046e4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005298:	d909      	bls.n	80052ae <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2203      	movs	r2, #3
 800529e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e040      	b.n	8005330 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fd13 	bl	8005cda <HAL_NAND_Read_Status>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b40      	cmp	r3, #64	@ 0x40
 80052b8:	d1e7      	bne.n	800528a <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052c4:	f3bf 8f4f 	dsb	sy
}
 80052c8:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ce:	e009      	b.n	80052e4 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	701a      	strb	r2, [r3, #0]
        buff++;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	3301      	adds	r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80052de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e0:	3301      	adds	r3, #1
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3f0      	bcc.n	80052d0 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	3301      	adds	r3, #1
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	3301      	adds	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_NAND_Read_Page_8b+0x296>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	429a      	cmp	r2, r3
 8005316:	f4ff aef8 	bcc.w	800510a <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e000      	b.n	8005330 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
}
 8005330:	4618      	mov	r0, r3
 8005332:	3730      	adds	r7, #48	@ 0x30
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	@ 0x30
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d101      	bne.n	8005362 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	e13e      	b.n	80055e0 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	f040 8137 	bne.w	80055de <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_NAND_Write_Page_8b+0x46>
 800537a:	2302      	movs	r3, #2
 800537c:	e130      	b.n	80055e0 <HAL_NAND_Write_Page_8b+0x2a8>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800538e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005392:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	889b      	ldrh	r3, [r3, #4]
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	885b      	ldrh	r3, [r3, #2]
 80053a4:	4618      	mov	r0, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	fb00 f303 	mul.w	r3, r0, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053b4:	fb02 f303 	mul.w	r3, r2, r3
 80053b8:	440b      	add	r3, r1
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80053bc:	e0f8      	b.n	80055b0 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053c8:	f3bf 8f4f 	dsb	sy
}
 80053cc:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d4:	2280      	movs	r2, #128	@ 0x80
 80053d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053d8:	f3bf 8f4f 	dsb	sy
}
 80053dc:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e6:	d848      	bhi.n	800547a <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f8:	d21a      	bcs.n	8005430 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005404:	f3bf 8f4f 	dsb	sy
}
 8005408:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005416:	f3bf 8f4f 	dsb	sy
}
 800541a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	0a1a      	lsrs	r2, r3, #8
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800542a:	f3bf 8f4f 	dsb	sy
}
 800542e:	e07d      	b.n	800552c <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800543a:	f3bf 8f4f 	dsb	sy
}
 800543e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800544c:	f3bf 8f4f 	dsb	sy
}
 8005450:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	0a1a      	lsrs	r2, r3, #8
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005460:	f3bf 8f4f 	dsb	sy
}
 8005464:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	0c1a      	lsrs	r2, r3, #16
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005474:	f3bf 8f4f 	dsb	sy
}
 8005478:	e058      	b.n	800552c <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548a:	d222      	bcs.n	80054d2 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005496:	f3bf 8f4f 	dsb	sy
}
 800549a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054a6:	f3bf 8f4f 	dsb	sy
}
 80054aa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054b8:	f3bf 8f4f 	dsb	sy
}
 80054bc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	0a1a      	lsrs	r2, r3, #8
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054cc:	f3bf 8f4f 	dsb	sy
}
 80054d0:	e02c      	b.n	800552c <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054dc:	f3bf 8f4f 	dsb	sy
}
 80054e0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054ec:	f3bf 8f4f 	dsb	sy
}
 80054f0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054fe:	f3bf 8f4f 	dsb	sy
}
 8005502:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	0a1a      	lsrs	r2, r3, #8
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005512:	f3bf 8f4f 	dsb	sy
}
 8005516:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	0c1a      	lsrs	r2, r3, #16
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005526:	f3bf 8f4f 	dsb	sy
}
 800552a:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 800552c:	2300      	movs	r3, #0
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005530:	e00c      	b.n	800554c <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	701a      	strb	r2, [r3, #0]
        buff++;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3301      	adds	r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005540:	f3bf 8f4f 	dsb	sy
}
 8005544:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	3301      	adds	r3, #1
 800554a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005552:	429a      	cmp	r2, r3
 8005554:	d3ed      	bcc.n	8005532 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555c:	2210      	movs	r2, #16
 800555e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005560:	f3bf 8f4f 	dsb	sy
}
 8005564:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005566:	f7ff f8bd 	bl	80046e4 <HAL_GetTick>
 800556a:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800556c:	e011      	b.n	8005592 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 800556e:	f7ff f8b9 	bl	80046e4 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800557c:	d909      	bls.n	8005592 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2203      	movs	r2, #3
 8005582:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e026      	b.n	80055e0 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fba1 	bl	8005cda <HAL_NAND_Read_Status>
 8005598:	4603      	mov	r3, r0
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d1e7      	bne.n	800556e <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	3301      	adds	r3, #1
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	3301      	adds	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_NAND_Write_Page_8b+0x292>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	429a      	cmp	r2, r3
 80055c6:	f4ff aefa 	bcc.w	80053be <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	@ 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	@ 0x30
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d101      	bne.n	8005612 <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
 8005610:	e151      	b.n	80058b6 <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	f040 814a 	bne.w	80058b4 <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_NAND_Read_SpareArea_8b+0x46>
 800562a:	2302      	movs	r3, #2
 800562c:	e143      	b.n	80058b6 <HAL_NAND_Read_SpareArea_8b+0x2ce>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800563e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005642:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	889b      	ldrh	r3, [r3, #4]
 800564e:	461a      	mov	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	885b      	ldrh	r3, [r3, #2]
 8005654:	4618      	mov	r0, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	fb00 f303 	mul.w	r3, r0, r3
 800565e:	4413      	add	r3, r2
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	440b      	add	r3, r1
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005672:	e108      	b.n	8005886 <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567c:	d850      	bhi.n	8005720 <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005684:	2250      	movs	r2, #80	@ 0x50
 8005686:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005688:	f3bf 8f4f 	dsb	sy
}
 800568c:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569e:	d21a      	bcs.n	80056d6 <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80056aa:	f3bf 8f4f 	dsb	sy
}
 80056ae:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80056bc:	f3bf 8f4f 	dsb	sy
}
 80056c0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	0a1a      	lsrs	r2, r3, #8
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80056d0:	f3bf 8f4f 	dsb	sy
}
 80056d4:	e08b      	b.n	80057ee <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80056e0:	f3bf 8f4f 	dsb	sy
}
 80056e4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80056f2:	f3bf 8f4f 	dsb	sy
}
 80056f6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	0a1a      	lsrs	r2, r3, #8
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005706:	f3bf 8f4f 	dsb	sy
}
 800570a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	0c1a      	lsrs	r2, r3, #16
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800571a:	f3bf 8f4f 	dsb	sy
}
 800571e:	e066      	b.n	80057ee <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800572a:	f3bf 8f4f 	dsb	sy
}
 800572e:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005740:	d225      	bcs.n	800578e <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800574e:	f3bf 8f4f 	dsb	sy
}
 8005752:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	0a1a      	lsrs	r2, r3, #8
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005762:	f3bf 8f4f 	dsb	sy
}
 8005766:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005774:	f3bf 8f4f 	dsb	sy
}
 8005778:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	0a1a      	lsrs	r2, r3, #8
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005788:	f3bf 8f4f 	dsb	sy
}
 800578c:	e02f      	b.n	80057ee <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800579a:	f3bf 8f4f 	dsb	sy
}
 800579e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	0a1a      	lsrs	r2, r3, #8
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057ae:	f3bf 8f4f 	dsb	sy
}
 80057b2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057c0:	f3bf 8f4f 	dsb	sy
}
 80057c4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	0a1a      	lsrs	r2, r3, #8
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057d4:	f3bf 8f4f 	dsb	sy
}
 80057d8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	0c1a      	lsrs	r2, r3, #16
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057e8:	f3bf 8f4f 	dsb	sy
}
 80057ec:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f4:	2230      	movs	r2, #48	@ 0x30
 80057f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057f8:	f3bf 8f4f 	dsb	sy
}
 80057fc:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d123      	bne.n	8005850 <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005808:	f7fe ff6c 	bl	80046e4 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800580e:	e011      	b.n	8005834 <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005810:	f7fe ff68 	bl	80046e4 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800581e:	d909      	bls.n	8005834 <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2203      	movs	r2, #3
 8005824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e040      	b.n	80058b6 <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa50 	bl	8005cda <HAL_NAND_Read_Status>
 800583a:	4603      	mov	r3, r0
 800583c:	2b40      	cmp	r3, #64	@ 0x40
 800583e:	d1e7      	bne.n	8005810 <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800584a:	f3bf 8f4f 	dsb	sy
}
 800584e:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005850:	2300      	movs	r3, #0
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005854:	e009      	b.n	800586a <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	701a      	strb	r2, [r3, #0]
        buff++;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	3301      	adds	r3, #1
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d3f0      	bcc.n	8005856 <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	3301      	adds	r3, #1
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	3b01      	subs	r3, #1
 800587e:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	3301      	adds	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_NAND_Read_SpareArea_8b+0x2b8>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005894:	fb02 f303 	mul.w	r3, r2, r3
 8005898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589a:	429a      	cmp	r2, r3
 800589c:	f4ff aeea 	bcc.w	8005674 <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e000      	b.n	80058b6 <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3730      	adds	r7, #48	@ 0x30
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08c      	sub	sp, #48	@ 0x30
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d101      	bne.n	80058e8 <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
 80058e6:	e157      	b.n	8005b98 <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	f040 8150 	bne.w	8005b96 <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_NAND_Write_SpareArea_8b+0x46>
 8005900:	2302      	movs	r3, #2
 8005902:	e149      	b.n	8005b98 <HAL_NAND_Write_SpareArea_8b+0x2da>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005914:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005918:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	889b      	ldrh	r3, [r3, #4]
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	885b      	ldrh	r3, [r3, #2]
 800592a:	4618      	mov	r0, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	fb00 f303 	mul.w	r3, r0, r3
 8005934:	4413      	add	r3, r2
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	440b      	add	r3, r1
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005948:	e10e      	b.n	8005b68 <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005952:	d858      	bhi.n	8005a06 <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595a:	2250      	movs	r2, #80	@ 0x50
 800595c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800595e:	f3bf 8f4f 	dsb	sy
}
 8005962:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596a:	2280      	movs	r2, #128	@ 0x80
 800596c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800596e:	f3bf 8f4f 	dsb	sy
}
 8005972:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005984:	d21a      	bcs.n	80059bc <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005990:	f3bf 8f4f 	dsb	sy
}
 8005994:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80059a2:	f3bf 8f4f 	dsb	sy
}
 80059a6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	0a1a      	lsrs	r2, r3, #8
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80059b6:	f3bf 8f4f 	dsb	sy
}
 80059ba:	e093      	b.n	8005ae4 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80059c6:	f3bf 8f4f 	dsb	sy
}
 80059ca:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80059d8:	f3bf 8f4f 	dsb	sy
}
 80059dc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	0a1a      	lsrs	r2, r3, #8
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80059ec:	f3bf 8f4f 	dsb	sy
}
 80059f0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	0c1a      	lsrs	r2, r3, #16
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a00:	f3bf 8f4f 	dsb	sy
}
 8005a04:	e06e      	b.n	8005ae4 <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a10:	f3bf 8f4f 	dsb	sy
}
 8005a14:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a1c:	2280      	movs	r2, #128	@ 0x80
 8005a1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a20:	f3bf 8f4f 	dsb	sy
}
 8005a24:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a36:	d225      	bcs.n	8005a84 <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a44:	f3bf 8f4f 	dsb	sy
}
 8005a48:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	0a1a      	lsrs	r2, r3, #8
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a58:	f3bf 8f4f 	dsb	sy
}
 8005a5c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a6a:	f3bf 8f4f 	dsb	sy
}
 8005a6e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	0a1a      	lsrs	r2, r3, #8
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a7e:	f3bf 8f4f 	dsb	sy
}
 8005a82:	e02f      	b.n	8005ae4 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a90:	f3bf 8f4f 	dsb	sy
}
 8005a94:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	0a1a      	lsrs	r2, r3, #8
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005aa4:	f3bf 8f4f 	dsb	sy
}
 8005aa8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ab6:	f3bf 8f4f 	dsb	sy
}
 8005aba:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	0a1a      	lsrs	r2, r3, #8
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005aca:	f3bf 8f4f 	dsb	sy
}
 8005ace:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	0c1a      	lsrs	r2, r3, #16
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ade:	f3bf 8f4f 	dsb	sy
}
 8005ae2:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae8:	e00c      	b.n	8005b04 <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	7812      	ldrb	r2, [r2, #0]
 8005af0:	701a      	strb	r2, [r3, #0]
        buff++;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005af8:	f3bf 8f4f 	dsb	sy
}
 8005afc:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	3301      	adds	r3, #1
 8005b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3ed      	bcc.n	8005aea <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b14:	2210      	movs	r2, #16
 8005b16:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b18:	f3bf 8f4f 	dsb	sy
}
 8005b1c:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005b1e:	f7fe fde1 	bl	80046e4 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005b24:	e011      	b.n	8005b4a <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005b26:	f7fe fddd 	bl	80046e4 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b34:	d909      	bls.n	8005b4a <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e026      	b.n	8005b98 <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f8c5 	bl	8005cda <HAL_NAND_Read_Status>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b40      	cmp	r3, #64	@ 0x40
 8005b54:	d1e7      	bne.n	8005b26 <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	3301      	adds	r3, #1
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	3301      	adds	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <HAL_NAND_Write_SpareArea_8b+0x2c4>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	f4ff aee4 	bcc.w	800594a <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3730      	adds	r7, #48	@ 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d101      	bne.n	8005bba <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e089      	b.n	8005cce <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	f040 8082 	bne.w	8005ccc <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_NAND_Erase_Block+0x36>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e07b      	b.n	8005cce <HAL_NAND_Erase_Block+0x12e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005be6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005bea:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf2:	2260      	movs	r2, #96	@ 0x60
 8005bf4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bf6:	f3bf 8f4f 	dsb	sy
}
 8005bfa:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	889b      	ldrh	r3, [r3, #4]
 8005c06:	4619      	mov	r1, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	fb00 f303 	mul.w	r3, r0, r3
 8005c16:	440b      	add	r3, r1
 8005c18:	b2d9      	uxtb	r1, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	fb11 f303 	smulbb	r3, r1, r3
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005c2c:	4413      	add	r3, r2
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c32:	f3bf 8f4f 	dsb	sy
}
 8005c36:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	889b      	ldrh	r3, [r3, #4]
 8005c42:	461a      	mov	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	885b      	ldrh	r3, [r3, #2]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	fb00 f303 	mul.w	r3, r0, r3
 8005c52:	4413      	add	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
 8005c5c:	440b      	add	r3, r1
 8005c5e:	0a1a      	lsrs	r2, r3, #8
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c6a:	f3bf 8f4f 	dsb	sy
}
 8005c6e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	889b      	ldrh	r3, [r3, #4]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	885b      	ldrh	r3, [r3, #2]
 8005c80:	4618      	mov	r0, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	fb00 f303 	mul.w	r3, r0, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	440b      	add	r3, r1
 8005c96:	0c1a      	lsrs	r2, r3, #16
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca2:	f3bf 8f4f 	dsb	sy
}
 8005ca6:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cae:	22d0      	movs	r2, #208	@ 0xd0
 8005cb0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cb2:	f3bf 8f4f 	dsb	sy
}
 8005cb6:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8005ce2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cee:	2270      	movs	r2, #112	@ 0x70
 8005cf0:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e007      	b.n	8005d18 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005d12:	2340      	movs	r3, #64	@ 0x40
 8005d14:	e000      	b.n	8005d18 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005d16:	2300      	movs	r3, #0
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f000 bc28 	b.w	8006588 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d38:	4b94      	ldr	r3, [pc, #592]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f003 0318 	and.w	r3, r3, #24
 8005d40:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005d42:	4b92      	ldr	r3, [pc, #584]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d005      	beq.n	8005d6a <HAL_RCC_OscConfig+0x46>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b18      	cmp	r3, #24
 8005d62:	d114      	bne.n	8005d8e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d111      	bne.n	8005d8e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f000 bc08 	b.w	8006588 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005d78:	4b84      	ldr	r3, [pc, #528]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	4981      	ldr	r1, [pc, #516]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005d8c:	e040      	b.n	8005e10 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d023      	beq.n	8005dde <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d96:	4b7d      	ldr	r3, [pc, #500]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fe fc9f 	bl	80046e4 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005daa:	f7fe fc9b 	bl	80046e4 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e3e5      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005dbc:	4b73      	ldr	r3, [pc, #460]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0f0      	beq.n	8005daa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005dc8:	4b70      	ldr	r3, [pc, #448]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	496d      	ldr	r1, [pc, #436]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	618b      	str	r3, [r1, #24]
 8005ddc:	e018      	b.n	8005e10 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005dde:	4b6b      	ldr	r3, [pc, #428]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6a      	ldr	r2, [pc, #424]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fe fc7b 	bl	80046e4 <HAL_GetTick>
 8005dee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005df2:	f7fe fc77 	bl	80046e4 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e3c1      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005e04:	4b61      	ldr	r3, [pc, #388]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80a0 	beq.w	8005f5e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_OscConfig+0x10c>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b18      	cmp	r3, #24
 8005e28:	d109      	bne.n	8005e3e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d106      	bne.n	8005e3e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8092 	bne.w	8005f5e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e3a4      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x132>
 8005e48:	4b50      	ldr	r3, [pc, #320]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	e058      	b.n	8005f08 <HAL_RCC_OscConfig+0x1e4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d112      	bne.n	8005e84 <HAL_RCC_OscConfig+0x160>
 8005e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a4a      	ldr	r2, [pc, #296]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b48      	ldr	r3, [pc, #288]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a47      	ldr	r2, [pc, #284]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	4b45      	ldr	r3, [pc, #276]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a44      	ldr	r2, [pc, #272]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e041      	b.n	8005f08 <HAL_RCC_OscConfig+0x1e4>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e8c:	d112      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x190>
 8005e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3e      	ldr	r2, [pc, #248]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ea0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4b39      	ldr	r3, [pc, #228]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a38      	ldr	r2, [pc, #224]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e029      	b.n	8005f08 <HAL_RCC_OscConfig+0x1e4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005ebc:	d112      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x1c0>
 8005ebe:	4b33      	ldr	r3, [pc, #204]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a32      	ldr	r2, [pc, #200]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4b30      	ldr	r3, [pc, #192]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2f      	ldr	r2, [pc, #188]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ed0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a2c      	ldr	r2, [pc, #176]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e011      	b.n	8005f08 <HAL_RCC_OscConfig+0x1e4>
 8005ee4:	4b29      	ldr	r3, [pc, #164]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a28      	ldr	r2, [pc, #160]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b26      	ldr	r3, [pc, #152]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	4b23      	ldr	r3, [pc, #140]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a22      	ldr	r2, [pc, #136]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005f02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fe fbe8 	bl	80046e4 <HAL_GetTick>
 8005f14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005f18:	f7fe fbe4 	bl	80046e4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	@ 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e32e      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f2a:	4b18      	ldr	r3, [pc, #96]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x1f4>
 8005f36:	e012      	b.n	8005f5e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fe fbd4 	bl	80046e4 <HAL_GetTick>
 8005f3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005f40:	f7fe fbd0 	bl	80046e4 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b64      	cmp	r3, #100	@ 0x64
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e31a      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f52:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <HAL_RCC_OscConfig+0x268>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 809a 	beq.w	80060a0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCC_OscConfig+0x25a>
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b18      	cmp	r3, #24
 8005f76:	d149      	bne.n	800600c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d146      	bne.n	800600c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e2fe      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
 8005f8a:	bf00      	nop
 8005f8c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d11c      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005f96:	4b9a      	ldr	r3, [pc, #616]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0218 	and.w	r2, r3, #24
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d014      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005fa6:	4b96      	ldr	r3, [pc, #600]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f023 0218 	bic.w	r2, r3, #24
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	4993      	ldr	r1, [pc, #588]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005fb8:	f000 fdd0 	bl	8006b5c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fbc:	4b91      	ldr	r3, [pc, #580]	@ (8006204 <HAL_RCC_OscConfig+0x4e0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fb05 	bl	80045d0 <HAL_InitTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e2db      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fe fb88 	bl	80046e4 <HAL_GetTick>
 8005fd4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005fd8:	f7fe fb84 	bl	80046e4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e2ce      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fea:	4b85      	ldr	r3, [pc, #532]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005ff6:	4b82      	ldr	r3, [pc, #520]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	497e      	ldr	r1, [pc, #504]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800600a:	e049      	b.n	80060a0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02c      	beq.n	800606e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006014:	4b7a      	ldr	r3, [pc, #488]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 0218 	bic.w	r2, r3, #24
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	4977      	ldr	r1, [pc, #476]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8006026:	4b76      	ldr	r3, [pc, #472]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a75      	ldr	r2, [pc, #468]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fe fb57 	bl	80046e4 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800603a:	f7fe fb53 	bl	80046e4 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e29d      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800604c:	4b6c      	ldr	r3, [pc, #432]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f0      	beq.n	800603a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006058:	4b69      	ldr	r3, [pc, #420]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	4966      	ldr	r1, [pc, #408]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	610b      	str	r3, [r1, #16]
 800606c:	e018      	b.n	80060a0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800606e:	4b64      	ldr	r3, [pc, #400]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a63      	ldr	r2, [pc, #396]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fe fb33 	bl	80046e4 <HAL_GetTick>
 800607e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006082:	f7fe fb2f 	bl	80046e4 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e279      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006094:	4b5a      	ldr	r3, [pc, #360]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f0      	bne.n	8006082 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d03c      	beq.n	8006126 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01c      	beq.n	80060ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b4:	4b52      	ldr	r3, [pc, #328]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80060b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ba:	4a51      	ldr	r2, [pc, #324]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80060bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fe fb0e 	bl	80046e4 <HAL_GetTick>
 80060c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80060cc:	f7fe fb0a 	bl	80046e4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e254      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80060de:	4b48      	ldr	r3, [pc, #288]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80060e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0ef      	beq.n	80060cc <HAL_RCC_OscConfig+0x3a8>
 80060ec:	e01b      	b.n	8006126 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ee:	4b44      	ldr	r3, [pc, #272]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80060f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f4:	4a42      	ldr	r2, [pc, #264]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80060f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fe:	f7fe faf1 	bl	80046e4 <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006106:	f7fe faed 	bl	80046e4 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e237      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006118:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 800611a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800611e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ef      	bne.n	8006106 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80d2 	beq.w	80062d8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006134:	4b34      	ldr	r3, [pc, #208]	@ (8006208 <HAL_RCC_OscConfig+0x4e4>)
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d118      	bne.n	8006172 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006140:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_RCC_OscConfig+0x4e4>)
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <HAL_RCC_OscConfig+0x4e4>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800614c:	f7fe faca 	bl	80046e4 <HAL_GetTick>
 8006150:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006154:	f7fe fac6 	bl	80046e4 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e210      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006166:	4b28      	ldr	r3, [pc, #160]	@ (8006208 <HAL_RCC_OscConfig+0x4e4>)
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d108      	bne.n	800618c <HAL_RCC_OscConfig+0x468>
 800617a:	4b21      	ldr	r3, [pc, #132]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 800617c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006180:	4a1f      	ldr	r2, [pc, #124]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800618a:	e074      	b.n	8006276 <HAL_RCC_OscConfig+0x552>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d118      	bne.n	80061c6 <HAL_RCC_OscConfig+0x4a2>
 8006194:	4b1a      	ldr	r3, [pc, #104]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 8006196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800619a:	4a19      	ldr	r2, [pc, #100]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061a4:	4b16      	ldr	r3, [pc, #88]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061aa:	4a15      	ldr	r2, [pc, #84]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061b4:	4b12      	ldr	r3, [pc, #72]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061ba:	4a11      	ldr	r2, [pc, #68]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061bc:	f023 0304 	bic.w	r3, r3, #4
 80061c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061c4:	e057      	b.n	8006276 <HAL_RCC_OscConfig+0x552>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	d11e      	bne.n	800620c <HAL_RCC_OscConfig+0x4e8>
 80061ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061de:	4b08      	ldr	r3, [pc, #32]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e4:	4a06      	ldr	r2, [pc, #24]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061ee:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f4:	4a02      	ldr	r2, [pc, #8]	@ (8006200 <HAL_RCC_OscConfig+0x4dc>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061fe:	e03a      	b.n	8006276 <HAL_RCC_OscConfig+0x552>
 8006200:	44020c00 	.word	0x44020c00
 8006204:	2000002c 	.word	0x2000002c
 8006208:	44020800 	.word	0x44020800
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b85      	cmp	r3, #133	@ 0x85
 8006212:	d118      	bne.n	8006246 <HAL_RCC_OscConfig+0x522>
 8006214:	4ba2      	ldr	r3, [pc, #648]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800621a:	4aa1      	ldr	r2, [pc, #644]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800621c:	f043 0304 	orr.w	r3, r3, #4
 8006220:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006224:	4b9e      	ldr	r3, [pc, #632]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800622a:	4a9d      	ldr	r2, [pc, #628]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800622c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006230:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006234:	4b9a      	ldr	r3, [pc, #616]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800623a:	4a99      	ldr	r2, [pc, #612]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006244:	e017      	b.n	8006276 <HAL_RCC_OscConfig+0x552>
 8006246:	4b96      	ldr	r3, [pc, #600]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800624c:	4a94      	ldr	r2, [pc, #592]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006256:	4b92      	ldr	r3, [pc, #584]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800625c:	4a90      	ldr	r2, [pc, #576]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800625e:	f023 0304 	bic.w	r3, r3, #4
 8006262:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006266:	4b8e      	ldr	r3, [pc, #568]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800626c:	4a8c      	ldr	r2, [pc, #560]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800626e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006272:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627e:	f7fe fa31 	bl	80046e4 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006284:	e00a      	b.n	800629c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fe fa2d 	bl	80046e4 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e175      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800629c:	4b80      	ldr	r3, [pc, #512]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800629e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0ed      	beq.n	8006286 <HAL_RCC_OscConfig+0x562>
 80062aa:	e015      	b.n	80062d8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fe fa1a 	bl	80046e4 <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b4:	f7fe fa16 	bl	80046e4 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e15e      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062ca:	4b75      	ldr	r3, [pc, #468]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80062cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1ed      	bne.n	80062b4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d036      	beq.n	8006352 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d019      	beq.n	8006320 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062ec:	4b6c      	ldr	r3, [pc, #432]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a6b      	ldr	r2, [pc, #428]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80062f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7fe f9f4 	bl	80046e4 <HAL_GetTick>
 80062fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006300:	f7fe f9f0 	bl	80046e4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e13a      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006312:	4b63      	ldr	r3, [pc, #396]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0x5dc>
 800631e:	e018      	b.n	8006352 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006320:	4b5f      	ldr	r3, [pc, #380]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5e      	ldr	r2, [pc, #376]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fe f9da 	bl	80046e4 <HAL_GetTick>
 8006330:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006334:	f7fe f9d6 	bl	80046e4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e120      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006346:	4b56      	ldr	r3, [pc, #344]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8115 	beq.w	8006586 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b18      	cmp	r3, #24
 8006360:	f000 80af 	beq.w	80064c2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	2b02      	cmp	r3, #2
 800636a:	f040 8086 	bne.w	800647a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800636e:	4b4c      	ldr	r3, [pc, #304]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a4b      	ldr	r2, [pc, #300]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637a:	f7fe f9b3 	bl	80046e4 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006382:	f7fe f9af 	bl	80046e4 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e0f9      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006394:	4b42      	ldr	r3, [pc, #264]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80063a0:	4b3f      	ldr	r3, [pc, #252]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063b4:	0212      	lsls	r2, r2, #8
 80063b6:	430a      	orrs	r2, r1
 80063b8:	4939      	ldr	r1, [pc, #228]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c2:	3b01      	subs	r3, #1
 80063c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	3b01      	subs	r3, #1
 80063ce:	025b      	lsls	r3, r3, #9
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d8:	3b01      	subs	r3, #1
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	3b01      	subs	r3, #1
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063ee:	492c      	ldr	r1, [pc, #176]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80063f4:	4b2a      	ldr	r3, [pc, #168]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	4a29      	ldr	r2, [pc, #164]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006404:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800640a:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	4a24      	ldr	r2, [pc, #144]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006410:	f043 0310 	orr.w	r3, r3, #16
 8006414:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006416:	4b22      	ldr	r3, [pc, #136]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	f023 020c 	bic.w	r2, r3, #12
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006422:	491f      	ldr	r1, [pc, #124]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006428:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	f023 0220 	bic.w	r2, r3, #32
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006434:	491a      	ldr	r1, [pc, #104]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006436:	4313      	orrs	r3, r2
 8006438:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800643a:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800643c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643e:	4a18      	ldr	r2, [pc, #96]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006444:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006446:	4b16      	ldr	r3, [pc, #88]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a15      	ldr	r2, [pc, #84]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800644c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006452:	f7fe f947 	bl	80046e4 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800645a:	f7fe f943 	bl	80046e4 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e08d      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800646c:	4b0c      	ldr	r3, [pc, #48]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCC_OscConfig+0x736>
 8006478:	e085      	b.n	8006586 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a08      	ldr	r2, [pc, #32]	@ (80064a0 <HAL_RCC_OscConfig+0x77c>)
 8006480:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fe f92d 	bl	80046e4 <HAL_GetTick>
 800648a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800648c:	e00a      	b.n	80064a4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800648e:	f7fe f929 	bl	80046e4 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d903      	bls.n	80064a4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e073      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
 80064a0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1ee      	bne.n	800648e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80064b0:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	4a36      	ldr	r2, [pc, #216]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 80064b6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	6293      	str	r3, [r2, #40]	@ 0x28
 80064c0:	e061      	b.n	8006586 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80064c2:	4b33      	ldr	r3, [pc, #204]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 80064c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064c8:	4b31      	ldr	r3, [pc, #196]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 80064ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064cc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d031      	beq.n	800653a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f003 0203 	and.w	r2, r3, #3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d12a      	bne.n	800653a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d122      	bne.n	800653a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d11a      	bne.n	800653a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	0a5b      	lsrs	r3, r3, #9
 8006508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006510:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d111      	bne.n	800653a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006522:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d108      	bne.n	800653a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	0e1b      	lsrs	r3, r3, #24
 800652c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006534:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d001      	beq.n	800653e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e024      	b.n	8006588 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800653e:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 8006540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800654c:	429a      	cmp	r2, r3
 800654e:	d01a      	beq.n	8006586 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006550:	4b0f      	ldr	r3, [pc, #60]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	4a0e      	ldr	r2, [pc, #56]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 8006556:	f023 0310 	bic.w	r3, r3, #16
 800655a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fe f8c2 	bl	80046e4 <HAL_GetTick>
 8006560:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006562:	bf00      	nop
 8006564:	f7fe f8be 	bl	80046e4 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4293      	cmp	r3, r2
 800656e:	d0f9      	beq.n	8006564 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006574:	4a06      	ldr	r2, [pc, #24]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 800657c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657e:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <HAL_RCC_OscConfig+0x86c>)
 8006580:	f043 0310 	orr.w	r3, r3, #16
 8006584:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	44020c00 	.word	0x44020c00

08006594 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e19e      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a8:	4b83      	ldr	r3, [pc, #524]	@ (80067b8 <HAL_RCC_ClockConfig+0x224>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d910      	bls.n	80065d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b6:	4b80      	ldr	r3, [pc, #512]	@ (80067b8 <HAL_RCC_ClockConfig+0x224>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 020f 	bic.w	r2, r3, #15
 80065be:	497e      	ldr	r1, [pc, #504]	@ (80067b8 <HAL_RCC_ClockConfig+0x224>)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c6:	4b7c      	ldr	r3, [pc, #496]	@ (80067b8 <HAL_RCC_ClockConfig+0x224>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e186      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d012      	beq.n	800660a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	4b74      	ldr	r3, [pc, #464]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d909      	bls.n	800660a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80065f6:	4b71      	ldr	r3, [pc, #452]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	496d      	ldr	r1, [pc, #436]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006606:	4313      	orrs	r3, r2
 8006608:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d012      	beq.n	800663c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	4b68      	ldr	r3, [pc, #416]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006624:	429a      	cmp	r2, r3
 8006626:	d909      	bls.n	800663c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006628:	4b64      	ldr	r3, [pc, #400]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4961      	ldr	r1, [pc, #388]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006638:	4313      	orrs	r3, r2
 800663a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	4b5b      	ldr	r3, [pc, #364]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006654:	429a      	cmp	r2, r3
 8006656:	d908      	bls.n	800666a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006658:	4b58      	ldr	r3, [pc, #352]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4955      	ldr	r1, [pc, #340]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006666:	4313      	orrs	r3, r2
 8006668:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d010      	beq.n	8006698 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	4b50      	ldr	r3, [pc, #320]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	429a      	cmp	r2, r3
 8006684:	d908      	bls.n	8006698 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006686:	4b4d      	ldr	r3, [pc, #308]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f023 020f 	bic.w	r2, r3, #15
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	494a      	ldr	r1, [pc, #296]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006694:	4313      	orrs	r3, r2
 8006696:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8093 	beq.w	80067cc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d107      	bne.n	80066be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80066ae:	4b43      	ldr	r3, [pc, #268]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d121      	bne.n	80066fe <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e113      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d107      	bne.n	80066d6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c6:	4b3d      	ldr	r3, [pc, #244]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d115      	bne.n	80066fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e107      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d107      	bne.n	80066ee <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80066de:	4b37      	ldr	r3, [pc, #220]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e0fb      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066ee:	4b33      	ldr	r3, [pc, #204]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e0f3      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80066fe:	4b2f      	ldr	r3, [pc, #188]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f023 0203 	bic.w	r2, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	492c      	ldr	r1, [pc, #176]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 800670c:	4313      	orrs	r3, r2
 800670e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006710:	f7fd ffe8 	bl	80046e4 <HAL_GetTick>
 8006714:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b03      	cmp	r3, #3
 800671c:	d112      	bne.n	8006744 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800671e:	e00a      	b.n	8006736 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006720:	f7fd ffe0 	bl	80046e4 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e0d7      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006736:	4b21      	ldr	r3, [pc, #132]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0318 	and.w	r3, r3, #24
 800673e:	2b18      	cmp	r3, #24
 8006740:	d1ee      	bne.n	8006720 <HAL_RCC_ClockConfig+0x18c>
 8006742:	e043      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d112      	bne.n	8006772 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800674c:	e00a      	b.n	8006764 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800674e:	f7fd ffc9 	bl	80046e4 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e0c0      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006764:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f003 0318 	and.w	r3, r3, #24
 800676c:	2b10      	cmp	r3, #16
 800676e:	d1ee      	bne.n	800674e <HAL_RCC_ClockConfig+0x1ba>
 8006770:	e02c      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d122      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800677a:	e00a      	b.n	8006792 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800677c:	f7fd ffb2 	bl	80046e4 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e0a9      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006792:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <HAL_RCC_ClockConfig+0x228>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0318 	and.w	r3, r3, #24
 800679a:	2b08      	cmp	r3, #8
 800679c:	d1ee      	bne.n	800677c <HAL_RCC_ClockConfig+0x1e8>
 800679e:	e015      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067a0:	f7fd ffa0 	bl	80046e4 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d906      	bls.n	80067c0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e097      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
 80067b6:	bf00      	nop
 80067b8:	40022000 	.word	0x40022000
 80067bc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80067c0:	4b4b      	ldr	r3, [pc, #300]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f003 0318 	and.w	r3, r3, #24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e9      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	4b44      	ldr	r3, [pc, #272]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d208      	bcs.n	80067fa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80067e8:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f023 020f 	bic.w	r2, r3, #15
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	493e      	ldr	r1, [pc, #248]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067fa:	4b3e      	ldr	r3, [pc, #248]	@ (80068f4 <HAL_RCC_ClockConfig+0x360>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d210      	bcs.n	800682a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006808:	4b3a      	ldr	r3, [pc, #232]	@ (80068f4 <HAL_RCC_ClockConfig+0x360>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 020f 	bic.w	r2, r3, #15
 8006810:	4938      	ldr	r1, [pc, #224]	@ (80068f4 <HAL_RCC_ClockConfig+0x360>)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006818:	4b36      	ldr	r3, [pc, #216]	@ (80068f4 <HAL_RCC_ClockConfig+0x360>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d001      	beq.n	800682a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e05d      	b.n	80068e6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d010      	beq.n	8006858 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	4b2d      	ldr	r3, [pc, #180]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006842:	429a      	cmp	r2, r3
 8006844:	d208      	bcs.n	8006858 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006846:	4b2a      	ldr	r3, [pc, #168]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	4927      	ldr	r1, [pc, #156]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d012      	beq.n	800688a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	4b21      	ldr	r3, [pc, #132]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006872:	429a      	cmp	r2, r3
 8006874:	d209      	bcs.n	800688a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006876:	4b1e      	ldr	r3, [pc, #120]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	491a      	ldr	r1, [pc, #104]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b00      	cmp	r3, #0
 8006894:	d012      	beq.n	80068bc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	4b15      	ldr	r3, [pc, #84]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d209      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80068a8:	4b11      	ldr	r3, [pc, #68]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	490e      	ldr	r1, [pc, #56]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80068bc:	f000 f822 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	490b      	ldr	r1, [pc, #44]	@ (80068f8 <HAL_RCC_ClockConfig+0x364>)
 80068cc:	5ccb      	ldrb	r3, [r1, r3]
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	4a0a      	ldr	r2, [pc, #40]	@ (80068fc <HAL_RCC_ClockConfig+0x368>)
 80068d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006900 <HAL_RCC_ClockConfig+0x36c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd fe78 	bl	80045d0 <HAL_InitTick>
 80068e0:	4603      	mov	r3, r0
 80068e2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80068e4:	7afb      	ldrb	r3, [r7, #11]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	44020c00 	.word	0x44020c00
 80068f4:	40022000 	.word	0x40022000
 80068f8:	08012318 	.word	0x08012318
 80068fc:	20000028 	.word	0x20000028
 8006900:	2000002c 	.word	0x2000002c

08006904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	@ 0x24
 8006908:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800690a:	4b8c      	ldr	r3, [pc, #560]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f003 0318 	and.w	r3, r3, #24
 8006912:	2b08      	cmp	r3, #8
 8006914:	d102      	bne.n	800691c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006916:	4b8a      	ldr	r3, [pc, #552]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	e107      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800691c:	4b87      	ldr	r3, [pc, #540]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f003 0318 	and.w	r3, r3, #24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d112      	bne.n	800694e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006928:	4b84      	ldr	r3, [pc, #528]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006934:	4b81      	ldr	r3, [pc, #516]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	08db      	lsrs	r3, r3, #3
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	4a81      	ldr	r2, [pc, #516]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x240>)
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e0f1      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006948:	4b7e      	ldr	r3, [pc, #504]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x240>)
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e0ee      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800694e:	4b7b      	ldr	r3, [pc, #492]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f003 0318 	and.w	r3, r3, #24
 8006956:	2b10      	cmp	r3, #16
 8006958:	d102      	bne.n	8006960 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800695a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x244>)
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e0e5      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006960:	4b76      	ldr	r3, [pc, #472]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f003 0318 	and.w	r3, r3, #24
 8006968:	2b18      	cmp	r3, #24
 800696a:	f040 80dd 	bne.w	8006b28 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800696e:	4b73      	ldr	r3, [pc, #460]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006978:	4b70      	ldr	r3, [pc, #448]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	0a1b      	lsrs	r3, r3, #8
 800697e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006982:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006984:	4b6d      	ldr	r3, [pc, #436]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006990:	4b6a      	ldr	r3, [pc, #424]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	fb02 f303 	mul.w	r3, r2, r3
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80b7 	beq.w	8006b22 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d003      	beq.n	80069c2 <HAL_RCC_GetSysClockFreq+0xbe>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d056      	beq.n	8006a6e <HAL_RCC_GetSysClockFreq+0x16a>
 80069c0:	e077      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80069c2:	4b5e      	ldr	r3, [pc, #376]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d02d      	beq.n	8006a2a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069ce:	4b5b      	ldr	r3, [pc, #364]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x240>)
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f8:	4b50      	ldr	r3, [pc, #320]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 80069fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a08:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x248>
 8006a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a24:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006a28:	e065      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a34:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x24c>
 8006a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a50:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x248>
 8006a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a68:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006a6c:	e043      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a78:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006b54 <HAL_RCC_GetSysClockFreq+0x250>
 8006a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a80:	4b2e      	ldr	r3, [pc, #184]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a88:	ee07 3a90 	vmov	s15, r3
 8006a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a90:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a94:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x248>
 8006a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006ab0:	e021      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b58 <HAL_RCC_GetSysClockFreq+0x254>
 8006ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ad4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006b4c <HAL_RCC_GetSysClockFreq+0x248>
 8006adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ae4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006af4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006af6:	4b11      	ldr	r3, [pc, #68]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x238>)
 8006af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afa:	0a5b      	lsrs	r3, r3, #9
 8006afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b00:	3301      	adds	r3, #1
 8006b02:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b0e:	edd7 6a06 	vldr	s13, [r7, #24]
 8006b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1a:	ee17 3a90 	vmov	r3, s15
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	e004      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	e001      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006b28:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x240>)
 8006b2a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	44020c00 	.word	0x44020c00
 8006b40:	003d0900 	.word	0x003d0900
 8006b44:	03d09000 	.word	0x03d09000
 8006b48:	017d7840 	.word	0x017d7840
 8006b4c:	46000000 	.word	0x46000000
 8006b50:	4c742400 	.word	0x4c742400
 8006b54:	4bbebc20 	.word	0x4bbebc20
 8006b58:	4a742400 	.word	0x4a742400

08006b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006b60:	f7ff fed0 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b08      	ldr	r3, [pc, #32]	@ (8006b88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006b68:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006b6a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006b6e:	4907      	ldr	r1, [pc, #28]	@ (8006b8c <HAL_RCC_GetHCLKFreq+0x30>)
 8006b70:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006b72:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	4a05      	ldr	r2, [pc, #20]	@ (8006b90 <HAL_RCC_GetHCLKFreq+0x34>)
 8006b7c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006b7e:	4b04      	ldr	r3, [pc, #16]	@ (8006b90 <HAL_RCC_GetHCLKFreq+0x34>)
 8006b80:	681b      	ldr	r3, [r3, #0]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	44020c00 	.word	0x44020c00
 8006b8c:	08012318 	.word	0x08012318
 8006b90:	20000028 	.word	0x20000028

08006b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006b98:	f7ff ffe0 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4904      	ldr	r1, [pc, #16]	@ (8006bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	f003 031f 	and.w	r3, r3, #31
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	44020c00 	.word	0x44020c00
 8006bbc:	08012328 	.word	0x08012328

08006bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006bc4:	f7ff ffca 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4b06      	ldr	r3, [pc, #24]	@ (8006be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	4904      	ldr	r1, [pc, #16]	@ (8006be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bd6:	5ccb      	ldrb	r3, [r1, r3]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	44020c00 	.word	0x44020c00
 8006be8:	08012328 	.word	0x08012328

08006bec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006bf0:	f7ff ffb4 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	0b1b      	lsrs	r3, r3, #12
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4904      	ldr	r1, [pc, #16]	@ (8006c14 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	44020c00 	.word	0x44020c00
 8006c14:	08012328 	.word	0x08012328

08006c18 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c1c:	b0d8      	sub	sp, #352	@ 0x160
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	ea54 0305 	orrs.w	r3, r4, r5
 8006c42:	d00b      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006c44:	4bcd      	ldr	r3, [pc, #820]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c4a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c54:	4ac9      	ldr	r2, [pc, #804]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f002 0801 	and.w	r8, r2, #1
 8006c68:	f04f 0900 	mov.w	r9, #0
 8006c6c:	ea58 0309 	orrs.w	r3, r8, r9
 8006c70:	d042      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d823      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006ccd 	.word	0x08006ccd
 8006c88:	08006c9d 	.word	0x08006c9d
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006ccd 	.word	0x08006ccd
 8006c94:	08006ccd 	.word	0x08006ccd
 8006c98:	08006ccd 	.word	0x08006ccd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f004 feda 	bl	800ba5c <RCCEx_PLL2_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006cae:	e00e      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cb4:	3330      	adds	r3, #48	@ 0x30
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f004 ff68 	bl	800bb8c <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10c      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006cd6:	4ba9      	ldr	r3, [pc, #676]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006cdc:	f023 0107 	bic.w	r1, r3, #7
 8006ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce6:	4aa5      	ldr	r2, [pc, #660]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cee:	e003      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f002 0a02 	and.w	sl, r2, #2
 8006d04:	f04f 0b00 	mov.w	fp, #0
 8006d08:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d0c:	f000 8088 	beq.w	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));


    switch (pPeriphClkInit->Usart2ClockSelection)
 8006d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d16:	2b28      	cmp	r3, #40	@ 0x28
 8006d18:	d868      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006df5 	.word	0x08006df5
 8006d24:	08006ded 	.word	0x08006ded
 8006d28:	08006ded 	.word	0x08006ded
 8006d2c:	08006ded 	.word	0x08006ded
 8006d30:	08006ded 	.word	0x08006ded
 8006d34:	08006ded 	.word	0x08006ded
 8006d38:	08006ded 	.word	0x08006ded
 8006d3c:	08006ded 	.word	0x08006ded
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006ded 	.word	0x08006ded
 8006d48:	08006ded 	.word	0x08006ded
 8006d4c:	08006ded 	.word	0x08006ded
 8006d50:	08006ded 	.word	0x08006ded
 8006d54:	08006ded 	.word	0x08006ded
 8006d58:	08006ded 	.word	0x08006ded
 8006d5c:	08006ded 	.word	0x08006ded
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006ded 	.word	0x08006ded
 8006d68:	08006ded 	.word	0x08006ded
 8006d6c:	08006ded 	.word	0x08006ded
 8006d70:	08006ded 	.word	0x08006ded
 8006d74:	08006ded 	.word	0x08006ded
 8006d78:	08006ded 	.word	0x08006ded
 8006d7c:	08006ded 	.word	0x08006ded
 8006d80:	08006df5 	.word	0x08006df5
 8006d84:	08006ded 	.word	0x08006ded
 8006d88:	08006ded 	.word	0x08006ded
 8006d8c:	08006ded 	.word	0x08006ded
 8006d90:	08006ded 	.word	0x08006ded
 8006d94:	08006ded 	.word	0x08006ded
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006ded 	.word	0x08006ded
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006ded 	.word	0x08006ded
 8006da8:	08006ded 	.word	0x08006ded
 8006dac:	08006ded 	.word	0x08006ded
 8006db0:	08006ded 	.word	0x08006ded
 8006db4:	08006ded 	.word	0x08006ded
 8006db8:	08006ded 	.word	0x08006ded
 8006dbc:	08006ded 	.word	0x08006ded
 8006dc0:	08006df5 	.word	0x08006df5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dc8:	3308      	adds	r3, #8
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f004 fe46 	bl	800ba5c <RCCEx_PLL2_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006dd6:	e00e      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ddc:	3330      	adds	r3, #48	@ 0x30
 8006dde:	4618      	mov	r0, r3
 8006de0:	f004 fed4 	bl	800bb8c <RCCEx_PLL3_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006dea:	e004      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006df2:	e000      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e04:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e10:	430b      	orrs	r3, r1
 8006e12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e16:	e003      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f002 0304 	and.w	r3, r2, #4
 8006e2c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006e30:	2300      	movs	r3, #0
 8006e32:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006e36:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	d04e      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e46:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006e4a:	d02c      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006e4c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006e50:	d825      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e56:	d028      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5c:	d81f      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e60:	d025      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e64:	d81b      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006e66:	2b80      	cmp	r3, #128	@ 0x80
 8006e68:	d00f      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006e6a:	2b80      	cmp	r3, #128	@ 0x80
 8006e6c:	d817      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006e72:	2b40      	cmp	r3, #64	@ 0x40
 8006e74:	d113      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f004 fded 	bl	800ba5c <RCCEx_PLL2_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006e88:	e014      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e8e:	3330      	adds	r3, #48	@ 0x30
 8006e90:	4618      	mov	r0, r3
 8006e92:	f004 fe7b 	bl	800bb8c <RCCEx_PLL3_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ea4:	e006      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10c      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ec2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ede:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f002 0308 	and.w	r3, r2, #8
 8006eea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006ef4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	d056      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f04:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f08:	d031      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006f0a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f0e:	d82a      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f14:	d02d      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f1a:	d824      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f20:	d029      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006f22:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f26:	d81e      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2c:	d011      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f32:	d818      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d023      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f3c:	d113      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f42:	3308      	adds	r3, #8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f004 fd89 	bl	800ba5c <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006f50:	e017      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f56:	3330      	adds	r3, #48	@ 0x30
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f004 fe17 	bl	800bb8c <RCCEx_PLL3_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006f64:	e00d      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f6c:	e009      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006f6e:	bf00      	nop
 8006f70:	e007      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006f72:	bf00      	nop
 8006f74:	e005      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006f76:	bf00      	nop
 8006f78:	e003      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006f7a:	bf00      	nop
 8006f7c:	44020c00 	.word	0x44020c00
        break;
 8006f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006f8a:	4bbb      	ldr	r3, [pc, #748]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f90:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f9a:	4ab7      	ldr	r2, [pc, #732]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006fa2:	e003      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fa8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f002 0310 	and.w	r3, r2, #16
 8006fb8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006fc2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	d053      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fd6:	d031      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006fd8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fdc:	d82a      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe2:	d02d      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe8:	d824      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006fea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fee:	d029      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006ff0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ff4:	d81e      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ffa:	d011      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007000:	d818      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d020      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700a:	d113      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800700c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007010:	3308      	adds	r3, #8
 8007012:	4618      	mov	r0, r3
 8007014:	f004 fd22 	bl	800ba5c <RCCEx_PLL2_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800701e:	e014      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007020:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007024:	3330      	adds	r3, #48	@ 0x30
 8007026:	4618      	mov	r0, r3
 8007028:	f004 fdb0 	bl	800bb8c <RCCEx_PLL3_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007032:	e00a      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800703a:	e006      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800703c:	bf00      	nop
 800703e:	e004      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007040:	bf00      	nop
 8007042:	e002      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007044:	bf00      	nop
 8007046:	e000      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007052:	4b89      	ldr	r3, [pc, #548]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007058:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800705c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007062:	4a85      	ldr	r2, [pc, #532]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007064:	430b      	orrs	r3, r1
 8007066:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800706a:	e003      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007070:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f002 0320 	and.w	r3, r2, #32
 8007080:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007084:	2300      	movs	r3, #0
 8007086:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800708a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800708e:	460b      	mov	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	d053      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800709e:	d031      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80070a0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80070a4:	d82a      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80070a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070aa:	d02d      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80070ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070b0:	d824      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80070b2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80070b6:	d029      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80070b8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80070bc:	d81e      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80070be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c2:	d011      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80070c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c8:	d818      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d020      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80070ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070d2:	d113      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070d8:	3308      	adds	r3, #8
 80070da:	4618      	mov	r0, r3
 80070dc:	f004 fcbe 	bl	800ba5c <RCCEx_PLL2_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80070e6:	e014      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ec:	3330      	adds	r3, #48	@ 0x30
 80070ee:	4618      	mov	r0, r3
 80070f0:	f004 fd4c 	bl	800bb8c <RCCEx_PLL3_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80070fa:	e00a      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007102:	e006      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007104:	bf00      	nop
 8007106:	e004      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007112:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10c      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800711a:	4b57      	ldr	r3, [pc, #348]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800711c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007120:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712a:	4a53      	ldr	r2, [pc, #332]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800712c:	430b      	orrs	r3, r1
 800712e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007132:	e003      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007134:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007138:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800713c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007148:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800714c:	2300      	movs	r3, #0
 800714e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007152:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8007156:	460b      	mov	r3, r1
 8007158:	4313      	orrs	r3, r2
 800715a:	d053      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800715c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007162:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007166:	d031      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007168:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800716c:	d82a      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800716e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007172:	d02d      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007178:	d824      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800717a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800717e:	d029      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007180:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007184:	d81e      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007186:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800718a:	d011      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800718c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007190:	d818      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d020      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800719a:	d113      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800719c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a0:	3308      	adds	r3, #8
 80071a2:	4618      	mov	r0, r3
 80071a4:	f004 fc5a 	bl	800ba5c <RCCEx_PLL2_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80071ae:	e014      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071b4:	3330      	adds	r3, #48	@ 0x30
 80071b6:	4618      	mov	r0, r3
 80071b8:	f004 fce8 	bl	800bb8c <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80071c2:	e00a      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071ca:	e006      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80071cc:	bf00      	nop
 80071ce:	e004      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80071d0:	bf00      	nop
 80071d2:	e002      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80071d4:	bf00      	nop
 80071d6:	e000      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80071d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80071e2:	4b25      	ldr	r3, [pc, #148]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80071e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071e8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80071ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f2:	4a21      	ldr	r2, [pc, #132]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071fa:	e003      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007200:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007210:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007214:	2300      	movs	r3, #0
 8007216:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800721a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800721e:	460b      	mov	r3, r1
 8007220:	4313      	orrs	r3, r2
 8007222:	d055      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007228:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800722a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800722e:	d033      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007230:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007234:	d82c      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007236:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800723a:	d02f      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800723c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007240:	d826      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007242:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007246:	d02b      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007248:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800724c:	d820      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800724e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007252:	d013      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007258:	d81a      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d022      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800725e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007262:	d115      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007268:	3308      	adds	r3, #8
 800726a:	4618      	mov	r0, r3
 800726c:	f004 fbf6 	bl	800ba5c <RCCEx_PLL2_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007276:	e016      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007278:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800727c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007280:	3330      	adds	r3, #48	@ 0x30
 8007282:	4618      	mov	r0, r3
 8007284:	f004 fc82 	bl	800bb8c <RCCEx_PLL3_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800728e:	e00a      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007296:	e006      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007298:	bf00      	nop
 800729a:	e004      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800729c:	bf00      	nop
 800729e:	e002      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80072a0:	bf00      	nop
 80072a2:	e000      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80072a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10c      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80072ae:	4bbb      	ldr	r3, [pc, #748]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80072b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80072b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072be:	4ab7      	ldr	r2, [pc, #732]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80072c6:	e003      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80072d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80072dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80072e6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d053      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80072f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072fa:	d031      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80072fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007300:	d82a      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007306:	d02d      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007308:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800730c:	d824      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800730e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007312:	d029      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007314:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007318:	d81e      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800731a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800731e:	d011      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007324:	d818      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d020      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800732a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800732e:	d113      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007334:	3308      	adds	r3, #8
 8007336:	4618      	mov	r0, r3
 8007338:	f004 fb90 	bl	800ba5c <RCCEx_PLL2_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007342:	e014      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007348:	3330      	adds	r3, #48	@ 0x30
 800734a:	4618      	mov	r0, r3
 800734c:	f004 fc1e 	bl	800bb8c <RCCEx_PLL3_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007356:	e00a      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800735e:	e006      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007360:	bf00      	nop
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007364:	bf00      	nop
 8007366:	e002      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8007376:	4b89      	ldr	r3, [pc, #548]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800737c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007386:	4a85      	ldr	r2, [pc, #532]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007388:	430b      	orrs	r3, r1
 800738a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800738e:	e003      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007394:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80073a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80073a8:	2300      	movs	r3, #0
 80073aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80073ae:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80073b2:	460b      	mov	r3, r1
 80073b4:	4313      	orrs	r3, r2
 80073b6:	d055      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80073b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80073c4:	d031      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x812>
 80073c6:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80073ca:	d82a      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80073cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d0:	d02d      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80073d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d6:	d824      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80073d8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80073dc:	d029      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80073de:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80073e2:	d81e      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80073e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e8:	d011      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80073ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ee:	d818      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d020      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80073f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073f8:	d113      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073fe:	3308      	adds	r3, #8
 8007400:	4618      	mov	r0, r3
 8007402:	f004 fb2b 	bl	800ba5c <RCCEx_PLL2_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800740c:	e014      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800740e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007412:	3330      	adds	r3, #48	@ 0x30
 8007414:	4618      	mov	r0, r3
 8007416:	f004 fbb9 	bl	800bb8c <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007420:	e00a      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800742a:	bf00      	nop
 800742c:	e004      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800742e:	bf00      	nop
 8007430:	e002      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007438:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10d      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007440:	4b56      	ldr	r3, [pc, #344]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007442:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007446:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800744a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800744e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007452:	4a52      	ldr	r2, [pc, #328]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007454:	430b      	orrs	r3, r1
 8007456:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800745a:	e003      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007460:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007464:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007470:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007474:	2300      	movs	r3, #0
 8007476:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800747a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800747e:	460b      	mov	r3, r1
 8007480:	4313      	orrs	r3, r2
 8007482:	d044      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8007484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800748c:	2b05      	cmp	r3, #5
 800748e:	d823      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007490:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074b1 	.word	0x080074b1
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074e1 	.word	0x080074e1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074b4:	3308      	adds	r3, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f004 fad0 	bl	800ba5c <RCCEx_PLL2_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80074c2:	e00e      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074c8:	3330      	adds	r3, #48	@ 0x30
 80074ca:	4618      	mov	r0, r3
 80074cc:	f004 fb5e 	bl	800bb8c <RCCEx_PLL3_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80074d6:	e004      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80074e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10d      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80074ea:	4b2c      	ldr	r3, [pc, #176]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80074ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80074f0:	f023 0107 	bic.w	r1, r3, #7
 80074f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fc:	4a27      	ldr	r2, [pc, #156]	@ (800759c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80074fe:	430b      	orrs	r3, r1
 8007500:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007504:	e003      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800750a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800750e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800751a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800751e:	2300      	movs	r3, #0
 8007520:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007524:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007528:	460b      	mov	r3, r1
 800752a:	4313      	orrs	r3, r2
 800752c:	d04f      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800752e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	2b50      	cmp	r3, #80	@ 0x50
 8007538:	d029      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800753a:	2b50      	cmp	r3, #80	@ 0x50
 800753c:	d823      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800753e:	2b40      	cmp	r3, #64	@ 0x40
 8007540:	d027      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d81f      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007546:	2b30      	cmp	r3, #48	@ 0x30
 8007548:	d025      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800754a:	2b30      	cmp	r3, #48	@ 0x30
 800754c:	d81b      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800754e:	2b20      	cmp	r3, #32
 8007550:	d00f      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007552:	2b20      	cmp	r3, #32
 8007554:	d817      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d022      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800755a:	2b10      	cmp	r3, #16
 800755c:	d113      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800755e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007562:	3308      	adds	r3, #8
 8007564:	4618      	mov	r0, r3
 8007566:	f004 fa79 	bl	800ba5c <RCCEx_PLL2_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007570:	e017      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007572:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007576:	3330      	adds	r3, #48	@ 0x30
 8007578:	4618      	mov	r0, r3
 800757a:	f004 fb07 	bl	800bb8c <RCCEx_PLL3_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007584:	e00d      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800758c:	e009      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800758e:	bf00      	nop
 8007590:	e007      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007592:	bf00      	nop
 8007594:	e005      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007596:	bf00      	nop
 8007598:	e003      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800759a:	bf00      	nop
 800759c:	44020c00 	.word	0x44020c00
        break;
 80075a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10d      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80075aa:	4baf      	ldr	r3, [pc, #700]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075b0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80075b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075bc:	4aaa      	ldr	r2, [pc, #680]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80075c4:	e003      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80075da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075de:	2300      	movs	r3, #0
 80075e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4313      	orrs	r3, r2
 80075ec:	d055      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80075ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075fa:	d031      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80075fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007600:	d82a      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007606:	d02d      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800760c:	d824      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800760e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007612:	d029      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007614:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007618:	d81e      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800761a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800761e:	d011      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007624:	d818      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d020      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800762a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800762e:	d113      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007630:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007634:	3308      	adds	r3, #8
 8007636:	4618      	mov	r0, r3
 8007638:	f004 fa10 	bl	800ba5c <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007642:	e014      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007648:	3330      	adds	r3, #48	@ 0x30
 800764a:	4618      	mov	r0, r3
 800764c:	f004 fa9e 	bl	800bb8c <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007656:	e00a      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800765e:	e006      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007660:	bf00      	nop
 8007662:	e004      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10d      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007676:	4b7c      	ldr	r3, [pc, #496]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800767c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007688:	4a77      	ldr	r2, [pc, #476]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800768a:	430b      	orrs	r3, r1
 800768c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007690:	e003      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007696:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800769a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80076a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076aa:	2300      	movs	r3, #0
 80076ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076b4:	460b      	mov	r3, r1
 80076b6:	4313      	orrs	r3, r2
 80076b8:	d03d      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80076ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076c6:	d01b      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80076c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076cc:	d814      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80076ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d2:	d017      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80076d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d8:	d80e      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d014      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80076de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e2:	d109      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076e8:	3330      	adds	r3, #48	@ 0x30
 80076ea:	4618      	mov	r0, r3
 80076ec:	f004 fa4e 	bl	800bb8c <RCCEx_PLL3_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80076f6:	e008      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076fe:	e004      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007700:	bf00      	nop
 8007702:	e002      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007704:	bf00      	nop
 8007706:	e000      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10d      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007712:	4b55      	ldr	r3, [pc, #340]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007718:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800771c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007724:	4a50      	ldr	r2, [pc, #320]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007726:	430b      	orrs	r3, r1
 8007728:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007732:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007736:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007742:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800774c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d03d      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800775a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800775e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007762:	d01b      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007764:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007768:	d814      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800776a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800776e:	d017      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007770:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007774:	d80e      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800777a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800777e:	d109      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007784:	3330      	adds	r3, #48	@ 0x30
 8007786:	4618      	mov	r0, r3
 8007788:	f004 fa00 	bl	800bb8c <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007792:	e008      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80077a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10d      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80077ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80077b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077b4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80077b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c0:	4a29      	ldr	r2, [pc, #164]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80077c2:	430b      	orrs	r3, r1
 80077c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077e2:	2300      	movs	r3, #0
 80077e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077ec:	460b      	mov	r3, r1
 80077ee:	4313      	orrs	r3, r2
 80077f0:	d040      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80077f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077fe:	d01b      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007804:	d814      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800780a:	d017      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800780c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007810:	d80e      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d014      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800781a:	d109      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800781c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007820:	3330      	adds	r3, #48	@ 0x30
 8007822:	4618      	mov	r0, r3
 8007824:	f004 f9b2 	bl	800bb8c <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800782e:	e008      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007836:	e004      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007838:	bf00      	nop
 800783a:	e002      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007842:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007846:	2b00      	cmp	r3, #0
 8007848:	d110      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800784a:	4b07      	ldr	r3, [pc, #28]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800784c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007850:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007858:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800785c:	4a02      	ldr	r2, [pc, #8]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800785e:	430b      	orrs	r3, r1
 8007860:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007864:	e006      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007866:	bf00      	nop
 8007868:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007870:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	2100      	movs	r1, #0
 800787e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8007882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800788a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800788e:	460b      	mov	r3, r1
 8007890:	4313      	orrs	r3, r2
 8007892:	d03d      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007898:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800789c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80078a0:	d01b      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80078a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80078a6:	d814      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80078a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078ac:	d017      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80078ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078b2:	d80e      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d014      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80078b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078bc:	d109      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078c2:	3330      	adds	r3, #48	@ 0x30
 80078c4:	4618      	mov	r0, r3
 80078c6:	f004 f961 	bl	800bb8c <RCCEx_PLL3_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80078d0:	e008      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078d8:	e004      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80078da:	bf00      	nop
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80078e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10d      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80078ec:	4bbe      	ldr	r3, [pc, #760]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80078ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80078f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078fe:	4aba      	ldr	r2, [pc, #744]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007900:	430b      	orrs	r3, r1
 8007902:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007906:	e003      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800790c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800791c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007920:	2300      	movs	r3, #0
 8007922:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007926:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800792a:	460b      	mov	r3, r1
 800792c:	4313      	orrs	r3, r2
 800792e:	d035      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007934:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800793c:	d015      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800793e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007942:	d80e      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d012      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800794c:	d109      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800794e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007952:	3330      	adds	r3, #48	@ 0x30
 8007954:	4618      	mov	r0, r3
 8007956:	f004 f919 	bl	800bb8c <RCCEx_PLL3_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007960:	e006      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800796e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007970:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007978:	4b9b      	ldr	r3, [pc, #620]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800797a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800797e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800798a:	4a97      	ldr	r2, [pc, #604]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800798c:	430b      	orrs	r3, r1
 800798e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007998:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800799c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	2100      	movs	r1, #0
 80079a6:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80079aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80079bc:	4b8a      	ldr	r3, [pc, #552]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	4a89      	ldr	r2, [pc, #548]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80079c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079c6:	61d3      	str	r3, [r2, #28]
 80079c8:	4b87      	ldr	r3, [pc, #540]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80079ca:	69d9      	ldr	r1, [r3, #28]
 80079cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80079d4:	4a84      	ldr	r2, [pc, #528]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80079d6:	430b      	orrs	r3, r1
 80079d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80079e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079ea:	2300      	movs	r3, #0
 80079ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80079f4:	460b      	mov	r3, r1
 80079f6:	4313      	orrs	r3, r2
 80079f8:	d055      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80079fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a02:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007a06:	d031      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007a08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007a0c:	d82a      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a12:	d02d      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a18:	d824      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a1e:	d029      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a24:	d81e      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a2a:	d011      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a30:	d818      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d020      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8007a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3a:	d113      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a40:	3308      	adds	r3, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f004 f80a 	bl	800ba5c <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007a4e:	e014      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a54:	3330      	adds	r3, #48	@ 0x30
 8007a56:	4618      	mov	r0, r3
 8007a58:	f004 f898 	bl	800bb8c <RCCEx_PLL3_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007a62:	e00a      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a6a:	e006      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007a6c:	bf00      	nop
 8007a6e:	e004      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007a70:	bf00      	nop
 8007a72:	e002      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10d      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007a82:	4b59      	ldr	r3, [pc, #356]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007a84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a88:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a94:	4a54      	ldr	r2, [pc, #336]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007a96:	430b      	orrs	r3, r1
 8007a98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007aa2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007abc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	d055      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ace:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ad2:	d031      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007ad4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ad8:	d82a      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ade:	d02d      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ae4:	d824      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007ae6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aea:	d029      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007aec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007af0:	d81e      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007af6:	d011      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007afc:	d818      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d020      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b06:	d113      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f003 ffa4 	bl	800ba5c <RCCEx_PLL2_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007b1a:	e014      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b20:	3330      	adds	r3, #48	@ 0x30
 8007b22:	4618      	mov	r0, r3
 8007b24:	f004 f832 	bl	800bb8c <RCCEx_PLL3_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b36:	e006      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007b38:	bf00      	nop
 8007b3a:	e004      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007b3c:	bf00      	nop
 8007b3e:	e002      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007b40:	bf00      	nop
 8007b42:	e000      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10d      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007b4e:	4b26      	ldr	r3, [pc, #152]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b60:	4a21      	ldr	r2, [pc, #132]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b62:	430b      	orrs	r3, r1
 8007b64:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	d057      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b9e:	d033      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ba4:	d82c      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007baa:	d02f      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007bac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bb0:	d826      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007bb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bb6:	d02b      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007bb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bbc:	d820      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc2:	d013      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc8:	d81a      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d022      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd2:	d115      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bd8:	3308      	adds	r3, #8
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f003 ff3e 	bl	800ba5c <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007be6:	e016      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007be8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf0:	3330      	adds	r3, #48	@ 0x30
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f003 ffca 	bl	800bb8c <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007bfe:	e00a      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c06:	e006      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007c08:	bf00      	nop
 8007c0a:	e004      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007c0c:	bf00      	nop
 8007c0e:	e002      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007c10:	bf00      	nop
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10d      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007c1e:	4bbb      	ldr	r3, [pc, #748]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c30:	4ab6      	ldr	r2, [pc, #728]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c32:	430b      	orrs	r3, r1
 8007c34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007c38:	e003      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	d055      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c6a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007c6e:	d031      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007c70:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007c74:	d82a      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c7a:	d02d      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c80:	d824      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007c82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c86:	d029      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007c88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c8c:	d81e      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007c8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c92:	d011      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c98:	d818      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d020      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca2:	d113      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca8:	3308      	adds	r3, #8
 8007caa:	4618      	mov	r0, r3
 8007cac:	f003 fed6 	bl	800ba5c <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007cb6:	e014      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cbc:	3330      	adds	r3, #48	@ 0x30
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f003 ff64 	bl	800bb8c <RCCEx_PLL3_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007cca:	e00a      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007cd2:	e006      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007cd4:	bf00      	nop
 8007cd6:	e004      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007cd8:	bf00      	nop
 8007cda:	e002      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007cdc:	bf00      	nop
 8007cde:	e000      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10d      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007cea:	4b88      	ldr	r3, [pc, #544]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007cec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007cf0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cfc:	4a83      	ldr	r2, [pc, #524]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	2100      	movs	r1, #0
 8007d18:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d24:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	d055      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d36:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007d3a:	d031      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007d3c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007d40:	d82a      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007d42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d46:	d02d      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007d48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d4c:	d824      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007d4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d52:	d029      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007d54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d58:	d81e      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d5e:	d011      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d64:	d818      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d6e:	d113      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d74:	3308      	adds	r3, #8
 8007d76:	4618      	mov	r0, r3
 8007d78:	f003 fe70 	bl	800ba5c <RCCEx_PLL2_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007d82:	e014      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d88:	3330      	adds	r3, #48	@ 0x30
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f003 fefe 	bl	800bb8c <RCCEx_PLL3_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007d96:	e00a      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d9e:	e006      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007da0:	bf00      	nop
 8007da2:	e004      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007da4:	bf00      	nop
 8007da6:	e002      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007da8:	bf00      	nop
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10d      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007db6:	4b55      	ldr	r3, [pc, #340]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007db8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007dbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dc8:	4a50      	ldr	r2, [pc, #320]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007dd0:	e003      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dd6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	2100      	movs	r1, #0
 8007de4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8007de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007df0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007df4:	460b      	mov	r3, r1
 8007df6:	4313      	orrs	r3, r2
 8007df8:	d055      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e06:	d031      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8007e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e0c:	d82a      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	d02d      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e18:	d824      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007e1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e1e:	d029      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007e20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e24:	d81e      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e2a:	d011      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e30:	d818      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d020      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e3a:	d113      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e40:	3308      	adds	r3, #8
 8007e42:	4618      	mov	r0, r3
 8007e44:	f003 fe0a 	bl	800ba5c <RCCEx_PLL2_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007e4e:	e014      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e54:	3330      	adds	r3, #48	@ 0x30
 8007e56:	4618      	mov	r0, r3
 8007e58:	f003 fe98 	bl	800bb8c <RCCEx_PLL3_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007e62:	e00a      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e6a:	e006      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e004      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10d      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007e82:	4b22      	ldr	r3, [pc, #136]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007e84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007e88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e94:	4a1d      	ldr	r2, [pc, #116]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007e96:	430b      	orrs	r3, r1
 8007e98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007e9c:	e003      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ea2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007eb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ebc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	d055      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ece:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ed2:	d035      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007ed4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ed8:	d82e      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ede:	d031      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8007ee0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ee4:	d828      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eea:	d01b      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8007eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef0:	d822      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8007ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007efa:	d009      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007efc:	e01c      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efe:	4b03      	ldr	r3, [pc, #12]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f02:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f08:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f0a:	e01c      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007f0c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f14:	3308      	adds	r3, #8
 8007f16:	4618      	mov	r0, r3
 8007f18:	f003 fda0 	bl	800ba5c <RCCEx_PLL2_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f22:	e010      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f28:	3330      	adds	r3, #48	@ 0x30
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f003 fe2e 	bl	800bb8c <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f36:	e006      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f3e:	e002      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10d      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007f4e:	4bc3      	ldr	r3, [pc, #780]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f60:	4abe      	ldr	r2, [pc, #760]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f62:	430b      	orrs	r3, r1
 8007f64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007f68:	e003      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007f72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f88:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	d051      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f9e:	d033      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007fa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fa4:	d82c      	bhi.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007fa6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007faa:	d02d      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007fac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007fb0:	d826      	bhi.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fb6:	d019      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fbc:	d820      	bhi.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007fc2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fc6:	d007      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8007fc8:	e01a      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fca:	4ba4      	ldr	r3, [pc, #656]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fce:	4aa3      	ldr	r2, [pc, #652]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007fd6:	e018      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fdc:	3308      	adds	r3, #8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f003 fd3c 	bl	800ba5c <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007fea:	e00e      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ff0:	3330      	adds	r3, #48	@ 0x30
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f003 fdca 	bl	800bb8c <RCCEx_PLL3_Config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007ffe:	e004      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008006:	e000      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8008008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10d      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008012:	4b92      	ldr	r3, [pc, #584]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008018:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800801c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008020:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008024:	4a8d      	ldr	r2, [pc, #564]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008026:	430b      	orrs	r3, r1
 8008028:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008032:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008042:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008044:	2300      	movs	r3, #0
 8008046:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008048:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800804c:	460b      	mov	r3, r1
 800804e:	4313      	orrs	r3, r2
 8008050:	d032      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008052:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008056:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800805a:	2b05      	cmp	r3, #5
 800805c:	d80f      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800805e:	2b03      	cmp	r3, #3
 8008060:	d211      	bcs.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8008062:	2b01      	cmp	r3, #1
 8008064:	d911      	bls.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8008066:	2b02      	cmp	r3, #2
 8008068:	d109      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800806a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800806e:	3308      	adds	r3, #8
 8008070:	4618      	mov	r0, r3
 8008072:	f003 fcf3 	bl	800ba5c <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800807c:	e006      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008084:	e002      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8008086:	bf00      	nop
 8008088:	e000      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800808a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10d      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008094:	4b71      	ldr	r3, [pc, #452]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800809a:	f023 0107 	bic.w	r1, r3, #7
 800809e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80080a6:	4a6d      	ldr	r2, [pc, #436]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80080a8:	430b      	orrs	r3, r1
 80080aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80080ae:	e003      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80080b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	2100      	movs	r1, #0
 80080c2:	6739      	str	r1, [r7, #112]	@ 0x70
 80080c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80080ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080ce:	460b      	mov	r3, r1
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d024      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80080d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d005      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80080ea:	e002      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80080ec:	bf00      	nop
 80080ee:	e000      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80080f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10d      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80080fa:	4b58      	ldr	r3, [pc, #352]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80080fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008100:	f023 0108 	bic.w	r1, r3, #8
 8008104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800810c:	4a53      	ldr	r2, [pc, #332]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800810e:	430b      	orrs	r3, r1
 8008110:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008114:	e003      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008116:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800811a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800811e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800812a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800812c:	2300      	movs	r3, #0
 800812e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008130:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008134:	460b      	mov	r3, r1
 8008136:	4313      	orrs	r3, r2
 8008138:	f000 80b9 	beq.w	80082ae <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800813c:	4b48      	ldr	r3, [pc, #288]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008140:	4a47      	ldr	r2, [pc, #284]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008148:	f7fc facc 	bl	80046e4 <HAL_GetTick>
 800814c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008150:	e00b      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008152:	f7fc fac7 	bl	80046e4 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d903      	bls.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008168:	e005      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800816a:	4b3d      	ldr	r3, [pc, #244]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800816c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0ed      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8008176:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 8093 	bne.w	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008180:	4b36      	ldr	r3, [pc, #216]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800818a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800818e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d023      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8008196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800819a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800819e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d01b      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081a6:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081b0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081b4:	4b29      	ldr	r3, [pc, #164]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ba:	4a28      	ldr	r2, [pc, #160]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081c4:	4b25      	ldr	r3, [pc, #148]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ca:	4a24      	ldr	r2, [pc, #144]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081d4:	4a21      	ldr	r2, [pc, #132]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80081da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80081de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d019      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ea:	f7fc fa7b 	bl	80046e4 <HAL_GetTick>
 80081ee:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081f2:	e00d      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081f4:	f7fc fa76 	bl	80046e4 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800820e:	e006      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008210:	4b12      	ldr	r3, [pc, #72]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0ea      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800821e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008222:	2b00      	cmp	r3, #0
 8008224:	d13a      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800822a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800822e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008236:	d115      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8008238:	4b08      	ldr	r3, [pc, #32]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008244:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008248:	091b      	lsrs	r3, r3, #4
 800824a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800824e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008252:	4a02      	ldr	r2, [pc, #8]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008254:	430b      	orrs	r3, r1
 8008256:	61d3      	str	r3, [r2, #28]
 8008258:	e00a      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800825a:	bf00      	nop
 800825c:	44020c00 	.word	0x44020c00
 8008260:	44020800 	.word	0x44020800
 8008264:	4b9f      	ldr	r3, [pc, #636]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	4a9e      	ldr	r2, [pc, #632]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800826a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800826e:	61d3      	str	r3, [r2, #28]
 8008270:	4b9c      	ldr	r3, [pc, #624]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008276:	4a9b      	ldr	r2, [pc, #620]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800827c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008280:	4b98      	ldr	r3, [pc, #608]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008282:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8008286:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800828a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800828e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008292:	4a94      	ldr	r2, [pc, #592]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008294:	430b      	orrs	r3, r1
 8008296:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800829a:	e008      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800829c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80082ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80082bc:	2300      	movs	r3, #0
 80082be:	667b      	str	r3, [r7, #100]	@ 0x64
 80082c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082c4:	460b      	mov	r3, r1
 80082c6:	4313      	orrs	r3, r2
 80082c8:	d035      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80082ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80082d2:	2b30      	cmp	r3, #48	@ 0x30
 80082d4:	d014      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80082d6:	2b30      	cmp	r3, #48	@ 0x30
 80082d8:	d80e      	bhi.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d012      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d80a      	bhi.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d010      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80082e6:	2b10      	cmp	r3, #16
 80082e8:	d106      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ea:	4b7e      	ldr	r3, [pc, #504]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ee:	4a7d      	ldr	r2, [pc, #500]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80082f6:	e008      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082fe:	e004      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008300:	bf00      	nop
 8008302:	e002      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008304:	bf00      	nop
 8008306:	e000      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10d      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008312:	4b74      	ldr	r3, [pc, #464]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008318:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800831c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008320:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008324:	4a6f      	ldr	r2, [pc, #444]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008326:	430b      	orrs	r3, r1
 8008328:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800832c:	e003      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008332:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008342:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008344:	2300      	movs	r3, #0
 8008346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008348:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800834c:	460b      	mov	r3, r1
 800834e:	4313      	orrs	r3, r2
 8008350:	d033      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008356:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800835e:	2b40      	cmp	r3, #64	@ 0x40
 8008360:	d007      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8008362:	e010      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008364:	4b5f      	ldr	r3, [pc, #380]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008368:	4a5e      	ldr	r2, [pc, #376]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800836a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800836e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008370:	e00d      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008376:	3308      	adds	r3, #8
 8008378:	4618      	mov	r0, r3
 800837a:	f003 fb6f 	bl	800ba5c <RCCEx_PLL2_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008384:	e003      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800838c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10d      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8008396:	4b53      	ldr	r3, [pc, #332]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008398:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800839c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80083a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80083a8:	4a4e      	ldr	r2, [pc, #312]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083aa:	430b      	orrs	r3, r1
 80083ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80083b0:	e003      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80083ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80083c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083c8:	2300      	movs	r3, #0
 80083ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80083cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80083d0:	460b      	mov	r3, r1
 80083d2:	4313      	orrs	r3, r2
 80083d4:	d033      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80083d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80083e2:	2b80      	cmp	r3, #128	@ 0x80
 80083e4:	d007      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80083e6:	e010      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e8:	4b3e      	ldr	r3, [pc, #248]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ec:	4a3d      	ldr	r2, [pc, #244]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80083ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80083f4:	e00d      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083fa:	3308      	adds	r3, #8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f003 fb2d 	bl	800ba5c <RCCEx_PLL2_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008408:	e003      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008412:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10d      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800841a:	4b32      	ldr	r3, [pc, #200]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800841c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008420:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008428:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800842c:	4a2d      	ldr	r2, [pc, #180]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800842e:	430b      	orrs	r3, r1
 8008430:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008434:	e003      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008436:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800843a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800843e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800844a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800844c:	2300      	movs	r3, #0
 800844e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008450:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008454:	460b      	mov	r3, r1
 8008456:	4313      	orrs	r3, r2
 8008458:	d04a      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800845a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800845e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008462:	2b04      	cmp	r3, #4
 8008464:	d827      	bhi.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8008466:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008481 	.word	0x08008481
 8008470:	0800848f 	.word	0x0800848f
 8008474:	080084a3 	.word	0x080084a3
 8008478:	080084bf 	.word	0x080084bf
 800847c:	080084bf 	.word	0x080084bf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008480:	4b18      	ldr	r3, [pc, #96]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008484:	4a17      	ldr	r2, [pc, #92]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800848a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800848c:	e018      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800848e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008492:	3308      	adds	r3, #8
 8008494:	4618      	mov	r0, r3
 8008496:	f003 fae1 	bl	800ba5c <RCCEx_PLL2_Config>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80084a0:	e00e      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084a6:	3330      	adds	r3, #48	@ 0x30
 80084a8:	4618      	mov	r0, r3
 80084aa:	f003 fb6f 	bl	800bb8c <RCCEx_PLL3_Config>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80084b4:	e004      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084bc:	e000      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80084be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10f      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80084c8:	4b06      	ldr	r3, [pc, #24]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084ce:	f023 0107 	bic.w	r1, r3, #7
 80084d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084da:	4a02      	ldr	r2, [pc, #8]	@ (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084dc:	430b      	orrs	r3, r1
 80084de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084e2:	e005      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80084e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80084f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80084fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80084fe:	2300      	movs	r3, #0
 8008500:	647b      	str	r3, [r7, #68]	@ 0x44
 8008502:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008506:	460b      	mov	r3, r1
 8008508:	4313      	orrs	r3, r2
 800850a:	f000 8081 	beq.w	8008610 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800850e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008516:	2b20      	cmp	r3, #32
 8008518:	d85f      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800851a:	a201      	add	r2, pc, #4	@ (adr r2, 8008520 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	080085a5 	.word	0x080085a5
 8008524:	080085db 	.word	0x080085db
 8008528:	080085db 	.word	0x080085db
 800852c:	080085db 	.word	0x080085db
 8008530:	080085db 	.word	0x080085db
 8008534:	080085db 	.word	0x080085db
 8008538:	080085db 	.word	0x080085db
 800853c:	080085db 	.word	0x080085db
 8008540:	080085b3 	.word	0x080085b3
 8008544:	080085db 	.word	0x080085db
 8008548:	080085db 	.word	0x080085db
 800854c:	080085db 	.word	0x080085db
 8008550:	080085db 	.word	0x080085db
 8008554:	080085db 	.word	0x080085db
 8008558:	080085db 	.word	0x080085db
 800855c:	080085db 	.word	0x080085db
 8008560:	080085c7 	.word	0x080085c7
 8008564:	080085db 	.word	0x080085db
 8008568:	080085db 	.word	0x080085db
 800856c:	080085db 	.word	0x080085db
 8008570:	080085db 	.word	0x080085db
 8008574:	080085db 	.word	0x080085db
 8008578:	080085db 	.word	0x080085db
 800857c:	080085db 	.word	0x080085db
 8008580:	080085e3 	.word	0x080085e3
 8008584:	080085db 	.word	0x080085db
 8008588:	080085db 	.word	0x080085db
 800858c:	080085db 	.word	0x080085db
 8008590:	080085db 	.word	0x080085db
 8008594:	080085db 	.word	0x080085db
 8008598:	080085db 	.word	0x080085db
 800859c:	080085db 	.word	0x080085db
 80085a0:	080085e3 	.word	0x080085e3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a4:	4bab      	ldr	r3, [pc, #684]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	4aaa      	ldr	r2, [pc, #680]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80085b0:	e018      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085b6:	3308      	adds	r3, #8
 80085b8:	4618      	mov	r0, r3
 80085ba:	f003 fa4f 	bl	800ba5c <RCCEx_PLL2_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80085c4:	e00e      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ca:	3330      	adds	r3, #48	@ 0x30
 80085cc:	4618      	mov	r0, r3
 80085ce:	f003 fadd 	bl	800bb8c <RCCEx_PLL3_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80085d8:	e004      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085e0:	e000      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80085e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10d      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80085ec:	4b99      	ldr	r3, [pc, #612]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80085ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80085f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085fe:	4a95      	ldr	r2, [pc, #596]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008600:	430b      	orrs	r3, r1
 8008602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008606:	e003      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008608:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800860c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800861c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008622:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008626:	460b      	mov	r3, r1
 8008628:	4313      	orrs	r3, r2
 800862a:	d04e      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800862c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008638:	d02e      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800863a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800863e:	d827      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008640:	2bc0      	cmp	r3, #192	@ 0xc0
 8008642:	d02b      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008644:	2bc0      	cmp	r3, #192	@ 0xc0
 8008646:	d823      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008648:	2b80      	cmp	r3, #128	@ 0x80
 800864a:	d017      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800864c:	2b80      	cmp	r3, #128	@ 0x80
 800864e:	d81f      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008654:	2b40      	cmp	r3, #64	@ 0x40
 8008656:	d007      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008658:	e01a      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800865a:	4b7e      	ldr	r3, [pc, #504]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800865c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865e:	4a7d      	ldr	r2, [pc, #500]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008664:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008666:	e01a      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800866c:	3308      	adds	r3, #8
 800866e:	4618      	mov	r0, r3
 8008670:	f003 f9f4 	bl	800ba5c <RCCEx_PLL2_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800867a:	e010      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800867c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008680:	3330      	adds	r3, #48	@ 0x30
 8008682:	4618      	mov	r0, r3
 8008684:	f003 fa82 	bl	800bb8c <RCCEx_PLL3_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800868e:	e006      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008696:	e002      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008698:	bf00      	nop
 800869a:	e000      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800869c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800869e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10d      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80086a6:	4b6b      	ldr	r3, [pc, #428]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80086a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80086b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086b8:	4a66      	ldr	r2, [pc, #408]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80086ba:	430b      	orrs	r3, r1
 80086bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80086c0:	e003      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80086ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d8:	2300      	movs	r3, #0
 80086da:	637b      	str	r3, [r7, #52]	@ 0x34
 80086dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80086e0:	460b      	mov	r3, r1
 80086e2:	4313      	orrs	r3, r2
 80086e4:	d055      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80086e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80086ee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80086f2:	d031      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80086f4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80086f8:	d82a      	bhi.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80086fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086fe:	d02d      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008704:	d824      	bhi.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008706:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800870a:	d029      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800870c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008710:	d81e      	bhi.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008716:	d011      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800871c:	d818      	bhi.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d020      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008726:	d113      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800872c:	3308      	adds	r3, #8
 800872e:	4618      	mov	r0, r3
 8008730:	f003 f994 	bl	800ba5c <RCCEx_PLL2_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800873a:	e014      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800873c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008740:	3330      	adds	r3, #48	@ 0x30
 8008742:	4618      	mov	r0, r3
 8008744:	f003 fa22 	bl	800bb8c <RCCEx_PLL3_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800874e:	e00a      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008756:	e006      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008758:	bf00      	nop
 800875a:	e004      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800875c:	bf00      	nop
 800875e:	e002      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008760:	bf00      	nop
 8008762:	e000      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008766:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10d      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800876e:	4b39      	ldr	r3, [pc, #228]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008774:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008778:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800877c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008780:	4a34      	ldr	r2, [pc, #208]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008782:	430b      	orrs	r3, r1
 8008784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008788:	e003      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800878e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800879e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087a0:	2300      	movs	r3, #0
 80087a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80087a8:	460b      	mov	r3, r1
 80087aa:	4313      	orrs	r3, r2
 80087ac:	d058      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80087ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80087ba:	d031      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80087bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80087c0:	d82a      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80087c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c6:	d02d      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80087c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087cc:	d824      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80087ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087d2:	d029      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80087d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087d8:	d81e      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087de:	d011      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80087e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e4:	d818      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d020      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ee:	d113      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087f4:	3308      	adds	r3, #8
 80087f6:	4618      	mov	r0, r3
 80087f8:	f003 f930 	bl	800ba5c <RCCEx_PLL2_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008802:	e014      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008808:	3330      	adds	r3, #48	@ 0x30
 800880a:	4618      	mov	r0, r3
 800880c:	f003 f9be 	bl	800bb8c <RCCEx_PLL3_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008816:	e00a      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800881e:	e006      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008820:	bf00      	nop
 8008822:	e004      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008824:	bf00      	nop
 8008826:	e002      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008828:	bf00      	nop
 800882a:	e000      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800882c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008832:	2b00      	cmp	r3, #0
 8008834:	d110      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8008836:	4b07      	ldr	r3, [pc, #28]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800883c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008848:	4902      	ldr	r1, [pc, #8]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008850:	e006      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8008852:	bf00      	nop
 8008854:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800885c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	2100      	movs	r1, #0
 800886a:	6239      	str	r1, [r7, #32]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24
 8008872:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d055      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800887c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008884:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008888:	d031      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800888a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800888e:	d82a      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008890:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008894:	d02d      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800889a:	d824      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800889c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80088a0:	d029      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80088a2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80088a6:	d81e      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80088a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ac:	d011      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80088ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b2:	d818      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d020      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80088b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088bc:	d113      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088c2:	3308      	adds	r3, #8
 80088c4:	4618      	mov	r0, r3
 80088c6:	f003 f8c9 	bl	800ba5c <RCCEx_PLL2_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088d0:	e014      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088d6:	3330      	adds	r3, #48	@ 0x30
 80088d8:	4618      	mov	r0, r3
 80088da:	f003 f957 	bl	800bb8c <RCCEx_PLL3_Config>
 80088de:	4603      	mov	r3, r0
 80088e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088e4:	e00a      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088ec:	e006      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80088ee:	bf00      	nop
 80088f0:	e004      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80088f2:	bf00      	nop
 80088f4:	e002      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80088f6:	bf00      	nop
 80088f8:	e000      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80088fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10d      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008904:	4b88      	ldr	r3, [pc, #544]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800890a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800890e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008916:	4984      	ldr	r1, [pc, #528]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008918:	4313      	orrs	r3, r2
 800891a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008920:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008924:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	2100      	movs	r1, #0
 8008932:	61b9      	str	r1, [r7, #24]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	d03d      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008948:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800894c:	2b03      	cmp	r3, #3
 800894e:	d81c      	bhi.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008950:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	08008993 	.word	0x08008993
 800895c:	08008969 	.word	0x08008969
 8008960:	08008977 	.word	0x08008977
 8008964:	08008993 	.word	0x08008993
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008968:	4b6f      	ldr	r3, [pc, #444]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	4a6e      	ldr	r2, [pc, #440]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800896e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008972:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008974:	e00e      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008976:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800897a:	3308      	adds	r3, #8
 800897c:	4618      	mov	r0, r3
 800897e:	f003 f86d 	bl	800ba5c <RCCEx_PLL2_Config>
 8008982:	4603      	mov	r3, r0
 8008984:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008988:	e004      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008990:	e000      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8008992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008994:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10d      	bne.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800899c:	4b62      	ldr	r3, [pc, #392]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800899e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089a2:	f023 0203 	bic.w	r2, r3, #3
 80089a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80089ae:	495e      	ldr	r1, [pc, #376]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80089b6:	e003      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80089bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	2100      	movs	r1, #0
 80089ca:	6139      	str	r1, [r7, #16]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80089d6:	460b      	mov	r3, r1
 80089d8:	4313      	orrs	r3, r2
 80089da:	d03a      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80089dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80089e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e8:	d00e      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80089ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ee:	d815      	bhi.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d017      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80089f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f8:	d110      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fa:	4b4b      	ldr	r3, [pc, #300]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80089fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fe:	4a4a      	ldr	r2, [pc, #296]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008a06:	e00e      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f003 f824 	bl	800ba5c <RCCEx_PLL2_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008a1a:	e004      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a40:	4939      	ldr	r1, [pc, #228]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008a48:	e003      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	f003 0310 	and.w	r3, r3, #16
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	d038      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008a76:	2b30      	cmp	r3, #48	@ 0x30
 8008a78:	d01b      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008a7a:	2b30      	cmp	r3, #48	@ 0x30
 8008a7c:	d815      	bhi.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8008a7e:	2b10      	cmp	r3, #16
 8008a80:	d002      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d007      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008a86:	e010      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a88:	4b27      	ldr	r3, [pc, #156]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	4a26      	ldr	r2, [pc, #152]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a94:	e00e      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a9a:	3330      	adds	r3, #48	@ 0x30
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f003 f875 	bl	800bb8c <RCCEx_PLL3_Config>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008aa8:	e004      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008ab0:	e000      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ab4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10d      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008abc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008abe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ac2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008ace:	4916      	ldr	r1, [pc, #88]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008ad6:	e003      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008adc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6039      	str	r1, [r7, #0]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	607b      	str	r3, [r7, #4]
 8008af2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008af6:	460b      	mov	r3, r1
 8008af8:	4313      	orrs	r3, r2
 8008afa:	d00c      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b0a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008b0e:	4906      	ldr	r1, [pc, #24]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008b16:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008b20:	46bd      	mov	sp, r7
 8008b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b26:	bf00      	nop
 8008b28:	44020c00 	.word	0x44020c00

08008b2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b08b      	sub	sp, #44	@ 0x2c
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008b34:	4bad      	ldr	r3, [pc, #692]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008b3e:	4bab      	ldr	r3, [pc, #684]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008b48:	4ba8      	ldr	r3, [pc, #672]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4c:	0a1b      	lsrs	r3, r3, #8
 8008b4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b52:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008b54:	4ba5      	ldr	r3, [pc, #660]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008b5e:	4ba3      	ldr	r3, [pc, #652]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b62:	08db      	lsrs	r3, r3, #3
 8008b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	fb02 f303 	mul.w	r3, r2, r3
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 8126 	beq.w	8008dce <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d053      	beq.n	8008c30 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d86f      	bhi.n	8008c6e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d003      	beq.n	8008b9c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d02b      	beq.n	8008bf2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8008b9a:	e068      	b.n	8008c6e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b9c:	4b93      	ldr	r3, [pc, #588]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a92      	ldr	r2, [pc, #584]	@ (8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	ee07 3a90 	vmov	s15, r3
 8008bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8008bd4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008bf0:	e068      	b.n	8008cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	ee07 3a90 	vmov	s15, r3
 8008bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008c2e:	e049      	b.n	8008cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008dfc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c50:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c68:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008c6c:	e02a      	b.n	8008cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	08db      	lsrs	r3, r3, #3
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	4a5d      	ldr	r2, [pc, #372]	@ (8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca2:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ca6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008cc2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cc4:	4b49      	ldr	r3, [pc, #292]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cd0:	d121      	bne.n	8008d16 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008cd2:	4b46      	ldr	r3, [pc, #280]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d017      	beq.n	8008d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008cde:	4b43      	ldr	r3, [pc, #268]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce2:	0a5b      	lsrs	r3, r3, #9
 8008ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008cf8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d04:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	e006      	b.n	8008d1c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	e002      	b.n	8008d1c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d1c:	4b33      	ldr	r3, [pc, #204]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d28:	d121      	bne.n	8008d6e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008d2a:	4b30      	ldr	r3, [pc, #192]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d017      	beq.n	8008d66 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008d36:	4b2d      	ldr	r3, [pc, #180]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3a:	0c1b      	lsrs	r3, r3, #16
 8008d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008d50:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	605a      	str	r2, [r3, #4]
 8008d64:	e006      	b.n	8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	e002      	b.n	8008d74 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d74:	4b1d      	ldr	r3, [pc, #116]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d80:	d121      	bne.n	8008dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008d82:	4b1a      	ldr	r3, [pc, #104]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d017      	beq.n	8008dbe <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008d8e:	4b17      	ldr	r3, [pc, #92]	@ (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d92:	0e1b      	lsrs	r3, r3, #24
 8008d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008da0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008da4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008da8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008dbc:	e010      	b.n	8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	e00c      	b.n	8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	609a      	str	r2, [r3, #8]
}
 8008dcc:	e008      	b.n	8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	609a      	str	r2, [r3, #8]
}
 8008de0:	bf00      	nop
 8008de2:	372c      	adds	r7, #44	@ 0x2c
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	44020c00 	.word	0x44020c00
 8008df0:	03d09000 	.word	0x03d09000
 8008df4:	46000000 	.word	0x46000000
 8008df8:	4a742400 	.word	0x4a742400
 8008dfc:	4bbebc20 	.word	0x4bbebc20

08008e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b08b      	sub	sp, #44	@ 0x2c
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008e08:	4bad      	ldr	r3, [pc, #692]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e10:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008e12:	4bab      	ldr	r3, [pc, #684]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008e1c:	4ba8      	ldr	r3, [pc, #672]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e26:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8008e28:	4ba5      	ldr	r3, [pc, #660]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2c:	f003 0310 	and.w	r3, r3, #16
 8008e30:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008e32:	4ba3      	ldr	r3, [pc, #652]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	08db      	lsrs	r3, r3, #3
 8008e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	fb02 f303 	mul.w	r3, r2, r3
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8126 	beq.w	80090a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d053      	beq.n	8008f04 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d86f      	bhi.n	8008f42 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d003      	beq.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d02b      	beq.n	8008ec6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8008e6e:	e068      	b.n	8008f42 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e70:	4b93      	ldr	r3, [pc, #588]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	08db      	lsrs	r3, r3, #3
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	4a92      	ldr	r2, [pc, #584]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e80:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	ee07 3a90 	vmov	s15, r3
 8008ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea4:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ea8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008ec4:	e068      	b.n	8008f98 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	ee07 3a90 	vmov	s15, r3
 8008ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80090cc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ee6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008f02:	e049      	b.n	8008f98 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8008f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	ee07 3a90 	vmov	s15, r3
 8008f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f20:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f24:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008f40:	e02a      	b.n	8008f98 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f42:	4b5f      	ldr	r3, [pc, #380]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	08db      	lsrs	r3, r3, #3
 8008f48:	f003 0303 	and.w	r3, r3, #3
 8008f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f52:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	ee07 3a90 	vmov	s15, r3
 8008f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f76:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f7a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008f96:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f98:	4b49      	ldr	r3, [pc, #292]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fa4:	d121      	bne.n	8008fea <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008fa6:	4b46      	ldr	r3, [pc, #280]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d017      	beq.n	8008fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008fb2:	4b43      	ldr	r3, [pc, #268]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb6:	0a5b      	lsrs	r3, r3, #9
 8008fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008fcc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	e006      	b.n	8008ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	e002      	b.n	8008ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff0:	4b33      	ldr	r3, [pc, #204]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ffc:	d121      	bne.n	8009042 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008ffe:	4b30      	ldr	r3, [pc, #192]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d017      	beq.n	800903a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800900a:	4b2d      	ldr	r3, [pc, #180]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800900c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900e:	0c1b      	lsrs	r3, r3, #16
 8009010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800901c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009020:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009024:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009030:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	605a      	str	r2, [r3, #4]
 8009038:	e006      	b.n	8009048 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	605a      	str	r2, [r3, #4]
 8009040:	e002      	b.n	8009048 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009048:	4b1d      	ldr	r3, [pc, #116]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009054:	d121      	bne.n	800909a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009056:	4b1a      	ldr	r3, [pc, #104]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d017      	beq.n	8009092 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009062:	4b17      	ldr	r3, [pc, #92]	@ (80090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009066:	0e1b      	lsrs	r3, r3, #24
 8009068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800906c:	ee07 3a90 	vmov	s15, r3
 8009070:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8009074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009078:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800907c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009088:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009090:	e010      	b.n	80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	609a      	str	r2, [r3, #8]
}
 8009098:	e00c      	b.n	80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	609a      	str	r2, [r3, #8]
}
 80090a0:	e008      	b.n	80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	609a      	str	r2, [r3, #8]
}
 80090b4:	bf00      	nop
 80090b6:	372c      	adds	r7, #44	@ 0x2c
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	44020c00 	.word	0x44020c00
 80090c4:	03d09000 	.word	0x03d09000
 80090c8:	46000000 	.word	0x46000000
 80090cc:	4a742400 	.word	0x4a742400
 80090d0:	4bbebc20 	.word	0x4bbebc20

080090d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b08b      	sub	sp, #44	@ 0x2c
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80090dc:	4bad      	ldr	r3, [pc, #692]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80090de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80090e6:	4bab      	ldr	r3, [pc, #684]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80090e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80090f0:	4ba8      	ldr	r3, [pc, #672]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80090f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090fa:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80090fc:	4ba5      	ldr	r3, [pc, #660]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80090fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009106:	4ba3      	ldr	r3, [pc, #652]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800910a:	08db      	lsrs	r3, r3, #3
 800910c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	fb02 f303 	mul.w	r3, r2, r3
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8126 	beq.w	8009376 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b03      	cmp	r3, #3
 800912e:	d053      	beq.n	80091d8 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b03      	cmp	r3, #3
 8009134:	d86f      	bhi.n	8009216 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d003      	beq.n	8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d02b      	beq.n	800919a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8009142:	e068      	b.n	8009216 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009144:	4b93      	ldr	r3, [pc, #588]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	08db      	lsrs	r3, r3, #3
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	4a92      	ldr	r2, [pc, #584]	@ (8009398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
 8009154:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	ee07 3a90 	vmov	s15, r3
 800915c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	ee07 3a90 	vmov	s15, r3
 8009174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009178:	ed97 6a04 	vldr	s12, [r7, #16]
 800917c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800939c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009188:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800918c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009194:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009198:	e068      	b.n	800926c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80091a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80091ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800939c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80091d6:	e049      	b.n	800926c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80091e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	ee07 3a90 	vmov	s15, r3
 80091f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80091f8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800939c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80091fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009204:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800920c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009210:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009214:	e02a      	b.n	800926c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009216:	4b5f      	ldr	r3, [pc, #380]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	08db      	lsrs	r3, r3, #3
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	4a5d      	ldr	r2, [pc, #372]	@ (8009398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009222:	fa22 f303 	lsr.w	r3, r2, r3
 8009226:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800924a:	ed97 6a04 	vldr	s12, [r7, #16]
 800924e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800939c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800925a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009266:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800926a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800926c:	4b49      	ldr	r3, [pc, #292]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009278:	d121      	bne.n	80092be <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800927a:	4b46      	ldr	r3, [pc, #280]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d017      	beq.n	80092b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009286:	4b43      	ldr	r3, [pc, #268]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928a:	0a5b      	lsrs	r3, r3, #9
 800928c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8009298:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800929c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80092a0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80092a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ac:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e006      	b.n	80092c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e002      	b.n	80092c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092c4:	4b33      	ldr	r3, [pc, #204]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d0:	d121      	bne.n	8009316 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80092d2:	4b30      	ldr	r3, [pc, #192]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80092d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d017      	beq.n	800930e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80092de:	4b2d      	ldr	r3, [pc, #180]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80092e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e2:	0c1b      	lsrs	r3, r3, #16
 80092e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80092f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80092f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80092fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009304:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	605a      	str	r2, [r3, #4]
 800930c:	e006      	b.n	800931c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	605a      	str	r2, [r3, #4]
 8009314:	e002      	b.n	800931c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800931c:	4b1d      	ldr	r3, [pc, #116]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009328:	d121      	bne.n	800936e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800932a:	4b1a      	ldr	r3, [pc, #104]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800932c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d017      	beq.n	8009366 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009336:	4b17      	ldr	r3, [pc, #92]	@ (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	0e1b      	lsrs	r3, r3, #24
 800933c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8009348:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800934c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009350:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800935c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8009364:	e010      	b.n	8009388 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	609a      	str	r2, [r3, #8]
}
 800936c:	e00c      	b.n	8009388 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	e008      	b.n	8009388 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	609a      	str	r2, [r3, #8]
}
 8009388:	bf00      	nop
 800938a:	372c      	adds	r7, #44	@ 0x2c
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	44020c00 	.word	0x44020c00
 8009398:	03d09000 	.word	0x03d09000
 800939c:	46000000 	.word	0x46000000
 80093a0:	4a742400 	.word	0x4a742400
 80093a4:	4bbebc20 	.word	0x4bbebc20

080093a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b08f      	sub	sp, #60	@ 0x3c
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80093b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093b6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80093ba:	4321      	orrs	r1, r4
 80093bc:	d150      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80093be:	4b26      	ldr	r3, [pc, #152]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80093c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093c8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80093ca:	4b23      	ldr	r3, [pc, #140]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80093cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d108      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093de:	d104      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80093e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e6:	f002 bb2a 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80093ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80093ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093f8:	d108      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009400:	d104      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009402:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
 8009408:	f002 bb19 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800940c:	4b12      	ldr	r3, [pc, #72]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009418:	d119      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009420:	d115      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800942a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800942e:	d30a      	bcc.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009430:	4b09      	ldr	r3, [pc, #36]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	0a1b      	lsrs	r3, r3, #8
 8009436:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800943a:	4a08      	ldr	r2, [pc, #32]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800943c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009440:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009442:	f002 bafc 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800944a:	f002 baf8 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
 8009452:	f002 baf4 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009456:	bf00      	nop
 8009458:	44020c00 	.word	0x44020c00
 800945c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009464:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009468:	ea50 0104 	orrs.w	r1, r0, r4
 800946c:	f001 8275 	beq.w	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8009470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009474:	2801      	cmp	r0, #1
 8009476:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800947a:	f082 82dd 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800947e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009482:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8009486:	ea50 0104 	orrs.w	r1, r0, r4
 800948a:	f001 816c 	beq.w	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800948e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009492:	2801      	cmp	r0, #1
 8009494:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009498:	f082 82ce 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800949c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094a0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80094a4:	ea50 0104 	orrs.w	r1, r0, r4
 80094a8:	f001 8602 	beq.w	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80094ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b0:	2801      	cmp	r0, #1
 80094b2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80094b6:	f082 82bf 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094be:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80094c2:	ea50 0104 	orrs.w	r1, r0, r4
 80094c6:	f001 854c 	beq.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80094ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ce:	2801      	cmp	r0, #1
 80094d0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80094d4:	f082 82b0 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094dc:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80094e0:	ea50 0104 	orrs.w	r1, r0, r4
 80094e4:	f001 849e 	beq.w	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80094e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ec:	2801      	cmp	r0, #1
 80094ee:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80094f2:	f082 82a1 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094fa:	f1a1 0420 	sub.w	r4, r1, #32
 80094fe:	ea50 0104 	orrs.w	r1, r0, r4
 8009502:	f001 83e8 	beq.w	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8009506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800950a:	2801      	cmp	r0, #1
 800950c:	f171 0120 	sbcs.w	r1, r1, #32
 8009510:	f082 8292 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009518:	f1a1 0410 	sub.w	r4, r1, #16
 800951c:	ea50 0104 	orrs.w	r1, r0, r4
 8009520:	f002 8256 	beq.w	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009528:	2801      	cmp	r0, #1
 800952a:	f171 0110 	sbcs.w	r1, r1, #16
 800952e:	f082 8283 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009536:	f1a1 0408 	sub.w	r4, r1, #8
 800953a:	ea50 0104 	orrs.w	r1, r0, r4
 800953e:	f002 81cc 	beq.w	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8009542:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009546:	2801      	cmp	r0, #1
 8009548:	f171 0108 	sbcs.w	r1, r1, #8
 800954c:	f082 8274 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009554:	1f0c      	subs	r4, r1, #4
 8009556:	ea50 0104 	orrs.w	r1, r0, r4
 800955a:	f001 8648 	beq.w	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800955e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009562:	2801      	cmp	r0, #1
 8009564:	f171 0104 	sbcs.w	r1, r1, #4
 8009568:	f082 8266 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800956c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009570:	1e8c      	subs	r4, r1, #2
 8009572:	ea50 0104 	orrs.w	r1, r0, r4
 8009576:	f002 8143 	beq.w	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800957a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957e:	2801      	cmp	r0, #1
 8009580:	f171 0102 	sbcs.w	r1, r1, #2
 8009584:	f082 8258 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800958c:	1e4c      	subs	r4, r1, #1
 800958e:	ea50 0104 	orrs.w	r1, r0, r4
 8009592:	f002 80ce 	beq.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8009596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800959a:	2801      	cmp	r0, #1
 800959c:	f171 0101 	sbcs.w	r1, r1, #1
 80095a0:	f082 824a 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095a8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80095ac:	4321      	orrs	r1, r4
 80095ae:	f002 8059 	beq.w	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80095b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095b6:	4cd9      	ldr	r4, [pc, #868]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	f171 0100 	sbcs.w	r1, r1, #0
 80095be:	f082 823b 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095c6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80095ca:	4321      	orrs	r1, r4
 80095cc:	f001 87d9 	beq.w	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80095d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095d4:	4cd2      	ldr	r4, [pc, #840]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80095d6:	42a0      	cmp	r0, r4
 80095d8:	f171 0100 	sbcs.w	r1, r1, #0
 80095dc:	f082 822c 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095e4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80095e8:	4321      	orrs	r1, r4
 80095ea:	f001 8751 	beq.w	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80095ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095f2:	4ccc      	ldr	r4, [pc, #816]	@ (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	f171 0100 	sbcs.w	r1, r1, #0
 80095fa:	f082 821d 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009602:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009606:	4321      	orrs	r1, r4
 8009608:	f001 869a 	beq.w	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800960c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009610:	4cc5      	ldr	r4, [pc, #788]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009612:	42a0      	cmp	r0, r4
 8009614:	f171 0100 	sbcs.w	r1, r1, #0
 8009618:	f082 820e 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800961c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009620:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009624:	4321      	orrs	r1, r4
 8009626:	f001 8612 	beq.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800962a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800962e:	4cbf      	ldr	r4, [pc, #764]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009630:	42a0      	cmp	r0, r4
 8009632:	f171 0100 	sbcs.w	r1, r1, #0
 8009636:	f082 81ff 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800963a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800963e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009642:	4321      	orrs	r1, r4
 8009644:	f002 817e 	beq.w	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800964c:	4cb8      	ldr	r4, [pc, #736]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800964e:	42a0      	cmp	r0, r4
 8009650:	f171 0100 	sbcs.w	r1, r1, #0
 8009654:	f082 81f0 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800965c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009660:	4321      	orrs	r1, r4
 8009662:	f000 829e 	beq.w	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800966a:	4cb2      	ldr	r4, [pc, #712]	@ (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800966c:	42a0      	cmp	r0, r4
 800966e:	f171 0100 	sbcs.w	r1, r1, #0
 8009672:	f082 81e1 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800967a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800967e:	4321      	orrs	r1, r4
 8009680:	f000 826d 	beq.w	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009688:	4cab      	ldr	r4, [pc, #684]	@ (8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800968a:	42a0      	cmp	r0, r4
 800968c:	f171 0100 	sbcs.w	r1, r1, #0
 8009690:	f082 81d2 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009698:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800969c:	4321      	orrs	r1, r4
 800969e:	f001 800d 	beq.w	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80096a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096a6:	4ca5      	ldr	r4, [pc, #660]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80096a8:	42a0      	cmp	r0, r4
 80096aa:	f171 0100 	sbcs.w	r1, r1, #0
 80096ae:	f082 81c3 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096b6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80096ba:	4321      	orrs	r1, r4
 80096bc:	f000 81d0 	beq.w	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80096c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096c4:	4c9e      	ldr	r4, [pc, #632]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80096c6:	42a0      	cmp	r0, r4
 80096c8:	f171 0100 	sbcs.w	r1, r1, #0
 80096cc:	f082 81b4 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096d4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80096d8:	4321      	orrs	r1, r4
 80096da:	f000 8142 	beq.w	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80096de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096e2:	4c98      	ldr	r4, [pc, #608]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	f171 0100 	sbcs.w	r1, r1, #0
 80096ea:	f082 81a5 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096f2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80096f6:	4321      	orrs	r1, r4
 80096f8:	f001 824e 	beq.w	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80096fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009700:	4c91      	ldr	r4, [pc, #580]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009702:	42a0      	cmp	r0, r4
 8009704:	f171 0100 	sbcs.w	r1, r1, #0
 8009708:	f082 8196 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800970c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009710:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009714:	4321      	orrs	r1, r4
 8009716:	f001 8197 	beq.w	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800971a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800971e:	4c8b      	ldr	r4, [pc, #556]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009720:	42a0      	cmp	r0, r4
 8009722:	f171 0100 	sbcs.w	r1, r1, #0
 8009726:	f082 8187 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800972a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800972e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009732:	4321      	orrs	r1, r4
 8009734:	f001 8154 	beq.w	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800973c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009740:	f171 0100 	sbcs.w	r1, r1, #0
 8009744:	f082 8178 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800974c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009750:	4321      	orrs	r1, r4
 8009752:	f001 80b7 	beq.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800975a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800975e:	42a0      	cmp	r0, r4
 8009760:	f171 0100 	sbcs.w	r1, r1, #0
 8009764:	f082 8168 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800976c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009770:	4321      	orrs	r1, r4
 8009772:	f001 8064 	beq.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800977a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800977e:	42a0      	cmp	r0, r4
 8009780:	f171 0100 	sbcs.w	r1, r1, #0
 8009784:	f082 8158 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800978c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009790:	4321      	orrs	r1, r4
 8009792:	f001 8011 	beq.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800979a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800979e:	42a0      	cmp	r0, r4
 80097a0:	f171 0100 	sbcs.w	r1, r1, #0
 80097a4:	f082 8148 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80097b0:	4321      	orrs	r1, r4
 80097b2:	f000 871e 	beq.w	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80097b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ba:	f241 0401 	movw	r4, #4097	@ 0x1001
 80097be:	42a0      	cmp	r0, r4
 80097c0:	f171 0100 	sbcs.w	r1, r1, #0
 80097c4:	f082 8138 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097cc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80097d0:	4321      	orrs	r1, r4
 80097d2:	f000 86a8 	beq.w	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80097d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097da:	f640 0401 	movw	r4, #2049	@ 0x801
 80097de:	42a0      	cmp	r0, r4
 80097e0:	f171 0100 	sbcs.w	r1, r1, #0
 80097e4:	f082 8128 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80097f0:	4321      	orrs	r1, r4
 80097f2:	f000 8632 	beq.w	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80097f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097fa:	f240 4401 	movw	r4, #1025	@ 0x401
 80097fe:	42a0      	cmp	r0, r4
 8009800:	f171 0100 	sbcs.w	r1, r1, #0
 8009804:	f082 8118 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800980c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009810:	4321      	orrs	r1, r4
 8009812:	f000 85b0 	beq.w	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8009816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800981a:	f240 2401 	movw	r4, #513	@ 0x201
 800981e:	42a0      	cmp	r0, r4
 8009820:	f171 0100 	sbcs.w	r1, r1, #0
 8009824:	f082 8108 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800982c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009830:	4321      	orrs	r1, r4
 8009832:	f000 8535 	beq.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800983a:	f240 1401 	movw	r4, #257	@ 0x101
 800983e:	42a0      	cmp	r0, r4
 8009840:	f171 0100 	sbcs.w	r1, r1, #0
 8009844:	f082 80f8 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800984c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8009850:	4321      	orrs	r1, r4
 8009852:	f000 84ba 	beq.w	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8009856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800985a:	2881      	cmp	r0, #129	@ 0x81
 800985c:	f171 0100 	sbcs.w	r1, r1, #0
 8009860:	f082 80ea 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009868:	2821      	cmp	r0, #33	@ 0x21
 800986a:	f171 0100 	sbcs.w	r1, r1, #0
 800986e:	d26f      	bcs.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009874:	4301      	orrs	r1, r0
 8009876:	f002 80df 	beq.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800987a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800987e:	1e42      	subs	r2, r0, #1
 8009880:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009884:	2a20      	cmp	r2, #32
 8009886:	f173 0100 	sbcs.w	r1, r3, #0
 800988a:	f082 80d5 	bcs.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800988e:	2a1f      	cmp	r2, #31
 8009890:	f202 80d2 	bhi.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009894:	a101      	add	r1, pc, #4	@ (adr r1, 800989c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009896:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800989a:	bf00      	nop
 800989c:	08009bfd 	.word	0x08009bfd
 80098a0:	08009cc9 	.word	0x08009cc9
 80098a4:	0800ba39 	.word	0x0800ba39
 80098a8:	08009d89 	.word	0x08009d89
 80098ac:	0800ba39 	.word	0x0800ba39
 80098b0:	0800ba39 	.word	0x0800ba39
 80098b4:	0800ba39 	.word	0x0800ba39
 80098b8:	08009e59 	.word	0x08009e59
 80098bc:	0800ba39 	.word	0x0800ba39
 80098c0:	0800ba39 	.word	0x0800ba39
 80098c4:	0800ba39 	.word	0x0800ba39
 80098c8:	0800ba39 	.word	0x0800ba39
 80098cc:	0800ba39 	.word	0x0800ba39
 80098d0:	0800ba39 	.word	0x0800ba39
 80098d4:	0800ba39 	.word	0x0800ba39
 80098d8:	08009f3b 	.word	0x08009f3b
 80098dc:	0800ba39 	.word	0x0800ba39
 80098e0:	0800ba39 	.word	0x0800ba39
 80098e4:	0800ba39 	.word	0x0800ba39
 80098e8:	0800ba39 	.word	0x0800ba39
 80098ec:	0800ba39 	.word	0x0800ba39
 80098f0:	0800ba39 	.word	0x0800ba39
 80098f4:	0800ba39 	.word	0x0800ba39
 80098f8:	0800ba39 	.word	0x0800ba39
 80098fc:	0800ba39 	.word	0x0800ba39
 8009900:	0800ba39 	.word	0x0800ba39
 8009904:	0800ba39 	.word	0x0800ba39
 8009908:	0800ba39 	.word	0x0800ba39
 800990c:	0800ba39 	.word	0x0800ba39
 8009910:	0800ba39 	.word	0x0800ba39
 8009914:	0800ba39 	.word	0x0800ba39
 8009918:	0800a011 	.word	0x0800a011
 800991c:	80000001 	.word	0x80000001
 8009920:	40000001 	.word	0x40000001
 8009924:	20000001 	.word	0x20000001
 8009928:	10000001 	.word	0x10000001
 800992c:	08000001 	.word	0x08000001
 8009930:	04000001 	.word	0x04000001
 8009934:	00800001 	.word	0x00800001
 8009938:	00400001 	.word	0x00400001
 800993c:	00200001 	.word	0x00200001
 8009940:	00100001 	.word	0x00100001
 8009944:	00080001 	.word	0x00080001
 8009948:	00040001 	.word	0x00040001
 800994c:	00020001 	.word	0x00020001
 8009950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009954:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009958:	430b      	orrs	r3, r1
 800995a:	f000 83c4 	beq.w	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800995e:	f002 b86b 	b.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009962:	4ba1      	ldr	r3, [pc, #644]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009968:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800996c:	633b      	str	r3, [r7, #48]	@ 0x30
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009974:	d036      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800997c:	d86b      	bhi.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009984:	d02b      	beq.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800998c:	d863      	bhi.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009994:	d01b      	beq.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800999c:	d85b      	bhi.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80099a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099aa:	d008      	beq.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80099ac:	e053      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ae:	f107 0320 	add.w	r3, r7, #32
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff f8ba 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099bc:	e04e      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099be:	f107 0314 	add.w	r3, r7, #20
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fa1c 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099cc:	e046      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff fb7e 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099dc:	e03e      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80099de:	4b83      	ldr	r3, [pc, #524]	@ (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099e2:	e03b      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099e4:	4b80      	ldr	r3, [pc, #512]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80099e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099f0:	4b7d      	ldr	r3, [pc, #500]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d10c      	bne.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d109      	bne.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a02:	4b79      	ldr	r3, [pc, #484]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	08db      	lsrs	r3, r3, #3
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	4a78      	ldr	r2, [pc, #480]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a14:	e01e      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a16:	4b74      	ldr	r3, [pc, #464]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a22:	d106      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a2a:	d102      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a2c:	4b71      	ldr	r3, [pc, #452]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a30:	e010      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a32:	4b6d      	ldr	r3, [pc, #436]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a3e:	d106      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a46:	d102      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a48:	4b6b      	ldr	r3, [pc, #428]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a4c:	e002      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a52:	e003      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a5a:	bf00      	nop
          }
        }
        break;
 8009a5c:	f001 bfef 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009a60:	4b61      	ldr	r3, [pc, #388]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a66:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a72:	d036      	beq.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a7a:	d86b      	bhi.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009a82:	d02b      	beq.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009a8a:	d863      	bhi.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a92:	d01b      	beq.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a9a:	d85b      	bhi.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009aa8:	d008      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009aaa:	e053      	b.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aac:	f107 0320 	add.w	r3, r7, #32
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff f83b 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aba:	e04e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009abc:	f107 0314 	add.w	r3, r7, #20
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff f99d 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aca:	e046      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009acc:	f107 0308 	add.w	r3, r7, #8
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff faff 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ada:	e03e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009adc:	4b43      	ldr	r3, [pc, #268]	@ (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ae0:	e03b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ae2:	4b41      	ldr	r3, [pc, #260]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ae8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009aee:	4b3e      	ldr	r3, [pc, #248]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d10c      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8009afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d109      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b00:	4b39      	ldr	r3, [pc, #228]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	4a39      	ldr	r2, [pc, #228]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b12:	e01e      	b.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b14:	4b34      	ldr	r3, [pc, #208]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b20:	d106      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b28:	d102      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b2a:	4b32      	ldr	r3, [pc, #200]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2e:	e010      	b.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b30:	4b2d      	ldr	r3, [pc, #180]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b3c:	d106      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8009b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b44:	d102      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b46:	4b2c      	ldr	r3, [pc, #176]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4a:	e002      	b.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8009b52:	e002      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b58:	bf00      	nop
          }
        }
        break;
 8009b5a:	f001 bf70 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009b5e:	4b22      	ldr	r3, [pc, #136]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b68:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d108      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b70:	f107 0320 	add.w	r3, r7, #32
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe ffd9 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b7e:	f001 bf5e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	2b40      	cmp	r3, #64	@ 0x40
 8009b86:	d108      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b88:	f107 0314 	add.w	r3, r7, #20
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7ff f937 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b96:	f001 bf52 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b9e:	f001 bf4e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009ba2:	4b11      	ldr	r3, [pc, #68]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bac:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d108      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bb4:	f107 0320 	add.w	r3, r7, #32
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe ffb7 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bc2:	f001 bf3c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc8:	2b80      	cmp	r3, #128	@ 0x80
 8009bca:	d108      	bne.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff f915 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bda:	f001 bf30 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009be2:	f001 bf2c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009be6:	bf00      	nop
 8009be8:	44020c00 	.word	0x44020c00
 8009bec:	00bb8000 	.word	0x00bb8000
 8009bf0:	03d09000 	.word	0x03d09000
 8009bf4:	003d0900 	.word	0x003d0900
 8009bf8:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009c0e:	f7fc ffd7 	bl	8006bc0 <HAL_RCC_GetPCLK2Freq>
 8009c12:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009c14:	f001 bf13 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009c18:	4b96      	ldr	r3, [pc, #600]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c24:	d10a      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d107      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c2c:	f107 0314 	add.w	r3, r7, #20
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff f8e5 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c3a:	e043      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c48:	d10a      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d107      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fa3d 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5e:	e031      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009c60:	4b84      	ldr	r3, [pc, #528]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d10c      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d109      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c72:	4b80      	ldr	r3, [pc, #512]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	08db      	lsrs	r3, r3, #3
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	4a7e      	ldr	r2, [pc, #504]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c84:	e01e      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009c86:	4b7b      	ldr	r3, [pc, #492]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c92:	d105      	bne.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d102      	bne.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8009c9a:	4b78      	ldr	r3, [pc, #480]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9e:	e011      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009ca0:	4b74      	ldr	r3, [pc, #464]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d106      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	2b05      	cmp	r3, #5
 8009cb2:	d103      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cba:	e003      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cc0:	f001 bebd 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cc4:	f001 bebb 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cd2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009cda:	f7fc ff5b 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 8009cde:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ce0:	f001 bead 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009ce4:	4b63      	ldr	r3, [pc, #396]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cf0:	d10a      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d107      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf8:	f107 0314 	add.w	r3, r7, #20
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff f87f 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d06:	e03d      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	d108      	bne.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff f9de 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d1c:	f001 be8f 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009d20:	4b54      	ldr	r3, [pc, #336]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d10c      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	2b18      	cmp	r3, #24
 8009d30:	d109      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d32:	4b50      	ldr	r3, [pc, #320]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a4e      	ldr	r2, [pc, #312]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d44:	e01e      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009d46:	4b4b      	ldr	r3, [pc, #300]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d52:	d105      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d102      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009d5a:	4b48      	ldr	r3, [pc, #288]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5e:	e011      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009d60:	4b44      	ldr	r3, [pc, #272]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d106      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	2b28      	cmp	r3, #40	@ 0x28
 8009d72:	d103      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009d74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d80:	f001 be5d 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d84:	f001 be5b 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009d88:	4b3a      	ldr	r3, [pc, #232]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d8e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009d92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d104      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d9a:	f7fc fefb 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 8009d9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009da0:	f001 be4d 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009da4:	4b33      	ldr	r3, [pc, #204]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009db0:	d10a      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	2b40      	cmp	r3, #64	@ 0x40
 8009db6:	d107      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff f81f 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc6:	e045      	b.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dd4:	d10a      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	2b80      	cmp	r3, #128	@ 0x80
 8009dda:	d107      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ddc:	f107 0308 	add.w	r3, r7, #8
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff f977 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dea:	e033      	b.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009dec:	4b21      	ldr	r3, [pc, #132]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d10c      	bne.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dfc:	d109      	bne.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	08db      	lsrs	r3, r3, #3
 8009e04:	f003 0303 	and.w	r3, r3, #3
 8009e08:	4a1b      	ldr	r2, [pc, #108]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e10:	e020      	b.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009e12:	4b18      	ldr	r3, [pc, #96]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1e:	d106      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e26:	d102      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009e28:	4b14      	ldr	r3, [pc, #80]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2c:	e012      	b.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009e2e:	4b11      	ldr	r3, [pc, #68]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d107      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009e42:	d103      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4a:	e003      	b.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e50:	f001 bdf5 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e54:	f001 bdf3 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009e58:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e5e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009e62:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e6a:	f7fc fe93 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 8009e6e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e70:	f001 bde5 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e74:	44020c00 	.word	0x44020c00
 8009e78:	03d09000 	.word	0x03d09000
 8009e7c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009e80:	4ba0      	ldr	r3, [pc, #640]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e8c:	d10b      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e94:	d107      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e96:	f107 0314 	add.w	r3, r7, #20
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe ffb0 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea4:	e047      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009ea6:	4b97      	ldr	r3, [pc, #604]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eb2:	d10b      	bne.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eba:	d107      	bne.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ebc:	f107 0308 	add.w	r3, r7, #8
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff f907 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eca:	e034      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009ecc:	4b8d      	ldr	r3, [pc, #564]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d10d      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ede:	d109      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ee0:	4b88      	ldr	r3, [pc, #544]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	08db      	lsrs	r3, r3, #3
 8009ee6:	f003 0303 	and.w	r3, r3, #3
 8009eea:	4a87      	ldr	r2, [pc, #540]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009eec:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef2:	e020      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009ef4:	4b83      	ldr	r3, [pc, #524]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f00:	d106      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8009f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f08:	d102      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8009f0a:	4b80      	ldr	r3, [pc, #512]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f0e:	e012      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009f10:	4b7c      	ldr	r3, [pc, #496]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d107      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009f24:	d103      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f2c:	e003      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f32:	f001 bd84 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f36:	f001 bd82 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009f3a:	4b72      	ldr	r3, [pc, #456]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f40:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009f44:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d104      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f4c:	f7fc fe22 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 8009f50:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8009f52:	f001 bd74 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009f56:	4b6b      	ldr	r3, [pc, #428]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f62:	d10b      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f6a:	d107      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe ff45 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f7a:	e047      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009f7c:	4b61      	ldr	r3, [pc, #388]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f88:	d10b      	bne.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f90:	d107      	bne.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff f89c 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa0:	e034      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009fa2:	4b58      	ldr	r3, [pc, #352]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d10d      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fb4:	d109      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fb6:	4b53      	ldr	r3, [pc, #332]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	08db      	lsrs	r3, r3, #3
 8009fbc:	f003 0303 	and.w	r3, r3, #3
 8009fc0:	4a51      	ldr	r2, [pc, #324]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc8:	e020      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009fca:	4b4e      	ldr	r3, [pc, #312]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd6:	d106      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fde:	d102      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe4:	e012      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009fe6:	4b47      	ldr	r3, [pc, #284]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fec:	f003 0302 	and.w	r3, r3, #2
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d107      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009ffa:	d103      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8009ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a000:	637b      	str	r3, [r7, #52]	@ 0x34
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a008:	f001 bd19 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a00c:	f001 bd17 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a010:	4b3c      	ldr	r3, [pc, #240]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a016:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a01a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d104      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a022:	f7fc fdb7 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a026:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a028:	f001 bd09 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a02c:	4b35      	ldr	r3, [pc, #212]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a038:	d10b      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a040:	d107      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a042:	f107 0314 	add.w	r3, r7, #20
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe feda 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a050:	e047      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a052:	4b2c      	ldr	r3, [pc, #176]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a05a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05e:	d10b      	bne.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a066:	d107      	bne.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a068:	f107 0308 	add.w	r3, r7, #8
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff f831 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	637b      	str	r3, [r7, #52]	@ 0x34
 800a076:	e034      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a078:	4b22      	ldr	r3, [pc, #136]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0302 	and.w	r3, r3, #2
 800a080:	2b02      	cmp	r3, #2
 800a082:	d10d      	bne.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a08a:	d109      	bne.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a08c:	4b1d      	ldr	r3, [pc, #116]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	4a1c      	ldr	r2, [pc, #112]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a09e:	e020      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a0a0:	4b18      	ldr	r3, [pc, #96]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ac:	d106      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0b4:	d102      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a0b6:	4b15      	ldr	r3, [pc, #84]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ba:	e012      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a0bc:	4b11      	ldr	r3, [pc, #68]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a0be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d107      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a0d0:	d103      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a0d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d8:	e003      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0de:	f001 bcae 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a0e2:	f001 bcac 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a0e6:	4b07      	ldr	r3, [pc, #28]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a0e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a0ec:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a0f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10b      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a0f8:	f7fc fd4c 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a0fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a0fe:	f001 bc9e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a102:	bf00      	nop
 800a104:	44020c00 	.word	0x44020c00
 800a108:	03d09000 	.word	0x03d09000
 800a10c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a110:	4ba0      	ldr	r3, [pc, #640]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a11c:	d10b      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a124:	d107      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a126:	f107 0314 	add.w	r3, r7, #20
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fe68 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	637b      	str	r3, [r7, #52]	@ 0x34
 800a134:	e047      	b.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a136:	4b97      	ldr	r3, [pc, #604]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a13e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a142:	d10b      	bne.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a14a:	d107      	bne.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a14c:	f107 0308 	add.w	r3, r7, #8
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe ffbf 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	637b      	str	r3, [r7, #52]	@ 0x34
 800a15a:	e034      	b.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a15c:	4b8d      	ldr	r3, [pc, #564]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b02      	cmp	r3, #2
 800a166:	d10d      	bne.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a16e:	d109      	bne.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a170:	4b88      	ldr	r3, [pc, #544]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	08db      	lsrs	r3, r3, #3
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	4a87      	ldr	r2, [pc, #540]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a17c:	fa22 f303 	lsr.w	r3, r2, r3
 800a180:	637b      	str	r3, [r7, #52]	@ 0x34
 800a182:	e020      	b.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a184:	4b83      	ldr	r3, [pc, #524]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a18c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a190:	d106      	bne.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a198:	d102      	bne.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a19a:	4b80      	ldr	r3, [pc, #512]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a19c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a19e:	e012      	b.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a1a0:	4b7c      	ldr	r3, [pc, #496]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d107      	bne.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a1b4:	d103      	bne.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1bc:	e003      	b.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1c2:	f001 bc3c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1c6:	f001 bc3a 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a1ca:	4b72      	ldr	r3, [pc, #456]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1d0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a1d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1dc:	f7fc fcda 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a1e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a1e2:	f001 bc2c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a1e6:	4b6b      	ldr	r3, [pc, #428]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1f2:	d10b      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1fa:	d107      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1fc:	f107 0314 	add.w	r3, r7, #20
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe fdfd 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20a:	e047      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a20c:	4b61      	ldr	r3, [pc, #388]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a218:	d10b      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a220:	d107      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe ff54 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a230:	e034      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a232:	4b58      	ldr	r3, [pc, #352]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d10d      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a244:	d109      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a246:	4b53      	ldr	r3, [pc, #332]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	08db      	lsrs	r3, r3, #3
 800a24c:	f003 0303 	and.w	r3, r3, #3
 800a250:	4a51      	ldr	r2, [pc, #324]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a252:	fa22 f303 	lsr.w	r3, r2, r3
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
 800a258:	e020      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a25a:	4b4e      	ldr	r3, [pc, #312]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a266:	d106      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a26e:	d102      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a270:	4b4a      	ldr	r3, [pc, #296]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a272:	637b      	str	r3, [r7, #52]	@ 0x34
 800a274:	e012      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a276:	4b47      	ldr	r3, [pc, #284]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b02      	cmp	r3, #2
 800a282:	d107      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a28a:	d103      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a28c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a290:	637b      	str	r3, [r7, #52]	@ 0x34
 800a292:	e003      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a298:	f001 bbd1 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a29c:	f001 bbcf 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a2a0:	4b3c      	ldr	r3, [pc, #240]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a2a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a2a6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a2aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2b2:	f7fc fc6f 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a2b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a2b8:	f001 bbc1 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a2bc:	4b35      	ldr	r3, [pc, #212]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2c8:	d10b      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d2:	f107 0314 	add.w	r3, r7, #20
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fd92 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e0:	e047      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ee:	d10b      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f6:	d107      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2f8:	f107 0308 	add.w	r3, r7, #8
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fee9 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	637b      	str	r3, [r7, #52]	@ 0x34
 800a306:	e034      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a308:	4b22      	ldr	r3, [pc, #136]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b02      	cmp	r3, #2
 800a312:	d10d      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a31a:	d109      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a31c:	4b1d      	ldr	r3, [pc, #116]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	08db      	lsrs	r3, r3, #3
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	4a1c      	ldr	r2, [pc, #112]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a328:	fa22 f303 	lsr.w	r3, r2, r3
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32e:	e020      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a330:	4b18      	ldr	r3, [pc, #96]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a33c:	d106      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a344:	d102      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a346:	4b15      	ldr	r3, [pc, #84]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a348:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34a:	e012      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a34c:	4b11      	ldr	r3, [pc, #68]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a34e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b02      	cmp	r3, #2
 800a358:	d107      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a360:	d103      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
 800a368:	e003      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a36e:	f001 bb66 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a372:	f001 bb64 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a376:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a37c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a380:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10b      	bne.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a388:	f7fc fc04 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a38c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a38e:	f001 bb56 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a392:	bf00      	nop
 800a394:	44020c00 	.word	0x44020c00
 800a398:	03d09000 	.word	0x03d09000
 800a39c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a3a0:	4ba1      	ldr	r3, [pc, #644]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3ac:	d10b      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b6:	f107 0314 	add.w	r3, r7, #20
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fd20 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c4:	e047      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a3c6:	4b98      	ldr	r3, [pc, #608]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d2:	d10b      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3da:	d107      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3dc:	f107 0308 	add.w	r3, r7, #8
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fe77 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ea:	e034      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a3ec:	4b8e      	ldr	r3, [pc, #568]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d10d      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a3fe:	d109      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a400:	4b89      	ldr	r3, [pc, #548]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	08db      	lsrs	r3, r3, #3
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	4a88      	ldr	r2, [pc, #544]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
 800a412:	e020      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a414:	4b84      	ldr	r3, [pc, #528]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a41c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a420:	d106      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a428:	d102      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a42a:	4b81      	ldr	r3, [pc, #516]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a42e:	e012      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a430:	4b7d      	ldr	r3, [pc, #500]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d107      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a444:	d103      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a44a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a44c:	e003      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a452:	f001 baf4 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a456:	f001 baf2 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a45a:	4b73      	ldr	r3, [pc, #460]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a45c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d104      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a46c:	f7fc fb92 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a470:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a472:	f001 bae4 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a476:	4b6c      	ldr	r3, [pc, #432]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a47e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a482:	d10a      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	2b01      	cmp	r3, #1
 800a488:	d107      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a48a:	f107 0314 	add.w	r3, r7, #20
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fcb6 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	637b      	str	r3, [r7, #52]	@ 0x34
 800a498:	e043      	b.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a49a:	4b63      	ldr	r3, [pc, #396]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a6:	d10a      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d107      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fe0e 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4bc:	e031      	b.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a4be:	4b5a      	ldr	r3, [pc, #360]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d10c      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d109      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4d0:	4b55      	ldr	r3, [pc, #340]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	08db      	lsrs	r3, r3, #3
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	4a54      	ldr	r2, [pc, #336]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4e2:	e01e      	b.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a4e4:	4b50      	ldr	r3, [pc, #320]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4f0:	d105      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a4f8:	4b4d      	ldr	r3, [pc, #308]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a4fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4fc:	e011      	b.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a4fe:	4b4a      	ldr	r3, [pc, #296]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a504:	f003 0302 	and.w	r3, r3, #2
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d106      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	2b05      	cmp	r3, #5
 800a510:	d103      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a516:	637b      	str	r3, [r7, #52]	@ 0x34
 800a518:	e003      	b.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a51e:	f001 ba8e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a522:	f001 ba8c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a526:	4b40      	ldr	r3, [pc, #256]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a528:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a52c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a530:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	2b00      	cmp	r3, #0
 800a536:	d104      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a538:	f7fc fb2c 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a53c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a53e:	f001 ba7e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a542:	4b39      	ldr	r3, [pc, #228]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a54e:	d10a      	bne.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	2b10      	cmp	r3, #16
 800a554:	d107      	bne.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a556:	f107 0314 	add.w	r3, r7, #20
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fc50 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	637b      	str	r3, [r7, #52]	@ 0x34
 800a564:	e043      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800a566:	4b30      	ldr	r3, [pc, #192]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a572:	d10a      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a576:	2b20      	cmp	r3, #32
 800a578:	d107      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fda8 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	637b      	str	r3, [r7, #52]	@ 0x34
 800a588:	e031      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800a58a:	4b27      	ldr	r3, [pc, #156]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b02      	cmp	r3, #2
 800a594:	d10c      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	2b30      	cmp	r3, #48	@ 0x30
 800a59a:	d109      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a59c:	4b22      	ldr	r3, [pc, #136]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	08db      	lsrs	r3, r3, #3
 800a5a2:	f003 0303 	and.w	r3, r3, #3
 800a5a6:	4a21      	ldr	r2, [pc, #132]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ae:	e01e      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800a5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5bc:	d105      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	2b40      	cmp	r3, #64	@ 0x40
 800a5c2:	d102      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800a5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c8:	e011      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800a5ca:	4b17      	ldr	r3, [pc, #92]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5d0:	f003 0302 	and.w	r3, r3, #2
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d106      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	2b50      	cmp	r3, #80	@ 0x50
 800a5dc:	d103      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800a5de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5e4:	e003      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5ea:	f001 ba28 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5ee:	f001 ba26 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a5f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5f8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a5fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a604:	f7fc faf2 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800a608:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a60a:	f001 ba18 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a614:	d10e      	bne.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a616:	f107 0314 	add.w	r3, r7, #20
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fbf0 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a624:	f001 ba0b 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a628:	44020c00 	.word	0x44020c00
 800a62c:	03d09000 	.word	0x03d09000
 800a630:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a63a:	d108      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a63c:	f107 0308 	add.w	r3, r7, #8
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fd47 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a64a:	f001 b9f8 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a64e:	4ba4      	ldr	r3, [pc, #656]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b02      	cmp	r3, #2
 800a658:	d10d      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a660:	d109      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a662:	4b9f      	ldr	r3, [pc, #636]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	08db      	lsrs	r3, r3, #3
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	4a9d      	ldr	r2, [pc, #628]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a66e:	fa22 f303 	lsr.w	r3, r2, r3
 800a672:	637b      	str	r3, [r7, #52]	@ 0x34
 800a674:	e020      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800a676:	4b9a      	ldr	r3, [pc, #616]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a67e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a682:	d106      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a68a:	d102      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800a68c:	4b96      	ldr	r3, [pc, #600]	@ (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a690:	e012      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a692:	4b93      	ldr	r3, [pc, #588]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d107      	bne.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a6a6:	d103      	bne.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800a6a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ae:	e003      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6b4:	f001 b9c3 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6b8:	f001 b9c1 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a6bc:	4b88      	ldr	r3, [pc, #544]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d104      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800a6ce:	f7fc fa45 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 800a6d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800a6d4:	f001 b9b3 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d104      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800a6de:	f7fc f911 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 800a6e2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a6e4:	f001 b9ab 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d108      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ee:	f107 0314 	add.w	r3, r7, #20
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fb84 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6fc:	f001 b99f 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a700:	4b77      	ldr	r3, [pc, #476]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a70c:	d105      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	2b03      	cmp	r3, #3
 800a712:	d102      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800a714:	4b75      	ldr	r3, [pc, #468]	@ (800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800a716:	637b      	str	r3, [r7, #52]	@ 0x34
 800a718:	e023      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a71a:	4b71      	ldr	r3, [pc, #452]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b02      	cmp	r3, #2
 800a724:	d10c      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d109      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a72c:	4b6c      	ldr	r3, [pc, #432]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	4a6b      	ldr	r2, [pc, #428]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a73e:	e010      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800a740:	4b67      	ldr	r3, [pc, #412]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a74c:	d105      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	2b05      	cmp	r3, #5
 800a752:	d102      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800a754:	4b64      	ldr	r3, [pc, #400]	@ (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a756:	637b      	str	r3, [r7, #52]	@ 0x34
 800a758:	e003      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a75e:	f001 b96e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a762:	f001 b96c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a766:	4b5e      	ldr	r3, [pc, #376]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a76c:	f003 0308 	and.w	r3, r3, #8
 800a770:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a772:	4b5b      	ldr	r3, [pc, #364]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d106      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	2b00      	cmp	r3, #0
 800a784:	d103      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800a786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a78c:	e012      	b.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a78e:	4b54      	ldr	r3, [pc, #336]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a79c:	d106      	bne.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d103      	bne.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a7a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a7a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7aa:	e003      	b.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a7b0:	f001 b945 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a7b4:	f001 b943 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a7b8:	4b49      	ldr	r3, [pc, #292]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a7ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a7be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a7c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d104      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7ca:	f7fc f9e3 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a7ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a7d0:	f001 b935 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7da:	d108      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7dc:	f107 0308 	add.w	r3, r7, #8
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe fc77 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ea:	f001 b928 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a7ee:	4b3c      	ldr	r3, [pc, #240]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d10d      	bne.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a800:	d109      	bne.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a802:	4b37      	ldr	r3, [pc, #220]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	08db      	lsrs	r3, r3, #3
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	4a35      	ldr	r2, [pc, #212]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a80e:	fa22 f303 	lsr.w	r3, r2, r3
 800a812:	637b      	str	r3, [r7, #52]	@ 0x34
 800a814:	e011      	b.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a816:	4b32      	ldr	r3, [pc, #200]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a81e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a822:	d106      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a82a:	d102      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a82c:	4b2e      	ldr	r3, [pc, #184]	@ (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a830:	e003      	b.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a836:	f001 b902 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a83a:	f001 b900 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a83e:	4b28      	ldr	r3, [pc, #160]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a840:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a844:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a848:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d104      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a850:	f7fc f9a0 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a854:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a856:	f001 b8f2 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a860:	d108      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a862:	f107 0308 	add.w	r3, r7, #8
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fc34 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a870:	f001 b8e5 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a874:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d10d      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a886:	d109      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a888:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	08db      	lsrs	r3, r3, #3
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	4a14      	ldr	r2, [pc, #80]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a894:	fa22 f303 	lsr.w	r3, r2, r3
 800a898:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89a:	e011      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a89c:	4b10      	ldr	r3, [pc, #64]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8a8:	d106      	bne.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a8b0:	d102      	bne.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a8b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b6:	e003      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8bc:	f001 b8bf 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8c0:	f001 b8bd 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a8c4:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a8c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a8ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10c      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a8d6:	f7fc f989 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800a8da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a8dc:	f001 b8af 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8e0:	44020c00 	.word	0x44020c00
 800a8e4:	03d09000 	.word	0x03d09000
 800a8e8:	003d0900 	.word	0x003d0900
 800a8ec:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8f6:	d108      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f8:	f107 0308 	add.w	r3, r7, #8
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe fbe9 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a906:	f001 b89a 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a90a:	4b9f      	ldr	r3, [pc, #636]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b02      	cmp	r3, #2
 800a914:	d10d      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a91c:	d109      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a91e:	4b9a      	ldr	r3, [pc, #616]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	08db      	lsrs	r3, r3, #3
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	4a98      	ldr	r2, [pc, #608]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a92a:	fa22 f303 	lsr.w	r3, r2, r3
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a930:	e011      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a932:	4b95      	ldr	r3, [pc, #596]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a93a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a93e:	d106      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800a948:	4b91      	ldr	r3, [pc, #580]	@ (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a94a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a94c:	e003      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a952:	f001 b874 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a956:	f001 b872 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a95a:	4b8b      	ldr	r3, [pc, #556]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a95c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a960:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a964:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a96c:	f7fc f93e 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800a970:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a972:	f001 b864 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800a976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a97c:	d108      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a97e:	f107 0308 	add.w	r3, r7, #8
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe fba6 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a98c:	f001 b857 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a990:	4b7d      	ldr	r3, [pc, #500]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d10d      	bne.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9a2:	d109      	bne.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9a4:	4b78      	ldr	r3, [pc, #480]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	08db      	lsrs	r3, r3, #3
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	4a77      	ldr	r2, [pc, #476]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9b6:	e011      	b.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800a9b8:	4b73      	ldr	r3, [pc, #460]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9c4:	d106      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a9cc:	d102      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800a9ce:	4b70      	ldr	r3, [pc, #448]	@ (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a9d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d2:	e003      	b.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9d8:	f001 b831 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9dc:	f001 b82f 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800a9e0:	4b69      	ldr	r3, [pc, #420]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a9ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d104      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a9f2:	f7fc f8cf 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800a9f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a9f8:	f001 b821 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa02:	d108      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa04:	f107 0308 	add.w	r3, r7, #8
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fb63 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa12:	f001 b814 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800aa16:	4b5c      	ldr	r3, [pc, #368]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d10e      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa28:	d10a      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa2a:	4b57      	ldr	r3, [pc, #348]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	08db      	lsrs	r3, r3, #3
 800aa30:	f003 0303 	and.w	r3, r3, #3
 800aa34:	4a55      	ldr	r2, [pc, #340]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800aa36:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa3c:	f000 bfff 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa44:	f000 bffb 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aa48:	4b4f      	ldr	r3, [pc, #316]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aa4e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa52:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa56:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800aa5a:	d056      	beq.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800aa62:	f200 808b 	bhi.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa6c:	d03e      	beq.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa74:	f200 8082 	bhi.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa7e:	d027      	beq.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa86:	d879      	bhi.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800aa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa8e:	d017      	beq.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa96:	d871      	bhi.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaa4:	d004      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800aaa6:	e069      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800aaa8:	f7fc f8a0 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800aaac:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800aaae:	e068      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab0:	f107 0314 	add.w	r3, r7, #20
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe f9a3 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aabe:	e060      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac0:	f107 0308 	add.w	r3, r7, #8
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe fb05 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aace:	e058      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aad0:	4b2d      	ldr	r3, [pc, #180]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d103      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800aade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aae2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aae4:	e04d      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aaea:	e04a      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aaec:	4b26      	ldr	r3, [pc, #152]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aaee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aafa:	d103      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800aafc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ab02:	e03e      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab08:	e03b      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab10:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ab14:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab16:	4b1c      	ldr	r3, [pc, #112]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d10c      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab28:	4b17      	ldr	r3, [pc, #92]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	08db      	lsrs	r3, r3, #3
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	4a16      	ldr	r2, [pc, #88]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ab34:	fa22 f303 	lsr.w	r3, r2, r3
 800ab38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab3a:	e01e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab3c:	4b12      	ldr	r3, [pc, #72]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab48:	d106      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800ab4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab50:	d102      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ab52:	4b0f      	ldr	r3, [pc, #60]	@ (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ab54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab56:	e010      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab58:	4b0b      	ldr	r3, [pc, #44]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab64:	d106      	bne.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800ab66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab6c:	d102      	bne.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ab6e:	4b09      	ldr	r3, [pc, #36]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800ab70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab72:	e002      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ab78:	e003      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800ab7a:	e002      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab80:	bf00      	nop
          }
        }
        break;
 800ab82:	f000 bf5c 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab86:	bf00      	nop
 800ab88:	44020c00 	.word	0x44020c00
 800ab8c:	03d09000 	.word	0x03d09000
 800ab90:	003d0900 	.word	0x003d0900
 800ab94:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ab98:	4b9e      	ldr	r3, [pc, #632]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ab9e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aba2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800abaa:	d056      	beq.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800abb2:	f200 808b 	bhi.w	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abbc:	d03e      	beq.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800abbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abc4:	f200 8082 	bhi.w	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800abc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abce:	d027      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abd6:	d879      	bhi.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abde:	d017      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abe6:	d871      	bhi.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800abee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abf4:	d004      	beq.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800abf6:	e069      	b.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800abf8:	f7fb ffcc 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 800abfc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800abfe:	e068      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe f8fb 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac0e:	e060      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac10:	f107 0308 	add.w	r3, r7, #8
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fa5d 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac1e:	e058      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac20:	4b7c      	ldr	r3, [pc, #496]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d103      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800ac2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac32:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac34:	e04d      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac3a:	e04a      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ac3c:	4b75      	ldr	r3, [pc, #468]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac4a:	d103      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800ac4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac50:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac52:	e03e      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac58:	e03b      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac5a:	4b6e      	ldr	r3, [pc, #440]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac60:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ac64:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac66:	4b6b      	ldr	r3, [pc, #428]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d10c      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800ac72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d109      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac78:	4b66      	ldr	r3, [pc, #408]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	08db      	lsrs	r3, r3, #3
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	4a65      	ldr	r2, [pc, #404]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
 800ac88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8a:	e01e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac8c:	4b61      	ldr	r3, [pc, #388]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac98:	d106      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800ac9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aca0:	d102      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aca2:	4b5e      	ldr	r3, [pc, #376]	@ (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800aca4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca6:	e010      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aca8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb4:	d106      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acbc:	d102      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800acbe:	4b58      	ldr	r3, [pc, #352]	@ (800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800acc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc2:	e002      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800acc8:	e003      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800acca:	e002      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800accc:	2300      	movs	r3, #0
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acd0:	bf00      	nop
          }
        }
        break;
 800acd2:	f000 beb4 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800acd6:	4b4f      	ldr	r3, [pc, #316]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800acd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800acdc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ace0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ace8:	d056      	beq.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acf0:	f200 808b 	bhi.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acfa:	d03e      	beq.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad02:	f200 8082 	bhi.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad0c:	d027      	beq.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad14:	d879      	bhi.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad1c:	d017      	beq.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad24:	d871      	bhi.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad32:	d004      	beq.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800ad34:	e069      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ad36:	f7fb ff59 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800ad3a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ad3c:	e068      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad3e:	f107 0314 	add.w	r3, r7, #20
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe f85c 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad4c:	e060      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad4e:	f107 0308 	add.w	r3, r7, #8
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe f9be 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad5c:	e058      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ad60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d103      	bne.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800ad6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad70:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad72:	e04d      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad78:	e04a      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ad7a:	4b26      	ldr	r3, [pc, #152]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ad7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad88:	d103      	bne.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800ad8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ad8e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad90:	e03e      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad96:	e03b      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad98:	4b1e      	ldr	r3, [pc, #120]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ad9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad9e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ada2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ada4:	4b1b      	ldr	r3, [pc, #108]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0302 	and.w	r3, r3, #2
 800adac:	2b02      	cmp	r3, #2
 800adae:	d10c      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800adb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adb6:	4b17      	ldr	r3, [pc, #92]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	08db      	lsrs	r3, r3, #3
 800adbc:	f003 0303 	and.w	r3, r3, #3
 800adc0:	4a15      	ldr	r2, [pc, #84]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800adc2:	fa22 f303 	lsr.w	r3, r2, r3
 800adc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc8:	e01e      	b.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adca:	4b12      	ldr	r3, [pc, #72]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800add2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800add6:	d106      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adde:	d102      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ade0:	4b0e      	ldr	r3, [pc, #56]	@ (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800ade2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade4:	e010      	b.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ade6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adf2:	d106      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800adf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adfa:	d102      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800adfc:	4b08      	ldr	r3, [pc, #32]	@ (800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800adfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae00:	e002      	b.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ae06:	e003      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800ae08:	e002      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae0e:	bf00      	nop
          }
        }
        break;
 800ae10:	f000 be15 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae14:	44020c00 	.word	0x44020c00
 800ae18:	03d09000 	.word	0x03d09000
 800ae1c:	003d0900 	.word	0x003d0900
 800ae20:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800ae24:	4b9e      	ldr	r3, [pc, #632]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ae2a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800ae2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae32:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ae36:	d056      	beq.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800ae38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ae3e:	f200 808b 	bhi.w	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae48:	d03e      	beq.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae50:	f200 8082 	bhi.w	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae5a:	d027      	beq.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae62:	d879      	bhi.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae6a:	d017      	beq.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae72:	d871      	bhi.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae80:	d004      	beq.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800ae82:	e069      	b.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ae84:	f7fb feb2 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800ae88:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ae8a:	e068      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8c:	f107 0314 	add.w	r3, r7, #20
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fd ffb5 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae9a:	e060      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe f917 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeaa:	e058      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aeac:	4b7c      	ldr	r3, [pc, #496]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aeae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d103      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800aeba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aec0:	e04d      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aec6:	e04a      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aec8:	4b75      	ldr	r3, [pc, #468]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aeca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aed6:	d103      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800aed8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aedc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aede:	e03e      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aee4:	e03b      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aee6:	4b6e      	ldr	r3, [pc, #440]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aeec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800aef0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aef2:	4b6b      	ldr	r3, [pc, #428]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d10c      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800aefe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d109      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af04:	4b66      	ldr	r3, [pc, #408]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	08db      	lsrs	r3, r3, #3
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	4a65      	ldr	r2, [pc, #404]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800af10:	fa22 f303 	lsr.w	r3, r2, r3
 800af14:	637b      	str	r3, [r7, #52]	@ 0x34
 800af16:	e01e      	b.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af18:	4b61      	ldr	r3, [pc, #388]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af24:	d106      	bne.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800af26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af2c:	d102      	bne.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800af2e:	4b5e      	ldr	r3, [pc, #376]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800af30:	637b      	str	r3, [r7, #52]	@ 0x34
 800af32:	e010      	b.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af34:	4b5a      	ldr	r3, [pc, #360]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af40:	d106      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800af42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af48:	d102      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800af4a:	4b58      	ldr	r3, [pc, #352]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800af4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af4e:	e002      	b.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800af54:	e003      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800af56:	e002      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800af58:	2300      	movs	r3, #0
 800af5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af5c:	bf00      	nop
          }
        }
        break;
 800af5e:	f000 bd6e 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800af62:	4b4f      	ldr	r3, [pc, #316]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af68:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800af6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800af74:	d056      	beq.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800af7c:	f200 808b 	bhi.w	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af86:	d03e      	beq.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800af88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af8e:	f200 8082 	bhi.w	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af98:	d027      	beq.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800afa0:	d879      	bhi.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afa8:	d017      	beq.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afb0:	d871      	bhi.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800afb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afbe:	d004      	beq.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800afc0:	e069      	b.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800afc2:	f7fb fe13 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800afc6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800afc8:	e068      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afca:	f107 0314 	add.w	r3, r7, #20
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fd ff16 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afd8:	e060      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afda:	f107 0308 	add.w	r3, r7, #8
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fe f878 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afe8:	e058      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800afea:	4b2d      	ldr	r3, [pc, #180]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800afec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aff0:	f003 0302 	and.w	r3, r3, #2
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d103      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800aff8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800affc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800affe:	e04d      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b004:	e04a      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b006:	4b26      	ldr	r3, [pc, #152]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b00c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b014:	d103      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b016:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b01a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b01c:	e03e      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b022:	e03b      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b024:	4b1e      	ldr	r3, [pc, #120]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b02a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b02e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b030:	4b1b      	ldr	r3, [pc, #108]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0302 	and.w	r3, r3, #2
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d10c      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b042:	4b17      	ldr	r3, [pc, #92]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	08db      	lsrs	r3, r3, #3
 800b048:	f003 0303 	and.w	r3, r3, #3
 800b04c:	4a15      	ldr	r2, [pc, #84]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b04e:	fa22 f303 	lsr.w	r3, r2, r3
 800b052:	637b      	str	r3, [r7, #52]	@ 0x34
 800b054:	e01e      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b056:	4b12      	ldr	r3, [pc, #72]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b05e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b062:	d106      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06a:	d102      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b06c:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b070:	e010      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b072:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b07a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b07e:	d106      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b086:	d102      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b088:	4b08      	ldr	r3, [pc, #32]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b08a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b092:	e003      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b094:	e002      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b09a:	bf00      	nop
          }
        }
        break;
 800b09c:	f000 bccf 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0a0:	44020c00 	.word	0x44020c00
 800b0a4:	03d09000 	.word	0x03d09000
 800b0a8:	003d0900 	.word	0x003d0900
 800b0ac:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b0b0:	4b9e      	ldr	r3, [pc, #632]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b0b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b0b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b0ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0c2:	d056      	beq.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0ca:	f200 808b 	bhi.w	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0d4:	d03e      	beq.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0dc:	f200 8082 	bhi.w	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0e6:	d027      	beq.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0ee:	d879      	bhi.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0f6:	d017      	beq.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0fe:	d871      	bhi.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b10c:	d004      	beq.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b10e:	e069      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b110:	f7fb fd6c 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800b114:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b116:	e068      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b118:	f107 0314 	add.w	r3, r7, #20
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fd fe6f 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b126:	e060      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b128:	f107 0308 	add.w	r3, r7, #8
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fd ffd1 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b136:	e058      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b138:	4b7c      	ldr	r3, [pc, #496]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b13a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b02      	cmp	r3, #2
 800b144:	d103      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b14a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b14c:	e04d      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b152:	e04a      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b154:	4b75      	ldr	r3, [pc, #468]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b15a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b15e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b162:	d103      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b164:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b168:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b16a:	e03e      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b170:	e03b      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b172:	4b6e      	ldr	r3, [pc, #440]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b178:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b17c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b17e:	4b6b      	ldr	r3, [pc, #428]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b02      	cmp	r3, #2
 800b188:	d10c      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d109      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b190:	4b66      	ldr	r3, [pc, #408]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	08db      	lsrs	r3, r3, #3
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	4a65      	ldr	r2, [pc, #404]	@ (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a2:	e01e      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1a4:	4b61      	ldr	r3, [pc, #388]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1b0:	d106      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1b8:	d102      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b1ba:	4b5e      	ldr	r3, [pc, #376]	@ (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1be:	e010      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1c0:	4b5a      	ldr	r3, [pc, #360]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1cc:	d106      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1d4:	d102      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b1d6:	4b58      	ldr	r3, [pc, #352]	@ (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1da:	e002      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b1e0:	e003      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b1e2:	e002      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b1e8:	bf00      	nop
          }
        }
        break;
 800b1ea:	f000 bc28 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b1ee:	4b4f      	ldr	r3, [pc, #316]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b1f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b1fa:	4b4c      	ldr	r3, [pc, #304]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b206:	d106      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d103      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b20e:	4b4a      	ldr	r3, [pc, #296]	@ (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b210:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b212:	f000 bc14 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b21c:	d108      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b21e:	f107 0320 	add.w	r3, r7, #32
 800b222:	4618      	mov	r0, r3
 800b224:	f7fd fc82 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b22c:	f000 bc07 	b.w	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b236:	d107      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b238:	f107 0314 	add.w	r3, r7, #20
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fd fddf 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b246:	e3fa      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b24c:	e3f7      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b24e:	4b37      	ldr	r3, [pc, #220]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b254:	f003 0307 	and.w	r3, r3, #7
 800b258:	633b      	str	r3, [r7, #48]	@ 0x30
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	d861      	bhi.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b260:	a201      	add	r2, pc, #4	@ (adr r2, 800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b266:	bf00      	nop
 800b268:	0800b27d 	.word	0x0800b27d
 800b26c:	0800b28d 	.word	0x0800b28d
 800b270:	0800b29d 	.word	0x0800b29d
 800b274:	0800b2ad 	.word	0x0800b2ad
 800b278:	0800b2b3 	.word	0x0800b2b3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b27c:	f107 0320 	add.w	r3, r7, #32
 800b280:	4618      	mov	r0, r3
 800b282:	f7fd fc53 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b28a:	e04e      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	4618      	mov	r0, r3
 800b292:	f7fd fdb5 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b29a:	e046      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29c:	f107 0308 	add.w	r3, r7, #8
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fd ff17 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2aa:	e03e      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b2ac:	4b23      	ldr	r3, [pc, #140]	@ (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b2ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2b0:	e03b      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2be:	4b1b      	ldr	r3, [pc, #108]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d10c      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b2d0:	4b16      	ldr	r3, [pc, #88]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	08db      	lsrs	r3, r3, #3
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	4a15      	ldr	r2, [pc, #84]	@ (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2e2:	e01e      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e4:	4b11      	ldr	r3, [pc, #68]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2f0:	d106      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2f8:	d102      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b2fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2fe:	e010      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b300:	4b0a      	ldr	r3, [pc, #40]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b308:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b30c:	d106      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b314:	d102      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b316:	4b08      	ldr	r3, [pc, #32]	@ (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b318:	637b      	str	r3, [r7, #52]	@ 0x34
 800b31a:	e002      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b320:	e003      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b322:	e002      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b328:	bf00      	nop
          }
        }
        break;
 800b32a:	e388      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b32c:	44020c00 	.word	0x44020c00
 800b330:	03d09000 	.word	0x03d09000
 800b334:	003d0900 	.word	0x003d0900
 800b338:	017d7840 	.word	0x017d7840
 800b33c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b340:	4ba9      	ldr	r3, [pc, #676]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b34a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	2b20      	cmp	r3, #32
 800b350:	f200 809a 	bhi.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b354:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35a:	bf00      	nop
 800b35c:	0800b3e1 	.word	0x0800b3e1
 800b360:	0800b489 	.word	0x0800b489
 800b364:	0800b489 	.word	0x0800b489
 800b368:	0800b489 	.word	0x0800b489
 800b36c:	0800b489 	.word	0x0800b489
 800b370:	0800b489 	.word	0x0800b489
 800b374:	0800b489 	.word	0x0800b489
 800b378:	0800b489 	.word	0x0800b489
 800b37c:	0800b3f1 	.word	0x0800b3f1
 800b380:	0800b489 	.word	0x0800b489
 800b384:	0800b489 	.word	0x0800b489
 800b388:	0800b489 	.word	0x0800b489
 800b38c:	0800b489 	.word	0x0800b489
 800b390:	0800b489 	.word	0x0800b489
 800b394:	0800b489 	.word	0x0800b489
 800b398:	0800b489 	.word	0x0800b489
 800b39c:	0800b401 	.word	0x0800b401
 800b3a0:	0800b489 	.word	0x0800b489
 800b3a4:	0800b489 	.word	0x0800b489
 800b3a8:	0800b489 	.word	0x0800b489
 800b3ac:	0800b489 	.word	0x0800b489
 800b3b0:	0800b489 	.word	0x0800b489
 800b3b4:	0800b489 	.word	0x0800b489
 800b3b8:	0800b489 	.word	0x0800b489
 800b3bc:	0800b411 	.word	0x0800b411
 800b3c0:	0800b489 	.word	0x0800b489
 800b3c4:	0800b489 	.word	0x0800b489
 800b3c8:	0800b489 	.word	0x0800b489
 800b3cc:	0800b489 	.word	0x0800b489
 800b3d0:	0800b489 	.word	0x0800b489
 800b3d4:	0800b489 	.word	0x0800b489
 800b3d8:	0800b489 	.word	0x0800b489
 800b3dc:	0800b417 	.word	0x0800b417
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3e0:	f107 0320 	add.w	r3, r7, #32
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fd fba1 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3ee:	e04e      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f0:	f107 0314 	add.w	r3, r7, #20
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fd fd03 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3fe:	e046      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd fe65 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b40e:	e03e      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b410:	4b76      	ldr	r3, [pc, #472]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b414:	e03b      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b416:	4b74      	ldr	r3, [pc, #464]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b41c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b420:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b422:	4b71      	ldr	r3, [pc, #452]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d10c      	bne.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b430:	2b00      	cmp	r3, #0
 800b432:	d109      	bne.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b434:	4b6c      	ldr	r3, [pc, #432]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	08db      	lsrs	r3, r3, #3
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	4a6c      	ldr	r2, [pc, #432]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b440:	fa22 f303 	lsr.w	r3, r2, r3
 800b444:	637b      	str	r3, [r7, #52]	@ 0x34
 800b446:	e01e      	b.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b448:	4b67      	ldr	r3, [pc, #412]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b454:	d106      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b45c:	d102      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b45e:	4b65      	ldr	r3, [pc, #404]	@ (800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b460:	637b      	str	r3, [r7, #52]	@ 0x34
 800b462:	e010      	b.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b464:	4b60      	ldr	r3, [pc, #384]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b46c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b470:	d106      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b478:	d102      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b47a:	4b5f      	ldr	r3, [pc, #380]	@ (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b47e:	e002      	b.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b484:	e003      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b486:	e002      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b48c:	bf00      	nop
          }
        }
        break;
 800b48e:	e2d6      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b490:	4b55      	ldr	r3, [pc, #340]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b496:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b49a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4a2:	d031      	beq.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4aa:	d866      	bhi.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4b0:	d027      	beq.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4b6:	d860      	bhi.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ba:	2b80      	cmp	r3, #128	@ 0x80
 800b4bc:	d019      	beq.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	2b80      	cmp	r3, #128	@ 0x80
 800b4c2:	d85a      	bhi.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4cc:	2b40      	cmp	r3, #64	@ 0x40
 800b4ce:	d008      	beq.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b4d0:	e053      	b.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4d2:	f107 0320 	add.w	r3, r7, #32
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fd fb28 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4e0:	e04e      	b.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e2:	f107 0314 	add.w	r3, r7, #20
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fd fc8a 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4f0:	e046      	b.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fd fdec 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b500:	e03e      	b.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b502:	4b3a      	ldr	r3, [pc, #232]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b504:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b506:	e03b      	b.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b508:	4b37      	ldr	r3, [pc, #220]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b50a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b50e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b512:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b514:	4b34      	ldr	r3, [pc, #208]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d10c      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b526:	4b30      	ldr	r3, [pc, #192]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	08db      	lsrs	r3, r3, #3
 800b52c:	f003 0303 	and.w	r3, r3, #3
 800b530:	4a2f      	ldr	r2, [pc, #188]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b532:	fa22 f303 	lsr.w	r3, r2, r3
 800b536:	637b      	str	r3, [r7, #52]	@ 0x34
 800b538:	e01e      	b.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b53a:	4b2b      	ldr	r3, [pc, #172]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b546:	d106      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800b548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b54e:	d102      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b550:	4b28      	ldr	r3, [pc, #160]	@ (800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b552:	637b      	str	r3, [r7, #52]	@ 0x34
 800b554:	e010      	b.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b556:	4b24      	ldr	r3, [pc, #144]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b55e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b562:	d106      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800b564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b56a:	d102      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b56c:	4b22      	ldr	r3, [pc, #136]	@ (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b570:	e002      	b.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b576:	e003      	b.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800b578:	e002      	b.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b57e:	bf00      	nop
          }
        }
        break;
 800b580:	e25d      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800b582:	4b19      	ldr	r3, [pc, #100]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b588:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b58c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b594:	f7fb fb14 	bl	8006bc0 <HAL_RCC_GetPCLK2Freq>
 800b598:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b59a:	e250      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800b59c:	4b12      	ldr	r3, [pc, #72]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5a8:	d10b      	bne.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5b0:	d107      	bne.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b2:	f107 0314 	add.w	r3, r7, #20
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fd fc22 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c0:	e04f      	b.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800b5c2:	4b09      	ldr	r3, [pc, #36]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ce:	d115      	bne.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5d6:	d111      	bne.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d8:	f107 0308 	add.w	r3, r7, #8
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fd fd79 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5e6:	e03c      	b.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800b5e8:	44020c00 	.word	0x44020c00
 800b5ec:	00bb8000 	.word	0x00bb8000
 800b5f0:	03d09000 	.word	0x03d09000
 800b5f4:	003d0900 	.word	0x003d0900
 800b5f8:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800b5fc:	4b94      	ldr	r3, [pc, #592]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b02      	cmp	r3, #2
 800b606:	d10d      	bne.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800b608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b60e:	d109      	bne.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b610:	4b8f      	ldr	r3, [pc, #572]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	08db      	lsrs	r3, r3, #3
 800b616:	f003 0303 	and.w	r3, r3, #3
 800b61a:	4a8e      	ldr	r2, [pc, #568]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b61c:	fa22 f303 	lsr.w	r3, r2, r3
 800b620:	637b      	str	r3, [r7, #52]	@ 0x34
 800b622:	e01e      	b.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800b624:	4b8a      	ldr	r3, [pc, #552]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b630:	d106      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800b632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b638:	d102      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800b63a:	4b87      	ldr	r3, [pc, #540]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b63e:	e010      	b.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800b640:	4b83      	ldr	r3, [pc, #524]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b64c:	d106      	bne.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b654:	d102      	bne.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800b656:	4b81      	ldr	r3, [pc, #516]	@ (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b658:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65a:	e002      	b.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b660:	e1ed      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b662:	e1ec      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800b664:	4b7a      	ldr	r3, [pc, #488]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b66a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b66e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b676:	f7fb fab9 	bl	8006bec <HAL_RCC_GetPCLK3Freq>
 800b67a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b67c:	e1df      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800b67e:	4b74      	ldr	r3, [pc, #464]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b68a:	d10b      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b692:	d107      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b694:	f107 0314 	add.w	r3, r7, #20
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fd fbb1 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a2:	e045      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800b6a4:	4b6a      	ldr	r3, [pc, #424]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6b0:	d10b      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6b8:	d107      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ba:	f107 0308 	add.w	r3, r7, #8
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fd fd08 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c8:	e032      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800b6ca:	4b61      	ldr	r3, [pc, #388]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d10d      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6dc:	d109      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b6de:	4b5c      	ldr	r3, [pc, #368]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	08db      	lsrs	r3, r3, #3
 800b6e4:	f003 0303 	and.w	r3, r3, #3
 800b6e8:	4a5a      	ldr	r2, [pc, #360]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6f0:	e01e      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800b6f2:	4b57      	ldr	r3, [pc, #348]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6fe:	d106      	bne.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800b700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b706:	d102      	bne.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800b708:	4b53      	ldr	r3, [pc, #332]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b70c:	e010      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800b70e:	4b50      	ldr	r3, [pc, #320]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b71a:	d106      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800b71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b722:	d102      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800b724:	4b4d      	ldr	r3, [pc, #308]	@ (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b726:	637b      	str	r3, [r7, #52]	@ 0x34
 800b728:	e002      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b72e:	e186      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b730:	e185      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b732:	4b47      	ldr	r3, [pc, #284]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b738:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800b73c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b744:	f7fb fa3c 	bl	8006bc0 <HAL_RCC_GetPCLK2Freq>
 800b748:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b74a:	e178      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800b74c:	4b40      	ldr	r3, [pc, #256]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b758:	d10b      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800b75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b760:	d107      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b762:	f107 0314 	add.w	r3, r7, #20
 800b766:	4618      	mov	r0, r3
 800b768:	f7fd fb4a 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b770:	e045      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800b772:	4b37      	ldr	r3, [pc, #220]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b77a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b77e:	d10b      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800b780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b786:	d107      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b788:	f107 0308 	add.w	r3, r7, #8
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fd fca1 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	637b      	str	r3, [r7, #52]	@ 0x34
 800b796:	e032      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800b798:	4b2d      	ldr	r3, [pc, #180]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0302 	and.w	r3, r3, #2
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d10d      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b7aa:	d109      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b7ac:	4b28      	ldr	r3, [pc, #160]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	08db      	lsrs	r3, r3, #3
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	4a27      	ldr	r2, [pc, #156]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7be:	e01e      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b7c0:	4b23      	ldr	r3, [pc, #140]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7cc:	d106      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7d4:	d102      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b7d6:	4b20      	ldr	r3, [pc, #128]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b7d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7da:	e010      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7e8:	d106      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b7f0:	d102      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b7f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f6:	e002      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7fc:	e11f      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7fe:	e11e      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b800:	4b13      	ldr	r3, [pc, #76]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b806:	f003 0303 	and.w	r3, r3, #3
 800b80a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d85f      	bhi.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b812:	a201      	add	r2, pc, #4	@ (adr r2, 800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b818:	0800b829 	.word	0x0800b829
 800b81c:	0800b831 	.word	0x0800b831
 800b820:	0800b841 	.word	0x0800b841
 800b824:	0800b861 	.word	0x0800b861

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b828:	f7fb f998 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 800b82c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b82e:	e053      	b.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b830:	f107 0320 	add.w	r3, r7, #32
 800b834:	4618      	mov	r0, r3
 800b836:	f7fd f979 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b83e:	e04b      	b.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	4618      	mov	r0, r3
 800b846:	f7fd fadb 	bl	8008e00 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b84e:	e043      	b.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b850:	44020c00 	.word	0x44020c00
 800b854:	03d09000 	.word	0x03d09000
 800b858:	003d0900 	.word	0x003d0900
 800b85c:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b860:	4b79      	ldr	r3, [pc, #484]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b866:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b86a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b86c:	4b76      	ldr	r3, [pc, #472]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b02      	cmp	r3, #2
 800b876:	d10c      	bne.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d109      	bne.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b87e:	4b72      	ldr	r3, [pc, #456]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	08db      	lsrs	r3, r3, #3
 800b884:	f003 0303 	and.w	r3, r3, #3
 800b888:	4a70      	ldr	r2, [pc, #448]	@ (800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b88a:	fa22 f303 	lsr.w	r3, r2, r3
 800b88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b890:	e01e      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b892:	4b6d      	ldr	r3, [pc, #436]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b89a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b89e:	d106      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8a6:	d102      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b8a8:	4b69      	ldr	r3, [pc, #420]	@ (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b8aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ac:	e010      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8ae:	4b66      	ldr	r3, [pc, #408]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8ba:	d106      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8c2:	d102      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b8c4:	4b63      	ldr	r3, [pc, #396]	@ (800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c8:	e002      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b8ce:	e003      	b.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b8d0:	e002      	b.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8d6:	bf00      	nop
          }
        }
        break;
 800b8d8:	e0b1      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b8da:	4b5b      	ldr	r3, [pc, #364]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b8dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b8e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b8e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b8e6:	4b58      	ldr	r3, [pc, #352]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b8e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8ec:	f003 0302 	and.w	r3, r3, #2
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d106      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d103      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800b8fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b900:	e01f      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800b902:	4b51      	ldr	r3, [pc, #324]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b90c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b910:	d106      	bne.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800b912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b914:	2b40      	cmp	r3, #64	@ 0x40
 800b916:	d103      	bne.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800b918:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b91c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b91e:	e010      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800b920:	4b49      	ldr	r3, [pc, #292]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b92c:	d106      	bne.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	2b80      	cmp	r3, #128	@ 0x80
 800b932:	d103      	bne.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800b934:	f248 0312 	movw	r3, #32786	@ 0x8012
 800b938:	637b      	str	r3, [r7, #52]	@ 0x34
 800b93a:	e002      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b940:	e07d      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b942:	e07c      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b944:	4b40      	ldr	r3, [pc, #256]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b94a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b94e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b950:	4b3d      	ldr	r3, [pc, #244]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b95c:	d105      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800b964:	4b3c      	ldr	r3, [pc, #240]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b966:	637b      	str	r3, [r7, #52]	@ 0x34
 800b968:	e031      	b.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800b96a:	4b37      	ldr	r3, [pc, #220]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b976:	d10a      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800b978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d107      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b97e:	f107 0320 	add.w	r3, r7, #32
 800b982:	4618      	mov	r0, r3
 800b984:	f7fd f8d2 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b98c:	e01f      	b.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800b98e:	4b2e      	ldr	r3, [pc, #184]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b994:	f003 0302 	and.w	r3, r3, #2
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d106      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	d103      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800b9a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9a8:	e011      	b.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800b9aa:	4b27      	ldr	r3, [pc, #156]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9b8:	d106      	bne.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9bc:	2b30      	cmp	r3, #48	@ 0x30
 800b9be:	d103      	bne.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800b9c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9c6:	e002      	b.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b9cc:	e037      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b9ce:	e036      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d107      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9e2:	f107 0320 	add.w	r3, r7, #32
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fd f8a0 	bl	8008b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b9f0:	e025      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800b9f2:	4b15      	ldr	r3, [pc, #84]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9fe:	d10a      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800ba00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba02:	2b20      	cmp	r3, #32
 800ba04:	d107      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba06:	f107 0308 	add.w	r3, r7, #8
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fd fb62 	bl	80090d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba14:	e00f      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ba16:	4b0c      	ldr	r3, [pc, #48]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba22:	d105      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	2b30      	cmp	r3, #48	@ 0x30
 800ba28:	d102      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800ba2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ba2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba2e:	e002      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800ba30:	2300      	movs	r3, #0
 800ba32:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800ba34:	e003      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba36:	e002      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba3c:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800ba3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	373c      	adds	r7, #60	@ 0x3c
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd90      	pop	{r4, r7, pc}
 800ba48:	44020c00 	.word	0x44020c00
 800ba4c:	03d09000 	.word	0x03d09000
 800ba50:	003d0900 	.word	0x003d0900
 800ba54:	017d7840 	.word	0x017d7840
 800ba58:	02dc6c00 	.word	0x02dc6c00

0800ba5c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800ba64:	4b48      	ldr	r3, [pc, #288]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a47      	ldr	r2, [pc, #284]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800ba6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba70:	f7f8 fe38 	bl	80046e4 <HAL_GetTick>
 800ba74:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba76:	e008      	b.n	800ba8a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba78:	f7f8 fe34 	bl	80046e4 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d901      	bls.n	800ba8a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e07a      	b.n	800bb80 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba8a:	4b3f      	ldr	r3, [pc, #252]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f0      	bne.n	800ba78 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ba96:	4b3c      	ldr	r3, [pc, #240]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800ba98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ba9e:	f023 0303 	bic.w	r3, r3, #3
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	6811      	ldr	r1, [r2, #0]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	6852      	ldr	r2, [r2, #4]
 800baaa:	0212      	lsls	r2, r2, #8
 800baac:	430a      	orrs	r2, r1
 800baae:	4936      	ldr	r1, [pc, #216]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	3b01      	subs	r3, #1
 800baba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	025b      	lsls	r3, r3, #9
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	431a      	orrs	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	3b01      	subs	r3, #1
 800bad0:	041b      	lsls	r3, r3, #16
 800bad2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bad6:	431a      	orrs	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	3b01      	subs	r3, #1
 800bade:	061b      	lsls	r3, r3, #24
 800bae0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bae4:	4928      	ldr	r1, [pc, #160]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bae6:	4313      	orrs	r3, r2
 800bae8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800baea:	4b27      	ldr	r3, [pc, #156]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800baec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baee:	f023 020c 	bic.w	r2, r3, #12
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	4924      	ldr	r1, [pc, #144]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800bafc:	4b22      	ldr	r3, [pc, #136]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb00:	f023 0220 	bic.w	r2, r3, #32
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	491f      	ldr	r1, [pc, #124]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bb0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb16:	491c      	ldr	r1, [pc, #112]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800bb1c:	4b1a      	ldr	r3, [pc, #104]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb20:	4a19      	ldr	r2, [pc, #100]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb22:	f023 0310 	bic.w	r3, r3, #16
 800bb26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800bb28:	4b17      	ldr	r3, [pc, #92]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb30:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6a12      	ldr	r2, [r2, #32]
 800bb38:	00d2      	lsls	r2, r2, #3
 800bb3a:	4913      	ldr	r1, [pc, #76]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800bb40:	4b11      	ldr	r3, [pc, #68]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb44:	4a10      	ldr	r2, [pc, #64]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb46:	f043 0310 	orr.w	r3, r3, #16
 800bb4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800bb4c:	4b0e      	ldr	r3, [pc, #56]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a0d      	ldr	r2, [pc, #52]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb58:	f7f8 fdc4 	bl	80046e4 <HAL_GetTick>
 800bb5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb5e:	e008      	b.n	800bb72 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb60:	f7f8 fdc0 	bl	80046e4 <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d901      	bls.n	800bb72 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e006      	b.n	800bb80 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb72:	4b05      	ldr	r3, [pc, #20]	@ (800bb88 <RCCEx_PLL2_Config+0x12c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0f0      	beq.n	800bb60 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0

}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	44020c00 	.word	0x44020c00

0800bb8c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800bb94:	4b48      	ldr	r3, [pc, #288]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a47      	ldr	r2, [pc, #284]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bb9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bba0:	f7f8 fda0 	bl	80046e4 <HAL_GetTick>
 800bba4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bba6:	e008      	b.n	800bbba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bba8:	f7f8 fd9c 	bl	80046e4 <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d901      	bls.n	800bbba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e07a      	b.n	800bcb0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbba:	4b3f      	ldr	r3, [pc, #252]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1f0      	bne.n	800bba8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bbc6:	4b3c      	ldr	r3, [pc, #240]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bbc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbce:	f023 0303 	bic.w	r3, r3, #3
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	6811      	ldr	r1, [r2, #0]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	6852      	ldr	r2, [r2, #4]
 800bbda:	0212      	lsls	r2, r2, #8
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	4936      	ldr	r1, [pc, #216]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	630b      	str	r3, [r1, #48]	@ 0x30
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	025b      	lsls	r3, r3, #9
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	431a      	orrs	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	041b      	lsls	r3, r3, #16
 800bc02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc06:	431a      	orrs	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	061b      	lsls	r3, r3, #24
 800bc10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc14:	4928      	ldr	r1, [pc, #160]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc1a:	4b27      	ldr	r3, [pc, #156]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1e:	f023 020c 	bic.w	r2, r3, #12
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	4924      	ldr	r1, [pc, #144]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800bc2c:	4b22      	ldr	r3, [pc, #136]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc30:	f023 0220 	bic.w	r2, r3, #32
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	491f      	ldr	r1, [pc, #124]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bc3e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc46:	491c      	ldr	r1, [pc, #112]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800bc4c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc50:	4a19      	ldr	r2, [pc, #100]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc52:	f023 0310 	bic.w	r3, r3, #16
 800bc56:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800bc58:	4b17      	ldr	r3, [pc, #92]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc60:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	6a12      	ldr	r2, [r2, #32]
 800bc68:	00d2      	lsls	r2, r2, #3
 800bc6a:	4913      	ldr	r1, [pc, #76]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800bc70:	4b11      	ldr	r3, [pc, #68]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc74:	4a10      	ldr	r2, [pc, #64]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc76:	f043 0310 	orr.w	r3, r3, #16
 800bc7a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800bc7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a0d      	ldr	r2, [pc, #52]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bc82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc88:	f7f8 fd2c 	bl	80046e4 <HAL_GetTick>
 800bc8c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc8e:	e008      	b.n	800bca2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc90:	f7f8 fd28 	bl	80046e4 <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d901      	bls.n	800bca2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e006      	b.n	800bcb0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bca2:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <RCCEx_PLL3_Config+0x12c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0f0      	beq.n	800bc90 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	44020c00 	.word	0x44020c00

0800bcbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e162      	b.n	800bf94 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a70      	ldr	r2, [pc, #448]	@ (800be94 <HAL_SPI_Init+0x1d8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d018      	beq.n	800bd0a <HAL_SPI_Init+0x4e>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a6e      	ldr	r2, [pc, #440]	@ (800be98 <HAL_SPI_Init+0x1dc>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d013      	beq.n	800bd0a <HAL_SPI_Init+0x4e>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a6d      	ldr	r2, [pc, #436]	@ (800be9c <HAL_SPI_Init+0x1e0>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d00e      	beq.n	800bd0a <HAL_SPI_Init+0x4e>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a6b      	ldr	r2, [pc, #428]	@ (800bea0 <HAL_SPI_Init+0x1e4>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d009      	beq.n	800bd0a <HAL_SPI_Init+0x4e>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a6a      	ldr	r2, [pc, #424]	@ (800bea4 <HAL_SPI_Init+0x1e8>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d004      	beq.n	800bd0a <HAL_SPI_Init+0x4e>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a68      	ldr	r2, [pc, #416]	@ (800bea8 <HAL_SPI_Init+0x1ec>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	e000      	b.n	800bd0c <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800bd0a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a5f      	ldr	r2, [pc, #380]	@ (800be94 <HAL_SPI_Init+0x1d8>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d018      	beq.n	800bd4e <HAL_SPI_Init+0x92>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a5d      	ldr	r2, [pc, #372]	@ (800be98 <HAL_SPI_Init+0x1dc>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d013      	beq.n	800bd4e <HAL_SPI_Init+0x92>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a5c      	ldr	r2, [pc, #368]	@ (800be9c <HAL_SPI_Init+0x1e0>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d00e      	beq.n	800bd4e <HAL_SPI_Init+0x92>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a5a      	ldr	r2, [pc, #360]	@ (800bea0 <HAL_SPI_Init+0x1e4>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d009      	beq.n	800bd4e <HAL_SPI_Init+0x92>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a59      	ldr	r2, [pc, #356]	@ (800bea4 <HAL_SPI_Init+0x1e8>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d004      	beq.n	800bd4e <HAL_SPI_Init+0x92>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a57      	ldr	r2, [pc, #348]	@ (800bea8 <HAL_SPI_Init+0x1ec>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d105      	bne.n	800bd5a <HAL_SPI_Init+0x9e>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2b0f      	cmp	r3, #15
 800bd54:	d901      	bls.n	800bd5a <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e11c      	b.n	800bf94 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fdac 	bl	800c8b8 <SPI_GetPacketSize>
 800bd60:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a4b      	ldr	r2, [pc, #300]	@ (800be94 <HAL_SPI_Init+0x1d8>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d018      	beq.n	800bd9e <HAL_SPI_Init+0xe2>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a49      	ldr	r2, [pc, #292]	@ (800be98 <HAL_SPI_Init+0x1dc>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d013      	beq.n	800bd9e <HAL_SPI_Init+0xe2>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a48      	ldr	r2, [pc, #288]	@ (800be9c <HAL_SPI_Init+0x1e0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d00e      	beq.n	800bd9e <HAL_SPI_Init+0xe2>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a46      	ldr	r2, [pc, #280]	@ (800bea0 <HAL_SPI_Init+0x1e4>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d009      	beq.n	800bd9e <HAL_SPI_Init+0xe2>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a45      	ldr	r2, [pc, #276]	@ (800bea4 <HAL_SPI_Init+0x1e8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d004      	beq.n	800bd9e <HAL_SPI_Init+0xe2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a43      	ldr	r2, [pc, #268]	@ (800bea8 <HAL_SPI_Init+0x1ec>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d102      	bne.n	800bda4 <HAL_SPI_Init+0xe8>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d820      	bhi.n	800bde6 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bda8:	4a40      	ldr	r2, [pc, #256]	@ (800beac <HAL_SPI_Init+0x1f0>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d018      	beq.n	800bde0 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a3f      	ldr	r2, [pc, #252]	@ (800beb0 <HAL_SPI_Init+0x1f4>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d013      	beq.n	800bde0 <HAL_SPI_Init+0x124>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a3d      	ldr	r2, [pc, #244]	@ (800beb4 <HAL_SPI_Init+0x1f8>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d00e      	beq.n	800bde0 <HAL_SPI_Init+0x124>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a3c      	ldr	r2, [pc, #240]	@ (800beb8 <HAL_SPI_Init+0x1fc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d009      	beq.n	800bde0 <HAL_SPI_Init+0x124>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a3a      	ldr	r2, [pc, #232]	@ (800bebc <HAL_SPI_Init+0x200>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d004      	beq.n	800bde0 <HAL_SPI_Init+0x124>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a39      	ldr	r2, [pc, #228]	@ (800bec0 <HAL_SPI_Init+0x204>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d104      	bne.n	800bdea <HAL_SPI_Init+0x12e>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2b10      	cmp	r3, #16
 800bde4:	d901      	bls.n	800bdea <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e0d4      	b.n	800bf94 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7f7 fdd6 	bl	80039b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f022 0201 	bic.w	r2, r2, #1
 800be1a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800be26:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be30:	d119      	bne.n	800be66 <HAL_SPI_Init+0x1aa>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be3a:	d103      	bne.n	800be44 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be40:	2b00      	cmp	r3, #0
 800be42:	d008      	beq.n	800be56 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10c      	bne.n	800be66 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be54:	d107      	bne.n	800be66 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800be64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d028      	beq.n	800bec4 <HAL_SPI_Init+0x208>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	2b06      	cmp	r3, #6
 800be78:	d924      	bls.n	800bec4 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	e020      	b.n	800bed4 <HAL_SPI_Init+0x218>
 800be92:	bf00      	nop
 800be94:	40014c00 	.word	0x40014c00
 800be98:	50014c00 	.word	0x50014c00
 800be9c:	44002000 	.word	0x44002000
 800bea0:	54002000 	.word	0x54002000
 800bea4:	40015000 	.word	0x40015000
 800bea8:	50015000 	.word	0x50015000
 800beac:	40013000 	.word	0x40013000
 800beb0:	50013000 	.word	0x50013000
 800beb4:	40003800 	.word	0x40003800
 800beb8:	50003800 	.word	0x50003800
 800bebc:	40003c00 	.word	0x40003c00
 800bec0:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bed2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	69da      	ldr	r2, [r3, #28]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bedc:	431a      	orrs	r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	431a      	orrs	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bee6:	ea42 0103 	orr.w	r1, r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68da      	ldr	r2, [r3, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befe:	431a      	orrs	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf04:	431a      	orrs	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	431a      	orrs	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	431a      	orrs	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
 800bf1c:	431a      	orrs	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	431a      	orrs	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf28:	431a      	orrs	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	431a      	orrs	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf34:	431a      	orrs	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf40:	ea42 0103 	orr.w	r1, r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	430a      	orrs	r2, r1
 800bf4e:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 0201 	bic.w	r2, r2, #1
 800bf5e:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00a      	beq.n	800bf82 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	430a      	orrs	r2, r1
 800bf80:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	603b      	str	r3, [r7, #0]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3320      	adds	r3, #32
 800bfb2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bfb4:	f7f8 fb96 	bl	80046e4 <HAL_GetTick>
 800bfb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d001      	beq.n	800bfca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	e1f9      	b.n	800c3be <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d002      	beq.n	800bfd6 <HAL_SPI_Transmit+0x3a>
 800bfd0:	88fb      	ldrh	r3, [r7, #6]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e1f1      	b.n	800c3be <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d101      	bne.n	800bfe8 <HAL_SPI_Transmit+0x4c>
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	e1ea      	b.n	800c3be <HAL_SPI_Transmit+0x422>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2203      	movs	r2, #3
 800bff4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	88fa      	ldrh	r2, [r7, #6]
 800c00a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	88fa      	ldrh	r2, [r7, #6]
 800c012:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2200      	movs	r2, #0
 800c020:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2200      	movs	r2, #0
 800c028:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c040:	d108      	bne.n	800c054 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	e009      	b.n	800c068 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c066:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	0c1b      	lsrs	r3, r3, #16
 800c070:	041b      	lsls	r3, r3, #16
 800c072:	88f9      	ldrh	r1, [r7, #6]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	6812      	ldr	r2, [r2, #0]
 800c078:	430b      	orrs	r3, r1
 800c07a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f042 0201 	orr.w	r2, r2, #1
 800c08a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c094:	d107      	bne.n	800c0a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	d965      	bls.n	800c17a <HAL_SPI_Transmit+0x1de>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a94      	ldr	r2, [pc, #592]	@ (800c304 <HAL_SPI_Transmit+0x368>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d059      	beq.n	800c16c <HAL_SPI_Transmit+0x1d0>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a92      	ldr	r2, [pc, #584]	@ (800c308 <HAL_SPI_Transmit+0x36c>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d054      	beq.n	800c16c <HAL_SPI_Transmit+0x1d0>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a91      	ldr	r2, [pc, #580]	@ (800c30c <HAL_SPI_Transmit+0x370>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d04f      	beq.n	800c16c <HAL_SPI_Transmit+0x1d0>
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a8f      	ldr	r2, [pc, #572]	@ (800c310 <HAL_SPI_Transmit+0x374>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d04a      	beq.n	800c16c <HAL_SPI_Transmit+0x1d0>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a8e      	ldr	r2, [pc, #568]	@ (800c314 <HAL_SPI_Transmit+0x378>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d045      	beq.n	800c16c <HAL_SPI_Transmit+0x1d0>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a8c      	ldr	r2, [pc, #560]	@ (800c318 <HAL_SPI_Transmit+0x37c>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d147      	bne.n	800c17a <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c0ea:	e03f      	b.n	800c16c <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	f003 0302 	and.w	r3, r3, #2
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d114      	bne.n	800c124 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6812      	ldr	r2, [r2, #0]
 800c104:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c10a:	1d1a      	adds	r2, r3, #4
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c116:	b29b      	uxth	r3, r3
 800c118:	3b01      	subs	r3, #1
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c122:	e023      	b.n	800c16c <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c124:	f7f8 fade 	bl	80046e4 <HAL_GetTick>
 800c128:	4602      	mov	r2, r0
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d803      	bhi.n	800c13c <HAL_SPI_Transmit+0x1a0>
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13a:	d102      	bne.n	800c142 <HAL_SPI_Transmit+0x1a6>
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d114      	bne.n	800c16c <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 faea 	bl	800c71c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c14e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	e128      	b.n	800c3be <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c172:	b29b      	uxth	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1b9      	bne.n	800c0ec <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c178:	e0fb      	b.n	800c372 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	2b07      	cmp	r3, #7
 800c180:	f240 80f0 	bls.w	800c364 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c184:	e05d      	b.n	800c242 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b02      	cmp	r3, #2
 800c192:	d132      	bne.n	800c1fa <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d918      	bls.n	800c1d2 <HAL_SPI_Transmit+0x236>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d014      	beq.n	800c1d2 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6812      	ldr	r2, [r2, #0]
 800c1b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1b8:	1d1a      	adds	r2, r3, #4
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3b02      	subs	r3, #2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c1d0:	e037      	b.n	800c242 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1d6:	881a      	ldrh	r2, [r3, #0]
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1e0:	1c9a      	adds	r2, r3, #2
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c1f8:	e023      	b.n	800c242 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1fa:	f7f8 fa73 	bl	80046e4 <HAL_GetTick>
 800c1fe:	4602      	mov	r2, r0
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	429a      	cmp	r2, r3
 800c208:	d803      	bhi.n	800c212 <HAL_SPI_Transmit+0x276>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c210:	d102      	bne.n	800c218 <HAL_SPI_Transmit+0x27c>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d114      	bne.n	800c242 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 fa7f 	bl	800c71c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c224:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e0bd      	b.n	800c3be <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c248:	b29b      	uxth	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d19b      	bne.n	800c186 <HAL_SPI_Transmit+0x1ea>
 800c24e:	e090      	b.n	800c372 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d15e      	bne.n	800c31c <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c264:	b29b      	uxth	r3, r3
 800c266:	2b03      	cmp	r3, #3
 800c268:	d918      	bls.n	800c29c <HAL_SPI_Transmit+0x300>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c26e:	2b40      	cmp	r3, #64	@ 0x40
 800c270:	d914      	bls.n	800c29c <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	6812      	ldr	r2, [r2, #0]
 800c27c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3b04      	subs	r3, #4
 800c292:	b29a      	uxth	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c29a:	e063      	b.n	800c364 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d917      	bls.n	800c2d8 <HAL_SPI_Transmit+0x33c>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d013      	beq.n	800c2d8 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2b4:	881a      	ldrh	r2, [r3, #0]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2be:	1c9a      	adds	r2, r3, #2
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	3b02      	subs	r3, #2
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c2d6:	e045      	b.n	800c364 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3320      	adds	r3, #32
 800c2e2:	7812      	ldrb	r2, [r2, #0]
 800c2e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c302:	e02f      	b.n	800c364 <HAL_SPI_Transmit+0x3c8>
 800c304:	40013000 	.word	0x40013000
 800c308:	50013000 	.word	0x50013000
 800c30c:	40003800 	.word	0x40003800
 800c310:	50003800 	.word	0x50003800
 800c314:	40003c00 	.word	0x40003c00
 800c318:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c31c:	f7f8 f9e2 	bl	80046e4 <HAL_GetTick>
 800c320:	4602      	mov	r2, r0
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d803      	bhi.n	800c334 <HAL_SPI_Transmit+0x398>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c332:	d102      	bne.n	800c33a <HAL_SPI_Transmit+0x39e>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d114      	bne.n	800c364 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f000 f9ee 	bl	800c71c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c346:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c360:	2303      	movs	r3, #3
 800c362:	e02c      	b.n	800c3be <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f47f af6f 	bne.w	800c250 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2200      	movs	r2, #0
 800c37a:	2108      	movs	r1, #8
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 fa6d 	bl	800c85c <SPI_WaitOnFlagUntilTimeout>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d007      	beq.n	800c398 <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c38e:	f043 0220 	orr.w	r2, r3, #32
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f000 f9bf 	bl	800c71c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e000      	b.n	800c3be <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
  }
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3718      	adds	r7, #24
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop

0800c3c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	603b      	str	r3, [r7, #0]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3330      	adds	r3, #48	@ 0x30
 800c3de:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3e0:	f7f8 f980 	bl	80046e4 <HAL_GetTick>
 800c3e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d001      	beq.n	800c3f6 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	e181      	b.n	800c6fa <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <HAL_SPI_Receive+0x3a>
 800c3fc:	88fb      	ldrh	r3, [r7, #6]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	e179      	b.n	800c6fa <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d101      	bne.n	800c414 <HAL_SPI_Receive+0x4c>
 800c410:	2302      	movs	r3, #2
 800c412:	e172      	b.n	800c6fa <HAL_SPI_Receive+0x332>
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2204      	movs	r2, #4
 800c420:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2200      	movs	r2, #0
 800c428:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	88fa      	ldrh	r2, [r7, #6]
 800c436:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	88fa      	ldrh	r2, [r7, #6]
 800c43e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c46c:	d108      	bne.n	800c480 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	e009      	b.n	800c494 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c492:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	041b      	lsls	r3, r3, #16
 800c49e:	88f9      	ldrh	r1, [r7, #6]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	6812      	ldr	r2, [r2, #0]
 800c4a4:	430b      	orrs	r3, r1
 800c4a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f042 0201 	orr.w	r2, r2, #1
 800c4b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4c0:	d107      	bne.n	800c4d2 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	2b0f      	cmp	r3, #15
 800c4d8:	d966      	bls.n	800c5a8 <HAL_SPI_Receive+0x1e0>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a89      	ldr	r2, [pc, #548]	@ (800c704 <HAL_SPI_Receive+0x33c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d05a      	beq.n	800c59a <HAL_SPI_Receive+0x1d2>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a87      	ldr	r2, [pc, #540]	@ (800c708 <HAL_SPI_Receive+0x340>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d055      	beq.n	800c59a <HAL_SPI_Receive+0x1d2>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a86      	ldr	r2, [pc, #536]	@ (800c70c <HAL_SPI_Receive+0x344>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d050      	beq.n	800c59a <HAL_SPI_Receive+0x1d2>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a84      	ldr	r2, [pc, #528]	@ (800c710 <HAL_SPI_Receive+0x348>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d04b      	beq.n	800c59a <HAL_SPI_Receive+0x1d2>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a83      	ldr	r2, [pc, #524]	@ (800c714 <HAL_SPI_Receive+0x34c>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d046      	beq.n	800c59a <HAL_SPI_Receive+0x1d2>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a81      	ldr	r2, [pc, #516]	@ (800c718 <HAL_SPI_Receive+0x350>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d148      	bne.n	800c5a8 <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c516:	e040      	b.n	800c59a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	695a      	ldr	r2, [r3, #20]
 800c51e:	f248 0308 	movw	r3, #32776	@ 0x8008
 800c522:	4013      	ands	r3, r2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d014      	beq.n	800c552 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c530:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c532:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c538:	1d1a      	adds	r2, r3, #4
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c544:	b29b      	uxth	r3, r3
 800c546:	3b01      	subs	r3, #1
 800c548:	b29a      	uxth	r2, r3
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c550:	e023      	b.n	800c59a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c552:	f7f8 f8c7 	bl	80046e4 <HAL_GetTick>
 800c556:	4602      	mov	r2, r0
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d803      	bhi.n	800c56a <HAL_SPI_Receive+0x1a2>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d102      	bne.n	800c570 <HAL_SPI_Receive+0x1a8>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d114      	bne.n	800c59a <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 f8d3 	bl	800c71c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c57c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e0af      	b.n	800c6fa <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1b8      	bne.n	800c518 <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c5a6:	e095      	b.n	800c6d4 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	2b07      	cmp	r3, #7
 800c5ae:	f240 808b 	bls.w	800c6c8 <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c5b2:	e03f      	b.n	800c634 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d114      	bne.n	800c5ec <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	8812      	ldrh	r2, [r2, #0]
 800c5ca:	b292      	uxth	r2, r2
 800c5cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d2:	1c9a      	adds	r2, r3, #2
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c5ea:	e023      	b.n	800c634 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5ec:	f7f8 f87a 	bl	80046e4 <HAL_GetTick>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d803      	bhi.n	800c604 <HAL_SPI_Receive+0x23c>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c602:	d102      	bne.n	800c60a <HAL_SPI_Receive+0x242>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d114      	bne.n	800c634 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f000 f886 	bl	800c71c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c616:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e062      	b.n	800c6fa <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1b9      	bne.n	800c5b4 <HAL_SPI_Receive+0x1ec>
 800c640:	e048      	b.n	800c6d4 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d117      	bne.n	800c680 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c65c:	7812      	ldrb	r2, [r2, #0]
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c672:	b29b      	uxth	r3, r3
 800c674:	3b01      	subs	r3, #1
 800c676:	b29a      	uxth	r2, r3
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c67e:	e023      	b.n	800c6c8 <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c680:	f7f8 f830 	bl	80046e4 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d803      	bhi.n	800c698 <HAL_SPI_Receive+0x2d0>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c696:	d102      	bne.n	800c69e <HAL_SPI_Receive+0x2d6>
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d114      	bne.n	800c6c8 <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f000 f83c 	bl	800c71c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e018      	b.n	800c6fa <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1b6      	bne.n	800c642 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 f821 	bl	800c71c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e000      	b.n	800c6fa <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
  }
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	40013000 	.word	0x40013000
 800c708:	50013000 	.word	0x50013000
 800c70c:	40003800 	.word	0x40003800
 800c710:	50003800 	.word	0x50003800
 800c714:	40003c00 	.word	0x40003c00
 800c718:	50003c00 	.word	0x50003c00

0800c71c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	699a      	ldr	r2, [r3, #24]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 0208 	orr.w	r2, r2, #8
 800c73a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	699a      	ldr	r2, [r3, #24]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f042 0210 	orr.w	r2, r2, #16
 800c74a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f022 0201 	bic.w	r2, r2, #1
 800c75a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6812      	ldr	r2, [r2, #0]
 800c766:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800c76a:	f023 0303 	bic.w	r3, r3, #3
 800c76e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689a      	ldr	r2, [r3, #8]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c77e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c786:	b2db      	uxtb	r3, r3
 800c788:	2b04      	cmp	r3, #4
 800c78a:	d014      	beq.n	800c7b6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00f      	beq.n	800c7b6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c79c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	699a      	ldr	r2, [r3, #24]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f042 0220 	orr.w	r2, r2, #32
 800c7b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d014      	beq.n	800c7ec <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00f      	beq.n	800c7ec <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7d2:	f043 0204 	orr.w	r2, r3, #4
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	699a      	ldr	r2, [r3, #24]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00f      	beq.n	800c816 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7fc:	f043 0201 	orr.w	r2, r3, #1
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	699a      	ldr	r2, [r3, #24]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c814:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00f      	beq.n	800c840 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c826:	f043 0208 	orr.w	r2, r3, #8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	699a      	ldr	r2, [r3, #24]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c83e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800c850:	bf00      	nop
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	603b      	str	r3, [r7, #0]
 800c868:	4613      	mov	r3, r2
 800c86a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c86c:	e010      	b.n	800c890 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c86e:	f7f7 ff39 	bl	80046e4 <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d803      	bhi.n	800c886 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c884:	d102      	bne.n	800c88c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e00f      	b.n	800c8b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	695a      	ldr	r2, [r3, #20]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	4013      	ands	r3, r2
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	bf0c      	ite	eq
 800c8a0:	2301      	moveq	r3, #1
 800c8a2:	2300      	movne	r3, #0
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	79fb      	ldrb	r3, [r7, #7]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d0df      	beq.n	800c86e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c4:	095b      	lsrs	r3, r3, #5
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	3307      	adds	r3, #7
 800c8d6:	08db      	lsrs	r3, r3, #3
 800c8d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e03e      	b.n	800c984 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d106      	bne.n	800c920 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7f7 fc42 	bl	80041a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3308      	adds	r3, #8
 800c928:	4619      	mov	r1, r3
 800c92a:	4610      	mov	r0, r2
 800c92c:	f002 fb3e 	bl	800efac <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6818      	ldr	r0, [r3, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	461a      	mov	r2, r3
 800c93a:	68b9      	ldr	r1, [r7, #8]
 800c93c:	f002 fc04 	bl	800f148 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6858      	ldr	r0, [r3, #4]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94c:	6879      	ldr	r1, [r7, #4]
 800c94e:	f002 fc48 	bl	800f1e2 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	6892      	ldr	r2, [r2, #8]
 800c95a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	6892      	ldr	r2, [r2, #8]
 800c966:	f041 0101 	orr.w	r1, r1, #1
 800c96a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c96e:	4b07      	ldr	r3, [pc, #28]	@ (800c98c <HAL_SRAM_Init+0x9c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a06      	ldr	r2, [pc, #24]	@ (800c98c <HAL_SRAM_Init+0x9c>)
 800c974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c978:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	47000400 	.word	0x47000400

0800c990 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800c990:	b480      	push	{r7}
 800c992:	b08b      	sub	sp, #44	@ 0x2c
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	603b      	str	r3, [r7, #0]
  uint32_t size;
  uint32_t time_out = 0 ;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	623b      	str	r3, [r7, #32]
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	61fb      	str	r3, [r7, #28]
  uint8_t *pdestbuff = pDstBuffer;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	61bb      	str	r3, [r7, #24]
  HAL_SRAM_StateTypeDef state = hsram->State;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c9b0:	75fb      	strb	r3, [r7, #23]


  while(*psramaddress == 0xFF && time_out++ < 0xFFFF0 ); //cmt check this line
 800c9b2:	bf00      	nop
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2bff      	cmp	r3, #255	@ 0xff
 800c9bc:	d105      	bne.n	800c9ca <HAL_SRAM_Read_8b+0x3a>
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	623a      	str	r2, [r7, #32]
 800c9c4:	4a1e      	ldr	r2, [pc, #120]	@ (800ca40 <HAL_SRAM_Read_8b+0xb0>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d9f4      	bls.n	800c9b4 <HAL_SRAM_Read_8b+0x24>
  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d002      	beq.n	800c9d6 <HAL_SRAM_Read_8b+0x46>
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	d12c      	bne.n	800ca30 <HAL_SRAM_Read_8b+0xa0>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <HAL_SRAM_Read_8b+0x54>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e026      	b.n	800ca32 <HAL_SRAM_Read_8b+0xa2>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9f8:	e00d      	b.n	800ca16 <HAL_SRAM_Read_8b+0x86>
    {
      *pdestbuff = *psramaddress;
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	3301      	adds	r3, #1
 800ca08:	61bb      	str	r3, [r7, #24]
      psramaddress++;
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	61fb      	str	r3, [r7, #28]
    for (size = BufferSize; size != 0U; size--)
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	3b01      	subs	r3, #1
 800ca14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1ee      	bne.n	800c9fa <HAL_SRAM_Read_8b+0x6a>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	7dfa      	ldrb	r2, [r7, #23]
 800ca20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e000      	b.n	800ca32 <HAL_SRAM_Read_8b+0xa2>
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	372c      	adds	r7, #44	@ 0x2c
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	000fffef 	.word	0x000fffef

0800ca44 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b089      	sub	sp, #36	@ 0x24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d12b      	bne.n	800cabe <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <HAL_SRAM_Write_8b+0x30>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e025      	b.n	800cac0 <HAL_SRAM_Write_8b+0x7c>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	61fb      	str	r3, [r7, #28]
 800ca88:	e00c      	b.n	800caa4 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	781a      	ldrb	r2, [r3, #0]
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	3301      	adds	r3, #1
 800ca96:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	61fb      	str	r3, [r7, #28]
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1ef      	bne.n	800ca8a <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	e000      	b.n	800cac0 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3724      	adds	r7, #36	@ 0x24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	e042      	b.n	800cb64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d106      	bne.n	800caf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7f7 f8c5 	bl	8003c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2224      	movs	r2, #36	@ 0x24
 800cafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f022 0201 	bic.w	r2, r2, #1
 800cb0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fec8 	bl	800d8ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fcd7 	bl	800d4d0 <UART_SetConfig>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d101      	bne.n	800cb2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e01b      	b.n	800cb64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	685a      	ldr	r2, [r3, #4]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689a      	ldr	r2, [r3, #8]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f042 0201 	orr.w	r2, r2, #1
 800cb5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 ff47 	bl	800d9f0 <UART_CheckIdleState>
 800cb62:	4603      	mov	r3, r0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08a      	sub	sp, #40	@ 0x28
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	603b      	str	r3, [r7, #0]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb82:	2b20      	cmp	r3, #32
 800cb84:	f040 808b 	bne.w	800cc9e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <HAL_UART_Transmit+0x28>
 800cb8e:	88fb      	ldrh	r3, [r7, #6]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e083      	b.n	800cca0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cba2:	2b80      	cmp	r3, #128	@ 0x80
 800cba4:	d107      	bne.n	800cbb6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cbb4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2221      	movs	r2, #33	@ 0x21
 800cbc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbc6:	f7f7 fd8d 	bl	80046e4 <HAL_GetTick>
 800cbca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	88fa      	ldrh	r2, [r7, #6]
 800cbd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	88fa      	ldrh	r2, [r7, #6]
 800cbd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbe4:	d108      	bne.n	800cbf8 <HAL_UART_Transmit+0x8c>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d104      	bne.n	800cbf8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	61bb      	str	r3, [r7, #24]
 800cbf6:	e003      	b.n	800cc00 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc00:	e030      	b.n	800cc64 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2180      	movs	r1, #128	@ 0x80
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 ff99 	bl	800db44 <UART_WaitOnFlagUntilTimeout>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d005      	beq.n	800cc24 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e03d      	b.n	800cca0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10b      	bne.n	800cc42 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	61bb      	str	r3, [r7, #24]
 800cc40:	e007      	b.n	800cc52 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	781a      	ldrb	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1c8      	bne.n	800cc02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	2200      	movs	r2, #0
 800cc78:	2140      	movs	r1, #64	@ 0x40
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f000 ff62 	bl	800db44 <UART_WaitOnFlagUntilTimeout>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2220      	movs	r2, #32
 800cc8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e006      	b.n	800cca0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2220      	movs	r2, #32
 800cc96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e000      	b.n	800cca0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800cc9e:	2302      	movs	r3, #2
  }
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3720      	adds	r7, #32
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b091      	sub	sp, #68	@ 0x44
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	f040 8088 	bne.w	800cdd2 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <HAL_UART_Transmit_IT+0x26>
 800ccc8:	88fb      	ldrh	r3, [r7, #6]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e080      	b.n	800cdd4 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccdc:	2b80      	cmp	r3, #128	@ 0x80
 800ccde:	d107      	bne.n	800ccf0 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689a      	ldr	r2, [r3, #8]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ccee:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	88fa      	ldrh	r2, [r7, #6]
 800ccfa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	88fa      	ldrh	r2, [r7, #6]
 800cd02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2221      	movs	r2, #33	@ 0x21
 800cd18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd24:	d12a      	bne.n	800cd7c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd2e:	d107      	bne.n	800cd40 <HAL_UART_Transmit_IT+0x98>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	4a29      	ldr	r2, [pc, #164]	@ (800cde0 <HAL_UART_Transmit_IT+0x138>)
 800cd3c:	679a      	str	r2, [r3, #120]	@ 0x78
 800cd3e:	e002      	b.n	800cd46 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4a28      	ldr	r2, [pc, #160]	@ (800cde4 <HAL_UART_Transmit_IT+0x13c>)
 800cd44:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd50:	e853 3f00 	ldrex	r3, [r3]
 800cd54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cd5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3308      	adds	r3, #8
 800cd64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd66:	637a      	str	r2, [r7, #52]	@ 0x34
 800cd68:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e5      	bne.n	800cd46 <HAL_UART_Transmit_IT+0x9e>
 800cd7a:	e028      	b.n	800cdce <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd84:	d107      	bne.n	800cd96 <HAL_UART_Transmit_IT+0xee>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d103      	bne.n	800cd96 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	4a15      	ldr	r2, [pc, #84]	@ (800cde8 <HAL_UART_Transmit_IT+0x140>)
 800cd92:	679a      	str	r2, [r3, #120]	@ 0x78
 800cd94:	e002      	b.n	800cd9c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	4a14      	ldr	r2, [pc, #80]	@ (800cdec <HAL_UART_Transmit_IT+0x144>)
 800cd9a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	e853 3f00 	ldrex	r3, [r3]
 800cda8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdba:	623b      	str	r3, [r7, #32]
 800cdbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	69f9      	ldr	r1, [r7, #28]
 800cdc0:	6a3a      	ldr	r2, [r7, #32]
 800cdc2:	e841 2300 	strex	r3, r2, [r1]
 800cdc6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e6      	bne.n	800cd9c <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e000      	b.n	800cdd4 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800cdd2:	2302      	movs	r3, #2
  }
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3744      	adds	r7, #68	@ 0x44
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	0800e1b7 	.word	0x0800e1b7
 800cde4:	0800e0d7 	.word	0x0800e0d7
 800cde8:	0800e015 	.word	0x0800e015
 800cdec:	0800df5d 	.word	0x0800df5d

0800cdf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b08a      	sub	sp, #40	@ 0x28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d14b      	bne.n	800cea0 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <HAL_UART_Receive_IT+0x24>
 800ce0e:	88fb      	ldrh	r3, [r7, #6]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e044      	b.n	800cea2 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce28:	2b40      	cmp	r3, #64	@ 0x40
 800ce2a:	d107      	bne.n	800ce3c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	689a      	ldr	r2, [r3, #8]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce3a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a1a      	ldr	r2, [pc, #104]	@ (800ceac <HAL_UART_Receive_IT+0xbc>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d024      	beq.n	800ce90 <HAL_UART_Receive_IT+0xa0>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a19      	ldr	r2, [pc, #100]	@ (800ceb0 <HAL_UART_Receive_IT+0xc0>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d01f      	beq.n	800ce90 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d018      	beq.n	800ce90 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	e853 3f00 	ldrex	r3, [r3]
 800ce6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce72:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	623b      	str	r3, [r7, #32]
 800ce7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce80:	69f9      	ldr	r1, [r7, #28]
 800ce82:	6a3a      	ldr	r2, [r7, #32]
 800ce84:	e841 2300 	strex	r3, r2, [r1]
 800ce88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1e6      	bne.n	800ce5e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ce90:	88fb      	ldrh	r3, [r7, #6]
 800ce92:	461a      	mov	r2, r3
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f000 fec2 	bl	800dc20 <UART_Start_Receive_IT>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	e000      	b.n	800cea2 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800cea0:	2302      	movs	r3, #2
  }
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3728      	adds	r7, #40	@ 0x28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	44002400 	.word	0x44002400
 800ceb0:	54002400 	.word	0x54002400

0800ceb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b0ae      	sub	sp, #184	@ 0xb8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ceda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cede:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cee2:	4013      	ands	r3, r2
 800cee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800cee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d11b      	bne.n	800cf28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cef4:	f003 0320 	and.w	r3, r3, #32
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d015      	beq.n	800cf28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cefc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cf00:	f003 0320 	and.w	r3, r3, #32
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d105      	bne.n	800cf14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d009      	beq.n	800cf28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 82ac 	beq.w	800d476 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	4798      	blx	r3
      }
      return;
 800cf26:	e2a6      	b.n	800d476 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cf28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 80fd 	beq.w	800d12c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cf32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cf36:	4b7a      	ldr	r3, [pc, #488]	@ (800d120 <HAL_UART_IRQHandler+0x26c>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d106      	bne.n	800cf4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cf3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf42:	4b78      	ldr	r3, [pc, #480]	@ (800d124 <HAL_UART_IRQHandler+0x270>)
 800cf44:	4013      	ands	r3, r2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80f0 	beq.w	800d12c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d011      	beq.n	800cf7c <HAL_UART_IRQHandler+0xc8>
 800cf58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cf5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00b      	beq.n	800cf7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf72:	f043 0201 	orr.w	r2, r3, #1
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf80:	f003 0302 	and.w	r3, r3, #2
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d011      	beq.n	800cfac <HAL_UART_IRQHandler+0xf8>
 800cf88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00b      	beq.n	800cfac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2202      	movs	r2, #2
 800cf9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfa2:	f043 0204 	orr.w	r2, r3, #4
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfb0:	f003 0304 	and.w	r3, r3, #4
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d011      	beq.n	800cfdc <HAL_UART_IRQHandler+0x128>
 800cfb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2204      	movs	r2, #4
 800cfca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfd2:	f043 0202 	orr.w	r2, r3, #2
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cfdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfe0:	f003 0308 	and.w	r3, r3, #8
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d017      	beq.n	800d018 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cfec:	f003 0320 	and.w	r3, r3, #32
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d105      	bne.n	800d000 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cff4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cff8:	4b49      	ldr	r3, [pc, #292]	@ (800d120 <HAL_UART_IRQHandler+0x26c>)
 800cffa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2208      	movs	r2, #8
 800d006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d00e:	f043 0208 	orr.w	r2, r3, #8
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d01c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d020:	2b00      	cmp	r3, #0
 800d022:	d012      	beq.n	800d04a <HAL_UART_IRQHandler+0x196>
 800d024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00c      	beq.n	800d04a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d040:	f043 0220 	orr.w	r2, r3, #32
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 8212 	beq.w	800d47a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d05a:	f003 0320 	and.w	r3, r3, #32
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d013      	beq.n	800d08a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d066:	f003 0320 	and.w	r3, r3, #32
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d105      	bne.n	800d07a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d007      	beq.n	800d08a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d09e:	2b40      	cmp	r3, #64	@ 0x40
 800d0a0:	d005      	beq.n	800d0ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d0a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d0a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02e      	beq.n	800d10c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fed8 	bl	800de64 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	d120      	bne.n	800d104 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d017      	beq.n	800d0fc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0d2:	4a15      	ldr	r2, [pc, #84]	@ (800d128 <HAL_UART_IRQHandler+0x274>)
 800d0d4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f7 fd3d 	bl	8004b5c <HAL_DMA_Abort_IT>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d019      	beq.n	800d11c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0fa:	e00f      	b.n	800d11c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f9d1 	bl	800d4a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d102:	e00b      	b.n	800d11c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f9cd 	bl	800d4a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d10a:	e007      	b.n	800d11c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f9c9 	bl	800d4a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d11a:	e1ae      	b.n	800d47a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d11c:	bf00      	nop
    return;
 800d11e:	e1ac      	b.n	800d47a <HAL_UART_IRQHandler+0x5c6>
 800d120:	10000001 	.word	0x10000001
 800d124:	04000120 	.word	0x04000120
 800d128:	0800df31 	.word	0x0800df31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d130:	2b01      	cmp	r3, #1
 800d132:	f040 8142 	bne.w	800d3ba <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d13a:	f003 0310 	and.w	r3, r3, #16
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 813b 	beq.w	800d3ba <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d144:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 8134 	beq.w	800d3ba <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2210      	movs	r2, #16
 800d158:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d164:	2b40      	cmp	r3, #64	@ 0x40
 800d166:	f040 80aa 	bne.w	800d2be <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d174:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800d178:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f000 8084 	beq.w	800d28a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d188:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d27c      	bcs.n	800d28a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d196:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1a2:	2b81      	cmp	r3, #129	@ 0x81
 800d1a4:	d060      	beq.n	800d268 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1ae:	e853 3f00 	ldrex	r3, [r3]
 800d1b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d1b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d1d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d1d4:	e841 2300 	strex	r3, r2, [r1]
 800d1d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d1da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1e2      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d1ea:	e853 3f00 	ldrex	r3, [r3]
 800d1ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d1f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1f2:	f023 0301 	bic.w	r3, r3, #1
 800d1f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d204:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d206:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d208:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d20a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d20c:	e841 2300 	strex	r3, r2, [r1]
 800d210:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e3      	bne.n	800d1e0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d22e:	e853 3f00 	ldrex	r3, [r3]
 800d232:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d236:	f023 0310 	bic.w	r3, r3, #16
 800d23a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d24a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d24e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d250:	e841 2300 	strex	r3, r2, [r1]
 800d254:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e4      	bne.n	800d226 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d262:	4618      	mov	r0, r3
 800d264:	f7f7 fbfe 	bl	8004a64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2202      	movs	r2, #2
 800d26c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	b29b      	uxth	r3, r3
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f918 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d288:	e0f9      	b.n	800d47e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d290:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d294:	429a      	cmp	r2, r3
 800d296:	f040 80f2 	bne.w	800d47e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2a2:	2b81      	cmp	r3, #129	@ 0x81
 800d2a4:	f040 80eb 	bne.w	800d47e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f8fe 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
      return;
 800d2bc:	e0df      	b.n	800d47e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 80d1 	beq.w	800d482 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800d2e0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 80cc 	beq.w	800d482 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f2:	e853 3f00 	ldrex	r3, [r3]
 800d2f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d30e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d314:	e841 2300 	strex	r3, r2, [r1]
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1e4      	bne.n	800d2ea <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3308      	adds	r3, #8
 800d326:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	e853 3f00 	ldrex	r3, [r3]
 800d32e:	623b      	str	r3, [r7, #32]
   return(result);
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d336:	f023 0301 	bic.w	r3, r3, #1
 800d33a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3308      	adds	r3, #8
 800d344:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d348:	633a      	str	r2, [r7, #48]	@ 0x30
 800d34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d34e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d350:	e841 2300 	strex	r3, r2, [r1]
 800d354:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e1      	bne.n	800d320 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2220      	movs	r2, #32
 800d360:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	e853 3f00 	ldrex	r3, [r3]
 800d37c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f023 0310 	bic.w	r3, r3, #16
 800d384:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	461a      	mov	r2, r3
 800d38e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d392:	61fb      	str	r3, [r7, #28]
 800d394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d396:	69b9      	ldr	r1, [r7, #24]
 800d398:	69fa      	ldr	r2, [r7, #28]
 800d39a:	e841 2300 	strex	r3, r2, [r1]
 800d39e:	617b      	str	r3, [r7, #20]
   return(result);
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1e4      	bne.n	800d370 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3ac:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f880 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3b8:	e063      	b.n	800d482 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00e      	beq.n	800d3e4 <HAL_UART_IRQHandler+0x530>
 800d3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d008      	beq.n	800d3e4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d3da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f001 fcc3 	bl	800ed68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3e2:	e051      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d014      	beq.n	800d41a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d3f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d3f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d105      	bne.n	800d408 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d008      	beq.n	800d41a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d03a      	beq.n	800d486 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	4798      	blx	r3
    }
    return;
 800d418:	e035      	b.n	800d486 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d41a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d41e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d009      	beq.n	800d43a <HAL_UART_IRQHandler+0x586>
 800d426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 ff34 	bl	800e2a0 <UART_EndTransmit_IT>
    return;
 800d438:	e026      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d43a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d43e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d009      	beq.n	800d45a <HAL_UART_IRQHandler+0x5a6>
 800d446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d44a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f001 fc9c 	bl	800ed90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d458:	e016      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d45a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d45e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d462:	2b00      	cmp	r3, #0
 800d464:	d010      	beq.n	800d488 <HAL_UART_IRQHandler+0x5d4>
 800d466:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	da0c      	bge.n	800d488 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f001 fc84 	bl	800ed7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d474:	e008      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d476:	bf00      	nop
 800d478:	e006      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d47a:	bf00      	nop
 800d47c:	e004      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d47e:	bf00      	nop
 800d480:	e002      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d482:	bf00      	nop
 800d484:	e000      	b.n	800d488 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d486:	bf00      	nop
  }
}
 800d488:	37b8      	adds	r7, #184	@ 0xb8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop

0800d490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4d4:	b094      	sub	sp, #80	@ 0x50
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	4b78      	ldr	r3, [pc, #480]	@ (800d6c8 <UART_SetConfig+0x1f8>)
 800d4e6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	431a      	orrs	r2, r3
 800d4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	431a      	orrs	r2, r3
 800d4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4971      	ldr	r1, [pc, #452]	@ (800d6cc <UART_SetConfig+0x1fc>)
 800d508:	4019      	ands	r1, r3
 800d50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d510:	430b      	orrs	r3, r1
 800d512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d520:	68d9      	ldr	r1, [r3, #12]
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	ea40 0301 	orr.w	r3, r0, r1
 800d52a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b64      	ldr	r3, [pc, #400]	@ (800d6c8 <UART_SetConfig+0x1f8>)
 800d538:	429a      	cmp	r2, r3
 800d53a:	d009      	beq.n	800d550 <UART_SetConfig+0x80>
 800d53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	4b63      	ldr	r3, [pc, #396]	@ (800d6d0 <UART_SetConfig+0x200>)
 800d542:	429a      	cmp	r2, r3
 800d544:	d004      	beq.n	800d550 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	6a1a      	ldr	r2, [r3, #32]
 800d54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d54c:	4313      	orrs	r3, r2
 800d54e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d55a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d564:	430b      	orrs	r3, r1
 800d566:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56e:	f023 000f 	bic.w	r0, r3, #15
 800d572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d574:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	ea40 0301 	orr.w	r3, r0, r1
 800d57e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	4b53      	ldr	r3, [pc, #332]	@ (800d6d4 <UART_SetConfig+0x204>)
 800d586:	429a      	cmp	r2, r3
 800d588:	d102      	bne.n	800d590 <UART_SetConfig+0xc0>
 800d58a:	2301      	movs	r3, #1
 800d58c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d58e:	e066      	b.n	800d65e <UART_SetConfig+0x18e>
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	4b50      	ldr	r3, [pc, #320]	@ (800d6d8 <UART_SetConfig+0x208>)
 800d596:	429a      	cmp	r2, r3
 800d598:	d102      	bne.n	800d5a0 <UART_SetConfig+0xd0>
 800d59a:	2302      	movs	r3, #2
 800d59c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d59e:	e05e      	b.n	800d65e <UART_SetConfig+0x18e>
 800d5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	4b4d      	ldr	r3, [pc, #308]	@ (800d6dc <UART_SetConfig+0x20c>)
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d102      	bne.n	800d5b0 <UART_SetConfig+0xe0>
 800d5aa:	2304      	movs	r3, #4
 800d5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5ae:	e056      	b.n	800d65e <UART_SetConfig+0x18e>
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4b4a      	ldr	r3, [pc, #296]	@ (800d6e0 <UART_SetConfig+0x210>)
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d102      	bne.n	800d5c0 <UART_SetConfig+0xf0>
 800d5ba:	2308      	movs	r3, #8
 800d5bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5be:	e04e      	b.n	800d65e <UART_SetConfig+0x18e>
 800d5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	4b47      	ldr	r3, [pc, #284]	@ (800d6e4 <UART_SetConfig+0x214>)
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d102      	bne.n	800d5d0 <UART_SetConfig+0x100>
 800d5ca:	2310      	movs	r3, #16
 800d5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5ce:	e046      	b.n	800d65e <UART_SetConfig+0x18e>
 800d5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	4b44      	ldr	r3, [pc, #272]	@ (800d6e8 <UART_SetConfig+0x218>)
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d102      	bne.n	800d5e0 <UART_SetConfig+0x110>
 800d5da:	2320      	movs	r3, #32
 800d5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5de:	e03e      	b.n	800d65e <UART_SetConfig+0x18e>
 800d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	4b41      	ldr	r3, [pc, #260]	@ (800d6ec <UART_SetConfig+0x21c>)
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d102      	bne.n	800d5f0 <UART_SetConfig+0x120>
 800d5ea:	2340      	movs	r3, #64	@ 0x40
 800d5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5ee:	e036      	b.n	800d65e <UART_SetConfig+0x18e>
 800d5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	4b3e      	ldr	r3, [pc, #248]	@ (800d6f0 <UART_SetConfig+0x220>)
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d102      	bne.n	800d600 <UART_SetConfig+0x130>
 800d5fa:	2380      	movs	r3, #128	@ 0x80
 800d5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5fe:	e02e      	b.n	800d65e <UART_SetConfig+0x18e>
 800d600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	4b3b      	ldr	r3, [pc, #236]	@ (800d6f4 <UART_SetConfig+0x224>)
 800d606:	429a      	cmp	r2, r3
 800d608:	d103      	bne.n	800d612 <UART_SetConfig+0x142>
 800d60a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d60e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d610:	e025      	b.n	800d65e <UART_SetConfig+0x18e>
 800d612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	4b38      	ldr	r3, [pc, #224]	@ (800d6f8 <UART_SetConfig+0x228>)
 800d618:	429a      	cmp	r2, r3
 800d61a:	d103      	bne.n	800d624 <UART_SetConfig+0x154>
 800d61c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d620:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d622:	e01c      	b.n	800d65e <UART_SetConfig+0x18e>
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	4b34      	ldr	r3, [pc, #208]	@ (800d6fc <UART_SetConfig+0x22c>)
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d103      	bne.n	800d636 <UART_SetConfig+0x166>
 800d62e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d632:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d634:	e013      	b.n	800d65e <UART_SetConfig+0x18e>
 800d636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	4b31      	ldr	r3, [pc, #196]	@ (800d700 <UART_SetConfig+0x230>)
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d103      	bne.n	800d648 <UART_SetConfig+0x178>
 800d640:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d644:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d646:	e00a      	b.n	800d65e <UART_SetConfig+0x18e>
 800d648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c8 <UART_SetConfig+0x1f8>)
 800d64e:	429a      	cmp	r2, r3
 800d650:	d103      	bne.n	800d65a <UART_SetConfig+0x18a>
 800d652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d656:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d658:	e001      	b.n	800d65e <UART_SetConfig+0x18e>
 800d65a:	2300      	movs	r3, #0
 800d65c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b19      	ldr	r3, [pc, #100]	@ (800d6c8 <UART_SetConfig+0x1f8>)
 800d664:	429a      	cmp	r2, r3
 800d666:	d005      	beq.n	800d674 <UART_SetConfig+0x1a4>
 800d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	4b18      	ldr	r3, [pc, #96]	@ (800d6d0 <UART_SetConfig+0x200>)
 800d66e:	429a      	cmp	r2, r3
 800d670:	f040 8094 	bne.w	800d79c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d676:	2200      	movs	r2, #0
 800d678:	623b      	str	r3, [r7, #32]
 800d67a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d67c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d680:	f7fb fe92 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d684:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 80f7 	beq.w	800d87c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d692:	4a1c      	ldr	r2, [pc, #112]	@ (800d704 <UART_SetConfig+0x234>)
 800d694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d698:	461a      	mov	r2, r3
 800d69a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d69c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6a0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d305      	bcc.n	800d6be <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d924      	bls.n	800d708 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d6c4:	e069      	b.n	800d79a <UART_SetConfig+0x2ca>
 800d6c6:	bf00      	nop
 800d6c8:	44002400 	.word	0x44002400
 800d6cc:	cfff69f3 	.word	0xcfff69f3
 800d6d0:	54002400 	.word	0x54002400
 800d6d4:	40013800 	.word	0x40013800
 800d6d8:	40004400 	.word	0x40004400
 800d6dc:	40004800 	.word	0x40004800
 800d6e0:	40004c00 	.word	0x40004c00
 800d6e4:	40005000 	.word	0x40005000
 800d6e8:	40006400 	.word	0x40006400
 800d6ec:	40007800 	.word	0x40007800
 800d6f0:	40007c00 	.word	0x40007c00
 800d6f4:	40008000 	.word	0x40008000
 800d6f8:	40006800 	.word	0x40006800
 800d6fc:	40006c00 	.word	0x40006c00
 800d700:	40008400 	.word	0x40008400
 800d704:	08012330 	.word	0x08012330
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d70a:	2200      	movs	r2, #0
 800d70c:	61bb      	str	r3, [r7, #24]
 800d70e:	61fa      	str	r2, [r7, #28]
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d714:	4a64      	ldr	r2, [pc, #400]	@ (800d8a8 <UART_SetConfig+0x3d8>)
 800d716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	2200      	movs	r2, #0
 800d71e:	613b      	str	r3, [r7, #16]
 800d720:	617a      	str	r2, [r7, #20]
 800d722:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d72a:	f7f3 fa9d 	bl	8000c68 <__aeabi_uldivmod>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	4610      	mov	r0, r2
 800d734:	4619      	mov	r1, r3
 800d736:	f04f 0200 	mov.w	r2, #0
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	020b      	lsls	r3, r1, #8
 800d740:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d744:	0202      	lsls	r2, r0, #8
 800d746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d748:	6849      	ldr	r1, [r1, #4]
 800d74a:	0849      	lsrs	r1, r1, #1
 800d74c:	2000      	movs	r0, #0
 800d74e:	460c      	mov	r4, r1
 800d750:	4605      	mov	r5, r0
 800d752:	eb12 0804 	adds.w	r8, r2, r4
 800d756:	eb43 0905 	adc.w	r9, r3, r5
 800d75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	60bb      	str	r3, [r7, #8]
 800d762:	60fa      	str	r2, [r7, #12]
 800d764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d768:	4640      	mov	r0, r8
 800d76a:	4649      	mov	r1, r9
 800d76c:	f7f3 fa7c 	bl	8000c68 <__aeabi_uldivmod>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4613      	mov	r3, r2
 800d776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d77a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d77e:	d308      	bcc.n	800d792 <UART_SetConfig+0x2c2>
 800d780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d786:	d204      	bcs.n	800d792 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d78e:	60da      	str	r2, [r3, #12]
 800d790:	e003      	b.n	800d79a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d798:	e070      	b.n	800d87c <UART_SetConfig+0x3ac>
 800d79a:	e06f      	b.n	800d87c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79e:	69db      	ldr	r3, [r3, #28]
 800d7a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7a4:	d13c      	bne.n	800d820 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d7a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	603b      	str	r3, [r7, #0]
 800d7ac:	607a      	str	r2, [r7, #4]
 800d7ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7b2:	f7fb fdf9 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d7b6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d05e      	beq.n	800d87c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c2:	4a39      	ldr	r2, [pc, #228]	@ (800d8a8 <UART_SetConfig+0x3d8>)
 800d7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d0:	005a      	lsls	r2, r3, #1
 800d7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	085b      	lsrs	r3, r3, #1
 800d7d8:	441a      	add	r2, r3
 800d7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7e6:	2b0f      	cmp	r3, #15
 800d7e8:	d916      	bls.n	800d818 <UART_SetConfig+0x348>
 800d7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7f0:	d212      	bcs.n	800d818 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	f023 030f 	bic.w	r3, r3, #15
 800d7fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7fe:	085b      	lsrs	r3, r3, #1
 800d800:	b29b      	uxth	r3, r3
 800d802:	f003 0307 	and.w	r3, r3, #7
 800d806:	b29a      	uxth	r2, r3
 800d808:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d80a:	4313      	orrs	r3, r2
 800d80c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d814:	60da      	str	r2, [r3, #12]
 800d816:	e031      	b.n	800d87c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d81e:	e02d      	b.n	800d87c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d822:	2200      	movs	r2, #0
 800d824:	469a      	mov	sl, r3
 800d826:	4693      	mov	fp, r2
 800d828:	4650      	mov	r0, sl
 800d82a:	4659      	mov	r1, fp
 800d82c:	f7fb fdbc 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d830:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d834:	2b00      	cmp	r3, #0
 800d836:	d021      	beq.n	800d87c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83c:	4a1a      	ldr	r2, [pc, #104]	@ (800d8a8 <UART_SetConfig+0x3d8>)
 800d83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d842:	461a      	mov	r2, r3
 800d844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d846:	fbb3 f2f2 	udiv	r2, r3, r2
 800d84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	085b      	lsrs	r3, r3, #1
 800d850:	441a      	add	r2, r3
 800d852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	fbb2 f3f3 	udiv	r3, r2, r3
 800d85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d85e:	2b0f      	cmp	r3, #15
 800d860:	d909      	bls.n	800d876 <UART_SetConfig+0x3a6>
 800d862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d868:	d205      	bcs.n	800d876 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	60da      	str	r2, [r3, #12]
 800d874:	e002      	b.n	800d87c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87e:	2201      	movs	r2, #1
 800d880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d886:	2201      	movs	r2, #1
 800d888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	2200      	movs	r2, #0
 800d890:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d894:	2200      	movs	r2, #0
 800d896:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d898:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3750      	adds	r7, #80	@ 0x50
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8a6:	bf00      	nop
 800d8a8:	08012330 	.word	0x08012330

0800d8ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b8:	f003 0308 	and.w	r3, r3, #8
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	430a      	orrs	r2, r1
 800d8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	430a      	orrs	r2, r1
 800d8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fc:	f003 0302 	and.w	r3, r3, #2
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00a      	beq.n	800d91a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	430a      	orrs	r2, r1
 800d918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d91e:	f003 0304 	and.w	r3, r3, #4
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00a      	beq.n	800d93c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	430a      	orrs	r2, r1
 800d93a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d940:	f003 0310 	and.w	r3, r3, #16
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00a      	beq.n	800d95e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	430a      	orrs	r2, r1
 800d95c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d962:	f003 0320 	and.w	r3, r3, #32
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00a      	beq.n	800d980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	430a      	orrs	r2, r1
 800d97e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01a      	beq.n	800d9c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9aa:	d10a      	bne.n	800d9c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	605a      	str	r2, [r3, #4]
  }
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b098      	sub	sp, #96	@ 0x60
 800d9f4:	af02      	add	r7, sp, #8
 800d9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da00:	f7f6 fe70 	bl	80046e4 <HAL_GetTick>
 800da04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f003 0308 	and.w	r3, r3, #8
 800da10:	2b08      	cmp	r3, #8
 800da12:	d12f      	bne.n	800da74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da1c:	2200      	movs	r2, #0
 800da1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f88e 	bl	800db44 <UART_WaitOnFlagUntilTimeout>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d022      	beq.n	800da74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da36:	e853 3f00 	ldrex	r3, [r3]
 800da3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da42:	653b      	str	r3, [r7, #80]	@ 0x50
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	461a      	mov	r2, r3
 800da4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da54:	e841 2300 	strex	r3, r2, [r1]
 800da58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1e6      	bne.n	800da2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2220      	movs	r2, #32
 800da64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da70:	2303      	movs	r3, #3
 800da72:	e063      	b.n	800db3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f003 0304 	and.w	r3, r3, #4
 800da7e:	2b04      	cmp	r3, #4
 800da80:	d149      	bne.n	800db16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da8a:	2200      	movs	r2, #0
 800da8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f857 	bl	800db44 <UART_WaitOnFlagUntilTimeout>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d03c      	beq.n	800db16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa4:	e853 3f00 	ldrex	r3, [r3]
 800daa8:	623b      	str	r3, [r7, #32]
   return(result);
 800daaa:	6a3b      	ldr	r3, [r7, #32]
 800daac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daba:	633b      	str	r3, [r7, #48]	@ 0x30
 800dabc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dabe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dac2:	e841 2300 	strex	r3, r2, [r1]
 800dac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1e6      	bne.n	800da9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3308      	adds	r3, #8
 800dad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	e853 3f00 	ldrex	r3, [r3]
 800dadc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f023 0301 	bic.w	r3, r3, #1
 800dae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3308      	adds	r3, #8
 800daec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800daee:	61fa      	str	r2, [r7, #28]
 800daf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf2:	69b9      	ldr	r1, [r7, #24]
 800daf4:	69fa      	ldr	r2, [r7, #28]
 800daf6:	e841 2300 	strex	r3, r2, [r1]
 800dafa:	617b      	str	r3, [r7, #20]
   return(result);
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1e5      	bne.n	800dace <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2220      	movs	r2, #32
 800db06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db12:	2303      	movs	r3, #3
 800db14:	e012      	b.n	800db3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2220      	movs	r2, #32
 800db1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2220      	movs	r2, #32
 800db22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3758      	adds	r7, #88	@ 0x58
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	603b      	str	r3, [r7, #0]
 800db50:	4613      	mov	r3, r2
 800db52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db54:	e04f      	b.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5c:	d04b      	beq.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db5e:	f7f6 fdc1 	bl	80046e4 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d302      	bcc.n	800db74 <UART_WaitOnFlagUntilTimeout+0x30>
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d101      	bne.n	800db78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e04e      	b.n	800dc16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f003 0304 	and.w	r3, r3, #4
 800db82:	2b00      	cmp	r3, #0
 800db84:	d037      	beq.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b80      	cmp	r3, #128	@ 0x80
 800db8a:	d034      	beq.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	2b40      	cmp	r3, #64	@ 0x40
 800db90:	d031      	beq.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	69db      	ldr	r3, [r3, #28]
 800db98:	f003 0308 	and.w	r3, r3, #8
 800db9c:	2b08      	cmp	r3, #8
 800db9e:	d110      	bne.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2208      	movs	r2, #8
 800dba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f000 f95b 	bl	800de64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2208      	movs	r2, #8
 800dbb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e029      	b.n	800dc16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbd0:	d111      	bne.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 f941 	bl	800de64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2220      	movs	r2, #32
 800dbe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	e00f      	b.n	800dc16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	69da      	ldr	r2, [r3, #28]
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	bf0c      	ite	eq
 800dc06:	2301      	moveq	r3, #1
 800dc08:	2300      	movne	r3, #0
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	79fb      	ldrb	r3, [r7, #7]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d0a0      	beq.n	800db56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b0a3      	sub	sp, #140	@ 0x8c
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	88fa      	ldrh	r2, [r7, #6]
 800dc38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	88fa      	ldrh	r2, [r7, #6]
 800dc40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc52:	d10e      	bne.n	800dc72 <UART_Start_Receive_IT+0x52>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d105      	bne.n	800dc68 <UART_Start_Receive_IT+0x48>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dc62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dc66:	e02d      	b.n	800dcc4 <UART_Start_Receive_IT+0xa4>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	22ff      	movs	r2, #255	@ 0xff
 800dc6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dc70:	e028      	b.n	800dcc4 <UART_Start_Receive_IT+0xa4>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10d      	bne.n	800dc96 <UART_Start_Receive_IT+0x76>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d104      	bne.n	800dc8c <UART_Start_Receive_IT+0x6c>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	22ff      	movs	r2, #255	@ 0xff
 800dc86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dc8a:	e01b      	b.n	800dcc4 <UART_Start_Receive_IT+0xa4>
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	227f      	movs	r2, #127	@ 0x7f
 800dc90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dc94:	e016      	b.n	800dcc4 <UART_Start_Receive_IT+0xa4>
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc9e:	d10d      	bne.n	800dcbc <UART_Start_Receive_IT+0x9c>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d104      	bne.n	800dcb2 <UART_Start_Receive_IT+0x92>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	227f      	movs	r2, #127	@ 0x7f
 800dcac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dcb0:	e008      	b.n	800dcc4 <UART_Start_Receive_IT+0xa4>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	223f      	movs	r2, #63	@ 0x3f
 800dcb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dcba:	e003      	b.n	800dcc4 <UART_Start_Receive_IT+0xa4>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2222      	movs	r2, #34	@ 0x22
 800dcd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3308      	adds	r3, #8
 800dcda:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcde:	e853 3f00 	ldrex	r3, [r3]
 800dce2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dce4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dce6:	f043 0301 	orr.w	r3, r3, #1
 800dcea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3308      	adds	r3, #8
 800dcf4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dcf8:	673a      	str	r2, [r7, #112]	@ 0x70
 800dcfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcfc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800dcfe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800dd00:	e841 2300 	strex	r3, r2, [r1]
 800dd04:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800dd06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1e3      	bne.n	800dcd4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd14:	d14f      	bne.n	800ddb6 <UART_Start_Receive_IT+0x196>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dd1c:	88fa      	ldrh	r2, [r7, #6]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d349      	bcc.n	800ddb6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd2a:	d107      	bne.n	800dd3c <UART_Start_Receive_IT+0x11c>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d103      	bne.n	800dd3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4a47      	ldr	r2, [pc, #284]	@ (800de54 <UART_Start_Receive_IT+0x234>)
 800dd38:	675a      	str	r2, [r3, #116]	@ 0x74
 800dd3a:	e002      	b.n	800dd42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	4a46      	ldr	r2, [pc, #280]	@ (800de58 <UART_Start_Receive_IT+0x238>)
 800dd40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d01a      	beq.n	800dd80 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd52:	e853 3f00 	ldrex	r3, [r3]
 800dd56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dd58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dd6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd6e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dd74:	e841 2300 	strex	r3, r2, [r1]
 800dd78:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800dd7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e4      	bne.n	800dd4a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3308      	adds	r3, #8
 800dd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd8a:	e853 3f00 	ldrex	r3, [r3]
 800dd8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3308      	adds	r3, #8
 800dd9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dda0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dda2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dda6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dda8:	e841 2300 	strex	r3, r2, [r1]
 800ddac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ddae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e5      	bne.n	800dd80 <UART_Start_Receive_IT+0x160>
 800ddb4:	e046      	b.n	800de44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddbe:	d107      	bne.n	800ddd0 <UART_Start_Receive_IT+0x1b0>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d103      	bne.n	800ddd0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4a24      	ldr	r2, [pc, #144]	@ (800de5c <UART_Start_Receive_IT+0x23c>)
 800ddcc:	675a      	str	r2, [r3, #116]	@ 0x74
 800ddce:	e002      	b.n	800ddd6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	4a23      	ldr	r2, [pc, #140]	@ (800de60 <UART_Start_Receive_IT+0x240>)
 800ddd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d019      	beq.n	800de12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde6:	e853 3f00 	ldrex	r3, [r3]
 800ddea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ddf2:	677b      	str	r3, [r7, #116]	@ 0x74
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ddfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddfe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de04:	e841 2300 	strex	r3, r2, [r1]
 800de08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800de0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1e6      	bne.n	800ddde <UART_Start_Receive_IT+0x1be>
 800de10:	e018      	b.n	800de44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	e853 3f00 	ldrex	r3, [r3]
 800de1e:	613b      	str	r3, [r7, #16]
   return(result);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	f043 0320 	orr.w	r3, r3, #32
 800de26:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	461a      	mov	r2, r3
 800de2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de30:	623b      	str	r3, [r7, #32]
 800de32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de34:	69f9      	ldr	r1, [r7, #28]
 800de36:	6a3a      	ldr	r2, [r7, #32]
 800de38:	e841 2300 	strex	r3, r2, [r1]
 800de3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1e6      	bne.n	800de12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	378c      	adds	r7, #140	@ 0x8c
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	0800e9f1 	.word	0x0800e9f1
 800de58:	0800e681 	.word	0x0800e681
 800de5c:	0800e4bd 	.word	0x0800e4bd
 800de60:	0800e2f9 	.word	0x0800e2f9

0800de64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de64:	b480      	push	{r7}
 800de66:	b095      	sub	sp, #84	@ 0x54
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de74:	e853 3f00 	ldrex	r3, [r3]
 800de78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	461a      	mov	r2, r3
 800de88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800de8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de92:	e841 2300 	strex	r3, r2, [r1]
 800de96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1e6      	bne.n	800de6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3308      	adds	r3, #8
 800dea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	e853 3f00 	ldrex	r3, [r3]
 800deac:	61fb      	str	r3, [r7, #28]
   return(result);
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800deb4:	f023 0301 	bic.w	r3, r3, #1
 800deb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	3308      	adds	r3, #8
 800dec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800deca:	e841 2300 	strex	r3, r2, [r1]
 800dece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ded0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1e3      	bne.n	800de9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d118      	bne.n	800df10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	e853 3f00 	ldrex	r3, [r3]
 800deea:	60bb      	str	r3, [r7, #8]
   return(result);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	f023 0310 	bic.w	r3, r3, #16
 800def2:	647b      	str	r3, [r7, #68]	@ 0x44
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	461a      	mov	r2, r3
 800defa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800defc:	61bb      	str	r3, [r7, #24]
 800defe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df00:	6979      	ldr	r1, [r7, #20]
 800df02:	69ba      	ldr	r2, [r7, #24]
 800df04:	e841 2300 	strex	r3, r2, [r1]
 800df08:	613b      	str	r3, [r7, #16]
   return(result);
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1e6      	bne.n	800dede <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2220      	movs	r2, #32
 800df14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800df24:	bf00      	nop
 800df26:	3754      	adds	r7, #84	@ 0x54
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2200      	movs	r2, #0
 800df4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff faa8 	bl	800d4a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df54:	bf00      	nop
 800df56:	3710      	adds	r7, #16
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b08f      	sub	sp, #60	@ 0x3c
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df6a:	2b21      	cmp	r3, #33	@ 0x21
 800df6c:	d14c      	bne.n	800e008 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800df74:	b29b      	uxth	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d132      	bne.n	800dfe0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	e853 3f00 	ldrex	r3, [r3]
 800df86:	61fb      	str	r3, [r7, #28]
   return(result);
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfa0:	e841 2300 	strex	r3, r2, [r1]
 800dfa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1e6      	bne.n	800df7a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	e853 3f00 	ldrex	r3, [r3]
 800dfb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfca:	61bb      	str	r3, [r7, #24]
 800dfcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfce:	6979      	ldr	r1, [r7, #20]
 800dfd0:	69ba      	ldr	r2, [r7, #24]
 800dfd2:	e841 2300 	strex	r3, r2, [r1]
 800dfd6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1e6      	bne.n	800dfac <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dfde:	e013      	b.n	800e008 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfe4:	781a      	ldrb	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	3b01      	subs	r3, #1
 800e000:	b29a      	uxth	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e008:	bf00      	nop
 800e00a:	373c      	adds	r7, #60	@ 0x3c
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e014:	b480      	push	{r7}
 800e016:	b091      	sub	sp, #68	@ 0x44
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e022:	2b21      	cmp	r3, #33	@ 0x21
 800e024:	d151      	bne.n	800e0ca <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d132      	bne.n	800e098 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03a:	e853 3f00 	ldrex	r3, [r3]
 800e03e:	623b      	str	r3, [r7, #32]
   return(result);
 800e040:	6a3b      	ldr	r3, [r7, #32]
 800e042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e046:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	461a      	mov	r2, r3
 800e04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e050:	633b      	str	r3, [r7, #48]	@ 0x30
 800e052:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e058:	e841 2300 	strex	r3, r2, [r1]
 800e05c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1e6      	bne.n	800e032 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	e853 3f00 	ldrex	r3, [r3]
 800e070:	60fb      	str	r3, [r7, #12]
   return(result);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e078:	637b      	str	r3, [r7, #52]	@ 0x34
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e082:	61fb      	str	r3, [r7, #28]
 800e084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e086:	69b9      	ldr	r1, [r7, #24]
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	e841 2300 	strex	r3, r2, [r1]
 800e08e:	617b      	str	r3, [r7, #20]
   return(result);
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1e6      	bne.n	800e064 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e096:	e018      	b.n	800e0ca <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0b2:	1c9a      	adds	r2, r3, #2
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e0ca:	bf00      	nop
 800e0cc:	3744      	adds	r7, #68	@ 0x44
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e0d6:	b480      	push	{r7}
 800e0d8:	b091      	sub	sp, #68	@ 0x44
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0e4:	2b21      	cmp	r3, #33	@ 0x21
 800e0e6:	d160      	bne.n	800e1aa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e0f0:	e057      	b.n	800e1a2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d133      	bne.n	800e166 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3308      	adds	r3, #8
 800e104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e108:	e853 3f00 	ldrex	r3, [r3]
 800e10c:	623b      	str	r3, [r7, #32]
   return(result);
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e114:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3308      	adds	r3, #8
 800e11c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e11e:	633a      	str	r2, [r7, #48]	@ 0x30
 800e120:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e126:	e841 2300 	strex	r3, r2, [r1]
 800e12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1e5      	bne.n	800e0fe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	e853 3f00 	ldrex	r3, [r3]
 800e13e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e146:	637b      	str	r3, [r7, #52]	@ 0x34
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	461a      	mov	r2, r3
 800e14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e150:	61fb      	str	r3, [r7, #28]
 800e152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e154:	69b9      	ldr	r1, [r7, #24]
 800e156:	69fa      	ldr	r2, [r7, #28]
 800e158:	e841 2300 	strex	r3, r2, [r1]
 800e15c:	617b      	str	r3, [r7, #20]
   return(result);
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1e6      	bne.n	800e132 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e164:	e021      	b.n	800e1aa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69db      	ldr	r3, [r3, #28]
 800e16c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e170:	2b00      	cmp	r3, #0
 800e172:	d013      	beq.n	800e19c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e178:	781a      	ldrb	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e190:	b29b      	uxth	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e19c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e1a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1a4      	bne.n	800e0f2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e1a8:	e7ff      	b.n	800e1aa <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e1aa:	bf00      	nop
 800e1ac:	3744      	adds	r7, #68	@ 0x44
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	b091      	sub	sp, #68	@ 0x44
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1c4:	2b21      	cmp	r3, #33	@ 0x21
 800e1c6:	d165      	bne.n	800e294 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e1d0:	e05c      	b.n	800e28c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d133      	bne.n	800e246 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	e853 3f00 	ldrex	r3, [r3]
 800e1ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e206:	e841 2300 	strex	r3, r2, [r1]
 800e20a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1e5      	bne.n	800e1de <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	e853 3f00 	ldrex	r3, [r3]
 800e21e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e226:	633b      	str	r3, [r7, #48]	@ 0x30
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	461a      	mov	r2, r3
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	61bb      	str	r3, [r7, #24]
 800e232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e234:	6979      	ldr	r1, [r7, #20]
 800e236:	69ba      	ldr	r2, [r7, #24]
 800e238:	e841 2300 	strex	r3, r2, [r1]
 800e23c:	613b      	str	r3, [r7, #16]
   return(result);
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e6      	bne.n	800e212 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e244:	e026      	b.n	800e294 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	69db      	ldr	r3, [r3, #28]
 800e24c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e250:	2b00      	cmp	r3, #0
 800e252:	d018      	beq.n	800e286 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e258:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25c:	881b      	ldrh	r3, [r3, #0]
 800e25e:	461a      	mov	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e268:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e26e:	1c9a      	adds	r2, r3, #2
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	3b01      	subs	r3, #1
 800e27e:	b29a      	uxth	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e286:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e288:	3b01      	subs	r3, #1
 800e28a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e28c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d19f      	bne.n	800e1d2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e292:	e7ff      	b.n	800e294 <UART_TxISR_16BIT_FIFOEN+0xde>
 800e294:	bf00      	nop
 800e296:	3744      	adds	r7, #68	@ 0x44
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b088      	sub	sp, #32
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	e853 3f00 	ldrex	r3, [r3]
 800e2b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2bc:	61fb      	str	r3, [r7, #28]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	61bb      	str	r3, [r7, #24]
 800e2c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ca:	6979      	ldr	r1, [r7, #20]
 800e2cc:	69ba      	ldr	r2, [r7, #24]
 800e2ce:	e841 2300 	strex	r3, r2, [r1]
 800e2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1e6      	bne.n	800e2a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2220      	movs	r2, #32
 800e2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff f8d1 	bl	800d490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2ee:	bf00      	nop
 800e2f0:	3720      	adds	r7, #32
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
	...

0800e2f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b09c      	sub	sp, #112	@ 0x70
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e306:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e310:	2b22      	cmp	r3, #34	@ 0x22
 800e312:	f040 80c3 	bne.w	800e49c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e31c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e320:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e324:	b2d9      	uxtb	r1, r3
 800e326:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e330:	400a      	ands	r2, r1
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e33a:	1c5a      	adds	r2, r3, #1
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e346:	b29b      	uxth	r3, r3
 800e348:	3b01      	subs	r3, #1
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e358:	b29b      	uxth	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f040 80a6 	bne.w	800e4ac <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e368:	e853 3f00 	ldrex	r3, [r3]
 800e36c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e36e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e374:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	461a      	mov	r2, r3
 800e37c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e37e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e380:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e386:	e841 2300 	strex	r3, r2, [r1]
 800e38a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e38c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1e6      	bne.n	800e360 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3308      	adds	r3, #8
 800e398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e39c:	e853 3f00 	ldrex	r3, [r3]
 800e3a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a4:	f023 0301 	bic.w	r3, r3, #1
 800e3a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3308      	adds	r3, #8
 800e3b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e3b2:	647a      	str	r2, [r7, #68]	@ 0x44
 800e3b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3ba:	e841 2300 	strex	r3, r2, [r1]
 800e3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e5      	bne.n	800e392 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2220      	movs	r2, #32
 800e3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4a35      	ldr	r2, [pc, #212]	@ (800e4b4 <UART_RxISR_8BIT+0x1bc>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d024      	beq.n	800e42e <UART_RxISR_8BIT+0x136>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a33      	ldr	r2, [pc, #204]	@ (800e4b8 <UART_RxISR_8BIT+0x1c0>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d01f      	beq.n	800e42e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d018      	beq.n	800e42e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e404:	e853 3f00 	ldrex	r3, [r3]
 800e408:	623b      	str	r3, [r7, #32]
   return(result);
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e410:	663b      	str	r3, [r7, #96]	@ 0x60
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	461a      	mov	r2, r3
 800e418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e41a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e41c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e422:	e841 2300 	strex	r3, r2, [r1]
 800e426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1e6      	bne.n	800e3fc <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e432:	2b01      	cmp	r3, #1
 800e434:	d12e      	bne.n	800e494 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	e853 3f00 	ldrex	r3, [r3]
 800e448:	60fb      	str	r3, [r7, #12]
   return(result);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f023 0310 	bic.w	r3, r3, #16
 800e450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e45a:	61fb      	str	r3, [r7, #28]
 800e45c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45e:	69b9      	ldr	r1, [r7, #24]
 800e460:	69fa      	ldr	r2, [r7, #28]
 800e462:	e841 2300 	strex	r3, r2, [r1]
 800e466:	617b      	str	r3, [r7, #20]
   return(result);
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1e6      	bne.n	800e43c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	f003 0310 	and.w	r3, r3, #16
 800e478:	2b10      	cmp	r3, #16
 800e47a:	d103      	bne.n	800e484 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2210      	movs	r2, #16
 800e482:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7ff f813 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e492:	e00b      	b.n	800e4ac <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7f5 f833 	bl	8003500 <HAL_UART_RxCpltCallback>
}
 800e49a:	e007      	b.n	800e4ac <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	699a      	ldr	r2, [r3, #24]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f042 0208 	orr.w	r2, r2, #8
 800e4aa:	619a      	str	r2, [r3, #24]
}
 800e4ac:	bf00      	nop
 800e4ae:	3770      	adds	r7, #112	@ 0x70
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	44002400 	.word	0x44002400
 800e4b8:	54002400 	.word	0x54002400

0800e4bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b09c      	sub	sp, #112	@ 0x70
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4d4:	2b22      	cmp	r3, #34	@ 0x22
 800e4d6:	f040 80c3 	bne.w	800e660 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e4ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e4ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e4f2:	4013      	ands	r3, r2
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4fe:	1c9a      	adds	r2, r3, #2
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	3b01      	subs	r3, #1
 800e50e:	b29a      	uxth	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f040 80a6 	bne.w	800e670 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e538:	667b      	str	r3, [r7, #100]	@ 0x64
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e542:	657b      	str	r3, [r7, #84]	@ 0x54
 800e544:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e548:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e6      	bne.n	800e524 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3308      	adds	r3, #8
 800e55c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e560:	e853 3f00 	ldrex	r3, [r3]
 800e564:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e568:	f023 0301 	bic.w	r3, r3, #1
 800e56c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3308      	adds	r3, #8
 800e574:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e576:	643a      	str	r2, [r7, #64]	@ 0x40
 800e578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e57c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e57e:	e841 2300 	strex	r3, r2, [r1]
 800e582:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1e5      	bne.n	800e556 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a35      	ldr	r2, [pc, #212]	@ (800e678 <UART_RxISR_16BIT+0x1bc>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d024      	beq.n	800e5f2 <UART_RxISR_16BIT+0x136>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a33      	ldr	r2, [pc, #204]	@ (800e67c <UART_RxISR_16BIT+0x1c0>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d01f      	beq.n	800e5f2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d018      	beq.n	800e5f2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c6:	6a3b      	ldr	r3, [r7, #32]
 800e5c8:	e853 3f00 	ldrex	r3, [r3]
 800e5cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1e6      	bne.n	800e5c0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d12e      	bne.n	800e658 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	e853 3f00 	ldrex	r3, [r3]
 800e60c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	f023 0310 	bic.w	r3, r3, #16
 800e614:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	461a      	mov	r2, r3
 800e61c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e61e:	61bb      	str	r3, [r7, #24]
 800e620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e622:	6979      	ldr	r1, [r7, #20]
 800e624:	69ba      	ldr	r2, [r7, #24]
 800e626:	e841 2300 	strex	r3, r2, [r1]
 800e62a:	613b      	str	r3, [r7, #16]
   return(result);
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1e6      	bne.n	800e600 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	69db      	ldr	r3, [r3, #28]
 800e638:	f003 0310 	and.w	r3, r3, #16
 800e63c:	2b10      	cmp	r3, #16
 800e63e:	d103      	bne.n	800e648 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2210      	movs	r2, #16
 800e646:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e64e:	4619      	mov	r1, r3
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7fe ff31 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e656:	e00b      	b.n	800e670 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7f4 ff51 	bl	8003500 <HAL_UART_RxCpltCallback>
}
 800e65e:	e007      	b.n	800e670 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	699a      	ldr	r2, [r3, #24]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f042 0208 	orr.w	r2, r2, #8
 800e66e:	619a      	str	r2, [r3, #24]
}
 800e670:	bf00      	nop
 800e672:	3770      	adds	r7, #112	@ 0x70
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	44002400 	.word	0x44002400
 800e67c:	54002400 	.word	0x54002400

0800e680 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b0ac      	sub	sp, #176	@ 0xb0
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e68e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6b6:	2b22      	cmp	r3, #34	@ 0x22
 800e6b8:	f040 8188 	bne.w	800e9cc <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e6c2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6c6:	e12b      	b.n	800e920 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e6d6:	b2d9      	uxtb	r1, r3
 800e6d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6e2:	400a      	ands	r2, r1
 800e6e4:	b2d2      	uxtb	r2, r2
 800e6e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	69db      	ldr	r3, [r3, #28]
 800e70a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e70e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e712:	f003 0307 	and.w	r3, r3, #7
 800e716:	2b00      	cmp	r3, #0
 800e718:	d053      	beq.n	800e7c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e71e:	f003 0301 	and.w	r3, r3, #1
 800e722:	2b00      	cmp	r3, #0
 800e724:	d011      	beq.n	800e74a <UART_RxISR_8BIT_FIFOEN+0xca>
 800e726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e72a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00b      	beq.n	800e74a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2201      	movs	r2, #1
 800e738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e740:	f043 0201 	orr.w	r2, r3, #1
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e74e:	f003 0302 	and.w	r3, r3, #2
 800e752:	2b00      	cmp	r3, #0
 800e754:	d011      	beq.n	800e77a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e75a:	f003 0301 	and.w	r3, r3, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00b      	beq.n	800e77a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2202      	movs	r2, #2
 800e768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e770:	f043 0204 	orr.w	r2, r3, #4
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e77a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e77e:	f003 0304 	and.w	r3, r3, #4
 800e782:	2b00      	cmp	r3, #0
 800e784:	d011      	beq.n	800e7aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00b      	beq.n	800e7aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2204      	movs	r2, #4
 800e798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7a0:	f043 0202 	orr.w	r2, r3, #2
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d006      	beq.n	800e7c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7fe fe75 	bl	800d4a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f040 80a8 	bne.w	800e920 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7d8:	e853 3f00 	ldrex	r3, [r3]
 800e7dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e7f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e7f4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e7f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e7fa:	e841 2300 	strex	r3, r2, [r1]
 800e7fe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e802:	2b00      	cmp	r3, #0
 800e804:	d1e4      	bne.n	800e7d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	3308      	adds	r3, #8
 800e80c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e81c:	f023 0301 	bic.w	r3, r3, #1
 800e820:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3308      	adds	r3, #8
 800e82a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e82e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e830:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e832:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e834:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e836:	e841 2300 	strex	r3, r2, [r1]
 800e83a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e83c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1e1      	bne.n	800e806 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2220      	movs	r2, #32
 800e846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a62      	ldr	r2, [pc, #392]	@ (800e9e4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d026      	beq.n	800e8ae <UART_RxISR_8BIT_FIFOEN+0x22e>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a60      	ldr	r2, [pc, #384]	@ (800e9e8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d021      	beq.n	800e8ae <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e874:	2b00      	cmp	r3, #0
 800e876:	d01a      	beq.n	800e8ae <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e888:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e88c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e89a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e89c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e4      	bne.n	800e878 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d130      	bne.n	800e918 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c4:	e853 3f00 	ldrex	r3, [r3]
 800e8c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8cc:	f023 0310 	bic.w	r3, r3, #16
 800e8d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e8de:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e8e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e8e6:	e841 2300 	strex	r3, r2, [r1]
 800e8ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1e4      	bne.n	800e8bc <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	69db      	ldr	r3, [r3, #28]
 800e8f8:	f003 0310 	and.w	r3, r3, #16
 800e8fc:	2b10      	cmp	r3, #16
 800e8fe:	d103      	bne.n	800e908 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2210      	movs	r2, #16
 800e906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7fe fdd1 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e916:	e00e      	b.n	800e936 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7f4 fdf1 	bl	8003500 <HAL_UART_RxCpltCallback>
        break;
 800e91e:	e00a      	b.n	800e936 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e920:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e924:	2b00      	cmp	r3, #0
 800e926:	d006      	beq.n	800e936 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800e928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e92c:	f003 0320 	and.w	r3, r3, #32
 800e930:	2b00      	cmp	r3, #0
 800e932:	f47f aec9 	bne.w	800e6c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e93c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e940:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e944:	2b00      	cmp	r3, #0
 800e946:	d049      	beq.n	800e9dc <UART_RxISR_8BIT_FIFOEN+0x35c>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e94e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e952:	429a      	cmp	r2, r3
 800e954:	d242      	bcs.n	800e9dc <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95e:	6a3b      	ldr	r3, [r7, #32]
 800e960:	e853 3f00 	ldrex	r3, [r3]
 800e964:	61fb      	str	r3, [r7, #28]
   return(result);
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e96c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	3308      	adds	r3, #8
 800e976:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e97a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e97c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e3      	bne.n	800e956 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a16      	ldr	r2, [pc, #88]	@ (800e9ec <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e992:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	e853 3f00 	ldrex	r3, [r3]
 800e9a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f043 0320 	orr.w	r3, r3, #32
 800e9a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e9b6:	61bb      	str	r3, [r7, #24]
 800e9b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ba:	6979      	ldr	r1, [r7, #20]
 800e9bc:	69ba      	ldr	r2, [r7, #24]
 800e9be:	e841 2300 	strex	r3, r2, [r1]
 800e9c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1e4      	bne.n	800e994 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9ca:	e007      	b.n	800e9dc <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	699a      	ldr	r2, [r3, #24]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f042 0208 	orr.w	r2, r2, #8
 800e9da:	619a      	str	r2, [r3, #24]
}
 800e9dc:	bf00      	nop
 800e9de:	37b0      	adds	r7, #176	@ 0xb0
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	44002400 	.word	0x44002400
 800e9e8:	54002400 	.word	0x54002400
 800e9ec:	0800e2f9 	.word	0x0800e2f9

0800e9f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b0ae      	sub	sp, #184	@ 0xb8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e9fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69db      	ldr	r3, [r3, #28]
 800ea08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea26:	2b22      	cmp	r3, #34	@ 0x22
 800ea28:	f040 818c 	bne.w	800ed44 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ea32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea36:	e12f      	b.n	800ec98 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ea4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ea4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ea52:	4013      	ands	r3, r2
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea60:	1c9a      	adds	r2, r3, #2
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	69db      	ldr	r3, [r3, #28]
 800ea7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ea82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ea86:	f003 0307 	and.w	r3, r3, #7
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d053      	beq.n	800eb36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d011      	beq.n	800eabe <UART_RxISR_16BIT_FIFOEN+0xce>
 800ea9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00b      	beq.n	800eabe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eab4:	f043 0201 	orr.w	r2, r3, #1
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eabe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eac2:	f003 0302 	and.w	r3, r3, #2
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d011      	beq.n	800eaee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800eaca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00b      	beq.n	800eaee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2202      	movs	r2, #2
 800eadc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eae4:	f043 0204 	orr.w	r2, r3, #4
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eaee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eaf2:	f003 0304 	and.w	r3, r3, #4
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d011      	beq.n	800eb1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800eafa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00b      	beq.n	800eb1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2204      	movs	r2, #4
 800eb0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb14:	f043 0202 	orr.w	r2, r3, #2
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d006      	beq.n	800eb36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7fe fcbb 	bl	800d4a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 80aa 	bne.w	800ec98 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb4c:	e853 3f00 	ldrex	r3, [r3]
 800eb50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800eb52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	461a      	mov	r2, r3
 800eb62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eb66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eb6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800eb6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eb72:	e841 2300 	strex	r3, r2, [r1]
 800eb76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800eb78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1e2      	bne.n	800eb44 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3308      	adds	r3, #8
 800eb84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb88:	e853 3f00 	ldrex	r3, [r3]
 800eb8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eb8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb94:	f023 0301 	bic.w	r3, r3, #1
 800eb98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3308      	adds	r3, #8
 800eba2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800eba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800eba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ebac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ebae:	e841 2300 	strex	r3, r2, [r1]
 800ebb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ebb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1e1      	bne.n	800eb7e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2220      	movs	r2, #32
 800ebbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a62      	ldr	r2, [pc, #392]	@ (800ed5c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d026      	beq.n	800ec26 <UART_RxISR_16BIT_FIFOEN+0x236>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a60      	ldr	r2, [pc, #384]	@ (800ed60 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d021      	beq.n	800ec26 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d01a      	beq.n	800ec26 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ebfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec1a:	e841 2300 	strex	r3, r2, [r1]
 800ec1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1e4      	bne.n	800ebf0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d130      	bne.n	800ec90 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec3c:	e853 3f00 	ldrex	r3, [r3]
 800ec40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec44:	f023 0310 	bic.w	r3, r3, #16
 800ec48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	461a      	mov	r2, r3
 800ec52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ec56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec5e:	e841 2300 	strex	r3, r2, [r1]
 800ec62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1e4      	bne.n	800ec34 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	69db      	ldr	r3, [r3, #28]
 800ec70:	f003 0310 	and.w	r3, r3, #16
 800ec74:	2b10      	cmp	r3, #16
 800ec76:	d103      	bne.n	800ec80 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2210      	movs	r2, #16
 800ec7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec86:	4619      	mov	r1, r3
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7fe fc15 	bl	800d4b8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ec8e:	e00e      	b.n	800ecae <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7f4 fc35 	bl	8003500 <HAL_UART_RxCpltCallback>
        break;
 800ec96:	e00a      	b.n	800ecae <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec98:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <UART_RxISR_16BIT_FIFOEN+0x2be>
 800eca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eca4:	f003 0320 	and.w	r3, r3, #32
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f47f aec5 	bne.w	800ea38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ecb4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ecb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d049      	beq.n	800ed54 <UART_RxISR_16BIT_FIFOEN+0x364>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ecc6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d242      	bcs.n	800ed54 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3308      	adds	r3, #8
 800ecd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd8:	e853 3f00 	ldrex	r3, [r3]
 800ecdc:	623b      	str	r3, [r7, #32]
   return(result);
 800ecde:	6a3b      	ldr	r3, [r7, #32]
 800ece0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ece4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3308      	adds	r3, #8
 800ecee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ecf2:	633a      	str	r2, [r7, #48]	@ 0x30
 800ecf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ecf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecfa:	e841 2300 	strex	r3, r2, [r1]
 800ecfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1e3      	bne.n	800ecce <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a16      	ldr	r2, [pc, #88]	@ (800ed64 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800ed0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	e853 3f00 	ldrex	r3, [r3]
 800ed18:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f043 0320 	orr.w	r3, r3, #32
 800ed20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed2e:	61fb      	str	r3, [r7, #28]
 800ed30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	69b9      	ldr	r1, [r7, #24]
 800ed34:	69fa      	ldr	r2, [r7, #28]
 800ed36:	e841 2300 	strex	r3, r2, [r1]
 800ed3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e4      	bne.n	800ed0c <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed42:	e007      	b.n	800ed54 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	699a      	ldr	r2, [r3, #24]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f042 0208 	orr.w	r2, r2, #8
 800ed52:	619a      	str	r2, [r3, #24]
}
 800ed54:	bf00      	nop
 800ed56:	37b8      	adds	r7, #184	@ 0xb8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	44002400 	.word	0x44002400
 800ed60:	54002400 	.word	0x54002400
 800ed64:	0800e4bd 	.word	0x0800e4bd

0800ed68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d101      	bne.n	800edba <HAL_UARTEx_DisableFifoMode+0x16>
 800edb6:	2302      	movs	r3, #2
 800edb8:	e027      	b.n	800ee0a <HAL_UARTEx_DisableFifoMode+0x66>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2224      	movs	r2, #36	@ 0x24
 800edc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f022 0201 	bic.w	r2, r2, #1
 800ede0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ede8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2220      	movs	r2, #32
 800edfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3714      	adds	r7, #20
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d101      	bne.n	800ee2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee2a:	2302      	movs	r3, #2
 800ee2c:	e02d      	b.n	800ee8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2224      	movs	r2, #36	@ 0x24
 800ee3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f022 0201 	bic.w	r2, r2, #1
 800ee54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f850 	bl	800ef10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee88:	2300      	movs	r3, #0
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d101      	bne.n	800eeaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eea6:	2302      	movs	r3, #2
 800eea8:	e02d      	b.n	800ef06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2201      	movs	r2, #1
 800eeae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2224      	movs	r2, #36	@ 0x24
 800eeb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f022 0201 	bic.w	r2, r2, #1
 800eed0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	430a      	orrs	r2, r1
 800eee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f812 	bl	800ef10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2220      	movs	r2, #32
 800eef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
	...

0800ef10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d108      	bne.n	800ef32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef30:	e031      	b.n	800ef96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef32:	2308      	movs	r3, #8
 800ef34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef36:	2308      	movs	r3, #8
 800ef38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	0e5b      	lsrs	r3, r3, #25
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	f003 0307 	and.w	r3, r3, #7
 800ef48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	0f5b      	lsrs	r3, r3, #29
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	f003 0307 	and.w	r3, r3, #7
 800ef58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef5a:	7bbb      	ldrb	r3, [r7, #14]
 800ef5c:	7b3a      	ldrb	r2, [r7, #12]
 800ef5e:	4911      	ldr	r1, [pc, #68]	@ (800efa4 <UARTEx_SetNbDataToProcess+0x94>)
 800ef60:	5c8a      	ldrb	r2, [r1, r2]
 800ef62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef66:	7b3a      	ldrb	r2, [r7, #12]
 800ef68:	490f      	ldr	r1, [pc, #60]	@ (800efa8 <UARTEx_SetNbDataToProcess+0x98>)
 800ef6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	7b7a      	ldrb	r2, [r7, #13]
 800ef7c:	4909      	ldr	r1, [pc, #36]	@ (800efa4 <UARTEx_SetNbDataToProcess+0x94>)
 800ef7e:	5c8a      	ldrb	r2, [r1, r2]
 800ef80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef84:	7b7a      	ldrb	r2, [r7, #13]
 800ef86:	4908      	ldr	r1, [pc, #32]	@ (800efa8 <UARTEx_SetNbDataToProcess+0x98>)
 800ef88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ef96:	bf00      	nop
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	08012348 	.word	0x08012348
 800efa8:	08012350 	.word	0x08012350

0800efac <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800efac:	b480      	push	{r7}
 800efae:	b087      	sub	sp, #28
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	6812      	ldr	r2, [r2, #0]
 800efc4:	f023 0101 	bic.w	r1, r3, #1
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	2b08      	cmp	r3, #8
 800efd4:	d102      	bne.n	800efdc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800efd6:	2340      	movs	r3, #64	@ 0x40
 800efd8:	617b      	str	r3, [r7, #20]
 800efda:	e001      	b.n	800efe0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800efdc:	2300      	movs	r3, #0
 800efde:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800efec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800eff2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800eff8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800effe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f004:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f00a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f010:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800f016:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800f01c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800f022:	4313      	orrs	r3, r2
 800f024:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f02a:	693a      	ldr	r2, [r7, #16]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f034:	693a      	ldr	r2, [r7, #16]
 800f036:	4313      	orrs	r3, r2
 800f038:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f03e:	693a      	ldr	r2, [r7, #16]
 800f040:	4313      	orrs	r3, r2
 800f042:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f048:	693a      	ldr	r2, [r7, #16]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f04e:	4b3d      	ldr	r3, [pc, #244]	@ (800f144 <FMC_NORSRAM_Init+0x198>)
 800f050:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f058:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f060:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800f068:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800f070:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	43db      	mvns	r3, r3
 800f080:	ea02 0103 	and.w	r1, r2, r3
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	4319      	orrs	r1, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f09a:	d10c      	bne.n	800f0b6 <FMC_NORSRAM_Init+0x10a>
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d008      	beq.n	800f0b6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0b0:	431a      	orrs	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d006      	beq.n	800f0cc <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0c6:	431a      	orrs	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d12f      	bne.n	800f136 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1b      	ldr	r3, [r3, #32]
 800f0da:	0c1b      	lsrs	r3, r3, #16
 800f0dc:	041b      	lsls	r3, r3, #16
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f0e2:	431a      	orrs	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d014      	beq.n	800f11a <FMC_NORSRAM_Init+0x16e>
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d819      	bhi.n	800f128 <FMC_NORSRAM_Init+0x17c>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <FMC_NORSRAM_Init+0x152>
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d007      	beq.n	800f10c <FMC_NORSRAM_Init+0x160>
 800f0fc:	e014      	b.n	800f128 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	621a      	str	r2, [r3, #32]
        break;
 800f10a:	e014      	b.n	800f136 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6a1b      	ldr	r3, [r3, #32]
 800f110:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	621a      	str	r2, [r3, #32]
        break;
 800f118:	e00d      	b.n	800f136 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	621a      	str	r2, [r3, #32]
        break;
 800f126:	e006      	b.n	800f136 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6a1b      	ldr	r3, [r3, #32]
 800f12c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	621a      	str	r2, [r3, #32]
        break;
 800f134:	bf00      	nop
    }
  }

  return HAL_OK;
 800f136:	2300      	movs	r3, #0
}
 800f138:	4618      	mov	r0, r3
 800f13a:	371c      	adds	r7, #28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	0008fb7f 	.word	0x0008fb7f

0800f148 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f148:	b480      	push	{r7}
 800f14a:	b087      	sub	sp, #28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f15e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f166:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f16e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f176:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	3b01      	subs	r3, #1
 800f17e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f180:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	3b02      	subs	r3, #2
 800f188:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f18a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f196:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1aa:	d113      	bne.n	800f1d4 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f1b4:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	051b      	lsls	r3, r3, #20
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	431a      	orrs	r2, r3
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	371c      	adds	r7, #28
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr

0800f1e2 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f1e2:	b480      	push	{r7}
 800f1e4:	b085      	sub	sp, #20
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	60f8      	str	r0, [r7, #12]
 800f1ea:	60b9      	str	r1, [r7, #8]
 800f1ec:	607a      	str	r2, [r7, #4]
 800f1ee:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1f6:	d121      	bne.n	800f23c <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f200:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	6819      	ldr	r1, [r3, #0]
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	011b      	lsls	r3, r3, #4
 800f20e:	4319      	orrs	r1, r3
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	021b      	lsls	r3, r3, #8
 800f216:	4319      	orrs	r1, r3
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	079b      	lsls	r3, r3, #30
 800f21e:	4319      	orrs	r1, r3
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	69db      	ldr	r3, [r3, #28]
 800f224:	4319      	orrs	r1, r3
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	691b      	ldr	r3, [r3, #16]
 800f22a:	041b      	lsls	r3, r3, #16
 800f22c:	430b      	orrs	r3, r1
 800f22e:	ea42 0103 	orr.w	r1, r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f23a:	e005      	b.n	800f248 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
	...

0800f258 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	4b10      	ldr	r3, [pc, #64]	@ (800f2a8 <FMC_NAND_Init+0x50>)
 800f268:	4013      	ands	r3, r2
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	6851      	ldr	r1, [r2, #4]
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	6892      	ldr	r2, [r2, #8]
 800f272:	4311      	orrs	r1, r2
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	68d2      	ldr	r2, [r2, #12]
 800f278:	4311      	orrs	r1, r2
 800f27a:	683a      	ldr	r2, [r7, #0]
 800f27c:	6912      	ldr	r2, [r2, #16]
 800f27e:	4311      	orrs	r1, r2
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	6952      	ldr	r2, [r2, #20]
 800f284:	0252      	lsls	r2, r2, #9
 800f286:	4311      	orrs	r1, r2
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	6992      	ldr	r2, [r2, #24]
 800f28c:	0352      	lsls	r2, r2, #13
 800f28e:	430a      	orrs	r2, r1
 800f290:	4313      	orrs	r3, r2
 800f292:	f043 0208 	orr.w	r2, r3, #8
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	fff00181 	.word	0xfff00181

0800f2ac <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800f2c2:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f2ca:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f2d2:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3714      	adds	r7, #20
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr

0800f2e6 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f2e6:	b480      	push	{r7}
 800f2e8:	b085      	sub	sp, #20
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	60f8      	str	r0, [r7, #12]
 800f2ee:	60b9      	str	r1, [r7, #8]
 800f2f0:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800f2fc:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f304:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f30c:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <__cvt>:
 800f320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f324:	ec57 6b10 	vmov	r6, r7, d0
 800f328:	2f00      	cmp	r7, #0
 800f32a:	460c      	mov	r4, r1
 800f32c:	4619      	mov	r1, r3
 800f32e:	463b      	mov	r3, r7
 800f330:	bfb4      	ite	lt
 800f332:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f336:	2300      	movge	r3, #0
 800f338:	4691      	mov	r9, r2
 800f33a:	bfbf      	itttt	lt
 800f33c:	4632      	movlt	r2, r6
 800f33e:	461f      	movlt	r7, r3
 800f340:	232d      	movlt	r3, #45	@ 0x2d
 800f342:	4616      	movlt	r6, r2
 800f344:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f348:	700b      	strb	r3, [r1, #0]
 800f34a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f34c:	f023 0820 	bic.w	r8, r3, #32
 800f350:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f354:	d005      	beq.n	800f362 <__cvt+0x42>
 800f356:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f35a:	d100      	bne.n	800f35e <__cvt+0x3e>
 800f35c:	3401      	adds	r4, #1
 800f35e:	2102      	movs	r1, #2
 800f360:	e000      	b.n	800f364 <__cvt+0x44>
 800f362:	2103      	movs	r1, #3
 800f364:	ab03      	add	r3, sp, #12
 800f366:	4622      	mov	r2, r4
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	ab02      	add	r3, sp, #8
 800f36c:	ec47 6b10 	vmov	d0, r6, r7
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	4653      	mov	r3, sl
 800f374:	f000 fe7c 	bl	8010070 <_dtoa_r>
 800f378:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f37c:	4605      	mov	r5, r0
 800f37e:	d119      	bne.n	800f3b4 <__cvt+0x94>
 800f380:	f019 0f01 	tst.w	r9, #1
 800f384:	d00e      	beq.n	800f3a4 <__cvt+0x84>
 800f386:	eb00 0904 	add.w	r9, r0, r4
 800f38a:	2200      	movs	r2, #0
 800f38c:	2300      	movs	r3, #0
 800f38e:	4630      	mov	r0, r6
 800f390:	4639      	mov	r1, r7
 800f392:	f7f1 fba9 	bl	8000ae8 <__aeabi_dcmpeq>
 800f396:	b108      	cbz	r0, 800f39c <__cvt+0x7c>
 800f398:	f8cd 900c 	str.w	r9, [sp, #12]
 800f39c:	2230      	movs	r2, #48	@ 0x30
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	454b      	cmp	r3, r9
 800f3a2:	d31e      	bcc.n	800f3e2 <__cvt+0xc2>
 800f3a4:	9b03      	ldr	r3, [sp, #12]
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3aa:	1b5b      	subs	r3, r3, r5
 800f3ac:	6013      	str	r3, [r2, #0]
 800f3ae:	b004      	add	sp, #16
 800f3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f3b8:	eb00 0904 	add.w	r9, r0, r4
 800f3bc:	d1e5      	bne.n	800f38a <__cvt+0x6a>
 800f3be:	7803      	ldrb	r3, [r0, #0]
 800f3c0:	2b30      	cmp	r3, #48	@ 0x30
 800f3c2:	d10a      	bne.n	800f3da <__cvt+0xba>
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	f7f1 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3d0:	b918      	cbnz	r0, 800f3da <__cvt+0xba>
 800f3d2:	f1c4 0401 	rsb	r4, r4, #1
 800f3d6:	f8ca 4000 	str.w	r4, [sl]
 800f3da:	f8da 3000 	ldr.w	r3, [sl]
 800f3de:	4499      	add	r9, r3
 800f3e0:	e7d3      	b.n	800f38a <__cvt+0x6a>
 800f3e2:	1c59      	adds	r1, r3, #1
 800f3e4:	9103      	str	r1, [sp, #12]
 800f3e6:	701a      	strb	r2, [r3, #0]
 800f3e8:	e7d9      	b.n	800f39e <__cvt+0x7e>

0800f3ea <__exponent>:
 800f3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3ec:	2900      	cmp	r1, #0
 800f3ee:	7002      	strb	r2, [r0, #0]
 800f3f0:	bfba      	itte	lt
 800f3f2:	4249      	neglt	r1, r1
 800f3f4:	232d      	movlt	r3, #45	@ 0x2d
 800f3f6:	232b      	movge	r3, #43	@ 0x2b
 800f3f8:	2909      	cmp	r1, #9
 800f3fa:	7043      	strb	r3, [r0, #1]
 800f3fc:	dd28      	ble.n	800f450 <__exponent+0x66>
 800f3fe:	f10d 0307 	add.w	r3, sp, #7
 800f402:	270a      	movs	r7, #10
 800f404:	461d      	mov	r5, r3
 800f406:	461a      	mov	r2, r3
 800f408:	3b01      	subs	r3, #1
 800f40a:	fbb1 f6f7 	udiv	r6, r1, r7
 800f40e:	fb07 1416 	mls	r4, r7, r6, r1
 800f412:	3430      	adds	r4, #48	@ 0x30
 800f414:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f418:	460c      	mov	r4, r1
 800f41a:	4631      	mov	r1, r6
 800f41c:	2c63      	cmp	r4, #99	@ 0x63
 800f41e:	dcf2      	bgt.n	800f406 <__exponent+0x1c>
 800f420:	3130      	adds	r1, #48	@ 0x30
 800f422:	1e94      	subs	r4, r2, #2
 800f424:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f428:	1c41      	adds	r1, r0, #1
 800f42a:	4623      	mov	r3, r4
 800f42c:	42ab      	cmp	r3, r5
 800f42e:	d30a      	bcc.n	800f446 <__exponent+0x5c>
 800f430:	f10d 0309 	add.w	r3, sp, #9
 800f434:	1a9b      	subs	r3, r3, r2
 800f436:	42ac      	cmp	r4, r5
 800f438:	bf88      	it	hi
 800f43a:	2300      	movhi	r3, #0
 800f43c:	3302      	adds	r3, #2
 800f43e:	4403      	add	r3, r0
 800f440:	1a18      	subs	r0, r3, r0
 800f442:	b003      	add	sp, #12
 800f444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f446:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f44a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f44e:	e7ed      	b.n	800f42c <__exponent+0x42>
 800f450:	2330      	movs	r3, #48	@ 0x30
 800f452:	3130      	adds	r1, #48	@ 0x30
 800f454:	7083      	strb	r3, [r0, #2]
 800f456:	1d03      	adds	r3, r0, #4
 800f458:	70c1      	strb	r1, [r0, #3]
 800f45a:	e7f1      	b.n	800f440 <__exponent+0x56>

0800f45c <_printf_float>:
 800f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	b08d      	sub	sp, #52	@ 0x34
 800f462:	460c      	mov	r4, r1
 800f464:	4616      	mov	r6, r2
 800f466:	461f      	mov	r7, r3
 800f468:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f46c:	4605      	mov	r5, r0
 800f46e:	f000 fcdf 	bl	800fe30 <_localeconv_r>
 800f472:	6803      	ldr	r3, [r0, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	9304      	str	r3, [sp, #16]
 800f478:	f7f0 ff0a 	bl	8000290 <strlen>
 800f47c:	2300      	movs	r3, #0
 800f47e:	9005      	str	r0, [sp, #20]
 800f480:	930a      	str	r3, [sp, #40]	@ 0x28
 800f482:	f8d8 3000 	ldr.w	r3, [r8]
 800f486:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f48a:	3307      	adds	r3, #7
 800f48c:	f8d4 b000 	ldr.w	fp, [r4]
 800f490:	f023 0307 	bic.w	r3, r3, #7
 800f494:	f103 0208 	add.w	r2, r3, #8
 800f498:	f8c8 2000 	str.w	r2, [r8]
 800f49c:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f4a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f4ac:	9307      	str	r3, [sp, #28]
 800f4ae:	4b9d      	ldr	r3, [pc, #628]	@ (800f724 <_printf_float+0x2c8>)
 800f4b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f4b8:	f7f1 fb48 	bl	8000b4c <__aeabi_dcmpun>
 800f4bc:	bb70      	cbnz	r0, 800f51c <_printf_float+0xc0>
 800f4be:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c2:	4b98      	ldr	r3, [pc, #608]	@ (800f724 <_printf_float+0x2c8>)
 800f4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4c8:	f7f1 fb22 	bl	8000b10 <__aeabi_dcmple>
 800f4cc:	bb30      	cbnz	r0, 800f51c <_printf_float+0xc0>
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	4649      	mov	r1, r9
 800f4d6:	f7f1 fb11 	bl	8000afc <__aeabi_dcmplt>
 800f4da:	b110      	cbz	r0, 800f4e2 <_printf_float+0x86>
 800f4dc:	232d      	movs	r3, #45	@ 0x2d
 800f4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4e2:	4a91      	ldr	r2, [pc, #580]	@ (800f728 <_printf_float+0x2cc>)
 800f4e4:	4b91      	ldr	r3, [pc, #580]	@ (800f72c <_printf_float+0x2d0>)
 800f4e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f4ea:	bf94      	ite	ls
 800f4ec:	4690      	movls	r8, r2
 800f4ee:	4698      	movhi	r8, r3
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	f04f 0900 	mov.w	r9, #0
 800f4f6:	6123      	str	r3, [r4, #16]
 800f4f8:	f02b 0304 	bic.w	r3, fp, #4
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	4633      	mov	r3, r6
 800f500:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f502:	4621      	mov	r1, r4
 800f504:	4628      	mov	r0, r5
 800f506:	9700      	str	r7, [sp, #0]
 800f508:	f000 f9d2 	bl	800f8b0 <_printf_common>
 800f50c:	3001      	adds	r0, #1
 800f50e:	f040 808d 	bne.w	800f62c <_printf_float+0x1d0>
 800f512:	f04f 30ff 	mov.w	r0, #4294967295
 800f516:	b00d      	add	sp, #52	@ 0x34
 800f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	4642      	mov	r2, r8
 800f51e:	464b      	mov	r3, r9
 800f520:	4640      	mov	r0, r8
 800f522:	4649      	mov	r1, r9
 800f524:	f7f1 fb12 	bl	8000b4c <__aeabi_dcmpun>
 800f528:	b140      	cbz	r0, 800f53c <_printf_float+0xe0>
 800f52a:	464b      	mov	r3, r9
 800f52c:	4a80      	ldr	r2, [pc, #512]	@ (800f730 <_printf_float+0x2d4>)
 800f52e:	2b00      	cmp	r3, #0
 800f530:	bfbc      	itt	lt
 800f532:	232d      	movlt	r3, #45	@ 0x2d
 800f534:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f538:	4b7e      	ldr	r3, [pc, #504]	@ (800f734 <_printf_float+0x2d8>)
 800f53a:	e7d4      	b.n	800f4e6 <_printf_float+0x8a>
 800f53c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f540:	6863      	ldr	r3, [r4, #4]
 800f542:	9206      	str	r2, [sp, #24]
 800f544:	1c5a      	adds	r2, r3, #1
 800f546:	d13b      	bne.n	800f5c0 <_printf_float+0x164>
 800f548:	2306      	movs	r3, #6
 800f54a:	6063      	str	r3, [r4, #4]
 800f54c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f550:	2300      	movs	r3, #0
 800f552:	4628      	mov	r0, r5
 800f554:	6022      	str	r2, [r4, #0]
 800f556:	9303      	str	r3, [sp, #12]
 800f558:	ab0a      	add	r3, sp, #40	@ 0x28
 800f55a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f55e:	ab09      	add	r3, sp, #36	@ 0x24
 800f560:	ec49 8b10 	vmov	d0, r8, r9
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f56a:	6861      	ldr	r1, [r4, #4]
 800f56c:	f7ff fed8 	bl	800f320 <__cvt>
 800f570:	9b06      	ldr	r3, [sp, #24]
 800f572:	4680      	mov	r8, r0
 800f574:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f576:	2b47      	cmp	r3, #71	@ 0x47
 800f578:	d129      	bne.n	800f5ce <_printf_float+0x172>
 800f57a:	1cc8      	adds	r0, r1, #3
 800f57c:	db02      	blt.n	800f584 <_printf_float+0x128>
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	4299      	cmp	r1, r3
 800f582:	dd41      	ble.n	800f608 <_printf_float+0x1ac>
 800f584:	f1aa 0a02 	sub.w	sl, sl, #2
 800f588:	fa5f fa8a 	uxtb.w	sl, sl
 800f58c:	3901      	subs	r1, #1
 800f58e:	4652      	mov	r2, sl
 800f590:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f594:	9109      	str	r1, [sp, #36]	@ 0x24
 800f596:	f7ff ff28 	bl	800f3ea <__exponent>
 800f59a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f59c:	4681      	mov	r9, r0
 800f59e:	1813      	adds	r3, r2, r0
 800f5a0:	2a01      	cmp	r2, #1
 800f5a2:	6123      	str	r3, [r4, #16]
 800f5a4:	dc02      	bgt.n	800f5ac <_printf_float+0x150>
 800f5a6:	6822      	ldr	r2, [r4, #0]
 800f5a8:	07d2      	lsls	r2, r2, #31
 800f5aa:	d501      	bpl.n	800f5b0 <_printf_float+0x154>
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	6123      	str	r3, [r4, #16]
 800f5b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d0a2      	beq.n	800f4fe <_printf_float+0xa2>
 800f5b8:	232d      	movs	r3, #45	@ 0x2d
 800f5ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5be:	e79e      	b.n	800f4fe <_printf_float+0xa2>
 800f5c0:	9a06      	ldr	r2, [sp, #24]
 800f5c2:	2a47      	cmp	r2, #71	@ 0x47
 800f5c4:	d1c2      	bne.n	800f54c <_printf_float+0xf0>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1c0      	bne.n	800f54c <_printf_float+0xf0>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e7bd      	b.n	800f54a <_printf_float+0xee>
 800f5ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f5d2:	d9db      	bls.n	800f58c <_printf_float+0x130>
 800f5d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f5d8:	d118      	bne.n	800f60c <_printf_float+0x1b0>
 800f5da:	2900      	cmp	r1, #0
 800f5dc:	6863      	ldr	r3, [r4, #4]
 800f5de:	dd0b      	ble.n	800f5f8 <_printf_float+0x19c>
 800f5e0:	6121      	str	r1, [r4, #16]
 800f5e2:	b913      	cbnz	r3, 800f5ea <_printf_float+0x18e>
 800f5e4:	6822      	ldr	r2, [r4, #0]
 800f5e6:	07d0      	lsls	r0, r2, #31
 800f5e8:	d502      	bpl.n	800f5f0 <_printf_float+0x194>
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	440b      	add	r3, r1
 800f5ee:	6123      	str	r3, [r4, #16]
 800f5f0:	f04f 0900 	mov.w	r9, #0
 800f5f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f5f6:	e7db      	b.n	800f5b0 <_printf_float+0x154>
 800f5f8:	b913      	cbnz	r3, 800f600 <_printf_float+0x1a4>
 800f5fa:	6822      	ldr	r2, [r4, #0]
 800f5fc:	07d2      	lsls	r2, r2, #31
 800f5fe:	d501      	bpl.n	800f604 <_printf_float+0x1a8>
 800f600:	3302      	adds	r3, #2
 800f602:	e7f4      	b.n	800f5ee <_printf_float+0x192>
 800f604:	2301      	movs	r3, #1
 800f606:	e7f2      	b.n	800f5ee <_printf_float+0x192>
 800f608:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f60e:	4299      	cmp	r1, r3
 800f610:	db05      	blt.n	800f61e <_printf_float+0x1c2>
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	6121      	str	r1, [r4, #16]
 800f616:	07d8      	lsls	r0, r3, #31
 800f618:	d5ea      	bpl.n	800f5f0 <_printf_float+0x194>
 800f61a:	1c4b      	adds	r3, r1, #1
 800f61c:	e7e7      	b.n	800f5ee <_printf_float+0x192>
 800f61e:	2900      	cmp	r1, #0
 800f620:	bfd4      	ite	le
 800f622:	f1c1 0202 	rsble	r2, r1, #2
 800f626:	2201      	movgt	r2, #1
 800f628:	4413      	add	r3, r2
 800f62a:	e7e0      	b.n	800f5ee <_printf_float+0x192>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	055a      	lsls	r2, r3, #21
 800f630:	d407      	bmi.n	800f642 <_printf_float+0x1e6>
 800f632:	6923      	ldr	r3, [r4, #16]
 800f634:	4642      	mov	r2, r8
 800f636:	4631      	mov	r1, r6
 800f638:	4628      	mov	r0, r5
 800f63a:	47b8      	blx	r7
 800f63c:	3001      	adds	r0, #1
 800f63e:	d12b      	bne.n	800f698 <_printf_float+0x23c>
 800f640:	e767      	b.n	800f512 <_printf_float+0xb6>
 800f642:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f646:	f240 80dd 	bls.w	800f804 <_printf_float+0x3a8>
 800f64a:	2200      	movs	r2, #0
 800f64c:	2300      	movs	r3, #0
 800f64e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f652:	f7f1 fa49 	bl	8000ae8 <__aeabi_dcmpeq>
 800f656:	2800      	cmp	r0, #0
 800f658:	d033      	beq.n	800f6c2 <_printf_float+0x266>
 800f65a:	2301      	movs	r3, #1
 800f65c:	4a36      	ldr	r2, [pc, #216]	@ (800f738 <_printf_float+0x2dc>)
 800f65e:	4631      	mov	r1, r6
 800f660:	4628      	mov	r0, r5
 800f662:	47b8      	blx	r7
 800f664:	3001      	adds	r0, #1
 800f666:	f43f af54 	beq.w	800f512 <_printf_float+0xb6>
 800f66a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f66e:	4543      	cmp	r3, r8
 800f670:	db02      	blt.n	800f678 <_printf_float+0x21c>
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	07d8      	lsls	r0, r3, #31
 800f676:	d50f      	bpl.n	800f698 <_printf_float+0x23c>
 800f678:	4631      	mov	r1, r6
 800f67a:	4628      	mov	r0, r5
 800f67c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f680:	47b8      	blx	r7
 800f682:	3001      	adds	r0, #1
 800f684:	f43f af45 	beq.w	800f512 <_printf_float+0xb6>
 800f688:	f04f 0900 	mov.w	r9, #0
 800f68c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f690:	f104 0a1a 	add.w	sl, r4, #26
 800f694:	45c8      	cmp	r8, r9
 800f696:	dc09      	bgt.n	800f6ac <_printf_float+0x250>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	079b      	lsls	r3, r3, #30
 800f69c:	f100 8103 	bmi.w	800f8a6 <_printf_float+0x44a>
 800f6a0:	68e0      	ldr	r0, [r4, #12]
 800f6a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6a4:	4298      	cmp	r0, r3
 800f6a6:	bfb8      	it	lt
 800f6a8:	4618      	movlt	r0, r3
 800f6aa:	e734      	b.n	800f516 <_printf_float+0xba>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	4652      	mov	r2, sl
 800f6b0:	4631      	mov	r1, r6
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	47b8      	blx	r7
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	f43f af2b 	beq.w	800f512 <_printf_float+0xb6>
 800f6bc:	f109 0901 	add.w	r9, r9, #1
 800f6c0:	e7e8      	b.n	800f694 <_printf_float+0x238>
 800f6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	dc39      	bgt.n	800f73c <_printf_float+0x2e0>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	4a1b      	ldr	r2, [pc, #108]	@ (800f738 <_printf_float+0x2dc>)
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	47b8      	blx	r7
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	f43f af1d 	beq.w	800f512 <_printf_float+0xb6>
 800f6d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f6dc:	ea59 0303 	orrs.w	r3, r9, r3
 800f6e0:	d102      	bne.n	800f6e8 <_printf_float+0x28c>
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	07d9      	lsls	r1, r3, #31
 800f6e6:	d5d7      	bpl.n	800f698 <_printf_float+0x23c>
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6f0:	47b8      	blx	r7
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	f43f af0d 	beq.w	800f512 <_printf_float+0xb6>
 800f6f8:	f04f 0a00 	mov.w	sl, #0
 800f6fc:	f104 0b1a 	add.w	fp, r4, #26
 800f700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f702:	425b      	negs	r3, r3
 800f704:	4553      	cmp	r3, sl
 800f706:	dc01      	bgt.n	800f70c <_printf_float+0x2b0>
 800f708:	464b      	mov	r3, r9
 800f70a:	e793      	b.n	800f634 <_printf_float+0x1d8>
 800f70c:	2301      	movs	r3, #1
 800f70e:	465a      	mov	r2, fp
 800f710:	4631      	mov	r1, r6
 800f712:	4628      	mov	r0, r5
 800f714:	47b8      	blx	r7
 800f716:	3001      	adds	r0, #1
 800f718:	f43f aefb 	beq.w	800f512 <_printf_float+0xb6>
 800f71c:	f10a 0a01 	add.w	sl, sl, #1
 800f720:	e7ee      	b.n	800f700 <_printf_float+0x2a4>
 800f722:	bf00      	nop
 800f724:	7fefffff 	.word	0x7fefffff
 800f728:	08012358 	.word	0x08012358
 800f72c:	0801235c 	.word	0x0801235c
 800f730:	08012360 	.word	0x08012360
 800f734:	08012364 	.word	0x08012364
 800f738:	08012368 	.word	0x08012368
 800f73c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f73e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f742:	4553      	cmp	r3, sl
 800f744:	bfa8      	it	ge
 800f746:	4653      	movge	r3, sl
 800f748:	2b00      	cmp	r3, #0
 800f74a:	4699      	mov	r9, r3
 800f74c:	dc36      	bgt.n	800f7bc <_printf_float+0x360>
 800f74e:	f04f 0b00 	mov.w	fp, #0
 800f752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f756:	f104 021a 	add.w	r2, r4, #26
 800f75a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f75c:	9306      	str	r3, [sp, #24]
 800f75e:	eba3 0309 	sub.w	r3, r3, r9
 800f762:	455b      	cmp	r3, fp
 800f764:	dc31      	bgt.n	800f7ca <_printf_float+0x36e>
 800f766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f768:	459a      	cmp	sl, r3
 800f76a:	dc3a      	bgt.n	800f7e2 <_printf_float+0x386>
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	07da      	lsls	r2, r3, #31
 800f770:	d437      	bmi.n	800f7e2 <_printf_float+0x386>
 800f772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f774:	ebaa 0903 	sub.w	r9, sl, r3
 800f778:	9b06      	ldr	r3, [sp, #24]
 800f77a:	ebaa 0303 	sub.w	r3, sl, r3
 800f77e:	4599      	cmp	r9, r3
 800f780:	bfa8      	it	ge
 800f782:	4699      	movge	r9, r3
 800f784:	f1b9 0f00 	cmp.w	r9, #0
 800f788:	dc33      	bgt.n	800f7f2 <_printf_float+0x396>
 800f78a:	f04f 0800 	mov.w	r8, #0
 800f78e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f792:	f104 0b1a 	add.w	fp, r4, #26
 800f796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f798:	ebaa 0303 	sub.w	r3, sl, r3
 800f79c:	eba3 0309 	sub.w	r3, r3, r9
 800f7a0:	4543      	cmp	r3, r8
 800f7a2:	f77f af79 	ble.w	800f698 <_printf_float+0x23c>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	465a      	mov	r2, fp
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	47b8      	blx	r7
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	f43f aeae 	beq.w	800f512 <_printf_float+0xb6>
 800f7b6:	f108 0801 	add.w	r8, r8, #1
 800f7ba:	e7ec      	b.n	800f796 <_printf_float+0x33a>
 800f7bc:	4642      	mov	r2, r8
 800f7be:	4631      	mov	r1, r6
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	47b8      	blx	r7
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d1c2      	bne.n	800f74e <_printf_float+0x2f2>
 800f7c8:	e6a3      	b.n	800f512 <_printf_float+0xb6>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	9206      	str	r2, [sp, #24]
 800f7d2:	47b8      	blx	r7
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	f43f ae9c 	beq.w	800f512 <_printf_float+0xb6>
 800f7da:	f10b 0b01 	add.w	fp, fp, #1
 800f7de:	9a06      	ldr	r2, [sp, #24]
 800f7e0:	e7bb      	b.n	800f75a <_printf_float+0x2fe>
 800f7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7e6:	4631      	mov	r1, r6
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	47b8      	blx	r7
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	d1c0      	bne.n	800f772 <_printf_float+0x316>
 800f7f0:	e68f      	b.n	800f512 <_printf_float+0xb6>
 800f7f2:	9a06      	ldr	r2, [sp, #24]
 800f7f4:	464b      	mov	r3, r9
 800f7f6:	4631      	mov	r1, r6
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	4442      	add	r2, r8
 800f7fc:	47b8      	blx	r7
 800f7fe:	3001      	adds	r0, #1
 800f800:	d1c3      	bne.n	800f78a <_printf_float+0x32e>
 800f802:	e686      	b.n	800f512 <_printf_float+0xb6>
 800f804:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f808:	f1ba 0f01 	cmp.w	sl, #1
 800f80c:	dc01      	bgt.n	800f812 <_printf_float+0x3b6>
 800f80e:	07db      	lsls	r3, r3, #31
 800f810:	d536      	bpl.n	800f880 <_printf_float+0x424>
 800f812:	2301      	movs	r3, #1
 800f814:	4642      	mov	r2, r8
 800f816:	4631      	mov	r1, r6
 800f818:	4628      	mov	r0, r5
 800f81a:	47b8      	blx	r7
 800f81c:	3001      	adds	r0, #1
 800f81e:	f43f ae78 	beq.w	800f512 <_printf_float+0xb6>
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f82a:	47b8      	blx	r7
 800f82c:	3001      	adds	r0, #1
 800f82e:	f43f ae70 	beq.w	800f512 <_printf_float+0xb6>
 800f832:	2200      	movs	r2, #0
 800f834:	2300      	movs	r3, #0
 800f836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f83a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f83e:	f7f1 f953 	bl	8000ae8 <__aeabi_dcmpeq>
 800f842:	b9c0      	cbnz	r0, 800f876 <_printf_float+0x41a>
 800f844:	4653      	mov	r3, sl
 800f846:	f108 0201 	add.w	r2, r8, #1
 800f84a:	4631      	mov	r1, r6
 800f84c:	4628      	mov	r0, r5
 800f84e:	47b8      	blx	r7
 800f850:	3001      	adds	r0, #1
 800f852:	d10c      	bne.n	800f86e <_printf_float+0x412>
 800f854:	e65d      	b.n	800f512 <_printf_float+0xb6>
 800f856:	2301      	movs	r3, #1
 800f858:	465a      	mov	r2, fp
 800f85a:	4631      	mov	r1, r6
 800f85c:	4628      	mov	r0, r5
 800f85e:	47b8      	blx	r7
 800f860:	3001      	adds	r0, #1
 800f862:	f43f ae56 	beq.w	800f512 <_printf_float+0xb6>
 800f866:	f108 0801 	add.w	r8, r8, #1
 800f86a:	45d0      	cmp	r8, sl
 800f86c:	dbf3      	blt.n	800f856 <_printf_float+0x3fa>
 800f86e:	464b      	mov	r3, r9
 800f870:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f874:	e6df      	b.n	800f636 <_printf_float+0x1da>
 800f876:	f04f 0800 	mov.w	r8, #0
 800f87a:	f104 0b1a 	add.w	fp, r4, #26
 800f87e:	e7f4      	b.n	800f86a <_printf_float+0x40e>
 800f880:	2301      	movs	r3, #1
 800f882:	4642      	mov	r2, r8
 800f884:	e7e1      	b.n	800f84a <_printf_float+0x3ee>
 800f886:	2301      	movs	r3, #1
 800f888:	464a      	mov	r2, r9
 800f88a:	4631      	mov	r1, r6
 800f88c:	4628      	mov	r0, r5
 800f88e:	47b8      	blx	r7
 800f890:	3001      	adds	r0, #1
 800f892:	f43f ae3e 	beq.w	800f512 <_printf_float+0xb6>
 800f896:	f108 0801 	add.w	r8, r8, #1
 800f89a:	68e3      	ldr	r3, [r4, #12]
 800f89c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f89e:	1a5b      	subs	r3, r3, r1
 800f8a0:	4543      	cmp	r3, r8
 800f8a2:	dcf0      	bgt.n	800f886 <_printf_float+0x42a>
 800f8a4:	e6fc      	b.n	800f6a0 <_printf_float+0x244>
 800f8a6:	f04f 0800 	mov.w	r8, #0
 800f8aa:	f104 0919 	add.w	r9, r4, #25
 800f8ae:	e7f4      	b.n	800f89a <_printf_float+0x43e>

0800f8b0 <_printf_common>:
 800f8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	4698      	mov	r8, r3
 800f8b8:	688a      	ldr	r2, [r1, #8]
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	690b      	ldr	r3, [r1, #16]
 800f8be:	460c      	mov	r4, r1
 800f8c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	bfb8      	it	lt
 800f8c8:	4613      	movlt	r3, r2
 800f8ca:	6033      	str	r3, [r6, #0]
 800f8cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f8d0:	b10a      	cbz	r2, 800f8d6 <_printf_common+0x26>
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	6033      	str	r3, [r6, #0]
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	0699      	lsls	r1, r3, #26
 800f8da:	bf42      	ittt	mi
 800f8dc:	6833      	ldrmi	r3, [r6, #0]
 800f8de:	3302      	addmi	r3, #2
 800f8e0:	6033      	strmi	r3, [r6, #0]
 800f8e2:	6825      	ldr	r5, [r4, #0]
 800f8e4:	f015 0506 	ands.w	r5, r5, #6
 800f8e8:	d106      	bne.n	800f8f8 <_printf_common+0x48>
 800f8ea:	f104 0a19 	add.w	sl, r4, #25
 800f8ee:	68e3      	ldr	r3, [r4, #12]
 800f8f0:	6832      	ldr	r2, [r6, #0]
 800f8f2:	1a9b      	subs	r3, r3, r2
 800f8f4:	42ab      	cmp	r3, r5
 800f8f6:	dc2b      	bgt.n	800f950 <_printf_common+0xa0>
 800f8f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f8fc:	6822      	ldr	r2, [r4, #0]
 800f8fe:	3b00      	subs	r3, #0
 800f900:	bf18      	it	ne
 800f902:	2301      	movne	r3, #1
 800f904:	0692      	lsls	r2, r2, #26
 800f906:	d430      	bmi.n	800f96a <_printf_common+0xba>
 800f908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f90c:	4641      	mov	r1, r8
 800f90e:	4638      	mov	r0, r7
 800f910:	47c8      	blx	r9
 800f912:	3001      	adds	r0, #1
 800f914:	d023      	beq.n	800f95e <_printf_common+0xae>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	341a      	adds	r4, #26
 800f91a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f91e:	f003 0306 	and.w	r3, r3, #6
 800f922:	2b04      	cmp	r3, #4
 800f924:	bf0a      	itet	eq
 800f926:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f92a:	2500      	movne	r5, #0
 800f92c:	6833      	ldreq	r3, [r6, #0]
 800f92e:	f04f 0600 	mov.w	r6, #0
 800f932:	bf08      	it	eq
 800f934:	1aed      	subeq	r5, r5, r3
 800f936:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f93a:	bf08      	it	eq
 800f93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f940:	4293      	cmp	r3, r2
 800f942:	bfc4      	itt	gt
 800f944:	1a9b      	subgt	r3, r3, r2
 800f946:	18ed      	addgt	r5, r5, r3
 800f948:	42b5      	cmp	r5, r6
 800f94a:	d11a      	bne.n	800f982 <_printf_common+0xd2>
 800f94c:	2000      	movs	r0, #0
 800f94e:	e008      	b.n	800f962 <_printf_common+0xb2>
 800f950:	2301      	movs	r3, #1
 800f952:	4652      	mov	r2, sl
 800f954:	4641      	mov	r1, r8
 800f956:	4638      	mov	r0, r7
 800f958:	47c8      	blx	r9
 800f95a:	3001      	adds	r0, #1
 800f95c:	d103      	bne.n	800f966 <_printf_common+0xb6>
 800f95e:	f04f 30ff 	mov.w	r0, #4294967295
 800f962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f966:	3501      	adds	r5, #1
 800f968:	e7c1      	b.n	800f8ee <_printf_common+0x3e>
 800f96a:	18e1      	adds	r1, r4, r3
 800f96c:	1c5a      	adds	r2, r3, #1
 800f96e:	2030      	movs	r0, #48	@ 0x30
 800f970:	3302      	adds	r3, #2
 800f972:	4422      	add	r2, r4
 800f974:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f978:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f97c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f980:	e7c2      	b.n	800f908 <_printf_common+0x58>
 800f982:	2301      	movs	r3, #1
 800f984:	4622      	mov	r2, r4
 800f986:	4641      	mov	r1, r8
 800f988:	4638      	mov	r0, r7
 800f98a:	47c8      	blx	r9
 800f98c:	3001      	adds	r0, #1
 800f98e:	d0e6      	beq.n	800f95e <_printf_common+0xae>
 800f990:	3601      	adds	r6, #1
 800f992:	e7d9      	b.n	800f948 <_printf_common+0x98>

0800f994 <_printf_i>:
 800f994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	7e0f      	ldrb	r7, [r1, #24]
 800f99a:	4691      	mov	r9, r2
 800f99c:	4680      	mov	r8, r0
 800f99e:	460c      	mov	r4, r1
 800f9a0:	2f78      	cmp	r7, #120	@ 0x78
 800f9a2:	469a      	mov	sl, r3
 800f9a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f9a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f9aa:	d807      	bhi.n	800f9bc <_printf_i+0x28>
 800f9ac:	2f62      	cmp	r7, #98	@ 0x62
 800f9ae:	d80a      	bhi.n	800f9c6 <_printf_i+0x32>
 800f9b0:	2f00      	cmp	r7, #0
 800f9b2:	f000 80d2 	beq.w	800fb5a <_printf_i+0x1c6>
 800f9b6:	2f58      	cmp	r7, #88	@ 0x58
 800f9b8:	f000 80b9 	beq.w	800fb2e <_printf_i+0x19a>
 800f9bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f9c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f9c4:	e03a      	b.n	800fa3c <_printf_i+0xa8>
 800f9c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f9ca:	2b15      	cmp	r3, #21
 800f9cc:	d8f6      	bhi.n	800f9bc <_printf_i+0x28>
 800f9ce:	a101      	add	r1, pc, #4	@ (adr r1, 800f9d4 <_printf_i+0x40>)
 800f9d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9d4:	0800fa2d 	.word	0x0800fa2d
 800f9d8:	0800fa41 	.word	0x0800fa41
 800f9dc:	0800f9bd 	.word	0x0800f9bd
 800f9e0:	0800f9bd 	.word	0x0800f9bd
 800f9e4:	0800f9bd 	.word	0x0800f9bd
 800f9e8:	0800f9bd 	.word	0x0800f9bd
 800f9ec:	0800fa41 	.word	0x0800fa41
 800f9f0:	0800f9bd 	.word	0x0800f9bd
 800f9f4:	0800f9bd 	.word	0x0800f9bd
 800f9f8:	0800f9bd 	.word	0x0800f9bd
 800f9fc:	0800f9bd 	.word	0x0800f9bd
 800fa00:	0800fb41 	.word	0x0800fb41
 800fa04:	0800fa6b 	.word	0x0800fa6b
 800fa08:	0800fafb 	.word	0x0800fafb
 800fa0c:	0800f9bd 	.word	0x0800f9bd
 800fa10:	0800f9bd 	.word	0x0800f9bd
 800fa14:	0800fb63 	.word	0x0800fb63
 800fa18:	0800f9bd 	.word	0x0800f9bd
 800fa1c:	0800fa6b 	.word	0x0800fa6b
 800fa20:	0800f9bd 	.word	0x0800f9bd
 800fa24:	0800f9bd 	.word	0x0800f9bd
 800fa28:	0800fb03 	.word	0x0800fb03
 800fa2c:	6833      	ldr	r3, [r6, #0]
 800fa2e:	1d1a      	adds	r2, r3, #4
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6032      	str	r2, [r6, #0]
 800fa34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e09d      	b.n	800fb7c <_printf_i+0x1e8>
 800fa40:	6833      	ldr	r3, [r6, #0]
 800fa42:	6820      	ldr	r0, [r4, #0]
 800fa44:	1d19      	adds	r1, r3, #4
 800fa46:	6031      	str	r1, [r6, #0]
 800fa48:	0606      	lsls	r6, r0, #24
 800fa4a:	d501      	bpl.n	800fa50 <_printf_i+0xbc>
 800fa4c:	681d      	ldr	r5, [r3, #0]
 800fa4e:	e003      	b.n	800fa58 <_printf_i+0xc4>
 800fa50:	0645      	lsls	r5, r0, #25
 800fa52:	d5fb      	bpl.n	800fa4c <_printf_i+0xb8>
 800fa54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	da03      	bge.n	800fa64 <_printf_i+0xd0>
 800fa5c:	232d      	movs	r3, #45	@ 0x2d
 800fa5e:	426d      	negs	r5, r5
 800fa60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa64:	4859      	ldr	r0, [pc, #356]	@ (800fbcc <_printf_i+0x238>)
 800fa66:	230a      	movs	r3, #10
 800fa68:	e011      	b.n	800fa8e <_printf_i+0xfa>
 800fa6a:	6821      	ldr	r1, [r4, #0]
 800fa6c:	6833      	ldr	r3, [r6, #0]
 800fa6e:	0608      	lsls	r0, r1, #24
 800fa70:	f853 5b04 	ldr.w	r5, [r3], #4
 800fa74:	d402      	bmi.n	800fa7c <_printf_i+0xe8>
 800fa76:	0649      	lsls	r1, r1, #25
 800fa78:	bf48      	it	mi
 800fa7a:	b2ad      	uxthmi	r5, r5
 800fa7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fa7e:	6033      	str	r3, [r6, #0]
 800fa80:	4852      	ldr	r0, [pc, #328]	@ (800fbcc <_printf_i+0x238>)
 800fa82:	bf14      	ite	ne
 800fa84:	230a      	movne	r3, #10
 800fa86:	2308      	moveq	r3, #8
 800fa88:	2100      	movs	r1, #0
 800fa8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fa8e:	6866      	ldr	r6, [r4, #4]
 800fa90:	2e00      	cmp	r6, #0
 800fa92:	60a6      	str	r6, [r4, #8]
 800fa94:	bfa2      	ittt	ge
 800fa96:	6821      	ldrge	r1, [r4, #0]
 800fa98:	f021 0104 	bicge.w	r1, r1, #4
 800fa9c:	6021      	strge	r1, [r4, #0]
 800fa9e:	b90d      	cbnz	r5, 800faa4 <_printf_i+0x110>
 800faa0:	2e00      	cmp	r6, #0
 800faa2:	d04b      	beq.n	800fb3c <_printf_i+0x1a8>
 800faa4:	4616      	mov	r6, r2
 800faa6:	fbb5 f1f3 	udiv	r1, r5, r3
 800faaa:	fb03 5711 	mls	r7, r3, r1, r5
 800faae:	5dc7      	ldrb	r7, [r0, r7]
 800fab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fab4:	462f      	mov	r7, r5
 800fab6:	460d      	mov	r5, r1
 800fab8:	42bb      	cmp	r3, r7
 800faba:	d9f4      	bls.n	800faa6 <_printf_i+0x112>
 800fabc:	2b08      	cmp	r3, #8
 800fabe:	d10b      	bne.n	800fad8 <_printf_i+0x144>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	07df      	lsls	r7, r3, #31
 800fac4:	d508      	bpl.n	800fad8 <_printf_i+0x144>
 800fac6:	6923      	ldr	r3, [r4, #16]
 800fac8:	6861      	ldr	r1, [r4, #4]
 800faca:	4299      	cmp	r1, r3
 800facc:	bfde      	ittt	le
 800face:	2330      	movle	r3, #48	@ 0x30
 800fad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fad8:	1b92      	subs	r2, r2, r6
 800fada:	6122      	str	r2, [r4, #16]
 800fadc:	464b      	mov	r3, r9
 800fade:	aa03      	add	r2, sp, #12
 800fae0:	4621      	mov	r1, r4
 800fae2:	4640      	mov	r0, r8
 800fae4:	f8cd a000 	str.w	sl, [sp]
 800fae8:	f7ff fee2 	bl	800f8b0 <_printf_common>
 800faec:	3001      	adds	r0, #1
 800faee:	d14a      	bne.n	800fb86 <_printf_i+0x1f2>
 800faf0:	f04f 30ff 	mov.w	r0, #4294967295
 800faf4:	b004      	add	sp, #16
 800faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	f043 0320 	orr.w	r3, r3, #32
 800fb00:	6023      	str	r3, [r4, #0]
 800fb02:	2778      	movs	r7, #120	@ 0x78
 800fb04:	4832      	ldr	r0, [pc, #200]	@ (800fbd0 <_printf_i+0x23c>)
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fb0c:	061f      	lsls	r7, r3, #24
 800fb0e:	6831      	ldr	r1, [r6, #0]
 800fb10:	f851 5b04 	ldr.w	r5, [r1], #4
 800fb14:	d402      	bmi.n	800fb1c <_printf_i+0x188>
 800fb16:	065f      	lsls	r7, r3, #25
 800fb18:	bf48      	it	mi
 800fb1a:	b2ad      	uxthmi	r5, r5
 800fb1c:	6031      	str	r1, [r6, #0]
 800fb1e:	07d9      	lsls	r1, r3, #31
 800fb20:	bf44      	itt	mi
 800fb22:	f043 0320 	orrmi.w	r3, r3, #32
 800fb26:	6023      	strmi	r3, [r4, #0]
 800fb28:	b11d      	cbz	r5, 800fb32 <_printf_i+0x19e>
 800fb2a:	2310      	movs	r3, #16
 800fb2c:	e7ac      	b.n	800fa88 <_printf_i+0xf4>
 800fb2e:	4827      	ldr	r0, [pc, #156]	@ (800fbcc <_printf_i+0x238>)
 800fb30:	e7e9      	b.n	800fb06 <_printf_i+0x172>
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	f023 0320 	bic.w	r3, r3, #32
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	e7f6      	b.n	800fb2a <_printf_i+0x196>
 800fb3c:	4616      	mov	r6, r2
 800fb3e:	e7bd      	b.n	800fabc <_printf_i+0x128>
 800fb40:	6833      	ldr	r3, [r6, #0]
 800fb42:	6825      	ldr	r5, [r4, #0]
 800fb44:	1d18      	adds	r0, r3, #4
 800fb46:	6961      	ldr	r1, [r4, #20]
 800fb48:	6030      	str	r0, [r6, #0]
 800fb4a:	062e      	lsls	r6, r5, #24
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	d501      	bpl.n	800fb54 <_printf_i+0x1c0>
 800fb50:	6019      	str	r1, [r3, #0]
 800fb52:	e002      	b.n	800fb5a <_printf_i+0x1c6>
 800fb54:	0668      	lsls	r0, r5, #25
 800fb56:	d5fb      	bpl.n	800fb50 <_printf_i+0x1bc>
 800fb58:	8019      	strh	r1, [r3, #0]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	4616      	mov	r6, r2
 800fb5e:	6123      	str	r3, [r4, #16]
 800fb60:	e7bc      	b.n	800fadc <_printf_i+0x148>
 800fb62:	6833      	ldr	r3, [r6, #0]
 800fb64:	2100      	movs	r1, #0
 800fb66:	1d1a      	adds	r2, r3, #4
 800fb68:	6032      	str	r2, [r6, #0]
 800fb6a:	681e      	ldr	r6, [r3, #0]
 800fb6c:	6862      	ldr	r2, [r4, #4]
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f000 f9d5 	bl	800ff1e <memchr>
 800fb74:	b108      	cbz	r0, 800fb7a <_printf_i+0x1e6>
 800fb76:	1b80      	subs	r0, r0, r6
 800fb78:	6060      	str	r0, [r4, #4]
 800fb7a:	6863      	ldr	r3, [r4, #4]
 800fb7c:	6123      	str	r3, [r4, #16]
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb84:	e7aa      	b.n	800fadc <_printf_i+0x148>
 800fb86:	6923      	ldr	r3, [r4, #16]
 800fb88:	4632      	mov	r2, r6
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	47d0      	blx	sl
 800fb90:	3001      	adds	r0, #1
 800fb92:	d0ad      	beq.n	800faf0 <_printf_i+0x15c>
 800fb94:	6823      	ldr	r3, [r4, #0]
 800fb96:	079b      	lsls	r3, r3, #30
 800fb98:	d413      	bmi.n	800fbc2 <_printf_i+0x22e>
 800fb9a:	68e0      	ldr	r0, [r4, #12]
 800fb9c:	9b03      	ldr	r3, [sp, #12]
 800fb9e:	4298      	cmp	r0, r3
 800fba0:	bfb8      	it	lt
 800fba2:	4618      	movlt	r0, r3
 800fba4:	e7a6      	b.n	800faf4 <_printf_i+0x160>
 800fba6:	2301      	movs	r3, #1
 800fba8:	4632      	mov	r2, r6
 800fbaa:	4649      	mov	r1, r9
 800fbac:	4640      	mov	r0, r8
 800fbae:	47d0      	blx	sl
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	d09d      	beq.n	800faf0 <_printf_i+0x15c>
 800fbb4:	3501      	adds	r5, #1
 800fbb6:	68e3      	ldr	r3, [r4, #12]
 800fbb8:	9903      	ldr	r1, [sp, #12]
 800fbba:	1a5b      	subs	r3, r3, r1
 800fbbc:	42ab      	cmp	r3, r5
 800fbbe:	dcf2      	bgt.n	800fba6 <_printf_i+0x212>
 800fbc0:	e7eb      	b.n	800fb9a <_printf_i+0x206>
 800fbc2:	2500      	movs	r5, #0
 800fbc4:	f104 0619 	add.w	r6, r4, #25
 800fbc8:	e7f5      	b.n	800fbb6 <_printf_i+0x222>
 800fbca:	bf00      	nop
 800fbcc:	0801236a 	.word	0x0801236a
 800fbd0:	0801237b 	.word	0x0801237b

0800fbd4 <std>:
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	b510      	push	{r4, lr}
 800fbd8:	4604      	mov	r4, r0
 800fbda:	6083      	str	r3, [r0, #8]
 800fbdc:	8181      	strh	r1, [r0, #12]
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6643      	str	r3, [r0, #100]	@ 0x64
 800fbe2:	81c2      	strh	r2, [r0, #14]
 800fbe4:	2208      	movs	r2, #8
 800fbe6:	6183      	str	r3, [r0, #24]
 800fbe8:	e9c0 3300 	strd	r3, r3, [r0]
 800fbec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbf0:	305c      	adds	r0, #92	@ 0x5c
 800fbf2:	f000 f914 	bl	800fe1e <memset>
 800fbf6:	4b0d      	ldr	r3, [pc, #52]	@ (800fc2c <std+0x58>)
 800fbf8:	6224      	str	r4, [r4, #32]
 800fbfa:	6263      	str	r3, [r4, #36]	@ 0x24
 800fbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <std+0x5c>)
 800fbfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fc00:	4b0c      	ldr	r3, [pc, #48]	@ (800fc34 <std+0x60>)
 800fc02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fc04:	4b0c      	ldr	r3, [pc, #48]	@ (800fc38 <std+0x64>)
 800fc06:	6323      	str	r3, [r4, #48]	@ 0x30
 800fc08:	4b0c      	ldr	r3, [pc, #48]	@ (800fc3c <std+0x68>)
 800fc0a:	429c      	cmp	r4, r3
 800fc0c:	d006      	beq.n	800fc1c <std+0x48>
 800fc0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fc12:	4294      	cmp	r4, r2
 800fc14:	d002      	beq.n	800fc1c <std+0x48>
 800fc16:	33d0      	adds	r3, #208	@ 0xd0
 800fc18:	429c      	cmp	r4, r3
 800fc1a:	d105      	bne.n	800fc28 <std+0x54>
 800fc1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc24:	f000 b978 	b.w	800ff18 <__retarget_lock_init_recursive>
 800fc28:	bd10      	pop	{r4, pc}
 800fc2a:	bf00      	nop
 800fc2c:	0800fd99 	.word	0x0800fd99
 800fc30:	0800fdbb 	.word	0x0800fdbb
 800fc34:	0800fdf3 	.word	0x0800fdf3
 800fc38:	0800fe17 	.word	0x0800fe17
 800fc3c:	20005afc 	.word	0x20005afc

0800fc40 <stdio_exit_handler>:
 800fc40:	4a02      	ldr	r2, [pc, #8]	@ (800fc4c <stdio_exit_handler+0xc>)
 800fc42:	4903      	ldr	r1, [pc, #12]	@ (800fc50 <stdio_exit_handler+0x10>)
 800fc44:	4803      	ldr	r0, [pc, #12]	@ (800fc54 <stdio_exit_handler+0x14>)
 800fc46:	f000 b869 	b.w	800fd1c <_fwalk_sglue>
 800fc4a:	bf00      	nop
 800fc4c:	20000034 	.word	0x20000034
 800fc50:	080118c1 	.word	0x080118c1
 800fc54:	20000044 	.word	0x20000044

0800fc58 <cleanup_stdio>:
 800fc58:	6841      	ldr	r1, [r0, #4]
 800fc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc8c <cleanup_stdio+0x34>)
 800fc5c:	4299      	cmp	r1, r3
 800fc5e:	b510      	push	{r4, lr}
 800fc60:	4604      	mov	r4, r0
 800fc62:	d001      	beq.n	800fc68 <cleanup_stdio+0x10>
 800fc64:	f001 fe2c 	bl	80118c0 <_fflush_r>
 800fc68:	68a1      	ldr	r1, [r4, #8]
 800fc6a:	4b09      	ldr	r3, [pc, #36]	@ (800fc90 <cleanup_stdio+0x38>)
 800fc6c:	4299      	cmp	r1, r3
 800fc6e:	d002      	beq.n	800fc76 <cleanup_stdio+0x1e>
 800fc70:	4620      	mov	r0, r4
 800fc72:	f001 fe25 	bl	80118c0 <_fflush_r>
 800fc76:	68e1      	ldr	r1, [r4, #12]
 800fc78:	4b06      	ldr	r3, [pc, #24]	@ (800fc94 <cleanup_stdio+0x3c>)
 800fc7a:	4299      	cmp	r1, r3
 800fc7c:	d004      	beq.n	800fc88 <cleanup_stdio+0x30>
 800fc7e:	4620      	mov	r0, r4
 800fc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc84:	f001 be1c 	b.w	80118c0 <_fflush_r>
 800fc88:	bd10      	pop	{r4, pc}
 800fc8a:	bf00      	nop
 800fc8c:	20005afc 	.word	0x20005afc
 800fc90:	20005b64 	.word	0x20005b64
 800fc94:	20005bcc 	.word	0x20005bcc

0800fc98 <global_stdio_init.part.0>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc8 <global_stdio_init.part.0+0x30>)
 800fc9c:	2104      	movs	r1, #4
 800fc9e:	4c0b      	ldr	r4, [pc, #44]	@ (800fccc <global_stdio_init.part.0+0x34>)
 800fca0:	4a0b      	ldr	r2, [pc, #44]	@ (800fcd0 <global_stdio_init.part.0+0x38>)
 800fca2:	4620      	mov	r0, r4
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f7ff ff94 	bl	800fbd4 <std>
 800fcac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	2109      	movs	r1, #9
 800fcb4:	f7ff ff8e 	bl	800fbd4 <std>
 800fcb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	2112      	movs	r1, #18
 800fcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcc4:	f7ff bf86 	b.w	800fbd4 <std>
 800fcc8:	20005c34 	.word	0x20005c34
 800fccc:	20005afc 	.word	0x20005afc
 800fcd0:	0800fc41 	.word	0x0800fc41

0800fcd4 <__sfp_lock_acquire>:
 800fcd4:	4801      	ldr	r0, [pc, #4]	@ (800fcdc <__sfp_lock_acquire+0x8>)
 800fcd6:	f000 b920 	b.w	800ff1a <__retarget_lock_acquire_recursive>
 800fcda:	bf00      	nop
 800fcdc:	20005c3d 	.word	0x20005c3d

0800fce0 <__sfp_lock_release>:
 800fce0:	4801      	ldr	r0, [pc, #4]	@ (800fce8 <__sfp_lock_release+0x8>)
 800fce2:	f000 b91b 	b.w	800ff1c <__retarget_lock_release_recursive>
 800fce6:	bf00      	nop
 800fce8:	20005c3d 	.word	0x20005c3d

0800fcec <__sinit>:
 800fcec:	b510      	push	{r4, lr}
 800fcee:	4604      	mov	r4, r0
 800fcf0:	f7ff fff0 	bl	800fcd4 <__sfp_lock_acquire>
 800fcf4:	6a23      	ldr	r3, [r4, #32]
 800fcf6:	b11b      	cbz	r3, 800fd00 <__sinit+0x14>
 800fcf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcfc:	f7ff bff0 	b.w	800fce0 <__sfp_lock_release>
 800fd00:	4b04      	ldr	r3, [pc, #16]	@ (800fd14 <__sinit+0x28>)
 800fd02:	6223      	str	r3, [r4, #32]
 800fd04:	4b04      	ldr	r3, [pc, #16]	@ (800fd18 <__sinit+0x2c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1f5      	bne.n	800fcf8 <__sinit+0xc>
 800fd0c:	f7ff ffc4 	bl	800fc98 <global_stdio_init.part.0>
 800fd10:	e7f2      	b.n	800fcf8 <__sinit+0xc>
 800fd12:	bf00      	nop
 800fd14:	0800fc59 	.word	0x0800fc59
 800fd18:	20005c34 	.word	0x20005c34

0800fd1c <_fwalk_sglue>:
 800fd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd20:	4607      	mov	r7, r0
 800fd22:	4688      	mov	r8, r1
 800fd24:	4614      	mov	r4, r2
 800fd26:	2600      	movs	r6, #0
 800fd28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd2c:	f1b9 0901 	subs.w	r9, r9, #1
 800fd30:	d505      	bpl.n	800fd3e <_fwalk_sglue+0x22>
 800fd32:	6824      	ldr	r4, [r4, #0]
 800fd34:	2c00      	cmp	r4, #0
 800fd36:	d1f7      	bne.n	800fd28 <_fwalk_sglue+0xc>
 800fd38:	4630      	mov	r0, r6
 800fd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd3e:	89ab      	ldrh	r3, [r5, #12]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d907      	bls.n	800fd54 <_fwalk_sglue+0x38>
 800fd44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	d003      	beq.n	800fd54 <_fwalk_sglue+0x38>
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	4638      	mov	r0, r7
 800fd50:	47c0      	blx	r8
 800fd52:	4306      	orrs	r6, r0
 800fd54:	3568      	adds	r5, #104	@ 0x68
 800fd56:	e7e9      	b.n	800fd2c <_fwalk_sglue+0x10>

0800fd58 <siprintf>:
 800fd58:	b40e      	push	{r1, r2, r3}
 800fd5a:	b500      	push	{lr}
 800fd5c:	b09c      	sub	sp, #112	@ 0x70
 800fd5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd62:	ab1d      	add	r3, sp, #116	@ 0x74
 800fd64:	9002      	str	r0, [sp, #8]
 800fd66:	9006      	str	r0, [sp, #24]
 800fd68:	9107      	str	r1, [sp, #28]
 800fd6a:	9104      	str	r1, [sp, #16]
 800fd6c:	4808      	ldr	r0, [pc, #32]	@ (800fd90 <siprintf+0x38>)
 800fd6e:	4909      	ldr	r1, [pc, #36]	@ (800fd94 <siprintf+0x3c>)
 800fd70:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd74:	9105      	str	r1, [sp, #20]
 800fd76:	a902      	add	r1, sp, #8
 800fd78:	6800      	ldr	r0, [r0, #0]
 800fd7a:	9301      	str	r3, [sp, #4]
 800fd7c:	f001 fc20 	bl	80115c0 <_svfiprintf_r>
 800fd80:	9b02      	ldr	r3, [sp, #8]
 800fd82:	2200      	movs	r2, #0
 800fd84:	701a      	strb	r2, [r3, #0]
 800fd86:	b01c      	add	sp, #112	@ 0x70
 800fd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd8c:	b003      	add	sp, #12
 800fd8e:	4770      	bx	lr
 800fd90:	20000040 	.word	0x20000040
 800fd94:	ffff0208 	.word	0xffff0208

0800fd98 <__sread>:
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda0:	f000 f86c 	bl	800fe7c <_read_r>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	bfab      	itete	ge
 800fda8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fdaa:	89a3      	ldrhlt	r3, [r4, #12]
 800fdac:	181b      	addge	r3, r3, r0
 800fdae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdb2:	bfac      	ite	ge
 800fdb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdb6:	81a3      	strhlt	r3, [r4, #12]
 800fdb8:	bd10      	pop	{r4, pc}

0800fdba <__swrite>:
 800fdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbe:	461f      	mov	r7, r3
 800fdc0:	898b      	ldrh	r3, [r1, #12]
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	05db      	lsls	r3, r3, #23
 800fdc8:	4616      	mov	r6, r2
 800fdca:	d505      	bpl.n	800fdd8 <__swrite+0x1e>
 800fdcc:	2302      	movs	r3, #2
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd4:	f000 f840 	bl	800fe58 <_lseek_r>
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	4632      	mov	r2, r6
 800fddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fde0:	4628      	mov	r0, r5
 800fde2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fde6:	81a3      	strh	r3, [r4, #12]
 800fde8:	463b      	mov	r3, r7
 800fdea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdee:	f000 b857 	b.w	800fea0 <_write_r>

0800fdf2 <__sseek>:
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdfa:	f000 f82d 	bl	800fe58 <_lseek_r>
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	bf15      	itete	ne
 800fe04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe0e:	81a3      	strheq	r3, [r4, #12]
 800fe10:	bf18      	it	ne
 800fe12:	81a3      	strhne	r3, [r4, #12]
 800fe14:	bd10      	pop	{r4, pc}

0800fe16 <__sclose>:
 800fe16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe1a:	f000 b80d 	b.w	800fe38 <_close_r>

0800fe1e <memset>:
 800fe1e:	4402      	add	r2, r0
 800fe20:	4603      	mov	r3, r0
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d100      	bne.n	800fe28 <memset+0xa>
 800fe26:	4770      	bx	lr
 800fe28:	f803 1b01 	strb.w	r1, [r3], #1
 800fe2c:	e7f9      	b.n	800fe22 <memset+0x4>
	...

0800fe30 <_localeconv_r>:
 800fe30:	4800      	ldr	r0, [pc, #0]	@ (800fe34 <_localeconv_r+0x4>)
 800fe32:	4770      	bx	lr
 800fe34:	20000180 	.word	0x20000180

0800fe38 <_close_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	4d05      	ldr	r5, [pc, #20]	@ (800fe54 <_close_r+0x1c>)
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4608      	mov	r0, r1
 800fe42:	602b      	str	r3, [r5, #0]
 800fe44:	f7f4 fa8c 	bl	8004360 <_close>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	d102      	bne.n	800fe52 <_close_r+0x1a>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	b103      	cbz	r3, 800fe52 <_close_r+0x1a>
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
 800fe54:	20005c38 	.word	0x20005c38

0800fe58 <_lseek_r>:
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	4d06      	ldr	r5, [pc, #24]	@ (800fe78 <_lseek_r+0x20>)
 800fe5e:	4608      	mov	r0, r1
 800fe60:	4611      	mov	r1, r2
 800fe62:	2200      	movs	r2, #0
 800fe64:	602a      	str	r2, [r5, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	f7f4 faa1 	bl	80043ae <_lseek>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d102      	bne.n	800fe76 <_lseek_r+0x1e>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	b103      	cbz	r3, 800fe76 <_lseek_r+0x1e>
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
 800fe78:	20005c38 	.word	0x20005c38

0800fe7c <_read_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4604      	mov	r4, r0
 800fe80:	4d06      	ldr	r5, [pc, #24]	@ (800fe9c <_read_r+0x20>)
 800fe82:	4608      	mov	r0, r1
 800fe84:	4611      	mov	r1, r2
 800fe86:	2200      	movs	r2, #0
 800fe88:	602a      	str	r2, [r5, #0]
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	f7f4 fa2f 	bl	80042ee <_read>
 800fe90:	1c43      	adds	r3, r0, #1
 800fe92:	d102      	bne.n	800fe9a <_read_r+0x1e>
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	b103      	cbz	r3, 800fe9a <_read_r+0x1e>
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	bd38      	pop	{r3, r4, r5, pc}
 800fe9c:	20005c38 	.word	0x20005c38

0800fea0 <_write_r>:
 800fea0:	b538      	push	{r3, r4, r5, lr}
 800fea2:	4604      	mov	r4, r0
 800fea4:	4d06      	ldr	r5, [pc, #24]	@ (800fec0 <_write_r+0x20>)
 800fea6:	4608      	mov	r0, r1
 800fea8:	4611      	mov	r1, r2
 800feaa:	2200      	movs	r2, #0
 800feac:	602a      	str	r2, [r5, #0]
 800feae:	461a      	mov	r2, r3
 800feb0:	f7f4 fa3a 	bl	8004328 <_write>
 800feb4:	1c43      	adds	r3, r0, #1
 800feb6:	d102      	bne.n	800febe <_write_r+0x1e>
 800feb8:	682b      	ldr	r3, [r5, #0]
 800feba:	b103      	cbz	r3, 800febe <_write_r+0x1e>
 800febc:	6023      	str	r3, [r4, #0]
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	20005c38 	.word	0x20005c38

0800fec4 <__errno>:
 800fec4:	4b01      	ldr	r3, [pc, #4]	@ (800fecc <__errno+0x8>)
 800fec6:	6818      	ldr	r0, [r3, #0]
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	20000040 	.word	0x20000040

0800fed0 <__libc_init_array>:
 800fed0:	b570      	push	{r4, r5, r6, lr}
 800fed2:	4d0d      	ldr	r5, [pc, #52]	@ (800ff08 <__libc_init_array+0x38>)
 800fed4:	2600      	movs	r6, #0
 800fed6:	4c0d      	ldr	r4, [pc, #52]	@ (800ff0c <__libc_init_array+0x3c>)
 800fed8:	1b64      	subs	r4, r4, r5
 800feda:	10a4      	asrs	r4, r4, #2
 800fedc:	42a6      	cmp	r6, r4
 800fede:	d109      	bne.n	800fef4 <__libc_init_array+0x24>
 800fee0:	4d0b      	ldr	r5, [pc, #44]	@ (800ff10 <__libc_init_array+0x40>)
 800fee2:	2600      	movs	r6, #0
 800fee4:	4c0b      	ldr	r4, [pc, #44]	@ (800ff14 <__libc_init_array+0x44>)
 800fee6:	f002 f985 	bl	80121f4 <_init>
 800feea:	1b64      	subs	r4, r4, r5
 800feec:	10a4      	asrs	r4, r4, #2
 800feee:	42a6      	cmp	r6, r4
 800fef0:	d105      	bne.n	800fefe <__libc_init_array+0x2e>
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fef8:	3601      	adds	r6, #1
 800fefa:	4798      	blx	r3
 800fefc:	e7ee      	b.n	800fedc <__libc_init_array+0xc>
 800fefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff02:	3601      	adds	r6, #1
 800ff04:	4798      	blx	r3
 800ff06:	e7f2      	b.n	800feee <__libc_init_array+0x1e>
 800ff08:	080126d0 	.word	0x080126d0
 800ff0c:	080126d0 	.word	0x080126d0
 800ff10:	080126d0 	.word	0x080126d0
 800ff14:	080126d4 	.word	0x080126d4

0800ff18 <__retarget_lock_init_recursive>:
 800ff18:	4770      	bx	lr

0800ff1a <__retarget_lock_acquire_recursive>:
 800ff1a:	4770      	bx	lr

0800ff1c <__retarget_lock_release_recursive>:
 800ff1c:	4770      	bx	lr

0800ff1e <memchr>:
 800ff1e:	b2c9      	uxtb	r1, r1
 800ff20:	4603      	mov	r3, r0
 800ff22:	4402      	add	r2, r0
 800ff24:	b510      	push	{r4, lr}
 800ff26:	4293      	cmp	r3, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	d101      	bne.n	800ff30 <memchr+0x12>
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e003      	b.n	800ff38 <memchr+0x1a>
 800ff30:	7804      	ldrb	r4, [r0, #0]
 800ff32:	3301      	adds	r3, #1
 800ff34:	428c      	cmp	r4, r1
 800ff36:	d1f6      	bne.n	800ff26 <memchr+0x8>
 800ff38:	bd10      	pop	{r4, pc}

0800ff3a <memcpy>:
 800ff3a:	440a      	add	r2, r1
 800ff3c:	1e43      	subs	r3, r0, #1
 800ff3e:	4291      	cmp	r1, r2
 800ff40:	d100      	bne.n	800ff44 <memcpy+0xa>
 800ff42:	4770      	bx	lr
 800ff44:	b510      	push	{r4, lr}
 800ff46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff4a:	4291      	cmp	r1, r2
 800ff4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff50:	d1f9      	bne.n	800ff46 <memcpy+0xc>
 800ff52:	bd10      	pop	{r4, pc}

0800ff54 <quorem>:
 800ff54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff58:	6903      	ldr	r3, [r0, #16]
 800ff5a:	4607      	mov	r7, r0
 800ff5c:	690c      	ldr	r4, [r1, #16]
 800ff5e:	42a3      	cmp	r3, r4
 800ff60:	f2c0 8083 	blt.w	801006a <quorem+0x116>
 800ff64:	3c01      	subs	r4, #1
 800ff66:	f100 0514 	add.w	r5, r0, #20
 800ff6a:	f101 0814 	add.w	r8, r1, #20
 800ff6e:	00a3      	lsls	r3, r4, #2
 800ff70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ff84:	3301      	adds	r3, #1
 800ff86:	429a      	cmp	r2, r3
 800ff88:	fbb2 f6f3 	udiv	r6, r2, r3
 800ff8c:	d331      	bcc.n	800fff2 <quorem+0x9e>
 800ff8e:	f04f 0a00 	mov.w	sl, #0
 800ff92:	46c4      	mov	ip, r8
 800ff94:	46ae      	mov	lr, r5
 800ff96:	46d3      	mov	fp, sl
 800ff98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff9c:	b298      	uxth	r0, r3
 800ff9e:	45e1      	cmp	r9, ip
 800ffa0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ffa4:	fb06 a000 	mla	r0, r6, r0, sl
 800ffa8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ffac:	b280      	uxth	r0, r0
 800ffae:	fb06 2303 	mla	r3, r6, r3, r2
 800ffb2:	f8de 2000 	ldr.w	r2, [lr]
 800ffb6:	b292      	uxth	r2, r2
 800ffb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ffbc:	eba2 0200 	sub.w	r2, r2, r0
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	f8de 0000 	ldr.w	r0, [lr]
 800ffc6:	445a      	add	r2, fp
 800ffc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ffcc:	b292      	uxth	r2, r2
 800ffce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ffd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ffd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ffda:	f84e 2b04 	str.w	r2, [lr], #4
 800ffde:	d2db      	bcs.n	800ff98 <quorem+0x44>
 800ffe0:	9b00      	ldr	r3, [sp, #0]
 800ffe2:	58eb      	ldr	r3, [r5, r3]
 800ffe4:	b92b      	cbnz	r3, 800fff2 <quorem+0x9e>
 800ffe6:	9b01      	ldr	r3, [sp, #4]
 800ffe8:	3b04      	subs	r3, #4
 800ffea:	429d      	cmp	r5, r3
 800ffec:	461a      	mov	r2, r3
 800ffee:	d330      	bcc.n	8010052 <quorem+0xfe>
 800fff0:	613c      	str	r4, [r7, #16]
 800fff2:	4638      	mov	r0, r7
 800fff4:	f001 f97c 	bl	80112f0 <__mcmp>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	db26      	blt.n	801004a <quorem+0xf6>
 800fffc:	4629      	mov	r1, r5
 800fffe:	2000      	movs	r0, #0
 8010000:	f858 2b04 	ldr.w	r2, [r8], #4
 8010004:	f8d1 c000 	ldr.w	ip, [r1]
 8010008:	fa1f fe82 	uxth.w	lr, r2
 801000c:	45c1      	cmp	r9, r8
 801000e:	fa1f f38c 	uxth.w	r3, ip
 8010012:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010016:	eba3 030e 	sub.w	r3, r3, lr
 801001a:	4403      	add	r3, r0
 801001c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010020:	b29b      	uxth	r3, r3
 8010022:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801002a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801002e:	f841 3b04 	str.w	r3, [r1], #4
 8010032:	d2e5      	bcs.n	8010000 <quorem+0xac>
 8010034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010038:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801003c:	b922      	cbnz	r2, 8010048 <quorem+0xf4>
 801003e:	3b04      	subs	r3, #4
 8010040:	429d      	cmp	r5, r3
 8010042:	461a      	mov	r2, r3
 8010044:	d30b      	bcc.n	801005e <quorem+0x10a>
 8010046:	613c      	str	r4, [r7, #16]
 8010048:	3601      	adds	r6, #1
 801004a:	4630      	mov	r0, r6
 801004c:	b003      	add	sp, #12
 801004e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010052:	6812      	ldr	r2, [r2, #0]
 8010054:	3b04      	subs	r3, #4
 8010056:	2a00      	cmp	r2, #0
 8010058:	d1ca      	bne.n	800fff0 <quorem+0x9c>
 801005a:	3c01      	subs	r4, #1
 801005c:	e7c5      	b.n	800ffea <quorem+0x96>
 801005e:	6812      	ldr	r2, [r2, #0]
 8010060:	3b04      	subs	r3, #4
 8010062:	2a00      	cmp	r2, #0
 8010064:	d1ef      	bne.n	8010046 <quorem+0xf2>
 8010066:	3c01      	subs	r4, #1
 8010068:	e7ea      	b.n	8010040 <quorem+0xec>
 801006a:	2000      	movs	r0, #0
 801006c:	e7ee      	b.n	801004c <quorem+0xf8>
	...

08010070 <_dtoa_r>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	69c7      	ldr	r7, [r0, #28]
 8010076:	b099      	sub	sp, #100	@ 0x64
 8010078:	4683      	mov	fp, r0
 801007a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801007c:	9109      	str	r1, [sp, #36]	@ 0x24
 801007e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010080:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010082:	ec55 4b10 	vmov	r4, r5, d0
 8010086:	ed8d 0b02 	vstr	d0, [sp, #8]
 801008a:	b97f      	cbnz	r7, 80100ac <_dtoa_r+0x3c>
 801008c:	2010      	movs	r0, #16
 801008e:	f000 fdfd 	bl	8010c8c <malloc>
 8010092:	4602      	mov	r2, r0
 8010094:	f8cb 001c 	str.w	r0, [fp, #28]
 8010098:	b920      	cbnz	r0, 80100a4 <_dtoa_r+0x34>
 801009a:	4ba7      	ldr	r3, [pc, #668]	@ (8010338 <_dtoa_r+0x2c8>)
 801009c:	21ef      	movs	r1, #239	@ 0xef
 801009e:	48a7      	ldr	r0, [pc, #668]	@ (801033c <_dtoa_r+0x2cc>)
 80100a0:	f001 fc60 	bl	8011964 <__assert_func>
 80100a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80100a8:	6007      	str	r7, [r0, #0]
 80100aa:	60c7      	str	r7, [r0, #12]
 80100ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80100b0:	6819      	ldr	r1, [r3, #0]
 80100b2:	b159      	cbz	r1, 80100cc <_dtoa_r+0x5c>
 80100b4:	685a      	ldr	r2, [r3, #4]
 80100b6:	2301      	movs	r3, #1
 80100b8:	4658      	mov	r0, fp
 80100ba:	4093      	lsls	r3, r2
 80100bc:	604a      	str	r2, [r1, #4]
 80100be:	608b      	str	r3, [r1, #8]
 80100c0:	f000 feda 	bl	8010e78 <_Bfree>
 80100c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80100c8:	2200      	movs	r2, #0
 80100ca:	601a      	str	r2, [r3, #0]
 80100cc:	1e2b      	subs	r3, r5, #0
 80100ce:	bfb7      	itett	lt
 80100d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80100d4:	2300      	movge	r3, #0
 80100d6:	2201      	movlt	r2, #1
 80100d8:	9303      	strlt	r3, [sp, #12]
 80100da:	bfa8      	it	ge
 80100dc:	6033      	strge	r3, [r6, #0]
 80100de:	9f03      	ldr	r7, [sp, #12]
 80100e0:	4b97      	ldr	r3, [pc, #604]	@ (8010340 <_dtoa_r+0x2d0>)
 80100e2:	bfb8      	it	lt
 80100e4:	6032      	strlt	r2, [r6, #0]
 80100e6:	43bb      	bics	r3, r7
 80100e8:	d112      	bne.n	8010110 <_dtoa_r+0xa0>
 80100ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80100ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80100f0:	6013      	str	r3, [r2, #0]
 80100f2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100f6:	4323      	orrs	r3, r4
 80100f8:	f000 854c 	beq.w	8010b94 <_dtoa_r+0xb24>
 80100fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100fe:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010354 <_dtoa_r+0x2e4>
 8010102:	2b00      	cmp	r3, #0
 8010104:	f000 854e 	beq.w	8010ba4 <_dtoa_r+0xb34>
 8010108:	f10a 0303 	add.w	r3, sl, #3
 801010c:	f000 bd48 	b.w	8010ba0 <_dtoa_r+0xb30>
 8010110:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010114:	2200      	movs	r2, #0
 8010116:	2300      	movs	r3, #0
 8010118:	ec51 0b17 	vmov	r0, r1, d7
 801011c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010120:	f7f0 fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010124:	4680      	mov	r8, r0
 8010126:	b158      	cbz	r0, 8010140 <_dtoa_r+0xd0>
 8010128:	2301      	movs	r3, #1
 801012a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801012c:	6013      	str	r3, [r2, #0]
 801012e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010130:	b113      	cbz	r3, 8010138 <_dtoa_r+0xc8>
 8010132:	4b84      	ldr	r3, [pc, #528]	@ (8010344 <_dtoa_r+0x2d4>)
 8010134:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8010358 <_dtoa_r+0x2e8>
 801013c:	f000 bd32 	b.w	8010ba4 <_dtoa_r+0xb34>
 8010140:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010144:	aa16      	add	r2, sp, #88	@ 0x58
 8010146:	a917      	add	r1, sp, #92	@ 0x5c
 8010148:	4658      	mov	r0, fp
 801014a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801014e:	f001 f983 	bl	8011458 <__d2b>
 8010152:	4681      	mov	r9, r0
 8010154:	2e00      	cmp	r6, #0
 8010156:	d075      	beq.n	8010244 <_dtoa_r+0x1d4>
 8010158:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801015a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801015e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010166:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801016a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801016e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010172:	4619      	mov	r1, r3
 8010174:	2200      	movs	r2, #0
 8010176:	4b74      	ldr	r3, [pc, #464]	@ (8010348 <_dtoa_r+0x2d8>)
 8010178:	f7f0 f896 	bl	80002a8 <__aeabi_dsub>
 801017c:	a368      	add	r3, pc, #416	@ (adr r3, 8010320 <_dtoa_r+0x2b0>)
 801017e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010182:	f7f0 fa49 	bl	8000618 <__aeabi_dmul>
 8010186:	a368      	add	r3, pc, #416	@ (adr r3, 8010328 <_dtoa_r+0x2b8>)
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	f7f0 f88e 	bl	80002ac <__adddf3>
 8010190:	4604      	mov	r4, r0
 8010192:	460d      	mov	r5, r1
 8010194:	4630      	mov	r0, r6
 8010196:	f7f0 f9d5 	bl	8000544 <__aeabi_i2d>
 801019a:	a365      	add	r3, pc, #404	@ (adr r3, 8010330 <_dtoa_r+0x2c0>)
 801019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a0:	f7f0 fa3a 	bl	8000618 <__aeabi_dmul>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	4620      	mov	r0, r4
 80101aa:	4629      	mov	r1, r5
 80101ac:	f7f0 f87e 	bl	80002ac <__adddf3>
 80101b0:	4604      	mov	r4, r0
 80101b2:	460d      	mov	r5, r1
 80101b4:	f7f0 fce0 	bl	8000b78 <__aeabi_d2iz>
 80101b8:	2200      	movs	r2, #0
 80101ba:	4607      	mov	r7, r0
 80101bc:	2300      	movs	r3, #0
 80101be:	4620      	mov	r0, r4
 80101c0:	4629      	mov	r1, r5
 80101c2:	f7f0 fc9b 	bl	8000afc <__aeabi_dcmplt>
 80101c6:	b140      	cbz	r0, 80101da <_dtoa_r+0x16a>
 80101c8:	4638      	mov	r0, r7
 80101ca:	f7f0 f9bb 	bl	8000544 <__aeabi_i2d>
 80101ce:	4622      	mov	r2, r4
 80101d0:	462b      	mov	r3, r5
 80101d2:	f7f0 fc89 	bl	8000ae8 <__aeabi_dcmpeq>
 80101d6:	b900      	cbnz	r0, 80101da <_dtoa_r+0x16a>
 80101d8:	3f01      	subs	r7, #1
 80101da:	2f16      	cmp	r7, #22
 80101dc:	d851      	bhi.n	8010282 <_dtoa_r+0x212>
 80101de:	4b5b      	ldr	r3, [pc, #364]	@ (801034c <_dtoa_r+0x2dc>)
 80101e0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80101e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	f7f0 fc86 	bl	8000afc <__aeabi_dcmplt>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	d048      	beq.n	8010286 <_dtoa_r+0x216>
 80101f4:	3f01      	subs	r7, #1
 80101f6:	2300      	movs	r3, #0
 80101f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80101fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80101fc:	1b9b      	subs	r3, r3, r6
 80101fe:	1e5a      	subs	r2, r3, #1
 8010200:	bf46      	itte	mi
 8010202:	f1c3 0801 	rsbmi	r8, r3, #1
 8010206:	2300      	movmi	r3, #0
 8010208:	f04f 0800 	movpl.w	r8, #0
 801020c:	9208      	str	r2, [sp, #32]
 801020e:	bf48      	it	mi
 8010210:	9308      	strmi	r3, [sp, #32]
 8010212:	2f00      	cmp	r7, #0
 8010214:	db39      	blt.n	801028a <_dtoa_r+0x21a>
 8010216:	9b08      	ldr	r3, [sp, #32]
 8010218:	970f      	str	r7, [sp, #60]	@ 0x3c
 801021a:	443b      	add	r3, r7
 801021c:	9308      	str	r3, [sp, #32]
 801021e:	2300      	movs	r3, #0
 8010220:	930a      	str	r3, [sp, #40]	@ 0x28
 8010222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010224:	2b09      	cmp	r3, #9
 8010226:	d864      	bhi.n	80102f2 <_dtoa_r+0x282>
 8010228:	2b05      	cmp	r3, #5
 801022a:	bfc5      	ittet	gt
 801022c:	3b04      	subgt	r3, #4
 801022e:	2400      	movgt	r4, #0
 8010230:	2401      	movle	r4, #1
 8010232:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010236:	3b02      	subs	r3, #2
 8010238:	2b03      	cmp	r3, #3
 801023a:	d865      	bhi.n	8010308 <_dtoa_r+0x298>
 801023c:	e8df f003 	tbb	[pc, r3]
 8010240:	5737392c 	.word	0x5737392c
 8010244:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010248:	441e      	add	r6, r3
 801024a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801024e:	2b20      	cmp	r3, #32
 8010250:	bfc9      	itett	gt
 8010252:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010256:	f1c3 0320 	rsble	r3, r3, #32
 801025a:	409f      	lslgt	r7, r3
 801025c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010260:	bfd8      	it	le
 8010262:	fa04 f003 	lslle.w	r0, r4, r3
 8010266:	f106 36ff 	add.w	r6, r6, #4294967295
 801026a:	bfc4      	itt	gt
 801026c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010270:	ea47 0003 	orrgt.w	r0, r7, r3
 8010274:	f7f0 f956 	bl	8000524 <__aeabi_ui2d>
 8010278:	2201      	movs	r2, #1
 801027a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801027e:	9214      	str	r2, [sp, #80]	@ 0x50
 8010280:	e777      	b.n	8010172 <_dtoa_r+0x102>
 8010282:	2301      	movs	r3, #1
 8010284:	e7b8      	b.n	80101f8 <_dtoa_r+0x188>
 8010286:	9012      	str	r0, [sp, #72]	@ 0x48
 8010288:	e7b7      	b.n	80101fa <_dtoa_r+0x18a>
 801028a:	427b      	negs	r3, r7
 801028c:	eba8 0807 	sub.w	r8, r8, r7
 8010290:	930a      	str	r3, [sp, #40]	@ 0x28
 8010292:	2300      	movs	r3, #0
 8010294:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010296:	e7c4      	b.n	8010222 <_dtoa_r+0x1b2>
 8010298:	2300      	movs	r3, #0
 801029a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801029c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801029e:	2b00      	cmp	r3, #0
 80102a0:	dc35      	bgt.n	801030e <_dtoa_r+0x29e>
 80102a2:	2301      	movs	r3, #1
 80102a4:	461a      	mov	r2, r3
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	9307      	str	r3, [sp, #28]
 80102aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80102ac:	e00b      	b.n	80102c6 <_dtoa_r+0x256>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e7f3      	b.n	801029a <_dtoa_r+0x22a>
 80102b2:	2300      	movs	r3, #0
 80102b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102b8:	18fb      	adds	r3, r7, r3
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	3301      	adds	r3, #1
 80102be:	2b01      	cmp	r3, #1
 80102c0:	9307      	str	r3, [sp, #28]
 80102c2:	bfb8      	it	lt
 80102c4:	2301      	movlt	r3, #1
 80102c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80102ca:	2100      	movs	r1, #0
 80102cc:	2204      	movs	r2, #4
 80102ce:	f102 0514 	add.w	r5, r2, #20
 80102d2:	429d      	cmp	r5, r3
 80102d4:	d91f      	bls.n	8010316 <_dtoa_r+0x2a6>
 80102d6:	6041      	str	r1, [r0, #4]
 80102d8:	4658      	mov	r0, fp
 80102da:	f000 fd8d 	bl	8010df8 <_Balloc>
 80102de:	4682      	mov	sl, r0
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d13b      	bne.n	801035c <_dtoa_r+0x2ec>
 80102e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010350 <_dtoa_r+0x2e0>)
 80102e6:	4602      	mov	r2, r0
 80102e8:	f240 11af 	movw	r1, #431	@ 0x1af
 80102ec:	e6d7      	b.n	801009e <_dtoa_r+0x2e>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e7e0      	b.n	80102b4 <_dtoa_r+0x244>
 80102f2:	2401      	movs	r4, #1
 80102f4:	2300      	movs	r3, #0
 80102f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80102f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80102fa:	f04f 33ff 	mov.w	r3, #4294967295
 80102fe:	2200      	movs	r2, #0
 8010300:	9300      	str	r3, [sp, #0]
 8010302:	9307      	str	r3, [sp, #28]
 8010304:	2312      	movs	r3, #18
 8010306:	e7d0      	b.n	80102aa <_dtoa_r+0x23a>
 8010308:	2301      	movs	r3, #1
 801030a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801030c:	e7f5      	b.n	80102fa <_dtoa_r+0x28a>
 801030e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	9307      	str	r3, [sp, #28]
 8010314:	e7d7      	b.n	80102c6 <_dtoa_r+0x256>
 8010316:	3101      	adds	r1, #1
 8010318:	0052      	lsls	r2, r2, #1
 801031a:	e7d8      	b.n	80102ce <_dtoa_r+0x25e>
 801031c:	f3af 8000 	nop.w
 8010320:	636f4361 	.word	0x636f4361
 8010324:	3fd287a7 	.word	0x3fd287a7
 8010328:	8b60c8b3 	.word	0x8b60c8b3
 801032c:	3fc68a28 	.word	0x3fc68a28
 8010330:	509f79fb 	.word	0x509f79fb
 8010334:	3fd34413 	.word	0x3fd34413
 8010338:	08012399 	.word	0x08012399
 801033c:	080123b0 	.word	0x080123b0
 8010340:	7ff00000 	.word	0x7ff00000
 8010344:	08012369 	.word	0x08012369
 8010348:	3ff80000 	.word	0x3ff80000
 801034c:	080124a8 	.word	0x080124a8
 8010350:	08012408 	.word	0x08012408
 8010354:	08012395 	.word	0x08012395
 8010358:	08012368 	.word	0x08012368
 801035c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010360:	6018      	str	r0, [r3, #0]
 8010362:	9b07      	ldr	r3, [sp, #28]
 8010364:	2b0e      	cmp	r3, #14
 8010366:	f200 80a4 	bhi.w	80104b2 <_dtoa_r+0x442>
 801036a:	2c00      	cmp	r4, #0
 801036c:	f000 80a1 	beq.w	80104b2 <_dtoa_r+0x442>
 8010370:	2f00      	cmp	r7, #0
 8010372:	dd33      	ble.n	80103dc <_dtoa_r+0x36c>
 8010374:	f007 020f 	and.w	r2, r7, #15
 8010378:	4bac      	ldr	r3, [pc, #688]	@ (801062c <_dtoa_r+0x5bc>)
 801037a:	05f8      	lsls	r0, r7, #23
 801037c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010384:	ed93 7b00 	vldr	d7, [r3]
 8010388:	ed8d 7b04 	vstr	d7, [sp, #16]
 801038c:	d516      	bpl.n	80103bc <_dtoa_r+0x34c>
 801038e:	4ba8      	ldr	r3, [pc, #672]	@ (8010630 <_dtoa_r+0x5c0>)
 8010390:	f004 040f 	and.w	r4, r4, #15
 8010394:	2603      	movs	r6, #3
 8010396:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801039a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801039e:	f7f0 fa65 	bl	800086c <__aeabi_ddiv>
 80103a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103a6:	4da2      	ldr	r5, [pc, #648]	@ (8010630 <_dtoa_r+0x5c0>)
 80103a8:	b954      	cbnz	r4, 80103c0 <_dtoa_r+0x350>
 80103aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103b2:	f7f0 fa5b 	bl	800086c <__aeabi_ddiv>
 80103b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103ba:	e028      	b.n	801040e <_dtoa_r+0x39e>
 80103bc:	2602      	movs	r6, #2
 80103be:	e7f2      	b.n	80103a6 <_dtoa_r+0x336>
 80103c0:	07e1      	lsls	r1, r4, #31
 80103c2:	d508      	bpl.n	80103d6 <_dtoa_r+0x366>
 80103c4:	3601      	adds	r6, #1
 80103c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103ce:	f7f0 f923 	bl	8000618 <__aeabi_dmul>
 80103d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103d6:	1064      	asrs	r4, r4, #1
 80103d8:	3508      	adds	r5, #8
 80103da:	e7e5      	b.n	80103a8 <_dtoa_r+0x338>
 80103dc:	f000 80d2 	beq.w	8010584 <_dtoa_r+0x514>
 80103e0:	427c      	negs	r4, r7
 80103e2:	4b92      	ldr	r3, [pc, #584]	@ (801062c <_dtoa_r+0x5bc>)
 80103e4:	4d92      	ldr	r5, [pc, #584]	@ (8010630 <_dtoa_r+0x5c0>)
 80103e6:	2602      	movs	r6, #2
 80103e8:	f004 020f 	and.w	r2, r4, #15
 80103ec:	1124      	asrs	r4, r4, #4
 80103ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fa:	f7f0 f90d 	bl	8000618 <__aeabi_dmul>
 80103fe:	2300      	movs	r3, #0
 8010400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010404:	2c00      	cmp	r4, #0
 8010406:	f040 80b2 	bne.w	801056e <_dtoa_r+0x4fe>
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1d3      	bne.n	80103b6 <_dtoa_r+0x346>
 801040e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010410:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	f000 80b7 	beq.w	8010588 <_dtoa_r+0x518>
 801041a:	2200      	movs	r2, #0
 801041c:	4b85      	ldr	r3, [pc, #532]	@ (8010634 <_dtoa_r+0x5c4>)
 801041e:	4620      	mov	r0, r4
 8010420:	4629      	mov	r1, r5
 8010422:	f7f0 fb6b 	bl	8000afc <__aeabi_dcmplt>
 8010426:	2800      	cmp	r0, #0
 8010428:	f000 80ae 	beq.w	8010588 <_dtoa_r+0x518>
 801042c:	9b07      	ldr	r3, [sp, #28]
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 80aa 	beq.w	8010588 <_dtoa_r+0x518>
 8010434:	9b00      	ldr	r3, [sp, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	dd37      	ble.n	80104aa <_dtoa_r+0x43a>
 801043a:	1e7b      	subs	r3, r7, #1
 801043c:	4620      	mov	r0, r4
 801043e:	2200      	movs	r2, #0
 8010440:	4629      	mov	r1, r5
 8010442:	9304      	str	r3, [sp, #16]
 8010444:	3601      	adds	r6, #1
 8010446:	4b7c      	ldr	r3, [pc, #496]	@ (8010638 <_dtoa_r+0x5c8>)
 8010448:	f7f0 f8e6 	bl	8000618 <__aeabi_dmul>
 801044c:	9c00      	ldr	r4, [sp, #0]
 801044e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010452:	4630      	mov	r0, r6
 8010454:	f7f0 f876 	bl	8000544 <__aeabi_i2d>
 8010458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801045c:	f7f0 f8dc 	bl	8000618 <__aeabi_dmul>
 8010460:	2200      	movs	r2, #0
 8010462:	4b76      	ldr	r3, [pc, #472]	@ (801063c <_dtoa_r+0x5cc>)
 8010464:	f7ef ff22 	bl	80002ac <__adddf3>
 8010468:	4605      	mov	r5, r0
 801046a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801046e:	2c00      	cmp	r4, #0
 8010470:	f040 808d 	bne.w	801058e <_dtoa_r+0x51e>
 8010474:	2200      	movs	r2, #0
 8010476:	4b72      	ldr	r3, [pc, #456]	@ (8010640 <_dtoa_r+0x5d0>)
 8010478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801047c:	f7ef ff14 	bl	80002a8 <__aeabi_dsub>
 8010480:	4602      	mov	r2, r0
 8010482:	460b      	mov	r3, r1
 8010484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010488:	462a      	mov	r2, r5
 801048a:	4633      	mov	r3, r6
 801048c:	f7f0 fb54 	bl	8000b38 <__aeabi_dcmpgt>
 8010490:	2800      	cmp	r0, #0
 8010492:	f040 828b 	bne.w	80109ac <_dtoa_r+0x93c>
 8010496:	462a      	mov	r2, r5
 8010498:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801049c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104a0:	f7f0 fb2c 	bl	8000afc <__aeabi_dcmplt>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	f040 8128 	bne.w	80106fa <_dtoa_r+0x68a>
 80104aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80104ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80104b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f2c0 815a 	blt.w	801076e <_dtoa_r+0x6fe>
 80104ba:	2f0e      	cmp	r7, #14
 80104bc:	f300 8157 	bgt.w	801076e <_dtoa_r+0x6fe>
 80104c0:	4b5a      	ldr	r3, [pc, #360]	@ (801062c <_dtoa_r+0x5bc>)
 80104c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80104c6:	ed93 7b00 	vldr	d7, [r3]
 80104ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	ed8d 7b00 	vstr	d7, [sp]
 80104d2:	da03      	bge.n	80104dc <_dtoa_r+0x46c>
 80104d4:	9b07      	ldr	r3, [sp, #28]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f340 8101 	ble.w	80106de <_dtoa_r+0x66e>
 80104dc:	4656      	mov	r6, sl
 80104de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80104e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e6:	4620      	mov	r0, r4
 80104e8:	4629      	mov	r1, r5
 80104ea:	f7f0 f9bf 	bl	800086c <__aeabi_ddiv>
 80104ee:	f7f0 fb43 	bl	8000b78 <__aeabi_d2iz>
 80104f2:	4680      	mov	r8, r0
 80104f4:	f7f0 f826 	bl	8000544 <__aeabi_i2d>
 80104f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104fc:	f7f0 f88c 	bl	8000618 <__aeabi_dmul>
 8010500:	4602      	mov	r2, r0
 8010502:	4620      	mov	r0, r4
 8010504:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010508:	460b      	mov	r3, r1
 801050a:	4629      	mov	r1, r5
 801050c:	f7ef fecc 	bl	80002a8 <__aeabi_dsub>
 8010510:	9d07      	ldr	r5, [sp, #28]
 8010512:	f806 4b01 	strb.w	r4, [r6], #1
 8010516:	eba6 040a 	sub.w	r4, r6, sl
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	42a5      	cmp	r5, r4
 8010520:	f040 8117 	bne.w	8010752 <_dtoa_r+0x6e2>
 8010524:	f7ef fec2 	bl	80002ac <__adddf3>
 8010528:	4604      	mov	r4, r0
 801052a:	460d      	mov	r5, r1
 801052c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010530:	f7f0 fb02 	bl	8000b38 <__aeabi_dcmpgt>
 8010534:	2800      	cmp	r0, #0
 8010536:	f040 80f9 	bne.w	801072c <_dtoa_r+0x6bc>
 801053a:	4620      	mov	r0, r4
 801053c:	4629      	mov	r1, r5
 801053e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010542:	f7f0 fad1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010546:	b118      	cbz	r0, 8010550 <_dtoa_r+0x4e0>
 8010548:	f018 0f01 	tst.w	r8, #1
 801054c:	f040 80ee 	bne.w	801072c <_dtoa_r+0x6bc>
 8010550:	4649      	mov	r1, r9
 8010552:	4658      	mov	r0, fp
 8010554:	f000 fc90 	bl	8010e78 <_Bfree>
 8010558:	2300      	movs	r3, #0
 801055a:	3701      	adds	r7, #1
 801055c:	7033      	strb	r3, [r6, #0]
 801055e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010560:	601f      	str	r7, [r3, #0]
 8010562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010564:	2b00      	cmp	r3, #0
 8010566:	f000 831d 	beq.w	8010ba4 <_dtoa_r+0xb34>
 801056a:	601e      	str	r6, [r3, #0]
 801056c:	e31a      	b.n	8010ba4 <_dtoa_r+0xb34>
 801056e:	07e2      	lsls	r2, r4, #31
 8010570:	d505      	bpl.n	801057e <_dtoa_r+0x50e>
 8010572:	3601      	adds	r6, #1
 8010574:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010578:	f7f0 f84e 	bl	8000618 <__aeabi_dmul>
 801057c:	2301      	movs	r3, #1
 801057e:	1064      	asrs	r4, r4, #1
 8010580:	3508      	adds	r5, #8
 8010582:	e73f      	b.n	8010404 <_dtoa_r+0x394>
 8010584:	2602      	movs	r6, #2
 8010586:	e742      	b.n	801040e <_dtoa_r+0x39e>
 8010588:	9c07      	ldr	r4, [sp, #28]
 801058a:	9704      	str	r7, [sp, #16]
 801058c:	e761      	b.n	8010452 <_dtoa_r+0x3e2>
 801058e:	4b27      	ldr	r3, [pc, #156]	@ (801062c <_dtoa_r+0x5bc>)
 8010590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010596:	4454      	add	r4, sl
 8010598:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801059c:	2900      	cmp	r1, #0
 801059e:	d053      	beq.n	8010648 <_dtoa_r+0x5d8>
 80105a0:	2000      	movs	r0, #0
 80105a2:	4928      	ldr	r1, [pc, #160]	@ (8010644 <_dtoa_r+0x5d4>)
 80105a4:	f7f0 f962 	bl	800086c <__aeabi_ddiv>
 80105a8:	4633      	mov	r3, r6
 80105aa:	4656      	mov	r6, sl
 80105ac:	462a      	mov	r2, r5
 80105ae:	f7ef fe7b 	bl	80002a8 <__aeabi_dsub>
 80105b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80105b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ba:	f7f0 fadd 	bl	8000b78 <__aeabi_d2iz>
 80105be:	4605      	mov	r5, r0
 80105c0:	f7ef ffc0 	bl	8000544 <__aeabi_i2d>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	3530      	adds	r5, #48	@ 0x30
 80105ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ce:	f7ef fe6b 	bl	80002a8 <__aeabi_dsub>
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	f806 5b01 	strb.w	r5, [r6], #1
 80105da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80105e2:	f7f0 fa8b 	bl	8000afc <__aeabi_dcmplt>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d171      	bne.n	80106ce <_dtoa_r+0x65e>
 80105ea:	2000      	movs	r0, #0
 80105ec:	4911      	ldr	r1, [pc, #68]	@ (8010634 <_dtoa_r+0x5c4>)
 80105ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105f2:	f7ef fe59 	bl	80002a8 <__aeabi_dsub>
 80105f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80105fa:	f7f0 fa7f 	bl	8000afc <__aeabi_dcmplt>
 80105fe:	2800      	cmp	r0, #0
 8010600:	f040 8095 	bne.w	801072e <_dtoa_r+0x6be>
 8010604:	42a6      	cmp	r6, r4
 8010606:	f43f af50 	beq.w	80104aa <_dtoa_r+0x43a>
 801060a:	2200      	movs	r2, #0
 801060c:	4b0a      	ldr	r3, [pc, #40]	@ (8010638 <_dtoa_r+0x5c8>)
 801060e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010612:	f7f0 f801 	bl	8000618 <__aeabi_dmul>
 8010616:	2200      	movs	r2, #0
 8010618:	4b07      	ldr	r3, [pc, #28]	@ (8010638 <_dtoa_r+0x5c8>)
 801061a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801061e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010622:	f7ef fff9 	bl	8000618 <__aeabi_dmul>
 8010626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801062a:	e7c4      	b.n	80105b6 <_dtoa_r+0x546>
 801062c:	080124a8 	.word	0x080124a8
 8010630:	08012480 	.word	0x08012480
 8010634:	3ff00000 	.word	0x3ff00000
 8010638:	40240000 	.word	0x40240000
 801063c:	401c0000 	.word	0x401c0000
 8010640:	40140000 	.word	0x40140000
 8010644:	3fe00000 	.word	0x3fe00000
 8010648:	4631      	mov	r1, r6
 801064a:	4656      	mov	r6, sl
 801064c:	4628      	mov	r0, r5
 801064e:	f7ef ffe3 	bl	8000618 <__aeabi_dmul>
 8010652:	9415      	str	r4, [sp, #84]	@ 0x54
 8010654:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801065c:	f7f0 fa8c 	bl	8000b78 <__aeabi_d2iz>
 8010660:	4605      	mov	r5, r0
 8010662:	f7ef ff6f 	bl	8000544 <__aeabi_i2d>
 8010666:	4602      	mov	r2, r0
 8010668:	3530      	adds	r5, #48	@ 0x30
 801066a:	460b      	mov	r3, r1
 801066c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010670:	f7ef fe1a 	bl	80002a8 <__aeabi_dsub>
 8010674:	f806 5b01 	strb.w	r5, [r6], #1
 8010678:	4602      	mov	r2, r0
 801067a:	460b      	mov	r3, r1
 801067c:	42a6      	cmp	r6, r4
 801067e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010682:	f04f 0200 	mov.w	r2, #0
 8010686:	d124      	bne.n	80106d2 <_dtoa_r+0x662>
 8010688:	4bac      	ldr	r3, [pc, #688]	@ (801093c <_dtoa_r+0x8cc>)
 801068a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801068e:	f7ef fe0d 	bl	80002ac <__adddf3>
 8010692:	4602      	mov	r2, r0
 8010694:	460b      	mov	r3, r1
 8010696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801069a:	f7f0 fa4d 	bl	8000b38 <__aeabi_dcmpgt>
 801069e:	2800      	cmp	r0, #0
 80106a0:	d145      	bne.n	801072e <_dtoa_r+0x6be>
 80106a2:	2000      	movs	r0, #0
 80106a4:	49a5      	ldr	r1, [pc, #660]	@ (801093c <_dtoa_r+0x8cc>)
 80106a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80106aa:	f7ef fdfd 	bl	80002a8 <__aeabi_dsub>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106b6:	f7f0 fa21 	bl	8000afc <__aeabi_dcmplt>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	f43f aef5 	beq.w	80104aa <_dtoa_r+0x43a>
 80106c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80106c2:	1e73      	subs	r3, r6, #1
 80106c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80106c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80106ca:	2b30      	cmp	r3, #48	@ 0x30
 80106cc:	d0f8      	beq.n	80106c0 <_dtoa_r+0x650>
 80106ce:	9f04      	ldr	r7, [sp, #16]
 80106d0:	e73e      	b.n	8010550 <_dtoa_r+0x4e0>
 80106d2:	4b9b      	ldr	r3, [pc, #620]	@ (8010940 <_dtoa_r+0x8d0>)
 80106d4:	f7ef ffa0 	bl	8000618 <__aeabi_dmul>
 80106d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106dc:	e7bc      	b.n	8010658 <_dtoa_r+0x5e8>
 80106de:	d10c      	bne.n	80106fa <_dtoa_r+0x68a>
 80106e0:	2200      	movs	r2, #0
 80106e2:	4b98      	ldr	r3, [pc, #608]	@ (8010944 <_dtoa_r+0x8d4>)
 80106e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106e8:	f7ef ff96 	bl	8000618 <__aeabi_dmul>
 80106ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106f0:	f7f0 fa18 	bl	8000b24 <__aeabi_dcmpge>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	f000 8157 	beq.w	80109a8 <_dtoa_r+0x938>
 80106fa:	2400      	movs	r4, #0
 80106fc:	4625      	mov	r5, r4
 80106fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010700:	4656      	mov	r6, sl
 8010702:	43db      	mvns	r3, r3
 8010704:	9304      	str	r3, [sp, #16]
 8010706:	2700      	movs	r7, #0
 8010708:	4621      	mov	r1, r4
 801070a:	4658      	mov	r0, fp
 801070c:	f000 fbb4 	bl	8010e78 <_Bfree>
 8010710:	2d00      	cmp	r5, #0
 8010712:	d0dc      	beq.n	80106ce <_dtoa_r+0x65e>
 8010714:	b12f      	cbz	r7, 8010722 <_dtoa_r+0x6b2>
 8010716:	42af      	cmp	r7, r5
 8010718:	d003      	beq.n	8010722 <_dtoa_r+0x6b2>
 801071a:	4639      	mov	r1, r7
 801071c:	4658      	mov	r0, fp
 801071e:	f000 fbab 	bl	8010e78 <_Bfree>
 8010722:	4629      	mov	r1, r5
 8010724:	4658      	mov	r0, fp
 8010726:	f000 fba7 	bl	8010e78 <_Bfree>
 801072a:	e7d0      	b.n	80106ce <_dtoa_r+0x65e>
 801072c:	9704      	str	r7, [sp, #16]
 801072e:	4633      	mov	r3, r6
 8010730:	461e      	mov	r6, r3
 8010732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010736:	2a39      	cmp	r2, #57	@ 0x39
 8010738:	d107      	bne.n	801074a <_dtoa_r+0x6da>
 801073a:	459a      	cmp	sl, r3
 801073c:	d1f8      	bne.n	8010730 <_dtoa_r+0x6c0>
 801073e:	9a04      	ldr	r2, [sp, #16]
 8010740:	3201      	adds	r2, #1
 8010742:	9204      	str	r2, [sp, #16]
 8010744:	2230      	movs	r2, #48	@ 0x30
 8010746:	f88a 2000 	strb.w	r2, [sl]
 801074a:	781a      	ldrb	r2, [r3, #0]
 801074c:	3201      	adds	r2, #1
 801074e:	701a      	strb	r2, [r3, #0]
 8010750:	e7bd      	b.n	80106ce <_dtoa_r+0x65e>
 8010752:	2200      	movs	r2, #0
 8010754:	4b7a      	ldr	r3, [pc, #488]	@ (8010940 <_dtoa_r+0x8d0>)
 8010756:	f7ef ff5f 	bl	8000618 <__aeabi_dmul>
 801075a:	2200      	movs	r2, #0
 801075c:	2300      	movs	r3, #0
 801075e:	4604      	mov	r4, r0
 8010760:	460d      	mov	r5, r1
 8010762:	f7f0 f9c1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010766:	2800      	cmp	r0, #0
 8010768:	f43f aebb 	beq.w	80104e2 <_dtoa_r+0x472>
 801076c:	e6f0      	b.n	8010550 <_dtoa_r+0x4e0>
 801076e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010770:	2a00      	cmp	r2, #0
 8010772:	f000 80db 	beq.w	801092c <_dtoa_r+0x8bc>
 8010776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010778:	2a01      	cmp	r2, #1
 801077a:	f300 80bf 	bgt.w	80108fc <_dtoa_r+0x88c>
 801077e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010780:	2a00      	cmp	r2, #0
 8010782:	f000 80b7 	beq.w	80108f4 <_dtoa_r+0x884>
 8010786:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801078a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801078c:	4646      	mov	r6, r8
 801078e:	9a08      	ldr	r2, [sp, #32]
 8010790:	2101      	movs	r1, #1
 8010792:	4658      	mov	r0, fp
 8010794:	4498      	add	r8, r3
 8010796:	441a      	add	r2, r3
 8010798:	9208      	str	r2, [sp, #32]
 801079a:	f000 fc23 	bl	8010fe4 <__i2b>
 801079e:	4605      	mov	r5, r0
 80107a0:	b15e      	cbz	r6, 80107ba <_dtoa_r+0x74a>
 80107a2:	9b08      	ldr	r3, [sp, #32]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	dd08      	ble.n	80107ba <_dtoa_r+0x74a>
 80107a8:	42b3      	cmp	r3, r6
 80107aa:	9a08      	ldr	r2, [sp, #32]
 80107ac:	bfa8      	it	ge
 80107ae:	4633      	movge	r3, r6
 80107b0:	eba8 0803 	sub.w	r8, r8, r3
 80107b4:	1af6      	subs	r6, r6, r3
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	9308      	str	r3, [sp, #32]
 80107ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107bc:	b1f3      	cbz	r3, 80107fc <_dtoa_r+0x78c>
 80107be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 80b7 	beq.w	8010934 <_dtoa_r+0x8c4>
 80107c6:	b18c      	cbz	r4, 80107ec <_dtoa_r+0x77c>
 80107c8:	4629      	mov	r1, r5
 80107ca:	4622      	mov	r2, r4
 80107cc:	4658      	mov	r0, fp
 80107ce:	f000 fcc9 	bl	8011164 <__pow5mult>
 80107d2:	464a      	mov	r2, r9
 80107d4:	4601      	mov	r1, r0
 80107d6:	4605      	mov	r5, r0
 80107d8:	4658      	mov	r0, fp
 80107da:	f000 fc19 	bl	8011010 <__multiply>
 80107de:	4649      	mov	r1, r9
 80107e0:	9004      	str	r0, [sp, #16]
 80107e2:	4658      	mov	r0, fp
 80107e4:	f000 fb48 	bl	8010e78 <_Bfree>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	4699      	mov	r9, r3
 80107ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107ee:	1b1a      	subs	r2, r3, r4
 80107f0:	d004      	beq.n	80107fc <_dtoa_r+0x78c>
 80107f2:	4649      	mov	r1, r9
 80107f4:	4658      	mov	r0, fp
 80107f6:	f000 fcb5 	bl	8011164 <__pow5mult>
 80107fa:	4681      	mov	r9, r0
 80107fc:	2101      	movs	r1, #1
 80107fe:	4658      	mov	r0, fp
 8010800:	f000 fbf0 	bl	8010fe4 <__i2b>
 8010804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010806:	4604      	mov	r4, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	f000 81cf 	beq.w	8010bac <_dtoa_r+0xb3c>
 801080e:	461a      	mov	r2, r3
 8010810:	4601      	mov	r1, r0
 8010812:	4658      	mov	r0, fp
 8010814:	f000 fca6 	bl	8011164 <__pow5mult>
 8010818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801081a:	4604      	mov	r4, r0
 801081c:	2b01      	cmp	r3, #1
 801081e:	f300 8095 	bgt.w	801094c <_dtoa_r+0x8dc>
 8010822:	9b02      	ldr	r3, [sp, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	f040 8087 	bne.w	8010938 <_dtoa_r+0x8c8>
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010830:	2b00      	cmp	r3, #0
 8010832:	f040 8089 	bne.w	8010948 <_dtoa_r+0x8d8>
 8010836:	9b03      	ldr	r3, [sp, #12]
 8010838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801083c:	0d1b      	lsrs	r3, r3, #20
 801083e:	051b      	lsls	r3, r3, #20
 8010840:	b12b      	cbz	r3, 801084e <_dtoa_r+0x7de>
 8010842:	9b08      	ldr	r3, [sp, #32]
 8010844:	f108 0801 	add.w	r8, r8, #1
 8010848:	3301      	adds	r3, #1
 801084a:	9308      	str	r3, [sp, #32]
 801084c:	2301      	movs	r3, #1
 801084e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 81b0 	beq.w	8010bb8 <_dtoa_r+0xb48>
 8010858:	6923      	ldr	r3, [r4, #16]
 801085a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801085e:	6918      	ldr	r0, [r3, #16]
 8010860:	f000 fb74 	bl	8010f4c <__hi0bits>
 8010864:	f1c0 0020 	rsb	r0, r0, #32
 8010868:	9b08      	ldr	r3, [sp, #32]
 801086a:	4418      	add	r0, r3
 801086c:	f010 001f 	ands.w	r0, r0, #31
 8010870:	d077      	beq.n	8010962 <_dtoa_r+0x8f2>
 8010872:	f1c0 0320 	rsb	r3, r0, #32
 8010876:	2b04      	cmp	r3, #4
 8010878:	dd6b      	ble.n	8010952 <_dtoa_r+0x8e2>
 801087a:	f1c0 001c 	rsb	r0, r0, #28
 801087e:	9b08      	ldr	r3, [sp, #32]
 8010880:	4480      	add	r8, r0
 8010882:	4403      	add	r3, r0
 8010884:	4406      	add	r6, r0
 8010886:	9308      	str	r3, [sp, #32]
 8010888:	f1b8 0f00 	cmp.w	r8, #0
 801088c:	dd05      	ble.n	801089a <_dtoa_r+0x82a>
 801088e:	4649      	mov	r1, r9
 8010890:	4642      	mov	r2, r8
 8010892:	4658      	mov	r0, fp
 8010894:	f000 fcc0 	bl	8011218 <__lshift>
 8010898:	4681      	mov	r9, r0
 801089a:	9b08      	ldr	r3, [sp, #32]
 801089c:	2b00      	cmp	r3, #0
 801089e:	dd05      	ble.n	80108ac <_dtoa_r+0x83c>
 80108a0:	4621      	mov	r1, r4
 80108a2:	461a      	mov	r2, r3
 80108a4:	4658      	mov	r0, fp
 80108a6:	f000 fcb7 	bl	8011218 <__lshift>
 80108aa:	4604      	mov	r4, r0
 80108ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d059      	beq.n	8010966 <_dtoa_r+0x8f6>
 80108b2:	4621      	mov	r1, r4
 80108b4:	4648      	mov	r0, r9
 80108b6:	f000 fd1b 	bl	80112f0 <__mcmp>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	da53      	bge.n	8010966 <_dtoa_r+0x8f6>
 80108be:	1e7b      	subs	r3, r7, #1
 80108c0:	4649      	mov	r1, r9
 80108c2:	220a      	movs	r2, #10
 80108c4:	4658      	mov	r0, fp
 80108c6:	9304      	str	r3, [sp, #16]
 80108c8:	2300      	movs	r3, #0
 80108ca:	f000 faf7 	bl	8010ebc <__multadd>
 80108ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108d0:	4681      	mov	r9, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f000 8172 	beq.w	8010bbc <_dtoa_r+0xb4c>
 80108d8:	2300      	movs	r3, #0
 80108da:	4629      	mov	r1, r5
 80108dc:	220a      	movs	r2, #10
 80108de:	4658      	mov	r0, fp
 80108e0:	f000 faec 	bl	8010ebc <__multadd>
 80108e4:	9b00      	ldr	r3, [sp, #0]
 80108e6:	4605      	mov	r5, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	dc67      	bgt.n	80109bc <_dtoa_r+0x94c>
 80108ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ee:	2b02      	cmp	r3, #2
 80108f0:	dc41      	bgt.n	8010976 <_dtoa_r+0x906>
 80108f2:	e063      	b.n	80109bc <_dtoa_r+0x94c>
 80108f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80108f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80108fa:	e746      	b.n	801078a <_dtoa_r+0x71a>
 80108fc:	9b07      	ldr	r3, [sp, #28]
 80108fe:	1e5c      	subs	r4, r3, #1
 8010900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010902:	42a3      	cmp	r3, r4
 8010904:	bfb7      	itett	lt
 8010906:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010908:	1b1c      	subge	r4, r3, r4
 801090a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801090c:	1ae3      	sublt	r3, r4, r3
 801090e:	bfbe      	ittt	lt
 8010910:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010912:	2400      	movlt	r4, #0
 8010914:	18d2      	addlt	r2, r2, r3
 8010916:	9b07      	ldr	r3, [sp, #28]
 8010918:	bfb8      	it	lt
 801091a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801091c:	2b00      	cmp	r3, #0
 801091e:	bfb5      	itete	lt
 8010920:	eba8 0603 	sublt.w	r6, r8, r3
 8010924:	4646      	movge	r6, r8
 8010926:	2300      	movlt	r3, #0
 8010928:	9b07      	ldrge	r3, [sp, #28]
 801092a:	e730      	b.n	801078e <_dtoa_r+0x71e>
 801092c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801092e:	4646      	mov	r6, r8
 8010930:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010932:	e735      	b.n	80107a0 <_dtoa_r+0x730>
 8010934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010936:	e75c      	b.n	80107f2 <_dtoa_r+0x782>
 8010938:	2300      	movs	r3, #0
 801093a:	e788      	b.n	801084e <_dtoa_r+0x7de>
 801093c:	3fe00000 	.word	0x3fe00000
 8010940:	40240000 	.word	0x40240000
 8010944:	40140000 	.word	0x40140000
 8010948:	9b02      	ldr	r3, [sp, #8]
 801094a:	e780      	b.n	801084e <_dtoa_r+0x7de>
 801094c:	2300      	movs	r3, #0
 801094e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010950:	e782      	b.n	8010858 <_dtoa_r+0x7e8>
 8010952:	d099      	beq.n	8010888 <_dtoa_r+0x818>
 8010954:	331c      	adds	r3, #28
 8010956:	9a08      	ldr	r2, [sp, #32]
 8010958:	441a      	add	r2, r3
 801095a:	4498      	add	r8, r3
 801095c:	441e      	add	r6, r3
 801095e:	9208      	str	r2, [sp, #32]
 8010960:	e792      	b.n	8010888 <_dtoa_r+0x818>
 8010962:	4603      	mov	r3, r0
 8010964:	e7f6      	b.n	8010954 <_dtoa_r+0x8e4>
 8010966:	9b07      	ldr	r3, [sp, #28]
 8010968:	9704      	str	r7, [sp, #16]
 801096a:	2b00      	cmp	r3, #0
 801096c:	dc20      	bgt.n	80109b0 <_dtoa_r+0x940>
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010972:	2b02      	cmp	r3, #2
 8010974:	dd1e      	ble.n	80109b4 <_dtoa_r+0x944>
 8010976:	9b00      	ldr	r3, [sp, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	f47f aec0 	bne.w	80106fe <_dtoa_r+0x68e>
 801097e:	4621      	mov	r1, r4
 8010980:	2205      	movs	r2, #5
 8010982:	4658      	mov	r0, fp
 8010984:	f000 fa9a 	bl	8010ebc <__multadd>
 8010988:	4601      	mov	r1, r0
 801098a:	4604      	mov	r4, r0
 801098c:	4648      	mov	r0, r9
 801098e:	f000 fcaf 	bl	80112f0 <__mcmp>
 8010992:	2800      	cmp	r0, #0
 8010994:	f77f aeb3 	ble.w	80106fe <_dtoa_r+0x68e>
 8010998:	2331      	movs	r3, #49	@ 0x31
 801099a:	4656      	mov	r6, sl
 801099c:	f806 3b01 	strb.w	r3, [r6], #1
 80109a0:	9b04      	ldr	r3, [sp, #16]
 80109a2:	3301      	adds	r3, #1
 80109a4:	9304      	str	r3, [sp, #16]
 80109a6:	e6ae      	b.n	8010706 <_dtoa_r+0x696>
 80109a8:	9c07      	ldr	r4, [sp, #28]
 80109aa:	9704      	str	r7, [sp, #16]
 80109ac:	4625      	mov	r5, r4
 80109ae:	e7f3      	b.n	8010998 <_dtoa_r+0x928>
 80109b0:	9b07      	ldr	r3, [sp, #28]
 80109b2:	9300      	str	r3, [sp, #0]
 80109b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 8104 	beq.w	8010bc4 <_dtoa_r+0xb54>
 80109bc:	2e00      	cmp	r6, #0
 80109be:	dd05      	ble.n	80109cc <_dtoa_r+0x95c>
 80109c0:	4629      	mov	r1, r5
 80109c2:	4632      	mov	r2, r6
 80109c4:	4658      	mov	r0, fp
 80109c6:	f000 fc27 	bl	8011218 <__lshift>
 80109ca:	4605      	mov	r5, r0
 80109cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d05a      	beq.n	8010a88 <_dtoa_r+0xa18>
 80109d2:	6869      	ldr	r1, [r5, #4]
 80109d4:	4658      	mov	r0, fp
 80109d6:	f000 fa0f 	bl	8010df8 <_Balloc>
 80109da:	4606      	mov	r6, r0
 80109dc:	b928      	cbnz	r0, 80109ea <_dtoa_r+0x97a>
 80109de:	4b84      	ldr	r3, [pc, #528]	@ (8010bf0 <_dtoa_r+0xb80>)
 80109e0:	4602      	mov	r2, r0
 80109e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80109e6:	f7ff bb5a 	b.w	801009e <_dtoa_r+0x2e>
 80109ea:	692a      	ldr	r2, [r5, #16]
 80109ec:	f105 010c 	add.w	r1, r5, #12
 80109f0:	300c      	adds	r0, #12
 80109f2:	3202      	adds	r2, #2
 80109f4:	0092      	lsls	r2, r2, #2
 80109f6:	f7ff faa0 	bl	800ff3a <memcpy>
 80109fa:	2201      	movs	r2, #1
 80109fc:	4631      	mov	r1, r6
 80109fe:	4658      	mov	r0, fp
 8010a00:	f000 fc0a 	bl	8011218 <__lshift>
 8010a04:	f10a 0301 	add.w	r3, sl, #1
 8010a08:	462f      	mov	r7, r5
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	9307      	str	r3, [sp, #28]
 8010a0e:	9b00      	ldr	r3, [sp, #0]
 8010a10:	4453      	add	r3, sl
 8010a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a14:	9b02      	ldr	r3, [sp, #8]
 8010a16:	f003 0301 	and.w	r3, r3, #1
 8010a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a1c:	9b07      	ldr	r3, [sp, #28]
 8010a1e:	4621      	mov	r1, r4
 8010a20:	4648      	mov	r0, r9
 8010a22:	3b01      	subs	r3, #1
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	f7ff fa95 	bl	800ff54 <quorem>
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	9002      	str	r0, [sp, #8]
 8010a2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a32:	4648      	mov	r0, r9
 8010a34:	f000 fc5c 	bl	80112f0 <__mcmp>
 8010a38:	462a      	mov	r2, r5
 8010a3a:	9008      	str	r0, [sp, #32]
 8010a3c:	4621      	mov	r1, r4
 8010a3e:	4658      	mov	r0, fp
 8010a40:	f000 fc72 	bl	8011328 <__mdiff>
 8010a44:	68c2      	ldr	r2, [r0, #12]
 8010a46:	4606      	mov	r6, r0
 8010a48:	bb02      	cbnz	r2, 8010a8c <_dtoa_r+0xa1c>
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	4648      	mov	r0, r9
 8010a4e:	f000 fc4f 	bl	80112f0 <__mcmp>
 8010a52:	4602      	mov	r2, r0
 8010a54:	4631      	mov	r1, r6
 8010a56:	4658      	mov	r0, fp
 8010a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a5a:	f000 fa0d 	bl	8010e78 <_Bfree>
 8010a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a62:	9e07      	ldr	r6, [sp, #28]
 8010a64:	ea43 0102 	orr.w	r1, r3, r2
 8010a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a6a:	4319      	orrs	r1, r3
 8010a6c:	d110      	bne.n	8010a90 <_dtoa_r+0xa20>
 8010a6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010a72:	d029      	beq.n	8010ac8 <_dtoa_r+0xa58>
 8010a74:	9b08      	ldr	r3, [sp, #32]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	dd02      	ble.n	8010a80 <_dtoa_r+0xa10>
 8010a7a:	9b02      	ldr	r3, [sp, #8]
 8010a7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010a80:	9b00      	ldr	r3, [sp, #0]
 8010a82:	f883 8000 	strb.w	r8, [r3]
 8010a86:	e63f      	b.n	8010708 <_dtoa_r+0x698>
 8010a88:	4628      	mov	r0, r5
 8010a8a:	e7bb      	b.n	8010a04 <_dtoa_r+0x994>
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	e7e1      	b.n	8010a54 <_dtoa_r+0x9e4>
 8010a90:	9b08      	ldr	r3, [sp, #32]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	db04      	blt.n	8010aa0 <_dtoa_r+0xa30>
 8010a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a98:	430b      	orrs	r3, r1
 8010a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a9c:	430b      	orrs	r3, r1
 8010a9e:	d120      	bne.n	8010ae2 <_dtoa_r+0xa72>
 8010aa0:	2a00      	cmp	r2, #0
 8010aa2:	dded      	ble.n	8010a80 <_dtoa_r+0xa10>
 8010aa4:	4649      	mov	r1, r9
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	4658      	mov	r0, fp
 8010aaa:	f000 fbb5 	bl	8011218 <__lshift>
 8010aae:	4621      	mov	r1, r4
 8010ab0:	4681      	mov	r9, r0
 8010ab2:	f000 fc1d 	bl	80112f0 <__mcmp>
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	dc03      	bgt.n	8010ac2 <_dtoa_r+0xa52>
 8010aba:	d1e1      	bne.n	8010a80 <_dtoa_r+0xa10>
 8010abc:	f018 0f01 	tst.w	r8, #1
 8010ac0:	d0de      	beq.n	8010a80 <_dtoa_r+0xa10>
 8010ac2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ac6:	d1d8      	bne.n	8010a7a <_dtoa_r+0xa0a>
 8010ac8:	2339      	movs	r3, #57	@ 0x39
 8010aca:	9a00      	ldr	r2, [sp, #0]
 8010acc:	7013      	strb	r3, [r2, #0]
 8010ace:	4633      	mov	r3, r6
 8010ad0:	461e      	mov	r6, r3
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ad8:	2a39      	cmp	r2, #57	@ 0x39
 8010ada:	d052      	beq.n	8010b82 <_dtoa_r+0xb12>
 8010adc:	3201      	adds	r2, #1
 8010ade:	701a      	strb	r2, [r3, #0]
 8010ae0:	e612      	b.n	8010708 <_dtoa_r+0x698>
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	dd07      	ble.n	8010af6 <_dtoa_r+0xa86>
 8010ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010aea:	d0ed      	beq.n	8010ac8 <_dtoa_r+0xa58>
 8010aec:	f108 0301 	add.w	r3, r8, #1
 8010af0:	9a00      	ldr	r2, [sp, #0]
 8010af2:	7013      	strb	r3, [r2, #0]
 8010af4:	e608      	b.n	8010708 <_dtoa_r+0x698>
 8010af6:	9b07      	ldr	r3, [sp, #28]
 8010af8:	9a07      	ldr	r2, [sp, #28]
 8010afa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d028      	beq.n	8010b56 <_dtoa_r+0xae6>
 8010b04:	4649      	mov	r1, r9
 8010b06:	2300      	movs	r3, #0
 8010b08:	220a      	movs	r2, #10
 8010b0a:	4658      	mov	r0, fp
 8010b0c:	f000 f9d6 	bl	8010ebc <__multadd>
 8010b10:	42af      	cmp	r7, r5
 8010b12:	4681      	mov	r9, r0
 8010b14:	f04f 0300 	mov.w	r3, #0
 8010b18:	f04f 020a 	mov.w	r2, #10
 8010b1c:	4639      	mov	r1, r7
 8010b1e:	4658      	mov	r0, fp
 8010b20:	d107      	bne.n	8010b32 <_dtoa_r+0xac2>
 8010b22:	f000 f9cb 	bl	8010ebc <__multadd>
 8010b26:	4607      	mov	r7, r0
 8010b28:	4605      	mov	r5, r0
 8010b2a:	9b07      	ldr	r3, [sp, #28]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	9307      	str	r3, [sp, #28]
 8010b30:	e774      	b.n	8010a1c <_dtoa_r+0x9ac>
 8010b32:	f000 f9c3 	bl	8010ebc <__multadd>
 8010b36:	4629      	mov	r1, r5
 8010b38:	4607      	mov	r7, r0
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	220a      	movs	r2, #10
 8010b3e:	4658      	mov	r0, fp
 8010b40:	f000 f9bc 	bl	8010ebc <__multadd>
 8010b44:	4605      	mov	r5, r0
 8010b46:	e7f0      	b.n	8010b2a <_dtoa_r+0xaba>
 8010b48:	9b00      	ldr	r3, [sp, #0]
 8010b4a:	2700      	movs	r7, #0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	bfcc      	ite	gt
 8010b50:	461e      	movgt	r6, r3
 8010b52:	2601      	movle	r6, #1
 8010b54:	4456      	add	r6, sl
 8010b56:	4649      	mov	r1, r9
 8010b58:	2201      	movs	r2, #1
 8010b5a:	4658      	mov	r0, fp
 8010b5c:	f000 fb5c 	bl	8011218 <__lshift>
 8010b60:	4621      	mov	r1, r4
 8010b62:	4681      	mov	r9, r0
 8010b64:	f000 fbc4 	bl	80112f0 <__mcmp>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	dcb0      	bgt.n	8010ace <_dtoa_r+0xa5e>
 8010b6c:	d102      	bne.n	8010b74 <_dtoa_r+0xb04>
 8010b6e:	f018 0f01 	tst.w	r8, #1
 8010b72:	d1ac      	bne.n	8010ace <_dtoa_r+0xa5e>
 8010b74:	4633      	mov	r3, r6
 8010b76:	461e      	mov	r6, r3
 8010b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b7c:	2a30      	cmp	r2, #48	@ 0x30
 8010b7e:	d0fa      	beq.n	8010b76 <_dtoa_r+0xb06>
 8010b80:	e5c2      	b.n	8010708 <_dtoa_r+0x698>
 8010b82:	459a      	cmp	sl, r3
 8010b84:	d1a4      	bne.n	8010ad0 <_dtoa_r+0xa60>
 8010b86:	9b04      	ldr	r3, [sp, #16]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	9304      	str	r3, [sp, #16]
 8010b8c:	2331      	movs	r3, #49	@ 0x31
 8010b8e:	f88a 3000 	strb.w	r3, [sl]
 8010b92:	e5b9      	b.n	8010708 <_dtoa_r+0x698>
 8010b94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010bf4 <_dtoa_r+0xb84>
 8010b9a:	b11b      	cbz	r3, 8010ba4 <_dtoa_r+0xb34>
 8010b9c:	f10a 0308 	add.w	r3, sl, #8
 8010ba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010ba2:	6013      	str	r3, [r2, #0]
 8010ba4:	4650      	mov	r0, sl
 8010ba6:	b019      	add	sp, #100	@ 0x64
 8010ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	f77f ae37 	ble.w	8010822 <_dtoa_r+0x7b2>
 8010bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bb8:	2001      	movs	r0, #1
 8010bba:	e655      	b.n	8010868 <_dtoa_r+0x7f8>
 8010bbc:	9b00      	ldr	r3, [sp, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f77f aed6 	ble.w	8010970 <_dtoa_r+0x900>
 8010bc4:	4656      	mov	r6, sl
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	4648      	mov	r0, r9
 8010bca:	f7ff f9c3 	bl	800ff54 <quorem>
 8010bce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010bd2:	9b00      	ldr	r3, [sp, #0]
 8010bd4:	f806 8b01 	strb.w	r8, [r6], #1
 8010bd8:	eba6 020a 	sub.w	r2, r6, sl
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	ddb3      	ble.n	8010b48 <_dtoa_r+0xad8>
 8010be0:	4649      	mov	r1, r9
 8010be2:	2300      	movs	r3, #0
 8010be4:	220a      	movs	r2, #10
 8010be6:	4658      	mov	r0, fp
 8010be8:	f000 f968 	bl	8010ebc <__multadd>
 8010bec:	4681      	mov	r9, r0
 8010bee:	e7ea      	b.n	8010bc6 <_dtoa_r+0xb56>
 8010bf0:	08012408 	.word	0x08012408
 8010bf4:	0801238c 	.word	0x0801238c

08010bf8 <_free_r>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	2900      	cmp	r1, #0
 8010bfe:	d041      	beq.n	8010c84 <_free_r+0x8c>
 8010c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c04:	1f0c      	subs	r4, r1, #4
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	bfb8      	it	lt
 8010c0a:	18e4      	addlt	r4, r4, r3
 8010c0c:	f000 f8e8 	bl	8010de0 <__malloc_lock>
 8010c10:	4a1d      	ldr	r2, [pc, #116]	@ (8010c88 <_free_r+0x90>)
 8010c12:	6813      	ldr	r3, [r2, #0]
 8010c14:	b933      	cbnz	r3, 8010c24 <_free_r+0x2c>
 8010c16:	6063      	str	r3, [r4, #4]
 8010c18:	6014      	str	r4, [r2, #0]
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c20:	f000 b8e4 	b.w	8010dec <__malloc_unlock>
 8010c24:	42a3      	cmp	r3, r4
 8010c26:	d908      	bls.n	8010c3a <_free_r+0x42>
 8010c28:	6820      	ldr	r0, [r4, #0]
 8010c2a:	1821      	adds	r1, r4, r0
 8010c2c:	428b      	cmp	r3, r1
 8010c2e:	bf01      	itttt	eq
 8010c30:	6819      	ldreq	r1, [r3, #0]
 8010c32:	685b      	ldreq	r3, [r3, #4]
 8010c34:	1809      	addeq	r1, r1, r0
 8010c36:	6021      	streq	r1, [r4, #0]
 8010c38:	e7ed      	b.n	8010c16 <_free_r+0x1e>
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	b10b      	cbz	r3, 8010c44 <_free_r+0x4c>
 8010c40:	42a3      	cmp	r3, r4
 8010c42:	d9fa      	bls.n	8010c3a <_free_r+0x42>
 8010c44:	6811      	ldr	r1, [r2, #0]
 8010c46:	1850      	adds	r0, r2, r1
 8010c48:	42a0      	cmp	r0, r4
 8010c4a:	d10b      	bne.n	8010c64 <_free_r+0x6c>
 8010c4c:	6820      	ldr	r0, [r4, #0]
 8010c4e:	4401      	add	r1, r0
 8010c50:	1850      	adds	r0, r2, r1
 8010c52:	6011      	str	r1, [r2, #0]
 8010c54:	4283      	cmp	r3, r0
 8010c56:	d1e0      	bne.n	8010c1a <_free_r+0x22>
 8010c58:	6818      	ldr	r0, [r3, #0]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	4408      	add	r0, r1
 8010c5e:	6053      	str	r3, [r2, #4]
 8010c60:	6010      	str	r0, [r2, #0]
 8010c62:	e7da      	b.n	8010c1a <_free_r+0x22>
 8010c64:	d902      	bls.n	8010c6c <_free_r+0x74>
 8010c66:	230c      	movs	r3, #12
 8010c68:	602b      	str	r3, [r5, #0]
 8010c6a:	e7d6      	b.n	8010c1a <_free_r+0x22>
 8010c6c:	6820      	ldr	r0, [r4, #0]
 8010c6e:	1821      	adds	r1, r4, r0
 8010c70:	428b      	cmp	r3, r1
 8010c72:	bf02      	ittt	eq
 8010c74:	6819      	ldreq	r1, [r3, #0]
 8010c76:	685b      	ldreq	r3, [r3, #4]
 8010c78:	1809      	addeq	r1, r1, r0
 8010c7a:	6063      	str	r3, [r4, #4]
 8010c7c:	bf08      	it	eq
 8010c7e:	6021      	streq	r1, [r4, #0]
 8010c80:	6054      	str	r4, [r2, #4]
 8010c82:	e7ca      	b.n	8010c1a <_free_r+0x22>
 8010c84:	bd38      	pop	{r3, r4, r5, pc}
 8010c86:	bf00      	nop
 8010c88:	20005c44 	.word	0x20005c44

08010c8c <malloc>:
 8010c8c:	4b02      	ldr	r3, [pc, #8]	@ (8010c98 <malloc+0xc>)
 8010c8e:	4601      	mov	r1, r0
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	f000 b825 	b.w	8010ce0 <_malloc_r>
 8010c96:	bf00      	nop
 8010c98:	20000040 	.word	0x20000040

08010c9c <sbrk_aligned>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8010cdc <sbrk_aligned+0x40>)
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	6831      	ldr	r1, [r6, #0]
 8010ca6:	b911      	cbnz	r1, 8010cae <sbrk_aligned+0x12>
 8010ca8:	f000 fe4c 	bl	8011944 <_sbrk_r>
 8010cac:	6030      	str	r0, [r6, #0]
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f000 fe47 	bl	8011944 <_sbrk_r>
 8010cb6:	1c43      	adds	r3, r0, #1
 8010cb8:	d103      	bne.n	8010cc2 <sbrk_aligned+0x26>
 8010cba:	f04f 34ff 	mov.w	r4, #4294967295
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}
 8010cc2:	1cc4      	adds	r4, r0, #3
 8010cc4:	f024 0403 	bic.w	r4, r4, #3
 8010cc8:	42a0      	cmp	r0, r4
 8010cca:	d0f8      	beq.n	8010cbe <sbrk_aligned+0x22>
 8010ccc:	1a21      	subs	r1, r4, r0
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f000 fe38 	bl	8011944 <_sbrk_r>
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d1f2      	bne.n	8010cbe <sbrk_aligned+0x22>
 8010cd8:	e7ef      	b.n	8010cba <sbrk_aligned+0x1e>
 8010cda:	bf00      	nop
 8010cdc:	20005c40 	.word	0x20005c40

08010ce0 <_malloc_r>:
 8010ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce4:	1ccd      	adds	r5, r1, #3
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	f025 0503 	bic.w	r5, r5, #3
 8010cec:	3508      	adds	r5, #8
 8010cee:	2d0c      	cmp	r5, #12
 8010cf0:	bf38      	it	cc
 8010cf2:	250c      	movcc	r5, #12
 8010cf4:	2d00      	cmp	r5, #0
 8010cf6:	db01      	blt.n	8010cfc <_malloc_r+0x1c>
 8010cf8:	42a9      	cmp	r1, r5
 8010cfa:	d904      	bls.n	8010d06 <_malloc_r+0x26>
 8010cfc:	230c      	movs	r3, #12
 8010cfe:	6033      	str	r3, [r6, #0]
 8010d00:	2000      	movs	r0, #0
 8010d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ddc <_malloc_r+0xfc>
 8010d0a:	f000 f869 	bl	8010de0 <__malloc_lock>
 8010d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d12:	461c      	mov	r4, r3
 8010d14:	bb44      	cbnz	r4, 8010d68 <_malloc_r+0x88>
 8010d16:	4629      	mov	r1, r5
 8010d18:	4630      	mov	r0, r6
 8010d1a:	f7ff ffbf 	bl	8010c9c <sbrk_aligned>
 8010d1e:	1c43      	adds	r3, r0, #1
 8010d20:	4604      	mov	r4, r0
 8010d22:	d158      	bne.n	8010dd6 <_malloc_r+0xf6>
 8010d24:	f8d8 4000 	ldr.w	r4, [r8]
 8010d28:	4627      	mov	r7, r4
 8010d2a:	2f00      	cmp	r7, #0
 8010d2c:	d143      	bne.n	8010db6 <_malloc_r+0xd6>
 8010d2e:	2c00      	cmp	r4, #0
 8010d30:	d04b      	beq.n	8010dca <_malloc_r+0xea>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	4639      	mov	r1, r7
 8010d36:	4630      	mov	r0, r6
 8010d38:	eb04 0903 	add.w	r9, r4, r3
 8010d3c:	f000 fe02 	bl	8011944 <_sbrk_r>
 8010d40:	4581      	cmp	r9, r0
 8010d42:	d142      	bne.n	8010dca <_malloc_r+0xea>
 8010d44:	6821      	ldr	r1, [r4, #0]
 8010d46:	4630      	mov	r0, r6
 8010d48:	1a6d      	subs	r5, r5, r1
 8010d4a:	4629      	mov	r1, r5
 8010d4c:	f7ff ffa6 	bl	8010c9c <sbrk_aligned>
 8010d50:	3001      	adds	r0, #1
 8010d52:	d03a      	beq.n	8010dca <_malloc_r+0xea>
 8010d54:	6823      	ldr	r3, [r4, #0]
 8010d56:	442b      	add	r3, r5
 8010d58:	6023      	str	r3, [r4, #0]
 8010d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8010d5e:	685a      	ldr	r2, [r3, #4]
 8010d60:	bb62      	cbnz	r2, 8010dbc <_malloc_r+0xdc>
 8010d62:	f8c8 7000 	str.w	r7, [r8]
 8010d66:	e00f      	b.n	8010d88 <_malloc_r+0xa8>
 8010d68:	6822      	ldr	r2, [r4, #0]
 8010d6a:	1b52      	subs	r2, r2, r5
 8010d6c:	d420      	bmi.n	8010db0 <_malloc_r+0xd0>
 8010d6e:	2a0b      	cmp	r2, #11
 8010d70:	d917      	bls.n	8010da2 <_malloc_r+0xc2>
 8010d72:	1961      	adds	r1, r4, r5
 8010d74:	42a3      	cmp	r3, r4
 8010d76:	6025      	str	r5, [r4, #0]
 8010d78:	bf18      	it	ne
 8010d7a:	6059      	strne	r1, [r3, #4]
 8010d7c:	6863      	ldr	r3, [r4, #4]
 8010d7e:	bf08      	it	eq
 8010d80:	f8c8 1000 	streq.w	r1, [r8]
 8010d84:	5162      	str	r2, [r4, r5]
 8010d86:	604b      	str	r3, [r1, #4]
 8010d88:	4630      	mov	r0, r6
 8010d8a:	f000 f82f 	bl	8010dec <__malloc_unlock>
 8010d8e:	f104 000b 	add.w	r0, r4, #11
 8010d92:	1d23      	adds	r3, r4, #4
 8010d94:	f020 0007 	bic.w	r0, r0, #7
 8010d98:	1ac2      	subs	r2, r0, r3
 8010d9a:	bf1c      	itt	ne
 8010d9c:	1a1b      	subne	r3, r3, r0
 8010d9e:	50a3      	strne	r3, [r4, r2]
 8010da0:	e7af      	b.n	8010d02 <_malloc_r+0x22>
 8010da2:	6862      	ldr	r2, [r4, #4]
 8010da4:	42a3      	cmp	r3, r4
 8010da6:	bf0c      	ite	eq
 8010da8:	f8c8 2000 	streq.w	r2, [r8]
 8010dac:	605a      	strne	r2, [r3, #4]
 8010dae:	e7eb      	b.n	8010d88 <_malloc_r+0xa8>
 8010db0:	4623      	mov	r3, r4
 8010db2:	6864      	ldr	r4, [r4, #4]
 8010db4:	e7ae      	b.n	8010d14 <_malloc_r+0x34>
 8010db6:	463c      	mov	r4, r7
 8010db8:	687f      	ldr	r7, [r7, #4]
 8010dba:	e7b6      	b.n	8010d2a <_malloc_r+0x4a>
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	42a3      	cmp	r3, r4
 8010dc2:	d1fb      	bne.n	8010dbc <_malloc_r+0xdc>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	6053      	str	r3, [r2, #4]
 8010dc8:	e7de      	b.n	8010d88 <_malloc_r+0xa8>
 8010dca:	230c      	movs	r3, #12
 8010dcc:	4630      	mov	r0, r6
 8010dce:	6033      	str	r3, [r6, #0]
 8010dd0:	f000 f80c 	bl	8010dec <__malloc_unlock>
 8010dd4:	e794      	b.n	8010d00 <_malloc_r+0x20>
 8010dd6:	6005      	str	r5, [r0, #0]
 8010dd8:	e7d6      	b.n	8010d88 <_malloc_r+0xa8>
 8010dda:	bf00      	nop
 8010ddc:	20005c44 	.word	0x20005c44

08010de0 <__malloc_lock>:
 8010de0:	4801      	ldr	r0, [pc, #4]	@ (8010de8 <__malloc_lock+0x8>)
 8010de2:	f7ff b89a 	b.w	800ff1a <__retarget_lock_acquire_recursive>
 8010de6:	bf00      	nop
 8010de8:	20005c3c 	.word	0x20005c3c

08010dec <__malloc_unlock>:
 8010dec:	4801      	ldr	r0, [pc, #4]	@ (8010df4 <__malloc_unlock+0x8>)
 8010dee:	f7ff b895 	b.w	800ff1c <__retarget_lock_release_recursive>
 8010df2:	bf00      	nop
 8010df4:	20005c3c 	.word	0x20005c3c

08010df8 <_Balloc>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	69c6      	ldr	r6, [r0, #28]
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	460d      	mov	r5, r1
 8010e00:	b976      	cbnz	r6, 8010e20 <_Balloc+0x28>
 8010e02:	2010      	movs	r0, #16
 8010e04:	f7ff ff42 	bl	8010c8c <malloc>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	61e0      	str	r0, [r4, #28]
 8010e0c:	b920      	cbnz	r0, 8010e18 <_Balloc+0x20>
 8010e0e:	4b18      	ldr	r3, [pc, #96]	@ (8010e70 <_Balloc+0x78>)
 8010e10:	216b      	movs	r1, #107	@ 0x6b
 8010e12:	4818      	ldr	r0, [pc, #96]	@ (8010e74 <_Balloc+0x7c>)
 8010e14:	f000 fda6 	bl	8011964 <__assert_func>
 8010e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e1c:	6006      	str	r6, [r0, #0]
 8010e1e:	60c6      	str	r6, [r0, #12]
 8010e20:	69e6      	ldr	r6, [r4, #28]
 8010e22:	68f3      	ldr	r3, [r6, #12]
 8010e24:	b183      	cbz	r3, 8010e48 <_Balloc+0x50>
 8010e26:	69e3      	ldr	r3, [r4, #28]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e2e:	b9b8      	cbnz	r0, 8010e60 <_Balloc+0x68>
 8010e30:	2101      	movs	r1, #1
 8010e32:	4620      	mov	r0, r4
 8010e34:	fa01 f605 	lsl.w	r6, r1, r5
 8010e38:	1d72      	adds	r2, r6, #5
 8010e3a:	0092      	lsls	r2, r2, #2
 8010e3c:	f000 fdb0 	bl	80119a0 <_calloc_r>
 8010e40:	b160      	cbz	r0, 8010e5c <_Balloc+0x64>
 8010e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e46:	e00e      	b.n	8010e66 <_Balloc+0x6e>
 8010e48:	2221      	movs	r2, #33	@ 0x21
 8010e4a:	2104      	movs	r1, #4
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f000 fda7 	bl	80119a0 <_calloc_r>
 8010e52:	69e3      	ldr	r3, [r4, #28]
 8010e54:	60f0      	str	r0, [r6, #12]
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1e4      	bne.n	8010e26 <_Balloc+0x2e>
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	bd70      	pop	{r4, r5, r6, pc}
 8010e60:	6802      	ldr	r2, [r0, #0]
 8010e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e66:	2300      	movs	r3, #0
 8010e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e6c:	e7f7      	b.n	8010e5e <_Balloc+0x66>
 8010e6e:	bf00      	nop
 8010e70:	08012399 	.word	0x08012399
 8010e74:	08012419 	.word	0x08012419

08010e78 <_Bfree>:
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	69c6      	ldr	r6, [r0, #28]
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	460c      	mov	r4, r1
 8010e80:	b976      	cbnz	r6, 8010ea0 <_Bfree+0x28>
 8010e82:	2010      	movs	r0, #16
 8010e84:	f7ff ff02 	bl	8010c8c <malloc>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	61e8      	str	r0, [r5, #28]
 8010e8c:	b920      	cbnz	r0, 8010e98 <_Bfree+0x20>
 8010e8e:	4b09      	ldr	r3, [pc, #36]	@ (8010eb4 <_Bfree+0x3c>)
 8010e90:	218f      	movs	r1, #143	@ 0x8f
 8010e92:	4809      	ldr	r0, [pc, #36]	@ (8010eb8 <_Bfree+0x40>)
 8010e94:	f000 fd66 	bl	8011964 <__assert_func>
 8010e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e9c:	6006      	str	r6, [r0, #0]
 8010e9e:	60c6      	str	r6, [r0, #12]
 8010ea0:	b13c      	cbz	r4, 8010eb2 <_Bfree+0x3a>
 8010ea2:	69eb      	ldr	r3, [r5, #28]
 8010ea4:	6862      	ldr	r2, [r4, #4]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010eac:	6021      	str	r1, [r4, #0]
 8010eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	08012399 	.word	0x08012399
 8010eb8:	08012419 	.word	0x08012419

08010ebc <__multadd>:
 8010ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec0:	f101 0c14 	add.w	ip, r1, #20
 8010ec4:	4607      	mov	r7, r0
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	461e      	mov	r6, r3
 8010eca:	690d      	ldr	r5, [r1, #16]
 8010ecc:	2000      	movs	r0, #0
 8010ece:	f8dc 3000 	ldr.w	r3, [ip]
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	b299      	uxth	r1, r3
 8010ed6:	4285      	cmp	r5, r0
 8010ed8:	fb02 6101 	mla	r1, r2, r1, r6
 8010edc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ee0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8010ee4:	b289      	uxth	r1, r1
 8010ee6:	fb02 3306 	mla	r3, r2, r6, r3
 8010eea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ef2:	f84c 1b04 	str.w	r1, [ip], #4
 8010ef6:	dcea      	bgt.n	8010ece <__multadd+0x12>
 8010ef8:	b30e      	cbz	r6, 8010f3e <__multadd+0x82>
 8010efa:	68a3      	ldr	r3, [r4, #8]
 8010efc:	42ab      	cmp	r3, r5
 8010efe:	dc19      	bgt.n	8010f34 <__multadd+0x78>
 8010f00:	6861      	ldr	r1, [r4, #4]
 8010f02:	4638      	mov	r0, r7
 8010f04:	3101      	adds	r1, #1
 8010f06:	f7ff ff77 	bl	8010df8 <_Balloc>
 8010f0a:	4680      	mov	r8, r0
 8010f0c:	b928      	cbnz	r0, 8010f1a <__multadd+0x5e>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	4b0c      	ldr	r3, [pc, #48]	@ (8010f44 <__multadd+0x88>)
 8010f12:	21ba      	movs	r1, #186	@ 0xba
 8010f14:	480c      	ldr	r0, [pc, #48]	@ (8010f48 <__multadd+0x8c>)
 8010f16:	f000 fd25 	bl	8011964 <__assert_func>
 8010f1a:	6922      	ldr	r2, [r4, #16]
 8010f1c:	f104 010c 	add.w	r1, r4, #12
 8010f20:	300c      	adds	r0, #12
 8010f22:	3202      	adds	r2, #2
 8010f24:	0092      	lsls	r2, r2, #2
 8010f26:	f7ff f808 	bl	800ff3a <memcpy>
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	4644      	mov	r4, r8
 8010f2e:	4638      	mov	r0, r7
 8010f30:	f7ff ffa2 	bl	8010e78 <_Bfree>
 8010f34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f38:	3501      	adds	r5, #1
 8010f3a:	615e      	str	r6, [r3, #20]
 8010f3c:	6125      	str	r5, [r4, #16]
 8010f3e:	4620      	mov	r0, r4
 8010f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f44:	08012408 	.word	0x08012408
 8010f48:	08012419 	.word	0x08012419

08010f4c <__hi0bits>:
 8010f4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f50:	4603      	mov	r3, r0
 8010f52:	bf36      	itet	cc
 8010f54:	0403      	lslcc	r3, r0, #16
 8010f56:	2000      	movcs	r0, #0
 8010f58:	2010      	movcc	r0, #16
 8010f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f5e:	bf3c      	itt	cc
 8010f60:	021b      	lslcc	r3, r3, #8
 8010f62:	3008      	addcc	r0, #8
 8010f64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f68:	bf3c      	itt	cc
 8010f6a:	011b      	lslcc	r3, r3, #4
 8010f6c:	3004      	addcc	r0, #4
 8010f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f72:	bf3c      	itt	cc
 8010f74:	009b      	lslcc	r3, r3, #2
 8010f76:	3002      	addcc	r0, #2
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	db05      	blt.n	8010f88 <__hi0bits+0x3c>
 8010f7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f80:	f100 0001 	add.w	r0, r0, #1
 8010f84:	bf08      	it	eq
 8010f86:	2020      	moveq	r0, #32
 8010f88:	4770      	bx	lr

08010f8a <__lo0bits>:
 8010f8a:	6803      	ldr	r3, [r0, #0]
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	f013 0007 	ands.w	r0, r3, #7
 8010f92:	d00b      	beq.n	8010fac <__lo0bits+0x22>
 8010f94:	07d9      	lsls	r1, r3, #31
 8010f96:	d421      	bmi.n	8010fdc <__lo0bits+0x52>
 8010f98:	0798      	lsls	r0, r3, #30
 8010f9a:	bf47      	ittee	mi
 8010f9c:	085b      	lsrmi	r3, r3, #1
 8010f9e:	2001      	movmi	r0, #1
 8010fa0:	089b      	lsrpl	r3, r3, #2
 8010fa2:	2002      	movpl	r0, #2
 8010fa4:	bf4c      	ite	mi
 8010fa6:	6013      	strmi	r3, [r2, #0]
 8010fa8:	6013      	strpl	r3, [r2, #0]
 8010faa:	4770      	bx	lr
 8010fac:	b299      	uxth	r1, r3
 8010fae:	b909      	cbnz	r1, 8010fb4 <__lo0bits+0x2a>
 8010fb0:	0c1b      	lsrs	r3, r3, #16
 8010fb2:	2010      	movs	r0, #16
 8010fb4:	b2d9      	uxtb	r1, r3
 8010fb6:	b909      	cbnz	r1, 8010fbc <__lo0bits+0x32>
 8010fb8:	3008      	adds	r0, #8
 8010fba:	0a1b      	lsrs	r3, r3, #8
 8010fbc:	0719      	lsls	r1, r3, #28
 8010fbe:	bf04      	itt	eq
 8010fc0:	091b      	lsreq	r3, r3, #4
 8010fc2:	3004      	addeq	r0, #4
 8010fc4:	0799      	lsls	r1, r3, #30
 8010fc6:	bf04      	itt	eq
 8010fc8:	089b      	lsreq	r3, r3, #2
 8010fca:	3002      	addeq	r0, #2
 8010fcc:	07d9      	lsls	r1, r3, #31
 8010fce:	d403      	bmi.n	8010fd8 <__lo0bits+0x4e>
 8010fd0:	085b      	lsrs	r3, r3, #1
 8010fd2:	f100 0001 	add.w	r0, r0, #1
 8010fd6:	d003      	beq.n	8010fe0 <__lo0bits+0x56>
 8010fd8:	6013      	str	r3, [r2, #0]
 8010fda:	4770      	bx	lr
 8010fdc:	2000      	movs	r0, #0
 8010fde:	4770      	bx	lr
 8010fe0:	2020      	movs	r0, #32
 8010fe2:	4770      	bx	lr

08010fe4 <__i2b>:
 8010fe4:	b510      	push	{r4, lr}
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	2101      	movs	r1, #1
 8010fea:	f7ff ff05 	bl	8010df8 <_Balloc>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	b928      	cbnz	r0, 8010ffe <__i2b+0x1a>
 8010ff2:	4b05      	ldr	r3, [pc, #20]	@ (8011008 <__i2b+0x24>)
 8010ff4:	f240 1145 	movw	r1, #325	@ 0x145
 8010ff8:	4804      	ldr	r0, [pc, #16]	@ (801100c <__i2b+0x28>)
 8010ffa:	f000 fcb3 	bl	8011964 <__assert_func>
 8010ffe:	2301      	movs	r3, #1
 8011000:	6144      	str	r4, [r0, #20]
 8011002:	6103      	str	r3, [r0, #16]
 8011004:	bd10      	pop	{r4, pc}
 8011006:	bf00      	nop
 8011008:	08012408 	.word	0x08012408
 801100c:	08012419 	.word	0x08012419

08011010 <__multiply>:
 8011010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	4614      	mov	r4, r2
 8011016:	690a      	ldr	r2, [r1, #16]
 8011018:	460f      	mov	r7, r1
 801101a:	b085      	sub	sp, #20
 801101c:	6923      	ldr	r3, [r4, #16]
 801101e:	429a      	cmp	r2, r3
 8011020:	bfa2      	ittt	ge
 8011022:	4623      	movge	r3, r4
 8011024:	460c      	movge	r4, r1
 8011026:	461f      	movge	r7, r3
 8011028:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801102c:	68a3      	ldr	r3, [r4, #8]
 801102e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011032:	6861      	ldr	r1, [r4, #4]
 8011034:	eb0a 0609 	add.w	r6, sl, r9
 8011038:	42b3      	cmp	r3, r6
 801103a:	bfb8      	it	lt
 801103c:	3101      	addlt	r1, #1
 801103e:	f7ff fedb 	bl	8010df8 <_Balloc>
 8011042:	b930      	cbnz	r0, 8011052 <__multiply+0x42>
 8011044:	4602      	mov	r2, r0
 8011046:	4b45      	ldr	r3, [pc, #276]	@ (801115c <__multiply+0x14c>)
 8011048:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801104c:	4844      	ldr	r0, [pc, #272]	@ (8011160 <__multiply+0x150>)
 801104e:	f000 fc89 	bl	8011964 <__assert_func>
 8011052:	f100 0514 	add.w	r5, r0, #20
 8011056:	2200      	movs	r2, #0
 8011058:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801105c:	462b      	mov	r3, r5
 801105e:	4543      	cmp	r3, r8
 8011060:	d321      	bcc.n	80110a6 <__multiply+0x96>
 8011062:	f107 0114 	add.w	r1, r7, #20
 8011066:	f104 0214 	add.w	r2, r4, #20
 801106a:	f104 0715 	add.w	r7, r4, #21
 801106e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011072:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011076:	9302      	str	r3, [sp, #8]
 8011078:	1b13      	subs	r3, r2, r4
 801107a:	3b15      	subs	r3, #21
 801107c:	f023 0303 	bic.w	r3, r3, #3
 8011080:	3304      	adds	r3, #4
 8011082:	42ba      	cmp	r2, r7
 8011084:	bf38      	it	cc
 8011086:	2304      	movcc	r3, #4
 8011088:	9301      	str	r3, [sp, #4]
 801108a:	9b02      	ldr	r3, [sp, #8]
 801108c:	9103      	str	r1, [sp, #12]
 801108e:	428b      	cmp	r3, r1
 8011090:	d80c      	bhi.n	80110ac <__multiply+0x9c>
 8011092:	2e00      	cmp	r6, #0
 8011094:	dd03      	ble.n	801109e <__multiply+0x8e>
 8011096:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801109a:	2b00      	cmp	r3, #0
 801109c:	d05b      	beq.n	8011156 <__multiply+0x146>
 801109e:	6106      	str	r6, [r0, #16]
 80110a0:	b005      	add	sp, #20
 80110a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a6:	f843 2b04 	str.w	r2, [r3], #4
 80110aa:	e7d8      	b.n	801105e <__multiply+0x4e>
 80110ac:	f8b1 a000 	ldrh.w	sl, [r1]
 80110b0:	f1ba 0f00 	cmp.w	sl, #0
 80110b4:	d024      	beq.n	8011100 <__multiply+0xf0>
 80110b6:	f104 0e14 	add.w	lr, r4, #20
 80110ba:	46a9      	mov	r9, r5
 80110bc:	f04f 0c00 	mov.w	ip, #0
 80110c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80110c4:	f8d9 3000 	ldr.w	r3, [r9]
 80110c8:	fa1f fb87 	uxth.w	fp, r7
 80110cc:	4572      	cmp	r2, lr
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80110d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80110d8:	f8d9 7000 	ldr.w	r7, [r9]
 80110dc:	4463      	add	r3, ip
 80110de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80110e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80110e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80110f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80110f4:	f849 3b04 	str.w	r3, [r9], #4
 80110f8:	d8e2      	bhi.n	80110c0 <__multiply+0xb0>
 80110fa:	9b01      	ldr	r3, [sp, #4]
 80110fc:	f845 c003 	str.w	ip, [r5, r3]
 8011100:	9b03      	ldr	r3, [sp, #12]
 8011102:	3104      	adds	r1, #4
 8011104:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011108:	f1b9 0f00 	cmp.w	r9, #0
 801110c:	d021      	beq.n	8011152 <__multiply+0x142>
 801110e:	682b      	ldr	r3, [r5, #0]
 8011110:	f104 0c14 	add.w	ip, r4, #20
 8011114:	46ae      	mov	lr, r5
 8011116:	f04f 0a00 	mov.w	sl, #0
 801111a:	f8bc b000 	ldrh.w	fp, [ip]
 801111e:	b29b      	uxth	r3, r3
 8011120:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011124:	fb09 770b 	mla	r7, r9, fp, r7
 8011128:	4457      	add	r7, sl
 801112a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801112e:	f84e 3b04 	str.w	r3, [lr], #4
 8011132:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011136:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801113a:	f8be 3000 	ldrh.w	r3, [lr]
 801113e:	4562      	cmp	r2, ip
 8011140:	fb09 330a 	mla	r3, r9, sl, r3
 8011144:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801114c:	d8e5      	bhi.n	801111a <__multiply+0x10a>
 801114e:	9f01      	ldr	r7, [sp, #4]
 8011150:	51eb      	str	r3, [r5, r7]
 8011152:	3504      	adds	r5, #4
 8011154:	e799      	b.n	801108a <__multiply+0x7a>
 8011156:	3e01      	subs	r6, #1
 8011158:	e79b      	b.n	8011092 <__multiply+0x82>
 801115a:	bf00      	nop
 801115c:	08012408 	.word	0x08012408
 8011160:	08012419 	.word	0x08012419

08011164 <__pow5mult>:
 8011164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011168:	4615      	mov	r5, r2
 801116a:	f012 0203 	ands.w	r2, r2, #3
 801116e:	4607      	mov	r7, r0
 8011170:	460e      	mov	r6, r1
 8011172:	d007      	beq.n	8011184 <__pow5mult+0x20>
 8011174:	3a01      	subs	r2, #1
 8011176:	4c25      	ldr	r4, [pc, #148]	@ (801120c <__pow5mult+0xa8>)
 8011178:	2300      	movs	r3, #0
 801117a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801117e:	f7ff fe9d 	bl	8010ebc <__multadd>
 8011182:	4606      	mov	r6, r0
 8011184:	10ad      	asrs	r5, r5, #2
 8011186:	d03d      	beq.n	8011204 <__pow5mult+0xa0>
 8011188:	69fc      	ldr	r4, [r7, #28]
 801118a:	b97c      	cbnz	r4, 80111ac <__pow5mult+0x48>
 801118c:	2010      	movs	r0, #16
 801118e:	f7ff fd7d 	bl	8010c8c <malloc>
 8011192:	4602      	mov	r2, r0
 8011194:	61f8      	str	r0, [r7, #28]
 8011196:	b928      	cbnz	r0, 80111a4 <__pow5mult+0x40>
 8011198:	4b1d      	ldr	r3, [pc, #116]	@ (8011210 <__pow5mult+0xac>)
 801119a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801119e:	481d      	ldr	r0, [pc, #116]	@ (8011214 <__pow5mult+0xb0>)
 80111a0:	f000 fbe0 	bl	8011964 <__assert_func>
 80111a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111a8:	6004      	str	r4, [r0, #0]
 80111aa:	60c4      	str	r4, [r0, #12]
 80111ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80111b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111b4:	b94c      	cbnz	r4, 80111ca <__pow5mult+0x66>
 80111b6:	f240 2171 	movw	r1, #625	@ 0x271
 80111ba:	4638      	mov	r0, r7
 80111bc:	f7ff ff12 	bl	8010fe4 <__i2b>
 80111c0:	2300      	movs	r3, #0
 80111c2:	4604      	mov	r4, r0
 80111c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80111c8:	6003      	str	r3, [r0, #0]
 80111ca:	f04f 0900 	mov.w	r9, #0
 80111ce:	07eb      	lsls	r3, r5, #31
 80111d0:	d50a      	bpl.n	80111e8 <__pow5mult+0x84>
 80111d2:	4631      	mov	r1, r6
 80111d4:	4622      	mov	r2, r4
 80111d6:	4638      	mov	r0, r7
 80111d8:	f7ff ff1a 	bl	8011010 <__multiply>
 80111dc:	4680      	mov	r8, r0
 80111de:	4631      	mov	r1, r6
 80111e0:	4638      	mov	r0, r7
 80111e2:	4646      	mov	r6, r8
 80111e4:	f7ff fe48 	bl	8010e78 <_Bfree>
 80111e8:	106d      	asrs	r5, r5, #1
 80111ea:	d00b      	beq.n	8011204 <__pow5mult+0xa0>
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	b938      	cbnz	r0, 8011200 <__pow5mult+0x9c>
 80111f0:	4622      	mov	r2, r4
 80111f2:	4621      	mov	r1, r4
 80111f4:	4638      	mov	r0, r7
 80111f6:	f7ff ff0b 	bl	8011010 <__multiply>
 80111fa:	6020      	str	r0, [r4, #0]
 80111fc:	f8c0 9000 	str.w	r9, [r0]
 8011200:	4604      	mov	r4, r0
 8011202:	e7e4      	b.n	80111ce <__pow5mult+0x6a>
 8011204:	4630      	mov	r0, r6
 8011206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801120a:	bf00      	nop
 801120c:	08012474 	.word	0x08012474
 8011210:	08012399 	.word	0x08012399
 8011214:	08012419 	.word	0x08012419

08011218 <__lshift>:
 8011218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801121c:	460c      	mov	r4, r1
 801121e:	4607      	mov	r7, r0
 8011220:	4691      	mov	r9, r2
 8011222:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011226:	6923      	ldr	r3, [r4, #16]
 8011228:	6849      	ldr	r1, [r1, #4]
 801122a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801122e:	68a3      	ldr	r3, [r4, #8]
 8011230:	f108 0601 	add.w	r6, r8, #1
 8011234:	42b3      	cmp	r3, r6
 8011236:	db0b      	blt.n	8011250 <__lshift+0x38>
 8011238:	4638      	mov	r0, r7
 801123a:	f7ff fddd 	bl	8010df8 <_Balloc>
 801123e:	4605      	mov	r5, r0
 8011240:	b948      	cbnz	r0, 8011256 <__lshift+0x3e>
 8011242:	4602      	mov	r2, r0
 8011244:	4b28      	ldr	r3, [pc, #160]	@ (80112e8 <__lshift+0xd0>)
 8011246:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801124a:	4828      	ldr	r0, [pc, #160]	@ (80112ec <__lshift+0xd4>)
 801124c:	f000 fb8a 	bl	8011964 <__assert_func>
 8011250:	3101      	adds	r1, #1
 8011252:	005b      	lsls	r3, r3, #1
 8011254:	e7ee      	b.n	8011234 <__lshift+0x1c>
 8011256:	2300      	movs	r3, #0
 8011258:	f100 0114 	add.w	r1, r0, #20
 801125c:	f100 0210 	add.w	r2, r0, #16
 8011260:	4618      	mov	r0, r3
 8011262:	4553      	cmp	r3, sl
 8011264:	db33      	blt.n	80112ce <__lshift+0xb6>
 8011266:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801126a:	f104 0314 	add.w	r3, r4, #20
 801126e:	6920      	ldr	r0, [r4, #16]
 8011270:	f019 091f 	ands.w	r9, r9, #31
 8011274:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011278:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801127c:	d02b      	beq.n	80112d6 <__lshift+0xbe>
 801127e:	f1c9 0e20 	rsb	lr, r9, #32
 8011282:	468a      	mov	sl, r1
 8011284:	2200      	movs	r2, #0
 8011286:	6818      	ldr	r0, [r3, #0]
 8011288:	fa00 f009 	lsl.w	r0, r0, r9
 801128c:	4310      	orrs	r0, r2
 801128e:	f84a 0b04 	str.w	r0, [sl], #4
 8011292:	f853 2b04 	ldr.w	r2, [r3], #4
 8011296:	459c      	cmp	ip, r3
 8011298:	fa22 f20e 	lsr.w	r2, r2, lr
 801129c:	d8f3      	bhi.n	8011286 <__lshift+0x6e>
 801129e:	ebac 0304 	sub.w	r3, ip, r4
 80112a2:	f104 0015 	add.w	r0, r4, #21
 80112a6:	3b15      	subs	r3, #21
 80112a8:	f023 0303 	bic.w	r3, r3, #3
 80112ac:	3304      	adds	r3, #4
 80112ae:	4584      	cmp	ip, r0
 80112b0:	bf38      	it	cc
 80112b2:	2304      	movcc	r3, #4
 80112b4:	50ca      	str	r2, [r1, r3]
 80112b6:	b10a      	cbz	r2, 80112bc <__lshift+0xa4>
 80112b8:	f108 0602 	add.w	r6, r8, #2
 80112bc:	3e01      	subs	r6, #1
 80112be:	4638      	mov	r0, r7
 80112c0:	4621      	mov	r1, r4
 80112c2:	612e      	str	r6, [r5, #16]
 80112c4:	f7ff fdd8 	bl	8010e78 <_Bfree>
 80112c8:	4628      	mov	r0, r5
 80112ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ce:	3301      	adds	r3, #1
 80112d0:	f842 0f04 	str.w	r0, [r2, #4]!
 80112d4:	e7c5      	b.n	8011262 <__lshift+0x4a>
 80112d6:	3904      	subs	r1, #4
 80112d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80112dc:	459c      	cmp	ip, r3
 80112de:	f841 2f04 	str.w	r2, [r1, #4]!
 80112e2:	d8f9      	bhi.n	80112d8 <__lshift+0xc0>
 80112e4:	e7ea      	b.n	80112bc <__lshift+0xa4>
 80112e6:	bf00      	nop
 80112e8:	08012408 	.word	0x08012408
 80112ec:	08012419 	.word	0x08012419

080112f0 <__mcmp>:
 80112f0:	4603      	mov	r3, r0
 80112f2:	690a      	ldr	r2, [r1, #16]
 80112f4:	6900      	ldr	r0, [r0, #16]
 80112f6:	1a80      	subs	r0, r0, r2
 80112f8:	b530      	push	{r4, r5, lr}
 80112fa:	d10e      	bne.n	801131a <__mcmp+0x2a>
 80112fc:	3314      	adds	r3, #20
 80112fe:	3114      	adds	r1, #20
 8011300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801130c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011310:	4295      	cmp	r5, r2
 8011312:	d003      	beq.n	801131c <__mcmp+0x2c>
 8011314:	d205      	bcs.n	8011322 <__mcmp+0x32>
 8011316:	f04f 30ff 	mov.w	r0, #4294967295
 801131a:	bd30      	pop	{r4, r5, pc}
 801131c:	42a3      	cmp	r3, r4
 801131e:	d3f3      	bcc.n	8011308 <__mcmp+0x18>
 8011320:	e7fb      	b.n	801131a <__mcmp+0x2a>
 8011322:	2001      	movs	r0, #1
 8011324:	e7f9      	b.n	801131a <__mcmp+0x2a>
	...

08011328 <__mdiff>:
 8011328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801132c:	4689      	mov	r9, r1
 801132e:	4606      	mov	r6, r0
 8011330:	4611      	mov	r1, r2
 8011332:	4614      	mov	r4, r2
 8011334:	4648      	mov	r0, r9
 8011336:	f7ff ffdb 	bl	80112f0 <__mcmp>
 801133a:	1e05      	subs	r5, r0, #0
 801133c:	d112      	bne.n	8011364 <__mdiff+0x3c>
 801133e:	4629      	mov	r1, r5
 8011340:	4630      	mov	r0, r6
 8011342:	f7ff fd59 	bl	8010df8 <_Balloc>
 8011346:	4602      	mov	r2, r0
 8011348:	b928      	cbnz	r0, 8011356 <__mdiff+0x2e>
 801134a:	4b41      	ldr	r3, [pc, #260]	@ (8011450 <__mdiff+0x128>)
 801134c:	f240 2137 	movw	r1, #567	@ 0x237
 8011350:	4840      	ldr	r0, [pc, #256]	@ (8011454 <__mdiff+0x12c>)
 8011352:	f000 fb07 	bl	8011964 <__assert_func>
 8011356:	2301      	movs	r3, #1
 8011358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801135c:	4610      	mov	r0, r2
 801135e:	b003      	add	sp, #12
 8011360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011364:	bfbc      	itt	lt
 8011366:	464b      	movlt	r3, r9
 8011368:	46a1      	movlt	r9, r4
 801136a:	4630      	mov	r0, r6
 801136c:	bfb8      	it	lt
 801136e:	2501      	movlt	r5, #1
 8011370:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011374:	bfb4      	ite	lt
 8011376:	461c      	movlt	r4, r3
 8011378:	2500      	movge	r5, #0
 801137a:	f7ff fd3d 	bl	8010df8 <_Balloc>
 801137e:	4602      	mov	r2, r0
 8011380:	b918      	cbnz	r0, 801138a <__mdiff+0x62>
 8011382:	4b33      	ldr	r3, [pc, #204]	@ (8011450 <__mdiff+0x128>)
 8011384:	f240 2145 	movw	r1, #581	@ 0x245
 8011388:	e7e2      	b.n	8011350 <__mdiff+0x28>
 801138a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801138e:	f104 0e14 	add.w	lr, r4, #20
 8011392:	6926      	ldr	r6, [r4, #16]
 8011394:	f100 0b14 	add.w	fp, r0, #20
 8011398:	60c5      	str	r5, [r0, #12]
 801139a:	f109 0514 	add.w	r5, r9, #20
 801139e:	f109 0310 	add.w	r3, r9, #16
 80113a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113aa:	46d9      	mov	r9, fp
 80113ac:	f04f 0c00 	mov.w	ip, #0
 80113b0:	9301      	str	r3, [sp, #4]
 80113b2:	9b01      	ldr	r3, [sp, #4]
 80113b4:	f85e 0b04 	ldr.w	r0, [lr], #4
 80113b8:	f853 af04 	ldr.w	sl, [r3, #4]!
 80113bc:	4576      	cmp	r6, lr
 80113be:	9301      	str	r3, [sp, #4]
 80113c0:	fa1f f38a 	uxth.w	r3, sl
 80113c4:	4619      	mov	r1, r3
 80113c6:	b283      	uxth	r3, r0
 80113c8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80113cc:	eba1 0303 	sub.w	r3, r1, r3
 80113d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80113d4:	4463      	add	r3, ip
 80113d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80113da:	b29b      	uxth	r3, r3
 80113dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80113e4:	f849 3b04 	str.w	r3, [r9], #4
 80113e8:	d8e3      	bhi.n	80113b2 <__mdiff+0x8a>
 80113ea:	1b33      	subs	r3, r6, r4
 80113ec:	3415      	adds	r4, #21
 80113ee:	3b15      	subs	r3, #21
 80113f0:	f023 0303 	bic.w	r3, r3, #3
 80113f4:	3304      	adds	r3, #4
 80113f6:	42a6      	cmp	r6, r4
 80113f8:	bf38      	it	cc
 80113fa:	2304      	movcc	r3, #4
 80113fc:	441d      	add	r5, r3
 80113fe:	445b      	add	r3, fp
 8011400:	462c      	mov	r4, r5
 8011402:	461e      	mov	r6, r3
 8011404:	4544      	cmp	r4, r8
 8011406:	d30e      	bcc.n	8011426 <__mdiff+0xfe>
 8011408:	f108 0103 	add.w	r1, r8, #3
 801140c:	1b49      	subs	r1, r1, r5
 801140e:	3d03      	subs	r5, #3
 8011410:	f021 0103 	bic.w	r1, r1, #3
 8011414:	45a8      	cmp	r8, r5
 8011416:	bf38      	it	cc
 8011418:	2100      	movcc	r1, #0
 801141a:	440b      	add	r3, r1
 801141c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011420:	b199      	cbz	r1, 801144a <__mdiff+0x122>
 8011422:	6117      	str	r7, [r2, #16]
 8011424:	e79a      	b.n	801135c <__mdiff+0x34>
 8011426:	f854 1b04 	ldr.w	r1, [r4], #4
 801142a:	46e6      	mov	lr, ip
 801142c:	fa1f fc81 	uxth.w	ip, r1
 8011430:	0c08      	lsrs	r0, r1, #16
 8011432:	4471      	add	r1, lr
 8011434:	44f4      	add	ip, lr
 8011436:	b289      	uxth	r1, r1
 8011438:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801143c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011444:	f846 1b04 	str.w	r1, [r6], #4
 8011448:	e7dc      	b.n	8011404 <__mdiff+0xdc>
 801144a:	3f01      	subs	r7, #1
 801144c:	e7e6      	b.n	801141c <__mdiff+0xf4>
 801144e:	bf00      	nop
 8011450:	08012408 	.word	0x08012408
 8011454:	08012419 	.word	0x08012419

08011458 <__d2b>:
 8011458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801145c:	460f      	mov	r7, r1
 801145e:	2101      	movs	r1, #1
 8011460:	4616      	mov	r6, r2
 8011462:	ec59 8b10 	vmov	r8, r9, d0
 8011466:	f7ff fcc7 	bl	8010df8 <_Balloc>
 801146a:	4604      	mov	r4, r0
 801146c:	b930      	cbnz	r0, 801147c <__d2b+0x24>
 801146e:	4602      	mov	r2, r0
 8011470:	4b23      	ldr	r3, [pc, #140]	@ (8011500 <__d2b+0xa8>)
 8011472:	f240 310f 	movw	r1, #783	@ 0x30f
 8011476:	4823      	ldr	r0, [pc, #140]	@ (8011504 <__d2b+0xac>)
 8011478:	f000 fa74 	bl	8011964 <__assert_func>
 801147c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011484:	b10d      	cbz	r5, 801148a <__d2b+0x32>
 8011486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801148a:	9301      	str	r3, [sp, #4]
 801148c:	f1b8 0300 	subs.w	r3, r8, #0
 8011490:	d023      	beq.n	80114da <__d2b+0x82>
 8011492:	4668      	mov	r0, sp
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	f7ff fd78 	bl	8010f8a <__lo0bits>
 801149a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801149e:	b1d0      	cbz	r0, 80114d6 <__d2b+0x7e>
 80114a0:	f1c0 0320 	rsb	r3, r0, #32
 80114a4:	fa02 f303 	lsl.w	r3, r2, r3
 80114a8:	40c2      	lsrs	r2, r0
 80114aa:	430b      	orrs	r3, r1
 80114ac:	9201      	str	r2, [sp, #4]
 80114ae:	6163      	str	r3, [r4, #20]
 80114b0:	9b01      	ldr	r3, [sp, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	61a3      	str	r3, [r4, #24]
 80114b6:	bf0c      	ite	eq
 80114b8:	2201      	moveq	r2, #1
 80114ba:	2202      	movne	r2, #2
 80114bc:	6122      	str	r2, [r4, #16]
 80114be:	b1a5      	cbz	r5, 80114ea <__d2b+0x92>
 80114c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80114c4:	4405      	add	r5, r0
 80114c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80114ca:	603d      	str	r5, [r7, #0]
 80114cc:	6030      	str	r0, [r6, #0]
 80114ce:	4620      	mov	r0, r4
 80114d0:	b003      	add	sp, #12
 80114d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114d6:	6161      	str	r1, [r4, #20]
 80114d8:	e7ea      	b.n	80114b0 <__d2b+0x58>
 80114da:	a801      	add	r0, sp, #4
 80114dc:	f7ff fd55 	bl	8010f8a <__lo0bits>
 80114e0:	9b01      	ldr	r3, [sp, #4]
 80114e2:	3020      	adds	r0, #32
 80114e4:	2201      	movs	r2, #1
 80114e6:	6163      	str	r3, [r4, #20]
 80114e8:	e7e8      	b.n	80114bc <__d2b+0x64>
 80114ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80114ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114f2:	6038      	str	r0, [r7, #0]
 80114f4:	6918      	ldr	r0, [r3, #16]
 80114f6:	f7ff fd29 	bl	8010f4c <__hi0bits>
 80114fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114fe:	e7e5      	b.n	80114cc <__d2b+0x74>
 8011500:	08012408 	.word	0x08012408
 8011504:	08012419 	.word	0x08012419

08011508 <__ssputs_r>:
 8011508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801150c:	461f      	mov	r7, r3
 801150e:	688e      	ldr	r6, [r1, #8]
 8011510:	4682      	mov	sl, r0
 8011512:	460c      	mov	r4, r1
 8011514:	42be      	cmp	r6, r7
 8011516:	4690      	mov	r8, r2
 8011518:	680b      	ldr	r3, [r1, #0]
 801151a:	d82d      	bhi.n	8011578 <__ssputs_r+0x70>
 801151c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011520:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011524:	d026      	beq.n	8011574 <__ssputs_r+0x6c>
 8011526:	6965      	ldr	r5, [r4, #20]
 8011528:	6909      	ldr	r1, [r1, #16]
 801152a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801152e:	eba3 0901 	sub.w	r9, r3, r1
 8011532:	1c7b      	adds	r3, r7, #1
 8011534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011538:	444b      	add	r3, r9
 801153a:	106d      	asrs	r5, r5, #1
 801153c:	429d      	cmp	r5, r3
 801153e:	bf38      	it	cc
 8011540:	461d      	movcc	r5, r3
 8011542:	0553      	lsls	r3, r2, #21
 8011544:	d527      	bpl.n	8011596 <__ssputs_r+0x8e>
 8011546:	4629      	mov	r1, r5
 8011548:	f7ff fbca 	bl	8010ce0 <_malloc_r>
 801154c:	4606      	mov	r6, r0
 801154e:	b360      	cbz	r0, 80115aa <__ssputs_r+0xa2>
 8011550:	464a      	mov	r2, r9
 8011552:	6921      	ldr	r1, [r4, #16]
 8011554:	f7fe fcf1 	bl	800ff3a <memcpy>
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801155e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	6126      	str	r6, [r4, #16]
 8011566:	444e      	add	r6, r9
 8011568:	6165      	str	r5, [r4, #20]
 801156a:	eba5 0509 	sub.w	r5, r5, r9
 801156e:	6026      	str	r6, [r4, #0]
 8011570:	463e      	mov	r6, r7
 8011572:	60a5      	str	r5, [r4, #8]
 8011574:	42be      	cmp	r6, r7
 8011576:	d900      	bls.n	801157a <__ssputs_r+0x72>
 8011578:	463e      	mov	r6, r7
 801157a:	4632      	mov	r2, r6
 801157c:	4641      	mov	r1, r8
 801157e:	6820      	ldr	r0, [r4, #0]
 8011580:	f000 f9c6 	bl	8011910 <memmove>
 8011584:	68a3      	ldr	r3, [r4, #8]
 8011586:	2000      	movs	r0, #0
 8011588:	1b9b      	subs	r3, r3, r6
 801158a:	60a3      	str	r3, [r4, #8]
 801158c:	6823      	ldr	r3, [r4, #0]
 801158e:	4433      	add	r3, r6
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011596:	462a      	mov	r2, r5
 8011598:	f000 fa28 	bl	80119ec <_realloc_r>
 801159c:	4606      	mov	r6, r0
 801159e:	2800      	cmp	r0, #0
 80115a0:	d1e0      	bne.n	8011564 <__ssputs_r+0x5c>
 80115a2:	6921      	ldr	r1, [r4, #16]
 80115a4:	4650      	mov	r0, sl
 80115a6:	f7ff fb27 	bl	8010bf8 <_free_r>
 80115aa:	230c      	movs	r3, #12
 80115ac:	f04f 30ff 	mov.w	r0, #4294967295
 80115b0:	f8ca 3000 	str.w	r3, [sl]
 80115b4:	89a3      	ldrh	r3, [r4, #12]
 80115b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115ba:	81a3      	strh	r3, [r4, #12]
 80115bc:	e7e9      	b.n	8011592 <__ssputs_r+0x8a>
	...

080115c0 <_svfiprintf_r>:
 80115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c4:	4698      	mov	r8, r3
 80115c6:	898b      	ldrh	r3, [r1, #12]
 80115c8:	b09d      	sub	sp, #116	@ 0x74
 80115ca:	4607      	mov	r7, r0
 80115cc:	061b      	lsls	r3, r3, #24
 80115ce:	460d      	mov	r5, r1
 80115d0:	4614      	mov	r4, r2
 80115d2:	d510      	bpl.n	80115f6 <_svfiprintf_r+0x36>
 80115d4:	690b      	ldr	r3, [r1, #16]
 80115d6:	b973      	cbnz	r3, 80115f6 <_svfiprintf_r+0x36>
 80115d8:	2140      	movs	r1, #64	@ 0x40
 80115da:	f7ff fb81 	bl	8010ce0 <_malloc_r>
 80115de:	6028      	str	r0, [r5, #0]
 80115e0:	6128      	str	r0, [r5, #16]
 80115e2:	b930      	cbnz	r0, 80115f2 <_svfiprintf_r+0x32>
 80115e4:	230c      	movs	r3, #12
 80115e6:	603b      	str	r3, [r7, #0]
 80115e8:	f04f 30ff 	mov.w	r0, #4294967295
 80115ec:	b01d      	add	sp, #116	@ 0x74
 80115ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f2:	2340      	movs	r3, #64	@ 0x40
 80115f4:	616b      	str	r3, [r5, #20]
 80115f6:	2300      	movs	r3, #0
 80115f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80115fc:	f04f 0901 	mov.w	r9, #1
 8011600:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80117a4 <_svfiprintf_r+0x1e4>
 8011604:	9309      	str	r3, [sp, #36]	@ 0x24
 8011606:	2320      	movs	r3, #32
 8011608:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801160c:	2330      	movs	r3, #48	@ 0x30
 801160e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011612:	4623      	mov	r3, r4
 8011614:	469a      	mov	sl, r3
 8011616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801161a:	b10a      	cbz	r2, 8011620 <_svfiprintf_r+0x60>
 801161c:	2a25      	cmp	r2, #37	@ 0x25
 801161e:	d1f9      	bne.n	8011614 <_svfiprintf_r+0x54>
 8011620:	ebba 0b04 	subs.w	fp, sl, r4
 8011624:	d00b      	beq.n	801163e <_svfiprintf_r+0x7e>
 8011626:	465b      	mov	r3, fp
 8011628:	4622      	mov	r2, r4
 801162a:	4629      	mov	r1, r5
 801162c:	4638      	mov	r0, r7
 801162e:	f7ff ff6b 	bl	8011508 <__ssputs_r>
 8011632:	3001      	adds	r0, #1
 8011634:	f000 80a7 	beq.w	8011786 <_svfiprintf_r+0x1c6>
 8011638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801163a:	445a      	add	r2, fp
 801163c:	9209      	str	r2, [sp, #36]	@ 0x24
 801163e:	f89a 3000 	ldrb.w	r3, [sl]
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 809f 	beq.w	8011786 <_svfiprintf_r+0x1c6>
 8011648:	2300      	movs	r3, #0
 801164a:	f04f 32ff 	mov.w	r2, #4294967295
 801164e:	f10a 0a01 	add.w	sl, sl, #1
 8011652:	9304      	str	r3, [sp, #16]
 8011654:	9307      	str	r3, [sp, #28]
 8011656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801165a:	931a      	str	r3, [sp, #104]	@ 0x68
 801165c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011660:	4654      	mov	r4, sl
 8011662:	2205      	movs	r2, #5
 8011664:	484f      	ldr	r0, [pc, #316]	@ (80117a4 <_svfiprintf_r+0x1e4>)
 8011666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801166a:	f7fe fc58 	bl	800ff1e <memchr>
 801166e:	9a04      	ldr	r2, [sp, #16]
 8011670:	b9d8      	cbnz	r0, 80116aa <_svfiprintf_r+0xea>
 8011672:	06d0      	lsls	r0, r2, #27
 8011674:	bf44      	itt	mi
 8011676:	2320      	movmi	r3, #32
 8011678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801167c:	0711      	lsls	r1, r2, #28
 801167e:	bf44      	itt	mi
 8011680:	232b      	movmi	r3, #43	@ 0x2b
 8011682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011686:	f89a 3000 	ldrb.w	r3, [sl]
 801168a:	2b2a      	cmp	r3, #42	@ 0x2a
 801168c:	d015      	beq.n	80116ba <_svfiprintf_r+0xfa>
 801168e:	9a07      	ldr	r2, [sp, #28]
 8011690:	4654      	mov	r4, sl
 8011692:	2000      	movs	r0, #0
 8011694:	f04f 0c0a 	mov.w	ip, #10
 8011698:	4621      	mov	r1, r4
 801169a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801169e:	3b30      	subs	r3, #48	@ 0x30
 80116a0:	2b09      	cmp	r3, #9
 80116a2:	d94b      	bls.n	801173c <_svfiprintf_r+0x17c>
 80116a4:	b1b0      	cbz	r0, 80116d4 <_svfiprintf_r+0x114>
 80116a6:	9207      	str	r2, [sp, #28]
 80116a8:	e014      	b.n	80116d4 <_svfiprintf_r+0x114>
 80116aa:	eba0 0308 	sub.w	r3, r0, r8
 80116ae:	46a2      	mov	sl, r4
 80116b0:	fa09 f303 	lsl.w	r3, r9, r3
 80116b4:	4313      	orrs	r3, r2
 80116b6:	9304      	str	r3, [sp, #16]
 80116b8:	e7d2      	b.n	8011660 <_svfiprintf_r+0xa0>
 80116ba:	9b03      	ldr	r3, [sp, #12]
 80116bc:	1d19      	adds	r1, r3, #4
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	9103      	str	r1, [sp, #12]
 80116c4:	bfbb      	ittet	lt
 80116c6:	425b      	neglt	r3, r3
 80116c8:	f042 0202 	orrlt.w	r2, r2, #2
 80116cc:	9307      	strge	r3, [sp, #28]
 80116ce:	9307      	strlt	r3, [sp, #28]
 80116d0:	bfb8      	it	lt
 80116d2:	9204      	strlt	r2, [sp, #16]
 80116d4:	7823      	ldrb	r3, [r4, #0]
 80116d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80116d8:	d10a      	bne.n	80116f0 <_svfiprintf_r+0x130>
 80116da:	7863      	ldrb	r3, [r4, #1]
 80116dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80116de:	d132      	bne.n	8011746 <_svfiprintf_r+0x186>
 80116e0:	9b03      	ldr	r3, [sp, #12]
 80116e2:	3402      	adds	r4, #2
 80116e4:	1d1a      	adds	r2, r3, #4
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116ec:	9203      	str	r2, [sp, #12]
 80116ee:	9305      	str	r3, [sp, #20]
 80116f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80117b4 <_svfiprintf_r+0x1f4>
 80116f4:	2203      	movs	r2, #3
 80116f6:	7821      	ldrb	r1, [r4, #0]
 80116f8:	4650      	mov	r0, sl
 80116fa:	f7fe fc10 	bl	800ff1e <memchr>
 80116fe:	b138      	cbz	r0, 8011710 <_svfiprintf_r+0x150>
 8011700:	eba0 000a 	sub.w	r0, r0, sl
 8011704:	2240      	movs	r2, #64	@ 0x40
 8011706:	9b04      	ldr	r3, [sp, #16]
 8011708:	3401      	adds	r4, #1
 801170a:	4082      	lsls	r2, r0
 801170c:	4313      	orrs	r3, r2
 801170e:	9304      	str	r3, [sp, #16]
 8011710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011714:	2206      	movs	r2, #6
 8011716:	4824      	ldr	r0, [pc, #144]	@ (80117a8 <_svfiprintf_r+0x1e8>)
 8011718:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801171c:	f7fe fbff 	bl	800ff1e <memchr>
 8011720:	2800      	cmp	r0, #0
 8011722:	d036      	beq.n	8011792 <_svfiprintf_r+0x1d2>
 8011724:	4b21      	ldr	r3, [pc, #132]	@ (80117ac <_svfiprintf_r+0x1ec>)
 8011726:	bb1b      	cbnz	r3, 8011770 <_svfiprintf_r+0x1b0>
 8011728:	9b03      	ldr	r3, [sp, #12]
 801172a:	3307      	adds	r3, #7
 801172c:	f023 0307 	bic.w	r3, r3, #7
 8011730:	3308      	adds	r3, #8
 8011732:	9303      	str	r3, [sp, #12]
 8011734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011736:	4433      	add	r3, r6
 8011738:	9309      	str	r3, [sp, #36]	@ 0x24
 801173a:	e76a      	b.n	8011612 <_svfiprintf_r+0x52>
 801173c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011740:	460c      	mov	r4, r1
 8011742:	2001      	movs	r0, #1
 8011744:	e7a8      	b.n	8011698 <_svfiprintf_r+0xd8>
 8011746:	2300      	movs	r3, #0
 8011748:	3401      	adds	r4, #1
 801174a:	f04f 0c0a 	mov.w	ip, #10
 801174e:	4619      	mov	r1, r3
 8011750:	9305      	str	r3, [sp, #20]
 8011752:	4620      	mov	r0, r4
 8011754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011758:	3a30      	subs	r2, #48	@ 0x30
 801175a:	2a09      	cmp	r2, #9
 801175c:	d903      	bls.n	8011766 <_svfiprintf_r+0x1a6>
 801175e:	2b00      	cmp	r3, #0
 8011760:	d0c6      	beq.n	80116f0 <_svfiprintf_r+0x130>
 8011762:	9105      	str	r1, [sp, #20]
 8011764:	e7c4      	b.n	80116f0 <_svfiprintf_r+0x130>
 8011766:	fb0c 2101 	mla	r1, ip, r1, r2
 801176a:	4604      	mov	r4, r0
 801176c:	2301      	movs	r3, #1
 801176e:	e7f0      	b.n	8011752 <_svfiprintf_r+0x192>
 8011770:	ab03      	add	r3, sp, #12
 8011772:	462a      	mov	r2, r5
 8011774:	a904      	add	r1, sp, #16
 8011776:	4638      	mov	r0, r7
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	4b0d      	ldr	r3, [pc, #52]	@ (80117b0 <_svfiprintf_r+0x1f0>)
 801177c:	f7fd fe6e 	bl	800f45c <_printf_float>
 8011780:	1c42      	adds	r2, r0, #1
 8011782:	4606      	mov	r6, r0
 8011784:	d1d6      	bne.n	8011734 <_svfiprintf_r+0x174>
 8011786:	89ab      	ldrh	r3, [r5, #12]
 8011788:	065b      	lsls	r3, r3, #25
 801178a:	f53f af2d 	bmi.w	80115e8 <_svfiprintf_r+0x28>
 801178e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011790:	e72c      	b.n	80115ec <_svfiprintf_r+0x2c>
 8011792:	ab03      	add	r3, sp, #12
 8011794:	462a      	mov	r2, r5
 8011796:	a904      	add	r1, sp, #16
 8011798:	4638      	mov	r0, r7
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	4b04      	ldr	r3, [pc, #16]	@ (80117b0 <_svfiprintf_r+0x1f0>)
 801179e:	f7fe f8f9 	bl	800f994 <_printf_i>
 80117a2:	e7ed      	b.n	8011780 <_svfiprintf_r+0x1c0>
 80117a4:	08012570 	.word	0x08012570
 80117a8:	0801257a 	.word	0x0801257a
 80117ac:	0800f45d 	.word	0x0800f45d
 80117b0:	08011509 	.word	0x08011509
 80117b4:	08012576 	.word	0x08012576

080117b8 <__sflush_r>:
 80117b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c0:	0716      	lsls	r6, r2, #28
 80117c2:	4605      	mov	r5, r0
 80117c4:	460c      	mov	r4, r1
 80117c6:	d454      	bmi.n	8011872 <__sflush_r+0xba>
 80117c8:	684b      	ldr	r3, [r1, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	dc02      	bgt.n	80117d4 <__sflush_r+0x1c>
 80117ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	dd48      	ble.n	8011866 <__sflush_r+0xae>
 80117d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117d6:	2e00      	cmp	r6, #0
 80117d8:	d045      	beq.n	8011866 <__sflush_r+0xae>
 80117da:	2300      	movs	r3, #0
 80117dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80117e0:	682f      	ldr	r7, [r5, #0]
 80117e2:	6a21      	ldr	r1, [r4, #32]
 80117e4:	602b      	str	r3, [r5, #0]
 80117e6:	d030      	beq.n	801184a <__sflush_r+0x92>
 80117e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	0759      	lsls	r1, r3, #29
 80117ee:	d505      	bpl.n	80117fc <__sflush_r+0x44>
 80117f0:	6863      	ldr	r3, [r4, #4]
 80117f2:	1ad2      	subs	r2, r2, r3
 80117f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117f6:	b10b      	cbz	r3, 80117fc <__sflush_r+0x44>
 80117f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117fa:	1ad2      	subs	r2, r2, r3
 80117fc:	2300      	movs	r3, #0
 80117fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011800:	6a21      	ldr	r1, [r4, #32]
 8011802:	4628      	mov	r0, r5
 8011804:	47b0      	blx	r6
 8011806:	1c43      	adds	r3, r0, #1
 8011808:	89a3      	ldrh	r3, [r4, #12]
 801180a:	d106      	bne.n	801181a <__sflush_r+0x62>
 801180c:	6829      	ldr	r1, [r5, #0]
 801180e:	291d      	cmp	r1, #29
 8011810:	d82b      	bhi.n	801186a <__sflush_r+0xb2>
 8011812:	4a2a      	ldr	r2, [pc, #168]	@ (80118bc <__sflush_r+0x104>)
 8011814:	410a      	asrs	r2, r1
 8011816:	07d6      	lsls	r6, r2, #31
 8011818:	d427      	bmi.n	801186a <__sflush_r+0xb2>
 801181a:	2200      	movs	r2, #0
 801181c:	04d9      	lsls	r1, r3, #19
 801181e:	6062      	str	r2, [r4, #4]
 8011820:	6922      	ldr	r2, [r4, #16]
 8011822:	6022      	str	r2, [r4, #0]
 8011824:	d504      	bpl.n	8011830 <__sflush_r+0x78>
 8011826:	1c42      	adds	r2, r0, #1
 8011828:	d101      	bne.n	801182e <__sflush_r+0x76>
 801182a:	682b      	ldr	r3, [r5, #0]
 801182c:	b903      	cbnz	r3, 8011830 <__sflush_r+0x78>
 801182e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011832:	602f      	str	r7, [r5, #0]
 8011834:	b1b9      	cbz	r1, 8011866 <__sflush_r+0xae>
 8011836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801183a:	4299      	cmp	r1, r3
 801183c:	d002      	beq.n	8011844 <__sflush_r+0x8c>
 801183e:	4628      	mov	r0, r5
 8011840:	f7ff f9da 	bl	8010bf8 <_free_r>
 8011844:	2300      	movs	r3, #0
 8011846:	6363      	str	r3, [r4, #52]	@ 0x34
 8011848:	e00d      	b.n	8011866 <__sflush_r+0xae>
 801184a:	2301      	movs	r3, #1
 801184c:	4628      	mov	r0, r5
 801184e:	47b0      	blx	r6
 8011850:	4602      	mov	r2, r0
 8011852:	1c50      	adds	r0, r2, #1
 8011854:	d1c9      	bne.n	80117ea <__sflush_r+0x32>
 8011856:	682b      	ldr	r3, [r5, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d0c6      	beq.n	80117ea <__sflush_r+0x32>
 801185c:	2b1d      	cmp	r3, #29
 801185e:	d001      	beq.n	8011864 <__sflush_r+0xac>
 8011860:	2b16      	cmp	r3, #22
 8011862:	d11d      	bne.n	80118a0 <__sflush_r+0xe8>
 8011864:	602f      	str	r7, [r5, #0]
 8011866:	2000      	movs	r0, #0
 8011868:	e021      	b.n	80118ae <__sflush_r+0xf6>
 801186a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801186e:	b21b      	sxth	r3, r3
 8011870:	e01a      	b.n	80118a8 <__sflush_r+0xf0>
 8011872:	690f      	ldr	r7, [r1, #16]
 8011874:	2f00      	cmp	r7, #0
 8011876:	d0f6      	beq.n	8011866 <__sflush_r+0xae>
 8011878:	0793      	lsls	r3, r2, #30
 801187a:	680e      	ldr	r6, [r1, #0]
 801187c:	600f      	str	r7, [r1, #0]
 801187e:	bf0c      	ite	eq
 8011880:	694b      	ldreq	r3, [r1, #20]
 8011882:	2300      	movne	r3, #0
 8011884:	eba6 0807 	sub.w	r8, r6, r7
 8011888:	608b      	str	r3, [r1, #8]
 801188a:	f1b8 0f00 	cmp.w	r8, #0
 801188e:	ddea      	ble.n	8011866 <__sflush_r+0xae>
 8011890:	4643      	mov	r3, r8
 8011892:	463a      	mov	r2, r7
 8011894:	6a21      	ldr	r1, [r4, #32]
 8011896:	4628      	mov	r0, r5
 8011898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801189a:	47b0      	blx	r6
 801189c:	2800      	cmp	r0, #0
 801189e:	dc08      	bgt.n	80118b2 <__sflush_r+0xfa>
 80118a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118a8:	f04f 30ff 	mov.w	r0, #4294967295
 80118ac:	81a3      	strh	r3, [r4, #12]
 80118ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b2:	4407      	add	r7, r0
 80118b4:	eba8 0800 	sub.w	r8, r8, r0
 80118b8:	e7e7      	b.n	801188a <__sflush_r+0xd2>
 80118ba:	bf00      	nop
 80118bc:	dfbffffe 	.word	0xdfbffffe

080118c0 <_fflush_r>:
 80118c0:	b538      	push	{r3, r4, r5, lr}
 80118c2:	690b      	ldr	r3, [r1, #16]
 80118c4:	4605      	mov	r5, r0
 80118c6:	460c      	mov	r4, r1
 80118c8:	b913      	cbnz	r3, 80118d0 <_fflush_r+0x10>
 80118ca:	2500      	movs	r5, #0
 80118cc:	4628      	mov	r0, r5
 80118ce:	bd38      	pop	{r3, r4, r5, pc}
 80118d0:	b118      	cbz	r0, 80118da <_fflush_r+0x1a>
 80118d2:	6a03      	ldr	r3, [r0, #32]
 80118d4:	b90b      	cbnz	r3, 80118da <_fflush_r+0x1a>
 80118d6:	f7fe fa09 	bl	800fcec <__sinit>
 80118da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d0f3      	beq.n	80118ca <_fflush_r+0xa>
 80118e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80118e4:	07d0      	lsls	r0, r2, #31
 80118e6:	d404      	bmi.n	80118f2 <_fflush_r+0x32>
 80118e8:	0599      	lsls	r1, r3, #22
 80118ea:	d402      	bmi.n	80118f2 <_fflush_r+0x32>
 80118ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118ee:	f7fe fb14 	bl	800ff1a <__retarget_lock_acquire_recursive>
 80118f2:	4628      	mov	r0, r5
 80118f4:	4621      	mov	r1, r4
 80118f6:	f7ff ff5f 	bl	80117b8 <__sflush_r>
 80118fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118fc:	4605      	mov	r5, r0
 80118fe:	07da      	lsls	r2, r3, #31
 8011900:	d4e4      	bmi.n	80118cc <_fflush_r+0xc>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	059b      	lsls	r3, r3, #22
 8011906:	d4e1      	bmi.n	80118cc <_fflush_r+0xc>
 8011908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801190a:	f7fe fb07 	bl	800ff1c <__retarget_lock_release_recursive>
 801190e:	e7dd      	b.n	80118cc <_fflush_r+0xc>

08011910 <memmove>:
 8011910:	4288      	cmp	r0, r1
 8011912:	b510      	push	{r4, lr}
 8011914:	eb01 0402 	add.w	r4, r1, r2
 8011918:	d902      	bls.n	8011920 <memmove+0x10>
 801191a:	4284      	cmp	r4, r0
 801191c:	4623      	mov	r3, r4
 801191e:	d807      	bhi.n	8011930 <memmove+0x20>
 8011920:	1e43      	subs	r3, r0, #1
 8011922:	42a1      	cmp	r1, r4
 8011924:	d008      	beq.n	8011938 <memmove+0x28>
 8011926:	f811 2b01 	ldrb.w	r2, [r1], #1
 801192a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801192e:	e7f8      	b.n	8011922 <memmove+0x12>
 8011930:	4402      	add	r2, r0
 8011932:	4601      	mov	r1, r0
 8011934:	428a      	cmp	r2, r1
 8011936:	d100      	bne.n	801193a <memmove+0x2a>
 8011938:	bd10      	pop	{r4, pc}
 801193a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801193e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011942:	e7f7      	b.n	8011934 <memmove+0x24>

08011944 <_sbrk_r>:
 8011944:	b538      	push	{r3, r4, r5, lr}
 8011946:	2300      	movs	r3, #0
 8011948:	4d05      	ldr	r5, [pc, #20]	@ (8011960 <_sbrk_r+0x1c>)
 801194a:	4604      	mov	r4, r0
 801194c:	4608      	mov	r0, r1
 801194e:	602b      	str	r3, [r5, #0]
 8011950:	f7f2 fd3a 	bl	80043c8 <_sbrk>
 8011954:	1c43      	adds	r3, r0, #1
 8011956:	d102      	bne.n	801195e <_sbrk_r+0x1a>
 8011958:	682b      	ldr	r3, [r5, #0]
 801195a:	b103      	cbz	r3, 801195e <_sbrk_r+0x1a>
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	bd38      	pop	{r3, r4, r5, pc}
 8011960:	20005c38 	.word	0x20005c38

08011964 <__assert_func>:
 8011964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011966:	4614      	mov	r4, r2
 8011968:	461a      	mov	r2, r3
 801196a:	4b09      	ldr	r3, [pc, #36]	@ (8011990 <__assert_func+0x2c>)
 801196c:	4605      	mov	r5, r0
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	68d8      	ldr	r0, [r3, #12]
 8011972:	b954      	cbnz	r4, 801198a <__assert_func+0x26>
 8011974:	4b07      	ldr	r3, [pc, #28]	@ (8011994 <__assert_func+0x30>)
 8011976:	461c      	mov	r4, r3
 8011978:	9100      	str	r1, [sp, #0]
 801197a:	4907      	ldr	r1, [pc, #28]	@ (8011998 <__assert_func+0x34>)
 801197c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011980:	462b      	mov	r3, r5
 8011982:	f000 f86f 	bl	8011a64 <fiprintf>
 8011986:	f000 f87f 	bl	8011a88 <abort>
 801198a:	4b04      	ldr	r3, [pc, #16]	@ (801199c <__assert_func+0x38>)
 801198c:	e7f4      	b.n	8011978 <__assert_func+0x14>
 801198e:	bf00      	nop
 8011990:	20000040 	.word	0x20000040
 8011994:	080125c6 	.word	0x080125c6
 8011998:	08012598 	.word	0x08012598
 801199c:	0801258b 	.word	0x0801258b

080119a0 <_calloc_r>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	fba1 5402 	umull	r5, r4, r1, r2
 80119a6:	b93c      	cbnz	r4, 80119b8 <_calloc_r+0x18>
 80119a8:	4629      	mov	r1, r5
 80119aa:	f7ff f999 	bl	8010ce0 <_malloc_r>
 80119ae:	4606      	mov	r6, r0
 80119b0:	b928      	cbnz	r0, 80119be <_calloc_r+0x1e>
 80119b2:	2600      	movs	r6, #0
 80119b4:	4630      	mov	r0, r6
 80119b6:	bd70      	pop	{r4, r5, r6, pc}
 80119b8:	220c      	movs	r2, #12
 80119ba:	6002      	str	r2, [r0, #0]
 80119bc:	e7f9      	b.n	80119b2 <_calloc_r+0x12>
 80119be:	462a      	mov	r2, r5
 80119c0:	4621      	mov	r1, r4
 80119c2:	f7fe fa2c 	bl	800fe1e <memset>
 80119c6:	e7f5      	b.n	80119b4 <_calloc_r+0x14>

080119c8 <__ascii_mbtowc>:
 80119c8:	b082      	sub	sp, #8
 80119ca:	b901      	cbnz	r1, 80119ce <__ascii_mbtowc+0x6>
 80119cc:	a901      	add	r1, sp, #4
 80119ce:	b142      	cbz	r2, 80119e2 <__ascii_mbtowc+0x1a>
 80119d0:	b14b      	cbz	r3, 80119e6 <__ascii_mbtowc+0x1e>
 80119d2:	7813      	ldrb	r3, [r2, #0]
 80119d4:	600b      	str	r3, [r1, #0]
 80119d6:	7812      	ldrb	r2, [r2, #0]
 80119d8:	1e10      	subs	r0, r2, #0
 80119da:	bf18      	it	ne
 80119dc:	2001      	movne	r0, #1
 80119de:	b002      	add	sp, #8
 80119e0:	4770      	bx	lr
 80119e2:	4610      	mov	r0, r2
 80119e4:	e7fb      	b.n	80119de <__ascii_mbtowc+0x16>
 80119e6:	f06f 0001 	mvn.w	r0, #1
 80119ea:	e7f8      	b.n	80119de <__ascii_mbtowc+0x16>

080119ec <_realloc_r>:
 80119ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f0:	4680      	mov	r8, r0
 80119f2:	4615      	mov	r5, r2
 80119f4:	460c      	mov	r4, r1
 80119f6:	b921      	cbnz	r1, 8011a02 <_realloc_r+0x16>
 80119f8:	4611      	mov	r1, r2
 80119fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119fe:	f7ff b96f 	b.w	8010ce0 <_malloc_r>
 8011a02:	b92a      	cbnz	r2, 8011a10 <_realloc_r+0x24>
 8011a04:	f7ff f8f8 	bl	8010bf8 <_free_r>
 8011a08:	2400      	movs	r4, #0
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a10:	f000 f841 	bl	8011a96 <_malloc_usable_size_r>
 8011a14:	4285      	cmp	r5, r0
 8011a16:	4606      	mov	r6, r0
 8011a18:	d802      	bhi.n	8011a20 <_realloc_r+0x34>
 8011a1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011a1e:	d8f4      	bhi.n	8011a0a <_realloc_r+0x1e>
 8011a20:	4629      	mov	r1, r5
 8011a22:	4640      	mov	r0, r8
 8011a24:	f7ff f95c 	bl	8010ce0 <_malloc_r>
 8011a28:	4607      	mov	r7, r0
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d0ec      	beq.n	8011a08 <_realloc_r+0x1c>
 8011a2e:	42b5      	cmp	r5, r6
 8011a30:	462a      	mov	r2, r5
 8011a32:	4621      	mov	r1, r4
 8011a34:	bf28      	it	cs
 8011a36:	4632      	movcs	r2, r6
 8011a38:	f7fe fa7f 	bl	800ff3a <memcpy>
 8011a3c:	4621      	mov	r1, r4
 8011a3e:	4640      	mov	r0, r8
 8011a40:	463c      	mov	r4, r7
 8011a42:	f7ff f8d9 	bl	8010bf8 <_free_r>
 8011a46:	e7e0      	b.n	8011a0a <_realloc_r+0x1e>

08011a48 <__ascii_wctomb>:
 8011a48:	4603      	mov	r3, r0
 8011a4a:	4608      	mov	r0, r1
 8011a4c:	b141      	cbz	r1, 8011a60 <__ascii_wctomb+0x18>
 8011a4e:	2aff      	cmp	r2, #255	@ 0xff
 8011a50:	d904      	bls.n	8011a5c <__ascii_wctomb+0x14>
 8011a52:	228a      	movs	r2, #138	@ 0x8a
 8011a54:	f04f 30ff 	mov.w	r0, #4294967295
 8011a58:	601a      	str	r2, [r3, #0]
 8011a5a:	4770      	bx	lr
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	700a      	strb	r2, [r1, #0]
 8011a60:	4770      	bx	lr
	...

08011a64 <fiprintf>:
 8011a64:	b40e      	push	{r1, r2, r3}
 8011a66:	b503      	push	{r0, r1, lr}
 8011a68:	ab03      	add	r3, sp, #12
 8011a6a:	4601      	mov	r1, r0
 8011a6c:	4805      	ldr	r0, [pc, #20]	@ (8011a84 <fiprintf+0x20>)
 8011a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a72:	6800      	ldr	r0, [r0, #0]
 8011a74:	9301      	str	r3, [sp, #4]
 8011a76:	f000 f83f 	bl	8011af8 <_vfiprintf_r>
 8011a7a:	b002      	add	sp, #8
 8011a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a80:	b003      	add	sp, #12
 8011a82:	4770      	bx	lr
 8011a84:	20000040 	.word	0x20000040

08011a88 <abort>:
 8011a88:	2006      	movs	r0, #6
 8011a8a:	b508      	push	{r3, lr}
 8011a8c:	f000 fa08 	bl	8011ea0 <raise>
 8011a90:	2001      	movs	r0, #1
 8011a92:	f7f2 fc21 	bl	80042d8 <_exit>

08011a96 <_malloc_usable_size_r>:
 8011a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a9a:	1f18      	subs	r0, r3, #4
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bfbc      	itt	lt
 8011aa0:	580b      	ldrlt	r3, [r1, r0]
 8011aa2:	18c0      	addlt	r0, r0, r3
 8011aa4:	4770      	bx	lr

08011aa6 <__sfputc_r>:
 8011aa6:	6893      	ldr	r3, [r2, #8]
 8011aa8:	3b01      	subs	r3, #1
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	6093      	str	r3, [r2, #8]
 8011aae:	b410      	push	{r4}
 8011ab0:	da08      	bge.n	8011ac4 <__sfputc_r+0x1e>
 8011ab2:	6994      	ldr	r4, [r2, #24]
 8011ab4:	42a3      	cmp	r3, r4
 8011ab6:	db01      	blt.n	8011abc <__sfputc_r+0x16>
 8011ab8:	290a      	cmp	r1, #10
 8011aba:	d103      	bne.n	8011ac4 <__sfputc_r+0x1e>
 8011abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ac0:	f000 b932 	b.w	8011d28 <__swbuf_r>
 8011ac4:	6813      	ldr	r3, [r2, #0]
 8011ac6:	1c58      	adds	r0, r3, #1
 8011ac8:	6010      	str	r0, [r2, #0]
 8011aca:	4608      	mov	r0, r1
 8011acc:	7019      	strb	r1, [r3, #0]
 8011ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <__sfputs_r>:
 8011ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	460f      	mov	r7, r1
 8011ada:	4614      	mov	r4, r2
 8011adc:	18d5      	adds	r5, r2, r3
 8011ade:	42ac      	cmp	r4, r5
 8011ae0:	d101      	bne.n	8011ae6 <__sfputs_r+0x12>
 8011ae2:	2000      	movs	r0, #0
 8011ae4:	e007      	b.n	8011af6 <__sfputs_r+0x22>
 8011ae6:	463a      	mov	r2, r7
 8011ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aec:	4630      	mov	r0, r6
 8011aee:	f7ff ffda 	bl	8011aa6 <__sfputc_r>
 8011af2:	1c43      	adds	r3, r0, #1
 8011af4:	d1f3      	bne.n	8011ade <__sfputs_r+0xa>
 8011af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011af8 <_vfiprintf_r>:
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	460d      	mov	r5, r1
 8011afe:	b09d      	sub	sp, #116	@ 0x74
 8011b00:	4614      	mov	r4, r2
 8011b02:	4698      	mov	r8, r3
 8011b04:	4606      	mov	r6, r0
 8011b06:	b118      	cbz	r0, 8011b10 <_vfiprintf_r+0x18>
 8011b08:	6a03      	ldr	r3, [r0, #32]
 8011b0a:	b90b      	cbnz	r3, 8011b10 <_vfiprintf_r+0x18>
 8011b0c:	f7fe f8ee 	bl	800fcec <__sinit>
 8011b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b12:	07d9      	lsls	r1, r3, #31
 8011b14:	d405      	bmi.n	8011b22 <_vfiprintf_r+0x2a>
 8011b16:	89ab      	ldrh	r3, [r5, #12]
 8011b18:	059a      	lsls	r2, r3, #22
 8011b1a:	d402      	bmi.n	8011b22 <_vfiprintf_r+0x2a>
 8011b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b1e:	f7fe f9fc 	bl	800ff1a <__retarget_lock_acquire_recursive>
 8011b22:	89ab      	ldrh	r3, [r5, #12]
 8011b24:	071b      	lsls	r3, r3, #28
 8011b26:	d501      	bpl.n	8011b2c <_vfiprintf_r+0x34>
 8011b28:	692b      	ldr	r3, [r5, #16]
 8011b2a:	b99b      	cbnz	r3, 8011b54 <_vfiprintf_r+0x5c>
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4630      	mov	r0, r6
 8011b30:	f000 f938 	bl	8011da4 <__swsetup_r>
 8011b34:	b170      	cbz	r0, 8011b54 <_vfiprintf_r+0x5c>
 8011b36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b38:	07dc      	lsls	r4, r3, #31
 8011b3a:	d504      	bpl.n	8011b46 <_vfiprintf_r+0x4e>
 8011b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b40:	b01d      	add	sp, #116	@ 0x74
 8011b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b46:	89ab      	ldrh	r3, [r5, #12]
 8011b48:	0598      	lsls	r0, r3, #22
 8011b4a:	d4f7      	bmi.n	8011b3c <_vfiprintf_r+0x44>
 8011b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b4e:	f7fe f9e5 	bl	800ff1c <__retarget_lock_release_recursive>
 8011b52:	e7f3      	b.n	8011b3c <_vfiprintf_r+0x44>
 8011b54:	2300      	movs	r3, #0
 8011b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b5a:	f04f 0901 	mov.w	r9, #1
 8011b5e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011d14 <_vfiprintf_r+0x21c>
 8011b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b64:	2320      	movs	r3, #32
 8011b66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b6a:	2330      	movs	r3, #48	@ 0x30
 8011b6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b70:	4623      	mov	r3, r4
 8011b72:	469a      	mov	sl, r3
 8011b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b78:	b10a      	cbz	r2, 8011b7e <_vfiprintf_r+0x86>
 8011b7a:	2a25      	cmp	r2, #37	@ 0x25
 8011b7c:	d1f9      	bne.n	8011b72 <_vfiprintf_r+0x7a>
 8011b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8011b82:	d00b      	beq.n	8011b9c <_vfiprintf_r+0xa4>
 8011b84:	465b      	mov	r3, fp
 8011b86:	4622      	mov	r2, r4
 8011b88:	4629      	mov	r1, r5
 8011b8a:	4630      	mov	r0, r6
 8011b8c:	f7ff ffa2 	bl	8011ad4 <__sfputs_r>
 8011b90:	3001      	adds	r0, #1
 8011b92:	f000 80a7 	beq.w	8011ce4 <_vfiprintf_r+0x1ec>
 8011b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b98:	445a      	add	r2, fp
 8011b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 809f 	beq.w	8011ce4 <_vfiprintf_r+0x1ec>
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8011bac:	f10a 0a01 	add.w	sl, sl, #1
 8011bb0:	9304      	str	r3, [sp, #16]
 8011bb2:	9307      	str	r3, [sp, #28]
 8011bb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bbe:	4654      	mov	r4, sl
 8011bc0:	2205      	movs	r2, #5
 8011bc2:	4854      	ldr	r0, [pc, #336]	@ (8011d14 <_vfiprintf_r+0x21c>)
 8011bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bc8:	f7fe f9a9 	bl	800ff1e <memchr>
 8011bcc:	9a04      	ldr	r2, [sp, #16]
 8011bce:	b9d8      	cbnz	r0, 8011c08 <_vfiprintf_r+0x110>
 8011bd0:	06d1      	lsls	r1, r2, #27
 8011bd2:	bf44      	itt	mi
 8011bd4:	2320      	movmi	r3, #32
 8011bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bda:	0713      	lsls	r3, r2, #28
 8011bdc:	bf44      	itt	mi
 8011bde:	232b      	movmi	r3, #43	@ 0x2b
 8011be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011be4:	f89a 3000 	ldrb.w	r3, [sl]
 8011be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bea:	d015      	beq.n	8011c18 <_vfiprintf_r+0x120>
 8011bec:	9a07      	ldr	r2, [sp, #28]
 8011bee:	4654      	mov	r4, sl
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	f04f 0c0a 	mov.w	ip, #10
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bfc:	3b30      	subs	r3, #48	@ 0x30
 8011bfe:	2b09      	cmp	r3, #9
 8011c00:	d94b      	bls.n	8011c9a <_vfiprintf_r+0x1a2>
 8011c02:	b1b0      	cbz	r0, 8011c32 <_vfiprintf_r+0x13a>
 8011c04:	9207      	str	r2, [sp, #28]
 8011c06:	e014      	b.n	8011c32 <_vfiprintf_r+0x13a>
 8011c08:	eba0 0308 	sub.w	r3, r0, r8
 8011c0c:	46a2      	mov	sl, r4
 8011c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c12:	4313      	orrs	r3, r2
 8011c14:	9304      	str	r3, [sp, #16]
 8011c16:	e7d2      	b.n	8011bbe <_vfiprintf_r+0xc6>
 8011c18:	9b03      	ldr	r3, [sp, #12]
 8011c1a:	1d19      	adds	r1, r3, #4
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	9103      	str	r1, [sp, #12]
 8011c22:	bfbb      	ittet	lt
 8011c24:	425b      	neglt	r3, r3
 8011c26:	f042 0202 	orrlt.w	r2, r2, #2
 8011c2a:	9307      	strge	r3, [sp, #28]
 8011c2c:	9307      	strlt	r3, [sp, #28]
 8011c2e:	bfb8      	it	lt
 8011c30:	9204      	strlt	r2, [sp, #16]
 8011c32:	7823      	ldrb	r3, [r4, #0]
 8011c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c36:	d10a      	bne.n	8011c4e <_vfiprintf_r+0x156>
 8011c38:	7863      	ldrb	r3, [r4, #1]
 8011c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c3c:	d132      	bne.n	8011ca4 <_vfiprintf_r+0x1ac>
 8011c3e:	9b03      	ldr	r3, [sp, #12]
 8011c40:	3402      	adds	r4, #2
 8011c42:	1d1a      	adds	r2, r3, #4
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c4a:	9203      	str	r2, [sp, #12]
 8011c4c:	9305      	str	r3, [sp, #20]
 8011c4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011d24 <_vfiprintf_r+0x22c>
 8011c52:	2203      	movs	r2, #3
 8011c54:	7821      	ldrb	r1, [r4, #0]
 8011c56:	4650      	mov	r0, sl
 8011c58:	f7fe f961 	bl	800ff1e <memchr>
 8011c5c:	b138      	cbz	r0, 8011c6e <_vfiprintf_r+0x176>
 8011c5e:	eba0 000a 	sub.w	r0, r0, sl
 8011c62:	2240      	movs	r2, #64	@ 0x40
 8011c64:	9b04      	ldr	r3, [sp, #16]
 8011c66:	3401      	adds	r4, #1
 8011c68:	4082      	lsls	r2, r0
 8011c6a:	4313      	orrs	r3, r2
 8011c6c:	9304      	str	r3, [sp, #16]
 8011c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c72:	2206      	movs	r2, #6
 8011c74:	4828      	ldr	r0, [pc, #160]	@ (8011d18 <_vfiprintf_r+0x220>)
 8011c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c7a:	f7fe f950 	bl	800ff1e <memchr>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d03f      	beq.n	8011d02 <_vfiprintf_r+0x20a>
 8011c82:	4b26      	ldr	r3, [pc, #152]	@ (8011d1c <_vfiprintf_r+0x224>)
 8011c84:	bb1b      	cbnz	r3, 8011cce <_vfiprintf_r+0x1d6>
 8011c86:	9b03      	ldr	r3, [sp, #12]
 8011c88:	3307      	adds	r3, #7
 8011c8a:	f023 0307 	bic.w	r3, r3, #7
 8011c8e:	3308      	adds	r3, #8
 8011c90:	9303      	str	r3, [sp, #12]
 8011c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c94:	443b      	add	r3, r7
 8011c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c98:	e76a      	b.n	8011b70 <_vfiprintf_r+0x78>
 8011c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c9e:	460c      	mov	r4, r1
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	e7a8      	b.n	8011bf6 <_vfiprintf_r+0xfe>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	3401      	adds	r4, #1
 8011ca8:	f04f 0c0a 	mov.w	ip, #10
 8011cac:	4619      	mov	r1, r3
 8011cae:	9305      	str	r3, [sp, #20]
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cb6:	3a30      	subs	r2, #48	@ 0x30
 8011cb8:	2a09      	cmp	r2, #9
 8011cba:	d903      	bls.n	8011cc4 <_vfiprintf_r+0x1cc>
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d0c6      	beq.n	8011c4e <_vfiprintf_r+0x156>
 8011cc0:	9105      	str	r1, [sp, #20]
 8011cc2:	e7c4      	b.n	8011c4e <_vfiprintf_r+0x156>
 8011cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cc8:	4604      	mov	r4, r0
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e7f0      	b.n	8011cb0 <_vfiprintf_r+0x1b8>
 8011cce:	ab03      	add	r3, sp, #12
 8011cd0:	462a      	mov	r2, r5
 8011cd2:	a904      	add	r1, sp, #16
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	4b11      	ldr	r3, [pc, #68]	@ (8011d20 <_vfiprintf_r+0x228>)
 8011cda:	f7fd fbbf 	bl	800f45c <_printf_float>
 8011cde:	4607      	mov	r7, r0
 8011ce0:	1c78      	adds	r0, r7, #1
 8011ce2:	d1d6      	bne.n	8011c92 <_vfiprintf_r+0x19a>
 8011ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ce6:	07d9      	lsls	r1, r3, #31
 8011ce8:	d405      	bmi.n	8011cf6 <_vfiprintf_r+0x1fe>
 8011cea:	89ab      	ldrh	r3, [r5, #12]
 8011cec:	059a      	lsls	r2, r3, #22
 8011cee:	d402      	bmi.n	8011cf6 <_vfiprintf_r+0x1fe>
 8011cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cf2:	f7fe f913 	bl	800ff1c <__retarget_lock_release_recursive>
 8011cf6:	89ab      	ldrh	r3, [r5, #12]
 8011cf8:	065b      	lsls	r3, r3, #25
 8011cfa:	f53f af1f 	bmi.w	8011b3c <_vfiprintf_r+0x44>
 8011cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d00:	e71e      	b.n	8011b40 <_vfiprintf_r+0x48>
 8011d02:	ab03      	add	r3, sp, #12
 8011d04:	462a      	mov	r2, r5
 8011d06:	a904      	add	r1, sp, #16
 8011d08:	4630      	mov	r0, r6
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	4b04      	ldr	r3, [pc, #16]	@ (8011d20 <_vfiprintf_r+0x228>)
 8011d0e:	f7fd fe41 	bl	800f994 <_printf_i>
 8011d12:	e7e4      	b.n	8011cde <_vfiprintf_r+0x1e6>
 8011d14:	08012570 	.word	0x08012570
 8011d18:	0801257a 	.word	0x0801257a
 8011d1c:	0800f45d 	.word	0x0800f45d
 8011d20:	08011ad5 	.word	0x08011ad5
 8011d24:	08012576 	.word	0x08012576

08011d28 <__swbuf_r>:
 8011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2a:	460e      	mov	r6, r1
 8011d2c:	4614      	mov	r4, r2
 8011d2e:	4605      	mov	r5, r0
 8011d30:	b118      	cbz	r0, 8011d3a <__swbuf_r+0x12>
 8011d32:	6a03      	ldr	r3, [r0, #32]
 8011d34:	b90b      	cbnz	r3, 8011d3a <__swbuf_r+0x12>
 8011d36:	f7fd ffd9 	bl	800fcec <__sinit>
 8011d3a:	69a3      	ldr	r3, [r4, #24]
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	071a      	lsls	r2, r3, #28
 8011d42:	d501      	bpl.n	8011d48 <__swbuf_r+0x20>
 8011d44:	6923      	ldr	r3, [r4, #16]
 8011d46:	b943      	cbnz	r3, 8011d5a <__swbuf_r+0x32>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f000 f82a 	bl	8011da4 <__swsetup_r>
 8011d50:	b118      	cbz	r0, 8011d5a <__swbuf_r+0x32>
 8011d52:	f04f 37ff 	mov.w	r7, #4294967295
 8011d56:	4638      	mov	r0, r7
 8011d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d5a:	6823      	ldr	r3, [r4, #0]
 8011d5c:	b2f6      	uxtb	r6, r6
 8011d5e:	6922      	ldr	r2, [r4, #16]
 8011d60:	4637      	mov	r7, r6
 8011d62:	1a98      	subs	r0, r3, r2
 8011d64:	6963      	ldr	r3, [r4, #20]
 8011d66:	4283      	cmp	r3, r0
 8011d68:	dc05      	bgt.n	8011d76 <__swbuf_r+0x4e>
 8011d6a:	4621      	mov	r1, r4
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f7ff fda7 	bl	80118c0 <_fflush_r>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d1ed      	bne.n	8011d52 <__swbuf_r+0x2a>
 8011d76:	68a3      	ldr	r3, [r4, #8]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	60a3      	str	r3, [r4, #8]
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	1c5a      	adds	r2, r3, #1
 8011d80:	6022      	str	r2, [r4, #0]
 8011d82:	701e      	strb	r6, [r3, #0]
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	6962      	ldr	r2, [r4, #20]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d004      	beq.n	8011d96 <__swbuf_r+0x6e>
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	07db      	lsls	r3, r3, #31
 8011d90:	d5e1      	bpl.n	8011d56 <__swbuf_r+0x2e>
 8011d92:	2e0a      	cmp	r6, #10
 8011d94:	d1df      	bne.n	8011d56 <__swbuf_r+0x2e>
 8011d96:	4621      	mov	r1, r4
 8011d98:	4628      	mov	r0, r5
 8011d9a:	f7ff fd91 	bl	80118c0 <_fflush_r>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d0d9      	beq.n	8011d56 <__swbuf_r+0x2e>
 8011da2:	e7d6      	b.n	8011d52 <__swbuf_r+0x2a>

08011da4 <__swsetup_r>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	4b29      	ldr	r3, [pc, #164]	@ (8011e4c <__swsetup_r+0xa8>)
 8011da8:	4605      	mov	r5, r0
 8011daa:	460c      	mov	r4, r1
 8011dac:	6818      	ldr	r0, [r3, #0]
 8011dae:	b118      	cbz	r0, 8011db8 <__swsetup_r+0x14>
 8011db0:	6a03      	ldr	r3, [r0, #32]
 8011db2:	b90b      	cbnz	r3, 8011db8 <__swsetup_r+0x14>
 8011db4:	f7fd ff9a 	bl	800fcec <__sinit>
 8011db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dbc:	0719      	lsls	r1, r3, #28
 8011dbe:	d422      	bmi.n	8011e06 <__swsetup_r+0x62>
 8011dc0:	06da      	lsls	r2, r3, #27
 8011dc2:	d407      	bmi.n	8011dd4 <__swsetup_r+0x30>
 8011dc4:	2209      	movs	r2, #9
 8011dc6:	602a      	str	r2, [r5, #0]
 8011dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	e033      	b.n	8011e3c <__swsetup_r+0x98>
 8011dd4:	0758      	lsls	r0, r3, #29
 8011dd6:	d512      	bpl.n	8011dfe <__swsetup_r+0x5a>
 8011dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dda:	b141      	cbz	r1, 8011dee <__swsetup_r+0x4a>
 8011ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011de0:	4299      	cmp	r1, r3
 8011de2:	d002      	beq.n	8011dea <__swsetup_r+0x46>
 8011de4:	4628      	mov	r0, r5
 8011de6:	f7fe ff07 	bl	8010bf8 <_free_r>
 8011dea:	2300      	movs	r3, #0
 8011dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011df4:	81a3      	strh	r3, [r4, #12]
 8011df6:	2300      	movs	r3, #0
 8011df8:	6063      	str	r3, [r4, #4]
 8011dfa:	6923      	ldr	r3, [r4, #16]
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	f043 0308 	orr.w	r3, r3, #8
 8011e04:	81a3      	strh	r3, [r4, #12]
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	b94b      	cbnz	r3, 8011e1e <__swsetup_r+0x7a>
 8011e0a:	89a3      	ldrh	r3, [r4, #12]
 8011e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e14:	d003      	beq.n	8011e1e <__swsetup_r+0x7a>
 8011e16:	4621      	mov	r1, r4
 8011e18:	4628      	mov	r0, r5
 8011e1a:	f000 f882 	bl	8011f22 <__smakebuf_r>
 8011e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e22:	f013 0201 	ands.w	r2, r3, #1
 8011e26:	d00a      	beq.n	8011e3e <__swsetup_r+0x9a>
 8011e28:	2200      	movs	r2, #0
 8011e2a:	60a2      	str	r2, [r4, #8]
 8011e2c:	6962      	ldr	r2, [r4, #20]
 8011e2e:	4252      	negs	r2, r2
 8011e30:	61a2      	str	r2, [r4, #24]
 8011e32:	6922      	ldr	r2, [r4, #16]
 8011e34:	b942      	cbnz	r2, 8011e48 <__swsetup_r+0xa4>
 8011e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e3a:	d1c5      	bne.n	8011dc8 <__swsetup_r+0x24>
 8011e3c:	bd38      	pop	{r3, r4, r5, pc}
 8011e3e:	0799      	lsls	r1, r3, #30
 8011e40:	bf58      	it	pl
 8011e42:	6962      	ldrpl	r2, [r4, #20]
 8011e44:	60a2      	str	r2, [r4, #8]
 8011e46:	e7f4      	b.n	8011e32 <__swsetup_r+0x8e>
 8011e48:	2000      	movs	r0, #0
 8011e4a:	e7f7      	b.n	8011e3c <__swsetup_r+0x98>
 8011e4c:	20000040 	.word	0x20000040

08011e50 <_raise_r>:
 8011e50:	291f      	cmp	r1, #31
 8011e52:	b538      	push	{r3, r4, r5, lr}
 8011e54:	4605      	mov	r5, r0
 8011e56:	460c      	mov	r4, r1
 8011e58:	d904      	bls.n	8011e64 <_raise_r+0x14>
 8011e5a:	2316      	movs	r3, #22
 8011e5c:	6003      	str	r3, [r0, #0]
 8011e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e66:	b112      	cbz	r2, 8011e6e <_raise_r+0x1e>
 8011e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e6c:	b94b      	cbnz	r3, 8011e82 <_raise_r+0x32>
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f000 f830 	bl	8011ed4 <_getpid_r>
 8011e74:	4622      	mov	r2, r4
 8011e76:	4601      	mov	r1, r0
 8011e78:	4628      	mov	r0, r5
 8011e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e7e:	f000 b817 	b.w	8011eb0 <_kill_r>
 8011e82:	2b01      	cmp	r3, #1
 8011e84:	d00a      	beq.n	8011e9c <_raise_r+0x4c>
 8011e86:	1c59      	adds	r1, r3, #1
 8011e88:	d103      	bne.n	8011e92 <_raise_r+0x42>
 8011e8a:	2316      	movs	r3, #22
 8011e8c:	6003      	str	r3, [r0, #0]
 8011e8e:	2001      	movs	r0, #1
 8011e90:	e7e7      	b.n	8011e62 <_raise_r+0x12>
 8011e92:	2100      	movs	r1, #0
 8011e94:	4620      	mov	r0, r4
 8011e96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e9a:	4798      	blx	r3
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	e7e0      	b.n	8011e62 <_raise_r+0x12>

08011ea0 <raise>:
 8011ea0:	4b02      	ldr	r3, [pc, #8]	@ (8011eac <raise+0xc>)
 8011ea2:	4601      	mov	r1, r0
 8011ea4:	6818      	ldr	r0, [r3, #0]
 8011ea6:	f7ff bfd3 	b.w	8011e50 <_raise_r>
 8011eaa:	bf00      	nop
 8011eac:	20000040 	.word	0x20000040

08011eb0 <_kill_r>:
 8011eb0:	b538      	push	{r3, r4, r5, lr}
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	4d06      	ldr	r5, [pc, #24]	@ (8011ed0 <_kill_r+0x20>)
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	4608      	mov	r0, r1
 8011eba:	4611      	mov	r1, r2
 8011ebc:	602b      	str	r3, [r5, #0]
 8011ebe:	f7f2 f9fb 	bl	80042b8 <_kill>
 8011ec2:	1c43      	adds	r3, r0, #1
 8011ec4:	d102      	bne.n	8011ecc <_kill_r+0x1c>
 8011ec6:	682b      	ldr	r3, [r5, #0]
 8011ec8:	b103      	cbz	r3, 8011ecc <_kill_r+0x1c>
 8011eca:	6023      	str	r3, [r4, #0]
 8011ecc:	bd38      	pop	{r3, r4, r5, pc}
 8011ece:	bf00      	nop
 8011ed0:	20005c38 	.word	0x20005c38

08011ed4 <_getpid_r>:
 8011ed4:	f7f2 b9e8 	b.w	80042a8 <_getpid>

08011ed8 <__swhatbuf_r>:
 8011ed8:	b570      	push	{r4, r5, r6, lr}
 8011eda:	460c      	mov	r4, r1
 8011edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee0:	b096      	sub	sp, #88	@ 0x58
 8011ee2:	4615      	mov	r5, r2
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	461e      	mov	r6, r3
 8011ee8:	da0c      	bge.n	8011f04 <__swhatbuf_r+0x2c>
 8011eea:	89a3      	ldrh	r3, [r4, #12]
 8011eec:	2100      	movs	r1, #0
 8011eee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ef2:	bf14      	ite	ne
 8011ef4:	2340      	movne	r3, #64	@ 0x40
 8011ef6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011efa:	2000      	movs	r0, #0
 8011efc:	6031      	str	r1, [r6, #0]
 8011efe:	602b      	str	r3, [r5, #0]
 8011f00:	b016      	add	sp, #88	@ 0x58
 8011f02:	bd70      	pop	{r4, r5, r6, pc}
 8011f04:	466a      	mov	r2, sp
 8011f06:	f000 f849 	bl	8011f9c <_fstat_r>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	dbed      	blt.n	8011eea <__swhatbuf_r+0x12>
 8011f0e:	9901      	ldr	r1, [sp, #4]
 8011f10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f18:	4259      	negs	r1, r3
 8011f1a:	4159      	adcs	r1, r3
 8011f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f20:	e7eb      	b.n	8011efa <__swhatbuf_r+0x22>

08011f22 <__smakebuf_r>:
 8011f22:	898b      	ldrh	r3, [r1, #12]
 8011f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f26:	079d      	lsls	r5, r3, #30
 8011f28:	4606      	mov	r6, r0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	d507      	bpl.n	8011f3e <__smakebuf_r+0x1c>
 8011f2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f32:	6023      	str	r3, [r4, #0]
 8011f34:	6123      	str	r3, [r4, #16]
 8011f36:	2301      	movs	r3, #1
 8011f38:	6163      	str	r3, [r4, #20]
 8011f3a:	b003      	add	sp, #12
 8011f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f3e:	ab01      	add	r3, sp, #4
 8011f40:	466a      	mov	r2, sp
 8011f42:	f7ff ffc9 	bl	8011ed8 <__swhatbuf_r>
 8011f46:	9f00      	ldr	r7, [sp, #0]
 8011f48:	4605      	mov	r5, r0
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	4639      	mov	r1, r7
 8011f4e:	f7fe fec7 	bl	8010ce0 <_malloc_r>
 8011f52:	b948      	cbnz	r0, 8011f68 <__smakebuf_r+0x46>
 8011f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f58:	059a      	lsls	r2, r3, #22
 8011f5a:	d4ee      	bmi.n	8011f3a <__smakebuf_r+0x18>
 8011f5c:	f023 0303 	bic.w	r3, r3, #3
 8011f60:	f043 0302 	orr.w	r3, r3, #2
 8011f64:	81a3      	strh	r3, [r4, #12]
 8011f66:	e7e2      	b.n	8011f2e <__smakebuf_r+0xc>
 8011f68:	89a3      	ldrh	r3, [r4, #12]
 8011f6a:	6020      	str	r0, [r4, #0]
 8011f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f70:	81a3      	strh	r3, [r4, #12]
 8011f72:	9b01      	ldr	r3, [sp, #4]
 8011f74:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f78:	b15b      	cbz	r3, 8011f92 <__smakebuf_r+0x70>
 8011f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f000 f81e 	bl	8011fc0 <_isatty_r>
 8011f84:	b128      	cbz	r0, 8011f92 <__smakebuf_r+0x70>
 8011f86:	89a3      	ldrh	r3, [r4, #12]
 8011f88:	f023 0303 	bic.w	r3, r3, #3
 8011f8c:	f043 0301 	orr.w	r3, r3, #1
 8011f90:	81a3      	strh	r3, [r4, #12]
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	431d      	orrs	r5, r3
 8011f96:	81a5      	strh	r5, [r4, #12]
 8011f98:	e7cf      	b.n	8011f3a <__smakebuf_r+0x18>
	...

08011f9c <_fstat_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	4d06      	ldr	r5, [pc, #24]	@ (8011fbc <_fstat_r+0x20>)
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	602b      	str	r3, [r5, #0]
 8011faa:	f7f2 f9e5 	bl	8004378 <_fstat>
 8011fae:	1c43      	adds	r3, r0, #1
 8011fb0:	d102      	bne.n	8011fb8 <_fstat_r+0x1c>
 8011fb2:	682b      	ldr	r3, [r5, #0]
 8011fb4:	b103      	cbz	r3, 8011fb8 <_fstat_r+0x1c>
 8011fb6:	6023      	str	r3, [r4, #0]
 8011fb8:	bd38      	pop	{r3, r4, r5, pc}
 8011fba:	bf00      	nop
 8011fbc:	20005c38 	.word	0x20005c38

08011fc0 <_isatty_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	4d05      	ldr	r5, [pc, #20]	@ (8011fdc <_isatty_r+0x1c>)
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	602b      	str	r3, [r5, #0]
 8011fcc:	f7f2 f9e4 	bl	8004398 <_isatty>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_isatty_r+0x1a>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_isatty_r+0x1a>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	20005c38 	.word	0x20005c38

08011fe0 <sqrt>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	ec55 4b10 	vmov	r4, r5, d0
 8011fe6:	ed2d 8b02 	vpush	{d8}
 8011fea:	f000 f825 	bl	8012038 <__ieee754_sqrt>
 8011fee:	4622      	mov	r2, r4
 8011ff0:	462b      	mov	r3, r5
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	4629      	mov	r1, r5
 8011ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8011ffa:	eef0 8a60 	vmov.f32	s17, s1
 8011ffe:	f7ee fda5 	bl	8000b4c <__aeabi_dcmpun>
 8012002:	b990      	cbnz	r0, 801202a <sqrt+0x4a>
 8012004:	2200      	movs	r2, #0
 8012006:	2300      	movs	r3, #0
 8012008:	4620      	mov	r0, r4
 801200a:	4629      	mov	r1, r5
 801200c:	f7ee fd76 	bl	8000afc <__aeabi_dcmplt>
 8012010:	b158      	cbz	r0, 801202a <sqrt+0x4a>
 8012012:	f7fd ff57 	bl	800fec4 <__errno>
 8012016:	2321      	movs	r3, #33	@ 0x21
 8012018:	2200      	movs	r2, #0
 801201a:	6003      	str	r3, [r0, #0]
 801201c:	2300      	movs	r3, #0
 801201e:	4610      	mov	r0, r2
 8012020:	4619      	mov	r1, r3
 8012022:	f7ee fc23 	bl	800086c <__aeabi_ddiv>
 8012026:	ec41 0b18 	vmov	d8, r0, r1
 801202a:	eeb0 0a48 	vmov.f32	s0, s16
 801202e:	eef0 0a68 	vmov.f32	s1, s17
 8012032:	ecbd 8b02 	vpop	{d8}
 8012036:	bd38      	pop	{r3, r4, r5, pc}

08012038 <__ieee754_sqrt>:
 8012038:	4a6b      	ldr	r2, [pc, #428]	@ (80121e8 <__ieee754_sqrt+0x1b0>)
 801203a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801203e:	ec55 4b10 	vmov	r4, r5, d0
 8012042:	43aa      	bics	r2, r5
 8012044:	462b      	mov	r3, r5
 8012046:	4621      	mov	r1, r4
 8012048:	d110      	bne.n	801206c <__ieee754_sqrt+0x34>
 801204a:	4622      	mov	r2, r4
 801204c:	4620      	mov	r0, r4
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee fae2 	bl	8000618 <__aeabi_dmul>
 8012054:	4602      	mov	r2, r0
 8012056:	460b      	mov	r3, r1
 8012058:	4620      	mov	r0, r4
 801205a:	4629      	mov	r1, r5
 801205c:	f7ee f926 	bl	80002ac <__adddf3>
 8012060:	4604      	mov	r4, r0
 8012062:	460d      	mov	r5, r1
 8012064:	ec45 4b10 	vmov	d0, r4, r5
 8012068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206c:	2d00      	cmp	r5, #0
 801206e:	dc0e      	bgt.n	801208e <__ieee754_sqrt+0x56>
 8012070:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012074:	4322      	orrs	r2, r4
 8012076:	d0f5      	beq.n	8012064 <__ieee754_sqrt+0x2c>
 8012078:	b19d      	cbz	r5, 80120a2 <__ieee754_sqrt+0x6a>
 801207a:	4622      	mov	r2, r4
 801207c:	4620      	mov	r0, r4
 801207e:	4629      	mov	r1, r5
 8012080:	f7ee f912 	bl	80002a8 <__aeabi_dsub>
 8012084:	4602      	mov	r2, r0
 8012086:	460b      	mov	r3, r1
 8012088:	f7ee fbf0 	bl	800086c <__aeabi_ddiv>
 801208c:	e7e8      	b.n	8012060 <__ieee754_sqrt+0x28>
 801208e:	152a      	asrs	r2, r5, #20
 8012090:	d115      	bne.n	80120be <__ieee754_sqrt+0x86>
 8012092:	2000      	movs	r0, #0
 8012094:	e009      	b.n	80120aa <__ieee754_sqrt+0x72>
 8012096:	0acb      	lsrs	r3, r1, #11
 8012098:	3a15      	subs	r2, #21
 801209a:	0549      	lsls	r1, r1, #21
 801209c:	2b00      	cmp	r3, #0
 801209e:	d0fa      	beq.n	8012096 <__ieee754_sqrt+0x5e>
 80120a0:	e7f7      	b.n	8012092 <__ieee754_sqrt+0x5a>
 80120a2:	462a      	mov	r2, r5
 80120a4:	e7fa      	b.n	801209c <__ieee754_sqrt+0x64>
 80120a6:	005b      	lsls	r3, r3, #1
 80120a8:	3001      	adds	r0, #1
 80120aa:	02dc      	lsls	r4, r3, #11
 80120ac:	d5fb      	bpl.n	80120a6 <__ieee754_sqrt+0x6e>
 80120ae:	1e44      	subs	r4, r0, #1
 80120b0:	1b12      	subs	r2, r2, r4
 80120b2:	f1c0 0420 	rsb	r4, r0, #32
 80120b6:	fa21 f404 	lsr.w	r4, r1, r4
 80120ba:	4081      	lsls	r1, r0
 80120bc:	4323      	orrs	r3, r4
 80120be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80120c6:	07d2      	lsls	r2, r2, #31
 80120c8:	f04f 0600 	mov.w	r6, #0
 80120cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80120d0:	ea4f 0565 	mov.w	r5, r5, asr #1
 80120d4:	f04f 0016 	mov.w	r0, #22
 80120d8:	4632      	mov	r2, r6
 80120da:	bf58      	it	pl
 80120dc:	005b      	lslpl	r3, r3, #1
 80120de:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80120e2:	bf5c      	itt	pl
 80120e4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80120e8:	0049      	lslpl	r1, r1, #1
 80120ea:	005b      	lsls	r3, r3, #1
 80120ec:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80120f0:	0049      	lsls	r1, r1, #1
 80120f2:	1917      	adds	r7, r2, r4
 80120f4:	429f      	cmp	r7, r3
 80120f6:	bfde      	ittt	le
 80120f8:	193a      	addle	r2, r7, r4
 80120fa:	1bdb      	suble	r3, r3, r7
 80120fc:	1936      	addle	r6, r6, r4
 80120fe:	0fcf      	lsrs	r7, r1, #31
 8012100:	3801      	subs	r0, #1
 8012102:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012106:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801210a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801210e:	d1f0      	bne.n	80120f2 <__ieee754_sqrt+0xba>
 8012110:	4604      	mov	r4, r0
 8012112:	2720      	movs	r7, #32
 8012114:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012118:	429a      	cmp	r2, r3
 801211a:	eb00 0e0c 	add.w	lr, r0, ip
 801211e:	db02      	blt.n	8012126 <__ieee754_sqrt+0xee>
 8012120:	d113      	bne.n	801214a <__ieee754_sqrt+0x112>
 8012122:	458e      	cmp	lr, r1
 8012124:	d811      	bhi.n	801214a <__ieee754_sqrt+0x112>
 8012126:	f1be 0f00 	cmp.w	lr, #0
 801212a:	eb0e 000c 	add.w	r0, lr, ip
 801212e:	da43      	bge.n	80121b8 <__ieee754_sqrt+0x180>
 8012130:	2800      	cmp	r0, #0
 8012132:	db41      	blt.n	80121b8 <__ieee754_sqrt+0x180>
 8012134:	f102 0801 	add.w	r8, r2, #1
 8012138:	1a9b      	subs	r3, r3, r2
 801213a:	458e      	cmp	lr, r1
 801213c:	4464      	add	r4, ip
 801213e:	eba1 010e 	sub.w	r1, r1, lr
 8012142:	bf88      	it	hi
 8012144:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012148:	4642      	mov	r2, r8
 801214a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801214e:	3f01      	subs	r7, #1
 8012150:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012154:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012158:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801215c:	d1dc      	bne.n	8012118 <__ieee754_sqrt+0xe0>
 801215e:	4319      	orrs	r1, r3
 8012160:	d01b      	beq.n	801219a <__ieee754_sqrt+0x162>
 8012162:	f8df a088 	ldr.w	sl, [pc, #136]	@ 80121ec <__ieee754_sqrt+0x1b4>
 8012166:	f8df b088 	ldr.w	fp, [pc, #136]	@ 80121f0 <__ieee754_sqrt+0x1b8>
 801216a:	e9da 0100 	ldrd	r0, r1, [sl]
 801216e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012172:	e9da 8900 	ldrd	r8, r9, [sl]
 8012176:	f7ee f897 	bl	80002a8 <__aeabi_dsub>
 801217a:	4602      	mov	r2, r0
 801217c:	460b      	mov	r3, r1
 801217e:	4640      	mov	r0, r8
 8012180:	4649      	mov	r1, r9
 8012182:	f7ee fcc5 	bl	8000b10 <__aeabi_dcmple>
 8012186:	b140      	cbz	r0, 801219a <__ieee754_sqrt+0x162>
 8012188:	f1b4 3fff 	cmp.w	r4, #4294967295
 801218c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012190:	e9db 2300 	ldrd	r2, r3, [fp]
 8012194:	d112      	bne.n	80121bc <__ieee754_sqrt+0x184>
 8012196:	3601      	adds	r6, #1
 8012198:	463c      	mov	r4, r7
 801219a:	1072      	asrs	r2, r6, #1
 801219c:	07f1      	lsls	r1, r6, #31
 801219e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80121a2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80121a6:	bf48      	it	mi
 80121a8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80121ac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80121b0:	4618      	mov	r0, r3
 80121b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80121b6:	e753      	b.n	8012060 <__ieee754_sqrt+0x28>
 80121b8:	4690      	mov	r8, r2
 80121ba:	e7bd      	b.n	8012138 <__ieee754_sqrt+0x100>
 80121bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80121c0:	f7ee f874 	bl	80002ac <__adddf3>
 80121c4:	4602      	mov	r2, r0
 80121c6:	460b      	mov	r3, r1
 80121c8:	4640      	mov	r0, r8
 80121ca:	4649      	mov	r1, r9
 80121cc:	f7ee fc96 	bl	8000afc <__aeabi_dcmplt>
 80121d0:	b128      	cbz	r0, 80121de <__ieee754_sqrt+0x1a6>
 80121d2:	1ca0      	adds	r0, r4, #2
 80121d4:	f104 0402 	add.w	r4, r4, #2
 80121d8:	bf08      	it	eq
 80121da:	3601      	addeq	r6, #1
 80121dc:	e7dd      	b.n	801219a <__ieee754_sqrt+0x162>
 80121de:	1c63      	adds	r3, r4, #1
 80121e0:	f023 0401 	bic.w	r4, r3, #1
 80121e4:	e7d9      	b.n	801219a <__ieee754_sqrt+0x162>
 80121e6:	bf00      	nop
 80121e8:	7ff00000 	.word	0x7ff00000
 80121ec:	20000208 	.word	0x20000208
 80121f0:	20000200 	.word	0x20000200

080121f4 <_init>:
 80121f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f6:	bf00      	nop
 80121f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121fa:	bc08      	pop	{r3}
 80121fc:	469e      	mov	lr, r3
 80121fe:	4770      	bx	lr

08012200 <_fini>:
 8012200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012202:	bf00      	nop
 8012204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012206:	bc08      	pop	{r3}
 8012208:	469e      	mov	lr, r3
 801220a:	4770      	bx	lr
