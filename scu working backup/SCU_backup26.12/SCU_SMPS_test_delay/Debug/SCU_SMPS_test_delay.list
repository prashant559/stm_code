
SCU_SMPS_test_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0800c000  0800c000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e2c  0800c250  0800c250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0801f080  0801f080  00014080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f6d0  0801f6d0  00015290  2**0
                  CONTENTS
  4 .ARM          00000008  0801f6d0  0801f6d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f6d8  0801f6d8  00015290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f6d8  0801f6d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f6dc  0801f6dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0801f6e0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ab4  20000290  0801f970  00015290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007d44  0801f970  00015d44  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4f7  00000000  00000000  000152c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cc  00000000  00000000  000307bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00033c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d63  00000000  00000000  00034e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b76  00000000  00000000  00035b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b43c  00000000  00000000  0006a6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141b35  00000000  00000000  00085b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c764a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f8  00000000  00000000  001c7690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001cd088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c250 <__do_global_dtors_aux>:
 800c250:	b510      	push	{r4, lr}
 800c252:	4c05      	ldr	r4, [pc, #20]	@ (800c268 <__do_global_dtors_aux+0x18>)
 800c254:	7823      	ldrb	r3, [r4, #0]
 800c256:	b933      	cbnz	r3, 800c266 <__do_global_dtors_aux+0x16>
 800c258:	4b04      	ldr	r3, [pc, #16]	@ (800c26c <__do_global_dtors_aux+0x1c>)
 800c25a:	b113      	cbz	r3, 800c262 <__do_global_dtors_aux+0x12>
 800c25c:	4804      	ldr	r0, [pc, #16]	@ (800c270 <__do_global_dtors_aux+0x20>)
 800c25e:	f3af 8000 	nop.w
 800c262:	2301      	movs	r3, #1
 800c264:	7023      	strb	r3, [r4, #0]
 800c266:	bd10      	pop	{r4, pc}
 800c268:	20000290 	.word	0x20000290
 800c26c:	00000000 	.word	0x00000000
 800c270:	0801f064 	.word	0x0801f064

0800c274 <frame_dummy>:
 800c274:	b508      	push	{r3, lr}
 800c276:	4b03      	ldr	r3, [pc, #12]	@ (800c284 <frame_dummy+0x10>)
 800c278:	b11b      	cbz	r3, 800c282 <frame_dummy+0xe>
 800c27a:	4903      	ldr	r1, [pc, #12]	@ (800c288 <frame_dummy+0x14>)
 800c27c:	4803      	ldr	r0, [pc, #12]	@ (800c28c <frame_dummy+0x18>)
 800c27e:	f3af 8000 	nop.w
 800c282:	bd08      	pop	{r3, pc}
 800c284:	00000000 	.word	0x00000000
 800c288:	20000294 	.word	0x20000294
 800c28c:	0801f064 	.word	0x0801f064

0800c290 <strlen>:
 800c290:	4603      	mov	r3, r0
 800c292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c296:	2a00      	cmp	r2, #0
 800c298:	d1fb      	bne.n	800c292 <strlen+0x2>
 800c29a:	1a18      	subs	r0, r3, r0
 800c29c:	3801      	subs	r0, #1
 800c29e:	4770      	bx	lr

0800c2a0 <__aeabi_drsub>:
 800c2a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800c2a4:	e002      	b.n	800c2ac <__adddf3>
 800c2a6:	bf00      	nop

0800c2a8 <__aeabi_dsub>:
 800c2a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800c2ac <__adddf3>:
 800c2ac:	b530      	push	{r4, r5, lr}
 800c2ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c2b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c2b6:	ea94 0f05 	teq	r4, r5
 800c2ba:	bf08      	it	eq
 800c2bc:	ea90 0f02 	teqeq	r0, r2
 800c2c0:	bf1f      	itttt	ne
 800c2c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c2c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c2ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c2ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c2d2:	f000 80e2 	beq.w	800c49a <__adddf3+0x1ee>
 800c2d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c2da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c2de:	bfb8      	it	lt
 800c2e0:	426d      	neglt	r5, r5
 800c2e2:	dd0c      	ble.n	800c2fe <__adddf3+0x52>
 800c2e4:	442c      	add	r4, r5
 800c2e6:	ea80 0202 	eor.w	r2, r0, r2
 800c2ea:	ea81 0303 	eor.w	r3, r1, r3
 800c2ee:	ea82 0000 	eor.w	r0, r2, r0
 800c2f2:	ea83 0101 	eor.w	r1, r3, r1
 800c2f6:	ea80 0202 	eor.w	r2, r0, r2
 800c2fa:	ea81 0303 	eor.w	r3, r1, r3
 800c2fe:	2d36      	cmp	r5, #54	@ 0x36
 800c300:	bf88      	it	hi
 800c302:	bd30      	pophi	{r4, r5, pc}
 800c304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800c308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c30c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800c310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c314:	d002      	beq.n	800c31c <__adddf3+0x70>
 800c316:	4240      	negs	r0, r0
 800c318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c31c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800c320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c328:	d002      	beq.n	800c330 <__adddf3+0x84>
 800c32a:	4252      	negs	r2, r2
 800c32c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c330:	ea94 0f05 	teq	r4, r5
 800c334:	f000 80a7 	beq.w	800c486 <__adddf3+0x1da>
 800c338:	f1a4 0401 	sub.w	r4, r4, #1
 800c33c:	f1d5 0e20 	rsbs	lr, r5, #32
 800c340:	db0d      	blt.n	800c35e <__adddf3+0xb2>
 800c342:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c346:	fa22 f205 	lsr.w	r2, r2, r5
 800c34a:	1880      	adds	r0, r0, r2
 800c34c:	f141 0100 	adc.w	r1, r1, #0
 800c350:	fa03 f20e 	lsl.w	r2, r3, lr
 800c354:	1880      	adds	r0, r0, r2
 800c356:	fa43 f305 	asr.w	r3, r3, r5
 800c35a:	4159      	adcs	r1, r3
 800c35c:	e00e      	b.n	800c37c <__adddf3+0xd0>
 800c35e:	f1a5 0520 	sub.w	r5, r5, #32
 800c362:	f10e 0e20 	add.w	lr, lr, #32
 800c366:	2a01      	cmp	r2, #1
 800c368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c36c:	bf28      	it	cs
 800c36e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c372:	fa43 f305 	asr.w	r3, r3, r5
 800c376:	18c0      	adds	r0, r0, r3
 800c378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c37c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c380:	d507      	bpl.n	800c392 <__adddf3+0xe6>
 800c382:	f04f 0e00 	mov.w	lr, #0
 800c386:	f1dc 0c00 	rsbs	ip, ip, #0
 800c38a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c38e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800c396:	d31b      	bcc.n	800c3d0 <__adddf3+0x124>
 800c398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800c39c:	d30c      	bcc.n	800c3b8 <__adddf3+0x10c>
 800c39e:	0849      	lsrs	r1, r1, #1
 800c3a0:	ea5f 0030 	movs.w	r0, r0, rrx
 800c3a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c3a8:	f104 0401 	add.w	r4, r4, #1
 800c3ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c3b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800c3b4:	f080 809a 	bcs.w	800c4ec <__adddf3+0x240>
 800c3b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800c3bc:	bf08      	it	eq
 800c3be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c3c2:	f150 0000 	adcs.w	r0, r0, #0
 800c3c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c3ca:	ea41 0105 	orr.w	r1, r1, r5
 800c3ce:	bd30      	pop	{r4, r5, pc}
 800c3d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c3d4:	4140      	adcs	r0, r0
 800c3d6:	eb41 0101 	adc.w	r1, r1, r1
 800c3da:	3c01      	subs	r4, #1
 800c3dc:	bf28      	it	cs
 800c3de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800c3e2:	d2e9      	bcs.n	800c3b8 <__adddf3+0x10c>
 800c3e4:	f091 0f00 	teq	r1, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	4601      	moveq	r1, r0
 800c3ec:	2000      	moveq	r0, #0
 800c3ee:	fab1 f381 	clz	r3, r1
 800c3f2:	bf08      	it	eq
 800c3f4:	3320      	addeq	r3, #32
 800c3f6:	f1a3 030b 	sub.w	r3, r3, #11
 800c3fa:	f1b3 0220 	subs.w	r2, r3, #32
 800c3fe:	da0c      	bge.n	800c41a <__adddf3+0x16e>
 800c400:	320c      	adds	r2, #12
 800c402:	dd08      	ble.n	800c416 <__adddf3+0x16a>
 800c404:	f102 0c14 	add.w	ip, r2, #20
 800c408:	f1c2 020c 	rsb	r2, r2, #12
 800c40c:	fa01 f00c 	lsl.w	r0, r1, ip
 800c410:	fa21 f102 	lsr.w	r1, r1, r2
 800c414:	e00c      	b.n	800c430 <__adddf3+0x184>
 800c416:	f102 0214 	add.w	r2, r2, #20
 800c41a:	bfd8      	it	le
 800c41c:	f1c2 0c20 	rsble	ip, r2, #32
 800c420:	fa01 f102 	lsl.w	r1, r1, r2
 800c424:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c428:	bfdc      	itt	le
 800c42a:	ea41 010c 	orrle.w	r1, r1, ip
 800c42e:	4090      	lslle	r0, r2
 800c430:	1ae4      	subs	r4, r4, r3
 800c432:	bfa2      	ittt	ge
 800c434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c438:	4329      	orrge	r1, r5
 800c43a:	bd30      	popge	{r4, r5, pc}
 800c43c:	ea6f 0404 	mvn.w	r4, r4
 800c440:	3c1f      	subs	r4, #31
 800c442:	da1c      	bge.n	800c47e <__adddf3+0x1d2>
 800c444:	340c      	adds	r4, #12
 800c446:	dc0e      	bgt.n	800c466 <__adddf3+0x1ba>
 800c448:	f104 0414 	add.w	r4, r4, #20
 800c44c:	f1c4 0220 	rsb	r2, r4, #32
 800c450:	fa20 f004 	lsr.w	r0, r0, r4
 800c454:	fa01 f302 	lsl.w	r3, r1, r2
 800c458:	ea40 0003 	orr.w	r0, r0, r3
 800c45c:	fa21 f304 	lsr.w	r3, r1, r4
 800c460:	ea45 0103 	orr.w	r1, r5, r3
 800c464:	bd30      	pop	{r4, r5, pc}
 800c466:	f1c4 040c 	rsb	r4, r4, #12
 800c46a:	f1c4 0220 	rsb	r2, r4, #32
 800c46e:	fa20 f002 	lsr.w	r0, r0, r2
 800c472:	fa01 f304 	lsl.w	r3, r1, r4
 800c476:	ea40 0003 	orr.w	r0, r0, r3
 800c47a:	4629      	mov	r1, r5
 800c47c:	bd30      	pop	{r4, r5, pc}
 800c47e:	fa21 f004 	lsr.w	r0, r1, r4
 800c482:	4629      	mov	r1, r5
 800c484:	bd30      	pop	{r4, r5, pc}
 800c486:	f094 0f00 	teq	r4, #0
 800c48a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800c48e:	bf06      	itte	eq
 800c490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800c494:	3401      	addeq	r4, #1
 800c496:	3d01      	subne	r5, #1
 800c498:	e74e      	b.n	800c338 <__adddf3+0x8c>
 800c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c49e:	bf18      	it	ne
 800c4a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c4a4:	d029      	beq.n	800c4fa <__adddf3+0x24e>
 800c4a6:	ea94 0f05 	teq	r4, r5
 800c4aa:	bf08      	it	eq
 800c4ac:	ea90 0f02 	teqeq	r0, r2
 800c4b0:	d005      	beq.n	800c4be <__adddf3+0x212>
 800c4b2:	ea54 0c00 	orrs.w	ip, r4, r0
 800c4b6:	bf04      	itt	eq
 800c4b8:	4619      	moveq	r1, r3
 800c4ba:	4610      	moveq	r0, r2
 800c4bc:	bd30      	pop	{r4, r5, pc}
 800c4be:	ea91 0f03 	teq	r1, r3
 800c4c2:	bf1e      	ittt	ne
 800c4c4:	2100      	movne	r1, #0
 800c4c6:	2000      	movne	r0, #0
 800c4c8:	bd30      	popne	{r4, r5, pc}
 800c4ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c4ce:	d105      	bne.n	800c4dc <__adddf3+0x230>
 800c4d0:	0040      	lsls	r0, r0, #1
 800c4d2:	4149      	adcs	r1, r1
 800c4d4:	bf28      	it	cs
 800c4d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800c4da:	bd30      	pop	{r4, r5, pc}
 800c4dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800c4e0:	bf3c      	itt	cc
 800c4e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800c4e6:	bd30      	popcc	{r4, r5, pc}
 800c4e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c4ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800c4f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	bd30      	pop	{r4, r5, pc}
 800c4fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c4fe:	bf1a      	itte	ne
 800c500:	4619      	movne	r1, r3
 800c502:	4610      	movne	r0, r2
 800c504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c508:	bf1c      	itt	ne
 800c50a:	460b      	movne	r3, r1
 800c50c:	4602      	movne	r2, r0
 800c50e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c512:	bf06      	itte	eq
 800c514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c518:	ea91 0f03 	teqeq	r1, r3
 800c51c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800c520:	bd30      	pop	{r4, r5, pc}
 800c522:	bf00      	nop

0800c524 <__aeabi_ui2d>:
 800c524:	f090 0f00 	teq	r0, #0
 800c528:	bf04      	itt	eq
 800c52a:	2100      	moveq	r1, #0
 800c52c:	4770      	bxeq	lr
 800c52e:	b530      	push	{r4, r5, lr}
 800c530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c538:	f04f 0500 	mov.w	r5, #0
 800c53c:	f04f 0100 	mov.w	r1, #0
 800c540:	e750      	b.n	800c3e4 <__adddf3+0x138>
 800c542:	bf00      	nop

0800c544 <__aeabi_i2d>:
 800c544:	f090 0f00 	teq	r0, #0
 800c548:	bf04      	itt	eq
 800c54a:	2100      	moveq	r1, #0
 800c54c:	4770      	bxeq	lr
 800c54e:	b530      	push	{r4, r5, lr}
 800c550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800c55c:	bf48      	it	mi
 800c55e:	4240      	negmi	r0, r0
 800c560:	f04f 0100 	mov.w	r1, #0
 800c564:	e73e      	b.n	800c3e4 <__adddf3+0x138>
 800c566:	bf00      	nop

0800c568 <__aeabi_f2d>:
 800c568:	0042      	lsls	r2, r0, #1
 800c56a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c56e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c576:	bf1f      	itttt	ne
 800c578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800c57c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800c580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800c584:	4770      	bxne	lr
 800c586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c58a:	bf08      	it	eq
 800c58c:	4770      	bxeq	lr
 800c58e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800c592:	bf04      	itt	eq
 800c594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800c598:	4770      	bxeq	lr
 800c59a:	b530      	push	{r4, r5, lr}
 800c59c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800c5a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c5a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c5a8:	e71c      	b.n	800c3e4 <__adddf3+0x138>
 800c5aa:	bf00      	nop

0800c5ac <__aeabi_ul2d>:
 800c5ac:	ea50 0201 	orrs.w	r2, r0, r1
 800c5b0:	bf08      	it	eq
 800c5b2:	4770      	bxeq	lr
 800c5b4:	b530      	push	{r4, r5, lr}
 800c5b6:	f04f 0500 	mov.w	r5, #0
 800c5ba:	e00a      	b.n	800c5d2 <__aeabi_l2d+0x16>

0800c5bc <__aeabi_l2d>:
 800c5bc:	ea50 0201 	orrs.w	r2, r0, r1
 800c5c0:	bf08      	it	eq
 800c5c2:	4770      	bxeq	lr
 800c5c4:	b530      	push	{r4, r5, lr}
 800c5c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800c5ca:	d502      	bpl.n	800c5d2 <__aeabi_l2d+0x16>
 800c5cc:	4240      	negs	r0, r0
 800c5ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c5d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c5d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c5da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c5de:	f43f aed8 	beq.w	800c392 <__adddf3+0xe6>
 800c5e2:	f04f 0203 	mov.w	r2, #3
 800c5e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c5ea:	bf18      	it	ne
 800c5ec:	3203      	addne	r2, #3
 800c5ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c5f2:	bf18      	it	ne
 800c5f4:	3203      	addne	r2, #3
 800c5f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c5fa:	f1c2 0320 	rsb	r3, r2, #32
 800c5fe:	fa00 fc03 	lsl.w	ip, r0, r3
 800c602:	fa20 f002 	lsr.w	r0, r0, r2
 800c606:	fa01 fe03 	lsl.w	lr, r1, r3
 800c60a:	ea40 000e 	orr.w	r0, r0, lr
 800c60e:	fa21 f102 	lsr.w	r1, r1, r2
 800c612:	4414      	add	r4, r2
 800c614:	e6bd      	b.n	800c392 <__adddf3+0xe6>
 800c616:	bf00      	nop

0800c618 <__aeabi_dmul>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800c61e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800c622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c626:	bf1d      	ittte	ne
 800c628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c62c:	ea94 0f0c 	teqne	r4, ip
 800c630:	ea95 0f0c 	teqne	r5, ip
 800c634:	f000 f8de 	bleq	800c7f4 <__aeabi_dmul+0x1dc>
 800c638:	442c      	add	r4, r5
 800c63a:	ea81 0603 	eor.w	r6, r1, r3
 800c63e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c64a:	bf18      	it	ne
 800c64c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c658:	d038      	beq.n	800c6cc <__aeabi_dmul+0xb4>
 800c65a:	fba0 ce02 	umull	ip, lr, r0, r2
 800c65e:	f04f 0500 	mov.w	r5, #0
 800c662:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800c66a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c66e:	f04f 0600 	mov.w	r6, #0
 800c672:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c676:	f09c 0f00 	teq	ip, #0
 800c67a:	bf18      	it	ne
 800c67c:	f04e 0e01 	orrne.w	lr, lr, #1
 800c680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800c684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800c688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800c68c:	d204      	bcs.n	800c698 <__aeabi_dmul+0x80>
 800c68e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c692:	416d      	adcs	r5, r5
 800c694:	eb46 0606 	adc.w	r6, r6, r6
 800c698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c69c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c6a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c6a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c6a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c6ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800c6b0:	bf88      	it	hi
 800c6b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800c6b6:	d81e      	bhi.n	800c6f6 <__aeabi_dmul+0xde>
 800c6b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800c6bc:	bf08      	it	eq
 800c6be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c6c2:	f150 0000 	adcs.w	r0, r0, #0
 800c6c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800c6d0:	ea46 0101 	orr.w	r1, r6, r1
 800c6d4:	ea40 0002 	orr.w	r0, r0, r2
 800c6d8:	ea81 0103 	eor.w	r1, r1, r3
 800c6dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c6e0:	bfc2      	ittt	gt
 800c6e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c6e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c6ea:	bd70      	popgt	{r4, r5, r6, pc}
 800c6ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c6f0:	f04f 0e00 	mov.w	lr, #0
 800c6f4:	3c01      	subs	r4, #1
 800c6f6:	f300 80ab 	bgt.w	800c850 <__aeabi_dmul+0x238>
 800c6fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800c6fe:	bfde      	ittt	le
 800c700:	2000      	movle	r0, #0
 800c702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800c706:	bd70      	pople	{r4, r5, r6, pc}
 800c708:	f1c4 0400 	rsb	r4, r4, #0
 800c70c:	3c20      	subs	r4, #32
 800c70e:	da35      	bge.n	800c77c <__aeabi_dmul+0x164>
 800c710:	340c      	adds	r4, #12
 800c712:	dc1b      	bgt.n	800c74c <__aeabi_dmul+0x134>
 800c714:	f104 0414 	add.w	r4, r4, #20
 800c718:	f1c4 0520 	rsb	r5, r4, #32
 800c71c:	fa00 f305 	lsl.w	r3, r0, r5
 800c720:	fa20 f004 	lsr.w	r0, r0, r4
 800c724:	fa01 f205 	lsl.w	r2, r1, r5
 800c728:	ea40 0002 	orr.w	r0, r0, r2
 800c72c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800c730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c738:	fa21 f604 	lsr.w	r6, r1, r4
 800c73c:	eb42 0106 	adc.w	r1, r2, r6
 800c740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c744:	bf08      	it	eq
 800c746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	f1c4 040c 	rsb	r4, r4, #12
 800c750:	f1c4 0520 	rsb	r5, r4, #32
 800c754:	fa00 f304 	lsl.w	r3, r0, r4
 800c758:	fa20 f005 	lsr.w	r0, r0, r5
 800c75c:	fa01 f204 	lsl.w	r2, r1, r4
 800c760:	ea40 0002 	orr.w	r0, r0, r2
 800c764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c76c:	f141 0100 	adc.w	r1, r1, #0
 800c770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c774:	bf08      	it	eq
 800c776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	f1c4 0520 	rsb	r5, r4, #32
 800c780:	fa00 f205 	lsl.w	r2, r0, r5
 800c784:	ea4e 0e02 	orr.w	lr, lr, r2
 800c788:	fa20 f304 	lsr.w	r3, r0, r4
 800c78c:	fa01 f205 	lsl.w	r2, r1, r5
 800c790:	ea43 0302 	orr.w	r3, r3, r2
 800c794:	fa21 f004 	lsr.w	r0, r1, r4
 800c798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c79c:	fa21 f204 	lsr.w	r2, r1, r4
 800c7a0:	ea20 0002 	bic.w	r0, r0, r2
 800c7a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c7a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c7ac:	bf08      	it	eq
 800c7ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
 800c7b4:	f094 0f00 	teq	r4, #0
 800c7b8:	d10f      	bne.n	800c7da <__aeabi_dmul+0x1c2>
 800c7ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800c7be:	0040      	lsls	r0, r0, #1
 800c7c0:	eb41 0101 	adc.w	r1, r1, r1
 800c7c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c7c8:	bf08      	it	eq
 800c7ca:	3c01      	subeq	r4, #1
 800c7cc:	d0f7      	beq.n	800c7be <__aeabi_dmul+0x1a6>
 800c7ce:	ea41 0106 	orr.w	r1, r1, r6
 800c7d2:	f095 0f00 	teq	r5, #0
 800c7d6:	bf18      	it	ne
 800c7d8:	4770      	bxne	lr
 800c7da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800c7de:	0052      	lsls	r2, r2, #1
 800c7e0:	eb43 0303 	adc.w	r3, r3, r3
 800c7e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800c7e8:	bf08      	it	eq
 800c7ea:	3d01      	subeq	r5, #1
 800c7ec:	d0f7      	beq.n	800c7de <__aeabi_dmul+0x1c6>
 800c7ee:	ea43 0306 	orr.w	r3, r3, r6
 800c7f2:	4770      	bx	lr
 800c7f4:	ea94 0f0c 	teq	r4, ip
 800c7f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c7fc:	bf18      	it	ne
 800c7fe:	ea95 0f0c 	teqne	r5, ip
 800c802:	d00c      	beq.n	800c81e <__aeabi_dmul+0x206>
 800c804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c808:	bf18      	it	ne
 800c80a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c80e:	d1d1      	bne.n	800c7b4 <__aeabi_dmul+0x19c>
 800c810:	ea81 0103 	eor.w	r1, r1, r3
 800c814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c818:	f04f 0000 	mov.w	r0, #0
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c822:	bf06      	itte	eq
 800c824:	4610      	moveq	r0, r2
 800c826:	4619      	moveq	r1, r3
 800c828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c82c:	d019      	beq.n	800c862 <__aeabi_dmul+0x24a>
 800c82e:	ea94 0f0c 	teq	r4, ip
 800c832:	d102      	bne.n	800c83a <__aeabi_dmul+0x222>
 800c834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c838:	d113      	bne.n	800c862 <__aeabi_dmul+0x24a>
 800c83a:	ea95 0f0c 	teq	r5, ip
 800c83e:	d105      	bne.n	800c84c <__aeabi_dmul+0x234>
 800c840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c844:	bf1c      	itt	ne
 800c846:	4610      	movne	r0, r2
 800c848:	4619      	movne	r1, r3
 800c84a:	d10a      	bne.n	800c862 <__aeabi_dmul+0x24a>
 800c84c:	ea81 0103 	eor.w	r1, r1, r3
 800c850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c85c:	f04f 0000 	mov.w	r0, #0
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800c86a:	bd70      	pop	{r4, r5, r6, pc}

0800c86c <__aeabi_ddiv>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800c872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800c876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c87a:	bf1d      	ittte	ne
 800c87c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c880:	ea94 0f0c 	teqne	r4, ip
 800c884:	ea95 0f0c 	teqne	r5, ip
 800c888:	f000 f8a7 	bleq	800c9da <__aeabi_ddiv+0x16e>
 800c88c:	eba4 0405 	sub.w	r4, r4, r5
 800c890:	ea81 0e03 	eor.w	lr, r1, r3
 800c894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c89c:	f000 8088 	beq.w	800c9b0 <__aeabi_ddiv+0x144>
 800c8a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c8a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800c8a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c8ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c8b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c8b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c8b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c8bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c8c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800c8c4:	429d      	cmp	r5, r3
 800c8c6:	bf08      	it	eq
 800c8c8:	4296      	cmpeq	r6, r2
 800c8ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800c8ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800c8d2:	d202      	bcs.n	800c8da <__aeabi_ddiv+0x6e>
 800c8d4:	085b      	lsrs	r3, r3, #1
 800c8d6:	ea4f 0232 	mov.w	r2, r2, rrx
 800c8da:	1ab6      	subs	r6, r6, r2
 800c8dc:	eb65 0503 	sbc.w	r5, r5, r3
 800c8e0:	085b      	lsrs	r3, r3, #1
 800c8e2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c8e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c8ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800c8ee:	ebb6 0e02 	subs.w	lr, r6, r2
 800c8f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c8f6:	bf22      	ittt	cs
 800c8f8:	1ab6      	subcs	r6, r6, r2
 800c8fa:	4675      	movcs	r5, lr
 800c8fc:	ea40 000c 	orrcs.w	r0, r0, ip
 800c900:	085b      	lsrs	r3, r3, #1
 800c902:	ea4f 0232 	mov.w	r2, r2, rrx
 800c906:	ebb6 0e02 	subs.w	lr, r6, r2
 800c90a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c90e:	bf22      	ittt	cs
 800c910:	1ab6      	subcs	r6, r6, r2
 800c912:	4675      	movcs	r5, lr
 800c914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c918:	085b      	lsrs	r3, r3, #1
 800c91a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c91e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c922:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c926:	bf22      	ittt	cs
 800c928:	1ab6      	subcs	r6, r6, r2
 800c92a:	4675      	movcs	r5, lr
 800c92c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c930:	085b      	lsrs	r3, r3, #1
 800c932:	ea4f 0232 	mov.w	r2, r2, rrx
 800c936:	ebb6 0e02 	subs.w	lr, r6, r2
 800c93a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c93e:	bf22      	ittt	cs
 800c940:	1ab6      	subcs	r6, r6, r2
 800c942:	4675      	movcs	r5, lr
 800c944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c948:	ea55 0e06 	orrs.w	lr, r5, r6
 800c94c:	d018      	beq.n	800c980 <__aeabi_ddiv+0x114>
 800c94e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c95a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c95e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c96a:	d1c0      	bne.n	800c8ee <__aeabi_ddiv+0x82>
 800c96c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c970:	d10b      	bne.n	800c98a <__aeabi_ddiv+0x11e>
 800c972:	ea41 0100 	orr.w	r1, r1, r0
 800c976:	f04f 0000 	mov.w	r0, #0
 800c97a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c97e:	e7b6      	b.n	800c8ee <__aeabi_ddiv+0x82>
 800c980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c984:	bf04      	itt	eq
 800c986:	4301      	orreq	r1, r0
 800c988:	2000      	moveq	r0, #0
 800c98a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800c98e:	bf88      	it	hi
 800c990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800c994:	f63f aeaf 	bhi.w	800c6f6 <__aeabi_dmul+0xde>
 800c998:	ebb5 0c03 	subs.w	ip, r5, r3
 800c99c:	bf04      	itt	eq
 800c99e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c9a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c9a6:	f150 0000 	adcs.w	r0, r0, #0
 800c9aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800c9b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c9b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c9bc:	bfc2      	ittt	gt
 800c9be:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c9c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c9c6:	bd70      	popgt	{r4, r5, r6, pc}
 800c9c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c9cc:	f04f 0e00 	mov.w	lr, #0
 800c9d0:	3c01      	subs	r4, #1
 800c9d2:	e690      	b.n	800c6f6 <__aeabi_dmul+0xde>
 800c9d4:	ea45 0e06 	orr.w	lr, r5, r6
 800c9d8:	e68d      	b.n	800c6f6 <__aeabi_dmul+0xde>
 800c9da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c9de:	ea94 0f0c 	teq	r4, ip
 800c9e2:	bf08      	it	eq
 800c9e4:	ea95 0f0c 	teqeq	r5, ip
 800c9e8:	f43f af3b 	beq.w	800c862 <__aeabi_dmul+0x24a>
 800c9ec:	ea94 0f0c 	teq	r4, ip
 800c9f0:	d10a      	bne.n	800ca08 <__aeabi_ddiv+0x19c>
 800c9f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c9f6:	f47f af34 	bne.w	800c862 <__aeabi_dmul+0x24a>
 800c9fa:	ea95 0f0c 	teq	r5, ip
 800c9fe:	f47f af25 	bne.w	800c84c <__aeabi_dmul+0x234>
 800ca02:	4610      	mov	r0, r2
 800ca04:	4619      	mov	r1, r3
 800ca06:	e72c      	b.n	800c862 <__aeabi_dmul+0x24a>
 800ca08:	ea95 0f0c 	teq	r5, ip
 800ca0c:	d106      	bne.n	800ca1c <__aeabi_ddiv+0x1b0>
 800ca0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ca12:	f43f aefd 	beq.w	800c810 <__aeabi_dmul+0x1f8>
 800ca16:	4610      	mov	r0, r2
 800ca18:	4619      	mov	r1, r3
 800ca1a:	e722      	b.n	800c862 <__aeabi_dmul+0x24a>
 800ca1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ca20:	bf18      	it	ne
 800ca22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ca26:	f47f aec5 	bne.w	800c7b4 <__aeabi_dmul+0x19c>
 800ca2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800ca2e:	f47f af0d 	bne.w	800c84c <__aeabi_dmul+0x234>
 800ca32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800ca36:	f47f aeeb 	bne.w	800c810 <__aeabi_dmul+0x1f8>
 800ca3a:	e712      	b.n	800c862 <__aeabi_dmul+0x24a>

0800ca3c <__gedf2>:
 800ca3c:	f04f 3cff 	mov.w	ip, #4294967295
 800ca40:	e006      	b.n	800ca50 <__cmpdf2+0x4>
 800ca42:	bf00      	nop

0800ca44 <__ledf2>:
 800ca44:	f04f 0c01 	mov.w	ip, #1
 800ca48:	e002      	b.n	800ca50 <__cmpdf2+0x4>
 800ca4a:	bf00      	nop

0800ca4c <__cmpdf2>:
 800ca4c:	f04f 0c01 	mov.w	ip, #1
 800ca50:	f84d cd04 	str.w	ip, [sp, #-4]!
 800ca54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ca58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ca5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ca60:	bf18      	it	ne
 800ca62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800ca66:	d01b      	beq.n	800caa0 <__cmpdf2+0x54>
 800ca68:	b001      	add	sp, #4
 800ca6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ca6e:	bf0c      	ite	eq
 800ca70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ca74:	ea91 0f03 	teqne	r1, r3
 800ca78:	bf02      	ittt	eq
 800ca7a:	ea90 0f02 	teqeq	r0, r2
 800ca7e:	2000      	moveq	r0, #0
 800ca80:	4770      	bxeq	lr
 800ca82:	f110 0f00 	cmn.w	r0, #0
 800ca86:	ea91 0f03 	teq	r1, r3
 800ca8a:	bf58      	it	pl
 800ca8c:	4299      	cmppl	r1, r3
 800ca8e:	bf08      	it	eq
 800ca90:	4290      	cmpeq	r0, r2
 800ca92:	bf2c      	ite	cs
 800ca94:	17d8      	asrcs	r0, r3, #31
 800ca96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800ca9a:	f040 0001 	orr.w	r0, r0, #1
 800ca9e:	4770      	bx	lr
 800caa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800caa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800caa8:	d102      	bne.n	800cab0 <__cmpdf2+0x64>
 800caaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800caae:	d107      	bne.n	800cac0 <__cmpdf2+0x74>
 800cab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cab8:	d1d6      	bne.n	800ca68 <__cmpdf2+0x1c>
 800caba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cabe:	d0d3      	beq.n	800ca68 <__cmpdf2+0x1c>
 800cac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop

0800cac8 <__aeabi_cdrcmple>:
 800cac8:	4684      	mov	ip, r0
 800caca:	4610      	mov	r0, r2
 800cacc:	4662      	mov	r2, ip
 800cace:	468c      	mov	ip, r1
 800cad0:	4619      	mov	r1, r3
 800cad2:	4663      	mov	r3, ip
 800cad4:	e000      	b.n	800cad8 <__aeabi_cdcmpeq>
 800cad6:	bf00      	nop

0800cad8 <__aeabi_cdcmpeq>:
 800cad8:	b501      	push	{r0, lr}
 800cada:	f7ff ffb7 	bl	800ca4c <__cmpdf2>
 800cade:	2800      	cmp	r0, #0
 800cae0:	bf48      	it	mi
 800cae2:	f110 0f00 	cmnmi.w	r0, #0
 800cae6:	bd01      	pop	{r0, pc}

0800cae8 <__aeabi_dcmpeq>:
 800cae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800caec:	f7ff fff4 	bl	800cad8 <__aeabi_cdcmpeq>
 800caf0:	bf0c      	ite	eq
 800caf2:	2001      	moveq	r0, #1
 800caf4:	2000      	movne	r0, #0
 800caf6:	f85d fb08 	ldr.w	pc, [sp], #8
 800cafa:	bf00      	nop

0800cafc <__aeabi_dcmplt>:
 800cafc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb00:	f7ff ffea 	bl	800cad8 <__aeabi_cdcmpeq>
 800cb04:	bf34      	ite	cc
 800cb06:	2001      	movcc	r0, #1
 800cb08:	2000      	movcs	r0, #0
 800cb0a:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb0e:	bf00      	nop

0800cb10 <__aeabi_dcmple>:
 800cb10:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb14:	f7ff ffe0 	bl	800cad8 <__aeabi_cdcmpeq>
 800cb18:	bf94      	ite	ls
 800cb1a:	2001      	movls	r0, #1
 800cb1c:	2000      	movhi	r0, #0
 800cb1e:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb22:	bf00      	nop

0800cb24 <__aeabi_dcmpge>:
 800cb24:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb28:	f7ff ffce 	bl	800cac8 <__aeabi_cdrcmple>
 800cb2c:	bf94      	ite	ls
 800cb2e:	2001      	movls	r0, #1
 800cb30:	2000      	movhi	r0, #0
 800cb32:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb36:	bf00      	nop

0800cb38 <__aeabi_dcmpgt>:
 800cb38:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb3c:	f7ff ffc4 	bl	800cac8 <__aeabi_cdrcmple>
 800cb40:	bf34      	ite	cc
 800cb42:	2001      	movcc	r0, #1
 800cb44:	2000      	movcs	r0, #0
 800cb46:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb4a:	bf00      	nop

0800cb4c <__aeabi_dcmpun>:
 800cb4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cb50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb54:	d102      	bne.n	800cb5c <__aeabi_dcmpun+0x10>
 800cb56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800cb5a:	d10a      	bne.n	800cb72 <__aeabi_dcmpun+0x26>
 800cb5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cb60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb64:	d102      	bne.n	800cb6c <__aeabi_dcmpun+0x20>
 800cb66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cb6a:	d102      	bne.n	800cb72 <__aeabi_dcmpun+0x26>
 800cb6c:	f04f 0000 	mov.w	r0, #0
 800cb70:	4770      	bx	lr
 800cb72:	f04f 0001 	mov.w	r0, #1
 800cb76:	4770      	bx	lr

0800cb78 <__aeabi_d2iz>:
 800cb78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800cb7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800cb80:	d215      	bcs.n	800cbae <__aeabi_d2iz+0x36>
 800cb82:	d511      	bpl.n	800cba8 <__aeabi_d2iz+0x30>
 800cb84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800cb88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800cb8c:	d912      	bls.n	800cbb4 <__aeabi_d2iz+0x3c>
 800cb8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cb92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cb96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800cb9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800cb9e:	fa23 f002 	lsr.w	r0, r3, r2
 800cba2:	bf18      	it	ne
 800cba4:	4240      	negne	r0, r0
 800cba6:	4770      	bx	lr
 800cba8:	f04f 0000 	mov.w	r0, #0
 800cbac:	4770      	bx	lr
 800cbae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800cbb2:	d105      	bne.n	800cbc0 <__aeabi_d2iz+0x48>
 800cbb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800cbb8:	bf08      	it	eq
 800cbba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800cbbe:	4770      	bx	lr
 800cbc0:	f04f 0000 	mov.w	r0, #0
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop

0800cbc8 <__aeabi_d2f>:
 800cbc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800cbcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800cbd0:	bf24      	itt	cs
 800cbd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800cbd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800cbda:	d90d      	bls.n	800cbf8 <__aeabi_d2f+0x30>
 800cbdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800cbe0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800cbe4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800cbe8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800cbec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800cbf0:	bf08      	it	eq
 800cbf2:	f020 0001 	biceq.w	r0, r0, #1
 800cbf6:	4770      	bx	lr
 800cbf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800cbfc:	d121      	bne.n	800cc42 <__aeabi_d2f+0x7a>
 800cbfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800cc02:	bfbc      	itt	lt
 800cc04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800cc08:	4770      	bxlt	lr
 800cc0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800cc0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800cc12:	f1c2 0218 	rsb	r2, r2, #24
 800cc16:	f1c2 0c20 	rsb	ip, r2, #32
 800cc1a:	fa10 f30c 	lsls.w	r3, r0, ip
 800cc1e:	fa20 f002 	lsr.w	r0, r0, r2
 800cc22:	bf18      	it	ne
 800cc24:	f040 0001 	orrne.w	r0, r0, #1
 800cc28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cc2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800cc30:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cc34:	ea40 000c 	orr.w	r0, r0, ip
 800cc38:	fa23 f302 	lsr.w	r3, r3, r2
 800cc3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc40:	e7cc      	b.n	800cbdc <__aeabi_d2f+0x14>
 800cc42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800cc46:	d107      	bne.n	800cc58 <__aeabi_d2f+0x90>
 800cc48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800cc4c:	bf1e      	ittt	ne
 800cc4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800cc52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800cc56:	4770      	bxne	lr
 800cc58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800cc5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800cc60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <__aeabi_uldivmod>:
 800cc68:	b953      	cbnz	r3, 800cc80 <__aeabi_uldivmod+0x18>
 800cc6a:	b94a      	cbnz	r2, 800cc80 <__aeabi_uldivmod+0x18>
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	bf08      	it	eq
 800cc70:	2800      	cmpeq	r0, #0
 800cc72:	bf1c      	itt	ne
 800cc74:	f04f 31ff 	movne.w	r1, #4294967295
 800cc78:	f04f 30ff 	movne.w	r0, #4294967295
 800cc7c:	f000 b97e 	b.w	800cf7c <__aeabi_idiv0>
 800cc80:	f1ad 0c08 	sub.w	ip, sp, #8
 800cc84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800cc88:	f000 f806 	bl	800cc98 <__udivmoddi4>
 800cc8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cc90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc94:	b004      	add	sp, #16
 800cc96:	4770      	bx	lr

0800cc98 <__udivmoddi4>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cc9e:	460c      	mov	r4, r1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d14d      	bne.n	800cd40 <__udivmoddi4+0xa8>
 800cca4:	428a      	cmp	r2, r1
 800cca6:	460f      	mov	r7, r1
 800cca8:	4684      	mov	ip, r0
 800ccaa:	4696      	mov	lr, r2
 800ccac:	fab2 f382 	clz	r3, r2
 800ccb0:	d960      	bls.n	800cd74 <__udivmoddi4+0xdc>
 800ccb2:	b14b      	cbz	r3, 800ccc8 <__udivmoddi4+0x30>
 800ccb4:	fa02 fe03 	lsl.w	lr, r2, r3
 800ccb8:	f1c3 0220 	rsb	r2, r3, #32
 800ccbc:	409f      	lsls	r7, r3
 800ccbe:	fa00 fc03 	lsl.w	ip, r0, r3
 800ccc2:	fa20 f202 	lsr.w	r2, r0, r2
 800ccc6:	4317      	orrs	r7, r2
 800ccc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800cccc:	fa1f f48e 	uxth.w	r4, lr
 800ccd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800ccd4:	fbb7 f1f6 	udiv	r1, r7, r6
 800ccd8:	fb06 7711 	mls	r7, r6, r1, r7
 800ccdc:	fb01 f004 	mul.w	r0, r1, r4
 800cce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800cce4:	4290      	cmp	r0, r2
 800cce6:	d908      	bls.n	800ccfa <__udivmoddi4+0x62>
 800cce8:	eb1e 0202 	adds.w	r2, lr, r2
 800ccec:	f101 37ff 	add.w	r7, r1, #4294967295
 800ccf0:	d202      	bcs.n	800ccf8 <__udivmoddi4+0x60>
 800ccf2:	4290      	cmp	r0, r2
 800ccf4:	f200 812d 	bhi.w	800cf52 <__udivmoddi4+0x2ba>
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	1a12      	subs	r2, r2, r0
 800ccfc:	fa1f fc8c 	uxth.w	ip, ip
 800cd00:	fbb2 f0f6 	udiv	r0, r2, r6
 800cd04:	fb06 2210 	mls	r2, r6, r0, r2
 800cd08:	fb00 f404 	mul.w	r4, r0, r4
 800cd0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800cd10:	4564      	cmp	r4, ip
 800cd12:	d908      	bls.n	800cd26 <__udivmoddi4+0x8e>
 800cd14:	eb1e 0c0c 	adds.w	ip, lr, ip
 800cd18:	f100 32ff 	add.w	r2, r0, #4294967295
 800cd1c:	d202      	bcs.n	800cd24 <__udivmoddi4+0x8c>
 800cd1e:	4564      	cmp	r4, ip
 800cd20:	f200 811a 	bhi.w	800cf58 <__udivmoddi4+0x2c0>
 800cd24:	4610      	mov	r0, r2
 800cd26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800cd2a:	ebac 0c04 	sub.w	ip, ip, r4
 800cd2e:	2100      	movs	r1, #0
 800cd30:	b125      	cbz	r5, 800cd3c <__udivmoddi4+0xa4>
 800cd32:	fa2c f303 	lsr.w	r3, ip, r3
 800cd36:	2200      	movs	r2, #0
 800cd38:	e9c5 3200 	strd	r3, r2, [r5]
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	428b      	cmp	r3, r1
 800cd42:	d905      	bls.n	800cd50 <__udivmoddi4+0xb8>
 800cd44:	b10d      	cbz	r5, 800cd4a <__udivmoddi4+0xb2>
 800cd46:	e9c5 0100 	strd	r0, r1, [r5]
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	e7f5      	b.n	800cd3c <__udivmoddi4+0xa4>
 800cd50:	fab3 f183 	clz	r1, r3
 800cd54:	2900      	cmp	r1, #0
 800cd56:	d14d      	bne.n	800cdf4 <__udivmoddi4+0x15c>
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	f0c0 80f2 	bcc.w	800cf42 <__udivmoddi4+0x2aa>
 800cd5e:	4290      	cmp	r0, r2
 800cd60:	f080 80ef 	bcs.w	800cf42 <__udivmoddi4+0x2aa>
 800cd64:	4606      	mov	r6, r0
 800cd66:	4623      	mov	r3, r4
 800cd68:	4608      	mov	r0, r1
 800cd6a:	2d00      	cmp	r5, #0
 800cd6c:	d0e6      	beq.n	800cd3c <__udivmoddi4+0xa4>
 800cd6e:	e9c5 6300 	strd	r6, r3, [r5]
 800cd72:	e7e3      	b.n	800cd3c <__udivmoddi4+0xa4>
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f040 80a2 	bne.w	800cebe <__udivmoddi4+0x226>
 800cd7a:	1a8a      	subs	r2, r1, r2
 800cd7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800cd80:	fa1f f68e 	uxth.w	r6, lr
 800cd84:	2101      	movs	r1, #1
 800cd86:	fbb2 f4f7 	udiv	r4, r2, r7
 800cd8a:	fb07 2014 	mls	r0, r7, r4, r2
 800cd8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800cd92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cd96:	fb06 f004 	mul.w	r0, r6, r4
 800cd9a:	4290      	cmp	r0, r2
 800cd9c:	d90f      	bls.n	800cdbe <__udivmoddi4+0x126>
 800cd9e:	eb1e 0202 	adds.w	r2, lr, r2
 800cda2:	f104 38ff 	add.w	r8, r4, #4294967295
 800cda6:	bf2c      	ite	cs
 800cda8:	f04f 0901 	movcs.w	r9, #1
 800cdac:	f04f 0900 	movcc.w	r9, #0
 800cdb0:	4290      	cmp	r0, r2
 800cdb2:	d903      	bls.n	800cdbc <__udivmoddi4+0x124>
 800cdb4:	f1b9 0f00 	cmp.w	r9, #0
 800cdb8:	f000 80c8 	beq.w	800cf4c <__udivmoddi4+0x2b4>
 800cdbc:	4644      	mov	r4, r8
 800cdbe:	1a12      	subs	r2, r2, r0
 800cdc0:	fa1f fc8c 	uxth.w	ip, ip
 800cdc4:	fbb2 f0f7 	udiv	r0, r2, r7
 800cdc8:	fb07 2210 	mls	r2, r7, r0, r2
 800cdcc:	fb00 f606 	mul.w	r6, r0, r6
 800cdd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800cdd4:	4566      	cmp	r6, ip
 800cdd6:	d908      	bls.n	800cdea <__udivmoddi4+0x152>
 800cdd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 800cddc:	f100 32ff 	add.w	r2, r0, #4294967295
 800cde0:	d202      	bcs.n	800cde8 <__udivmoddi4+0x150>
 800cde2:	4566      	cmp	r6, ip
 800cde4:	f200 80bb 	bhi.w	800cf5e <__udivmoddi4+0x2c6>
 800cde8:	4610      	mov	r0, r2
 800cdea:	ebac 0c06 	sub.w	ip, ip, r6
 800cdee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800cdf2:	e79d      	b.n	800cd30 <__udivmoddi4+0x98>
 800cdf4:	f1c1 0620 	rsb	r6, r1, #32
 800cdf8:	408b      	lsls	r3, r1
 800cdfa:	fa04 fe01 	lsl.w	lr, r4, r1
 800cdfe:	fa22 f706 	lsr.w	r7, r2, r6
 800ce02:	fa20 fc06 	lsr.w	ip, r0, r6
 800ce06:	40f4      	lsrs	r4, r6
 800ce08:	408a      	lsls	r2, r1
 800ce0a:	431f      	orrs	r7, r3
 800ce0c:	ea4e 030c 	orr.w	r3, lr, ip
 800ce10:	fa00 fe01 	lsl.w	lr, r0, r1
 800ce14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800ce18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800ce1c:	fa1f fc87 	uxth.w	ip, r7
 800ce20:	fbb4 f0f8 	udiv	r0, r4, r8
 800ce24:	fb08 4410 	mls	r4, r8, r0, r4
 800ce28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800ce2c:	fb00 f90c 	mul.w	r9, r0, ip
 800ce30:	45a1      	cmp	r9, r4
 800ce32:	d90e      	bls.n	800ce52 <__udivmoddi4+0x1ba>
 800ce34:	193c      	adds	r4, r7, r4
 800ce36:	f100 3aff 	add.w	sl, r0, #4294967295
 800ce3a:	bf2c      	ite	cs
 800ce3c:	f04f 0b01 	movcs.w	fp, #1
 800ce40:	f04f 0b00 	movcc.w	fp, #0
 800ce44:	45a1      	cmp	r9, r4
 800ce46:	d903      	bls.n	800ce50 <__udivmoddi4+0x1b8>
 800ce48:	f1bb 0f00 	cmp.w	fp, #0
 800ce4c:	f000 8093 	beq.w	800cf76 <__udivmoddi4+0x2de>
 800ce50:	4650      	mov	r0, sl
 800ce52:	eba4 0409 	sub.w	r4, r4, r9
 800ce56:	fa1f f983 	uxth.w	r9, r3
 800ce5a:	fbb4 f3f8 	udiv	r3, r4, r8
 800ce5e:	fb08 4413 	mls	r4, r8, r3, r4
 800ce62:	fb03 fc0c 	mul.w	ip, r3, ip
 800ce66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800ce6a:	45a4      	cmp	ip, r4
 800ce6c:	d906      	bls.n	800ce7c <__udivmoddi4+0x1e4>
 800ce6e:	193c      	adds	r4, r7, r4
 800ce70:	f103 38ff 	add.w	r8, r3, #4294967295
 800ce74:	d201      	bcs.n	800ce7a <__udivmoddi4+0x1e2>
 800ce76:	45a4      	cmp	ip, r4
 800ce78:	d87a      	bhi.n	800cf70 <__udivmoddi4+0x2d8>
 800ce7a:	4643      	mov	r3, r8
 800ce7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800ce80:	eba4 040c 	sub.w	r4, r4, ip
 800ce84:	fba0 9802 	umull	r9, r8, r0, r2
 800ce88:	4544      	cmp	r4, r8
 800ce8a:	46cc      	mov	ip, r9
 800ce8c:	4643      	mov	r3, r8
 800ce8e:	d302      	bcc.n	800ce96 <__udivmoddi4+0x1fe>
 800ce90:	d106      	bne.n	800cea0 <__udivmoddi4+0x208>
 800ce92:	45ce      	cmp	lr, r9
 800ce94:	d204      	bcs.n	800cea0 <__udivmoddi4+0x208>
 800ce96:	3801      	subs	r0, #1
 800ce98:	ebb9 0c02 	subs.w	ip, r9, r2
 800ce9c:	eb68 0307 	sbc.w	r3, r8, r7
 800cea0:	b15d      	cbz	r5, 800ceba <__udivmoddi4+0x222>
 800cea2:	ebbe 020c 	subs.w	r2, lr, ip
 800cea6:	eb64 0403 	sbc.w	r4, r4, r3
 800ceaa:	fa04 f606 	lsl.w	r6, r4, r6
 800ceae:	fa22 f301 	lsr.w	r3, r2, r1
 800ceb2:	40cc      	lsrs	r4, r1
 800ceb4:	431e      	orrs	r6, r3
 800ceb6:	e9c5 6400 	strd	r6, r4, [r5]
 800ceba:	2100      	movs	r1, #0
 800cebc:	e73e      	b.n	800cd3c <__udivmoddi4+0xa4>
 800cebe:	fa02 fe03 	lsl.w	lr, r2, r3
 800cec2:	f1c3 0120 	rsb	r1, r3, #32
 800cec6:	fa04 f203 	lsl.w	r2, r4, r3
 800ceca:	fa00 fc03 	lsl.w	ip, r0, r3
 800cece:	40cc      	lsrs	r4, r1
 800ced0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800ced4:	fa20 f101 	lsr.w	r1, r0, r1
 800ced8:	fa1f f68e 	uxth.w	r6, lr
 800cedc:	fbb4 f0f7 	udiv	r0, r4, r7
 800cee0:	430a      	orrs	r2, r1
 800cee2:	fb07 4410 	mls	r4, r7, r0, r4
 800cee6:	0c11      	lsrs	r1, r2, #16
 800cee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ceec:	fb00 f406 	mul.w	r4, r0, r6
 800cef0:	428c      	cmp	r4, r1
 800cef2:	d90e      	bls.n	800cf12 <__udivmoddi4+0x27a>
 800cef4:	eb1e 0101 	adds.w	r1, lr, r1
 800cef8:	f100 38ff 	add.w	r8, r0, #4294967295
 800cefc:	bf2c      	ite	cs
 800cefe:	f04f 0901 	movcs.w	r9, #1
 800cf02:	f04f 0900 	movcc.w	r9, #0
 800cf06:	428c      	cmp	r4, r1
 800cf08:	d902      	bls.n	800cf10 <__udivmoddi4+0x278>
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	d02c      	beq.n	800cf6a <__udivmoddi4+0x2d2>
 800cf10:	4640      	mov	r0, r8
 800cf12:	1b09      	subs	r1, r1, r4
 800cf14:	b292      	uxth	r2, r2
 800cf16:	fbb1 f4f7 	udiv	r4, r1, r7
 800cf1a:	fb07 1114 	mls	r1, r7, r4, r1
 800cf1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf22:	fb04 f106 	mul.w	r1, r4, r6
 800cf26:	4291      	cmp	r1, r2
 800cf28:	d907      	bls.n	800cf3a <__udivmoddi4+0x2a2>
 800cf2a:	eb1e 0202 	adds.w	r2, lr, r2
 800cf2e:	f104 38ff 	add.w	r8, r4, #4294967295
 800cf32:	d201      	bcs.n	800cf38 <__udivmoddi4+0x2a0>
 800cf34:	4291      	cmp	r1, r2
 800cf36:	d815      	bhi.n	800cf64 <__udivmoddi4+0x2cc>
 800cf38:	4644      	mov	r4, r8
 800cf3a:	1a52      	subs	r2, r2, r1
 800cf3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800cf40:	e721      	b.n	800cd86 <__udivmoddi4+0xee>
 800cf42:	1a86      	subs	r6, r0, r2
 800cf44:	eb64 0303 	sbc.w	r3, r4, r3
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e70e      	b.n	800cd6a <__udivmoddi4+0xd2>
 800cf4c:	3c02      	subs	r4, #2
 800cf4e:	4472      	add	r2, lr
 800cf50:	e735      	b.n	800cdbe <__udivmoddi4+0x126>
 800cf52:	3902      	subs	r1, #2
 800cf54:	4472      	add	r2, lr
 800cf56:	e6d0      	b.n	800ccfa <__udivmoddi4+0x62>
 800cf58:	44f4      	add	ip, lr
 800cf5a:	3802      	subs	r0, #2
 800cf5c:	e6e3      	b.n	800cd26 <__udivmoddi4+0x8e>
 800cf5e:	44f4      	add	ip, lr
 800cf60:	3802      	subs	r0, #2
 800cf62:	e742      	b.n	800cdea <__udivmoddi4+0x152>
 800cf64:	3c02      	subs	r4, #2
 800cf66:	4472      	add	r2, lr
 800cf68:	e7e7      	b.n	800cf3a <__udivmoddi4+0x2a2>
 800cf6a:	3802      	subs	r0, #2
 800cf6c:	4471      	add	r1, lr
 800cf6e:	e7d0      	b.n	800cf12 <__udivmoddi4+0x27a>
 800cf70:	3b02      	subs	r3, #2
 800cf72:	443c      	add	r4, r7
 800cf74:	e782      	b.n	800ce7c <__udivmoddi4+0x1e4>
 800cf76:	3802      	subs	r0, #2
 800cf78:	443c      	add	r4, r7
 800cf7a:	e76a      	b.n	800ce52 <__udivmoddi4+0x1ba>

0800cf7c <__aeabi_idiv0>:
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop

0800cf80 <ADC_operation>:
const float A = 3.9083e-3;
const float B = -5.775e-7;
float temperature;

// Function to handle ADC operations
uint8_t ADC_operation() {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
#if 1
	// Loop through each ADC and channel
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 800cf86:	2300      	movs	r3, #0
 800cf88:	71fb      	strb	r3, [r7, #7]
 800cf8a:	e017      	b.n	800cfbc <ADC_operation+0x3c>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	71bb      	strb	r3, [r7, #6]
 800cf90:	e008      	b.n	800cfa4 <ADC_operation+0x24>
		{
			ADC_READ(ADC_idx, Chn_idx);  // Read ADC value
 800cf92:	79ba      	ldrb	r2, [r7, #6]
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f81d 	bl	800cfd8 <ADC_READ>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 800cf9e:	79bb      	ldrb	r3, [r7, #6]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	71bb      	strb	r3, [r7, #6]
 800cfa4:	79bb      	ldrb	r3, [r7, #6]
 800cfa6:	2b03      	cmp	r3, #3
 800cfa8:	d9f3      	bls.n	800cf92 <ADC_operation+0x12>
		}

		if(SRAM_check)
 800cfaa:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd4 <ADC_operation+0x54>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <ADC_operation+0x36>
			SRAM_operation();
 800cfb2:	f001 ffeb 	bl	800ef8c <SRAM_operation>
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	71fb      	strb	r3, [r7, #7]
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d9e4      	bls.n	800cf8c <ADC_operation+0xc>
	}
	SRAM_check  = 1;
 800cfc2:	4b04      	ldr	r3, [pc, #16]	@ (800cfd4 <ADC_operation+0x54>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	701a      	strb	r2, [r3, #0]
		}
		if(ADC_idx == 2)
			SRAM_operation();
	}
#endif
	return 0;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2000030c 	.word	0x2000030c

0800cfd8 <ADC_READ>:
#endif

#if 1

uint16_t ADC_READ(uint8_t adc_num,uint8_t channel)
{
 800cfd8:	b5b0      	push	{r4, r5, r7, lr}
 800cfda:	b092      	sub	sp, #72	@ 0x48
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	460a      	mov	r2, r1
 800cfe2:	71fb      	strb	r3, [r7, #7]
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	71bb      	strb	r3, [r7, #6]
	//	uint8_t txd_buf[30]={0};
	//	uint8_t status;
	//	uint16_t sensor_value = 0x7FFF;

	uint8_t rxd_buf[30]={0};
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	f107 0310 	add.w	r3, r7, #16
 800cff0:	2200      	movs	r2, #0
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	605a      	str	r2, [r3, #4]
 800cff6:	609a      	str	r2, [r3, #8]
 800cff8:	60da      	str	r2, [r3, #12]
 800cffa:	611a      	str	r2, [r3, #16]
 800cffc:	615a      	str	r2, [r3, #20]
 800cffe:	831a      	strh	r2, [r3, #24]
	uint8_t wirestatus=0;
 800d000:	2300      	movs	r3, #0
 800d002:	72fb      	strb	r3, [r7, #11]
	float resistance = 0;
 800d004:	f04f 0300 	mov.w	r3, #0
 800d008:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sum = 0;           // Sum for averaging
 800d00a:	2300      	movs	r3, #0
 800d00c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint16_t adchex=0;
 800d00e:	2300      	movs	r3, #0
 800d010:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	float average = 0.0;        // Average value
 800d014:	f04f 0300 	mov.w	r3, #0
 800d018:	62fb      	str	r3, [r7, #44]	@ 0x2c


	txd_buf[0] = 0x40; // To write data from 0 register
 800d01a:	4b94      	ldr	r3, [pc, #592]	@ (800d26c <ADC_READ+0x294>)
 800d01c:	2240      	movs	r2, #64	@ 0x40
 800d01e:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x11;	//	Number of register to write
 800d020:	4b92      	ldr	r3, [pc, #584]	@ (800d26c <ADC_READ+0x294>)
 800d022:	2211      	movs	r2, #17
 800d024:	705a      	strb	r2, [r3, #1]
	// Register 0x00: Device ID (read-only, value is reserved or device-specific)
	txd_buf[2] = 0x0C; // Device ID
 800d026:	4b91      	ldr	r3, [pc, #580]	@ (800d26c <ADC_READ+0x294>)
 800d028:	220c      	movs	r2, #12
 800d02a:	709a      	strb	r2, [r3, #2]

	// Register 0x01: STATUS (status flags and ready indicator, typically read-only)
	txd_buf[3] = 0x00; // Placeholder, this is usually not written as it’s read-only
 800d02c:	4b8f      	ldr	r3, [pc, #572]	@ (800d26c <ADC_READ+0x294>)
 800d02e:	2200      	movs	r2, #0
 800d030:	70da      	strb	r2, [r3, #3]

	// Register 0x02: INPMUX (input multiplexer configuration for RTD leg selection)
	txd_buf[4] = 0x76; // Configures the input multiplexer (MUXP and MUXN) for specific RTD connections
 800d032:	4b8e      	ldr	r3, [pc, #568]	@ (800d26c <ADC_READ+0x294>)
 800d034:	2276      	movs	r2, #118	@ 0x76
 800d036:	711a      	strb	r2, [r3, #4]

	// Register 0x03: PGA (programmable gain amplifier configuration)
	txd_buf[5] = 0xEA; // Sets PGA gain = 1, enabling precise low-signal measurement
 800d038:	4b8c      	ldr	r3, [pc, #560]	@ (800d26c <ADC_READ+0x294>)
 800d03a:	22ea      	movs	r2, #234	@ 0xea
 800d03c:	715a      	strb	r2, [r3, #5]

	// Register 0x04: DATARATE (data rate and conversion settings)
	txd_buf[6] = 0x1E; // Sets data rate to 4000 SPS and other configurations
 800d03e:	4b8b      	ldr	r3, [pc, #556]	@ (800d26c <ADC_READ+0x294>)
 800d040:	221e      	movs	r2, #30
 800d042:	719a      	strb	r2, [r3, #6]

	// Register 0x05: REF (reference voltage configuration)
	txd_buf[7] = 0x82; // Reference configuration (enable internal/external reference, etc.)
 800d044:	4b89      	ldr	r3, [pc, #548]	@ (800d26c <ADC_READ+0x294>)
 800d046:	2282      	movs	r2, #130	@ 0x82
 800d048:	71da      	strb	r2, [r3, #7]

	// Register 0x06: IDACMAG (IDAC magnitude configuration)
	txd_buf[8] = 0x87; // Configures excitation current for RTD measurement
 800d04a:	4b88      	ldr	r3, [pc, #544]	@ (800d26c <ADC_READ+0x294>)
 800d04c:	2287      	movs	r2, #135	@ 0x87
 800d04e:	721a      	strb	r2, [r3, #8]

	// Register 0x07: IDACMUX (routes IDAC currents to specific pins)
	txd_buf[9] = 0xFB; // Routes IDAC currents to appropriate RTD pins
 800d050:	4b86      	ldr	r3, [pc, #536]	@ (800d26c <ADC_READ+0x294>)
 800d052:	22fb      	movs	r2, #251	@ 0xfb
 800d054:	725a      	strb	r2, [r3, #9]

	// Register 0x08: VBIAS (voltage bias configuration)
	txd_buf[10] = 0x00; // Disables voltage bias
 800d056:	4b85      	ldr	r3, [pc, #532]	@ (800d26c <ADC_READ+0x294>)
 800d058:	2200      	movs	r2, #0
 800d05a:	729a      	strb	r2, [r3, #10]

	// Register 0x09: SYS (system configuration, including timeout and calibration settings)
	txd_buf[11] = 0x10; // Configures timeout and calibration sample averaging
 800d05c:	4b83      	ldr	r3, [pc, #524]	@ (800d26c <ADC_READ+0x294>)
 800d05e:	2210      	movs	r2, #16
 800d060:	72da      	strb	r2, [r3, #11]

	// Registers 0x0A to 0x0F: Reserved or calibration-related (placeholders in this code)
	txd_buf[12] = 0x00; // Placeholder
 800d062:	4b82      	ldr	r3, [pc, #520]	@ (800d26c <ADC_READ+0x294>)
 800d064:	2200      	movs	r2, #0
 800d066:	731a      	strb	r2, [r3, #12]
	txd_buf[13] = 0x00; // Placeholder
 800d068:	4b80      	ldr	r3, [pc, #512]	@ (800d26c <ADC_READ+0x294>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	735a      	strb	r2, [r3, #13]
	txd_buf[14] = 0x00; // Placeholder
 800d06e:	4b7f      	ldr	r3, [pc, #508]	@ (800d26c <ADC_READ+0x294>)
 800d070:	2200      	movs	r2, #0
 800d072:	739a      	strb	r2, [r3, #14]
	txd_buf[15] = 0x00; // Placeholder
 800d074:	4b7d      	ldr	r3, [pc, #500]	@ (800d26c <ADC_READ+0x294>)
 800d076:	2200      	movs	r2, #0
 800d078:	73da      	strb	r2, [r3, #15]
	txd_buf[16] = 0x00; // Placeholder
 800d07a:	4b7c      	ldr	r3, [pc, #496]	@ (800d26c <ADC_READ+0x294>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	741a      	strb	r2, [r3, #16]

	// Register 0x10: GPIODAT (GPIO data configuration)
	txd_buf[17] = 0x40; // Configures GPIO pin states
 800d080:	4b7a      	ldr	r3, [pc, #488]	@ (800d26c <ADC_READ+0x294>)
 800d082:	2240      	movs	r2, #64	@ 0x40
 800d084:	745a      	strb	r2, [r3, #17]

	// Registers 0x11 to 0x14: Placeholder or unused
	txd_buf[18] = 0x00; // Placeholder
 800d086:	4b79      	ldr	r3, [pc, #484]	@ (800d26c <ADC_READ+0x294>)
 800d088:	2200      	movs	r2, #0
 800d08a:	749a      	strb	r2, [r3, #18]
	txd_buf[19] = 0x00; // Placeholder
 800d08c:	4b77      	ldr	r3, [pc, #476]	@ (800d26c <ADC_READ+0x294>)
 800d08e:	2200      	movs	r2, #0
 800d090:	74da      	strb	r2, [r3, #19]
	txd_buf[20] = 0x00; // Placeholder
 800d092:	4b76      	ldr	r3, [pc, #472]	@ (800d26c <ADC_READ+0x294>)
 800d094:	2200      	movs	r2, #0
 800d096:	751a      	strb	r2, [r3, #20]

	// Note: txd_buf[18] is redundantly assigned. The last assignment will overwrite earlier ones.
	txd_buf[18] = 0x00; // Redundant; ensure this matches intended use.
 800d098:	4b74      	ldr	r3, [pc, #464]	@ (800d26c <ADC_READ+0x294>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	749a      	strb	r2, [r3, #18]

	switch(channel)
 800d09e:	79bb      	ldrb	r3, [r7, #6]
 800d0a0:	2b03      	cmp	r3, #3
 800d0a2:	d827      	bhi.n	800d0f4 <ADC_READ+0x11c>
 800d0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <ADC_READ+0xd4>)
 800d0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0aa:	bf00      	nop
 800d0ac:	0800d0bd 	.word	0x0800d0bd
 800d0b0:	0800d0cb 	.word	0x0800d0cb
 800d0b4:	0800d0d9 	.word	0x0800d0d9
 800d0b8:	0800d0e7 	.word	0x0800d0e7
	{
	case CHANNEL_1:
		txd_buf[4] = 0x43;// Input MUX for RTD legs selection (MUX configuration)
 800d0bc:	4b6b      	ldr	r3, [pc, #428]	@ (800d26c <ADC_READ+0x294>)
 800d0be:	2243      	movs	r2, #67	@ 0x43
 800d0c0:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf5; // IDAC MUX
 800d0c2:	4b6a      	ldr	r3, [pc, #424]	@ (800d26c <ADC_READ+0x294>)
 800d0c4:	22f5      	movs	r2, #245	@ 0xf5
 800d0c6:	725a      	strb	r2, [r3, #9]
		break;
 800d0c8:	e014      	b.n	800d0f4 <ADC_READ+0x11c>

	case CHANNEL_2:
		txd_buf[4] = 0x10; // Input MUX for RTD legs selection (MUX configuration)
 800d0ca:	4b68      	ldr	r3, [pc, #416]	@ (800d26c <ADC_READ+0x294>)
 800d0cc:	2210      	movs	r2, #16
 800d0ce:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf2; // IDAC MUX
 800d0d0:	4b66      	ldr	r3, [pc, #408]	@ (800d26c <ADC_READ+0x294>)
 800d0d2:	22f2      	movs	r2, #242	@ 0xf2
 800d0d4:	725a      	strb	r2, [r3, #9]
		break;
 800d0d6:	e00d      	b.n	800d0f4 <ADC_READ+0x11c>

	case CHANNEL_3:
		txd_buf[4] = 0x9A; // Input MUX for RTD legs selection (MUX configuration)
 800d0d8:	4b64      	ldr	r3, [pc, #400]	@ (800d26c <ADC_READ+0x294>)
 800d0da:	229a      	movs	r2, #154	@ 0x9a
 800d0dc:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf8; // IDAC MUX
 800d0de:	4b63      	ldr	r3, [pc, #396]	@ (800d26c <ADC_READ+0x294>)
 800d0e0:	22f8      	movs	r2, #248	@ 0xf8
 800d0e2:	725a      	strb	r2, [r3, #9]
		break;
 800d0e4:	e006      	b.n	800d0f4 <ADC_READ+0x11c>
	case CHANNEL_4:
		txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 800d0e6:	4b61      	ldr	r3, [pc, #388]	@ (800d26c <ADC_READ+0x294>)
 800d0e8:	2276      	movs	r2, #118	@ 0x76
 800d0ea:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xfb;// IDAC MUX
 800d0ec:	4b5f      	ldr	r3, [pc, #380]	@ (800d26c <ADC_READ+0x294>)
 800d0ee:	22fb      	movs	r2, #251	@ 0xfb
 800d0f0:	725a      	strb	r2, [r3, #9]
		break;
 800d0f2:	bf00      	nop
	}

	switch(adc_num)
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	f000 83ec 	beq.w	800d8d4 <ADC_READ+0x8fc>
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	f300 85b1 	bgt.w	800dc64 <ADC_READ+0xc8c>
 800d102:	2b00      	cmp	r3, #0
 800d104:	d004      	beq.n	800d110 <ADC_READ+0x138>
 800d106:	2b01      	cmp	r3, #1
 800d108:	f000 81e8 	beq.w	800d4dc <ADC_READ+0x504>
 800d10c:	f000 bdaa 	b.w	800dc64 <ADC_READ+0xc8c>
	{
	case ADC_1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d110:	2200      	movs	r2, #0
 800d112:	2140      	movs	r1, #64	@ 0x40
 800d114:	4856      	ldr	r0, [pc, #344]	@ (800d270 <ADC_READ+0x298>)
 800d116:	f004 fdbf 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800d11a:	2200      	movs	r2, #0
 800d11c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d120:	4853      	ldr	r0, [pc, #332]	@ (800d270 <ADC_READ+0x298>)
 800d122:	f004 fdb9 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 800d126:	2200      	movs	r2, #0
 800d128:	2104      	movs	r1, #4
 800d12a:	4852      	ldr	r0, [pc, #328]	@ (800d274 <ADC_READ+0x29c>)
 800d12c:	f004 fdb4 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 800d130:	2201      	movs	r2, #1
 800d132:	2104      	movs	r1, #4
 800d134:	484f      	ldr	r0, [pc, #316]	@ (800d274 <ADC_READ+0x29c>)
 800d136:	f004 fdaf 	bl	8011c98 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d13a:	2200      	movs	r2, #0
 800d13c:	2140      	movs	r1, #64	@ 0x40
 800d13e:	484c      	ldr	r0, [pc, #304]	@ (800d270 <ADC_READ+0x298>)
 800d140:	f004 fdaa 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800d144:	f04f 33ff 	mov.w	r3, #4294967295
 800d148:	2213      	movs	r2, #19
 800d14a:	4948      	ldr	r1, [pc, #288]	@ (800d26c <ADC_READ+0x294>)
 800d14c:	484a      	ldr	r0, [pc, #296]	@ (800d278 <ADC_READ+0x2a0>)
 800d14e:	f00b fe47 	bl	8018de0 <HAL_SPI_Transmit>
		HAL_Delay(1); // don't touch
 800d152:	2001      	movs	r0, #1
 800d154:	f004 f9dc 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d158:	2201      	movs	r2, #1
 800d15a:	2140      	movs	r1, #64	@ 0x40
 800d15c:	4844      	ldr	r0, [pc, #272]	@ (800d270 <ADC_READ+0x298>)
 800d15e:	f004 fd9b 	bl	8011c98 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 800d162:	2201      	movs	r2, #1
 800d164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d168:	4841      	ldr	r0, [pc, #260]	@ (800d270 <ADC_READ+0x298>)
 800d16a:	f004 fd95 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_Delay(1); // don't touch
 800d16e:	2001      	movs	r0, #1
 800d170:	f004 f9ce 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d174:	2200      	movs	r2, #0
 800d176:	2140      	movs	r1, #64	@ 0x40
 800d178:	483d      	ldr	r0, [pc, #244]	@ (800d270 <ADC_READ+0x298>)
 800d17a:	f004 fd8d 	bl	8011c98 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19; // self offset calibration
 800d17e:	4b3b      	ldr	r3, [pc, #236]	@ (800d26c <ADC_READ+0x294>)
 800d180:	2219      	movs	r2, #25
 800d182:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800d184:	f04f 33ff 	mov.w	r3, #4294967295
 800d188:	2201      	movs	r2, #1
 800d18a:	4938      	ldr	r1, [pc, #224]	@ (800d26c <ADC_READ+0x294>)
 800d18c:	483a      	ldr	r0, [pc, #232]	@ (800d278 <ADC_READ+0x2a0>)
 800d18e:	f00b fe27 	bl	8018de0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d192:	2201      	movs	r2, #1
 800d194:	2140      	movs	r1, #64	@ 0x40
 800d196:	4836      	ldr	r0, [pc, #216]	@ (800d270 <ADC_READ+0x298>)
 800d198:	f004 fd7e 	bl	8011c98 <HAL_GPIO_WritePin>

		HAL_Delay(wait_time);
 800d19c:	4b37      	ldr	r3, [pc, #220]	@ (800d27c <ADC_READ+0x2a4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f004 f9b5 	bl	8011510 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2140      	movs	r1, #64	@ 0x40
 800d1aa:	4831      	ldr	r0, [pc, #196]	@ (800d270 <ADC_READ+0x298>)
 800d1ac:	f004 fd74 	bl	8011c98 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 800d1b0:	4b2e      	ldr	r3, [pc, #184]	@ (800d26c <ADC_READ+0x294>)
 800d1b2:	2213      	movs	r2, #19
 800d1b4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ba:	e070      	b.n	800d29e <ADC_READ+0x2c6>
		{
			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFFFF);
 800d1bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	492a      	ldr	r1, [pc, #168]	@ (800d26c <ADC_READ+0x294>)
 800d1c4:	482c      	ldr	r0, [pc, #176]	@ (800d278 <ADC_READ+0x2a0>)
 800d1c6:	f00b fe0b 	bl	8018de0 <HAL_SPI_Transmit>
			HAL_Delay(1);
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	f004 f9a0 	bl	8011510 <HAL_Delay>
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1[i], 0x2, 0xFFFF);
 800d1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	4a2a      	ldr	r2, [pc, #168]	@ (800d280 <ADC_READ+0x2a8>)
 800d1d6:	1899      	adds	r1, r3, r2
 800d1d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1dc:	2202      	movs	r2, #2
 800d1de:	4826      	ldr	r0, [pc, #152]	@ (800d278 <ADC_READ+0x2a0>)
 800d1e0:	f00c f814 	bl	801920c <HAL_SPI_Receive>
			HAL_Delay(1);
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	f004 f993 	bl	8011510 <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_1[i] = (reg_data_ADC_1[i] >> 8) | (reg_data_ADC_1[i] << 8);
 800d1ea:	4a25      	ldr	r2, [pc, #148]	@ (800d280 <ADC_READ+0x2a8>)
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1f2:	0a1b      	lsrs	r3, r3, #8
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	b21a      	sxth	r2, r3
 800d1f8:	4921      	ldr	r1, [pc, #132]	@ (800d280 <ADC_READ+0x2a8>)
 800d1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d200:	021b      	lsls	r3, r3, #8
 800d202:	b21b      	sxth	r3, r3
 800d204:	4313      	orrs	r3, r2
 800d206:	b21b      	sxth	r3, r3
 800d208:	b299      	uxth	r1, r3
 800d20a:	4a1d      	ldr	r2, [pc, #116]	@ (800d280 <ADC_READ+0x2a8>)
 800d20c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d20e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 800d212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d214:	2b00      	cmp	r3, #0
 800d216:	dd37      	ble.n	800d288 <ADC_READ+0x2b0>
			{
				if(((reg_data_ADC_1[i]-reg_data_ADC_1[i-1])<2)||((reg_data_ADC_1[i-1]-reg_data_ADC_1[i])<2))
 800d218:	4a19      	ldr	r2, [pc, #100]	@ (800d280 <ADC_READ+0x2a8>)
 800d21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d21c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d220:	4619      	mov	r1, r3
 800d222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d224:	3b01      	subs	r3, #1
 800d226:	4a16      	ldr	r2, [pc, #88]	@ (800d280 <ADC_READ+0x2a8>)
 800d228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d22c:	1acb      	subs	r3, r1, r3
 800d22e:	2b01      	cmp	r3, #1
 800d230:	dd0c      	ble.n	800d24c <ADC_READ+0x274>
 800d232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d234:	3b01      	subs	r3, #1
 800d236:	4a12      	ldr	r2, [pc, #72]	@ (800d280 <ADC_READ+0x2a8>)
 800d238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d23c:	4619      	mov	r1, r3
 800d23e:	4a10      	ldr	r2, [pc, #64]	@ (800d280 <ADC_READ+0x2a8>)
 800d240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d246:	1acb      	subs	r3, r1, r3
 800d248:	2b01      	cmp	r3, #1
 800d24a:	dc08      	bgt.n	800d25e <ADC_READ+0x286>
				{
					sum += reg_data_ADC_1[i];
 800d24c:	4a0c      	ldr	r2, [pc, #48]	@ (800d280 <ADC_READ+0x2a8>)
 800d24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d254:	461a      	mov	r2, r3
 800d256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d258:	4413      	add	r3, r2
 800d25a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d25c:	e01c      	b.n	800d298 <ADC_READ+0x2c0>
				}
				else
				{
					diff_count++;
 800d25e:	4b09      	ldr	r3, [pc, #36]	@ (800d284 <ADC_READ+0x2ac>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <ADC_READ+0x2ac>)
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	e015      	b.n	800d298 <ADC_READ+0x2c0>
 800d26c:	200002ac 	.word	0x200002ac
 800d270:	42021400 	.word	0x42021400
 800d274:	42020800 	.word	0x42020800
 800d278:	20005840 	.word	0x20005840
 800d27c:	20000000 	.word	0x20000000
 800d280:	200002d0 	.word	0x200002d0
 800d284:	2000030d 	.word	0x2000030d
				}
			}
			else
			{
				sum += reg_data_ADC_1[i];
 800d288:	4ac5      	ldr	r2, [pc, #788]	@ (800d5a0 <ADC_READ+0x5c8>)
 800d28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d290:	461a      	mov	r2, r3
 800d292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d294:	4413      	add	r3, r2
 800d296:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 800d298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29a:	3301      	adds	r3, #1
 800d29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a0:	2b09      	cmp	r3, #9
 800d2a2:	dd8b      	ble.n	800d1bc <ADC_READ+0x1e4>
			}

		}

		if(diff_count > 5) sum =0;
 800d2a4:	4bbf      	ldr	r3, [pc, #764]	@ (800d5a4 <ADC_READ+0x5cc>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b05      	cmp	r3, #5
 800d2aa:	d901      	bls.n	800d2b0 <ADC_READ+0x2d8>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 800d2b0:	4bbc      	ldr	r3, [pc, #752]	@ (800d5a4 <ADC_READ+0x5cc>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_1[i];  // Add to sum for averaging
	}
#endif

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	2140      	movs	r1, #64	@ 0x40
 800d2ba:	48bb      	ldr	r0, [pc, #748]	@ (800d5a8 <ADC_READ+0x5d0>)
 800d2bc:	f004 fcec 	bl	8011c98 <HAL_GPIO_WritePin>

	average = sum / 10.0;
 800d2c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d2c2:	f7ff f92f 	bl	800c524 <__aeabi_ui2d>
 800d2c6:	f04f 0200 	mov.w	r2, #0
 800d2ca:	4bb8      	ldr	r3, [pc, #736]	@ (800d5ac <ADC_READ+0x5d4>)
 800d2cc:	f7ff face 	bl	800c86c <__aeabi_ddiv>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f7ff fc76 	bl	800cbc8 <__aeabi_d2f>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adchex  = sum / 10;
 800d2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e2:	4ab3      	ldr	r2, [pc, #716]	@ (800d5b0 <ADC_READ+0x5d8>)
 800d2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e8:	08db      	lsrs	r3, r3, #3
 800d2ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800d2ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d2f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800d5b4 <ADC_READ+0x5dc>
 800d2f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800d2fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d302:	eddf 6aad 	vldr	s13, [pc, #692]	@ 800d5b8 <ADC_READ+0x5e0>
 800d306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d30a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	//Callendar-Van Dusen Equation
	if (resistance >= R0) {  // Above 0°C
 800d30e:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 800d5bc <ADC_READ+0x5e4>
 800d312:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31e:	db50      	blt.n	800d3c2 <ADC_READ+0x3ea>
		temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800d320:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 800d5c0 <ADC_READ+0x5e8>
 800d324:	eef1 7a67 	vneg.f32	s15, s15
 800d328:	ee17 3a90 	vmov	r3, s15
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff f91b 	bl	800c568 <__aeabi_f2d>
 800d332:	4604      	mov	r4, r0
 800d334:	460d      	mov	r5, r1
 800d336:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800d5c0 <ADC_READ+0x5e8>
 800d33a:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 800d5c0 <ADC_READ+0x5e8>
 800d33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d342:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800d5c4 <ADC_READ+0x5ec>
 800d346:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800d34a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d34e:	eddf 5a9b 	vldr	s11, [pc, #620]	@ 800d5bc <ADC_READ+0x5e4>
 800d352:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800d356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800d35e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d36a:	ee17 0a90 	vmov	r0, s15
 800d36e:	f7ff f8fb 	bl	800c568 <__aeabi_f2d>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	ec43 2b10 	vmov	d0, r2, r3
 800d37a:	f011 fd69 	bl	801ee50 <sqrt>
 800d37e:	ec53 2b10 	vmov	r2, r3, d0
 800d382:	4620      	mov	r0, r4
 800d384:	4629      	mov	r1, r5
 800d386:	f7fe ff91 	bl	800c2ac <__adddf3>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4614      	mov	r4, r2
 800d390:	461d      	mov	r5, r3
 800d392:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 800d5c4 <ADC_READ+0x5ec>
 800d396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d39a:	ee17 0a90 	vmov	r0, s15
 800d39e:	f7ff f8e3 	bl	800c568 <__aeabi_f2d>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	f7ff fa5f 	bl	800c86c <__aeabi_ddiv>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f7ff fc07 	bl	800cbc8 <__aeabi_d2f>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4a82      	ldr	r2, [pc, #520]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	e017      	b.n	800d3f2 <ADC_READ+0x41a>
	}
	else
	{  // Below 0°C, use simpler approximation
		temperature = (resistance - R0) / 0.385;
 800d3c2:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800d5bc <ADC_READ+0x5e4>
 800d3c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d3ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3ce:	ee17 0a90 	vmov	r0, s15
 800d3d2:	f7ff f8c9 	bl	800c568 <__aeabi_f2d>
 800d3d6:	a370      	add	r3, pc, #448	@ (adr r3, 800d598 <ADC_READ+0x5c0>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7ff fa46 	bl	800c86c <__aeabi_ddiv>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	f7ff fbee 	bl	800cbc8 <__aeabi_d2f>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4a76      	ldr	r2, [pc, #472]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d3f0:	6013      	str	r3, [r2, #0]
	}

	if(rxd_buf[7]==txd_buf[9])
 800d3f2:	7cfa      	ldrb	r2, [r7, #19]
 800d3f4:	4b75      	ldr	r3, [pc, #468]	@ (800d5cc <ADC_READ+0x5f4>)
 800d3f6:	7a5b      	ldrb	r3, [r3, #9]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d10e      	bne.n	800d41a <ADC_READ+0x442>
	{
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d402:	4873      	ldr	r0, [pc, #460]	@ (800d5d0 <ADC_READ+0x5f8>)
 800d404:	f004 fc48 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800d408:	2001      	movs	r0, #1
 800d40a:	f004 f881 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 800d40e:	2200      	movs	r2, #0
 800d410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d414:	486e      	ldr	r0, [pc, #440]	@ (800d5d0 <ADC_READ+0x5f8>)
 800d416:	f004 fc3f 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_Delay(20);
#endif

#ifdef WIREBREAK

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d41a:	2200      	movs	r2, #0
 800d41c:	2140      	movs	r1, #64	@ 0x40
 800d41e:	4862      	ldr	r0, [pc, #392]	@ (800d5a8 <ADC_READ+0x5d0>)
 800d420:	f004 fc3a 	bl	8011c98 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x21;
 800d424:	4b69      	ldr	r3, [pc, #420]	@ (800d5cc <ADC_READ+0x5f4>)
 800d426:	2221      	movs	r2, #33	@ 0x21
 800d428:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x00;
 800d42a:	4b68      	ldr	r3, [pc, #416]	@ (800d5cc <ADC_READ+0x5f4>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800d430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d434:	2202      	movs	r2, #2
 800d436:	4965      	ldr	r1, [pc, #404]	@ (800d5cc <ADC_READ+0x5f4>)
 800d438:	4866      	ldr	r0, [pc, #408]	@ (800d5d4 <ADC_READ+0x5fc>)
 800d43a:	f00b fcd1 	bl	8018de0 <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_SPI_Receive(&hspi5, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800d43e:	f107 010b 	add.w	r1, r7, #11
 800d442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d446:	2201      	movs	r2, #1
 800d448:	4862      	ldr	r0, [pc, #392]	@ (800d5d4 <ADC_READ+0x5fc>)
 800d44a:	f00b fedf 	bl	801920c <HAL_SPI_Receive>
//	HAL_Delay(1);

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d44e:	2201      	movs	r2, #1
 800d450:	2140      	movs	r1, #64	@ 0x40
 800d452:	4855      	ldr	r0, [pc, #340]	@ (800d5a8 <ADC_READ+0x5d0>)
 800d454:	f004 fc20 	bl	8011c98 <HAL_GPIO_WritePin>

	if (wire_break(wirestatus))
 800d458:	7afb      	ldrb	r3, [r7, #11]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 fc28 	bl	800dcb0 <wire_break>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00e      	beq.n	800d484 <ADC_READ+0x4ac>
	{
		wirestatus=0;
 800d466:	2300      	movs	r3, #0
 800d468:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800d46a:	4b57      	ldr	r3, [pc, #348]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d46c:	f04f 0200 	mov.w	r2, #0
 800d470:	601a      	str	r2, [r3, #0]
		adchex =0;
 800d472:	2300      	movs	r3, #0
 800d474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 800d478:	2214      	movs	r2, #20
 800d47a:	2100      	movs	r1, #0
 800d47c:	4848      	ldr	r0, [pc, #288]	@ (800d5a0 <ADC_READ+0x5c8>)
 800d47e:	f00f fbf0 	bl	801cc62 <memset>
 800d482:	e015      	b.n	800d4b0 <ADC_READ+0x4d8>
	}
	else if(check_sensor_validity(adchex))
 800d484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d488:	4618      	mov	r0, r3
 800d48a:	f000 fbf9 	bl	800dc80 <check_sensor_validity>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00d      	beq.n	800d4b0 <ADC_READ+0x4d8>
	{
		wirestatus=0;
 800d494:	2300      	movs	r3, #0
 800d496:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800d498:	4b4b      	ldr	r3, [pc, #300]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d49a:	f04f 0200 	mov.w	r2, #0
 800d49e:	601a      	str	r2, [r3, #0]
		adchex =0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 800d4a6:	2214      	movs	r2, #20
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	483d      	ldr	r0, [pc, #244]	@ (800d5a0 <ADC_READ+0x5c8>)
 800d4ac:	f00f fbd9 	bl	801cc62 <memset>
	}
	wirestatus=0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	72fb      	strb	r3, [r7, #11]

#endif
	temp_sensor[adc_num][channel] = temperature ;
 800d4b4:	79f9      	ldrb	r1, [r7, #7]
 800d4b6:	79bb      	ldrb	r3, [r7, #6]
 800d4b8:	4a43      	ldr	r2, [pc, #268]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d4ba:	6812      	ldr	r2, [r2, #0]
 800d4bc:	4846      	ldr	r0, [pc, #280]	@ (800d5d8 <ADC_READ+0x600>)
 800d4be:	0089      	lsls	r1, r1, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4403      	add	r3, r0
 800d4c6:	601a      	str	r2, [r3, #0]
	sensor_hex[adc_num][channel] = 	adchex ;
 800d4c8:	79fa      	ldrb	r2, [r7, #7]
 800d4ca:	79bb      	ldrb	r3, [r7, #6]
 800d4cc:	4943      	ldr	r1, [pc, #268]	@ (800d5dc <ADC_READ+0x604>)
 800d4ce:	0092      	lsls	r2, r2, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d4d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	//		sensor_value =	sum / 10;
	break;
 800d4da:	e3c3      	b.n	800dc64 <ADC_READ+0xc8c>

	case ADC_2:

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d4e2:	483f      	ldr	r0, [pc, #252]	@ (800d5e0 <ADC_READ+0x608>)
 800d4e4:	f004 fbd8 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2140      	movs	r1, #64	@ 0x40
 800d4ec:	483d      	ldr	r0, [pc, #244]	@ (800d5e4 <ADC_READ+0x60c>)
 800d4ee:	f004 fbd3 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d4f8:	483a      	ldr	r0, [pc, #232]	@ (800d5e4 <ADC_READ+0x60c>)
 800d4fa:	f004 fbcd 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 800d4fe:	2201      	movs	r2, #1
 800d500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d504:	4837      	ldr	r0, [pc, #220]	@ (800d5e4 <ADC_READ+0x60c>)
 800d506:	f004 fbc7 	bl	8011c98 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d50a:	2200      	movs	r2, #0
 800d50c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d510:	4833      	ldr	r0, [pc, #204]	@ (800d5e0 <ADC_READ+0x608>)
 800d512:	f004 fbc1 	bl	8011c98 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800d516:	f04f 33ff 	mov.w	r3, #4294967295
 800d51a:	2213      	movs	r2, #19
 800d51c:	492b      	ldr	r1, [pc, #172]	@ (800d5cc <ADC_READ+0x5f4>)
 800d51e:	4832      	ldr	r0, [pc, #200]	@ (800d5e8 <ADC_READ+0x610>)
 800d520:	f00b fc5e 	bl	8018de0 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800d524:	2001      	movs	r0, #1
 800d526:	f003 fff3 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d52a:	2201      	movs	r2, #1
 800d52c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d530:	482b      	ldr	r0, [pc, #172]	@ (800d5e0 <ADC_READ+0x608>)
 800d532:	f004 fbb1 	bl	8011c98 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 800d536:	2201      	movs	r2, #1
 800d538:	2140      	movs	r1, #64	@ 0x40
 800d53a:	482a      	ldr	r0, [pc, #168]	@ (800d5e4 <ADC_READ+0x60c>)
 800d53c:	f004 fbac 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800d540:	2001      	movs	r0, #1
 800d542:	f003 ffe5 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d546:	2200      	movs	r2, #0
 800d548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d54c:	4824      	ldr	r0, [pc, #144]	@ (800d5e0 <ADC_READ+0x608>)
 800d54e:	f004 fba3 	bl	8011c98 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 800d552:	4b1e      	ldr	r3, [pc, #120]	@ (800d5cc <ADC_READ+0x5f4>)
 800d554:	2219      	movs	r2, #25
 800d556:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800d558:	f04f 33ff 	mov.w	r3, #4294967295
 800d55c:	2201      	movs	r2, #1
 800d55e:	491b      	ldr	r1, [pc, #108]	@ (800d5cc <ADC_READ+0x5f4>)
 800d560:	4821      	ldr	r0, [pc, #132]	@ (800d5e8 <ADC_READ+0x610>)
 800d562:	f00b fc3d 	bl	8018de0 <HAL_SPI_Transmit>
//		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d566:	2201      	movs	r2, #1
 800d568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d56c:	481c      	ldr	r0, [pc, #112]	@ (800d5e0 <ADC_READ+0x608>)
 800d56e:	f004 fb93 	bl	8011c98 <HAL_GPIO_WritePin>


		HAL_Delay(wait_time);
 800d572:	4b1e      	ldr	r3, [pc, #120]	@ (800d5ec <ADC_READ+0x614>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	f003 ffca 	bl	8011510 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d57c:	2200      	movs	r2, #0
 800d57e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d582:	4817      	ldr	r0, [pc, #92]	@ (800d5e0 <ADC_READ+0x608>)
 800d584:	f004 fb88 	bl	8011c98 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 800d588:	4b10      	ldr	r3, [pc, #64]	@ (800d5cc <ADC_READ+0x5f4>)
 800d58a:	2213      	movs	r2, #19
 800d58c:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 10; i++)
 800d58e:	2300      	movs	r3, #0
 800d590:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d592:	e063      	b.n	800d65c <ADC_READ+0x684>
 800d594:	f3af 8000 	nop.w
 800d598:	0a3d70a4 	.word	0x0a3d70a4
 800d59c:	3fd8a3d7 	.word	0x3fd8a3d7
 800d5a0:	200002d0 	.word	0x200002d0
 800d5a4:	2000030d 	.word	0x2000030d
 800d5a8:	42021400 	.word	0x42021400
 800d5ac:	40240000 	.word	0x40240000
 800d5b0:	cccccccd 	.word	0xcccccccd
 800d5b4:	44fa0000 	.word	0x44fa0000
 800d5b8:	477fff00 	.word	0x477fff00
 800d5bc:	42c80000 	.word	0x42c80000
 800d5c0:	3b801132 	.word	0x3b801132
 800d5c4:	b51b057f 	.word	0xb51b057f
 800d5c8:	200002cc 	.word	0x200002cc
 800d5cc:	200002ac 	.word	0x200002ac
 800d5d0:	42021000 	.word	0x42021000
 800d5d4:	20005840 	.word	0x20005840
 800d5d8:	20000310 	.word	0x20000310
 800d5dc:	20000340 	.word	0x20000340
 800d5e0:	42020400 	.word	0x42020400
 800d5e4:	42021800 	.word	0x42021800
 800d5e8:	20005720 	.word	0x20005720
 800d5ec:	20000000 	.word	0x20000000
		{
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFFFF);
 800d5f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	49a8      	ldr	r1, [pc, #672]	@ (800d898 <ADC_READ+0x8c0>)
 800d5f8:	48a8      	ldr	r0, [pc, #672]	@ (800d89c <ADC_READ+0x8c4>)
 800d5fa:	f00b fbf1 	bl	8018de0 <HAL_SPI_Transmit>
			HAL_Delay(1);
 800d5fe:	2001      	movs	r0, #1
 800d600:	f003 ff86 	bl	8011510 <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2[i], 0x2, 0xFFFF);
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	4aa5      	ldr	r2, [pc, #660]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d60a:	1899      	adds	r1, r3, r2
 800d60c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d610:	2202      	movs	r2, #2
 800d612:	48a2      	ldr	r0, [pc, #648]	@ (800d89c <ADC_READ+0x8c4>)
 800d614:	f00b fdfa 	bl	801920c <HAL_SPI_Receive>
			HAL_Delay(1);
 800d618:	2001      	movs	r0, #1
 800d61a:	f003 ff79 	bl	8011510 <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_2[i] = (reg_data_ADC_2[i] >> 8) | (reg_data_ADC_2[i] << 8);
 800d61e:	4aa0      	ldr	r2, [pc, #640]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d626:	0a1b      	lsrs	r3, r3, #8
 800d628:	b29b      	uxth	r3, r3
 800d62a:	b21a      	sxth	r2, r3
 800d62c:	499c      	ldr	r1, [pc, #624]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d634:	021b      	lsls	r3, r3, #8
 800d636:	b21b      	sxth	r3, r3
 800d638:	4313      	orrs	r3, r2
 800d63a:	b21b      	sxth	r3, r3
 800d63c:	b299      	uxth	r1, r3
 800d63e:	4a98      	ldr	r2, [pc, #608]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(diff_count > 5) sum =0;
		diff_count=0;
#else

		sum += reg_data_ADC_2[i];  // Add to sum for averaging
 800d646:	4a96      	ldr	r2, [pc, #600]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d64e:	461a      	mov	r2, r3
 800d650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d652:	4413      	add	r3, r2
 800d654:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	3301      	adds	r3, #1
 800d65a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65e:	2b09      	cmp	r3, #9
 800d660:	ddc6      	ble.n	800d5f0 <ADC_READ+0x618>
}
#endif

adchex =  sum / 10;
 800d662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d664:	4a8f      	ldr	r2, [pc, #572]	@ (800d8a4 <ADC_READ+0x8cc>)
 800d666:	fba2 2303 	umull	r2, r3, r2, r3
 800d66a:	08db      	lsrs	r3, r3, #3
 800d66c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 800d670:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d672:	f7fe ff57 	bl	800c524 <__aeabi_ui2d>
 800d676:	f04f 0200 	mov.w	r2, #0
 800d67a:	4b8b      	ldr	r3, [pc, #556]	@ (800d8a8 <ADC_READ+0x8d0>)
 800d67c:	f7ff f8f6 	bl	800c86c <__aeabi_ddiv>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4610      	mov	r0, r2
 800d686:	4619      	mov	r1, r3
 800d688:	f7ff fa9e 	bl	800cbc8 <__aeabi_d2f>
 800d68c:	4603      	mov	r3, r0
 800d68e:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d690:	2201      	movs	r2, #1
 800d692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d696:	4885      	ldr	r0, [pc, #532]	@ (800d8ac <ADC_READ+0x8d4>)
 800d698:	f004 fafe 	bl	8011c98 <HAL_GPIO_WritePin>

resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800d69c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d6a0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800d8b0 <ADC_READ+0x8d8>
 800d6a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800d6ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d6b0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800d8b4 <ADC_READ+0x8dc>
 800d6b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 800d6bc:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800d8b8 <ADC_READ+0x8e0>
 800d6c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d6c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6cc:	db50      	blt.n	800d770 <ADC_READ+0x798>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800d6ce:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 800d8bc <ADC_READ+0x8e4>
 800d6d2:	eef1 7a67 	vneg.f32	s15, s15
 800d6d6:	ee17 3a90 	vmov	r3, s15
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe ff44 	bl	800c568 <__aeabi_f2d>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800d8bc <ADC_READ+0x8e4>
 800d6e8:	eddf 7a74 	vldr	s15, [pc, #464]	@ 800d8bc <ADC_READ+0x8e4>
 800d6ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800d8c0 <ADC_READ+0x8e8>
 800d6f4:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800d6f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d6fc:	eddf 5a6e 	vldr	s11, [pc, #440]	@ 800d8b8 <ADC_READ+0x8e0>
 800d700:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800d704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d708:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800d70c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d714:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d718:	ee17 0a90 	vmov	r0, s15
 800d71c:	f7fe ff24 	bl	800c568 <__aeabi_f2d>
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	ec43 2b10 	vmov	d0, r2, r3
 800d728:	f011 fb92 	bl	801ee50 <sqrt>
 800d72c:	ec53 2b10 	vmov	r2, r3, d0
 800d730:	4620      	mov	r0, r4
 800d732:	4629      	mov	r1, r5
 800d734:	f7fe fdba 	bl	800c2ac <__adddf3>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4614      	mov	r4, r2
 800d73e:	461d      	mov	r5, r3
 800d740:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 800d8c0 <ADC_READ+0x8e8>
 800d744:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d748:	ee17 0a90 	vmov	r0, s15
 800d74c:	f7fe ff0c 	bl	800c568 <__aeabi_f2d>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4620      	mov	r0, r4
 800d756:	4629      	mov	r1, r5
 800d758:	f7ff f888 	bl	800c86c <__aeabi_ddiv>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4610      	mov	r0, r2
 800d762:	4619      	mov	r1, r3
 800d764:	f7ff fa30 	bl	800cbc8 <__aeabi_d2f>
 800d768:	4603      	mov	r3, r0
 800d76a:	4a56      	ldr	r2, [pc, #344]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	e017      	b.n	800d7a0 <ADC_READ+0x7c8>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 800d770:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800d8b8 <ADC_READ+0x8e0>
 800d774:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d77c:	ee17 0a90 	vmov	r0, s15
 800d780:	f7fe fef2 	bl	800c568 <__aeabi_f2d>
 800d784:	a342      	add	r3, pc, #264	@ (adr r3, 800d890 <ADC_READ+0x8b8>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7ff f86f 	bl	800c86c <__aeabi_ddiv>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4610      	mov	r0, r2
 800d794:	4619      	mov	r1, r3
 800d796:	f7ff fa17 	bl	800cbc8 <__aeabi_d2f>
 800d79a:	4603      	mov	r3, r0
 800d79c:	4a49      	ldr	r2, [pc, #292]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d79e:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9] )
 800d7a0:	7cfa      	ldrb	r2, [r7, #19]
 800d7a2:	4b3d      	ldr	r3, [pc, #244]	@ (800d898 <ADC_READ+0x8c0>)
 800d7a4:	7a5b      	ldrb	r3, [r3, #9]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d10e      	bne.n	800d7c8 <ADC_READ+0x7f0>
{
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 1); // Toggle LED for visual feedback
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d7b0:	4845      	ldr	r0, [pc, #276]	@ (800d8c8 <ADC_READ+0x8f0>)
 800d7b2:	f004 fa71 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	f003 feaa 	bl	8011510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 0);
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d7c2:	4841      	ldr	r0, [pc, #260]	@ (800d8c8 <ADC_READ+0x8f0>)
 800d7c4:	f004 fa68 	bl	8011c98 <HAL_GPIO_WritePin>
HAL_Delay(20);
#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d7ce:	4837      	ldr	r0, [pc, #220]	@ (800d8ac <ADC_READ+0x8d4>)
 800d7d0:	f004 fa62 	bl	8011c98 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 800d7d4:	4b30      	ldr	r3, [pc, #192]	@ (800d898 <ADC_READ+0x8c0>)
 800d7d6:	2221      	movs	r2, #33	@ 0x21
 800d7d8:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 800d7da:	4b2f      	ldr	r3, [pc, #188]	@ (800d898 <ADC_READ+0x8c0>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	705a      	strb	r2, [r3, #1]

HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800d7e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7e4:	2202      	movs	r2, #2
 800d7e6:	492c      	ldr	r1, [pc, #176]	@ (800d898 <ADC_READ+0x8c0>)
 800d7e8:	482c      	ldr	r0, [pc, #176]	@ (800d89c <ADC_READ+0x8c4>)
 800d7ea:	f00b faf9 	bl	8018de0 <HAL_SPI_Transmit>
//HAL_Delay(1);
HAL_SPI_Receive(&hspi2, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800d7ee:	f107 010b 	add.w	r1, r7, #11
 800d7f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4828      	ldr	r0, [pc, #160]	@ (800d89c <ADC_READ+0x8c4>)
 800d7fa:	f00b fd07 	bl	801920c <HAL_SPI_Receive>
//HAL_Delay(1);

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d7fe:	2201      	movs	r2, #1
 800d800:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d804:	4829      	ldr	r0, [pc, #164]	@ (800d8ac <ADC_READ+0x8d4>)
 800d806:	f004 fa47 	bl	8011c98 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 800d80a:	7afb      	ldrb	r3, [r7, #11]
 800d80c:	4618      	mov	r0, r3
 800d80e:	f000 fa4f 	bl	800dcb0 <wire_break>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00e      	beq.n	800d836 <ADC_READ+0x85e>
{
	wirestatus=0;
 800d818:	2300      	movs	r3, #0
 800d81a:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800d81c:	4b29      	ldr	r3, [pc, #164]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d81e:	f04f 0200 	mov.w	r2, #0
 800d822:	601a      	str	r2, [r3, #0]
	adchex=0;
 800d824:	2300      	movs	r3, #0
 800d826:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 800d82a:	2214      	movs	r2, #20
 800d82c:	2100      	movs	r1, #0
 800d82e:	481c      	ldr	r0, [pc, #112]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d830:	f00f fa17 	bl	801cc62 <memset>
 800d834:	e015      	b.n	800d862 <ADC_READ+0x88a>
}
else if(check_sensor_validity(adchex))
 800d836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fa20 	bl	800dc80 <check_sensor_validity>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00d      	beq.n	800d862 <ADC_READ+0x88a>
{
	wirestatus=0;
 800d846:	2300      	movs	r3, #0
 800d848:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800d84a:	4b1e      	ldr	r3, [pc, #120]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d84c:	f04f 0200 	mov.w	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
	adchex =0;
 800d852:	2300      	movs	r3, #0
 800d854:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 800d858:	2214      	movs	r2, #20
 800d85a:	2100      	movs	r1, #0
 800d85c:	4810      	ldr	r0, [pc, #64]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d85e:	f00f fa00 	bl	801cc62 <memset>
}
wirestatus=0;
 800d862:	2300      	movs	r3, #0
 800d864:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 800d866:	79f9      	ldrb	r1, [r7, #7]
 800d868:	79bb      	ldrb	r3, [r7, #6]
 800d86a:	4a16      	ldr	r2, [pc, #88]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d86c:	6812      	ldr	r2, [r2, #0]
 800d86e:	4817      	ldr	r0, [pc, #92]	@ (800d8cc <ADC_READ+0x8f4>)
 800d870:	0089      	lsls	r1, r1, #2
 800d872:	440b      	add	r3, r1
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	4403      	add	r3, r0
 800d878:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 800d87a:	79fa      	ldrb	r2, [r7, #7]
 800d87c:	79bb      	ldrb	r3, [r7, #6]
 800d87e:	4914      	ldr	r1, [pc, #80]	@ (800d8d0 <ADC_READ+0x8f8>)
 800d880:	0092      	lsls	r2, r2, #2
 800d882:	4413      	add	r3, r2
 800d884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d888:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 800d88c:	e1ea      	b.n	800dc64 <ADC_READ+0xc8c>
 800d88e:	bf00      	nop
 800d890:	0a3d70a4 	.word	0x0a3d70a4
 800d894:	3fd8a3d7 	.word	0x3fd8a3d7
 800d898:	200002ac 	.word	0x200002ac
 800d89c:	20005720 	.word	0x20005720
 800d8a0:	200002e4 	.word	0x200002e4
 800d8a4:	cccccccd 	.word	0xcccccccd
 800d8a8:	40240000 	.word	0x40240000
 800d8ac:	42020400 	.word	0x42020400
 800d8b0:	44fa0000 	.word	0x44fa0000
 800d8b4:	477fff00 	.word	0x477fff00
 800d8b8:	42c80000 	.word	0x42c80000
 800d8bc:	3b801132 	.word	0x3b801132
 800d8c0:	b51b057f 	.word	0xb51b057f
 800d8c4:	200002cc 	.word	0x200002cc
 800d8c8:	42021000 	.word	0x42021000
 800d8cc:	20000310 	.word	0x20000310
 800d8d0:	20000340 	.word	0x20000340

case ADC_3:

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	48bd      	ldr	r0, [pc, #756]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d8da:	f004 f9dd 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d8e4:	48bb      	ldr	r0, [pc, #748]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d8e6:	f004 f9d7 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d8f0:	48b8      	ldr	r0, [pc, #736]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d8f2:	f004 f9d1 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d8fc:	48b5      	ldr	r0, [pc, #724]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d8fe:	f004 f9cb 	bl	8011c98 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d902:	2200      	movs	r2, #0
 800d904:	2110      	movs	r1, #16
 800d906:	48b2      	ldr	r0, [pc, #712]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d908:	f004 f9c6 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800d90c:	f04f 33ff 	mov.w	r3, #4294967295
 800d910:	2213      	movs	r2, #19
 800d912:	49b1      	ldr	r1, [pc, #708]	@ (800dbd8 <ADC_READ+0xc00>)
 800d914:	48b1      	ldr	r0, [pc, #708]	@ (800dbdc <ADC_READ+0xc04>)
 800d916:	f00b fa63 	bl	8018de0 <HAL_SPI_Transmit>
	HAL_Delay(1);
 800d91a:	2001      	movs	r0, #1
 800d91c:	f003 fdf8 	bl	8011510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800d920:	2201      	movs	r2, #1
 800d922:	2110      	movs	r1, #16
 800d924:	48aa      	ldr	r0, [pc, #680]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d926:	f004 f9b7 	bl	8011c98 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 800d92a:	2201      	movs	r2, #1
 800d92c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d930:	48a8      	ldr	r0, [pc, #672]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d932:	f004 f9b1 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d936:	2001      	movs	r0, #1
 800d938:	f003 fdea 	bl	8011510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d93c:	2200      	movs	r2, #0
 800d93e:	2110      	movs	r1, #16
 800d940:	48a3      	ldr	r0, [pc, #652]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d942:	f004 f9a9 	bl	8011c98 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x19;
 800d946:	4ba4      	ldr	r3, [pc, #656]	@ (800dbd8 <ADC_READ+0xc00>)
 800d948:	2219      	movs	r2, #25
 800d94a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295
 800d950:	2201      	movs	r2, #1
 800d952:	49a1      	ldr	r1, [pc, #644]	@ (800dbd8 <ADC_READ+0xc00>)
 800d954:	48a1      	ldr	r0, [pc, #644]	@ (800dbdc <ADC_READ+0xc04>)
 800d956:	f00b fa43 	bl	8018de0 <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800d95a:	2201      	movs	r2, #1
 800d95c:	2110      	movs	r1, #16
 800d95e:	489c      	ldr	r0, [pc, #624]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d960:	f004 f99a 	bl	8011c98 <HAL_GPIO_WritePin>

	HAL_Delay(wait_time);
 800d964:	4b9e      	ldr	r3, [pc, #632]	@ (800dbe0 <ADC_READ+0xc08>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f003 fdd1 	bl	8011510 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d96e:	2200      	movs	r2, #0
 800d970:	2110      	movs	r1, #16
 800d972:	4897      	ldr	r0, [pc, #604]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d974:	f004 f990 	bl	8011c98 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x13;
 800d978:	4b97      	ldr	r3, [pc, #604]	@ (800dbd8 <ADC_READ+0xc00>)
 800d97a:	2213      	movs	r2, #19
 800d97c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800d97e:	2300      	movs	r3, #0
 800d980:	637b      	str	r3, [r7, #52]	@ 0x34
 800d982:	e035      	b.n	800d9f0 <ADC_READ+0xa18>
	{
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFFFF);
 800d984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d988:	2201      	movs	r2, #1
 800d98a:	4993      	ldr	r1, [pc, #588]	@ (800dbd8 <ADC_READ+0xc00>)
 800d98c:	4893      	ldr	r0, [pc, #588]	@ (800dbdc <ADC_READ+0xc04>)
 800d98e:	f00b fa27 	bl	8018de0 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800d992:	2001      	movs	r0, #1
 800d994:	f003 fdbc 	bl	8011510 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3[i], 0x2, 0xFFFF);
 800d998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	4a91      	ldr	r2, [pc, #580]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d99e:	1899      	adds	r1, r3, r2
 800d9a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	488d      	ldr	r0, [pc, #564]	@ (800dbdc <ADC_READ+0xc04>)
 800d9a8:	f00b fc30 	bl	801920c <HAL_SPI_Receive>
		HAL_Delay(1);
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	f003 fdaf 	bl	8011510 <HAL_Delay>
		// Byte-wise flip
		reg_data_ADC_3[i] = (reg_data_ADC_3[i] >> 8) | (reg_data_ADC_3[i] << 8);
 800d9b2:	4a8c      	ldr	r2, [pc, #560]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ba:	0a1b      	lsrs	r3, r3, #8
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	b21a      	sxth	r2, r3
 800d9c0:	4988      	ldr	r1, [pc, #544]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d9c8:	021b      	lsls	r3, r3, #8
 800d9ca:	b21b      	sxth	r3, r3
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	b21b      	sxth	r3, r3
 800d9d0:	b299      	uxth	r1, r3
 800d9d2:	4a84      	ldr	r2, [pc, #528]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(diff_count > 5) sum =0;
	diff_count=0;
#else

	sum += reg_data_ADC_3[i];  // Add to sum for averaging
 800d9da:	4a82      	ldr	r2, [pc, #520]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9e6:	4413      	add	r3, r2
 800d9e8:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 10; i++)
 800d9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f2:	2b09      	cmp	r3, #9
 800d9f4:	ddc6      	ble.n	800d984 <ADC_READ+0x9ac>
}
#endif
adchex = sum / 10;
 800d9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9f8:	4a7b      	ldr	r2, [pc, #492]	@ (800dbe8 <ADC_READ+0xc10>)
 800d9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d9fe:	08db      	lsrs	r3, r3, #3
 800da00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 800da04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800da06:	f7fe fd8d 	bl	800c524 <__aeabi_ui2d>
 800da0a:	f04f 0200 	mov.w	r2, #0
 800da0e:	4b77      	ldr	r3, [pc, #476]	@ (800dbec <ADC_READ+0xc14>)
 800da10:	f7fe ff2c 	bl	800c86c <__aeabi_ddiv>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4610      	mov	r0, r2
 800da1a:	4619      	mov	r1, r3
 800da1c:	f7ff f8d4 	bl	800cbc8 <__aeabi_d2f>
 800da20:	4603      	mov	r3, r0
 800da22:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800da24:	2201      	movs	r2, #1
 800da26:	2110      	movs	r1, #16
 800da28:	4869      	ldr	r0, [pc, #420]	@ (800dbd0 <ADC_READ+0xbf8>)
 800da2a:	f004 f935 	bl	8011c98 <HAL_GPIO_WritePin>
resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800da2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800da32:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800dbf0 <ADC_READ+0xc18>
 800da36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da3a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800da3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800da42:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800dbf4 <ADC_READ+0xc1c>
 800da46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da4a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 800da4e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800dbf8 <ADC_READ+0xc20>
 800da52:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800da56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	db50      	blt.n	800db02 <ADC_READ+0xb2a>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800da60:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800dbfc <ADC_READ+0xc24>
 800da64:	eef1 7a67 	vneg.f32	s15, s15
 800da68:	ee17 3a90 	vmov	r3, s15
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fe fd7b 	bl	800c568 <__aeabi_f2d>
 800da72:	4604      	mov	r4, r0
 800da74:	460d      	mov	r5, r1
 800da76:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800dbfc <ADC_READ+0xc24>
 800da7a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 800dbfc <ADC_READ+0xc24>
 800da7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dc00 <ADC_READ+0xc28>
 800da86:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800da8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800da8e:	eddf 5a5a 	vldr	s11, [pc, #360]	@ 800dbf8 <ADC_READ+0xc20>
 800da92:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800da96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da9a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800da9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800daa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daaa:	ee17 0a90 	vmov	r0, s15
 800daae:	f7fe fd5b 	bl	800c568 <__aeabi_f2d>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	ec43 2b10 	vmov	d0, r2, r3
 800daba:	f011 f9c9 	bl	801ee50 <sqrt>
 800dabe:	ec53 2b10 	vmov	r2, r3, d0
 800dac2:	4620      	mov	r0, r4
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7fe fbf1 	bl	800c2ac <__adddf3>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4614      	mov	r4, r2
 800dad0:	461d      	mov	r5, r3
 800dad2:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800dc00 <ADC_READ+0xc28>
 800dad6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dada:	ee17 0a90 	vmov	r0, s15
 800dade:	f7fe fd43 	bl	800c568 <__aeabi_f2d>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	f7fe febf 	bl	800c86c <__aeabi_ddiv>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4610      	mov	r0, r2
 800daf4:	4619      	mov	r1, r3
 800daf6:	f7ff f867 	bl	800cbc8 <__aeabi_d2f>
 800dafa:	4603      	mov	r3, r0
 800dafc:	4a41      	ldr	r2, [pc, #260]	@ (800dc04 <ADC_READ+0xc2c>)
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	e017      	b.n	800db32 <ADC_READ+0xb5a>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 800db02:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800dbf8 <ADC_READ+0xc20>
 800db06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800db0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db0e:	ee17 0a90 	vmov	r0, s15
 800db12:	f7fe fd29 	bl	800c568 <__aeabi_f2d>
 800db16:	a32c      	add	r3, pc, #176	@ (adr r3, 800dbc8 <ADC_READ+0xbf0>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7fe fea6 	bl	800c86c <__aeabi_ddiv>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4610      	mov	r0, r2
 800db26:	4619      	mov	r1, r3
 800db28:	f7ff f84e 	bl	800cbc8 <__aeabi_d2f>
 800db2c:	4603      	mov	r3, r0
 800db2e:	4a35      	ldr	r2, [pc, #212]	@ (800dc04 <ADC_READ+0xc2c>)
 800db30:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9])
 800db32:	7cfa      	ldrb	r2, [r7, #19]
 800db34:	4b28      	ldr	r3, [pc, #160]	@ (800dbd8 <ADC_READ+0xc00>)
 800db36:	7a5b      	ldrb	r3, [r3, #9]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d10e      	bne.n	800db5a <ADC_READ+0xb82>
{
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 1); // Toggle LED for visual feedback
 800db3c:	2201      	movs	r2, #1
 800db3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800db42:	4831      	ldr	r0, [pc, #196]	@ (800dc08 <ADC_READ+0xc30>)
 800db44:	f004 f8a8 	bl	8011c98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800db48:	2001      	movs	r0, #1
 800db4a:	f003 fce1 	bl	8011510 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 0);
 800db4e:	2200      	movs	r2, #0
 800db50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800db54:	482c      	ldr	r0, [pc, #176]	@ (800dc08 <ADC_READ+0xc30>)
 800db56:	f004 f89f 	bl	8011c98 <HAL_GPIO_WritePin>

#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800db5a:	2200      	movs	r2, #0
 800db5c:	2110      	movs	r1, #16
 800db5e:	481c      	ldr	r0, [pc, #112]	@ (800dbd0 <ADC_READ+0xbf8>)
 800db60:	f004 f89a 	bl	8011c98 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 800db64:	4b1c      	ldr	r3, [pc, #112]	@ (800dbd8 <ADC_READ+0xc00>)
 800db66:	2221      	movs	r2, #33	@ 0x21
 800db68:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 800db6a:	4b1b      	ldr	r3, [pc, #108]	@ (800dbd8 <ADC_READ+0xc00>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	705a      	strb	r2, [r3, #1]
HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800db70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db74:	2202      	movs	r2, #2
 800db76:	4918      	ldr	r1, [pc, #96]	@ (800dbd8 <ADC_READ+0xc00>)
 800db78:	4818      	ldr	r0, [pc, #96]	@ (800dbdc <ADC_READ+0xc04>)
 800db7a:	f00b f931 	bl	8018de0 <HAL_SPI_Transmit>

HAL_SPI_Receive(&hspi3, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800db7e:	f107 010b 	add.w	r1, r7, #11
 800db82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db86:	2201      	movs	r2, #1
 800db88:	4814      	ldr	r0, [pc, #80]	@ (800dbdc <ADC_READ+0xc04>)
 800db8a:	f00b fb3f 	bl	801920c <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800db8e:	2201      	movs	r2, #1
 800db90:	2110      	movs	r1, #16
 800db92:	480f      	ldr	r0, [pc, #60]	@ (800dbd0 <ADC_READ+0xbf8>)
 800db94:	f004 f880 	bl	8011c98 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 800db98:	7afb      	ldrb	r3, [r7, #11]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 f888 	bl	800dcb0 <wire_break>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d032      	beq.n	800dc0c <ADC_READ+0xc34>
{
	wirestatus=0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800dbaa:	4b16      	ldr	r3, [pc, #88]	@ (800dc04 <ADC_READ+0xc2c>)
 800dbac:	f04f 0200 	mov.w	r2, #0
 800dbb0:	601a      	str	r2, [r3, #0]
	adchex=0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 800dbb8:	2214      	movs	r2, #20
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4809      	ldr	r0, [pc, #36]	@ (800dbe4 <ADC_READ+0xc0c>)
 800dbbe:	f00f f850 	bl	801cc62 <memset>
 800dbc2:	e039      	b.n	800dc38 <ADC_READ+0xc60>
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	0a3d70a4 	.word	0x0a3d70a4
 800dbcc:	3fd8a3d7 	.word	0x3fd8a3d7
 800dbd0:	42020c00 	.word	0x42020c00
 800dbd4:	42020000 	.word	0x42020000
 800dbd8:	200002ac 	.word	0x200002ac
 800dbdc:	200057b0 	.word	0x200057b0
 800dbe0:	20000000 	.word	0x20000000
 800dbe4:	200002f8 	.word	0x200002f8
 800dbe8:	cccccccd 	.word	0xcccccccd
 800dbec:	40240000 	.word	0x40240000
 800dbf0:	44fa0000 	.word	0x44fa0000
 800dbf4:	477fff00 	.word	0x477fff00
 800dbf8:	42c80000 	.word	0x42c80000
 800dbfc:	3b801132 	.word	0x3b801132
 800dc00:	b51b057f 	.word	0xb51b057f
 800dc04:	200002cc 	.word	0x200002cc
 800dc08:	42021000 	.word	0x42021000
}
else if(check_sensor_validity(adchex))
 800dc0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 f835 	bl	800dc80 <check_sensor_validity>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00d      	beq.n	800dc38 <ADC_READ+0xc60>
{
	wirestatus=0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800dc20:	4b13      	ldr	r3, [pc, #76]	@ (800dc70 <ADC_READ+0xc98>)
 800dc22:	f04f 0200 	mov.w	r2, #0
 800dc26:	601a      	str	r2, [r3, #0]
	adchex =0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 800dc2e:	2214      	movs	r2, #20
 800dc30:	2100      	movs	r1, #0
 800dc32:	4810      	ldr	r0, [pc, #64]	@ (800dc74 <ADC_READ+0xc9c>)
 800dc34:	f00f f815 	bl	801cc62 <memset>
}
wirestatus=0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 800dc3c:	79f9      	ldrb	r1, [r7, #7]
 800dc3e:	79bb      	ldrb	r3, [r7, #6]
 800dc40:	4a0b      	ldr	r2, [pc, #44]	@ (800dc70 <ADC_READ+0xc98>)
 800dc42:	6812      	ldr	r2, [r2, #0]
 800dc44:	480c      	ldr	r0, [pc, #48]	@ (800dc78 <ADC_READ+0xca0>)
 800dc46:	0089      	lsls	r1, r1, #2
 800dc48:	440b      	add	r3, r1
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4403      	add	r3, r0
 800dc4e:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 800dc50:	79fa      	ldrb	r2, [r7, #7]
 800dc52:	79bb      	ldrb	r3, [r7, #6]
 800dc54:	4909      	ldr	r1, [pc, #36]	@ (800dc7c <ADC_READ+0xca4>)
 800dc56:	0092      	lsls	r2, r2, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 800dc62:	bf00      	nop
}
//	return sensor_value;
return 0;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3748      	adds	r7, #72	@ 0x48
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200002cc 	.word	0x200002cc
 800dc74:	200002f8 	.word	0x200002f8
 800dc78:	20000310 	.word	0x20000310
 800dc7c:	20000340 	.word	0x20000340

0800dc80 <check_sensor_validity>:
	check_channel = 0 ;
}
#endif

uint8_t check_sensor_validity(uint16_t data)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	80fb      	strh	r3, [r7, #6]

	if(data<ADC_MIN_VAL || data>ADC_MAX_VAL)
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d904      	bls.n	800dc9e <check_sensor_validity+0x1e>
 800dc94:	88fb      	ldrh	r3, [r7, #6]
 800dc96:	f246 6266 	movw	r2, #26214	@ 0x6666
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d901      	bls.n	800dca2 <check_sensor_validity+0x22>
		return 1 ;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e000      	b.n	800dca4 <check_sensor_validity+0x24>

	else
		return 0 ;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <wire_break>:

uint8_t wire_break(uint8_t flag)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	71fb      	strb	r3, [r7, #7]
	uint8_t FL_REF =0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]

	if(txd_buf[7] == 0xC2)//0xC2
 800dcbe:	4b1b      	ldr	r3, [pc, #108]	@ (800dd2c <wire_break+0x7c>)
 800dcc0:	79db      	ldrb	r3, [r3, #7]
 800dcc2:	2bc2      	cmp	r3, #194	@ 0xc2
 800dcc4:	d102      	bne.n	800dccc <wire_break+0x1c>
	{
		FL_REF= 1;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	73fb      	strb	r3, [r7, #15]
 800dcca:	e008      	b.n	800dcde <wire_break+0x2e>
	}
	else if(txd_buf[7] == 0x82)//0x82
 800dccc:	4b17      	ldr	r3, [pc, #92]	@ (800dd2c <wire_break+0x7c>)
 800dcce:	79db      	ldrb	r3, [r3, #7]
 800dcd0:	2b82      	cmp	r3, #130	@ 0x82
 800dcd2:	d102      	bne.n	800dcda <wire_break+0x2a>
	{
		FL_REF= 2;
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	73fb      	strb	r3, [r7, #15]
 800dcd8:	e001      	b.n	800dcde <wire_break+0x2e>
	}
	else
	{
		FL_REF=0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	73fb      	strb	r3, [r7, #15]
	}

	switch(FL_REF)
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d002      	beq.n	800dcea <wire_break+0x3a>
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d00a      	beq.n	800dcfe <wire_break+0x4e>
 800dce8:	e013      	b.n	800dd12 <wire_break+0x62>
	{
	case 1:
		if(0x01 == flag)  //0x29 w/o interface card :  0x01  with interface card
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d101      	bne.n	800dcf4 <wire_break+0x44>
			return 1;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e014      	b.n	800dd1e <wire_break+0x6e>

		else if(0x00 == flag) //0x00 w/o interface card :  0x00  with interface card
 800dcf4:	79fb      	ldrb	r3, [r7, #7]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10d      	bne.n	800dd16 <wire_break+0x66>
			return 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e00f      	b.n	800dd1e <wire_break+0x6e>

		break;
	case 2:
		if(0x3 == flag) //0x2b w/o interface card :  0x03  with interface card
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	2b03      	cmp	r3, #3
 800dd02:	d101      	bne.n	800dd08 <wire_break+0x58>
			return 1;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e00a      	b.n	800dd1e <wire_break+0x6e>

		else if(0x2 == flag) //0x2 w/o interface card :  0x02  with interface card
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d105      	bne.n	800dd1a <wire_break+0x6a>
			return 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e005      	b.n	800dd1e <wire_break+0x6e>

		break;
	default:
		return 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e003      	b.n	800dd1e <wire_break+0x6e>
		break;
 800dd16:	bf00      	nop
 800dd18:	e000      	b.n	800dd1c <wire_break+0x6c>
		break;
 800dd1a:	bf00      	nop
		break;
	}
	return 0;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	200002ac 	.word	0x200002ac

0800dd30 <ATP_operation>:

void ATP_operation();


void ATP_operation()
{
 800dd30:	b5b0      	push	{r4, r5, r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af04      	add	r7, sp, #16
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 800dd36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800dd3a:	48a3      	ldr	r0, [pc, #652]	@ (800dfc8 <ATP_operation+0x298>)
 800dd3c:	f003 ffc4 	bl	8011cc8 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800dd40:	20c8      	movs	r0, #200	@ 0xc8
 800dd42:	f003 fbe5 	bl	8011510 <HAL_Delay>
	//ATP_test = 1;
	if(ATP_test)
 800dd46:	4ba1      	ldr	r3, [pc, #644]	@ (800dfcc <ATP_operation+0x29c>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 8694 	beq.w	800ea78 <ATP_operation+0xd48>
	{
		ATP_test = 0 ;
 800dd50:	4b9e      	ldr	r3, [pc, #632]	@ (800dfcc <ATP_operation+0x29c>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]

		if (strstr(command_str, test_nbr_1))
 800dd56:	4b9e      	ldr	r3, [pc, #632]	@ (800dfd0 <ATP_operation+0x2a0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	489d      	ldr	r0, [pc, #628]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dd5e:	f00e ff88 	bl	801cc72 <strstr>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d003      	beq.n	800dd70 <ATP_operation+0x40>
		{
			ATP_test_number = POWER_CTRL_1;
 800dd68:	4b9b      	ldr	r3, [pc, #620]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	e1e6      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_2))
 800dd70:	4b9a      	ldr	r3, [pc, #616]	@ (800dfdc <ATP_operation+0x2ac>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4619      	mov	r1, r3
 800dd76:	4897      	ldr	r0, [pc, #604]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dd78:	f00e ff7b 	bl	801cc72 <strstr>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <ATP_operation+0x5a>
		{
			ATP_test_number = POWER_CTRL_2;
 800dd82:	4b95      	ldr	r3, [pc, #596]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dd84:	2202      	movs	r2, #2
 800dd86:	701a      	strb	r2, [r3, #0]
 800dd88:	e1d9      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_3))
 800dd8a:	4b95      	ldr	r3, [pc, #596]	@ (800dfe0 <ATP_operation+0x2b0>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4890      	ldr	r0, [pc, #576]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dd92:	f00e ff6e 	bl	801cc72 <strstr>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <ATP_operation+0x74>
		{
			ATP_test_number = INPUT_GPIO_1;
 800dd9c:	4b8e      	ldr	r3, [pc, #568]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dd9e:	2203      	movs	r2, #3
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	e1cc      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_4))
 800dda4:	4b8f      	ldr	r3, [pc, #572]	@ (800dfe4 <ATP_operation+0x2b4>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	488a      	ldr	r0, [pc, #552]	@ (800dfd4 <ATP_operation+0x2a4>)
 800ddac:	f00e ff61 	bl	801cc72 <strstr>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <ATP_operation+0x8e>
		{
			ATP_test_number = INPUT_GPIO_2;
 800ddb6:	4b88      	ldr	r3, [pc, #544]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ddb8:	2204      	movs	r2, #4
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e1bf      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_5))
 800ddbe:	4b8a      	ldr	r3, [pc, #552]	@ (800dfe8 <ATP_operation+0x2b8>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	4883      	ldr	r0, [pc, #524]	@ (800dfd4 <ATP_operation+0x2a4>)
 800ddc6:	f00e ff54 	bl	801cc72 <strstr>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d003      	beq.n	800ddd8 <ATP_operation+0xa8>
		{
			ATP_test_number = INPUT_GPIO_3;
 800ddd0:	4b81      	ldr	r3, [pc, #516]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ddd2:	2205      	movs	r2, #5
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	e1b2      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_6))
 800ddd8:	4b84      	ldr	r3, [pc, #528]	@ (800dfec <ATP_operation+0x2bc>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	487d      	ldr	r0, [pc, #500]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dde0:	f00e ff47 	bl	801cc72 <strstr>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <ATP_operation+0xc2>
		{
			ATP_test_number = INPUT_GPIO_4;
 800ddea:	4b7b      	ldr	r3, [pc, #492]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ddec:	2206      	movs	r2, #6
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	e1a5      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_7))
 800ddf2:	4b7f      	ldr	r3, [pc, #508]	@ (800dff0 <ATP_operation+0x2c0>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4876      	ldr	r0, [pc, #472]	@ (800dfd4 <ATP_operation+0x2a4>)
 800ddfa:	f00e ff3a 	bl	801cc72 <strstr>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <ATP_operation+0xdc>
		{
			ATP_test_number = INPUT_GPIO_5;
 800de04:	4b74      	ldr	r3, [pc, #464]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de06:	2207      	movs	r2, #7
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	e198      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_8))
 800de0c:	4b79      	ldr	r3, [pc, #484]	@ (800dff4 <ATP_operation+0x2c4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4619      	mov	r1, r3
 800de12:	4870      	ldr	r0, [pc, #448]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de14:	f00e ff2d 	bl	801cc72 <strstr>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d003      	beq.n	800de26 <ATP_operation+0xf6>
		{
			ATP_test_number = OUTPUT_GPIO_1;
 800de1e:	4b6e      	ldr	r3, [pc, #440]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de20:	2208      	movs	r2, #8
 800de22:	701a      	strb	r2, [r3, #0]
 800de24:	e18b      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_9))
 800de26:	4b74      	ldr	r3, [pc, #464]	@ (800dff8 <ATP_operation+0x2c8>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	4869      	ldr	r0, [pc, #420]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de2e:	f00e ff20 	bl	801cc72 <strstr>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d003      	beq.n	800de40 <ATP_operation+0x110>
		{
			ATP_test_number = OUTPUT_GPIO_2;
 800de38:	4b67      	ldr	r3, [pc, #412]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de3a:	2209      	movs	r2, #9
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	e17e      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_10))
 800de40:	4b6e      	ldr	r3, [pc, #440]	@ (800dffc <ATP_operation+0x2cc>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4619      	mov	r1, r3
 800de46:	4863      	ldr	r0, [pc, #396]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de48:	f00e ff13 	bl	801cc72 <strstr>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d003      	beq.n	800de5a <ATP_operation+0x12a>
		{
			ATP_test_number = TS_1;
 800de52:	4b61      	ldr	r3, [pc, #388]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de54:	220a      	movs	r2, #10
 800de56:	701a      	strb	r2, [r3, #0]
 800de58:	e171      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_11))
 800de5a:	4b69      	ldr	r3, [pc, #420]	@ (800e000 <ATP_operation+0x2d0>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4619      	mov	r1, r3
 800de60:	485c      	ldr	r0, [pc, #368]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de62:	f00e ff06 	bl	801cc72 <strstr>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <ATP_operation+0x144>
		{
			ATP_test_number = TS_2;
 800de6c:	4b5a      	ldr	r3, [pc, #360]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de6e:	220b      	movs	r2, #11
 800de70:	701a      	strb	r2, [r3, #0]
 800de72:	e164      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_12))
 800de74:	4b63      	ldr	r3, [pc, #396]	@ (800e004 <ATP_operation+0x2d4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4619      	mov	r1, r3
 800de7a:	4856      	ldr	r0, [pc, #344]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de7c:	f00e fef9 	bl	801cc72 <strstr>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <ATP_operation+0x15e>
		{
			ATP_test_number = TS_3;
 800de86:	4b54      	ldr	r3, [pc, #336]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de88:	220c      	movs	r2, #12
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	e157      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_13))
 800de8e:	4b5e      	ldr	r3, [pc, #376]	@ (800e008 <ATP_operation+0x2d8>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4619      	mov	r1, r3
 800de94:	484f      	ldr	r0, [pc, #316]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de96:	f00e feec 	bl	801cc72 <strstr>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <ATP_operation+0x178>
		{
			ATP_test_number = TS_4;
 800dea0:	4b4d      	ldr	r3, [pc, #308]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dea2:	220d      	movs	r2, #13
 800dea4:	701a      	strb	r2, [r3, #0]
 800dea6:	e14a      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_14))
 800dea8:	4b58      	ldr	r3, [pc, #352]	@ (800e00c <ATP_operation+0x2dc>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4619      	mov	r1, r3
 800deae:	4849      	ldr	r0, [pc, #292]	@ (800dfd4 <ATP_operation+0x2a4>)
 800deb0:	f00e fedf 	bl	801cc72 <strstr>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <ATP_operation+0x192>
		{
			ATP_test_number = TS_5;
 800deba:	4b47      	ldr	r3, [pc, #284]	@ (800dfd8 <ATP_operation+0x2a8>)
 800debc:	220e      	movs	r2, #14
 800debe:	701a      	strb	r2, [r3, #0]
 800dec0:	e13d      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_15))
 800dec2:	4b53      	ldr	r3, [pc, #332]	@ (800e010 <ATP_operation+0x2e0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4619      	mov	r1, r3
 800dec8:	4842      	ldr	r0, [pc, #264]	@ (800dfd4 <ATP_operation+0x2a4>)
 800deca:	f00e fed2 	bl	801cc72 <strstr>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <ATP_operation+0x1ac>
		{
			ATP_test_number = TS_6;
 800ded4:	4b40      	ldr	r3, [pc, #256]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ded6:	220f      	movs	r2, #15
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	e130      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_16))
 800dedc:	4b4d      	ldr	r3, [pc, #308]	@ (800e014 <ATP_operation+0x2e4>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4619      	mov	r1, r3
 800dee2:	483c      	ldr	r0, [pc, #240]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dee4:	f00e fec5 	bl	801cc72 <strstr>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <ATP_operation+0x1c6>
		{
			ATP_test_number = TS_7;
 800deee:	4b3a      	ldr	r3, [pc, #232]	@ (800dfd8 <ATP_operation+0x2a8>)
 800def0:	2210      	movs	r2, #16
 800def2:	701a      	strb	r2, [r3, #0]
 800def4:	e123      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_17))
 800def6:	4b48      	ldr	r3, [pc, #288]	@ (800e018 <ATP_operation+0x2e8>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4619      	mov	r1, r3
 800defc:	4835      	ldr	r0, [pc, #212]	@ (800dfd4 <ATP_operation+0x2a4>)
 800defe:	f00e feb8 	bl	801cc72 <strstr>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d003      	beq.n	800df10 <ATP_operation+0x1e0>
		{
			ATP_test_number = TS_8;
 800df08:	4b33      	ldr	r3, [pc, #204]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df0a:	2211      	movs	r2, #17
 800df0c:	701a      	strb	r2, [r3, #0]
 800df0e:	e116      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_18))
 800df10:	4b42      	ldr	r3, [pc, #264]	@ (800e01c <ATP_operation+0x2ec>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4619      	mov	r1, r3
 800df16:	482f      	ldr	r0, [pc, #188]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df18:	f00e feab 	bl	801cc72 <strstr>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <ATP_operation+0x1fa>
		{
			ATP_test_number = TS_9;
 800df22:	4b2d      	ldr	r3, [pc, #180]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df24:	2212      	movs	r2, #18
 800df26:	701a      	strb	r2, [r3, #0]
 800df28:	e109      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_19))
 800df2a:	4b3d      	ldr	r3, [pc, #244]	@ (800e020 <ATP_operation+0x2f0>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4619      	mov	r1, r3
 800df30:	4828      	ldr	r0, [pc, #160]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df32:	f00e fe9e 	bl	801cc72 <strstr>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <ATP_operation+0x214>
		{
			ATP_test_number = TS_10;
 800df3c:	4b26      	ldr	r3, [pc, #152]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df3e:	2213      	movs	r2, #19
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	e0fc      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_20))
 800df44:	4b37      	ldr	r3, [pc, #220]	@ (800e024 <ATP_operation+0x2f4>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4619      	mov	r1, r3
 800df4a:	4822      	ldr	r0, [pc, #136]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df4c:	f00e fe91 	bl	801cc72 <strstr>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <ATP_operation+0x22e>
		{
			ATP_test_number = TS_11;
 800df56:	4b20      	ldr	r3, [pc, #128]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df58:	2214      	movs	r2, #20
 800df5a:	701a      	strb	r2, [r3, #0]
 800df5c:	e0ef      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_21))
 800df5e:	4b32      	ldr	r3, [pc, #200]	@ (800e028 <ATP_operation+0x2f8>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4619      	mov	r1, r3
 800df64:	481b      	ldr	r0, [pc, #108]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df66:	f00e fe84 	bl	801cc72 <strstr>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <ATP_operation+0x248>
		{
			ATP_test_number = TS_12;
 800df70:	4b19      	ldr	r3, [pc, #100]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df72:	2215      	movs	r2, #21
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e0e2      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_22))
 800df78:	4b2c      	ldr	r3, [pc, #176]	@ (800e02c <ATP_operation+0x2fc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4619      	mov	r1, r3
 800df7e:	4815      	ldr	r0, [pc, #84]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df80:	f00e fe77 	bl	801cc72 <strstr>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <ATP_operation+0x262>
		{
			ATP_test_number = RTC_CHECK;
 800df8a:	4b13      	ldr	r3, [pc, #76]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df8c:	2216      	movs	r2, #22
 800df8e:	701a      	strb	r2, [r3, #0]
 800df90:	e0d5      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_23))
 800df92:	4b27      	ldr	r3, [pc, #156]	@ (800e030 <ATP_operation+0x300>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4619      	mov	r1, r3
 800df98:	480e      	ldr	r0, [pc, #56]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df9a:	f00e fe6a 	bl	801cc72 <strstr>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d003      	beq.n	800dfac <ATP_operation+0x27c>
		{
			ATP_test_number = NAND_FLASH_WRITE;
 800dfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dfa6:	2217      	movs	r2, #23
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	e0c8      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_24))
 800dfac:	4b21      	ldr	r3, [pc, #132]	@ (800e034 <ATP_operation+0x304>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4808      	ldr	r0, [pc, #32]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dfb4:	f00e fe5d 	bl	801cc72 <strstr>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d03c      	beq.n	800e038 <ATP_operation+0x308>
		{
			ATP_test_number = NAND_FLASH_READ;
 800dfbe:	4b06      	ldr	r3, [pc, #24]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dfc0:	2218      	movs	r2, #24
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	e0bb      	b.n	800e13e <ATP_operation+0x40e>
 800dfc6:	bf00      	nop
 800dfc8:	42021000 	.word	0x42021000
 800dfcc:	2000036d 	.word	0x2000036d
 800dfd0:	20000004 	.word	0x20000004
 800dfd4:	20000358 	.word	0x20000358
 800dfd8:	2000036e 	.word	0x2000036e
 800dfdc:	20000008 	.word	0x20000008
 800dfe0:	2000000c 	.word	0x2000000c
 800dfe4:	20000010 	.word	0x20000010
 800dfe8:	20000014 	.word	0x20000014
 800dfec:	20000018 	.word	0x20000018
 800dff0:	2000001c 	.word	0x2000001c
 800dff4:	20000020 	.word	0x20000020
 800dff8:	20000024 	.word	0x20000024
 800dffc:	20000028 	.word	0x20000028
 800e000:	2000002c 	.word	0x2000002c
 800e004:	20000030 	.word	0x20000030
 800e008:	20000034 	.word	0x20000034
 800e00c:	20000038 	.word	0x20000038
 800e010:	2000003c 	.word	0x2000003c
 800e014:	20000040 	.word	0x20000040
 800e018:	20000044 	.word	0x20000044
 800e01c:	20000048 	.word	0x20000048
 800e020:	2000004c 	.word	0x2000004c
 800e024:	20000050 	.word	0x20000050
 800e028:	20000054 	.word	0x20000054
 800e02c:	20000058 	.word	0x20000058
 800e030:	2000005c 	.word	0x2000005c
 800e034:	20000060 	.word	0x20000060
		}
		else if (strstr(command_str, test_nbr_25))
 800e038:	4bb6      	ldr	r3, [pc, #728]	@ (800e314 <ATP_operation+0x5e4>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4619      	mov	r1, r3
 800e03e:	48b6      	ldr	r0, [pc, #728]	@ (800e318 <ATP_operation+0x5e8>)
 800e040:	f00e fe17 	bl	801cc72 <strstr>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d01a      	beq.n	800e080 <ATP_operation+0x350>
		{
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)== 1)
 800e04a:	2104      	movs	r1, #4
 800e04c:	48b3      	ldr	r0, [pc, #716]	@ (800e31c <ATP_operation+0x5ec>)
 800e04e:	f003 fe0b 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e052:	4603      	mov	r3, r0
 800e054:	2b01      	cmp	r3, #1
 800e056:	d103      	bne.n	800e060 <ATP_operation+0x330>
				ATP_test_number = NAND_FLASH_ERASE;
 800e058:	4bb1      	ldr	r3, [pc, #708]	@ (800e320 <ATP_operation+0x5f0>)
 800e05a:	2219      	movs	r2, #25
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	e06e      	b.n	800e13e <ATP_operation+0x40e>
			else{
				HAL_UART_Transmit_IT(&huart5,(uint8_t *)GpStatus, strlen("Is GPIO HIGH..?"));
 800e060:	4bb0      	ldr	r3, [pc, #704]	@ (800e324 <ATP_operation+0x5f4>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	220f      	movs	r2, #15
 800e066:	4619      	mov	r1, r3
 800e068:	48af      	ldr	r0, [pc, #700]	@ (800e328 <ATP_operation+0x5f8>)
 800e06a:	f00b fd3f 	bl	8019aec <HAL_UART_Transmit_IT>
				memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e06e:	2264      	movs	r2, #100	@ 0x64
 800e070:	2100      	movs	r1, #0
 800e072:	48ae      	ldr	r0, [pc, #696]	@ (800e32c <ATP_operation+0x5fc>)
 800e074:	f00e fdf5 	bl	801cc62 <memset>
				HAL_Delay(100);
 800e078:	2064      	movs	r0, #100	@ 0x64
 800e07a:	f003 fa49 	bl	8011510 <HAL_Delay>
 800e07e:	e05e      	b.n	800e13e <ATP_operation+0x40e>
			}
		}
		else if (strstr((char *)command_str, test_nbr_26))
 800e080:	4bab      	ldr	r3, [pc, #684]	@ (800e330 <ATP_operation+0x600>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	48a4      	ldr	r0, [pc, #656]	@ (800e318 <ATP_operation+0x5e8>)
 800e088:	f00e fdf3 	bl	801cc72 <strstr>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00d      	beq.n	800e0ae <ATP_operation+0x37e>
		{
			//			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e092:	48a1      	ldr	r0, [pc, #644]	@ (800e318 <ATP_operation+0x5e8>)
 800e094:	f7fe f8fc 	bl	800c290 <strlen>
 800e098:	4603      	mov	r3, r0
 800e09a:	3b04      	subs	r3, #4
 800e09c:	461a      	mov	r2, r3
 800e09e:	49a5      	ldr	r1, [pc, #660]	@ (800e334 <ATP_operation+0x604>)
 800e0a0:	48a5      	ldr	r0, [pc, #660]	@ (800e338 <ATP_operation+0x608>)
 800e0a2:	f00e fe82 	bl	801cdaa <memcpy>
			ATP_test_number = LoopBack_RS232;
 800e0a6:	4b9e      	ldr	r3, [pc, #632]	@ (800e320 <ATP_operation+0x5f0>)
 800e0a8:	221a      	movs	r2, #26
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	e047      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_27))
 800e0ae:	4ba3      	ldr	r3, [pc, #652]	@ (800e33c <ATP_operation+0x60c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4898      	ldr	r0, [pc, #608]	@ (800e318 <ATP_operation+0x5e8>)
 800e0b6:	f00e fddc 	bl	801cc72 <strstr>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00d      	beq.n	800e0dc <ATP_operation+0x3ac>
		{
			//			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e0c0:	4895      	ldr	r0, [pc, #596]	@ (800e318 <ATP_operation+0x5e8>)
 800e0c2:	f7fe f8e5 	bl	800c290 <strlen>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	3b04      	subs	r3, #4
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4999      	ldr	r1, [pc, #612]	@ (800e334 <ATP_operation+0x604>)
 800e0ce:	489a      	ldr	r0, [pc, #616]	@ (800e338 <ATP_operation+0x608>)
 800e0d0:	f00e fe6b 	bl	801cdaa <memcpy>
			ATP_test_number = LoopBack_RS422;
 800e0d4:	4b92      	ldr	r3, [pc, #584]	@ (800e320 <ATP_operation+0x5f0>)
 800e0d6:	221b      	movs	r2, #27
 800e0d8:	701a      	strb	r2, [r3, #0]
 800e0da:	e030      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_28))
 800e0dc:	4b98      	ldr	r3, [pc, #608]	@ (800e340 <ATP_operation+0x610>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	488d      	ldr	r0, [pc, #564]	@ (800e318 <ATP_operation+0x5e8>)
 800e0e4:	f00e fdc5 	bl	801cc72 <strstr>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00d      	beq.n	800e10a <ATP_operation+0x3da>
		{
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e0ee:	488a      	ldr	r0, [pc, #552]	@ (800e318 <ATP_operation+0x5e8>)
 800e0f0:	f7fe f8ce 	bl	800c290 <strlen>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	3b04      	subs	r3, #4
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	498e      	ldr	r1, [pc, #568]	@ (800e334 <ATP_operation+0x604>)
 800e0fc:	488e      	ldr	r0, [pc, #568]	@ (800e338 <ATP_operation+0x608>)
 800e0fe:	f00e fe54 	bl	801cdaa <memcpy>
			ATP_test_number = LoopBack1_RS485;
 800e102:	4b87      	ldr	r3, [pc, #540]	@ (800e320 <ATP_operation+0x5f0>)
 800e104:	221c      	movs	r2, #28
 800e106:	701a      	strb	r2, [r3, #0]
 800e108:	e019      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_29))
 800e10a:	4b8e      	ldr	r3, [pc, #568]	@ (800e344 <ATP_operation+0x614>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4619      	mov	r1, r3
 800e110:	4881      	ldr	r0, [pc, #516]	@ (800e318 <ATP_operation+0x5e8>)
 800e112:	f00e fdae 	bl	801cc72 <strstr>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00d      	beq.n	800e138 <ATP_operation+0x408>
		{
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e11c:	487e      	ldr	r0, [pc, #504]	@ (800e318 <ATP_operation+0x5e8>)
 800e11e:	f7fe f8b7 	bl	800c290 <strlen>
 800e122:	4603      	mov	r3, r0
 800e124:	3b04      	subs	r3, #4
 800e126:	461a      	mov	r2, r3
 800e128:	4982      	ldr	r1, [pc, #520]	@ (800e334 <ATP_operation+0x604>)
 800e12a:	4883      	ldr	r0, [pc, #524]	@ (800e338 <ATP_operation+0x608>)
 800e12c:	f00e fe3d 	bl	801cdaa <memcpy>
			ATP_test_number = LoopBack2_RS485;
 800e130:	4b7b      	ldr	r3, [pc, #492]	@ (800e320 <ATP_operation+0x5f0>)
 800e132:	221d      	movs	r2, #29
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	e002      	b.n	800e13e <ATP_operation+0x40e>
		}
		else
		{
			ATP_test_number = 0 ;
 800e138:	4b79      	ldr	r3, [pc, #484]	@ (800e320 <ATP_operation+0x5f0>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	701a      	strb	r2, [r3, #0]
		}

		memset(command_str,0,sizeof(command_str));
 800e13e:	2214      	movs	r2, #20
 800e140:	2100      	movs	r1, #0
 800e142:	4875      	ldr	r0, [pc, #468]	@ (800e318 <ATP_operation+0x5e8>)
 800e144:	f00e fd8d 	bl	801cc62 <memset>

		switch(ATP_test_number)
 800e148:	4b75      	ldr	r3, [pc, #468]	@ (800e320 <ATP_operation+0x5f0>)
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	3b01      	subs	r3, #1
 800e14e:	2b1c      	cmp	r3, #28
 800e150:	f200 848e 	bhi.w	800ea70 <ATP_operation+0xd40>
 800e154:	a201      	add	r2, pc, #4	@ (adr r2, 800e15c <ATP_operation+0x42c>)
 800e156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15a:	bf00      	nop
 800e15c:	0800e1d1 	.word	0x0800e1d1
 800e160:	0800e21b 	.word	0x0800e21b
 800e164:	0800e265 	.word	0x0800e265
 800e168:	0800e29f 	.word	0x0800e29f
 800e16c:	0800e2d9 	.word	0x0800e2d9
 800e170:	0800e355 	.word	0x0800e355
 800e174:	0800e38f 	.word	0x0800e38f
 800e178:	0800e3c9 	.word	0x0800e3c9
 800e17c:	0800e411 	.word	0x0800e411
 800e180:	0800e459 	.word	0x0800e459
 800e184:	0800e4a5 	.word	0x0800e4a5
 800e188:	0800e4f1 	.word	0x0800e4f1
 800e18c:	0800e53d 	.word	0x0800e53d
 800e190:	0800e589 	.word	0x0800e589
 800e194:	0800e5d5 	.word	0x0800e5d5
 800e198:	0800e64d 	.word	0x0800e64d
 800e19c:	0800e699 	.word	0x0800e699
 800e1a0:	0800e6e5 	.word	0x0800e6e5
 800e1a4:	0800e725 	.word	0x0800e725
 800e1a8:	0800e771 	.word	0x0800e771
 800e1ac:	0800e7bd 	.word	0x0800e7bd
 800e1b0:	0800e809 	.word	0x0800e809
 800e1b4:	0800e893 	.word	0x0800e893
 800e1b8:	0800e89b 	.word	0x0800e89b
 800e1bc:	0800e8a7 	.word	0x0800e8a7
 800e1c0:	0800e97f 	.word	0x0800e97f
 800e1c4:	0800e9ab 	.word	0x0800e9ab
 800e1c8:	0800e9f1 	.word	0x0800e9f1
 800e1cc:	0800ea31 	.word	0x0800ea31
		{
		case  POWER_CTRL_1 		:
			ATP_test_number=0;
 800e1d0:	4b53      	ldr	r3, [pc, #332]	@ (800e320 <ATP_operation+0x5f0>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e1d6:	2264      	movs	r2, #100	@ 0x64
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4854      	ldr	r0, [pc, #336]	@ (800e32c <ATP_operation+0x5fc>)
 800e1dc:	f00e fd41 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl1_Pin));
 800e1e0:	2120      	movs	r1, #32
 800e1e2:	4859      	ldr	r0, [pc, #356]	@ (800e348 <ATP_operation+0x618>)
 800e1e4:	f003 fd40 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	4957      	ldr	r1, [pc, #348]	@ (800e34c <ATP_operation+0x61c>)
 800e1ee:	484f      	ldr	r0, [pc, #316]	@ (800e32c <ATP_operation+0x5fc>)
 800e1f0:	f00e fcd4 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5,ATP_buffer, strlen((char *)(ATP_buffer)));
 800e1f4:	484d      	ldr	r0, [pc, #308]	@ (800e32c <ATP_operation+0x5fc>)
 800e1f6:	f7fe f84b 	bl	800c290 <strlen>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	461a      	mov	r2, r3
 800e200:	494a      	ldr	r1, [pc, #296]	@ (800e32c <ATP_operation+0x5fc>)
 800e202:	4849      	ldr	r0, [pc, #292]	@ (800e328 <ATP_operation+0x5f8>)
 800e204:	f00b fc72 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOA,Pwr_Ctrl1_Pin);
 800e208:	2120      	movs	r1, #32
 800e20a:	484f      	ldr	r0, [pc, #316]	@ (800e348 <ATP_operation+0x618>)
 800e20c:	f003 fd5c 	bl	8011cc8 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e210:	2005      	movs	r0, #5
 800e212:	f003 f97d 	bl	8011510 <HAL_Delay>
			//			memset(ATP_buffer,0,sizeof(ATP_buffer));
			//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl1_Pin));
			//			HAL_UART_Transmit_IT(&huart5,ATP_buffer, strlen((char *)(ATP_buffer)));
			break;
 800e216:	f000 bc2f 	b.w	800ea78 <ATP_operation+0xd48>
		case  POWER_CTRL_2 		:
			ATP_test_number=0;
 800e21a:	4b41      	ldr	r3, [pc, #260]	@ (800e320 <ATP_operation+0x5f0>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e220:	2264      	movs	r2, #100	@ 0x64
 800e222:	2100      	movs	r1, #0
 800e224:	4841      	ldr	r0, [pc, #260]	@ (800e32c <ATP_operation+0x5fc>)
 800e226:	f00e fd1c 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl2_Pin));
 800e22a:	2140      	movs	r1, #64	@ 0x40
 800e22c:	4846      	ldr	r0, [pc, #280]	@ (800e348 <ATP_operation+0x618>)
 800e22e:	f003 fd1b 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e232:	4603      	mov	r3, r0
 800e234:	461a      	mov	r2, r3
 800e236:	4945      	ldr	r1, [pc, #276]	@ (800e34c <ATP_operation+0x61c>)
 800e238:	483c      	ldr	r0, [pc, #240]	@ (800e32c <ATP_operation+0x5fc>)
 800e23a:	f00e fcaf 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e23e:	483b      	ldr	r0, [pc, #236]	@ (800e32c <ATP_operation+0x5fc>)
 800e240:	f7fe f826 	bl	800c290 <strlen>
 800e244:	4603      	mov	r3, r0
 800e246:	b29b      	uxth	r3, r3
 800e248:	461a      	mov	r2, r3
 800e24a:	4938      	ldr	r1, [pc, #224]	@ (800e32c <ATP_operation+0x5fc>)
 800e24c:	4836      	ldr	r0, [pc, #216]	@ (800e328 <ATP_operation+0x5f8>)
 800e24e:	f00b fc4d 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOA,Pwr_Ctrl2_Pin);
 800e252:	2140      	movs	r1, #64	@ 0x40
 800e254:	483c      	ldr	r0, [pc, #240]	@ (800e348 <ATP_operation+0x618>)
 800e256:	f003 fd37 	bl	8011cc8 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e25a:	2005      	movs	r0, #5
 800e25c:	f003 f958 	bl	8011510 <HAL_Delay>
			//			memset(ATP_buffer,0,sizeof(ATP_buffer));
			//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl2_Pin));
			//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800e260:	f000 bc0a 	b.w	800ea78 <ATP_operation+0xd48>
		case  INPUT_GPIO_1 		:
			ATP_test_number=0;
 800e264:	4b2e      	ldr	r3, [pc, #184]	@ (800e320 <ATP_operation+0x5f0>)
 800e266:	2200      	movs	r2, #0
 800e268:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e26a:	2264      	movs	r2, #100	@ 0x64
 800e26c:	2100      	movs	r1, #0
 800e26e:	482f      	ldr	r0, [pc, #188]	@ (800e32c <ATP_operation+0x5fc>)
 800e270:	f00e fcf7 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOD,GPI_1_Pin));
 800e274:	2104      	movs	r1, #4
 800e276:	4829      	ldr	r0, [pc, #164]	@ (800e31c <ATP_operation+0x5ec>)
 800e278:	f003 fcf6 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e27c:	4603      	mov	r3, r0
 800e27e:	461a      	mov	r2, r3
 800e280:	4932      	ldr	r1, [pc, #200]	@ (800e34c <ATP_operation+0x61c>)
 800e282:	482a      	ldr	r0, [pc, #168]	@ (800e32c <ATP_operation+0x5fc>)
 800e284:	f00e fc8a 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e288:	4828      	ldr	r0, [pc, #160]	@ (800e32c <ATP_operation+0x5fc>)
 800e28a:	f7fe f801 	bl	800c290 <strlen>
 800e28e:	4603      	mov	r3, r0
 800e290:	b29b      	uxth	r3, r3
 800e292:	461a      	mov	r2, r3
 800e294:	4925      	ldr	r1, [pc, #148]	@ (800e32c <ATP_operation+0x5fc>)
 800e296:	4824      	ldr	r0, [pc, #144]	@ (800e328 <ATP_operation+0x5f8>)
 800e298:	f00b fc28 	bl	8019aec <HAL_UART_Transmit_IT>
			break;
 800e29c:	e3ec      	b.n	800ea78 <ATP_operation+0xd48>
		case  INPUT_GPIO_2 		:
			ATP_test_number=0;
 800e29e:	4b20      	ldr	r3, [pc, #128]	@ (800e320 <ATP_operation+0x5f0>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e2a4:	2264      	movs	r2, #100	@ 0x64
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	4820      	ldr	r0, [pc, #128]	@ (800e32c <ATP_operation+0x5fc>)
 800e2aa:	f00e fcda 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin));
 800e2ae:	2108      	movs	r1, #8
 800e2b0:	481a      	ldr	r0, [pc, #104]	@ (800e31c <ATP_operation+0x5ec>)
 800e2b2:	f003 fcd9 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4924      	ldr	r1, [pc, #144]	@ (800e34c <ATP_operation+0x61c>)
 800e2bc:	481b      	ldr	r0, [pc, #108]	@ (800e32c <ATP_operation+0x5fc>)
 800e2be:	f00e fc6d 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e2c2:	481a      	ldr	r0, [pc, #104]	@ (800e32c <ATP_operation+0x5fc>)
 800e2c4:	f7fd ffe4 	bl	800c290 <strlen>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4917      	ldr	r1, [pc, #92]	@ (800e32c <ATP_operation+0x5fc>)
 800e2d0:	4815      	ldr	r0, [pc, #84]	@ (800e328 <ATP_operation+0x5f8>)
 800e2d2:	f00b fc0b 	bl	8019aec <HAL_UART_Transmit_IT>
			break;
 800e2d6:	e3cf      	b.n	800ea78 <ATP_operation+0xd48>
		case  INPUT_GPIO_3 		:
			ATP_test_number=0;
 800e2d8:	4b11      	ldr	r3, [pc, #68]	@ (800e320 <ATP_operation+0x5f0>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e2de:	2264      	movs	r2, #100	@ 0x64
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4812      	ldr	r0, [pc, #72]	@ (800e32c <ATP_operation+0x5fc>)
 800e2e4:	f00e fcbd 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin));
 800e2e8:	2110      	movs	r1, #16
 800e2ea:	4819      	ldr	r0, [pc, #100]	@ (800e350 <ATP_operation+0x620>)
 800e2ec:	f003 fcbc 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	4915      	ldr	r1, [pc, #84]	@ (800e34c <ATP_operation+0x61c>)
 800e2f6:	480d      	ldr	r0, [pc, #52]	@ (800e32c <ATP_operation+0x5fc>)
 800e2f8:	f00e fc50 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e2fc:	480b      	ldr	r0, [pc, #44]	@ (800e32c <ATP_operation+0x5fc>)
 800e2fe:	f7fd ffc7 	bl	800c290 <strlen>
 800e302:	4603      	mov	r3, r0
 800e304:	b29b      	uxth	r3, r3
 800e306:	461a      	mov	r2, r3
 800e308:	4908      	ldr	r1, [pc, #32]	@ (800e32c <ATP_operation+0x5fc>)
 800e30a:	4807      	ldr	r0, [pc, #28]	@ (800e328 <ATP_operation+0x5f8>)
 800e30c:	f00b fbee 	bl	8019aec <HAL_UART_Transmit_IT>
			break;
 800e310:	e3b2      	b.n	800ea78 <ATP_operation+0xd48>
 800e312:	bf00      	nop
 800e314:	20000064 	.word	0x20000064
 800e318:	20000358 	.word	0x20000358
 800e31c:	42020c00 	.word	0x42020c00
 800e320:	2000036e 	.word	0x2000036e
 800e324:	20000078 	.word	0x20000078
 800e328:	20005964 	.word	0x20005964
 800e32c:	20000384 	.word	0x20000384
 800e330:	20000068 	.word	0x20000068
 800e334:	2000035b 	.word	0x2000035b
 800e338:	20000370 	.word	0x20000370
 800e33c:	2000006c 	.word	0x2000006c
 800e340:	20000070 	.word	0x20000070
 800e344:	20000074 	.word	0x20000074
 800e348:	42020000 	.word	0x42020000
 800e34c:	0801f138 	.word	0x0801f138
 800e350:	42021000 	.word	0x42021000
		case  INPUT_GPIO_4 		:
			ATP_test_number=0;
 800e354:	4bb2      	ldr	r3, [pc, #712]	@ (800e620 <ATP_operation+0x8f0>)
 800e356:	2200      	movs	r2, #0
 800e358:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e35a:	2264      	movs	r2, #100	@ 0x64
 800e35c:	2100      	movs	r1, #0
 800e35e:	48b1      	ldr	r0, [pc, #708]	@ (800e624 <ATP_operation+0x8f4>)
 800e360:	f00e fc7f 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_4_Pin));
 800e364:	2120      	movs	r1, #32
 800e366:	48b0      	ldr	r0, [pc, #704]	@ (800e628 <ATP_operation+0x8f8>)
 800e368:	f003 fc7e 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e36c:	4603      	mov	r3, r0
 800e36e:	461a      	mov	r2, r3
 800e370:	49ae      	ldr	r1, [pc, #696]	@ (800e62c <ATP_operation+0x8fc>)
 800e372:	48ac      	ldr	r0, [pc, #688]	@ (800e624 <ATP_operation+0x8f4>)
 800e374:	f00e fc12 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e378:	48aa      	ldr	r0, [pc, #680]	@ (800e624 <ATP_operation+0x8f4>)
 800e37a:	f7fd ff89 	bl	800c290 <strlen>
 800e37e:	4603      	mov	r3, r0
 800e380:	b29b      	uxth	r3, r3
 800e382:	461a      	mov	r2, r3
 800e384:	49a7      	ldr	r1, [pc, #668]	@ (800e624 <ATP_operation+0x8f4>)
 800e386:	48aa      	ldr	r0, [pc, #680]	@ (800e630 <ATP_operation+0x900>)
 800e388:	f00b fbb0 	bl	8019aec <HAL_UART_Transmit_IT>
			break;
 800e38c:	e374      	b.n	800ea78 <ATP_operation+0xd48>
		case  INPUT_GPIO_5 		:
			ATP_test_number=0;
 800e38e:	4ba4      	ldr	r3, [pc, #656]	@ (800e620 <ATP_operation+0x8f0>)
 800e390:	2200      	movs	r2, #0
 800e392:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e394:	2264      	movs	r2, #100	@ 0x64
 800e396:	2100      	movs	r1, #0
 800e398:	48a2      	ldr	r0, [pc, #648]	@ (800e624 <ATP_operation+0x8f4>)
 800e39a:	f00e fc62 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_5_Pin));
 800e39e:	2140      	movs	r1, #64	@ 0x40
 800e3a0:	48a1      	ldr	r0, [pc, #644]	@ (800e628 <ATP_operation+0x8f8>)
 800e3a2:	f003 fc61 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	49a0      	ldr	r1, [pc, #640]	@ (800e62c <ATP_operation+0x8fc>)
 800e3ac:	489d      	ldr	r0, [pc, #628]	@ (800e624 <ATP_operation+0x8f4>)
 800e3ae:	f00e fbf5 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e3b2:	489c      	ldr	r0, [pc, #624]	@ (800e624 <ATP_operation+0x8f4>)
 800e3b4:	f7fd ff6c 	bl	800c290 <strlen>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4999      	ldr	r1, [pc, #612]	@ (800e624 <ATP_operation+0x8f4>)
 800e3c0:	489b      	ldr	r0, [pc, #620]	@ (800e630 <ATP_operation+0x900>)
 800e3c2:	f00b fb93 	bl	8019aec <HAL_UART_Transmit_IT>
			break;
 800e3c6:	e357      	b.n	800ea78 <ATP_operation+0xd48>
		case  OUTPUT_GPIO_1 	:
			ATP_test_number=0;
 800e3c8:	4b95      	ldr	r3, [pc, #596]	@ (800e620 <ATP_operation+0x8f0>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e3ce:	2264      	movs	r2, #100	@ 0x64
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4894      	ldr	r0, [pc, #592]	@ (800e624 <ATP_operation+0x8f4>)
 800e3d4:	f00e fc45 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_1_Pin));
 800e3d8:	2101      	movs	r1, #1
 800e3da:	4896      	ldr	r0, [pc, #600]	@ (800e634 <ATP_operation+0x904>)
 800e3dc:	f003 fc44 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	4991      	ldr	r1, [pc, #580]	@ (800e62c <ATP_operation+0x8fc>)
 800e3e6:	488f      	ldr	r0, [pc, #572]	@ (800e624 <ATP_operation+0x8f4>)
 800e3e8:	f00e fbd8 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e3ec:	488d      	ldr	r0, [pc, #564]	@ (800e624 <ATP_operation+0x8f4>)
 800e3ee:	f7fd ff4f 	bl	800c290 <strlen>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	498a      	ldr	r1, [pc, #552]	@ (800e624 <ATP_operation+0x8f4>)
 800e3fa:	488d      	ldr	r0, [pc, #564]	@ (800e630 <ATP_operation+0x900>)
 800e3fc:	f00b fb76 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOB,GPO_1_Pin);
 800e400:	2101      	movs	r1, #1
 800e402:	488c      	ldr	r0, [pc, #560]	@ (800e634 <ATP_operation+0x904>)
 800e404:	f003 fc60 	bl	8011cc8 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e408:	2005      	movs	r0, #5
 800e40a:	f003 f881 	bl	8011510 <HAL_Delay>
			//			memset(ATP_buffer,0,sizeof(ATP_buffer));
			//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_1_Pin));
			//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800e40e:	e333      	b.n	800ea78 <ATP_operation+0xd48>
		case  OUTPUT_GPIO_2 	:
			ATP_test_number=0;
 800e410:	4b83      	ldr	r3, [pc, #524]	@ (800e620 <ATP_operation+0x8f0>)
 800e412:	2200      	movs	r2, #0
 800e414:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e416:	2264      	movs	r2, #100	@ 0x64
 800e418:	2100      	movs	r1, #0
 800e41a:	4882      	ldr	r0, [pc, #520]	@ (800e624 <ATP_operation+0x8f4>)
 800e41c:	f00e fc21 	bl	801cc62 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_2_Pin));
 800e420:	2102      	movs	r1, #2
 800e422:	4884      	ldr	r0, [pc, #528]	@ (800e634 <ATP_operation+0x904>)
 800e424:	f003 fc20 	bl	8011c68 <HAL_GPIO_ReadPin>
 800e428:	4603      	mov	r3, r0
 800e42a:	461a      	mov	r2, r3
 800e42c:	497f      	ldr	r1, [pc, #508]	@ (800e62c <ATP_operation+0x8fc>)
 800e42e:	487d      	ldr	r0, [pc, #500]	@ (800e624 <ATP_operation+0x8f4>)
 800e430:	f00e fbb4 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e434:	487b      	ldr	r0, [pc, #492]	@ (800e624 <ATP_operation+0x8f4>)
 800e436:	f7fd ff2b 	bl	800c290 <strlen>
 800e43a:	4603      	mov	r3, r0
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	461a      	mov	r2, r3
 800e440:	4978      	ldr	r1, [pc, #480]	@ (800e624 <ATP_operation+0x8f4>)
 800e442:	487b      	ldr	r0, [pc, #492]	@ (800e630 <ATP_operation+0x900>)
 800e444:	f00b fb52 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOB,GPO_2_Pin);
 800e448:	2102      	movs	r1, #2
 800e44a:	487a      	ldr	r0, [pc, #488]	@ (800e634 <ATP_operation+0x904>)
 800e44c:	f003 fc3c 	bl	8011cc8 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e450:	2005      	movs	r0, #5
 800e452:	f003 f85d 	bl	8011510 <HAL_Delay>
			//			memset(ATP_buffer,0,sizeof(ATP_buffer));
			//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_2_Pin));
			//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800e456:	e30f      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_1		 		:
			ATP_test_number=0;
 800e458:	4b71      	ldr	r3, [pc, #452]	@ (800e620 <ATP_operation+0x8f0>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_1);
 800e45e:	2100      	movs	r1, #0
 800e460:	2000      	movs	r0, #0
 800e462:	f7fe fdb9 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e466:	2032      	movs	r0, #50	@ 0x32
 800e468:	f003 f852 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,1,sensor_hex[0][0],temp_sensor[0][0]);
 800e46c:	4b72      	ldr	r3, [pc, #456]	@ (800e638 <ATP_operation+0x908>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	461c      	mov	r4, r3
 800e472:	4b72      	ldr	r3, [pc, #456]	@ (800e63c <ATP_operation+0x90c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe f876 	bl	800c568 <__aeabi_f2d>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e484:	9400      	str	r4, [sp, #0]
 800e486:	2301      	movs	r3, #1
 800e488:	2201      	movs	r2, #1
 800e48a:	496d      	ldr	r1, [pc, #436]	@ (800e640 <ATP_operation+0x910>)
 800e48c:	4865      	ldr	r0, [pc, #404]	@ (800e624 <ATP_operation+0x8f4>)
 800e48e:	f00e fb85 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e492:	2264      	movs	r2, #100	@ 0x64
 800e494:	4963      	ldr	r1, [pc, #396]	@ (800e624 <ATP_operation+0x8f4>)
 800e496:	4866      	ldr	r0, [pc, #408]	@ (800e630 <ATP_operation+0x900>)
 800e498:	f00b fb28 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e49c:	2032      	movs	r0, #50	@ 0x32
 800e49e:	f003 f837 	bl	8011510 <HAL_Delay>
			break;
 800e4a2:	e2e9      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_2		 		:
			ATP_test_number=0;
 800e4a4:	4b5e      	ldr	r3, [pc, #376]	@ (800e620 <ATP_operation+0x8f0>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_2);
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	f7fe fd93 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e4b2:	2032      	movs	r0, #50	@ 0x32
 800e4b4:	f003 f82c 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,2,sensor_hex[0][1],temp_sensor[0][1]);
 800e4b8:	4b5f      	ldr	r3, [pc, #380]	@ (800e638 <ATP_operation+0x908>)
 800e4ba:	885b      	ldrh	r3, [r3, #2]
 800e4bc:	461c      	mov	r4, r3
 800e4be:	4b5f      	ldr	r3, [pc, #380]	@ (800e63c <ATP_operation+0x90c>)
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe f850 	bl	800c568 <__aeabi_f2d>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4d0:	9400      	str	r4, [sp, #0]
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	495a      	ldr	r1, [pc, #360]	@ (800e640 <ATP_operation+0x910>)
 800e4d8:	4852      	ldr	r0, [pc, #328]	@ (800e624 <ATP_operation+0x8f4>)
 800e4da:	f00e fb5f 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e4de:	2264      	movs	r2, #100	@ 0x64
 800e4e0:	4950      	ldr	r1, [pc, #320]	@ (800e624 <ATP_operation+0x8f4>)
 800e4e2:	4853      	ldr	r0, [pc, #332]	@ (800e630 <ATP_operation+0x900>)
 800e4e4:	f00b fb02 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e4e8:	2032      	movs	r0, #50	@ 0x32
 800e4ea:	f003 f811 	bl	8011510 <HAL_Delay>
			break;
 800e4ee:	e2c3      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_3		 		:
			ATP_test_number=0;
 800e4f0:	4b4b      	ldr	r3, [pc, #300]	@ (800e620 <ATP_operation+0x8f0>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_3);
 800e4f6:	2102      	movs	r1, #2
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	f7fe fd6d 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e4fe:	2032      	movs	r0, #50	@ 0x32
 800e500:	f003 f806 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,3,sensor_hex[0][2],temp_sensor[0][2]);
 800e504:	4b4c      	ldr	r3, [pc, #304]	@ (800e638 <ATP_operation+0x908>)
 800e506:	889b      	ldrh	r3, [r3, #4]
 800e508:	461c      	mov	r4, r3
 800e50a:	4b4c      	ldr	r3, [pc, #304]	@ (800e63c <ATP_operation+0x90c>)
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fe f82a 	bl	800c568 <__aeabi_f2d>
 800e514:	4602      	mov	r2, r0
 800e516:	460b      	mov	r3, r1
 800e518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e51c:	9400      	str	r4, [sp, #0]
 800e51e:	2303      	movs	r3, #3
 800e520:	2201      	movs	r2, #1
 800e522:	4947      	ldr	r1, [pc, #284]	@ (800e640 <ATP_operation+0x910>)
 800e524:	483f      	ldr	r0, [pc, #252]	@ (800e624 <ATP_operation+0x8f4>)
 800e526:	f00e fb39 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e52a:	2264      	movs	r2, #100	@ 0x64
 800e52c:	493d      	ldr	r1, [pc, #244]	@ (800e624 <ATP_operation+0x8f4>)
 800e52e:	4840      	ldr	r0, [pc, #256]	@ (800e630 <ATP_operation+0x900>)
 800e530:	f00b fadc 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e534:	2032      	movs	r0, #50	@ 0x32
 800e536:	f002 ffeb 	bl	8011510 <HAL_Delay>
			break;
 800e53a:	e29d      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_4		 		:
			ATP_test_number=0;
 800e53c:	4b38      	ldr	r3, [pc, #224]	@ (800e620 <ATP_operation+0x8f0>)
 800e53e:	2200      	movs	r2, #0
 800e540:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_4);
 800e542:	2103      	movs	r1, #3
 800e544:	2000      	movs	r0, #0
 800e546:	f7fe fd47 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e54a:	2032      	movs	r0, #50	@ 0x32
 800e54c:	f002 ffe0 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",1,4,sensor_hex[0][3],temp_sensor[0][3]);
 800e550:	4b39      	ldr	r3, [pc, #228]	@ (800e638 <ATP_operation+0x908>)
 800e552:	88db      	ldrh	r3, [r3, #6]
 800e554:	461c      	mov	r4, r3
 800e556:	4b39      	ldr	r3, [pc, #228]	@ (800e63c <ATP_operation+0x90c>)
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe f804 	bl	800c568 <__aeabi_f2d>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e568:	9400      	str	r4, [sp, #0]
 800e56a:	2304      	movs	r3, #4
 800e56c:	2201      	movs	r2, #1
 800e56e:	4935      	ldr	r1, [pc, #212]	@ (800e644 <ATP_operation+0x914>)
 800e570:	482c      	ldr	r0, [pc, #176]	@ (800e624 <ATP_operation+0x8f4>)
 800e572:	f00e fb13 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e576:	2264      	movs	r2, #100	@ 0x64
 800e578:	492a      	ldr	r1, [pc, #168]	@ (800e624 <ATP_operation+0x8f4>)
 800e57a:	482d      	ldr	r0, [pc, #180]	@ (800e630 <ATP_operation+0x900>)
 800e57c:	f00b fab6 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e580:	2032      	movs	r0, #50	@ 0x32
 800e582:	f002 ffc5 	bl	8011510 <HAL_Delay>
			break;
 800e586:	e277      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_5		 		:
			ATP_test_number=0;
 800e588:	4b25      	ldr	r3, [pc, #148]	@ (800e620 <ATP_operation+0x8f0>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_1);
 800e58e:	2100      	movs	r1, #0
 800e590:	2001      	movs	r0, #1
 800e592:	f7fe fd21 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e596:	2032      	movs	r0, #50	@ 0x32
 800e598:	f002 ffba 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0X%X    temp = %f\n\r",2,1,sensor_hex[1][0],temp_sensor[1][0]);
 800e59c:	4b26      	ldr	r3, [pc, #152]	@ (800e638 <ATP_operation+0x908>)
 800e59e:	891b      	ldrh	r3, [r3, #8]
 800e5a0:	461c      	mov	r4, r3
 800e5a2:	4b26      	ldr	r3, [pc, #152]	@ (800e63c <ATP_operation+0x90c>)
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fd ffde 	bl	800c568 <__aeabi_f2d>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5b4:	9400      	str	r4, [sp, #0]
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	4923      	ldr	r1, [pc, #140]	@ (800e648 <ATP_operation+0x918>)
 800e5bc:	4819      	ldr	r0, [pc, #100]	@ (800e624 <ATP_operation+0x8f4>)
 800e5be:	f00e faed 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e5c2:	2264      	movs	r2, #100	@ 0x64
 800e5c4:	4917      	ldr	r1, [pc, #92]	@ (800e624 <ATP_operation+0x8f4>)
 800e5c6:	481a      	ldr	r0, [pc, #104]	@ (800e630 <ATP_operation+0x900>)
 800e5c8:	f00b fa90 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e5cc:	2032      	movs	r0, #50	@ 0x32
 800e5ce:	f002 ff9f 	bl	8011510 <HAL_Delay>
			break;
 800e5d2:	e251      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_6		 		:
			ATP_test_number=0;
 800e5d4:	4b12      	ldr	r3, [pc, #72]	@ (800e620 <ATP_operation+0x8f0>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_2);
 800e5da:	2101      	movs	r1, #1
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f7fe fcfb 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e5e2:	2032      	movs	r0, #50	@ 0x32
 800e5e4:	f002 ff94 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",2,2,sensor_hex[1][1],temp_sensor[1][1]);
 800e5e8:	4b13      	ldr	r3, [pc, #76]	@ (800e638 <ATP_operation+0x908>)
 800e5ea:	895b      	ldrh	r3, [r3, #10]
 800e5ec:	461c      	mov	r4, r3
 800e5ee:	4b13      	ldr	r3, [pc, #76]	@ (800e63c <ATP_operation+0x90c>)
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fd ffb8 	bl	800c568 <__aeabi_f2d>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e600:	9400      	str	r4, [sp, #0]
 800e602:	2302      	movs	r3, #2
 800e604:	2202      	movs	r2, #2
 800e606:	490e      	ldr	r1, [pc, #56]	@ (800e640 <ATP_operation+0x910>)
 800e608:	4806      	ldr	r0, [pc, #24]	@ (800e624 <ATP_operation+0x8f4>)
 800e60a:	f00e fac7 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e60e:	2264      	movs	r2, #100	@ 0x64
 800e610:	4904      	ldr	r1, [pc, #16]	@ (800e624 <ATP_operation+0x8f4>)
 800e612:	4807      	ldr	r0, [pc, #28]	@ (800e630 <ATP_operation+0x900>)
 800e614:	f00b fa6a 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e618:	2032      	movs	r0, #50	@ 0x32
 800e61a:	f002 ff79 	bl	8011510 <HAL_Delay>
			break;
 800e61e:	e22b      	b.n	800ea78 <ATP_operation+0xd48>
 800e620:	2000036e 	.word	0x2000036e
 800e624:	20000384 	.word	0x20000384
 800e628:	42021000 	.word	0x42021000
 800e62c:	0801f138 	.word	0x0801f138
 800e630:	20005964 	.word	0x20005964
 800e634:	42020400 	.word	0x42020400
 800e638:	20000340 	.word	0x20000340
 800e63c:	20000310 	.word	0x20000310
 800e640:	0801f148 	.word	0x0801f148
 800e644:	0801f170 	.word	0x0801f170
 800e648:	0801f198 	.word	0x0801f198
		case  TS_7		 		:
			ATP_test_number=0;
 800e64c:	4bb4      	ldr	r3, [pc, #720]	@ (800e920 <ATP_operation+0xbf0>)
 800e64e:	2200      	movs	r2, #0
 800e650:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_3);
 800e652:	2102      	movs	r1, #2
 800e654:	2001      	movs	r0, #1
 800e656:	f7fe fcbf 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e65a:	2032      	movs	r0, #50	@ 0x32
 800e65c:	f002 ff58 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",2,3,sensor_hex[1][2],temp_sensor[1][2]);
 800e660:	4bb0      	ldr	r3, [pc, #704]	@ (800e924 <ATP_operation+0xbf4>)
 800e662:	899b      	ldrh	r3, [r3, #12]
 800e664:	461c      	mov	r4, r3
 800e666:	4bb0      	ldr	r3, [pc, #704]	@ (800e928 <ATP_operation+0xbf8>)
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fd ff7c 	bl	800c568 <__aeabi_f2d>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e678:	9400      	str	r4, [sp, #0]
 800e67a:	2303      	movs	r3, #3
 800e67c:	2202      	movs	r2, #2
 800e67e:	49ab      	ldr	r1, [pc, #684]	@ (800e92c <ATP_operation+0xbfc>)
 800e680:	48ab      	ldr	r0, [pc, #684]	@ (800e930 <ATP_operation+0xc00>)
 800e682:	f00e fa8b 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e686:	2264      	movs	r2, #100	@ 0x64
 800e688:	49a9      	ldr	r1, [pc, #676]	@ (800e930 <ATP_operation+0xc00>)
 800e68a:	48aa      	ldr	r0, [pc, #680]	@ (800e934 <ATP_operation+0xc04>)
 800e68c:	f00b fa2e 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e690:	2032      	movs	r0, #50	@ 0x32
 800e692:	f002 ff3d 	bl	8011510 <HAL_Delay>
			break;
 800e696:	e1ef      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_8		 		:
			ATP_test_number=0;
 800e698:	4ba1      	ldr	r3, [pc, #644]	@ (800e920 <ATP_operation+0xbf0>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_4);
 800e69e:	2103      	movs	r1, #3
 800e6a0:	2001      	movs	r0, #1
 800e6a2:	f7fe fc99 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e6a6:	2032      	movs	r0, #50	@ 0x32
 800e6a8:	f002 ff32 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",2,4,sensor_hex[1][3],temp_sensor[1][3]);
 800e6ac:	4b9d      	ldr	r3, [pc, #628]	@ (800e924 <ATP_operation+0xbf4>)
 800e6ae:	89db      	ldrh	r3, [r3, #14]
 800e6b0:	461c      	mov	r4, r3
 800e6b2:	4b9d      	ldr	r3, [pc, #628]	@ (800e928 <ATP_operation+0xbf8>)
 800e6b4:	69db      	ldr	r3, [r3, #28]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fd ff56 	bl	800c568 <__aeabi_f2d>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6c4:	9400      	str	r4, [sp, #0]
 800e6c6:	2304      	movs	r3, #4
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	499b      	ldr	r1, [pc, #620]	@ (800e938 <ATP_operation+0xc08>)
 800e6cc:	4898      	ldr	r0, [pc, #608]	@ (800e930 <ATP_operation+0xc00>)
 800e6ce:	f00e fa65 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e6d2:	2264      	movs	r2, #100	@ 0x64
 800e6d4:	4996      	ldr	r1, [pc, #600]	@ (800e930 <ATP_operation+0xc00>)
 800e6d6:	4897      	ldr	r0, [pc, #604]	@ (800e934 <ATP_operation+0xc04>)
 800e6d8:	f00b fa08 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e6dc:	2032      	movs	r0, #50	@ 0x32
 800e6de:	f002 ff17 	bl	8011510 <HAL_Delay>
			break;
 800e6e2:	e1c9      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_9		 		:
			ATP_test_number=0;
 800e6e4:	4b8e      	ldr	r3, [pc, #568]	@ (800e920 <ATP_operation+0xbf0>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_1);
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	2002      	movs	r0, #2
 800e6ee:	f7fe fc73 	bl	800cfd8 <ADC_READ>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X   temp = %f\n\r",3,1,sensor_hex[2][0],temp_sensor[2][0]);
 800e6f2:	4b8c      	ldr	r3, [pc, #560]	@ (800e924 <ATP_operation+0xbf4>)
 800e6f4:	8a1b      	ldrh	r3, [r3, #16]
 800e6f6:	461c      	mov	r4, r3
 800e6f8:	4b8b      	ldr	r3, [pc, #556]	@ (800e928 <ATP_operation+0xbf8>)
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fd ff33 	bl	800c568 <__aeabi_f2d>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e70a:	9400      	str	r4, [sp, #0]
 800e70c:	2301      	movs	r3, #1
 800e70e:	2203      	movs	r2, #3
 800e710:	498a      	ldr	r1, [pc, #552]	@ (800e93c <ATP_operation+0xc0c>)
 800e712:	4887      	ldr	r0, [pc, #540]	@ (800e930 <ATP_operation+0xc00>)
 800e714:	f00e fa42 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e718:	2264      	movs	r2, #100	@ 0x64
 800e71a:	4985      	ldr	r1, [pc, #532]	@ (800e930 <ATP_operation+0xc00>)
 800e71c:	4885      	ldr	r0, [pc, #532]	@ (800e934 <ATP_operation+0xc04>)
 800e71e:	f00b f9e5 	bl	8019aec <HAL_UART_Transmit_IT>
			break;
 800e722:	e1a9      	b.n	800ea78 <ATP_operation+0xd48>

		case  TS_10		 		:
			ATP_test_number=0;
 800e724:	4b7e      	ldr	r3, [pc, #504]	@ (800e920 <ATP_operation+0xbf0>)
 800e726:	2200      	movs	r2, #0
 800e728:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_2);
 800e72a:	2101      	movs	r1, #1
 800e72c:	2002      	movs	r0, #2
 800e72e:	f7fe fc53 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e732:	2032      	movs	r0, #50	@ 0x32
 800e734:	f002 feec 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",3,2,sensor_hex[2][1],temp_sensor[2][1]);
 800e738:	4b7a      	ldr	r3, [pc, #488]	@ (800e924 <ATP_operation+0xbf4>)
 800e73a:	8a5b      	ldrh	r3, [r3, #18]
 800e73c:	461c      	mov	r4, r3
 800e73e:	4b7a      	ldr	r3, [pc, #488]	@ (800e928 <ATP_operation+0xbf8>)
 800e740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e742:	4618      	mov	r0, r3
 800e744:	f7fd ff10 	bl	800c568 <__aeabi_f2d>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e750:	9400      	str	r4, [sp, #0]
 800e752:	2302      	movs	r3, #2
 800e754:	2203      	movs	r2, #3
 800e756:	4978      	ldr	r1, [pc, #480]	@ (800e938 <ATP_operation+0xc08>)
 800e758:	4875      	ldr	r0, [pc, #468]	@ (800e930 <ATP_operation+0xc00>)
 800e75a:	f00e fa1f 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e75e:	2264      	movs	r2, #100	@ 0x64
 800e760:	4973      	ldr	r1, [pc, #460]	@ (800e930 <ATP_operation+0xc00>)
 800e762:	4874      	ldr	r0, [pc, #464]	@ (800e934 <ATP_operation+0xc04>)
 800e764:	f00b f9c2 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e768:	2032      	movs	r0, #50	@ 0x32
 800e76a:	f002 fed1 	bl	8011510 <HAL_Delay>
			break;
 800e76e:	e183      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_11		 		:
			ATP_test_number=0;
 800e770:	4b6b      	ldr	r3, [pc, #428]	@ (800e920 <ATP_operation+0xbf0>)
 800e772:	2200      	movs	r2, #0
 800e774:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_3);
 800e776:	2102      	movs	r1, #2
 800e778:	2002      	movs	r0, #2
 800e77a:	f7fe fc2d 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e77e:	2032      	movs	r0, #50	@ 0x32
 800e780:	f002 fec6 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",3,3,sensor_hex[2][2],temp_sensor[2][2]);
 800e784:	4b67      	ldr	r3, [pc, #412]	@ (800e924 <ATP_operation+0xbf4>)
 800e786:	8a9b      	ldrh	r3, [r3, #20]
 800e788:	461c      	mov	r4, r3
 800e78a:	4b67      	ldr	r3, [pc, #412]	@ (800e928 <ATP_operation+0xbf8>)
 800e78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fd feea 	bl	800c568 <__aeabi_f2d>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e79c:	9400      	str	r4, [sp, #0]
 800e79e:	2303      	movs	r3, #3
 800e7a0:	2203      	movs	r2, #3
 800e7a2:	4962      	ldr	r1, [pc, #392]	@ (800e92c <ATP_operation+0xbfc>)
 800e7a4:	4862      	ldr	r0, [pc, #392]	@ (800e930 <ATP_operation+0xc00>)
 800e7a6:	f00e f9f9 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e7aa:	2264      	movs	r2, #100	@ 0x64
 800e7ac:	4960      	ldr	r1, [pc, #384]	@ (800e930 <ATP_operation+0xc00>)
 800e7ae:	4861      	ldr	r0, [pc, #388]	@ (800e934 <ATP_operation+0xc04>)
 800e7b0:	f00b f99c 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e7b4:	2032      	movs	r0, #50	@ 0x32
 800e7b6:	f002 feab 	bl	8011510 <HAL_Delay>
			break;
 800e7ba:	e15d      	b.n	800ea78 <ATP_operation+0xd48>
		case  TS_12		 		:
			ATP_test_number=0;
 800e7bc:	4b58      	ldr	r3, [pc, #352]	@ (800e920 <ATP_operation+0xbf0>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_4);
 800e7c2:	2103      	movs	r1, #3
 800e7c4:	2002      	movs	r0, #2
 800e7c6:	f7fe fc07 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e7ca:	2032      	movs	r0, #50	@ 0x32
 800e7cc:	f002 fea0 	bl	8011510 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",3,4,sensor_hex[2][3],temp_sensor[2][3]);
 800e7d0:	4b54      	ldr	r3, [pc, #336]	@ (800e924 <ATP_operation+0xbf4>)
 800e7d2:	8adb      	ldrh	r3, [r3, #22]
 800e7d4:	461c      	mov	r4, r3
 800e7d6:	4b54      	ldr	r3, [pc, #336]	@ (800e928 <ATP_operation+0xbf8>)
 800e7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fd fec4 	bl	800c568 <__aeabi_f2d>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7e8:	9400      	str	r4, [sp, #0]
 800e7ea:	2304      	movs	r3, #4
 800e7ec:	2203      	movs	r2, #3
 800e7ee:	494f      	ldr	r1, [pc, #316]	@ (800e92c <ATP_operation+0xbfc>)
 800e7f0:	484f      	ldr	r0, [pc, #316]	@ (800e930 <ATP_operation+0xc00>)
 800e7f2:	f00e f9d3 	bl	801cb9c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e7f6:	2264      	movs	r2, #100	@ 0x64
 800e7f8:	494d      	ldr	r1, [pc, #308]	@ (800e930 <ATP_operation+0xc00>)
 800e7fa:	484e      	ldr	r0, [pc, #312]	@ (800e934 <ATP_operation+0xc04>)
 800e7fc:	f00b f976 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e800:	2032      	movs	r0, #50	@ 0x32
 800e802:	f002 fe85 	bl	8011510 <HAL_Delay>
			break;
 800e806:	e137      	b.n	800ea78 <ATP_operation+0xd48>
		case  RTC_CHECK	 		:
			ATP_test_number=0;
 800e808:	4b45      	ldr	r3, [pc, #276]	@ (800e920 <ATP_operation+0xbf0>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	701a      	strb	r2, [r3, #0]
			uint8_t time_data_1[8]={0};
 800e80e:	2300      	movs	r3, #0
 800e810:	607b      	str	r3, [r7, #4]
 800e812:	2300      	movs	r3, #0
 800e814:	60bb      	str	r3, [r7, #8]
			uint32_t sec_addr = 0x60000000 | 0x7FFF9;
 800e816:	4b4a      	ldr	r3, [pc, #296]	@ (800e940 <ATP_operation+0xc10>)
 800e818:	60fb      	str	r3, [r7, #12]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e81a:	2264      	movs	r2, #100	@ 0x64
 800e81c:	2100      	movs	r1, #0
 800e81e:	4844      	ldr	r0, [pc, #272]	@ (800e930 <ATP_operation+0xc00>)
 800e820:	f00e fa1f 	bl	801cc62 <memset>
			HAL_Delay(100);
 800e824:	2064      	movs	r0, #100	@ 0x64
 800e826:	f002 fe73 	bl	8011510 <HAL_Delay>
			HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data_1,7);
 800e82a:	68f9      	ldr	r1, [r7, #12]
 800e82c:	1d3a      	adds	r2, r7, #4
 800e82e:	2307      	movs	r3, #7
 800e830:	4844      	ldr	r0, [pc, #272]	@ (800e944 <ATP_operation+0xc14>)
 800e832:	f00a ffcf 	bl	80197d4 <HAL_SRAM_Read_8b>

			if(time_data_1[6]!= 0)
 800e836:	7abb      	ldrb	r3, [r7, #10]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d01a      	beq.n	800e872 <ATP_operation+0xb42>
			{
				sprintf((char *)ATP_buffer, "{\"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",time_data_1[2],time_data_1[1],time_data_1[0],time_data_1[4],time_data_1[5],time_data_1[6]);
 800e83c:	79bb      	ldrb	r3, [r7, #6]
 800e83e:	461c      	mov	r4, r3
 800e840:	797b      	ldrb	r3, [r7, #5]
 800e842:	461d      	mov	r5, r3
 800e844:	793b      	ldrb	r3, [r7, #4]
 800e846:	7a3a      	ldrb	r2, [r7, #8]
 800e848:	7a79      	ldrb	r1, [r7, #9]
 800e84a:	7ab8      	ldrb	r0, [r7, #10]
 800e84c:	9003      	str	r0, [sp, #12]
 800e84e:	9102      	str	r1, [sp, #8]
 800e850:	9201      	str	r2, [sp, #4]
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	462b      	mov	r3, r5
 800e856:	4622      	mov	r2, r4
 800e858:	493b      	ldr	r1, [pc, #236]	@ (800e948 <ATP_operation+0xc18>)
 800e85a:	4835      	ldr	r0, [pc, #212]	@ (800e930 <ATP_operation+0xc00>)
 800e85c:	f00e f99e 	bl	801cb9c <siprintf>
				HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e860:	2264      	movs	r2, #100	@ 0x64
 800e862:	4933      	ldr	r1, [pc, #204]	@ (800e930 <ATP_operation+0xc00>)
 800e864:	4833      	ldr	r0, [pc, #204]	@ (800e934 <ATP_operation+0xc04>)
 800e866:	f00b f941 	bl	8019aec <HAL_UART_Transmit_IT>
				HAL_Delay(100);
 800e86a:	2064      	movs	r0, #100	@ 0x64
 800e86c:	f002 fe50 	bl	8011510 <HAL_Delay>
				command_str[0]='T';
				command_str[1] = '2';
				command_str[2] = '2';
				command_str[3]= 'E';
			}
			break;
 800e870:	e102      	b.n	800ea78 <ATP_operation+0xd48>
				ATP_test = 1;
 800e872:	4b36      	ldr	r3, [pc, #216]	@ (800e94c <ATP_operation+0xc1c>)
 800e874:	2201      	movs	r2, #1
 800e876:	701a      	strb	r2, [r3, #0]
				command_str[0]='T';
 800e878:	4b35      	ldr	r3, [pc, #212]	@ (800e950 <ATP_operation+0xc20>)
 800e87a:	2254      	movs	r2, #84	@ 0x54
 800e87c:	701a      	strb	r2, [r3, #0]
				command_str[1] = '2';
 800e87e:	4b34      	ldr	r3, [pc, #208]	@ (800e950 <ATP_operation+0xc20>)
 800e880:	2232      	movs	r2, #50	@ 0x32
 800e882:	705a      	strb	r2, [r3, #1]
				command_str[2] = '2';
 800e884:	4b32      	ldr	r3, [pc, #200]	@ (800e950 <ATP_operation+0xc20>)
 800e886:	2232      	movs	r2, #50	@ 0x32
 800e888:	709a      	strb	r2, [r3, #2]
				command_str[3]= 'E';
 800e88a:	4b31      	ldr	r3, [pc, #196]	@ (800e950 <ATP_operation+0xc20>)
 800e88c:	2245      	movs	r2, #69	@ 0x45
 800e88e:	70da      	strb	r2, [r3, #3]
			break;
 800e890:	e0f2      	b.n	800ea78 <ATP_operation+0xd48>
		case  NAND_FLASH_WRITE	:
			ATP_test_number= 0;
 800e892:	4b23      	ldr	r3, [pc, #140]	@ (800e920 <ATP_operation+0xbf0>)
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]
			break;
 800e898:	e0ee      	b.n	800ea78 <ATP_operation+0xd48>

		case  NAND_FLASH_READ	:
			ATP_test_number=0;
 800e89a:	4b21      	ldr	r3, [pc, #132]	@ (800e920 <ATP_operation+0xbf0>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
			get_NAND_stored_data();
 800e8a0:	f000 fb22 	bl	800eee8 <get_NAND_stored_data>
			break;
 800e8a4:	e0e8      	b.n	800ea78 <ATP_operation+0xd48>

		case  NAND_FLASH_ERASE	:
			ATP_test_number=0;
 800e8a6:	4b1e      	ldr	r3, [pc, #120]	@ (800e920 <ATP_operation+0xbf0>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	701a      	strb	r2, [r3, #0]
			nand_address.Block=0;
 800e8ac:	4b29      	ldr	r3, [pc, #164]	@ (800e954 <ATP_operation+0xc24>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	809a      	strh	r2, [r3, #4]
			while (1){

				if(HAL_NAND_Erase_Block(&hnand1, &nand_address) == HAL_OK){
 800e8b2:	4928      	ldr	r1, [pc, #160]	@ (800e954 <ATP_operation+0xc24>)
 800e8b4:	4828      	ldr	r0, [pc, #160]	@ (800e958 <ATP_operation+0xc28>)
 800e8b6:	f004 f895 	bl	80129e4 <HAL_NAND_Erase_Block>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d155      	bne.n	800e96c <ATP_operation+0xc3c>
					HAL_Delay(10);
 800e8c0:	200a      	movs	r0, #10
 800e8c2:	f002 fe25 	bl	8011510 <HAL_Delay>
					nand_address.Block++;
 800e8c6:	4b23      	ldr	r3, [pc, #140]	@ (800e954 <ATP_operation+0xc24>)
 800e8c8:	889b      	ldrh	r3, [r3, #4]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	4b21      	ldr	r3, [pc, #132]	@ (800e954 <ATP_operation+0xc24>)
 800e8d0:	809a      	strh	r2, [r3, #4]

					if (nand_address.Block > MAX_BLOCK)
 800e8d2:	4b20      	ldr	r3, [pc, #128]	@ (800e954 <ATP_operation+0xc24>)
 800e8d4:	889b      	ldrh	r3, [r3, #4]
 800e8d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8da:	d3ea      	bcc.n	800e8b2 <ATP_operation+0xb82>
					{
						// Clear the SRAM location
						memset(&SRAM_clean,0x00,8192);
 800e8dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	481e      	ldr	r0, [pc, #120]	@ (800e95c <ATP_operation+0xc2c>)
 800e8e4:	f00e f9bd 	bl	801cc62 <memset>
						HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr, SRAM_clean, 8192);
 800e8e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e960 <ATP_operation+0xc30>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e8f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e95c <ATP_operation+0xc2c>)
 800e8f4:	4813      	ldr	r0, [pc, #76]	@ (800e944 <ATP_operation+0xc14>)
 800e8f6:	f00a ffc7 	bl	8019888 <HAL_SRAM_Write_8b>
						HAL_Delay(100);
 800e8fa:	2064      	movs	r0, #100	@ 0x64
 800e8fc:	f002 fe08 	bl	8011510 <HAL_Delay>
						nand_cyclic_run = 0;
 800e900:	4b18      	ldr	r3, [pc, #96]	@ (800e964 <ATP_operation+0xc34>)
 800e902:	2200      	movs	r2, #0
 800e904:	701a      	strb	r2, [r3, #0]
						update_NAND_CyclicAddr();
 800e906:	f000 fd95 	bl	800f434 <update_NAND_CyclicAddr>
						Init_NAND_addr();
 800e90a:	f000 fe0d 	bl	800f528 <Init_NAND_addr>
						HAL_UART_Transmit(&huart5, (uint8_t *)NdStatus, strlen("NAND erased successfully!\n"),HAL_MAX_DELAY);
 800e90e:	4b16      	ldr	r3, [pc, #88]	@ (800e968 <ATP_operation+0xc38>)
 800e910:	6819      	ldr	r1, [r3, #0]
 800e912:	f04f 33ff 	mov.w	r3, #4294967295
 800e916:	221a      	movs	r2, #26
 800e918:	4806      	ldr	r0, [pc, #24]	@ (800e934 <ATP_operation+0xc04>)
 800e91a:	f00b f849 	bl	80199b0 <HAL_UART_Transmit>
 800e91e:	e7c8      	b.n	800e8b2 <ATP_operation+0xb82>
 800e920:	2000036e 	.word	0x2000036e
 800e924:	20000340 	.word	0x20000340
 800e928:	20000310 	.word	0x20000310
 800e92c:	0801f148 	.word	0x0801f148
 800e930:	20000384 	.word	0x20000384
 800e934:	20005964 	.word	0x20005964
 800e938:	0801f170 	.word	0x0801f170
 800e93c:	0801f1c4 	.word	0x0801f1c4
 800e940:	6007fff9 	.word	0x6007fff9
 800e944:	20005b20 	.word	0x20005b20
 800e948:	0801f1ec 	.word	0x0801f1ec
 800e94c:	2000036d 	.word	0x2000036d
 800e950:	20000358 	.word	0x20000358
 800e954:	200003e8 	.word	0x200003e8
 800e958:	20005b78 	.word	0x20005b78
 800e95c:	20005bd8 	.word	0x20005bd8
 800e960:	2000008c 	.word	0x2000008c
 800e964:	200055b5 	.word	0x200055b5
 800e968:	2000007c 	.word	0x2000007c

				}
				else
				{

					HAL_UART_Transmit(&huart5, (uint8_t *)NdErStatus, strlen("Error erasing NAND.\n"),HAL_MAX_DELAY);
 800e96c:	4b44      	ldr	r3, [pc, #272]	@ (800ea80 <ATP_operation+0xd50>)
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	f04f 33ff 	mov.w	r3, #4294967295
 800e974:	2214      	movs	r2, #20
 800e976:	4843      	ldr	r0, [pc, #268]	@ (800ea84 <ATP_operation+0xd54>)
 800e978:	f00b f81a 	bl	80199b0 <HAL_UART_Transmit>
				if(HAL_NAND_Erase_Block(&hnand1, &nand_address) == HAL_OK){
 800e97c:	e799      	b.n	800e8b2 <ATP_operation+0xb82>
				}
			}
			break;

		case LoopBack_RS232: //RS-232
			ATP_test_number=0;
 800e97e:	4b42      	ldr	r3, [pc, #264]	@ (800ea88 <ATP_operation+0xd58>)
 800e980:	2200      	movs	r2, #0
 800e982:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart5, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800e984:	4841      	ldr	r0, [pc, #260]	@ (800ea8c <ATP_operation+0xd5c>)
 800e986:	f7fd fc83 	bl	800c290 <strlen>
 800e98a:	4603      	mov	r3, r0
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	461a      	mov	r2, r3
 800e990:	493e      	ldr	r1, [pc, #248]	@ (800ea8c <ATP_operation+0xd5c>)
 800e992:	483c      	ldr	r0, [pc, #240]	@ (800ea84 <ATP_operation+0xd54>)
 800e994:	f00b f8aa 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800e998:	2064      	movs	r0, #100	@ 0x64
 800e99a:	f002 fdb9 	bl	8011510 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800e99e:	2214      	movs	r2, #20
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	483a      	ldr	r0, [pc, #232]	@ (800ea8c <ATP_operation+0xd5c>)
 800e9a4:	f00e f95d 	bl	801cc62 <memset>

			break;
 800e9a8:	e066      	b.n	800ea78 <ATP_operation+0xd48>
		case LoopBack_RS422: //RS-422
			ATP_test_number=0;
 800e9aa:	4b37      	ldr	r3, [pc, #220]	@ (800ea88 <ATP_operation+0xd58>)
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	2101      	movs	r1, #1
 800e9b4:	4836      	ldr	r0, [pc, #216]	@ (800ea90 <ATP_operation+0xd60>)
 800e9b6:	f003 f96f 	bl	8011c98 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	f002 fda8 	bl	8011510 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart8, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800e9c0:	4832      	ldr	r0, [pc, #200]	@ (800ea8c <ATP_operation+0xd5c>)
 800e9c2:	f7fd fc65 	bl	800c290 <strlen>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	492f      	ldr	r1, [pc, #188]	@ (800ea8c <ATP_operation+0xd5c>)
 800e9ce:	4831      	ldr	r0, [pc, #196]	@ (800ea94 <ATP_operation+0xd64>)
 800e9d0:	f00b f88c 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800e9d4:	2064      	movs	r0, #100	@ 0x64
 800e9d6:	f002 fd9b 	bl	8011510 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800e9da:	2214      	movs	r2, #20
 800e9dc:	2100      	movs	r1, #0
 800e9de:	482b      	ldr	r0, [pc, #172]	@ (800ea8c <ATP_operation+0xd5c>)
 800e9e0:	f00e f93f 	bl	801cc62 <memset>
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	4829      	ldr	r0, [pc, #164]	@ (800ea90 <ATP_operation+0xd60>)
 800e9ea:	f003 f955 	bl	8011c98 <HAL_GPIO_WritePin>

			break;
 800e9ee:	e043      	b.n	800ea78 <ATP_operation+0xd48>
		case LoopBack1_RS485: //RS-485
			ATP_test_number=0;
 800e9f0:	4b25      	ldr	r3, [pc, #148]	@ (800ea88 <ATP_operation+0xd58>)
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, 1);
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	2102      	movs	r1, #2
 800e9fa:	4825      	ldr	r0, [pc, #148]	@ (800ea90 <ATP_operation+0xd60>)
 800e9fc:	f003 f94c 	bl	8011c98 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart10, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800ea00:	4822      	ldr	r0, [pc, #136]	@ (800ea8c <ATP_operation+0xd5c>)
 800ea02:	f7fd fc45 	bl	800c290 <strlen>
 800ea06:	4603      	mov	r3, r0
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	491f      	ldr	r1, [pc, #124]	@ (800ea8c <ATP_operation+0xd5c>)
 800ea0e:	4822      	ldr	r0, [pc, #136]	@ (800ea98 <ATP_operation+0xd68>)
 800ea10:	f00b f86c 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800ea14:	2064      	movs	r0, #100	@ 0x64
 800ea16:	f002 fd7b 	bl	8011510 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800ea1a:	2214      	movs	r2, #20
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	481b      	ldr	r0, [pc, #108]	@ (800ea8c <ATP_operation+0xd5c>)
 800ea20:	f00e f91f 	bl	801cc62 <memset>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, 0);
 800ea24:	2200      	movs	r2, #0
 800ea26:	2102      	movs	r1, #2
 800ea28:	4819      	ldr	r0, [pc, #100]	@ (800ea90 <ATP_operation+0xd60>)
 800ea2a:	f003 f935 	bl	8011c98 <HAL_GPIO_WritePin>

			break;
 800ea2e:	e023      	b.n	800ea78 <ATP_operation+0xd48>
		case LoopBack2_RS485: //RS-485
			ATP_test_number=0;
 800ea30:	4b15      	ldr	r3, [pc, #84]	@ (800ea88 <ATP_operation+0xd58>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, 1);
 800ea36:	2201      	movs	r2, #1
 800ea38:	2104      	movs	r1, #4
 800ea3a:	4815      	ldr	r0, [pc, #84]	@ (800ea90 <ATP_operation+0xd60>)
 800ea3c:	f003 f92c 	bl	8011c98 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart4, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800ea40:	4812      	ldr	r0, [pc, #72]	@ (800ea8c <ATP_operation+0xd5c>)
 800ea42:	f7fd fc25 	bl	800c290 <strlen>
 800ea46:	4603      	mov	r3, r0
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	490f      	ldr	r1, [pc, #60]	@ (800ea8c <ATP_operation+0xd5c>)
 800ea4e:	4813      	ldr	r0, [pc, #76]	@ (800ea9c <ATP_operation+0xd6c>)
 800ea50:	f00b f84c 	bl	8019aec <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800ea54:	2064      	movs	r0, #100	@ 0x64
 800ea56:	f002 fd5b 	bl	8011510 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800ea5a:	2214      	movs	r2, #20
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	480b      	ldr	r0, [pc, #44]	@ (800ea8c <ATP_operation+0xd5c>)
 800ea60:	f00e f8ff 	bl	801cc62 <memset>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, 0);
 800ea64:	2200      	movs	r2, #0
 800ea66:	2104      	movs	r1, #4
 800ea68:	4809      	ldr	r0, [pc, #36]	@ (800ea90 <ATP_operation+0xd60>)
 800ea6a:	f003 f915 	bl	8011c98 <HAL_GPIO_WritePin>

			break;
 800ea6e:	e003      	b.n	800ea78 <ATP_operation+0xd48>
		default:
			ATP_test_number=0;
 800ea70:	4b05      	ldr	r3, [pc, #20]	@ (800ea88 <ATP_operation+0xd58>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	701a      	strb	r2, [r3, #0]
			break;
 800ea76:	bf00      	nop
		}

	}

}
 800ea78:	bf00      	nop
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bdb0      	pop	{r4, r5, r7, pc}
 800ea80:	20000080 	.word	0x20000080
 800ea84:	20005964 	.word	0x20005964
 800ea88:	2000036e 	.word	0x2000036e
 800ea8c:	20000370 	.word	0x20000370
 800ea90:	42020000 	.word	0x42020000
 800ea94:	200059f8 	.word	0x200059f8
 800ea98:	20005a8c 	.word	0x20005a8c
 800ea9c:	200058d0 	.word	0x200058d0

0800eaa0 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0


	HAL_GPIO_TogglePin(GPIOE, LED5_Pin);  // Toggle status LED
 800eaa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800eaaa:	483a      	ldr	r0, [pc, #232]	@ (800eb94 <NAND_operation+0xf4>)
 800eaac:	f003 f90c 	bl	8011cc8 <HAL_GPIO_TogglePin>
	// Move to the next block if all pages in the current block have been written
	if (nand_address.Page > 127)
 800eab0:	4b39      	ldr	r3, [pc, #228]	@ (800eb98 <NAND_operation+0xf8>)
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	2b7f      	cmp	r3, #127	@ 0x7f
 800eab6:	d90b      	bls.n	800ead0 <NAND_operation+0x30>
	{
		get_Good_NAND_block();
 800eab8:	f000 f982 	bl	800edc0 <get_Good_NAND_block>
		nand_address.Page = 0;
 800eabc:	4b36      	ldr	r3, [pc, #216]	@ (800eb98 <NAND_operation+0xf8>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	801a      	strh	r2, [r3, #0]
		HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800eac2:	4935      	ldr	r1, [pc, #212]	@ (800eb98 <NAND_operation+0xf8>)
 800eac4:	4835      	ldr	r0, [pc, #212]	@ (800eb9c <NAND_operation+0xfc>)
 800eac6:	f003 ff8d 	bl	80129e4 <HAL_NAND_Erase_Block>
		HAL_Delay(100);
 800eaca:	2064      	movs	r0, #100	@ 0x64
 800eacc:	f002 fd20 	bl	8011510 <HAL_Delay>
	}

	memset(read_data, 0, 8192);
 800ead0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ead4:	2100      	movs	r1, #0
 800ead6:	4832      	ldr	r0, [pc, #200]	@ (800eba0 <NAND_operation+0x100>)
 800ead8:	f00e f8c3 	bl	801cc62 <memset>
	memset(NAND_data, 0, 8192);
 800eadc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eae0:	2100      	movs	r1, #0
 800eae2:	4830      	ldr	r0, [pc, #192]	@ (800eba4 <NAND_operation+0x104>)
 800eae4:	f00e f8bd 	bl	801cc62 <memset>

	// Prepare data for NAND write
	get_NAND_data(NAND_data);
 800eae8:	482e      	ldr	r0, [pc, #184]	@ (800eba4 <NAND_operation+0x104>)
 800eaea:	f000 fc31 	bl	800f350 <get_NAND_data>

//	HAL_UART_Transmit(&huart5, (uint8_t *)&NAND_data, 8192,0xFFFFFF);
//	HAL_Delay(100);
	if(NAND_data[0] == 0xE0)
 800eaee:	4b2d      	ldr	r3, [pc, #180]	@ (800eba4 <NAND_operation+0x104>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	2be0      	cmp	r3, #224	@ 0xe0
 800eaf4:	d105      	bne.n	800eb02 <NAND_operation+0x62>
	{
		nand_address.Block++;
 800eaf6:	4b28      	ldr	r3, [pc, #160]	@ (800eb98 <NAND_operation+0xf8>)
 800eaf8:	889b      	ldrh	r3, [r3, #4]
 800eafa:	3301      	adds	r3, #1
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	4b26      	ldr	r3, [pc, #152]	@ (800eb98 <NAND_operation+0xf8>)
 800eb00:	809a      	strh	r2, [r3, #4]
	}
	// Write data to NAND flash
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 800eb02:	2301      	movs	r3, #1
 800eb04:	4a27      	ldr	r2, [pc, #156]	@ (800eba4 <NAND_operation+0x104>)
 800eb06:	4924      	ldr	r1, [pc, #144]	@ (800eb98 <NAND_operation+0xf8>)
 800eb08:	4824      	ldr	r0, [pc, #144]	@ (800eb9c <NAND_operation+0xfc>)
 800eb0a:	f003 fb37 	bl	801217c <HAL_NAND_Write_Page_8b>

	// Read data back from NAND flash for verification
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 800eb0e:	2301      	movs	r3, #1
 800eb10:	4a23      	ldr	r2, [pc, #140]	@ (800eba0 <NAND_operation+0x100>)
 800eb12:	4921      	ldr	r1, [pc, #132]	@ (800eb98 <NAND_operation+0xf8>)
 800eb14:	4821      	ldr	r0, [pc, #132]	@ (800eb9c <NAND_operation+0xfc>)
 800eb16:	f003 f9d7 	bl	8011ec8 <HAL_NAND_Read_Page_8b>
	if(NAND_data[0] == 0xE0){
 800eb1a:	4b22      	ldr	r3, [pc, #136]	@ (800eba4 <NAND_operation+0x104>)
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	2be0      	cmp	r3, #224	@ 0xe0
 800eb20:	d106      	bne.n	800eb30 <NAND_operation+0x90>
		nand_address.Block--;
 800eb22:	4b1d      	ldr	r3, [pc, #116]	@ (800eb98 <NAND_operation+0xf8>)
 800eb24:	889b      	ldrh	r3, [r3, #4]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	4b1b      	ldr	r3, [pc, #108]	@ (800eb98 <NAND_operation+0xf8>)
 800eb2c:	809a      	strh	r2, [r3, #4]
		return;
 800eb2e:	e02d      	b.n	800eb8c <NAND_operation+0xec>
	}

	//	HAL_UART_Transmit_IT(&huart4, read_data, sizeof(read_data));
	//	HAL_Delay(20);
	// Calculate bit difference between written and read data
	uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 800eb30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eb34:	491a      	ldr	r1, [pc, #104]	@ (800eba0 <NAND_operation+0x100>)
 800eb36:	481b      	ldr	r0, [pc, #108]	@ (800eba4 <NAND_operation+0x104>)
 800eb38:	f000 f8bd 	bl	800ecb6 <calculate_hamming_distance>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	80fb      	strh	r3, [r7, #6]

	// Check if data read matches data written
	if (bit_difference <50) // Data matches
 800eb40:	88fb      	ldrh	r3, [r7, #6]
 800eb42:	2b31      	cmp	r3, #49	@ 0x31
 800eb44:	d813      	bhi.n	800eb6e <NAND_operation+0xce>
	{
		if (nand_address.Page == 0)
 800eb46:	4b14      	ldr	r3, [pc, #80]	@ (800eb98 <NAND_operation+0xf8>)
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d108      	bne.n	800eb60 <NAND_operation+0xc0>
		{
			set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 800eb4e:	4b12      	ldr	r3, [pc, #72]	@ (800eb98 <NAND_operation+0xf8>)
 800eb50:	8818      	ldrh	r0, [r3, #0]
 800eb52:	4b11      	ldr	r3, [pc, #68]	@ (800eb98 <NAND_operation+0xf8>)
 800eb54:	8899      	ldrh	r1, [r3, #4]
 800eb56:	4b10      	ldr	r3, [pc, #64]	@ (800eb98 <NAND_operation+0xf8>)
 800eb58:	885a      	ldrh	r2, [r3, #2]
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	f000 f856 	bl	800ec0c <set_NAND_block_status>
		}
		nand_address.Page++;
 800eb60:	4b0d      	ldr	r3, [pc, #52]	@ (800eb98 <NAND_operation+0xf8>)
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	3301      	adds	r3, #1
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	4b0b      	ldr	r3, [pc, #44]	@ (800eb98 <NAND_operation+0xf8>)
 800eb6a:	801a      	strh	r2, [r3, #0]
 800eb6c:	e007      	b.n	800eb7e <NAND_operation+0xde>

	}
	else // Data mismatch - possible bad block
	{
		bad_block_check_counter = 0 ;
 800eb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eba8 <NAND_operation+0x108>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	801a      	strh	r2, [r3, #0]
		handle_bad_block(); // Call function to handle the bad block scenario
 800eb74:	f000 f8c8 	bl	800ed08 <handle_bad_block>
		bad_block_check_counter = 0;
 800eb78:	4b0b      	ldr	r3, [pc, #44]	@ (800eba8 <NAND_operation+0x108>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	801a      	strh	r2, [r3, #0]
	}

	nand_update = 1;
 800eb7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ebac <NAND_operation+0x10c>)
 800eb80:	2201      	movs	r2, #1
 800eb82:	701a      	strb	r2, [r3, #0]
	update_NAND_addr();
 800eb84:	f000 fc44 	bl	800f410 <update_NAND_addr>
	update_NAND_CyclicAddr();
 800eb88:	f000 fc54 	bl	800f434 <update_NAND_CyclicAddr>

}
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	42021000 	.word	0x42021000
 800eb98:	200003e8 	.word	0x200003e8
 800eb9c:	20005b78 	.word	0x20005b78
 800eba0:	200003f4 	.word	0x200003f4
 800eba4:	200023f4 	.word	0x200023f4
 800eba8:	200055b6 	.word	0x200055b6
 800ebac:	200055b4 	.word	0x200055b4

0800ebb0 <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 4096; i++)
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	80fb      	strh	r3, [r7, #6]
 800ebba:	e016      	b.n	800ebea <get_NAND_block_status+0x3a>
	{
		nand_address.Block = i;
 800ebbc:	4a0f      	ldr	r2, [pc, #60]	@ (800ebfc <get_NAND_block_status+0x4c>)
 800ebbe:	88fb      	ldrh	r3, [r7, #6]
 800ebc0:	8093      	strh	r3, [r2, #4]
		HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	4a0e      	ldr	r2, [pc, #56]	@ (800ec00 <get_NAND_block_status+0x50>)
 800ebc6:	490d      	ldr	r1, [pc, #52]	@ (800ebfc <get_NAND_block_status+0x4c>)
 800ebc8:	480e      	ldr	r0, [pc, #56]	@ (800ec04 <get_NAND_block_status+0x54>)
 800ebca:	f003 fc2f 	bl	801242c <HAL_NAND_Read_SpareArea_8b>
		nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 800ebce:	4b0c      	ldr	r3, [pc, #48]	@ (800ec00 <get_NAND_block_status+0x50>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2bff      	cmp	r3, #255	@ 0xff
 800ebd4:	bf0c      	ite	eq
 800ebd6:	2301      	moveq	r3, #1
 800ebd8:	2300      	movne	r3, #0
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	88fb      	ldrh	r3, [r7, #6]
 800ebde:	4611      	mov	r1, r2
 800ebe0:	4a09      	ldr	r2, [pc, #36]	@ (800ec08 <get_NAND_block_status+0x58>)
 800ebe2:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4096; i++)
 800ebe4:	88fb      	ldrh	r3, [r7, #6]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	80fb      	strh	r3, [r7, #6]
 800ebea:	88fb      	ldrh	r3, [r7, #6]
 800ebec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebf0:	d3e4      	bcc.n	800ebbc <get_NAND_block_status+0xc>
	}
}
 800ebf2:	bf00      	nop
 800ebf4:	bf00      	nop
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	200003e8 	.word	0x200003e8
 800ec00:	200043f4 	.word	0x200043f4
 800ec04:	20005b78 	.word	0x20005b78
 800ec08:	200045b4 	.word	0x200045b4

0800ec0c <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 800ec0c:	b590      	push	{r4, r7, lr}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	4604      	mov	r4, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	4611      	mov	r1, r2
 800ec18:	461a      	mov	r2, r3
 800ec1a:	4623      	mov	r3, r4
 800ec1c:	80fb      	strh	r3, [r7, #6]
 800ec1e:	4603      	mov	r3, r0
 800ec20:	80bb      	strh	r3, [r7, #4]
 800ec22:	460b      	mov	r3, r1
 800ec24:	807b      	strh	r3, [r7, #2]
 800ec26:	4613      	mov	r3, r2
 800ec28:	707b      	strb	r3, [r7, #1]
	NAND_AddressTypeDef nand_address_block = {0, block, plane};
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	813b      	strh	r3, [r7, #8]
 800ec2e:	88bb      	ldrh	r3, [r7, #4]
 800ec30:	817b      	strh	r3, [r7, #10]
 800ec32:	887b      	ldrh	r3, [r7, #2]
 800ec34:	81bb      	strh	r3, [r7, #12]
	HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 800ec36:	f107 0108 	add.w	r1, r7, #8
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	4a0d      	ldr	r2, [pc, #52]	@ (800ec74 <set_NAND_block_status+0x68>)
 800ec3e:	480e      	ldr	r0, [pc, #56]	@ (800ec78 <set_NAND_block_status+0x6c>)
 800ec40:	f003 fbf4 	bl	801242c <HAL_NAND_Read_SpareArea_8b>

	spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 800ec44:	787b      	ldrb	r3, [r7, #1]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d001      	beq.n	800ec4e <set_NAND_block_status+0x42>
 800ec4a:	22ff      	movs	r2, #255	@ 0xff
 800ec4c:	e000      	b.n	800ec50 <set_NAND_block_status+0x44>
 800ec4e:	2200      	movs	r2, #0
 800ec50:	4b08      	ldr	r3, [pc, #32]	@ (800ec74 <set_NAND_block_status+0x68>)
 800ec52:	701a      	strb	r2, [r3, #0]
	nand_block_status[block] = block_state;          // Update block status array
 800ec54:	88bb      	ldrh	r3, [r7, #4]
 800ec56:	4909      	ldr	r1, [pc, #36]	@ (800ec7c <set_NAND_block_status+0x70>)
 800ec58:	787a      	ldrb	r2, [r7, #1]
 800ec5a:	54ca      	strb	r2, [r1, r3]
	HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 800ec5c:	f107 0108 	add.w	r1, r7, #8
 800ec60:	2301      	movs	r3, #1
 800ec62:	4a04      	ldr	r2, [pc, #16]	@ (800ec74 <set_NAND_block_status+0x68>)
 800ec64:	4804      	ldr	r0, [pc, #16]	@ (800ec78 <set_NAND_block_status+0x6c>)
 800ec66:	f003 fd4c 	bl	8012702 <HAL_NAND_Write_SpareArea_8b>
}
 800ec6a:	bf00      	nop
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd90      	pop	{r4, r7, pc}
 800ec72:	bf00      	nop
 800ec74:	200043f4 	.word	0x200043f4
 800ec78:	20005b78 	.word	0x20005b78
 800ec7c:	200045b4 	.word	0x200045b4

0800ec80 <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	60fb      	str	r3, [r7, #12]
	while (byte)
 800ec8e:	e008      	b.n	800eca2 <count_set_bits+0x22>
	{
		count += byte & 1;
 800ec90:	79fb      	ldrb	r3, [r7, #7]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	4413      	add	r3, r2
 800ec9a:	60fb      	str	r3, [r7, #12]
		byte >>= 1;
 800ec9c:	79fb      	ldrb	r3, [r7, #7]
 800ec9e:	085b      	lsrs	r3, r3, #1
 800eca0:	71fb      	strb	r3, [r7, #7]
	while (byte)
 800eca2:	79fb      	ldrb	r3, [r7, #7]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1f3      	bne.n	800ec90 <count_set_bits+0x10>
	}
	return count;
 800eca8:	68fb      	ldr	r3, [r7, #12]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr

0800ecb6 <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b086      	sub	sp, #24
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	60f8      	str	r0, [r7, #12]
 800ecbe:	60b9      	str	r1, [r7, #8]
 800ecc0:	607a      	str	r2, [r7, #4]
	int differing_bits = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	613b      	str	r3, [r7, #16]
 800ecca:	e013      	b.n	800ecf4 <calculate_hamming_distance+0x3e>
	{
		differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	781a      	ldrb	r2, [r3, #0]
 800ecd4:	68b9      	ldr	r1, [r7, #8]
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	440b      	add	r3, r1
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	4053      	eors	r3, r2
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff ffcd 	bl	800ec80 <count_set_bits>
 800ece6:	4602      	mov	r2, r0
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	4413      	add	r3, r2
 800ecec:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	613b      	str	r3, [r7, #16]
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d3e7      	bcc.n	800eccc <calculate_hamming_distance+0x16>
	}
	return differing_bits;
 800ecfc:	697b      	ldr	r3, [r7, #20]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
	...

0800ed08 <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	af00      	add	r7, sp, #0
	nand_address.Page = 0;
 800ed0c:	4b27      	ldr	r3, [pc, #156]	@ (800edac <handle_bad_block+0xa4>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	801a      	strh	r2, [r3, #0]
	HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800ed12:	4926      	ldr	r1, [pc, #152]	@ (800edac <handle_bad_block+0xa4>)
 800ed14:	4826      	ldr	r0, [pc, #152]	@ (800edb0 <handle_bad_block+0xa8>)
 800ed16:	f003 fe65 	bl	80129e4 <HAL_NAND_Erase_Block>
	HAL_Delay(100);
 800ed1a:	2064      	movs	r0, #100	@ 0x64
 800ed1c:	f002 fbf8 	bl	8011510 <HAL_Delay>
	if(bad_block_check_counter++ > 4094 )
 800ed20:	4b24      	ldr	r3, [pc, #144]	@ (800edb4 <handle_bad_block+0xac>)
 800ed22:	881b      	ldrh	r3, [r3, #0]
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	b291      	uxth	r1, r2
 800ed28:	4a22      	ldr	r2, [pc, #136]	@ (800edb4 <handle_bad_block+0xac>)
 800ed2a:	8011      	strh	r1, [r2, #0]
 800ed2c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d838      	bhi.n	800eda6 <handle_bad_block+0x9e>
	{
		return ;
	}
	// Attempt to rewrite data after erasing the block
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 800ed34:	2301      	movs	r3, #1
 800ed36:	4a20      	ldr	r2, [pc, #128]	@ (800edb8 <handle_bad_block+0xb0>)
 800ed38:	491c      	ldr	r1, [pc, #112]	@ (800edac <handle_bad_block+0xa4>)
 800ed3a:	481d      	ldr	r0, [pc, #116]	@ (800edb0 <handle_bad_block+0xa8>)
 800ed3c:	f003 fa1e 	bl	801217c <HAL_NAND_Write_Page_8b>
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 800ed40:	2301      	movs	r3, #1
 800ed42:	4a1e      	ldr	r2, [pc, #120]	@ (800edbc <handle_bad_block+0xb4>)
 800ed44:	4919      	ldr	r1, [pc, #100]	@ (800edac <handle_bad_block+0xa4>)
 800ed46:	481a      	ldr	r0, [pc, #104]	@ (800edb0 <handle_bad_block+0xa8>)
 800ed48:	f003 f8be 	bl	8011ec8 <HAL_NAND_Read_Page_8b>

	// Verify written data again
	if (calculate_hamming_distance(NAND_data, read_data, 8192) < 50) // Data matches
 800ed4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ed50:	491a      	ldr	r1, [pc, #104]	@ (800edbc <handle_bad_block+0xb4>)
 800ed52:	4819      	ldr	r0, [pc, #100]	@ (800edb8 <handle_bad_block+0xb0>)
 800ed54:	f7ff ffaf 	bl	800ecb6 <calculate_hamming_distance>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b31      	cmp	r3, #49	@ 0x31
 800ed5c:	dc0f      	bgt.n	800ed7e <handle_bad_block+0x76>
	{

		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1);
 800ed5e:	4b13      	ldr	r3, [pc, #76]	@ (800edac <handle_bad_block+0xa4>)
 800ed60:	8818      	ldrh	r0, [r3, #0]
 800ed62:	4b12      	ldr	r3, [pc, #72]	@ (800edac <handle_bad_block+0xa4>)
 800ed64:	8899      	ldrh	r1, [r3, #4]
 800ed66:	4b11      	ldr	r3, [pc, #68]	@ (800edac <handle_bad_block+0xa4>)
 800ed68:	885a      	ldrh	r2, [r3, #2]
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	f7ff ff4e 	bl	800ec0c <set_NAND_block_status>

		nand_address.Page++;
 800ed70:	4b0e      	ldr	r3, [pc, #56]	@ (800edac <handle_bad_block+0xa4>)
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	3301      	adds	r3, #1
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	4b0c      	ldr	r3, [pc, #48]	@ (800edac <handle_bad_block+0xa4>)
 800ed7a:	801a      	strh	r2, [r3, #0]
 800ed7c:	e014      	b.n	800eda8 <handle_bad_block+0xa0>
	}
	else // Mark block as bad and attempt to move data
	{
		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	@ (800edac <handle_bad_block+0xa4>)
 800ed80:	8818      	ldrh	r0, [r3, #0]
 800ed82:	4b0a      	ldr	r3, [pc, #40]	@ (800edac <handle_bad_block+0xa4>)
 800ed84:	8899      	ldrh	r1, [r3, #4]
 800ed86:	4b09      	ldr	r3, [pc, #36]	@ (800edac <handle_bad_block+0xa4>)
 800ed88:	885a      	ldrh	r2, [r3, #2]
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f7ff ff3e 	bl	800ec0c <set_NAND_block_status>
		nand_address.Page = 0;
 800ed90:	4b06      	ldr	r3, [pc, #24]	@ (800edac <handle_bad_block+0xa4>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	801a      	strh	r2, [r3, #0]
		get_Good_NAND_block();
 800ed96:	f000 f813 	bl	800edc0 <get_Good_NAND_block>
		handle_bad_block();
 800ed9a:	f7ff ffb5 	bl	800ed08 <handle_bad_block>
		HAL_Delay(10);
 800ed9e:	200a      	movs	r0, #10
 800eda0:	f002 fbb6 	bl	8011510 <HAL_Delay>
 800eda4:	e000      	b.n	800eda8 <handle_bad_block+0xa0>
		return ;
 800eda6:	bf00      	nop
	}
}
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	200003e8 	.word	0x200003e8
 800edb0:	20005b78 	.word	0x20005b78
 800edb4:	200055b6 	.word	0x200055b6
 800edb8:	200023f4 	.word	0x200023f4
 800edbc:	200003f4 	.word	0x200003f4

0800edc0 <get_Good_NAND_block>:

void get_Good_NAND_block()
{
 800edc0:	b480      	push	{r7}
 800edc2:	af00      	add	r7, sp, #0
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 800edc4:	e010      	b.n	800ede8 <get_Good_NAND_block+0x28>
	{
		nand_address.Block++;
 800edc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800edc8:	889b      	ldrh	r3, [r3, #4]
 800edca:	3301      	adds	r3, #1
 800edcc:	b29a      	uxth	r2, r3
 800edce:	4b18      	ldr	r3, [pc, #96]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800edd0:	809a      	strh	r2, [r3, #4]
		// Handle block wrapping around in case of overflow
		if (nand_address.Block > 4095)
 800edd2:	4b17      	ldr	r3, [pc, #92]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800edd4:	889b      	ldrh	r3, [r3, #4]
 800edd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edda:	d305      	bcc.n	800ede8 <get_Good_NAND_block+0x28>
		{
			nand_address.Block = 0;
 800eddc:	4b14      	ldr	r3, [pc, #80]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800edde:	2200      	movs	r2, #0
 800ede0:	809a      	strh	r2, [r3, #4]
			nand_cyclic_run = 1;
 800ede2:	4b14      	ldr	r3, [pc, #80]	@ (800ee34 <get_Good_NAND_block+0x74>)
 800ede4:	2201      	movs	r2, #1
 800ede6:	701a      	strb	r2, [r3, #0]
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 800ede8:	4b11      	ldr	r3, [pc, #68]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800edea:	889b      	ldrh	r3, [r3, #4]
 800edec:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d806      	bhi.n	800ee02 <get_Good_NAND_block+0x42>
 800edf4:	4b0e      	ldr	r3, [pc, #56]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800edf6:	889b      	ldrh	r3, [r3, #4]
 800edf8:	3301      	adds	r3, #1
 800edfa:	4a0f      	ldr	r2, [pc, #60]	@ (800ee38 <get_Good_NAND_block+0x78>)
 800edfc:	5cd3      	ldrb	r3, [r2, r3]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d0e1      	beq.n	800edc6 <get_Good_NAND_block+0x6>
		}
	}
	nand_address.Block++;
 800ee02:	4b0b      	ldr	r3, [pc, #44]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800ee04:	889b      	ldrh	r3, [r3, #4]
 800ee06:	3301      	adds	r3, #1
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	4b09      	ldr	r3, [pc, #36]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800ee0c:	809a      	strh	r2, [r3, #4]
	if (nand_address.Block > 4095)
 800ee0e:	4b08      	ldr	r3, [pc, #32]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800ee10:	889b      	ldrh	r3, [r3, #4]
 800ee12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee16:	d305      	bcc.n	800ee24 <get_Good_NAND_block+0x64>
	{
		nand_address.Block = 0;
 800ee18:	4b05      	ldr	r3, [pc, #20]	@ (800ee30 <get_Good_NAND_block+0x70>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	809a      	strh	r2, [r3, #4]
		nand_cyclic_run = 1;
 800ee1e:	4b05      	ldr	r3, [pc, #20]	@ (800ee34 <get_Good_NAND_block+0x74>)
 800ee20:	2201      	movs	r2, #1
 800ee22:	701a      	strb	r2, [r3, #0]
	}
}
 800ee24:	bf00      	nop
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	200003e8 	.word	0x200003e8
 800ee34:	200055b5 	.word	0x200055b5
 800ee38:	200045b4 	.word	0x200045b4

0800ee3c <data_fetch>:


void data_fetch(uint16_t start_block,uint16_t end_block)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b086      	sub	sp, #24
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	460a      	mov	r2, r1
 800ee46:	80fb      	strh	r3, [r7, #6]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	80bb      	strh	r3, [r7, #4]
	NAND_AddressTypeDef nand_read_address;
	for (int block = start_block; block <= end_block; block++) {
 800ee4c:	88fb      	ldrh	r3, [r7, #6]
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	e035      	b.n	800eebe <data_fetch+0x82>
		for (int page = 0; page <= MAX_PAGE; page++) {
 800ee52:	2300      	movs	r3, #0
 800ee54:	613b      	str	r3, [r7, #16]
 800ee56:	e02c      	b.n	800eeb2 <data_fetch+0x76>
			nand_read_address.Block = block;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	81bb      	strh	r3, [r7, #12]
			nand_read_address.Page = page;
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	813b      	strh	r3, [r7, #8]
			nand_read_address.Plane = 0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	817b      	strh	r3, [r7, #10]

			if (block == nand_address.Block && page >= nand_address.Page) {
 800ee68:	4b1a      	ldr	r3, [pc, #104]	@ (800eed4 <data_fetch+0x98>)
 800ee6a:	889b      	ldrh	r3, [r3, #4]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d105      	bne.n	800ee80 <data_fetch+0x44>
 800ee74:	4b17      	ldr	r3, [pc, #92]	@ (800eed4 <data_fetch+0x98>)
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	da23      	bge.n	800eec8 <data_fetch+0x8c>
				return;
			}

			if(nand_stop_read_CMD[1]=='*')
 800ee80:	4b15      	ldr	r3, [pc, #84]	@ (800eed8 <data_fetch+0x9c>)
 800ee82:	785b      	ldrb	r3, [r3, #1]
 800ee84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee86:	d021      	beq.n	800eecc <data_fetch+0x90>
				return ;

			HAL_NAND_Read_Page_8b(&hnand1, &nand_read_address, read_data, 1);
 800ee88:	f107 0108 	add.w	r1, r7, #8
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	4a13      	ldr	r2, [pc, #76]	@ (800eedc <data_fetch+0xa0>)
 800ee90:	4813      	ldr	r0, [pc, #76]	@ (800eee0 <data_fetch+0xa4>)
 800ee92:	f003 f819 	bl	8011ec8 <HAL_NAND_Read_Page_8b>

//			if(read_data[page]!=0xFF)
			{
				HAL_UART_Transmit(&huart5, read_data, sizeof(read_data),HAL_MAX_DELAY);
 800ee96:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ee9e:	490f      	ldr	r1, [pc, #60]	@ (800eedc <data_fetch+0xa0>)
 800eea0:	4810      	ldr	r0, [pc, #64]	@ (800eee4 <data_fetch+0xa8>)
 800eea2:	f00a fd85 	bl	80199b0 <HAL_UART_Transmit>
				HAL_Delay(1);
 800eea6:	2001      	movs	r0, #1
 800eea8:	f002 fb32 	bl	8011510 <HAL_Delay>
		for (int page = 0; page <= MAX_PAGE; page++) {
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	613b      	str	r3, [r7, #16]
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeb6:	ddcf      	ble.n	800ee58 <data_fetch+0x1c>
	for (int block = start_block; block <= end_block; block++) {
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	3301      	adds	r3, #1
 800eebc:	617b      	str	r3, [r7, #20]
 800eebe:	88bb      	ldrh	r3, [r7, #4]
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	ddc5      	ble.n	800ee52 <data_fetch+0x16>
 800eec6:	e002      	b.n	800eece <data_fetch+0x92>
				return;
 800eec8:	bf00      	nop
 800eeca:	e000      	b.n	800eece <data_fetch+0x92>
				return ;
 800eecc:	bf00      	nop
//			else
//				continue ;

		}
	}
}
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	200003e8 	.word	0x200003e8
 800eed8:	200003f0 	.word	0x200003f0
 800eedc:	200003f4 	.word	0x200003f4
 800eee0:	20005b78 	.word	0x20005b78
 800eee4:	20005964 	.word	0x20005964

0800eee8 <get_NAND_stored_data>:


uint8_t get_NAND_stored_data() {
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0

	int start_block, end_block;

	if(nand_stop_read_CMD[1]=='*'){
 800eeee:	4b24      	ldr	r3, [pc, #144]	@ (800ef80 <get_NAND_stored_data+0x98>)
 800eef0:	785b      	ldrb	r3, [r3, #1]
 800eef2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eef4:	d106      	bne.n	800ef04 <get_NAND_stored_data+0x1c>
		memset(nand_stop_read_CMD,0,3);
 800eef6:	2203      	movs	r2, #3
 800eef8:	2100      	movs	r1, #0
 800eefa:	4821      	ldr	r0, [pc, #132]	@ (800ef80 <get_NAND_stored_data+0x98>)
 800eefc:	f00d feb1 	bl	801cc62 <memset>
		return 0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	e038      	b.n	800ef76 <get_NAND_stored_data+0x8e>
	}

	if (nand_cyclic_run) {
 800ef04:	4b1f      	ldr	r3, [pc, #124]	@ (800ef84 <get_NAND_stored_data+0x9c>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d02d      	beq.n	800ef68 <get_NAND_stored_data+0x80>
		if (nand_address.Block > BLOCK_OFFSET) {
 800ef0c:	4b1e      	ldr	r3, [pc, #120]	@ (800ef88 <get_NAND_stored_data+0xa0>)
 800ef0e:	889b      	ldrh	r3, [r3, #4]
 800ef10:	f240 2276 	movw	r2, #630	@ 0x276
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d910      	bls.n	800ef3a <get_NAND_stored_data+0x52>
			start_block = nand_address.Block - BLOCK_OFFSET;
 800ef18:	4b1b      	ldr	r3, [pc, #108]	@ (800ef88 <get_NAND_stored_data+0xa0>)
 800ef1a:	889b      	ldrh	r3, [r3, #4]
 800ef1c:	f2a3 2376 	subw	r3, r3, #630	@ 0x276
 800ef20:	607b      	str	r3, [r7, #4]
			end_block = nand_address.Block;
 800ef22:	4b19      	ldr	r3, [pc, #100]	@ (800ef88 <get_NAND_stored_data+0xa0>)
 800ef24:	889b      	ldrh	r3, [r3, #4]
 800ef26:	603b      	str	r3, [r7, #0]
			data_fetch(start_block,end_block);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	b292      	uxth	r2, r2
 800ef30:	4611      	mov	r1, r2
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff ff82 	bl	800ee3c <data_fetch>
 800ef38:	e01c      	b.n	800ef74 <get_NAND_stored_data+0x8c>

		} else {
			start_block = MAX_BLOCK - (BLOCK_OFFSET - nand_address.Block);
 800ef3a:	4b13      	ldr	r3, [pc, #76]	@ (800ef88 <get_NAND_stored_data+0xa0>)
 800ef3c:	889b      	ldrh	r3, [r3, #4]
 800ef3e:	f603 5389 	addw	r3, r3, #3465	@ 0xd89
 800ef42:	607b      	str	r3, [r7, #4]
			end_block = MAX_BLOCK;
 800ef44:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800ef48:	603b      	str	r3, [r7, #0]


			data_fetch(start_block,end_block);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	683a      	ldr	r2, [r7, #0]
 800ef50:	b292      	uxth	r2, r2
 800ef52:	4611      	mov	r1, r2
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff ff71 	bl	800ee3c <data_fetch>
			data_fetch(0,nand_address.Block);
 800ef5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef88 <get_NAND_stored_data+0xa0>)
 800ef5c:	889b      	ldrh	r3, [r3, #4]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	2000      	movs	r0, #0
 800ef62:	f7ff ff6b 	bl	800ee3c <data_fetch>
 800ef66:	e005      	b.n	800ef74 <get_NAND_stored_data+0x8c>
		}

	}
	else {

		data_fetch(0,nand_address.Block);
 800ef68:	4b07      	ldr	r3, [pc, #28]	@ (800ef88 <get_NAND_stored_data+0xa0>)
 800ef6a:	889b      	ldrh	r3, [r3, #4]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	2000      	movs	r0, #0
 800ef70:	f7ff ff64 	bl	800ee3c <data_fetch>

	}
	return 0;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	200003f0 	.word	0x200003f0
 800ef84:	200055b5 	.word	0x200055b5
 800ef88:	200003e8 	.word	0x200003e8

0800ef8c <SRAM_operation>:
/*
 * SRAM_operation
 * Reads time data from SRAM, updates temperature readings, and writes formatted
 * data back to SRAM. Checks for time changes and triggers NAND update if necessary.
 */
uint8_t SRAM_operation() {
 800ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef90:	b0d7      	sub	sp, #348	@ 0x15c
 800ef92:	af34      	add	r7, sp, #208	@ 0xd0

	uint8_t time_data[8] = {0};
 800ef94:	2300      	movs	r3, #0
 800ef96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	// Read current second from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data, 7);
 800efa0:	4ba6      	ldr	r3, [pc, #664]	@ (800f23c <SRAM_operation+0x2b0>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4619      	mov	r1, r3
 800efa6:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800efaa:	2307      	movs	r3, #7
 800efac:	48a4      	ldr	r0, [pc, #656]	@ (800f240 <SRAM_operation+0x2b4>)
 800efae:	f00a fc11 	bl	80197d4 <HAL_SRAM_Read_8b>
	//	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)unused_sramAddr, (uint8_t *)&unused, 1);
	// Check if the second has changed
	if (time_data[0] != old_sec) {
 800efb2:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800efb6:	4ba3      	ldr	r3, [pc, #652]	@ (800f244 <SRAM_operation+0x2b8>)
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	f000 81a2 	beq.w	800f304 <SRAM_operation+0x378>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 1); // Toggle LED for visual feedback
 800efc0:	2201      	movs	r2, #1
 800efc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800efc6:	48a0      	ldr	r0, [pc, #640]	@ (800f248 <SRAM_operation+0x2bc>)
 800efc8:	f002 fe66 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800efcc:	2001      	movs	r0, #1
 800efce:	f002 fa9f 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 0);
 800efd2:	2200      	movs	r2, #0
 800efd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800efd8:	489b      	ldr	r0, [pc, #620]	@ (800f248 <SRAM_operation+0x2bc>)
 800efda:	f002 fe5d 	bl	8011c98 <HAL_GPIO_WritePin>

		// Format temperature and time data into the buffer
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 800efde:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800efe2:	2100      	movs	r1, #0
 800efe4:	4899      	ldr	r0, [pc, #612]	@ (800f24c <SRAM_operation+0x2c0>)
 800efe6:	f00d fe3c 	bl	801cc62 <memset>
		SRAMopt.Startbyte=SoF;
 800efea:	4b99      	ldr	r3, [pc, #612]	@ (800f250 <SRAM_operation+0x2c4>)
 800efec:	2240      	movs	r2, #64	@ 0x40
 800efee:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
				"{\"TS1\": \"%.2f#%X\", \"TS2\": \"%.2f#%X\", \"TS3\": \"%.2f#%X\", \"TS4\": \"%.2f#%X\", \"TS5\": \"%.2f#%X\", "
				"\"TS6\": \"%.2f#%X\", \"TS7\": \"%.2f#%X\", \"TS8\": \"%.2f#%X\", \"TS9\": \"%.2f#%X\", \"TS10\": \"%.2f#%X\", "
				"\"TS11\": \"%.2f#%X\", \"TS12\": \"%.2f#%X\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"} \n\r",
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800eff0:	4b98      	ldr	r3, [pc, #608]	@ (800f254 <SRAM_operation+0x2c8>)
 800eff2:	681b      	ldr	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fd fab7 	bl	800c568 <__aeabi_f2d>
 800effa:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800effe:	4b96      	ldr	r3, [pc, #600]	@ (800f258 <SRAM_operation+0x2cc>)
 800f000:	881b      	ldrh	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f002:	677b      	str	r3, [r7, #116]	@ 0x74
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f004:	4b93      	ldr	r3, [pc, #588]	@ (800f254 <SRAM_operation+0x2c8>)
 800f006:	685b      	ldr	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fd faad 	bl	800c568 <__aeabi_f2d>
 800f00e:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f012:	4b91      	ldr	r3, [pc, #580]	@ (800f258 <SRAM_operation+0x2cc>)
 800f014:	885b      	ldrh	r3, [r3, #2]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f016:	673b      	str	r3, [r7, #112]	@ 0x70
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f018:	4b8e      	ldr	r3, [pc, #568]	@ (800f254 <SRAM_operation+0x2c8>)
 800f01a:	689b      	ldr	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fd faa3 	bl	800c568 <__aeabi_f2d>
 800f022:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f026:	4b8c      	ldr	r3, [pc, #560]	@ (800f258 <SRAM_operation+0x2cc>)
 800f028:	889b      	ldrh	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f02a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f02c:	4b89      	ldr	r3, [pc, #548]	@ (800f254 <SRAM_operation+0x2c8>)
 800f02e:	68db      	ldr	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f030:	4618      	mov	r0, r3
 800f032:	f7fd fa99 	bl	800c568 <__aeabi_f2d>
 800f036:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f03a:	4b87      	ldr	r3, [pc, #540]	@ (800f258 <SRAM_operation+0x2cc>)
 800f03c:	88db      	ldrh	r3, [r3, #6]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f03e:	65bb      	str	r3, [r7, #88]	@ 0x58
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f040:	4b84      	ldr	r3, [pc, #528]	@ (800f254 <SRAM_operation+0x2c8>)
 800f042:	691b      	ldr	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f044:	4618      	mov	r0, r3
 800f046:	f7fd fa8f 	bl	800c568 <__aeabi_f2d>
 800f04a:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f04e:	4b82      	ldr	r3, [pc, #520]	@ (800f258 <SRAM_operation+0x2cc>)
 800f050:	891b      	ldrh	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f052:	647b      	str	r3, [r7, #68]	@ 0x44
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f054:	4b7f      	ldr	r3, [pc, #508]	@ (800f254 <SRAM_operation+0x2c8>)
 800f056:	695b      	ldr	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fd fa85 	bl	800c568 <__aeabi_f2d>
 800f05e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f062:	4b7d      	ldr	r3, [pc, #500]	@ (800f258 <SRAM_operation+0x2cc>)
 800f064:	895b      	ldrh	r3, [r3, #10]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f066:	643b      	str	r3, [r7, #64]	@ 0x40
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f068:	4b7a      	ldr	r3, [pc, #488]	@ (800f254 <SRAM_operation+0x2c8>)
 800f06a:	699b      	ldr	r3, [r3, #24]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fd fa7b 	bl	800c568 <__aeabi_f2d>
 800f072:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f076:	4b78      	ldr	r3, [pc, #480]	@ (800f258 <SRAM_operation+0x2cc>)
 800f078:	899b      	ldrh	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f07c:	4b75      	ldr	r3, [pc, #468]	@ (800f254 <SRAM_operation+0x2c8>)
 800f07e:	69db      	ldr	r3, [r3, #28]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f080:	4618      	mov	r0, r3
 800f082:	f7fd fa71 	bl	800c568 <__aeabi_f2d>
 800f086:	e9c7 0108 	strd	r0, r1, [r7, #32]
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f08a:	4b73      	ldr	r3, [pc, #460]	@ (800f258 <SRAM_operation+0x2cc>)
 800f08c:	89db      	ldrh	r3, [r3, #14]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f08e:	62bb      	str	r3, [r7, #40]	@ 0x28
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f090:	4b70      	ldr	r3, [pc, #448]	@ (800f254 <SRAM_operation+0x2c8>)
 800f092:	6a1b      	ldr	r3, [r3, #32]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f094:	4618      	mov	r0, r3
 800f096:	f7fd fa67 	bl	800c568 <__aeabi_f2d>
 800f09a:	e9c7 0106 	strd	r0, r1, [r7, #24]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f09e:	4b6e      	ldr	r3, [pc, #440]	@ (800f258 <SRAM_operation+0x2cc>)
 800f0a0:	8a1b      	ldrh	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0a2:	617b      	str	r3, [r7, #20]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0a4:	4b6b      	ldr	r3, [pc, #428]	@ (800f254 <SRAM_operation+0x2c8>)
 800f0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fd fa5d 	bl	800c568 <__aeabi_f2d>
 800f0ae:	4682      	mov	sl, r0
 800f0b0:	468b      	mov	fp, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0b2:	4b69      	ldr	r3, [pc, #420]	@ (800f258 <SRAM_operation+0x2cc>)
 800f0b4:	8a5b      	ldrh	r3, [r3, #18]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0b6:	613b      	str	r3, [r7, #16]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0b8:	4b66      	ldr	r3, [pc, #408]	@ (800f254 <SRAM_operation+0x2c8>)
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fd fa53 	bl	800c568 <__aeabi_f2d>
 800f0c2:	4680      	mov	r8, r0
 800f0c4:	4689      	mov	r9, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0c6:	4b64      	ldr	r3, [pc, #400]	@ (800f258 <SRAM_operation+0x2cc>)
 800f0c8:	8a9b      	ldrh	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0ca:	60fb      	str	r3, [r7, #12]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0cc:	4b61      	ldr	r3, [pc, #388]	@ (800f254 <SRAM_operation+0x2c8>)
 800f0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fd fa49 	bl	800c568 <__aeabi_f2d>
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	460d      	mov	r5, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0da:	4b5f      	ldr	r3, [pc, #380]	@ (800f258 <SRAM_operation+0x2cc>)
 800f0dc:	8adb      	ldrh	r3, [r3, #22]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0de:	60bb      	str	r3, [r7, #8]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0e4:	607b      	str	r3, [r7, #4]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0e6:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0ea:	461e      	mov	r6, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0ec:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0f0:	4618      	mov	r0, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0f2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0f6:	4619      	mov	r1, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0f8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0fc:	461a      	mov	r2, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0fe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f102:	9332      	str	r3, [sp, #200]	@ 0xc8
 800f104:	9231      	str	r2, [sp, #196]	@ 0xc4
 800f106:	9130      	str	r1, [sp, #192]	@ 0xc0
 800f108:	902f      	str	r0, [sp, #188]	@ 0xbc
 800f10a:	962e      	str	r6, [sp, #184]	@ 0xb8
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	912d      	str	r1, [sp, #180]	@ 0xb4
 800f110:	68b9      	ldr	r1, [r7, #8]
 800f112:	912c      	str	r1, [sp, #176]	@ 0xb0
 800f114:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 800f118:	68f9      	ldr	r1, [r7, #12]
 800f11a:	9128      	str	r1, [sp, #160]	@ 0xa0
 800f11c:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 800f120:	6939      	ldr	r1, [r7, #16]
 800f122:	9124      	str	r1, [sp, #144]	@ 0x90
 800f124:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
 800f128:	6979      	ldr	r1, [r7, #20]
 800f12a:	9120      	str	r1, [sp, #128]	@ 0x80
 800f12c:	ed97 7b06 	vldr	d7, [r7, #24]
 800f130:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 800f134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f136:	911c      	str	r1, [sp, #112]	@ 0x70
 800f138:	ed97 7b08 	vldr	d7, [r7, #32]
 800f13c:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 800f140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f142:	9118      	str	r1, [sp, #96]	@ 0x60
 800f144:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800f148:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 800f14c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f14e:	9114      	str	r1, [sp, #80]	@ 0x50
 800f150:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800f154:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800f158:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f15a:	9110      	str	r1, [sp, #64]	@ 0x40
 800f15c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800f160:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f164:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f166:	910c      	str	r1, [sp, #48]	@ 0x30
 800f168:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800f16c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f170:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f172:	9108      	str	r1, [sp, #32]
 800f174:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800f178:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f17c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800f17e:	9104      	str	r1, [sp, #16]
 800f180:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800f184:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800f190:	4932      	ldr	r1, [pc, #200]	@ (800f25c <SRAM_operation+0x2d0>)
 800f192:	482e      	ldr	r0, [pc, #184]	@ (800f24c <SRAM_operation+0x2c0>)
 800f194:	f00d fd02 	bl	801cb9c <siprintf>
 800f198:	4603      	mov	r3, r0
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	4b2c      	ldr	r3, [pc, #176]	@ (800f250 <SRAM_operation+0x2c4>)
 800f19e:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-3]=EoF;
 800f1a2:	4b2b      	ldr	r3, [pc, #172]	@ (800f250 <SRAM_operation+0x2c4>)
 800f1a4:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f1a8:	3b03      	subs	r3, #3
 800f1aa:	4a29      	ldr	r2, [pc, #164]	@ (800f250 <SRAM_operation+0x2c4>)
 800f1ac:	4413      	add	r3, r2
 800f1ae:	2224      	movs	r2, #36	@ 0x24
 800f1b0:	705a      	strb	r2, [r3, #1]

		// Write the buffer to SRAM
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 800f1b2:	4b2b      	ldr	r3, [pc, #172]	@ (800f260 <SRAM_operation+0x2d4>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	4b25      	ldr	r3, [pc, #148]	@ (800f250 <SRAM_operation+0x2c4>)
 800f1ba:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4a23      	ldr	r2, [pc, #140]	@ (800f250 <SRAM_operation+0x2c4>)
 800f1c2:	481f      	ldr	r0, [pc, #124]	@ (800f240 <SRAM_operation+0x2b4>)
 800f1c4:	f00a fb60 	bl	8019888 <HAL_SRAM_Write_8b>


		// Update SRAM location and size counter
		sram_location += ((SRAMopt.Idxcount)+1);
 800f1c8:	4b21      	ldr	r3, [pc, #132]	@ (800f250 <SRAM_operation+0x2c4>)
 800f1ca:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	4b23      	ldr	r3, [pc, #140]	@ (800f260 <SRAM_operation+0x2d4>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	4a21      	ldr	r2, [pc, #132]	@ (800f260 <SRAM_operation+0x2d4>)
 800f1da:	6013      	str	r3, [r2, #0]
		size_counter  += ((SRAMopt.Idxcount)+1);
 800f1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800f250 <SRAM_operation+0x2c4>)
 800f1de:	f8b3 2162 	ldrh.w	r2, [r3, #354]	@ 0x162
 800f1e2:	4b20      	ldr	r3, [pc, #128]	@ (800f264 <SRAM_operation+0x2d8>)
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f264 <SRAM_operation+0x2d8>)
 800f1f0:	801a      	strh	r2, [r3, #0]

#if 1
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	2102      	movs	r1, #2
 800f1f6:	481c      	ldr	r0, [pc, #112]	@ (800f268 <SRAM_operation+0x2dc>)
 800f1f8:	f002 fd4e 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	2104      	movs	r1, #4
 800f200:	4819      	ldr	r0, [pc, #100]	@ (800f268 <SRAM_operation+0x2dc>)
 800f202:	f002 fd49 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800f206:	2201      	movs	r2, #1
 800f208:	2101      	movs	r1, #1
 800f20a:	4817      	ldr	r0, [pc, #92]	@ (800f268 <SRAM_operation+0x2dc>)
 800f20c:	f002 fd44 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800f210:	2002      	movs	r0, #2
 800f212:	f002 f97d 	bl	8011510 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart8, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f216:	4b0e      	ldr	r3, [pc, #56]	@ (800f250 <SRAM_operation+0x2c4>)
 800f218:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f21c:	3301      	adds	r3, #1
 800f21e:	b29b      	uxth	r3, r3
 800f220:	461a      	mov	r2, r3
 800f222:	490b      	ldr	r1, [pc, #44]	@ (800f250 <SRAM_operation+0x2c4>)
 800f224:	4811      	ldr	r0, [pc, #68]	@ (800f26c <SRAM_operation+0x2e0>)
 800f226:	f00a fc61 	bl	8019aec <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart10,(uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f22a:	4b09      	ldr	r3, [pc, #36]	@ (800f250 <SRAM_operation+0x2c4>)
 800f22c:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f230:	3301      	adds	r3, #1
 800f232:	b29b      	uxth	r3, r3
 800f234:	461a      	mov	r2, r3
 800f236:	4906      	ldr	r1, [pc, #24]	@ (800f250 <SRAM_operation+0x2c4>)
 800f238:	e01a      	b.n	800f270 <SRAM_operation+0x2e4>
 800f23a:	bf00      	nop
 800f23c:	2000009c 	.word	0x2000009c
 800f240:	20005b20 	.word	0x20005b20
 800f244:	200055ba 	.word	0x200055ba
 800f248:	42021000 	.word	0x42021000
 800f24c:	200055bd 	.word	0x200055bd
 800f250:	200055bc 	.word	0x200055bc
 800f254:	20000310 	.word	0x20000310
 800f258:	20000340 	.word	0x20000340
 800f25c:	0801f218 	.word	0x0801f218
 800f260:	20000084 	.word	0x20000084
 800f264:	200055b8 	.word	0x200055b8
 800f268:	42020000 	.word	0x42020000
 800f26c:	200059f8 	.word	0x200059f8
 800f270:	482c      	ldr	r0, [pc, #176]	@ (800f324 <SRAM_operation+0x398>)
 800f272:	f00a fc3b 	bl	8019aec <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f276:	4b2c      	ldr	r3, [pc, #176]	@ (800f328 <SRAM_operation+0x39c>)
 800f278:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f27c:	3301      	adds	r3, #1
 800f27e:	b29b      	uxth	r3, r3
 800f280:	461a      	mov	r2, r3
 800f282:	4929      	ldr	r1, [pc, #164]	@ (800f328 <SRAM_operation+0x39c>)
 800f284:	4829      	ldr	r0, [pc, #164]	@ (800f32c <SRAM_operation+0x3a0>)
 800f286:	f00a fc31 	bl	8019aec <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart5, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f28a:	4b27      	ldr	r3, [pc, #156]	@ (800f328 <SRAM_operation+0x39c>)
 800f28c:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f290:	3301      	adds	r3, #1
 800f292:	b29b      	uxth	r3, r3
 800f294:	461a      	mov	r2, r3
 800f296:	4924      	ldr	r1, [pc, #144]	@ (800f328 <SRAM_operation+0x39c>)
 800f298:	4825      	ldr	r0, [pc, #148]	@ (800f330 <SRAM_operation+0x3a4>)
 800f29a:	f00a fc27 	bl	8019aec <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 800f29e:	2064      	movs	r0, #100	@ 0x64
 800f2a0:	f002 f936 	bl	8011510 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	4822      	ldr	r0, [pc, #136]	@ (800f334 <SRAM_operation+0x3a8>)
 800f2aa:	f002 fcf5 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	2102      	movs	r1, #2
 800f2b2:	4820      	ldr	r0, [pc, #128]	@ (800f334 <SRAM_operation+0x3a8>)
 800f2b4:	f002 fcf0 	bl	8011c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	2104      	movs	r1, #4
 800f2bc:	481d      	ldr	r0, [pc, #116]	@ (800f334 <SRAM_operation+0x3a8>)
 800f2be:	f002 fceb 	bl	8011c98 <HAL_GPIO_WritePin>
#endif

		// Check if the buffer exceeds the NAND page size
		if (size_counter + ((SRAMopt.Idxcount)+1) > NAND_PAGE_SIZE) {
 800f2c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f338 <SRAM_operation+0x3ac>)
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4b17      	ldr	r3, [pc, #92]	@ (800f328 <SRAM_operation+0x39c>)
 800f2ca:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2d6:	dd0f      	ble.n	800f2f8 <SRAM_operation+0x36c>
			sram_location = sram_base_location;
 800f2d8:	4b18      	ldr	r3, [pc, #96]	@ (800f33c <SRAM_operation+0x3b0>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a18      	ldr	r2, [pc, #96]	@ (800f340 <SRAM_operation+0x3b4>)
 800f2de:	6013      	str	r3, [r2, #0]
			memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 800f2e0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	4817      	ldr	r0, [pc, #92]	@ (800f344 <SRAM_operation+0x3b8>)
 800f2e8:	f00d fcbb 	bl	801cc62 <memset>
			SRAMopt.Idxcount=0;
 800f2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f328 <SRAM_operation+0x39c>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
			NAND_operation();
 800f2f4:	f7ff fbd4 	bl	800eaa0 <NAND_operation>
		}

		update_SRAM_Addr();   /*********** update the sram last address at location 0x6000000e ************/
 800f2f8:	f000 f8c2 	bl	800f480 <update_SRAM_Addr>

		// Update old_sec to current second
		old_sec = time_data[0];
 800f2fc:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800f300:	4b11      	ldr	r3, [pc, #68]	@ (800f348 <SRAM_operation+0x3bc>)
 800f302:	701a      	strb	r2, [r3, #0]
	}

	// If time setting flag is set, call time_setter
	if (time_set) {
 800f304:	4b11      	ldr	r3, [pc, #68]	@ (800f34c <SRAM_operation+0x3c0>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <SRAM_operation+0x38a>
		time_set = 0;
 800f30c:	4b0f      	ldr	r3, [pc, #60]	@ (800f34c <SRAM_operation+0x3c0>)
 800f30e:	2200      	movs	r2, #0
 800f310:	701a      	strb	r2, [r3, #0]
		time_setter();
 800f312:	f000 f91b 	bl	800f54c <time_setter>
	}
	return 0;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	378c      	adds	r7, #140	@ 0x8c
 800f31c:	46bd      	mov	sp, r7
 800f31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f322:	bf00      	nop
 800f324:	20005a8c 	.word	0x20005a8c
 800f328:	200055bc 	.word	0x200055bc
 800f32c:	200058d0 	.word	0x200058d0
 800f330:	20005964 	.word	0x20005964
 800f334:	42020000 	.word	0x42020000
 800f338:	200055b8 	.word	0x200055b8
 800f33c:	20000088 	.word	0x20000088
 800f340:	20000084 	.word	0x20000084
 800f344:	200055bd 	.word	0x200055bd
 800f348:	200055ba 	.word	0x200055ba
 800f34c:	20007be2 	.word	0x20007be2

0800f350 <get_NAND_data>:

/*
 * get_NAND_data
 * Reads a full page of data from SRAM into sram_data buffer and clears SRAM.
 */
void get_NAND_data(uint8_t *sram_data) {
 800f350:	b580      	push	{r7, lr}
 800f352:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	f107 0308 	add.w	r3, r7, #8
 800f35e:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 800f362:	f107 0308 	add.w	r3, r7, #8
 800f366:	2200      	movs	r2, #0
 800f368:	601a      	str	r2, [r3, #0]
 800f36a:	3304      	adds	r3, #4
 800f36c:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 800f370:	2100      	movs	r1, #0
 800f372:	4618      	mov	r0, r3
 800f374:	f00d fc75 	bl	801cc62 <memset>
	// Read NAND page from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 800f378:	4b0e      	ldr	r3, [pc, #56]	@ (800f3b4 <get_NAND_data+0x64>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4619      	mov	r1, r3
 800f37e:	f107 0308 	add.w	r3, r7, #8
 800f382:	461a      	mov	r2, r3
 800f384:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f388:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f38c:	480a      	ldr	r0, [pc, #40]	@ (800f3b8 <get_NAND_data+0x68>)
 800f38e:	f00a fa21 	bl	80197d4 <HAL_SRAM_Read_8b>
	// Clear the SRAM location
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 800f392:	4b08      	ldr	r3, [pc, #32]	@ (800f3b4 <get_NAND_data+0x64>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4619      	mov	r1, r3
 800f398:	f107 0208 	add.w	r2, r7, #8
 800f39c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f3a0:	4805      	ldr	r0, [pc, #20]	@ (800f3b8 <get_NAND_data+0x68>)
 800f3a2:	f00a fa71 	bl	8019888 <HAL_SRAM_Write_8b>
}
 800f3a6:	bf00      	nop
 800f3a8:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	20000088 	.word	0x20000088
 800f3b8:	20005b20 	.word	0x20005b20

0800f3bc <get_NAND_address>:

/*
 * get_NAND_address
 * Reads the current NAND address from SRAM.
 */
uint8_t get_NAND_address(void) {
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_Last_Loc, (uint8_t *)&nand_address, sizeof(nand_address));
 800f3c0:	4b10      	ldr	r3, [pc, #64]	@ (800f404 <get_NAND_address+0x48>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	2306      	movs	r3, #6
 800f3c8:	4a0f      	ldr	r2, [pc, #60]	@ (800f408 <get_NAND_address+0x4c>)
 800f3ca:	4810      	ldr	r0, [pc, #64]	@ (800f40c <get_NAND_address+0x50>)
 800f3cc:	f00a fa02 	bl	80197d4 <HAL_SRAM_Read_8b>
//		HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
	if(nand_address.Page > MAX_PAGE)
 800f3d0:	4b0d      	ldr	r3, [pc, #52]	@ (800f408 <get_NAND_address+0x4c>)
 800f3d2:	881b      	ldrh	r3, [r3, #0]
 800f3d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3d6:	d902      	bls.n	800f3de <get_NAND_address+0x22>
		nand_address.Page=0;
 800f3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f408 <get_NAND_address+0x4c>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	801a      	strh	r2, [r3, #0]
	if(nand_address.Block > MAX_BLOCK)
 800f3de:	4b0a      	ldr	r3, [pc, #40]	@ (800f408 <get_NAND_address+0x4c>)
 800f3e0:	889b      	ldrh	r3, [r3, #4]
 800f3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3e6:	d302      	bcc.n	800f3ee <get_NAND_address+0x32>
		nand_address.Block=0;
 800f3e8:	4b07      	ldr	r3, [pc, #28]	@ (800f408 <get_NAND_address+0x4c>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	809a      	strh	r2, [r3, #4]
	if(nand_address.Plane > 2)
 800f3ee:	4b06      	ldr	r3, [pc, #24]	@ (800f408 <get_NAND_address+0x4c>)
 800f3f0:	885b      	ldrh	r3, [r3, #2]
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d902      	bls.n	800f3fc <get_NAND_address+0x40>
		nand_address.Plane=0;
 800f3f6:	4b04      	ldr	r3, [pc, #16]	@ (800f408 <get_NAND_address+0x4c>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	805a      	strh	r2, [r3, #2]

	return 0;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	20000090 	.word	0x20000090
 800f408:	200003e8 	.word	0x200003e8
 800f40c:	20005b20 	.word	0x20005b20

0800f410 <update_NAND_addr>:

/*
 * update_NAND_addr
 * Writes the current NAND address to SRAM.
 */
void update_NAND_addr() {
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_Last_Loc, (uint8_t *)&nand_address, sizeof(nand_address));
 800f414:	4b04      	ldr	r3, [pc, #16]	@ (800f428 <update_NAND_addr+0x18>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	4619      	mov	r1, r3
 800f41a:	2306      	movs	r3, #6
 800f41c:	4a03      	ldr	r2, [pc, #12]	@ (800f42c <update_NAND_addr+0x1c>)
 800f41e:	4804      	ldr	r0, [pc, #16]	@ (800f430 <update_NAND_addr+0x20>)
 800f420:	f00a fa32 	bl	8019888 <HAL_SRAM_Write_8b>
//	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
}
 800f424:	bf00      	nop
 800f426:	bd80      	pop	{r7, pc}
 800f428:	20000090 	.word	0x20000090
 800f42c:	200003e8 	.word	0x200003e8
 800f430:	20005b20 	.word	0x20005b20

0800f434 <update_NAND_CyclicAddr>:

/*
 * update_NAND_CyclicAddr
 * Writes the current nand_cyclic_run to SRAM.
 */
void update_NAND_CyclicAddr() {
 800f434:	b580      	push	{r7, lr}
 800f436:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 800f438:	4b04      	ldr	r3, [pc, #16]	@ (800f44c <update_NAND_CyclicAddr+0x18>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4619      	mov	r1, r3
 800f43e:	2301      	movs	r3, #1
 800f440:	4a03      	ldr	r2, [pc, #12]	@ (800f450 <update_NAND_CyclicAddr+0x1c>)
 800f442:	4804      	ldr	r0, [pc, #16]	@ (800f454 <update_NAND_CyclicAddr+0x20>)
 800f444:	f00a fa20 	bl	8019888 <HAL_SRAM_Write_8b>
}
 800f448:	bf00      	nop
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	20000094 	.word	0x20000094
 800f450:	200055b5 	.word	0x200055b5
 800f454:	20005b20 	.word	0x20005b20

0800f458 <get_NAND_CyclicAddr>:

/*
 * get_NAND_CyclicAddr
 * Reads the last nand_cyclic_run from SRAM.
 */
uint8_t get_NAND_CyclicAddr(void) {
 800f458:	b580      	push	{r7, lr}
 800f45a:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 800f45c:	4b05      	ldr	r3, [pc, #20]	@ (800f474 <get_NAND_CyclicAddr+0x1c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4619      	mov	r1, r3
 800f462:	2301      	movs	r3, #1
 800f464:	4a04      	ldr	r2, [pc, #16]	@ (800f478 <get_NAND_CyclicAddr+0x20>)
 800f466:	4805      	ldr	r0, [pc, #20]	@ (800f47c <get_NAND_CyclicAddr+0x24>)
 800f468:	f00a f9b4 	bl	80197d4 <HAL_SRAM_Read_8b>
	return nand_cyclic_run;
 800f46c:	4b02      	ldr	r3, [pc, #8]	@ (800f478 <get_NAND_CyclicAddr+0x20>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
}
 800f470:	4618      	mov	r0, r3
 800f472:	bd80      	pop	{r7, pc}
 800f474:	20000094 	.word	0x20000094
 800f478:	200055b5 	.word	0x200055b5
 800f47c:	20005b20 	.word	0x20005b20

0800f480 <update_SRAM_Addr>:

/*
 * update_SRAM_Addr
 * Writes the current size_counter to SRAM.
 */
void update_SRAM_Addr() {
 800f480:	b580      	push	{r7, lr}
 800f482:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800f484:	4b09      	ldr	r3, [pc, #36]	@ (800f4ac <update_SRAM_Addr+0x2c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4619      	mov	r1, r3
 800f48a:	2302      	movs	r3, #2
 800f48c:	4a08      	ldr	r2, [pc, #32]	@ (800f4b0 <update_SRAM_Addr+0x30>)
 800f48e:	4809      	ldr	r0, [pc, #36]	@ (800f4b4 <update_SRAM_Addr+0x34>)
 800f490:	f00a f9fa 	bl	8019888 <HAL_SRAM_Write_8b>
	if (nand_update==1)
 800f494:	4b08      	ldr	r3, [pc, #32]	@ (800f4b8 <update_SRAM_Addr+0x38>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d105      	bne.n	800f4a8 <update_SRAM_Addr+0x28>
	{
		nand_update=0;
 800f49c:	4b06      	ldr	r3, [pc, #24]	@ (800f4b8 <update_SRAM_Addr+0x38>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	701a      	strb	r2, [r3, #0]
		size_counter=0;
 800f4a2:	4b03      	ldr	r3, [pc, #12]	@ (800f4b0 <update_SRAM_Addr+0x30>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	801a      	strh	r2, [r3, #0]
	}
}
 800f4a8:	bf00      	nop
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	20000098 	.word	0x20000098
 800f4b0:	200055b8 	.word	0x200055b8
 800f4b4:	20005b20 	.word	0x20005b20
 800f4b8:	200055b4 	.word	0x200055b4

0800f4bc <get_SRAM_Addr>:

/*
 * get_SRAM_Addr
 * Reads the last size_counter from SRAM.
 */
uint32_t get_SRAM_Addr(void) {
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
	//	_sSRAM_LastAddr SRAM_LastAddr;
	uint32_t last_update_location = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	607b      	str	r3, [r7, #4]
	//	memset(&SRAM_LastAddr,0,sizeof(SRAM_LastAddr));
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800f4c6:	4b14      	ldr	r3, [pc, #80]	@ (800f518 <get_SRAM_Addr+0x5c>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	4a13      	ldr	r2, [pc, #76]	@ (800f51c <get_SRAM_Addr+0x60>)
 800f4d0:	4813      	ldr	r0, [pc, #76]	@ (800f520 <get_SRAM_Addr+0x64>)
 800f4d2:	f00a f97f 	bl	80197d4 <HAL_SRAM_Read_8b>

	if(size_counter==0){
 800f4d6:	4b11      	ldr	r3, [pc, #68]	@ (800f51c <get_SRAM_Addr+0x60>)
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d102      	bne.n	800f4e4 <get_SRAM_Addr+0x28>
		return sram_base_location;
 800f4de:	4b11      	ldr	r3, [pc, #68]	@ (800f524 <get_SRAM_Addr+0x68>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	e015      	b.n	800f510 <get_SRAM_Addr+0x54>
	}
	else if((size_counter+251) > NAND_PAGE_SIZE){
 800f4e4:	4b0d      	ldr	r3, [pc, #52]	@ (800f51c <get_SRAM_Addr+0x60>)
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	f641 7205 	movw	r2, #7941	@ 0x1f05
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d907      	bls.n	800f500 <get_SRAM_Addr+0x44>
		size_counter=0;
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f51c <get_SRAM_Addr+0x60>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	801a      	strh	r2, [r3, #0]
		update_SRAM_Addr();
 800f4f6:	f7ff ffc3 	bl	800f480 <update_SRAM_Addr>
		return sram_base_location;
 800f4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f524 <get_SRAM_Addr+0x68>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	e007      	b.n	800f510 <get_SRAM_Addr+0x54>
	}
	else{
		last_update_location = (sram_base_location + size_counter);
 800f500:	4b06      	ldr	r3, [pc, #24]	@ (800f51c <get_SRAM_Addr+0x60>)
 800f502:	881b      	ldrh	r3, [r3, #0]
 800f504:	461a      	mov	r2, r3
 800f506:	4b07      	ldr	r3, [pc, #28]	@ (800f524 <get_SRAM_Addr+0x68>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4413      	add	r3, r2
 800f50c:	607b      	str	r3, [r7, #4]
	}
	//	SRAM_LastAddr.sram_count= size_counter;
	//	SRAM_LastAddr.last_update_location = (sram_base_location + size_counter);

	return last_update_location;
 800f50e:	687b      	ldr	r3, [r7, #4]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	20000098 	.word	0x20000098
 800f51c:	200055b8 	.word	0x200055b8
 800f520:	20005b20 	.word	0x20005b20
 800f524:	20000088 	.word	0x20000088

0800f528 <Init_NAND_addr>:

uint8_t Init_NAND_addr()
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
	nand_address.Page=0;
 800f52c:	4b06      	ldr	r3, [pc, #24]	@ (800f548 <Init_NAND_addr+0x20>)
 800f52e:	2200      	movs	r2, #0
 800f530:	801a      	strh	r2, [r3, #0]
	nand_address.Block=0;
 800f532:	4b05      	ldr	r3, [pc, #20]	@ (800f548 <Init_NAND_addr+0x20>)
 800f534:	2200      	movs	r2, #0
 800f536:	809a      	strh	r2, [r3, #4]
	nand_address.Plane=0;
 800f538:	4b03      	ldr	r3, [pc, #12]	@ (800f548 <Init_NAND_addr+0x20>)
 800f53a:	2200      	movs	r2, #0
 800f53c:	805a      	strh	r2, [r3, #2]
	update_NAND_addr();
 800f53e:	f7ff ff67 	bl	800f410 <update_NAND_addr>
	return 0;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	bd80      	pop	{r7, pc}
 800f548:	200003e8 	.word	0x200003e8

0800f54c <time_setter>:

/*
 * time_setter
 * Sets the time in SRAM using the format "SDD-MM-YYYY HH:MM:SS E".
 */
void time_setter() {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
	uint8_t day, month, year, hours, minutes, seconds;
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	@ D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  $
	// Parse the time string if it follows the expected format
	if (time_str[0] == '@' && time_str[20] == '$' &&
 800f552:	4b7b      	ldr	r3, [pc, #492]	@ (800f740 <time_setter+0x1f4>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	2b40      	cmp	r3, #64	@ 0x40
 800f558:	f040 80ed 	bne.w	800f736 <time_setter+0x1ea>
 800f55c:	4b78      	ldr	r3, [pc, #480]	@ (800f740 <time_setter+0x1f4>)
 800f55e:	7d1b      	ldrb	r3, [r3, #20]
 800f560:	2b24      	cmp	r3, #36	@ 0x24
 800f562:	f040 80e8 	bne.w	800f736 <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 800f566:	4b76      	ldr	r3, [pc, #472]	@ (800f740 <time_setter+0x1f4>)
 800f568:	795b      	ldrb	r3, [r3, #5]
	if (time_str[0] == '@' && time_str[20] == '$' &&
 800f56a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f56c:	f040 80e3 	bne.w	800f736 <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 800f570:	4b73      	ldr	r3, [pc, #460]	@ (800f740 <time_setter+0x1f4>)
 800f572:	7a1b      	ldrb	r3, [r3, #8]
 800f574:	2b2d      	cmp	r3, #45	@ 0x2d
 800f576:	f040 80de 	bne.w	800f736 <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 800f57a:	4b71      	ldr	r3, [pc, #452]	@ (800f740 <time_setter+0x1f4>)
 800f57c:	7adb      	ldrb	r3, [r3, #11]
			time_str[5] == '-' && time_str[8] == '-' &&
 800f57e:	2b20      	cmp	r3, #32
 800f580:	f040 80d9 	bne.w	800f736 <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 800f584:	4b6e      	ldr	r3, [pc, #440]	@ (800f740 <time_setter+0x1f4>)
 800f586:	7b9b      	ldrb	r3, [r3, #14]
 800f588:	2b3a      	cmp	r3, #58	@ 0x3a
 800f58a:	f040 80d4 	bne.w	800f736 <time_setter+0x1ea>
 800f58e:	4b6c      	ldr	r3, [pc, #432]	@ (800f740 <time_setter+0x1f4>)
 800f590:	7c5b      	ldrb	r3, [r3, #17]
 800f592:	2b3a      	cmp	r3, #58	@ 0x3a
 800f594:	f040 80cf 	bne.w	800f736 <time_setter+0x1ea>

		// Extract date and time components from time_str
		month = (time_str[6] - '0') * 16 + (time_str[7] - '0');
 800f598:	4b69      	ldr	r3, [pc, #420]	@ (800f740 <time_setter+0x1f4>)
 800f59a:	799b      	ldrb	r3, [r3, #6]
 800f59c:	3b30      	subs	r3, #48	@ 0x30
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	011b      	lsls	r3, r3, #4
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	4b66      	ldr	r3, [pc, #408]	@ (800f740 <time_setter+0x1f4>)
 800f5a6:	79db      	ldrb	r3, [r3, #7]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	3b30      	subs	r3, #48	@ 0x30
 800f5ae:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - '0') * 16 + (time_str[4] - '0');
 800f5b0:	4b63      	ldr	r3, [pc, #396]	@ (800f740 <time_setter+0x1f4>)
 800f5b2:	78db      	ldrb	r3, [r3, #3]
 800f5b4:	3b30      	subs	r3, #48	@ 0x30
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	011b      	lsls	r3, r3, #4
 800f5ba:	b2da      	uxtb	r2, r3
 800f5bc:	4b60      	ldr	r3, [pc, #384]	@ (800f740 <time_setter+0x1f4>)
 800f5be:	791b      	ldrb	r3, [r3, #4]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	3b30      	subs	r3, #48	@ 0x30
 800f5c6:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - '0') * 16 + (time_str[10] - '0');
 800f5c8:	4b5d      	ldr	r3, [pc, #372]	@ (800f740 <time_setter+0x1f4>)
 800f5ca:	7a5b      	ldrb	r3, [r3, #9]
 800f5cc:	3b30      	subs	r3, #48	@ 0x30
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	011b      	lsls	r3, r3, #4
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	4b5a      	ldr	r3, [pc, #360]	@ (800f740 <time_setter+0x1f4>)
 800f5d6:	7a9b      	ldrb	r3, [r3, #10]
 800f5d8:	4413      	add	r3, r2
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	3b30      	subs	r3, #48	@ 0x30
 800f5de:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - '0') * 16 + (time_str[16] - '0');
 800f5e0:	4b57      	ldr	r3, [pc, #348]	@ (800f740 <time_setter+0x1f4>)
 800f5e2:	7bdb      	ldrb	r3, [r3, #15]
 800f5e4:	3b30      	subs	r3, #48	@ 0x30
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	4b54      	ldr	r3, [pc, #336]	@ (800f740 <time_setter+0x1f4>)
 800f5ee:	7c1b      	ldrb	r3, [r3, #16]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	3b30      	subs	r3, #48	@ 0x30
 800f5f6:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - '0') * 16 + (time_str[13] - '0');
 800f5f8:	4b51      	ldr	r3, [pc, #324]	@ (800f740 <time_setter+0x1f4>)
 800f5fa:	7b1b      	ldrb	r3, [r3, #12]
 800f5fc:	3b30      	subs	r3, #48	@ 0x30
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	011b      	lsls	r3, r3, #4
 800f602:	b2da      	uxtb	r2, r3
 800f604:	4b4e      	ldr	r3, [pc, #312]	@ (800f740 <time_setter+0x1f4>)
 800f606:	7b5b      	ldrb	r3, [r3, #13]
 800f608:	4413      	add	r3, r2
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	3b30      	subs	r3, #48	@ 0x30
 800f60e:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - '0') * 16 + (time_str[19] - '0');
 800f610:	4b4b      	ldr	r3, [pc, #300]	@ (800f740 <time_setter+0x1f4>)
 800f612:	7c9b      	ldrb	r3, [r3, #18]
 800f614:	3b30      	subs	r3, #48	@ 0x30
 800f616:	b2db      	uxtb	r3, r3
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	4b48      	ldr	r3, [pc, #288]	@ (800f740 <time_setter+0x1f4>)
 800f61e:	7cdb      	ldrb	r3, [r3, #19]
 800f620:	4413      	add	r3, r2
 800f622:	b2db      	uxtb	r3, r3
 800f624:	3b30      	subs	r3, #48	@ 0x30
 800f626:	70bb      	strb	r3, [r7, #2]

		// Write time components to SRAM
		sramAddr = 0x60000000 | 0x7FFF8;
 800f628:	4b46      	ldr	r3, [pc, #280]	@ (800f744 <time_setter+0x1f8>)
 800f62a:	4a47      	ldr	r2, [pc, #284]	@ (800f748 <time_setter+0x1fc>)
 800f62c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 800f62e:	4b47      	ldr	r3, [pc, #284]	@ (800f74c <time_setter+0x200>)
 800f630:	2280      	movs	r2, #128	@ 0x80
 800f632:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f634:	4b43      	ldr	r3, [pc, #268]	@ (800f744 <time_setter+0x1f8>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4619      	mov	r1, r3
 800f63a:	4b45      	ldr	r3, [pc, #276]	@ (800f750 <time_setter+0x204>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4a43      	ldr	r2, [pc, #268]	@ (800f74c <time_setter+0x200>)
 800f640:	4844      	ldr	r0, [pc, #272]	@ (800f754 <time_setter+0x208>)
 800f642:	f00a f921 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF9;
 800f646:	4b3f      	ldr	r3, [pc, #252]	@ (800f744 <time_setter+0x1f8>)
 800f648:	4a43      	ldr	r2, [pc, #268]	@ (800f758 <time_setter+0x20c>)
 800f64a:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 800f64c:	4a3f      	ldr	r2, [pc, #252]	@ (800f74c <time_setter+0x200>)
 800f64e:	78bb      	ldrb	r3, [r7, #2]
 800f650:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f652:	4b3c      	ldr	r3, [pc, #240]	@ (800f744 <time_setter+0x1f8>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4619      	mov	r1, r3
 800f658:	4b3d      	ldr	r3, [pc, #244]	@ (800f750 <time_setter+0x204>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a3b      	ldr	r2, [pc, #236]	@ (800f74c <time_setter+0x200>)
 800f65e:	483d      	ldr	r0, [pc, #244]	@ (800f754 <time_setter+0x208>)
 800f660:	f00a f912 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 800f664:	4b37      	ldr	r3, [pc, #220]	@ (800f744 <time_setter+0x1f8>)
 800f666:	4a3d      	ldr	r2, [pc, #244]	@ (800f75c <time_setter+0x210>)
 800f668:	601a      	str	r2, [r3, #0]
		pSrcBuffer = minutes;
 800f66a:	4a38      	ldr	r2, [pc, #224]	@ (800f74c <time_setter+0x200>)
 800f66c:	793b      	ldrb	r3, [r7, #4]
 800f66e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f670:	4b34      	ldr	r3, [pc, #208]	@ (800f744 <time_setter+0x1f8>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4619      	mov	r1, r3
 800f676:	4b36      	ldr	r3, [pc, #216]	@ (800f750 <time_setter+0x204>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a34      	ldr	r2, [pc, #208]	@ (800f74c <time_setter+0x200>)
 800f67c:	4835      	ldr	r0, [pc, #212]	@ (800f754 <time_setter+0x208>)
 800f67e:	f00a f903 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 800f682:	4b30      	ldr	r3, [pc, #192]	@ (800f744 <time_setter+0x1f8>)
 800f684:	4a36      	ldr	r2, [pc, #216]	@ (800f760 <time_setter+0x214>)
 800f686:	601a      	str	r2, [r3, #0]
		pSrcBuffer = hours;
 800f688:	4a30      	ldr	r2, [pc, #192]	@ (800f74c <time_setter+0x200>)
 800f68a:	78fb      	ldrb	r3, [r7, #3]
 800f68c:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f68e:	4b2d      	ldr	r3, [pc, #180]	@ (800f744 <time_setter+0x1f8>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4619      	mov	r1, r3
 800f694:	4b2e      	ldr	r3, [pc, #184]	@ (800f750 <time_setter+0x204>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a2c      	ldr	r2, [pc, #176]	@ (800f74c <time_setter+0x200>)
 800f69a:	482e      	ldr	r0, [pc, #184]	@ (800f754 <time_setter+0x208>)
 800f69c:	f00a f8f4 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 800f6a0:	4b28      	ldr	r3, [pc, #160]	@ (800f744 <time_setter+0x1f8>)
 800f6a2:	4a30      	ldr	r2, [pc, #192]	@ (800f764 <time_setter+0x218>)
 800f6a4:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 800f6a6:	4b29      	ldr	r3, [pc, #164]	@ (800f74c <time_setter+0x200>)
 800f6a8:	2202      	movs	r2, #2
 800f6aa:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6ac:	4b25      	ldr	r3, [pc, #148]	@ (800f744 <time_setter+0x1f8>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4b27      	ldr	r3, [pc, #156]	@ (800f750 <time_setter+0x204>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a25      	ldr	r2, [pc, #148]	@ (800f74c <time_setter+0x200>)
 800f6b8:	4826      	ldr	r0, [pc, #152]	@ (800f754 <time_setter+0x208>)
 800f6ba:	f00a f8e5 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 800f6be:	4b21      	ldr	r3, [pc, #132]	@ (800f744 <time_setter+0x1f8>)
 800f6c0:	4a29      	ldr	r2, [pc, #164]	@ (800f768 <time_setter+0x21c>)
 800f6c2:	601a      	str	r2, [r3, #0]
		pSrcBuffer = day;
 800f6c4:	4a21      	ldr	r2, [pc, #132]	@ (800f74c <time_setter+0x200>)
 800f6c6:	797b      	ldrb	r3, [r7, #5]
 800f6c8:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6ca:	4b1e      	ldr	r3, [pc, #120]	@ (800f744 <time_setter+0x1f8>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	4b1f      	ldr	r3, [pc, #124]	@ (800f750 <time_setter+0x204>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a1d      	ldr	r2, [pc, #116]	@ (800f74c <time_setter+0x200>)
 800f6d6:	481f      	ldr	r0, [pc, #124]	@ (800f754 <time_setter+0x208>)
 800f6d8:	f00a f8d6 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 800f6dc:	4b19      	ldr	r3, [pc, #100]	@ (800f744 <time_setter+0x1f8>)
 800f6de:	4a23      	ldr	r2, [pc, #140]	@ (800f76c <time_setter+0x220>)
 800f6e0:	601a      	str	r2, [r3, #0]
		pSrcBuffer = month;
 800f6e2:	4a1a      	ldr	r2, [pc, #104]	@ (800f74c <time_setter+0x200>)
 800f6e4:	79fb      	ldrb	r3, [r7, #7]
 800f6e6:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6e8:	4b16      	ldr	r3, [pc, #88]	@ (800f744 <time_setter+0x1f8>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4b18      	ldr	r3, [pc, #96]	@ (800f750 <time_setter+0x204>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a16      	ldr	r2, [pc, #88]	@ (800f74c <time_setter+0x200>)
 800f6f4:	4817      	ldr	r0, [pc, #92]	@ (800f754 <time_setter+0x208>)
 800f6f6:	f00a f8c7 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 800f6fa:	4b12      	ldr	r3, [pc, #72]	@ (800f744 <time_setter+0x1f8>)
 800f6fc:	4a1c      	ldr	r2, [pc, #112]	@ (800f770 <time_setter+0x224>)
 800f6fe:	601a      	str	r2, [r3, #0]
		pSrcBuffer = year;
 800f700:	4a12      	ldr	r2, [pc, #72]	@ (800f74c <time_setter+0x200>)
 800f702:	79bb      	ldrb	r3, [r7, #6]
 800f704:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f706:	4b0f      	ldr	r3, [pc, #60]	@ (800f744 <time_setter+0x1f8>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4619      	mov	r1, r3
 800f70c:	4b10      	ldr	r3, [pc, #64]	@ (800f750 <time_setter+0x204>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a0e      	ldr	r2, [pc, #56]	@ (800f74c <time_setter+0x200>)
 800f712:	4810      	ldr	r0, [pc, #64]	@ (800f754 <time_setter+0x208>)
 800f714:	f00a f8b8 	bl	8019888 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF8;
 800f718:	4b0a      	ldr	r3, [pc, #40]	@ (800f744 <time_setter+0x1f8>)
 800f71a:	4a0b      	ldr	r2, [pc, #44]	@ (800f748 <time_setter+0x1fc>)
 800f71c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 800f71e:	4b0b      	ldr	r3, [pc, #44]	@ (800f74c <time_setter+0x200>)
 800f720:	2200      	movs	r2, #0
 800f722:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f724:	4b07      	ldr	r3, [pc, #28]	@ (800f744 <time_setter+0x1f8>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4619      	mov	r1, r3
 800f72a:	4b09      	ldr	r3, [pc, #36]	@ (800f750 <time_setter+0x204>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a07      	ldr	r2, [pc, #28]	@ (800f74c <time_setter+0x200>)
 800f730:	4808      	ldr	r0, [pc, #32]	@ (800f754 <time_setter+0x208>)
 800f732:	f00a f8a9 	bl	8019888 <HAL_SRAM_Write_8b>
	}
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20005bbc 	.word	0x20005bbc
 800f744:	20005bb8 	.word	0x20005bb8
 800f748:	6007fff8 	.word	0x6007fff8
 800f74c:	200000a0 	.word	0x200000a0
 800f750:	200000a4 	.word	0x200000a4
 800f754:	20005b20 	.word	0x20005b20
 800f758:	6007fff9 	.word	0x6007fff9
 800f75c:	6007fffa 	.word	0x6007fffa
 800f760:	6007fffb 	.word	0x6007fffb
 800f764:	6007fffc 	.word	0x6007fffc
 800f768:	6007fffd 	.word	0x6007fffd
 800f76c:	6007fffe 	.word	0x6007fffe
 800f770:	6007ffff 	.word	0x6007ffff

0800f774 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800f77a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800f77c:	f001 fe0a 	bl	8011394 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800f780:	f000 f86c 	bl	800f85c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800f784:	f000 fbee 	bl	800ff64 <MX_GPIO_Init>
	MX_FMC_Init();
 800f788:	f000 fb20 	bl	800fdcc <MX_FMC_Init>
	MX_SPI2_Init();
 800f78c:	f000 f8ea 	bl	800f964 <MX_SPI2_Init>
	MX_SPI3_Init();
 800f790:	f000 f93e 	bl	800fa10 <MX_SPI3_Init>
	MX_SPI5_Init();
 800f794:	f000 f992 	bl	800fabc <MX_SPI5_Init>
	MX_UART4_Init();
 800f798:	f000 f9e6 	bl	800fb68 <MX_UART4_Init>
	MX_UART5_Init();
 800f79c:	f000 fa30 	bl	800fc00 <MX_UART5_Init>
	MX_UART8_Init();
 800f7a0:	f000 fa7a 	bl	800fc98 <MX_UART8_Init>
	MX_USART10_UART_Init();
 800f7a4:	f000 fac6 	bl	800fd34 <MX_USART10_UART_Init>
	MX_ICACHE_Init();
 800f7a8:	f000 f8c8 	bl	800f93c <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */

	UART_InitAllHandlers();
 800f7ac:	f000 fd8a 	bl	80102c4 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 800f7b0:	4b21      	ldr	r3, [pc, #132]	@ (800f838 <main+0xc4>)
 800f7b2:	4a22      	ldr	r2, [pc, #136]	@ (800f83c <main+0xc8>)
 800f7b4:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 800f7b6:	4b22      	ldr	r3, [pc, #136]	@ (800f840 <main+0xcc>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 800f7bc:	4b1e      	ldr	r3, [pc, #120]	@ (800f838 <main+0xc4>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	4a1e      	ldr	r2, [pc, #120]	@ (800f840 <main+0xcc>)
 800f7c6:	481f      	ldr	r0, [pc, #124]	@ (800f844 <main+0xd0>)
 800f7c8:	f00a f85e 	bl	8019888 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 800f7cc:	481e      	ldr	r0, [pc, #120]	@ (800f848 <main+0xd4>)
 800f7ce:	f002 fb41 	bl	8011e54 <HAL_NAND_Reset>
	get_NAND_block_status();
 800f7d2:	f7ff f9ed 	bl	800ebb0 <get_NAND_block_status>
	get_NAND_address();
 800f7d6:	f7ff fdf1 	bl	800f3bc <get_NAND_address>
	get_NAND_CyclicAddr();
 800f7da:	f7ff fe3d 	bl	800f458 <get_NAND_CyclicAddr>
	sram_location = get_SRAM_Addr();
 800f7de:	f7ff fe6d 	bl	800f4bc <get_SRAM_Addr>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4a19      	ldr	r2, [pc, #100]	@ (800f84c <main+0xd8>)
 800f7e6:	6013      	str	r3, [r2, #0]

	uint8_t SRAM_clean[8192] = {0};
 800f7e8:	463b      	mov	r3, r7
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f00d fa33 	bl	801cc62 <memset>
		}
#endif

#if 1

		ADC_operation();
 800f7fc:	f7fd fbc0 	bl	800cf80 <ADC_operation>

//#else
		while((0 == HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin)) && (1 == HAL_GPIO_ReadPin (GPIOD,GPI_2_Pin))) // change condition when GPIOs input add
 800f800:	e00a      	b.n	800f818 <main+0xa4>
		{
			ATP_operation();
 800f802:	f7fe fa95 	bl	800dd30 <ATP_operation>

			if(time_set)
 800f806:	4b12      	ldr	r3, [pc, #72]	@ (800f850 <main+0xdc>)
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d004      	beq.n	800f818 <main+0xa4>
			{
				time_set = 0 ;
 800f80e:	4b10      	ldr	r3, [pc, #64]	@ (800f850 <main+0xdc>)
 800f810:	2200      	movs	r2, #0
 800f812:	701a      	strb	r2, [r3, #0]
				time_setter();
 800f814:	f7ff fe9a 	bl	800f54c <time_setter>
		while((0 == HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin)) && (1 == HAL_GPIO_ReadPin (GPIOD,GPI_2_Pin))) // change condition when GPIOs input add
 800f818:	2110      	movs	r1, #16
 800f81a:	480e      	ldr	r0, [pc, #56]	@ (800f854 <main+0xe0>)
 800f81c:	f002 fa24 	bl	8011c68 <HAL_GPIO_ReadPin>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1ea      	bne.n	800f7fc <main+0x88>
 800f826:	2108      	movs	r1, #8
 800f828:	480b      	ldr	r0, [pc, #44]	@ (800f858 <main+0xe4>)
 800f82a:	f002 fa1d 	bl	8011c68 <HAL_GPIO_ReadPin>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b01      	cmp	r3, #1
 800f832:	d0e6      	beq.n	800f802 <main+0x8e>
		ADC_operation();
 800f834:	e7e2      	b.n	800f7fc <main+0x88>
 800f836:	bf00      	nop
 800f838:	20005bb8 	.word	0x20005bb8
 800f83c:	6007fff8 	.word	0x6007fff8
 800f840:	200000a0 	.word	0x200000a0
 800f844:	20005b20 	.word	0x20005b20
 800f848:	20005b78 	.word	0x20005b78
 800f84c:	20000084 	.word	0x20000084
 800f850:	20007be2 	.word	0x20007be2
 800f854:	42021000 	.word	0x42021000
 800f858:	42020c00 	.word	0x42020c00

0800f85c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b09c      	sub	sp, #112	@ 0x70
 800f860:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f862:	f107 0320 	add.w	r3, r7, #32
 800f866:	2250      	movs	r2, #80	@ 0x50
 800f868:	2100      	movs	r1, #0
 800f86a:	4618      	mov	r0, r3
 800f86c:	f00d f9f9 	bl	801cc62 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f870:	f107 0308 	add.w	r3, r7, #8
 800f874:	2200      	movs	r2, #0
 800f876:	601a      	str	r2, [r3, #0]
 800f878:	605a      	str	r2, [r3, #4]
 800f87a:	609a      	str	r2, [r3, #8]
 800f87c:	60da      	str	r2, [r3, #12]
 800f87e:	611a      	str	r2, [r3, #16]
 800f880:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800f882:	4b2c      	ldr	r3, [pc, #176]	@ (800f934 <SystemClock_Config+0xd8>)
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	4a2b      	ldr	r2, [pc, #172]	@ (800f934 <SystemClock_Config+0xd8>)
 800f888:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800f88c:	6113      	str	r3, [r2, #16]
 800f88e:	4b29      	ldr	r3, [pc, #164]	@ (800f934 <SystemClock_Config+0xd8>)
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f896:	607b      	str	r3, [r7, #4]
 800f898:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800f89a:	bf00      	nop
 800f89c:	4b25      	ldr	r3, [pc, #148]	@ (800f934 <SystemClock_Config+0xd8>)
 800f89e:	695b      	ldr	r3, [r3, #20]
 800f8a0:	f003 0308 	and.w	r3, r3, #8
 800f8a4:	2b08      	cmp	r3, #8
 800f8a6:	d1f9      	bne.n	800f89c <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f8ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800f8b0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f8b2:	2302      	movs	r3, #2
 800f8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800f8ba:	2304      	movs	r3, #4
 800f8bc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 800f8be:	2350      	movs	r3, #80	@ 0x50
 800f8c0:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800f8c2:	2302      	movs	r3, #2
 800f8c4:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800f8ca:	2302      	movs	r3, #2
 800f8cc:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800f8ce:	2308      	movs	r3, #8
 800f8d0:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f8da:	f107 0320 	add.w	r3, r7, #32
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f003 f942 	bl	8012b68 <HAL_RCC_OscConfig>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <SystemClock_Config+0x92>
	{
		Error_Handler();
 800f8ea:	f000 ff5e 	bl	80107aa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f8ee:	231f      	movs	r3, #31
 800f8f0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f8fe:	2300      	movs	r3, #0
 800f900:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800f902:	2300      	movs	r3, #0
 800f904:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f906:	f107 0308 	add.w	r3, r7, #8
 800f90a:	2105      	movs	r1, #5
 800f90c:	4618      	mov	r0, r3
 800f90e:	f003 fd63 	bl	80133d8 <HAL_RCC_ClockConfig>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800f918:	f000 ff47 	bl	80107aa <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800f91c:	4b06      	ldr	r3, [pc, #24]	@ (800f938 <SystemClock_Config+0xdc>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800f924:	4a04      	ldr	r2, [pc, #16]	@ (800f938 <SystemClock_Config+0xdc>)
 800f926:	f043 0320 	orr.w	r3, r3, #32
 800f92a:	6013      	str	r3, [r2, #0]
}
 800f92c:	bf00      	nop
 800f92e:	3770      	adds	r7, #112	@ 0x70
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	44020800 	.word	0x44020800
 800f938:	40022000 	.word	0x40022000

0800f93c <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800f940:	2000      	movs	r0, #0
 800f942:	f002 fa0d 	bl	8011d60 <HAL_ICACHE_ConfigAssociativityMode>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d001      	beq.n	800f950 <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 800f94c:	f000 ff2d 	bl	80107aa <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 800f950:	f002 fa26 	bl	8011da0 <HAL_ICACHE_Enable>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 800f95a:	f000 ff26 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 800f95e:	bf00      	nop
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800f968:	4b27      	ldr	r3, [pc, #156]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f96a:	4a28      	ldr	r2, [pc, #160]	@ (800fa0c <MX_SPI2_Init+0xa8>)
 800f96c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800f96e:	4b26      	ldr	r3, [pc, #152]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f970:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800f974:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f976:	4b24      	ldr	r3, [pc, #144]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f978:	2200      	movs	r2, #0
 800f97a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800f97c:	4b22      	ldr	r3, [pc, #136]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f97e:	2207      	movs	r2, #7
 800f980:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f982:	4b21      	ldr	r3, [pc, #132]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f984:	2200      	movs	r2, #0
 800f986:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f988:	4b1f      	ldr	r3, [pc, #124]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f98a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f98e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800f990:	4b1d      	ldr	r3, [pc, #116]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f992:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800f996:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f998:	4b1b      	ldr	r3, [pc, #108]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f99a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f99e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f9a0:	4b19      	ldr	r3, [pc, #100]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f9a6:	4b18      	ldr	r3, [pc, #96]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9ac:	4b16      	ldr	r3, [pc, #88]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 800f9b2:	4b15      	ldr	r3, [pc, #84]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9b4:	2207      	movs	r2, #7
 800f9b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800f9b8:	4b13      	ldr	r3, [pc, #76]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800f9be:	4b12      	ldr	r3, [pc, #72]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800f9c4:	4b10      	ldr	r3, [pc, #64]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800f9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800f9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800f9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800f9e2:	4b09      	ldr	r3, [pc, #36]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800f9e8:	4b07      	ldr	r3, [pc, #28]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800f9ee:	4b06      	ldr	r3, [pc, #24]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f9f4:	4804      	ldr	r0, [pc, #16]	@ (800fa08 <MX_SPI2_Init+0xa4>)
 800f9f6:	f009 f883 	bl	8018b00 <HAL_SPI_Init>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d001      	beq.n	800fa04 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 800fa00:	f000 fed3 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800fa04:	bf00      	nop
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	20005720 	.word	0x20005720
 800fa0c:	40003800 	.word	0x40003800

0800fa10 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800fa14:	4b27      	ldr	r3, [pc, #156]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa16:	4a28      	ldr	r2, [pc, #160]	@ (800fab8 <MX_SPI3_Init+0xa8>)
 800fa18:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800fa1a:	4b26      	ldr	r3, [pc, #152]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800fa20:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800fa22:	4b24      	ldr	r3, [pc, #144]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa24:	2200      	movs	r2, #0
 800fa26:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800fa28:	4b22      	ldr	r3, [pc, #136]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa2a:	2207      	movs	r2, #7
 800fa2c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fa2e:	4b21      	ldr	r3, [pc, #132]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fa34:	4b1f      	ldr	r3, [pc, #124]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fa3a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800fa3c:	4b1d      	ldr	r3, [pc, #116]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa3e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800fa42:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800fa44:	4b1b      	ldr	r3, [pc, #108]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fa4a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fa4c:	4b19      	ldr	r3, [pc, #100]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800fa52:	4b18      	ldr	r3, [pc, #96]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fa58:	4b16      	ldr	r3, [pc, #88]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 800fa5e:	4b15      	ldr	r3, [pc, #84]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa60:	2207      	movs	r2, #7
 800fa62:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800fa64:	4b13      	ldr	r3, [pc, #76]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800fa6a:	4b12      	ldr	r3, [pc, #72]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800fa70:	4b10      	ldr	r3, [pc, #64]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800fa76:	4b0f      	ldr	r3, [pc, #60]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800fa7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800fa82:	4b0c      	ldr	r3, [pc, #48]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800fa88:	4b0a      	ldr	r3, [pc, #40]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800fa8e:	4b09      	ldr	r3, [pc, #36]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800fa94:	4b07      	ldr	r3, [pc, #28]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800fa9a:	4b06      	ldr	r3, [pc, #24]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800faa0:	4804      	ldr	r0, [pc, #16]	@ (800fab4 <MX_SPI3_Init+0xa4>)
 800faa2:	f009 f82d 	bl	8018b00 <HAL_SPI_Init>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 800faac:	f000 fe7d 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 800fab0:	bf00      	nop
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	200057b0 	.word	0x200057b0
 800fab8:	40003c00 	.word	0x40003c00

0800fabc <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 800fac0:	4b27      	ldr	r3, [pc, #156]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fac2:	4a28      	ldr	r2, [pc, #160]	@ (800fb64 <MX_SPI5_Init+0xa8>)
 800fac4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800fac6:	4b26      	ldr	r3, [pc, #152]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fac8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800facc:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800face:	4b24      	ldr	r3, [pc, #144]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800fad4:	4b22      	ldr	r3, [pc, #136]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fad6:	2207      	movs	r2, #7
 800fad8:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fada:	4b21      	ldr	r3, [pc, #132]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fadc:	2200      	movs	r2, #0
 800fade:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fae0:	4b1f      	ldr	r3, [pc, #124]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fae2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fae6:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 800fae8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800faea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800faee:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800faf0:	4b1b      	ldr	r3, [pc, #108]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800faf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800faf6:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800faf8:	4b19      	ldr	r3, [pc, #100]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fafa:	2200      	movs	r2, #0
 800fafc:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800fafe:	4b18      	ldr	r3, [pc, #96]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb00:	2200      	movs	r2, #0
 800fb02:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fb04:	4b16      	ldr	r3, [pc, #88]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 800fb0a:	4b15      	ldr	r3, [pc, #84]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb0c:	2207      	movs	r2, #7
 800fb0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800fb10:	4b13      	ldr	r3, [pc, #76]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800fb16:	4b12      	ldr	r3, [pc, #72]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800fb1c:	4b10      	ldr	r3, [pc, #64]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800fb22:	4b0f      	ldr	r3, [pc, #60]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800fb28:	4b0d      	ldr	r3, [pc, #52]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800fb2e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb30:	2200      	movs	r2, #0
 800fb32:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800fb34:	4b0a      	ldr	r3, [pc, #40]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800fb3a:	4b09      	ldr	r3, [pc, #36]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800fb40:	4b07      	ldr	r3, [pc, #28]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800fb46:	4b06      	ldr	r3, [pc, #24]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800fb4c:	4804      	ldr	r0, [pc, #16]	@ (800fb60 <MX_SPI5_Init+0xa4>)
 800fb4e:	f008 ffd7 	bl	8018b00 <HAL_SPI_Init>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 800fb58:	f000 fe27 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 800fb5c:	bf00      	nop
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	20005840 	.word	0x20005840
 800fb64:	44002000 	.word	0x44002000

0800fb68 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800fb6c:	4b22      	ldr	r3, [pc, #136]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb6e:	4a23      	ldr	r2, [pc, #140]	@ (800fbfc <MX_UART4_Init+0x94>)
 800fb70:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800fb72:	4b21      	ldr	r3, [pc, #132]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fb78:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800fb7a:	4b1f      	ldr	r3, [pc, #124]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800fb80:	4b1d      	ldr	r3, [pc, #116]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800fb86:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800fb8c:	4b1a      	ldr	r3, [pc, #104]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb8e:	220c      	movs	r2, #12
 800fb90:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fb92:	4b19      	ldr	r3, [pc, #100]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800fb98:	4b17      	ldr	r3, [pc, #92]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fb9e:	4b16      	ldr	r3, [pc, #88]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fba4:	4b14      	ldr	r3, [pc, #80]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fbaa:	4b13      	ldr	r3, [pc, #76]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fbac:	2200      	movs	r2, #0
 800fbae:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800fbb0:	4811      	ldr	r0, [pc, #68]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fbb2:	f009 fead 	bl	8019910 <HAL_UART_Init>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d001      	beq.n	800fbc0 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 800fbbc:	f000 fdf5 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	480d      	ldr	r0, [pc, #52]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fbc4:	f00c f849 	bl	801bc5a <HAL_UARTEx_SetTxFifoThreshold>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d001      	beq.n	800fbd2 <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 800fbce:	f000 fdec 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	4808      	ldr	r0, [pc, #32]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fbd6:	f00c f87e 	bl	801bcd6 <HAL_UARTEx_SetRxFifoThreshold>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d001      	beq.n	800fbe4 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 800fbe0:	f000 fde3 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800fbe4:	4804      	ldr	r0, [pc, #16]	@ (800fbf8 <MX_UART4_Init+0x90>)
 800fbe6:	f00b ffff 	bl	801bbe8 <HAL_UARTEx_DisableFifoMode>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d001      	beq.n	800fbf4 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800fbf0:	f000 fddb 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800fbf4:	bf00      	nop
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	200058d0 	.word	0x200058d0
 800fbfc:	40004c00 	.word	0x40004c00

0800fc00 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 800fc04:	4b22      	ldr	r3, [pc, #136]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc06:	4a23      	ldr	r2, [pc, #140]	@ (800fc94 <MX_UART5_Init+0x94>)
 800fc08:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800fc0a:	4b21      	ldr	r3, [pc, #132]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fc10:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800fc12:	4b1f      	ldr	r3, [pc, #124]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc14:	2200      	movs	r2, #0
 800fc16:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800fc18:	4b1d      	ldr	r3, [pc, #116]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800fc1e:	4b1c      	ldr	r3, [pc, #112]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc20:	2200      	movs	r2, #0
 800fc22:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800fc24:	4b1a      	ldr	r3, [pc, #104]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc26:	220c      	movs	r2, #12
 800fc28:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fc2a:	4b19      	ldr	r3, [pc, #100]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800fc30:	4b17      	ldr	r3, [pc, #92]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fc36:	4b16      	ldr	r3, [pc, #88]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc38:	2200      	movs	r2, #0
 800fc3a:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fc3c:	4b14      	ldr	r3, [pc, #80]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc3e:	2200      	movs	r2, #0
 800fc40:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fc42:	4b13      	ldr	r3, [pc, #76]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc44:	2200      	movs	r2, #0
 800fc46:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800fc48:	4811      	ldr	r0, [pc, #68]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc4a:	f009 fe61 	bl	8019910 <HAL_UART_Init>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 800fc54:	f000 fda9 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fc58:	2100      	movs	r1, #0
 800fc5a:	480d      	ldr	r0, [pc, #52]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc5c:	f00b fffd 	bl	801bc5a <HAL_UARTEx_SetTxFifoThreshold>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 800fc66:	f000 fda0 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	4808      	ldr	r0, [pc, #32]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc6e:	f00c f832 	bl	801bcd6 <HAL_UARTEx_SetRxFifoThreshold>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 800fc78:	f000 fd97 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800fc7c:	4804      	ldr	r0, [pc, #16]	@ (800fc90 <MX_UART5_Init+0x90>)
 800fc7e:	f00b ffb3 	bl	801bbe8 <HAL_UARTEx_DisableFifoMode>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 800fc88:	f000 fd8f 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800fc8c:	bf00      	nop
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	20005964 	.word	0x20005964
 800fc94:	40005000 	.word	0x40005000

0800fc98 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 800fc9c:	4b23      	ldr	r3, [pc, #140]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fc9e:	4a24      	ldr	r2, [pc, #144]	@ (800fd30 <MX_UART8_Init+0x98>)
 800fca0:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 800fca2:	4b22      	ldr	r3, [pc, #136]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fca8:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800fcaa:	4b20      	ldr	r3, [pc, #128]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 800fcb0:	4b1e      	ldr	r3, [pc, #120]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800fcb6:	4b1d      	ldr	r3, [pc, #116]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800fcbc:	4b1b      	ldr	r3, [pc, #108]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcbe:	220c      	movs	r2, #12
 800fcc0:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fcc2:	4b1a      	ldr	r3, [pc, #104]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800fcc8:	4b18      	ldr	r3, [pc, #96]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fcce:	4b17      	ldr	r3, [pc, #92]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fcd4:	4b15      	ldr	r3, [pc, #84]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fcda:	4b14      	ldr	r3, [pc, #80]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcdc:	2200      	movs	r2, #0
 800fcde:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 800fce0:	4812      	ldr	r0, [pc, #72]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fce2:	f009 fe15 	bl	8019910 <HAL_UART_Init>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d001      	beq.n	800fcf0 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 800fcec:	f000 fd5d 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800fcf0:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 800fcf4:	480d      	ldr	r0, [pc, #52]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fcf6:	f00b ffb0 	bl	801bc5a <HAL_UARTEx_SetTxFifoThreshold>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d001      	beq.n	800fd04 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 800fd00:	f000 fd53 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fd04:	2100      	movs	r1, #0
 800fd06:	4809      	ldr	r0, [pc, #36]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fd08:	f00b ffe5 	bl	801bcd6 <HAL_UARTEx_SetRxFifoThreshold>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 800fd12:	f000 fd4a 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800fd16:	4805      	ldr	r0, [pc, #20]	@ (800fd2c <MX_UART8_Init+0x94>)
 800fd18:	f00b ff66 	bl	801bbe8 <HAL_UARTEx_DisableFifoMode>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 800fd22:	f000 fd42 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 800fd26:	bf00      	nop
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	200059f8 	.word	0x200059f8
 800fd30:	40007c00 	.word	0x40007c00

0800fd34 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 800fd38:	4b22      	ldr	r3, [pc, #136]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd3a:	4a23      	ldr	r2, [pc, #140]	@ (800fdc8 <MX_USART10_UART_Init+0x94>)
 800fd3c:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 800fd3e:	4b21      	ldr	r3, [pc, #132]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fd44:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800fd46:	4b1f      	ldr	r3, [pc, #124]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 800fd4c:	4b1d      	ldr	r3, [pc, #116]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 800fd52:	4b1c      	ldr	r3, [pc, #112]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd54:	2200      	movs	r2, #0
 800fd56:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 800fd58:	4b1a      	ldr	r3, [pc, #104]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd5a:	220c      	movs	r2, #12
 800fd5c:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fd5e:	4b19      	ldr	r3, [pc, #100]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800fd64:	4b17      	ldr	r3, [pc, #92]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd66:	2200      	movs	r2, #0
 800fd68:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fd6a:	4b16      	ldr	r3, [pc, #88]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fd70:	4b14      	ldr	r3, [pc, #80]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fd76:	4b13      	ldr	r3, [pc, #76]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 800fd7c:	4811      	ldr	r0, [pc, #68]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd7e:	f009 fdc7 	bl	8019910 <HAL_UART_Init>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d001      	beq.n	800fd8c <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 800fd88:	f000 fd0f 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	480d      	ldr	r0, [pc, #52]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fd90:	f00b ff63 	bl	801bc5a <HAL_UARTEx_SetTxFifoThreshold>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 800fd9a:	f000 fd06 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fd9e:	2100      	movs	r1, #0
 800fda0:	4808      	ldr	r0, [pc, #32]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fda2:	f00b ff98 	bl	801bcd6 <HAL_UARTEx_SetRxFifoThreshold>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 800fdac:	f000 fcfd 	bl	80107aa <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800fdb0:	4804      	ldr	r0, [pc, #16]	@ (800fdc4 <MX_USART10_UART_Init+0x90>)
 800fdb2:	f00b ff19 	bl	801bbe8 <HAL_UARTEx_DisableFifoMode>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d001      	beq.n	800fdc0 <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 800fdbc:	f000 fcf5 	bl	80107aa <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 800fdc0:	bf00      	nop
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20005a8c 	.word	0x20005a8c
 800fdc8:	40006800 	.word	0x40006800

0800fdcc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b090      	sub	sp, #64	@ 0x40
 800fdd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 800fdd2:	f107 0320 	add.w	r3, r7, #32
 800fdd6:	2220      	movs	r2, #32
 800fdd8:	2100      	movs	r1, #0
 800fdda:	4618      	mov	r0, r3
 800fddc:	f00c ff41 	bl	801cc62 <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800fde0:	f107 0310 	add.w	r3, r7, #16
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	605a      	str	r2, [r3, #4]
 800fdea:	609a      	str	r2, [r3, #8]
 800fdec:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800fdee:	463b      	mov	r3, r7
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	605a      	str	r2, [r3, #4]
 800fdf6:	609a      	str	r2, [r3, #8]
 800fdf8:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800fdfa:	4b55      	ldr	r3, [pc, #340]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fdfc:	4a55      	ldr	r2, [pc, #340]	@ (800ff54 <MX_FMC_Init+0x188>)
 800fdfe:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800fe00:	4b53      	ldr	r3, [pc, #332]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe02:	4a55      	ldr	r2, [pc, #340]	@ (800ff58 <MX_FMC_Init+0x18c>)
 800fe04:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800fe06:	4b52      	ldr	r3, [pc, #328]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800fe0c:	4b50      	ldr	r3, [pc, #320]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800fe12:	4b4f      	ldr	r3, [pc, #316]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800fe18:	4b4d      	ldr	r3, [pc, #308]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800fe1e:	4b4c      	ldr	r3, [pc, #304]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800fe24:	4b4a      	ldr	r3, [pc, #296]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800fe2a:	4b49      	ldr	r3, [pc, #292]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800fe30:	4b47      	ldr	r3, [pc, #284]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fe36:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800fe38:	4b45      	ldr	r3, [pc, #276]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800fe3e:	4b44      	ldr	r3, [pc, #272]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800fe44:	4b42      	ldr	r3, [pc, #264]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800fe4a:	4b41      	ldr	r3, [pc, #260]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800fe50:	4b3f      	ldr	r3, [pc, #252]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800fe56:	4b3e      	ldr	r3, [pc, #248]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 800fe5c:	4b3c      	ldr	r3, [pc, #240]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe5e:	2200      	movs	r2, #0
 800fe60:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800fe62:	4b3b      	ldr	r3, [pc, #236]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 800fe68:	4b39      	ldr	r3, [pc, #228]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 800fe70:	230f      	movs	r3, #15
 800fe72:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 800fe74:	230f      	movs	r3, #15
 800fe76:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 800fe78:	23ff      	movs	r3, #255	@ 0xff
 800fe7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 800fe80:	230f      	movs	r3, #15
 800fe82:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 800fe84:	2310      	movs	r3, #16
 800fe86:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 800fe88:	2311      	movs	r3, #17
 800fe8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800fe90:	f107 0320 	add.w	r3, r7, #32
 800fe94:	2200      	movs	r2, #0
 800fe96:	4619      	mov	r1, r3
 800fe98:	482d      	ldr	r0, [pc, #180]	@ (800ff50 <MX_FMC_Init+0x184>)
 800fe9a:	f009 fc4b 	bl	8019734 <HAL_SRAM_Init>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d001      	beq.n	800fea8 <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 800fea4:	f000 fc81 	bl	80107aa <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 800fea8:	4b2c      	ldr	r3, [pc, #176]	@ (800ff5c <MX_FMC_Init+0x190>)
 800feaa:	4a2d      	ldr	r2, [pc, #180]	@ (800ff60 <MX_FMC_Init+0x194>)
 800feac:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 800feae:	4b2b      	ldr	r3, [pc, #172]	@ (800ff5c <MX_FMC_Init+0x190>)
 800feb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800feb4:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 800feb6:	4b29      	ldr	r3, [pc, #164]	@ (800ff5c <MX_FMC_Init+0x190>)
 800feb8:	2202      	movs	r2, #2
 800feba:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 800febc:	4b27      	ldr	r3, [pc, #156]	@ (800ff5c <MX_FMC_Init+0x190>)
 800febe:	2200      	movs	r2, #0
 800fec0:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 800fec2:	4b26      	ldr	r3, [pc, #152]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fec4:	2240      	movs	r2, #64	@ 0x40
 800fec6:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 800fec8:	4b24      	ldr	r3, [pc, #144]	@ (800ff5c <MX_FMC_Init+0x190>)
 800feca:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800fece:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 800fed0:	4b22      	ldr	r3, [pc, #136]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fed2:	220f      	movs	r2, #15
 800fed4:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 800fed6:	4b21      	ldr	r3, [pc, #132]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fed8:	220f      	movs	r2, #15
 800feda:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 800fedc:	4b1f      	ldr	r3, [pc, #124]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fede:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800fee2:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 800fee4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fee6:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800feea:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 800feec:	4b1b      	ldr	r3, [pc, #108]	@ (800ff5c <MX_FMC_Init+0x190>)
 800feee:	2280      	movs	r2, #128	@ 0x80
 800fef0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 800fef2:	4b1a      	ldr	r3, [pc, #104]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fef4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fef8:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 800fefa:	4b18      	ldr	r3, [pc, #96]	@ (800ff5c <MX_FMC_Init+0x190>)
 800fefc:	2202      	movs	r2, #2
 800fefe:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 800ff00:	4b16      	ldr	r3, [pc, #88]	@ (800ff5c <MX_FMC_Init+0x190>)
 800ff02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff06:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = ENABLE;
 800ff08:	4b14      	ldr	r3, [pc, #80]	@ (800ff5c <MX_FMC_Init+0x190>)
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 800ff10:	2313      	movs	r3, #19
 800ff12:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 800ff14:	2313      	movs	r3, #19
 800ff16:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 800ff18:	2306      	movs	r3, #6
 800ff1a:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 800ff20:	2313      	movs	r3, #19
 800ff22:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 800ff24:	2313      	movs	r3, #19
 800ff26:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 800ff28:	230a      	movs	r3, #10
 800ff2a:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 800ff2c:	2309      	movs	r3, #9
 800ff2e:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800ff30:	463a      	mov	r2, r7
 800ff32:	f107 0310 	add.w	r3, r7, #16
 800ff36:	4619      	mov	r1, r3
 800ff38:	4808      	ldr	r0, [pc, #32]	@ (800ff5c <MX_FMC_Init+0x190>)
 800ff3a:	f001 ff41 	bl	8011dc0 <HAL_NAND_Init>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d001      	beq.n	800ff48 <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 800ff44:	f000 fc31 	bl	80107aa <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800ff48:	bf00      	nop
 800ff4a:	3740      	adds	r7, #64	@ 0x40
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	20005b20 	.word	0x20005b20
 800ff54:	47000400 	.word	0x47000400
 800ff58:	47000504 	.word	0x47000504
 800ff5c:	20005b78 	.word	0x20005b78
 800ff60:	47000480 	.word	0x47000480

0800ff64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08e      	sub	sp, #56	@ 0x38
 800ff68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff6e:	2200      	movs	r2, #0
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	605a      	str	r2, [r3, #4]
 800ff74:	609a      	str	r2, [r3, #8]
 800ff76:	60da      	str	r2, [r3, #12]
 800ff78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800ff7a:	4bc2      	ldr	r3, [pc, #776]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ff7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff80:	4ac0      	ldr	r2, [pc, #768]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ff82:	f043 0310 	orr.w	r3, r3, #16
 800ff86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ff8a:	4bbe      	ldr	r3, [pc, #760]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ff8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff90:	f003 0310 	and.w	r3, r3, #16
 800ff94:	623b      	str	r3, [r7, #32]
 800ff96:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800ff98:	4bba      	ldr	r3, [pc, #744]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ff9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff9e:	4ab9      	ldr	r2, [pc, #740]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffa0:	f043 0304 	orr.w	r3, r3, #4
 800ffa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ffa8:	4bb6      	ldr	r3, [pc, #728]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffae:	f003 0304 	and.w	r3, r3, #4
 800ffb2:	61fb      	str	r3, [r7, #28]
 800ffb4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800ffb6:	4bb3      	ldr	r3, [pc, #716]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffbc:	4ab1      	ldr	r2, [pc, #708]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffbe:	f043 0320 	orr.w	r3, r3, #32
 800ffc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ffc6:	4baf      	ldr	r3, [pc, #700]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffcc:	f003 0320 	and.w	r3, r3, #32
 800ffd0:	61bb      	str	r3, [r7, #24]
 800ffd2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800ffd4:	4bab      	ldr	r3, [pc, #684]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffda:	4aaa      	ldr	r2, [pc, #680]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffe0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ffe4:	4ba7      	ldr	r3, [pc, #668]	@ (8010284 <MX_GPIO_Init+0x320>)
 800ffe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800fff2:	4ba4      	ldr	r3, [pc, #656]	@ (8010284 <MX_GPIO_Init+0x320>)
 800fff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fff8:	4aa2      	ldr	r2, [pc, #648]	@ (8010284 <MX_GPIO_Init+0x320>)
 800fffa:	f043 0301 	orr.w	r3, r3, #1
 800fffe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010002:	4ba0      	ldr	r3, [pc, #640]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	613b      	str	r3, [r7, #16]
 801000e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8010010:	4b9c      	ldr	r3, [pc, #624]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010016:	4a9b      	ldr	r2, [pc, #620]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010018:	f043 0302 	orr.w	r3, r3, #2
 801001c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010020:	4b98      	ldr	r3, [pc, #608]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010026:	f003 0302 	and.w	r3, r3, #2
 801002a:	60fb      	str	r3, [r7, #12]
 801002c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801002e:	4b95      	ldr	r3, [pc, #596]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010034:	4a93      	ldr	r2, [pc, #588]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801003a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801003e:	4b91      	ldr	r3, [pc, #580]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010048:	60bb      	str	r3, [r7, #8]
 801004a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801004c:	4b8d      	ldr	r3, [pc, #564]	@ (8010284 <MX_GPIO_Init+0x320>)
 801004e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010052:	4a8c      	ldr	r2, [pc, #560]	@ (8010284 <MX_GPIO_Init+0x320>)
 8010054:	f043 0308 	orr.w	r3, r3, #8
 8010058:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801005c:	4b89      	ldr	r3, [pc, #548]	@ (8010284 <MX_GPIO_Init+0x320>)
 801005e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010062:	f003 0308 	and.w	r3, r3, #8
 8010066:	607b      	str	r3, [r7, #4]
 8010068:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 801006a:	2200      	movs	r2, #0
 801006c:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8010070:	4885      	ldr	r0, [pc, #532]	@ (8010288 <MX_GPIO_Init+0x324>)
 8010072:	f001 fe11 	bl	8011c98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8010076:	2200      	movs	r2, #0
 8010078:	2104      	movs	r1, #4
 801007a:	4884      	ldr	r0, [pc, #528]	@ (801028c <MX_GPIO_Init+0x328>)
 801007c:	f001 fe0c 	bl	8011c98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8010080:	2200      	movs	r2, #0
 8010082:	f241 4167 	movw	r1, #5223	@ 0x1467
 8010086:	4882      	ldr	r0, [pc, #520]	@ (8010290 <MX_GPIO_Init+0x32c>)
 8010088:	f001 fe06 	bl	8011c98 <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 801008c:	2200      	movs	r2, #0
 801008e:	f640 0103 	movw	r1, #2051	@ 0x803
 8010092:	4880      	ldr	r0, [pc, #512]	@ (8010294 <MX_GPIO_Init+0x330>)
 8010094:	f001 fe00 	bl	8011c98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8010098:	2200      	movs	r2, #0
 801009a:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 801009e:	487e      	ldr	r0, [pc, #504]	@ (8010298 <MX_GPIO_Init+0x334>)
 80100a0:	f001 fdfa 	bl	8011c98 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80100a4:	2201      	movs	r2, #1
 80100a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80100aa:	487a      	ldr	r0, [pc, #488]	@ (8010294 <MX_GPIO_Init+0x330>)
 80100ac:	f001 fdf4 	bl	8011c98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 80100b0:	2200      	movs	r2, #0
 80100b2:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80100b6:	4879      	ldr	r0, [pc, #484]	@ (801029c <MX_GPIO_Init+0x338>)
 80100b8:	f001 fdee 	bl	8011c98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 80100bc:	2200      	movs	r2, #0
 80100be:	2110      	movs	r1, #16
 80100c0:	4877      	ldr	r0, [pc, #476]	@ (80102a0 <MX_GPIO_Init+0x33c>)
 80100c2:	f001 fde9 	bl	8011c98 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 80100c6:	2370      	movs	r3, #112	@ 0x70
 80100c8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80100ca:	2300      	movs	r3, #0
 80100cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100ce:	2300      	movs	r3, #0
 80100d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80100d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100d6:	4619      	mov	r1, r3
 80100d8:	486f      	ldr	r0, [pc, #444]	@ (8010298 <MX_GPIO_Init+0x334>)
 80100da:	f001 fc73 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 80100de:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80100e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80100e4:	2301      	movs	r3, #1
 80100e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100e8:	2300      	movs	r3, #0
 80100ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100ec:	2303      	movs	r3, #3
 80100ee:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80100f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100f4:	4619      	mov	r1, r3
 80100f6:	4864      	ldr	r0, [pc, #400]	@ (8010288 <MX_GPIO_Init+0x324>)
 80100f8:	f001 fc64 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 80100fc:	2302      	movs	r3, #2
 80100fe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010100:	4b68      	ldr	r3, [pc, #416]	@ (80102a4 <MX_GPIO_Init+0x340>)
 8010102:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010104:	2300      	movs	r3, #0
 8010106:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 8010108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801010c:	4619      	mov	r1, r3
 801010e:	485f      	ldr	r0, [pc, #380]	@ (801028c <MX_GPIO_Init+0x328>)
 8010110:	f001 fc58 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 8010114:	2304      	movs	r3, #4
 8010116:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010118:	2301      	movs	r3, #1
 801011a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801011c:	2300      	movs	r3, #0
 801011e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010120:	2303      	movs	r3, #3
 8010122:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8010124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010128:	4619      	mov	r1, r3
 801012a:	4858      	ldr	r0, [pc, #352]	@ (801028c <MX_GPIO_Init+0x328>)
 801012c:	f001 fc4a 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8010130:	2367      	movs	r3, #103	@ 0x67
 8010132:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010134:	2301      	movs	r3, #1
 8010136:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010138:	2300      	movs	r3, #0
 801013a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801013c:	2300      	movs	r3, #0
 801013e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010144:	4619      	mov	r1, r3
 8010146:	4852      	ldr	r0, [pc, #328]	@ (8010290 <MX_GPIO_Init+0x32c>)
 8010148:	f001 fc3c 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 801014c:	2303      	movs	r3, #3
 801014e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010150:	2301      	movs	r3, #1
 8010152:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010154:	2300      	movs	r3, #0
 8010156:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010158:	2300      	movs	r3, #0
 801015a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801015c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010160:	4619      	mov	r1, r3
 8010162:	484c      	ldr	r0, [pc, #304]	@ (8010294 <MX_GPIO_Init+0x330>)
 8010164:	f001 fc2e 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 8010168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801016c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801016e:	2301      	movs	r3, #1
 8010170:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010172:	2300      	movs	r3, #0
 8010174:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010176:	2300      	movs	r3, #0
 8010178:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 801017a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801017e:	4619      	mov	r1, r3
 8010180:	4841      	ldr	r0, [pc, #260]	@ (8010288 <MX_GPIO_Init+0x324>)
 8010182:	f001 fc1f 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8010186:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 801018a:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801018c:	2301      	movs	r3, #1
 801018e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010190:	2300      	movs	r3, #0
 8010192:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010194:	2300      	movs	r3, #0
 8010196:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801019c:	4619      	mov	r1, r3
 801019e:	483e      	ldr	r0, [pc, #248]	@ (8010298 <MX_GPIO_Init+0x334>)
 80101a0:	f001 fc10 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 80101a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80101a8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101aa:	2301      	movs	r3, #1
 80101ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101ae:	2300      	movs	r3, #0
 80101b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101b2:	2303      	movs	r3, #3
 80101b4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101ba:	4619      	mov	r1, r3
 80101bc:	4835      	ldr	r0, [pc, #212]	@ (8010294 <MX_GPIO_Init+0x330>)
 80101be:	f001 fc01 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 80101c2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80101c6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101c8:	2301      	movs	r3, #1
 80101ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101cc:	2300      	movs	r3, #0
 80101ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101d0:	2303      	movs	r3, #3
 80101d2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80101d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101d8:	4619      	mov	r1, r3
 80101da:	4830      	ldr	r0, [pc, #192]	@ (801029c <MX_GPIO_Init+0x338>)
 80101dc:	f001 fbf2 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 80101e0:	2380      	movs	r3, #128	@ 0x80
 80101e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80101e4:	4b2f      	ldr	r3, [pc, #188]	@ (80102a4 <MX_GPIO_Init+0x340>)
 80101e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101e8:	2300      	movs	r3, #0
 80101ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 80101ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101f0:	4619      	mov	r1, r3
 80101f2:	482a      	ldr	r0, [pc, #168]	@ (801029c <MX_GPIO_Init+0x338>)
 80101f4:	f001 fbe6 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 80101f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80101fc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101fe:	2301      	movs	r3, #1
 8010200:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010202:	2300      	movs	r3, #0
 8010204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010206:	2303      	movs	r3, #3
 8010208:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801020a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801020e:	4619      	mov	r1, r3
 8010210:	481f      	ldr	r0, [pc, #124]	@ (8010290 <MX_GPIO_Init+0x32c>)
 8010212:	f001 fbd7 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 8010216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801021a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801021c:	4b21      	ldr	r3, [pc, #132]	@ (80102a4 <MX_GPIO_Init+0x340>)
 801021e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010220:	2300      	movs	r3, #0
 8010222:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8010224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010228:	4619      	mov	r1, r3
 801022a:	4819      	ldr	r0, [pc, #100]	@ (8010290 <MX_GPIO_Init+0x32c>)
 801022c:	f001 fbca 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 8010230:	230c      	movs	r3, #12
 8010232:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010234:	2300      	movs	r3, #0
 8010236:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010238:	2300      	movs	r3, #0
 801023a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801023c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010240:	4619      	mov	r1, r3
 8010242:	4817      	ldr	r0, [pc, #92]	@ (80102a0 <MX_GPIO_Init+0x33c>)
 8010244:	f001 fbbe 	bl	80119c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 8010248:	2310      	movs	r3, #16
 801024a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801024c:	2301      	movs	r3, #1
 801024e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010250:	2300      	movs	r3, #0
 8010252:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010254:	2303      	movs	r3, #3
 8010256:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 8010258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801025c:	4619      	mov	r1, r3
 801025e:	4810      	ldr	r0, [pc, #64]	@ (80102a0 <MX_GPIO_Init+0x33c>)
 8010260:	f001 fbb0 	bl	80119c4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8010264:	2200      	movs	r2, #0
 8010266:	2100      	movs	r1, #0
 8010268:	200c      	movs	r0, #12
 801026a:	f001 fa2d 	bl	80116c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 801026e:	200c      	movs	r0, #12
 8010270:	f001 fa44 	bl	80116fc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8010274:	2200      	movs	r2, #0
 8010276:	2100      	movs	r1, #0
 8010278:	2012      	movs	r0, #18
 801027a:	f001 fa25 	bl	80116c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 801027e:	2012      	movs	r0, #18
 8010280:	e012      	b.n	80102a8 <MX_GPIO_Init+0x344>
 8010282:	bf00      	nop
 8010284:	44020c00 	.word	0x44020c00
 8010288:	42021400 	.word	0x42021400
 801028c:	42020800 	.word	0x42020800
 8010290:	42020000 	.word	0x42020000
 8010294:	42020400 	.word	0x42020400
 8010298:	42021000 	.word	0x42021000
 801029c:	42021800 	.word	0x42021800
 80102a0:	42020c00 	.word	0x42020c00
 80102a4:	10210000 	.word	0x10210000
 80102a8:	f001 fa28 	bl	80116fc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 80102ac:	2200      	movs	r2, #0
 80102ae:	2100      	movs	r1, #0
 80102b0:	2016      	movs	r0, #22
 80102b2:	f001 fa09 	bl	80116c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 80102b6:	2016      	movs	r0, #22
 80102b8:	f001 fa20 	bl	80116fc <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80102bc:	bf00      	nop
 80102be:	3738      	adds	r7, #56	@ 0x38
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */


void UART_InitAllHandlers(void) {
 80102c4:	b580      	push	{r7, lr}
 80102c6:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 80102c8:	2201      	movs	r2, #1
 80102ca:	490a      	ldr	r1, [pc, #40]	@ (80102f4 <UART_InitAllHandlers+0x30>)
 80102cc:	480a      	ldr	r0, [pc, #40]	@ (80102f8 <UART_InitAllHandlers+0x34>)
 80102ce:	f009 fcb1 	bl	8019c34 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 80102d2:	2201      	movs	r2, #1
 80102d4:	4909      	ldr	r1, [pc, #36]	@ (80102fc <UART_InitAllHandlers+0x38>)
 80102d6:	480a      	ldr	r0, [pc, #40]	@ (8010300 <UART_InitAllHandlers+0x3c>)
 80102d8:	f009 fcac 	bl	8019c34 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], sizeof(uart3_rx_buffer));
 80102dc:	2201      	movs	r2, #1
 80102de:	4909      	ldr	r1, [pc, #36]	@ (8010304 <UART_InitAllHandlers+0x40>)
 80102e0:	4809      	ldr	r0, [pc, #36]	@ (8010308 <UART_InitAllHandlers+0x44>)
 80102e2:	f009 fca7 	bl	8019c34 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 80102e6:	2201      	movs	r2, #1
 80102e8:	4908      	ldr	r1, [pc, #32]	@ (801030c <UART_InitAllHandlers+0x48>)
 80102ea:	4809      	ldr	r0, [pc, #36]	@ (8010310 <UART_InitAllHandlers+0x4c>)
 80102ec:	f009 fca2 	bl	8019c34 <HAL_UART_Receive_IT>
}
 80102f0:	bf00      	nop
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20007bdc 	.word	0x20007bdc
 80102f8:	200058d0 	.word	0x200058d0
 80102fc:	20007be0 	.word	0x20007be0
 8010300:	200059f8 	.word	0x200059f8
 8010304:	20007be4 	.word	0x20007be4
 8010308:	20005964 	.word	0x20005964
 801030c:	20007be8 	.word	0x20007be8
 8010310:	20005a8c 	.word	0x20005a8c

08010314 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a9b      	ldr	r2, [pc, #620]	@ (8010590 <HAL_UART_RxCpltCallback+0x27c>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d169      	bne.n	80103fa <HAL_UART_RxCpltCallback+0xe6>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 8010326:	2201      	movs	r2, #1
 8010328:	499a      	ldr	r1, [pc, #616]	@ (8010594 <HAL_UART_RxCpltCallback+0x280>)
 801032a:	489b      	ldr	r0, [pc, #620]	@ (8010598 <HAL_UART_RxCpltCallback+0x284>)
 801032c:	f009 fc82 	bl	8019c34 <HAL_UART_Receive_IT>

		if(uart1_rx_buffer[0] == '#')//T
 8010330:	4b98      	ldr	r3, [pc, #608]	@ (8010594 <HAL_UART_RxCpltCallback+0x280>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2b23      	cmp	r3, #35	@ 0x23
 8010336:	d10e      	bne.n	8010356 <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 8010338:	4b98      	ldr	r3, [pc, #608]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	b2d1      	uxtb	r1, r2
 8010340:	4a96      	ldr	r2, [pc, #600]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010342:	7011      	strb	r1, [r2, #0]
 8010344:	461a      	mov	r2, r3
 8010346:	4b93      	ldr	r3, [pc, #588]	@ (8010594 <HAL_UART_RxCpltCallback+0x280>)
 8010348:	7819      	ldrb	r1, [r3, #0]
 801034a:	4b95      	ldr	r3, [pc, #596]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 801034c:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 801034e:	4b95      	ldr	r3, [pc, #596]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 8010350:	2201      	movs	r2, #1
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	e018      	b.n	8010388 <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 8010356:	4b93      	ldr	r3, [pc, #588]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	2b01      	cmp	r3, #1
 801035c:	d114      	bne.n	8010388 <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 801035e:	4b8f      	ldr	r3, [pc, #572]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	b2d1      	uxtb	r1, r2
 8010366:	4a8d      	ldr	r2, [pc, #564]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010368:	7011      	strb	r1, [r2, #0]
 801036a:	461a      	mov	r2, r3
 801036c:	4b89      	ldr	r3, [pc, #548]	@ (8010594 <HAL_UART_RxCpltCallback+0x280>)
 801036e:	7819      	ldrb	r1, [r3, #0]
 8010370:	4b8b      	ldr	r3, [pc, #556]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 8010372:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8010374:	4b89      	ldr	r3, [pc, #548]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	2b0f      	cmp	r3, #15
 801037a:	d905      	bls.n	8010388 <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 801037c:	4b87      	ldr	r3, [pc, #540]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 801037e:	2200      	movs	r2, #0
 8010380:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010382:	4b88      	ldr	r3, [pc, #544]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 8010384:	2200      	movs	r2, #0
 8010386:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer[0] == '$')
 8010388:	4b86      	ldr	r3, [pc, #536]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2b01      	cmp	r3, #1
 801038e:	f040 81e8 	bne.w	8010762 <HAL_UART_RxCpltCallback+0x44e>
 8010392:	4b80      	ldr	r3, [pc, #512]	@ (8010594 <HAL_UART_RxCpltCallback+0x280>)
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	2b24      	cmp	r3, #36	@ 0x24
 8010398:	f040 81e3 	bne.w	8010762 <HAL_UART_RxCpltCallback+0x44e>
		{
			if(command_str[command_str_index-1] == '$')
 801039c:	4b7f      	ldr	r3, [pc, #508]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	3b01      	subs	r3, #1
 80103a2:	4a7f      	ldr	r2, [pc, #508]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 80103a4:	5cd3      	ldrb	r3, [r2, r3]
 80103a6:	2b24      	cmp	r3, #36	@ 0x24
 80103a8:	d109      	bne.n	80103be <HAL_UART_RxCpltCallback+0xaa>
			{
				ATP_test  = 1;
 80103aa:	4b7f      	ldr	r3, [pc, #508]	@ (80105a8 <HAL_UART_RxCpltCallback+0x294>)
 80103ac:	2201      	movs	r2, #1
 80103ae:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80103b0:	4b7a      	ldr	r3, [pc, #488]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80103b6:	4b7b      	ldr	r3, [pc, #492]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
			}
		}
	}

}
 80103bc:	e1d1      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='9'))
 80103be:	4b78      	ldr	r3, [pc, #480]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 80103c0:	785b      	ldrb	r3, [r3, #1]
 80103c2:	2b32      	cmp	r3, #50	@ 0x32
 80103c4:	d10d      	bne.n	80103e2 <HAL_UART_RxCpltCallback+0xce>
 80103c6:	4b76      	ldr	r3, [pc, #472]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 80103c8:	789b      	ldrb	r3, [r3, #2]
 80103ca:	2b39      	cmp	r3, #57	@ 0x39
 80103cc:	d109      	bne.n	80103e2 <HAL_UART_RxCpltCallback+0xce>
				ATP_test  = 1;
 80103ce:	4b76      	ldr	r3, [pc, #472]	@ (80105a8 <HAL_UART_RxCpltCallback+0x294>)
 80103d0:	2201      	movs	r2, #1
 80103d2:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80103d4:	4b71      	ldr	r3, [pc, #452]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80103d6:	2200      	movs	r2, #0
 80103d8:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80103da:	4b72      	ldr	r3, [pc, #456]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80103dc:	2200      	movs	r2, #0
 80103de:	701a      	strb	r2, [r3, #0]
 80103e0:	e1bf      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 80103e2:	4b6e      	ldr	r3, [pc, #440]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80103e8:	4b6e      	ldr	r3, [pc, #440]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80103ee:	220f      	movs	r2, #15
 80103f0:	2100      	movs	r1, #0
 80103f2:	486b      	ldr	r0, [pc, #428]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 80103f4:	f00c fc35 	bl	801cc62 <memset>
}
 80103f8:	e1b3      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == UART5) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4a6b      	ldr	r2, [pc, #428]	@ (80105ac <HAL_UART_RxCpltCallback+0x298>)
 8010400:	4293      	cmp	r3, r2
 8010402:	f040 80e3 	bne.w	80105cc <HAL_UART_RxCpltCallback+0x2b8>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], 1);
 8010406:	2201      	movs	r2, #1
 8010408:	4969      	ldr	r1, [pc, #420]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 801040a:	486a      	ldr	r0, [pc, #424]	@ (80105b4 <HAL_UART_RxCpltCallback+0x2a0>)
 801040c:	f009 fc12 	bl	8019c34 <HAL_UART_Receive_IT>
		if(uart3_rx_buffer[0] == '@' )//S
 8010410:	4b67      	ldr	r3, [pc, #412]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	2b40      	cmp	r3, #64	@ 0x40
 8010416:	d111      	bne.n	801043c <HAL_UART_RxCpltCallback+0x128>
			time_str_length=0;
 8010418:	4b67      	ldr	r3, [pc, #412]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 801041a:	2200      	movs	r2, #0
 801041c:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer[0];
 801041e:	4b66      	ldr	r3, [pc, #408]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	1c5a      	adds	r2, r3, #1
 8010424:	b2d1      	uxtb	r1, r2
 8010426:	4a64      	ldr	r2, [pc, #400]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8010428:	7011      	strb	r1, [r2, #0]
 801042a:	461a      	mov	r2, r3
 801042c:	4b60      	ldr	r3, [pc, #384]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 801042e:	7819      	ldrb	r1, [r3, #0]
 8010430:	4b62      	ldr	r3, [pc, #392]	@ (80105bc <HAL_UART_RxCpltCallback+0x2a8>)
 8010432:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 8010434:	4b62      	ldr	r3, [pc, #392]	@ (80105c0 <HAL_UART_RxCpltCallback+0x2ac>)
 8010436:	2201      	movs	r2, #1
 8010438:	701a      	strb	r2, [r3, #0]
 801043a:	e018      	b.n	801046e <HAL_UART_RxCpltCallback+0x15a>
		else if(time_rcv==1)
 801043c:	4b60      	ldr	r3, [pc, #384]	@ (80105c0 <HAL_UART_RxCpltCallback+0x2ac>)
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d114      	bne.n	801046e <HAL_UART_RxCpltCallback+0x15a>
			time_str[time_str_length++] = uart3_rx_buffer[0];
 8010444:	4b5c      	ldr	r3, [pc, #368]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	1c5a      	adds	r2, r3, #1
 801044a:	b2d1      	uxtb	r1, r2
 801044c:	4a5a      	ldr	r2, [pc, #360]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 801044e:	7011      	strb	r1, [r2, #0]
 8010450:	461a      	mov	r2, r3
 8010452:	4b57      	ldr	r3, [pc, #348]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 8010454:	7819      	ldrb	r1, [r3, #0]
 8010456:	4b59      	ldr	r3, [pc, #356]	@ (80105bc <HAL_UART_RxCpltCallback+0x2a8>)
 8010458:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 801045a:	4b57      	ldr	r3, [pc, #348]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b16      	cmp	r3, #22
 8010460:	d905      	bls.n	801046e <HAL_UART_RxCpltCallback+0x15a>
				time_str_length = 0 ;
 8010462:	4b55      	ldr	r3, [pc, #340]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8010464:	2200      	movs	r2, #0
 8010466:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 8010468:	4b55      	ldr	r3, [pc, #340]	@ (80105c0 <HAL_UART_RxCpltCallback+0x2ac>)
 801046a:	2200      	movs	r2, #0
 801046c:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer[0] == '$' )//E
 801046e:	4b50      	ldr	r3, [pc, #320]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b24      	cmp	r3, #36	@ 0x24
 8010474:	d112      	bne.n	801049c <HAL_UART_RxCpltCallback+0x188>
			if(time_str_length == 21)
 8010476:	4b50      	ldr	r3, [pc, #320]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	2b15      	cmp	r3, #21
 801047c:	d103      	bne.n	8010486 <HAL_UART_RxCpltCallback+0x172>
				time_set = 1;
 801047e:	4b51      	ldr	r3, [pc, #324]	@ (80105c4 <HAL_UART_RxCpltCallback+0x2b0>)
 8010480:	2201      	movs	r2, #1
 8010482:	701a      	strb	r2, [r3, #0]
 8010484:	e00a      	b.n	801049c <HAL_UART_RxCpltCallback+0x188>
				time_rcv = 0 ;
 8010486:	4b4e      	ldr	r3, [pc, #312]	@ (80105c0 <HAL_UART_RxCpltCallback+0x2ac>)
 8010488:	2200      	movs	r2, #0
 801048a:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 801048c:	4b4a      	ldr	r3, [pc, #296]	@ (80105b8 <HAL_UART_RxCpltCallback+0x2a4>)
 801048e:	2200      	movs	r2, #0
 8010490:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 8010492:	2219      	movs	r2, #25
 8010494:	2100      	movs	r1, #0
 8010496:	4849      	ldr	r0, [pc, #292]	@ (80105bc <HAL_UART_RxCpltCallback+0x2a8>)
 8010498:	f00c fbe3 	bl	801cc62 <memset>
		if(uart3_rx_buffer[0] == '#')//T
 801049c:	4b44      	ldr	r3, [pc, #272]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b23      	cmp	r3, #35	@ 0x23
 80104a2:	d10e      	bne.n	80104c2 <HAL_UART_RxCpltCallback+0x1ae>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 80104a4:	4b3d      	ldr	r3, [pc, #244]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	b2d1      	uxtb	r1, r2
 80104ac:	4a3b      	ldr	r2, [pc, #236]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80104ae:	7011      	strb	r1, [r2, #0]
 80104b0:	461a      	mov	r2, r3
 80104b2:	4b3f      	ldr	r3, [pc, #252]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 80104b4:	7819      	ldrb	r1, [r3, #0]
 80104b6:	4b3a      	ldr	r3, [pc, #232]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 80104b8:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80104ba:	4b3a      	ldr	r3, [pc, #232]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80104bc:	2201      	movs	r2, #1
 80104be:	701a      	strb	r2, [r3, #0]
 80104c0:	e018      	b.n	80104f4 <HAL_UART_RxCpltCallback+0x1e0>
		else if(command_rcv==1)
 80104c2:	4b38      	ldr	r3, [pc, #224]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d114      	bne.n	80104f4 <HAL_UART_RxCpltCallback+0x1e0>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 80104ca:	4b34      	ldr	r3, [pc, #208]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	1c5a      	adds	r2, r3, #1
 80104d0:	b2d1      	uxtb	r1, r2
 80104d2:	4a32      	ldr	r2, [pc, #200]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80104d4:	7011      	strb	r1, [r2, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	4b35      	ldr	r3, [pc, #212]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 80104da:	7819      	ldrb	r1, [r3, #0]
 80104dc:	4b30      	ldr	r3, [pc, #192]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 80104de:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80104e0:	4b2e      	ldr	r3, [pc, #184]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	2b0f      	cmp	r3, #15
 80104e6:	d905      	bls.n	80104f4 <HAL_UART_RxCpltCallback+0x1e0>
				command_str_index = 0 ;
 80104e8:	4b2c      	ldr	r3, [pc, #176]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80104ee:	4b2d      	ldr	r3, [pc, #180]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer[0] == '$')
 80104f4:	4b2b      	ldr	r3, [pc, #172]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	f040 8132 	bne.w	8010762 <HAL_UART_RxCpltCallback+0x44e>
 80104fe:	4b2c      	ldr	r3, [pc, #176]	@ (80105b0 <HAL_UART_RxCpltCallback+0x29c>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b24      	cmp	r3, #36	@ 0x24
 8010504:	f040 812d 	bne.w	8010762 <HAL_UART_RxCpltCallback+0x44e>
			if(command_str_index < 4)
 8010508:	4b24      	ldr	r3, [pc, #144]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b03      	cmp	r3, #3
 801050e:	d812      	bhi.n	8010536 <HAL_UART_RxCpltCallback+0x222>
				memcpy(nand_stop_read_CMD,command_str,command_str_index); // #*$
 8010510:	4b22      	ldr	r3, [pc, #136]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	461a      	mov	r2, r3
 8010516:	4922      	ldr	r1, [pc, #136]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 8010518:	482b      	ldr	r0, [pc, #172]	@ (80105c8 <HAL_UART_RxCpltCallback+0x2b4>)
 801051a:	f00c fc46 	bl	801cdaa <memcpy>
				memset(command_str,0,sizeof(command_str));
 801051e:	220f      	movs	r2, #15
 8010520:	2100      	movs	r1, #0
 8010522:	481f      	ldr	r0, [pc, #124]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 8010524:	f00c fb9d 	bl	801cc62 <memset>
				command_str_index = 0 ;
 8010528:	4b1c      	ldr	r3, [pc, #112]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 801052a:	2200      	movs	r2, #0
 801052c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801052e:	4b1d      	ldr	r3, [pc, #116]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 8010530:	2200      	movs	r2, #0
 8010532:	701a      	strb	r2, [r3, #0]
}
 8010534:	e115      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
			else if(command_str_index == 4)
 8010536:	4b19      	ldr	r3, [pc, #100]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	2b04      	cmp	r3, #4
 801053c:	d109      	bne.n	8010552 <HAL_UART_RxCpltCallback+0x23e>
				ATP_test  = 1;
 801053e:	4b1a      	ldr	r3, [pc, #104]	@ (80105a8 <HAL_UART_RxCpltCallback+0x294>)
 8010540:	2201      	movs	r2, #1
 8010542:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010544:	4b15      	ldr	r3, [pc, #84]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010546:	2200      	movs	r2, #0
 8010548:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801054a:	4b16      	ldr	r3, [pc, #88]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 801054c:	2200      	movs	r2, #0
 801054e:	701a      	strb	r2, [r3, #0]
}
 8010550:	e107      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 8010552:	4b13      	ldr	r3, [pc, #76]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 8010554:	785b      	ldrb	r3, [r3, #1]
 8010556:	2b32      	cmp	r3, #50	@ 0x32
 8010558:	d10d      	bne.n	8010576 <HAL_UART_RxCpltCallback+0x262>
 801055a:	4b11      	ldr	r3, [pc, #68]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 801055c:	789b      	ldrb	r3, [r3, #2]
 801055e:	2b36      	cmp	r3, #54	@ 0x36
 8010560:	d109      	bne.n	8010576 <HAL_UART_RxCpltCallback+0x262>
				ATP_test  = 1;
 8010562:	4b11      	ldr	r3, [pc, #68]	@ (80105a8 <HAL_UART_RxCpltCallback+0x294>)
 8010564:	2201      	movs	r2, #1
 8010566:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010568:	4b0c      	ldr	r3, [pc, #48]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801056e:	4b0d      	ldr	r3, [pc, #52]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 8010570:	2200      	movs	r2, #0
 8010572:	701a      	strb	r2, [r3, #0]
 8010574:	e0f5      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8010576:	4b09      	ldr	r3, [pc, #36]	@ (801059c <HAL_UART_RxCpltCallback+0x288>)
 8010578:	2200      	movs	r2, #0
 801057a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801057c:	4b09      	ldr	r3, [pc, #36]	@ (80105a4 <HAL_UART_RxCpltCallback+0x290>)
 801057e:	2200      	movs	r2, #0
 8010580:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8010582:	220f      	movs	r2, #15
 8010584:	2100      	movs	r1, #0
 8010586:	4806      	ldr	r0, [pc, #24]	@ (80105a0 <HAL_UART_RxCpltCallback+0x28c>)
 8010588:	f00c fb6b 	bl	801cc62 <memset>
}
 801058c:	e0e9      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
 801058e:	bf00      	nop
 8010590:	40004c00 	.word	0x40004c00
 8010594:	20007bdc 	.word	0x20007bdc
 8010598:	200058d0 	.word	0x200058d0
 801059c:	2000036c 	.word	0x2000036c
 80105a0:	20000358 	.word	0x20000358
 80105a4:	20007bd8 	.word	0x20007bd8
 80105a8:	2000036d 	.word	0x2000036d
 80105ac:	40005000 	.word	0x40005000
 80105b0:	20007be4 	.word	0x20007be4
 80105b4:	20005964 	.word	0x20005964
 80105b8:	20005bd5 	.word	0x20005bd5
 80105bc:	20005bbc 	.word	0x20005bbc
 80105c0:	20007be1 	.word	0x20007be1
 80105c4:	20007be2 	.word	0x20007be2
 80105c8:	200003f0 	.word	0x200003f0
	else if (huart->Instance == UART8) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a66      	ldr	r2, [pc, #408]	@ (801076c <HAL_UART_RxCpltCallback+0x458>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d158      	bne.n	8010688 <HAL_UART_RxCpltCallback+0x374>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 80105d6:	2201      	movs	r2, #1
 80105d8:	4965      	ldr	r1, [pc, #404]	@ (8010770 <HAL_UART_RxCpltCallback+0x45c>)
 80105da:	4866      	ldr	r0, [pc, #408]	@ (8010774 <HAL_UART_RxCpltCallback+0x460>)
 80105dc:	f009 fb2a 	bl	8019c34 <HAL_UART_Receive_IT>
		if(uart2_rx_buffer[0] == '#')//T
 80105e0:	4b63      	ldr	r3, [pc, #396]	@ (8010770 <HAL_UART_RxCpltCallback+0x45c>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	2b23      	cmp	r3, #35	@ 0x23
 80105e6:	d10e      	bne.n	8010606 <HAL_UART_RxCpltCallback+0x2f2>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 80105e8:	4b63      	ldr	r3, [pc, #396]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	1c5a      	adds	r2, r3, #1
 80105ee:	b2d1      	uxtb	r1, r2
 80105f0:	4a61      	ldr	r2, [pc, #388]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80105f2:	7011      	strb	r1, [r2, #0]
 80105f4:	461a      	mov	r2, r3
 80105f6:	4b5e      	ldr	r3, [pc, #376]	@ (8010770 <HAL_UART_RxCpltCallback+0x45c>)
 80105f8:	7819      	ldrb	r1, [r3, #0]
 80105fa:	4b60      	ldr	r3, [pc, #384]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 80105fc:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80105fe:	4b60      	ldr	r3, [pc, #384]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010600:	2201      	movs	r2, #1
 8010602:	701a      	strb	r2, [r3, #0]
 8010604:	e018      	b.n	8010638 <HAL_UART_RxCpltCallback+0x324>
		else if(command_rcv==1)
 8010606:	4b5e      	ldr	r3, [pc, #376]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b01      	cmp	r3, #1
 801060c:	d114      	bne.n	8010638 <HAL_UART_RxCpltCallback+0x324>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 801060e:	4b5a      	ldr	r3, [pc, #360]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	1c5a      	adds	r2, r3, #1
 8010614:	b2d1      	uxtb	r1, r2
 8010616:	4a58      	ldr	r2, [pc, #352]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 8010618:	7011      	strb	r1, [r2, #0]
 801061a:	461a      	mov	r2, r3
 801061c:	4b54      	ldr	r3, [pc, #336]	@ (8010770 <HAL_UART_RxCpltCallback+0x45c>)
 801061e:	7819      	ldrb	r1, [r3, #0]
 8010620:	4b56      	ldr	r3, [pc, #344]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 8010622:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8010624:	4b54      	ldr	r3, [pc, #336]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	2b0f      	cmp	r3, #15
 801062a:	d905      	bls.n	8010638 <HAL_UART_RxCpltCallback+0x324>
				command_str_index = 0 ;
 801062c:	4b52      	ldr	r3, [pc, #328]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 801062e:	2200      	movs	r2, #0
 8010630:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010632:	4b53      	ldr	r3, [pc, #332]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010634:	2200      	movs	r2, #0
 8010636:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer[0] == '$')
 8010638:	4b51      	ldr	r3, [pc, #324]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	2b01      	cmp	r3, #1
 801063e:	f040 8090 	bne.w	8010762 <HAL_UART_RxCpltCallback+0x44e>
 8010642:	4b4b      	ldr	r3, [pc, #300]	@ (8010770 <HAL_UART_RxCpltCallback+0x45c>)
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2b24      	cmp	r3, #36	@ 0x24
 8010648:	f040 808b 	bne.w	8010762 <HAL_UART_RxCpltCallback+0x44e>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 801064c:	4b4b      	ldr	r3, [pc, #300]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 801064e:	785b      	ldrb	r3, [r3, #1]
 8010650:	2b32      	cmp	r3, #50	@ 0x32
 8010652:	d10d      	bne.n	8010670 <HAL_UART_RxCpltCallback+0x35c>
 8010654:	4b49      	ldr	r3, [pc, #292]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 8010656:	789b      	ldrb	r3, [r3, #2]
 8010658:	2b37      	cmp	r3, #55	@ 0x37
 801065a:	d109      	bne.n	8010670 <HAL_UART_RxCpltCallback+0x35c>
				ATP_test  = 1;
 801065c:	4b49      	ldr	r3, [pc, #292]	@ (8010784 <HAL_UART_RxCpltCallback+0x470>)
 801065e:	2201      	movs	r2, #1
 8010660:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010662:	4b45      	ldr	r3, [pc, #276]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 8010664:	2200      	movs	r2, #0
 8010666:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010668:	4b45      	ldr	r3, [pc, #276]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 801066a:	2200      	movs	r2, #0
 801066c:	701a      	strb	r2, [r3, #0]
 801066e:	e078      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8010670:	4b41      	ldr	r3, [pc, #260]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 8010672:	2200      	movs	r2, #0
 8010674:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010676:	4b42      	ldr	r3, [pc, #264]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010678:	2200      	movs	r2, #0
 801067a:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 801067c:	220f      	movs	r2, #15
 801067e:	2100      	movs	r1, #0
 8010680:	483e      	ldr	r0, [pc, #248]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 8010682:	f00c faee 	bl	801cc62 <memset>
}
 8010686:	e06c      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == USART10) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a3e      	ldr	r2, [pc, #248]	@ (8010788 <HAL_UART_RxCpltCallback+0x474>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d167      	bne.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 8010692:	2201      	movs	r2, #1
 8010694:	493d      	ldr	r1, [pc, #244]	@ (801078c <HAL_UART_RxCpltCallback+0x478>)
 8010696:	483e      	ldr	r0, [pc, #248]	@ (8010790 <HAL_UART_RxCpltCallback+0x47c>)
 8010698:	f009 facc 	bl	8019c34 <HAL_UART_Receive_IT>
		if(uart4_rx_buffer[0] == '#')//T
 801069c:	4b3b      	ldr	r3, [pc, #236]	@ (801078c <HAL_UART_RxCpltCallback+0x478>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	2b23      	cmp	r3, #35	@ 0x23
 80106a2:	d10e      	bne.n	80106c2 <HAL_UART_RxCpltCallback+0x3ae>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 80106a4:	4b34      	ldr	r3, [pc, #208]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	1c5a      	adds	r2, r3, #1
 80106aa:	b2d1      	uxtb	r1, r2
 80106ac:	4a32      	ldr	r2, [pc, #200]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80106ae:	7011      	strb	r1, [r2, #0]
 80106b0:	461a      	mov	r2, r3
 80106b2:	4b36      	ldr	r3, [pc, #216]	@ (801078c <HAL_UART_RxCpltCallback+0x478>)
 80106b4:	7819      	ldrb	r1, [r3, #0]
 80106b6:	4b31      	ldr	r3, [pc, #196]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 80106b8:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80106ba:	4b31      	ldr	r3, [pc, #196]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 80106bc:	2201      	movs	r2, #1
 80106be:	701a      	strb	r2, [r3, #0]
 80106c0:	e018      	b.n	80106f4 <HAL_UART_RxCpltCallback+0x3e0>
		else if(command_rcv==1)
 80106c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d114      	bne.n	80106f4 <HAL_UART_RxCpltCallback+0x3e0>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 80106ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	b2d1      	uxtb	r1, r2
 80106d2:	4a29      	ldr	r2, [pc, #164]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80106d4:	7011      	strb	r1, [r2, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	4b2c      	ldr	r3, [pc, #176]	@ (801078c <HAL_UART_RxCpltCallback+0x478>)
 80106da:	7819      	ldrb	r1, [r3, #0]
 80106dc:	4b27      	ldr	r3, [pc, #156]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 80106de:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80106e0:	4b25      	ldr	r3, [pc, #148]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	2b0f      	cmp	r3, #15
 80106e6:	d905      	bls.n	80106f4 <HAL_UART_RxCpltCallback+0x3e0>
				command_str_index = 0 ;
 80106e8:	4b23      	ldr	r3, [pc, #140]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 80106ea:	2200      	movs	r2, #0
 80106ec:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80106ee:	4b24      	ldr	r3, [pc, #144]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer[0] == '$')
 80106f4:	4b22      	ldr	r3, [pc, #136]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d132      	bne.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
 80106fc:	4b23      	ldr	r3, [pc, #140]	@ (801078c <HAL_UART_RxCpltCallback+0x478>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	2b24      	cmp	r3, #36	@ 0x24
 8010702:	d12e      	bne.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
			if(command_str[command_str_index-1] == '$')
 8010704:	4b1c      	ldr	r3, [pc, #112]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	3b01      	subs	r3, #1
 801070a:	4a1c      	ldr	r2, [pc, #112]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 801070c:	5cd3      	ldrb	r3, [r2, r3]
 801070e:	2b24      	cmp	r3, #36	@ 0x24
 8010710:	d109      	bne.n	8010726 <HAL_UART_RxCpltCallback+0x412>
				ATP_test  = 1;
 8010712:	4b1c      	ldr	r3, [pc, #112]	@ (8010784 <HAL_UART_RxCpltCallback+0x470>)
 8010714:	2201      	movs	r2, #1
 8010716:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010718:	4b17      	ldr	r3, [pc, #92]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 801071a:	2200      	movs	r2, #0
 801071c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801071e:	4b18      	ldr	r3, [pc, #96]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010720:	2200      	movs	r2, #0
 8010722:	701a      	strb	r2, [r3, #0]
}
 8010724:	e01d      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 8010726:	4b15      	ldr	r3, [pc, #84]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 8010728:	785b      	ldrb	r3, [r3, #1]
 801072a:	2b32      	cmp	r3, #50	@ 0x32
 801072c:	d10d      	bne.n	801074a <HAL_UART_RxCpltCallback+0x436>
 801072e:	4b13      	ldr	r3, [pc, #76]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 8010730:	789b      	ldrb	r3, [r3, #2]
 8010732:	2b38      	cmp	r3, #56	@ 0x38
 8010734:	d109      	bne.n	801074a <HAL_UART_RxCpltCallback+0x436>
				ATP_test  = 1;
 8010736:	4b13      	ldr	r3, [pc, #76]	@ (8010784 <HAL_UART_RxCpltCallback+0x470>)
 8010738:	2201      	movs	r2, #1
 801073a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 801073c:	4b0e      	ldr	r3, [pc, #56]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 801073e:	2200      	movs	r2, #0
 8010740:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010742:	4b0f      	ldr	r3, [pc, #60]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010744:	2200      	movs	r2, #0
 8010746:	701a      	strb	r2, [r3, #0]
 8010748:	e00b      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 801074a:	4b0b      	ldr	r3, [pc, #44]	@ (8010778 <HAL_UART_RxCpltCallback+0x464>)
 801074c:	2200      	movs	r2, #0
 801074e:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010750:	4b0b      	ldr	r3, [pc, #44]	@ (8010780 <HAL_UART_RxCpltCallback+0x46c>)
 8010752:	2200      	movs	r2, #0
 8010754:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8010756:	220f      	movs	r2, #15
 8010758:	2100      	movs	r1, #0
 801075a:	4808      	ldr	r0, [pc, #32]	@ (801077c <HAL_UART_RxCpltCallback+0x468>)
 801075c:	f00c fa81 	bl	801cc62 <memset>
}
 8010760:	e7ff      	b.n	8010762 <HAL_UART_RxCpltCallback+0x44e>
 8010762:	bf00      	nop
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	40007c00 	.word	0x40007c00
 8010770:	20007be0 	.word	0x20007be0
 8010774:	200059f8 	.word	0x200059f8
 8010778:	2000036c 	.word	0x2000036c
 801077c:	20000358 	.word	0x20000358
 8010780:	20007bd8 	.word	0x20007bd8
 8010784:	2000036d 	.word	0x2000036d
 8010788:	40006800 	.word	0x40006800
 801078c:	20007be8 	.word	0x20007be8
 8010790:	20005a8c 	.word	0x20005a8c

08010794 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 801079e:	bf00      	nop
 80107a0:	370c      	adds	r7, #12
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80107aa:	b480      	push	{r7}
 80107ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80107ae:	b672      	cpsid	i
}
 80107b0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80107b2:	bf00      	nop
 80107b4:	e7fd      	b.n	80107b2 <Error_Handler+0x8>

080107b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80107b6:	b480      	push	{r7}
 80107b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80107ba:	bf00      	nop
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b0d0      	sub	sp, #320	@ 0x140
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80107ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80107d2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107d4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80107d8:	2200      	movs	r2, #0
 80107da:	601a      	str	r2, [r3, #0]
 80107dc:	605a      	str	r2, [r3, #4]
 80107de:	609a      	str	r2, [r3, #8]
 80107e0:	60da      	str	r2, [r3, #12]
 80107e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80107e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80107e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80107ec:	4618      	mov	r0, r3
 80107ee:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80107f2:	461a      	mov	r2, r3
 80107f4:	2100      	movs	r1, #0
 80107f6:	f00c fa34 	bl	801cc62 <memset>
  if(hspi->Instance==SPI2)
 80107fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80107fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4a9c      	ldr	r2, [pc, #624]	@ (8010a78 <HAL_SPI_MspInit+0x2b4>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d15f      	bne.n	80108cc <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 801080c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010810:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010818:	f04f 0300 	mov.w	r3, #0
 801081c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8010820:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010824:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010828:	2200      	movs	r2, #0
 801082a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801082e:	f107 0320 	add.w	r3, r7, #32
 8010832:	4618      	mov	r0, r3
 8010834:	f003 f912 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d001      	beq.n	8010842 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 801083e:	f7ff ffb4 	bl	80107aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010842:	4b8e      	ldr	r3, [pc, #568]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010848:	4a8c      	ldr	r2, [pc, #560]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 801084a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801084e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010852:	4b8a      	ldr	r3, [pc, #552]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010858:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 801085c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010860:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010864:	601a      	str	r2, [r3, #0]
 8010866:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801086a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801086e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010870:	4b82      	ldr	r3, [pc, #520]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010876:	4a81      	ldr	r2, [pc, #516]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010878:	f043 0302 	orr.w	r3, r3, #2
 801087c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010880:	4b7e      	ldr	r3, [pc, #504]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010886:	f003 0202 	and.w	r2, r3, #2
 801088a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801088e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010892:	601a      	str	r2, [r3, #0]
 8010894:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010898:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801089c:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 801089e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80108a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108a6:	2302      	movs	r3, #2
 80108a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108ac:	2300      	movs	r3, #0
 80108ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108b2:	2300      	movs	r3, #0
 80108b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80108b8:	2305      	movs	r3, #5
 80108ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80108be:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80108c2:	4619      	mov	r1, r3
 80108c4:	486e      	ldr	r0, [pc, #440]	@ (8010a80 <HAL_SPI_MspInit+0x2bc>)
 80108c6:	f001 f87d 	bl	80119c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80108ca:	e0d0      	b.n	8010a6e <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 80108cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a6a      	ldr	r2, [pc, #424]	@ (8010a84 <HAL_SPI_MspInit+0x2c0>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d15f      	bne.n	801099e <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80108de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108e2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80108e6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80108ea:	f04f 0300 	mov.w	r3, #0
 80108ee:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 80108f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80108fa:	2200      	movs	r2, #0
 80108fc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010900:	f107 0320 	add.w	r3, r7, #32
 8010904:	4618      	mov	r0, r3
 8010906:	f003 f8a9 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d001      	beq.n	8010914 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8010910:	f7ff ff4b 	bl	80107aa <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010914:	4b59      	ldr	r3, [pc, #356]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010916:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801091a:	4a58      	ldr	r2, [pc, #352]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 801091c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010920:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010924:	4b55      	ldr	r3, [pc, #340]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801092a:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 801092e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010932:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801093c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010940:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010942:	4b4e      	ldr	r3, [pc, #312]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010948:	4a4c      	ldr	r2, [pc, #304]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 801094a:	f043 0304 	orr.w	r3, r3, #4
 801094e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010952:	4b4a      	ldr	r3, [pc, #296]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010958:	f003 0204 	and.w	r2, r3, #4
 801095c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010960:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010964:	601a      	str	r2, [r3, #0]
 8010966:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801096a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801096e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 8010970:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8010974:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010978:	2302      	movs	r3, #2
 801097a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801097e:	2300      	movs	r3, #0
 8010980:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010984:	2300      	movs	r3, #0
 8010986:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801098a:	2306      	movs	r3, #6
 801098c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010990:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8010994:	4619      	mov	r1, r3
 8010996:	483c      	ldr	r0, [pc, #240]	@ (8010a88 <HAL_SPI_MspInit+0x2c4>)
 8010998:	f001 f814 	bl	80119c4 <HAL_GPIO_Init>
}
 801099c:	e067      	b.n	8010a6e <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 801099e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80109a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4a38      	ldr	r2, [pc, #224]	@ (8010a8c <HAL_SPI_MspInit+0x2c8>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d15e      	bne.n	8010a6e <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80109b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80109b4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80109b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80109bc:	f04f 0300 	mov.w	r3, #0
 80109c0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 80109c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80109c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80109cc:	2200      	movs	r2, #0
 80109ce:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80109d2:	f107 0320 	add.w	r3, r7, #32
 80109d6:	4618      	mov	r0, r3
 80109d8:	f003 f840 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d001      	beq.n	80109e6 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80109e2:	f7ff fee2 	bl	80107aa <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80109e6:	4b25      	ldr	r3, [pc, #148]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 80109e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80109ec:	4a23      	ldr	r2, [pc, #140]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 80109ee:	f043 0320 	orr.w	r3, r3, #32
 80109f2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80109f6:	4b21      	ldr	r3, [pc, #132]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 80109f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80109fc:	f003 0220 	and.w	r2, r3, #32
 8010a00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010a12:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8010a14:	4b19      	ldr	r3, [pc, #100]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a1a:	4a18      	ldr	r2, [pc, #96]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010a1c:	f043 0320 	orr.w	r3, r3, #32
 8010a20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010a24:	4b15      	ldr	r3, [pc, #84]	@ (8010a7c <HAL_SPI_MspInit+0x2b8>)
 8010a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a2a:	f003 0220 	and.w	r2, r3, #32
 8010a2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010a36:	601a      	str	r2, [r3, #0]
 8010a38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a3c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010a40:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 8010a42:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8010a46:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a4a:	2302      	movs	r3, #2
 8010a4c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a50:	2300      	movs	r3, #0
 8010a52:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a56:	2300      	movs	r3, #0
 8010a58:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8010a5c:	2305      	movs	r3, #5
 8010a5e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010a62:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8010a66:	4619      	mov	r1, r3
 8010a68:	4809      	ldr	r0, [pc, #36]	@ (8010a90 <HAL_SPI_MspInit+0x2cc>)
 8010a6a:	f000 ffab 	bl	80119c4 <HAL_GPIO_Init>
}
 8010a6e:	bf00      	nop
 8010a70:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	40003800 	.word	0x40003800
 8010a7c:	44020c00 	.word	0x44020c00
 8010a80:	42020400 	.word	0x42020400
 8010a84:	40003c00 	.word	0x40003c00
 8010a88:	42020800 	.word	0x42020800
 8010a8c:	44002000 	.word	0x44002000
 8010a90:	42021400 	.word	0x42021400

08010a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b0d2      	sub	sp, #328	@ 0x148
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010a9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010aa2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010aa4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	601a      	str	r2, [r3, #0]
 8010aac:	605a      	str	r2, [r3, #4]
 8010aae:	609a      	str	r2, [r3, #8]
 8010ab0:	60da      	str	r2, [r3, #12]
 8010ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010ab4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010ab8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010abc:	4618      	mov	r0, r3
 8010abe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	2100      	movs	r1, #0
 8010ac6:	f00c f8cc 	bl	801cc62 <memset>
  if(huart->Instance==UART4)
 8010aca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010ace:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4aa4      	ldr	r2, [pc, #656]	@ (8010d68 <HAL_UART_MspInit+0x2d4>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d166      	bne.n	8010baa <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8010adc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010ae0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010ae4:	f04f 0208 	mov.w	r2, #8
 8010ae8:	f04f 0300 	mov.w	r3, #0
 8010aec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8010af0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010af4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010af8:	2200      	movs	r2, #0
 8010afa:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010afc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010b00:	4618      	mov	r0, r3
 8010b02:	f002 ffab 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d001      	beq.n	8010b10 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8010b0c:	f7ff fe4d 	bl	80107aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010b10:	4b96      	ldr	r3, [pc, #600]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b16:	4a95      	ldr	r2, [pc, #596]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010b18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010b1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010b20:	4b92      	ldr	r3, [pc, #584]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b26:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8010b2a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b2e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010b3c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b44:	4a89      	ldr	r2, [pc, #548]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010b46:	f043 0302 	orr.w	r3, r3, #2
 8010b4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010b4e:	4b87      	ldr	r3, [pc, #540]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b54:	f003 0202 	and.w	r2, r3, #2
 8010b58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b5c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010b60:	601a      	str	r2, [r3, #0]
 8010b62:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010b6a:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 8010b6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010b70:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b74:	2302      	movs	r3, #2
 8010b76:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b80:	2300      	movs	r3, #0
 8010b82:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8010b86:	2308      	movs	r3, #8
 8010b88:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b8c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010b90:	4619      	mov	r1, r3
 8010b92:	4877      	ldr	r0, [pc, #476]	@ (8010d70 <HAL_UART_MspInit+0x2dc>)
 8010b94:	f000 ff16 	bl	80119c4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8010b98:	2200      	movs	r2, #0
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	203d      	movs	r0, #61	@ 0x3d
 8010b9e:	f000 fd93 	bl	80116c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8010ba2:	203d      	movs	r0, #61	@ 0x3d
 8010ba4:	f000 fdaa 	bl	80116fc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE END USART10_MspInit 1 */
  }

}
 8010ba8:	e159      	b.n	8010e5e <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 8010baa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010bae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a6f      	ldr	r2, [pc, #444]	@ (8010d74 <HAL_UART_MspInit+0x2e0>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d165      	bne.n	8010c88 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8010bbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010bc0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010bc4:	f04f 0210 	mov.w	r2, #16
 8010bc8:	f04f 0300 	mov.w	r3, #0
 8010bcc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8010bd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010bd4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010bd8:	2200      	movs	r2, #0
 8010bda:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010be0:	4618      	mov	r0, r3
 8010be2:	f002 ff3b 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d001      	beq.n	8010bf0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8010bec:	f7ff fddd 	bl	80107aa <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8010bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010bf6:	4a5d      	ldr	r2, [pc, #372]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010bfc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010c00:	4b5a      	ldr	r3, [pc, #360]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c06:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8010c0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c1c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010c1e:	4b53      	ldr	r3, [pc, #332]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c24:	4a51      	ldr	r2, [pc, #324]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010c26:	f043 0302 	orr.w	r3, r3, #2
 8010c2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c34:	f003 0202 	and.w	r2, r3, #2
 8010c38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010c40:	601a      	str	r2, [r3, #0]
 8010c42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010c4a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 8010c4c:	2360      	movs	r3, #96	@ 0x60
 8010c4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c52:	2302      	movs	r3, #2
 8010c54:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8010c64:	230e      	movs	r3, #14
 8010c66:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010c6a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010c6e:	4619      	mov	r1, r3
 8010c70:	483f      	ldr	r0, [pc, #252]	@ (8010d70 <HAL_UART_MspInit+0x2dc>)
 8010c72:	f000 fea7 	bl	80119c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8010c76:	2200      	movs	r2, #0
 8010c78:	2100      	movs	r1, #0
 8010c7a:	203e      	movs	r0, #62	@ 0x3e
 8010c7c:	f000 fd24 	bl	80116c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8010c80:	203e      	movs	r0, #62	@ 0x3e
 8010c82:	f000 fd3b 	bl	80116fc <HAL_NVIC_EnableIRQ>
}
 8010c86:	e0ea      	b.n	8010e5e <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 8010c88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a38      	ldr	r2, [pc, #224]	@ (8010d78 <HAL_UART_MspInit+0x2e4>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d172      	bne.n	8010d80 <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8010c9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c9e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010ca2:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8010ca6:	f04f 0300 	mov.w	r3, #0
 8010caa:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8010cae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010cb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f002 fecc 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d001      	beq.n	8010cce <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8010cca:	f7ff fd6e 	bl	80107aa <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8010cce:	4b27      	ldr	r3, [pc, #156]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010cd4:	4a25      	ldr	r2, [pc, #148]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010cd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010cda:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010cde:	4b23      	ldr	r3, [pc, #140]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010ce4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8010ce8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010cec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010cf6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010cfa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d02:	4a1a      	ldr	r2, [pc, #104]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010d04:	f043 0310 	orr.w	r3, r3, #16
 8010d08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010d0c:	4b17      	ldr	r3, [pc, #92]	@ (8010d6c <HAL_UART_MspInit+0x2d8>)
 8010d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d12:	f003 0210 	and.w	r2, r3, #16
 8010d16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d24:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010d28:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d30:	2302      	movs	r3, #2
 8010d32:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8010d42:	2308      	movs	r3, #8
 8010d44:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010d48:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	480b      	ldr	r0, [pc, #44]	@ (8010d7c <HAL_UART_MspInit+0x2e8>)
 8010d50:	f000 fe38 	bl	80119c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8010d54:	2200      	movs	r2, #0
 8010d56:	2100      	movs	r1, #0
 8010d58:	2063      	movs	r0, #99	@ 0x63
 8010d5a:	f000 fcb5 	bl	80116c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8010d5e:	2063      	movs	r0, #99	@ 0x63
 8010d60:	f000 fccc 	bl	80116fc <HAL_NVIC_EnableIRQ>
}
 8010d64:	e07b      	b.n	8010e5e <HAL_UART_MspInit+0x3ca>
 8010d66:	bf00      	nop
 8010d68:	40004c00 	.word	0x40004c00
 8010d6c:	44020c00 	.word	0x44020c00
 8010d70:	42020400 	.word	0x42020400
 8010d74:	40005000 	.word	0x40005000
 8010d78:	40007c00 	.word	0x40007c00
 8010d7c:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 8010d80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d84:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a36      	ldr	r2, [pc, #216]	@ (8010e68 <HAL_UART_MspInit+0x3d4>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d165      	bne.n	8010e5e <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8010d92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d96:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d9e:	f04f 0300 	mov.w	r3, #0
 8010da2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 8010da6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010daa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010dae:	2200      	movs	r2, #0
 8010db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010db4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010db8:	4618      	mov	r0, r3
 8010dba:	f002 fe4f 	bl	8013a5c <HAL_RCCEx_PeriphCLKConfig>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8010dc4:	f7ff fcf1 	bl	80107aa <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8010dc8:	4b28      	ldr	r3, [pc, #160]	@ (8010e6c <HAL_UART_MspInit+0x3d8>)
 8010dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010dce:	4a27      	ldr	r2, [pc, #156]	@ (8010e6c <HAL_UART_MspInit+0x3d8>)
 8010dd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010dd4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010dd8:	4b24      	ldr	r3, [pc, #144]	@ (8010e6c <HAL_UART_MspInit+0x3d8>)
 8010dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010dde:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8010de2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010de6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010dea:	601a      	str	r2, [r3, #0]
 8010dec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010df0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010df4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010df6:	4b1d      	ldr	r3, [pc, #116]	@ (8010e6c <HAL_UART_MspInit+0x3d8>)
 8010df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8010e6c <HAL_UART_MspInit+0x3d8>)
 8010dfe:	f043 0310 	orr.w	r3, r3, #16
 8010e02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010e06:	4b19      	ldr	r3, [pc, #100]	@ (8010e6c <HAL_UART_MspInit+0x3d8>)
 8010e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e0c:	f003 0210 	and.w	r2, r3, #16
 8010e10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e14:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010e18:	601a      	str	r2, [r3, #0]
 8010e1a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e1e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010e22:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8010e24:	230c      	movs	r3, #12
 8010e26:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e30:	2300      	movs	r3, #0
 8010e32:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e36:	2300      	movs	r3, #0
 8010e38:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8010e3c:	2307      	movs	r3, #7
 8010e3e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010e42:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010e46:	4619      	mov	r1, r3
 8010e48:	4809      	ldr	r0, [pc, #36]	@ (8010e70 <HAL_UART_MspInit+0x3dc>)
 8010e4a:	f000 fdbb 	bl	80119c4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8010e4e:	2200      	movs	r2, #0
 8010e50:	2100      	movs	r1, #0
 8010e52:	2056      	movs	r0, #86	@ 0x56
 8010e54:	f000 fc38 	bl	80116c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 8010e58:	2056      	movs	r0, #86	@ 0x56
 8010e5a:	f000 fc4f 	bl	80116fc <HAL_NVIC_EnableIRQ>
}
 8010e5e:	bf00      	nop
 8010e60:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	40006800 	.word	0x40006800
 8010e6c:	44020c00 	.word	0x44020c00
 8010e70:	42021000 	.word	0x42021000

08010e74 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8010e7a:	1d3b      	adds	r3, r7, #4
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	601a      	str	r2, [r3, #0]
 8010e80:	605a      	str	r2, [r3, #4]
 8010e82:	609a      	str	r2, [r3, #8]
 8010e84:	60da      	str	r2, [r3, #12]
 8010e86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8010e88:	4b43      	ldr	r3, [pc, #268]	@ (8010f98 <HAL_FMC_MspInit+0x124>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d17f      	bne.n	8010f90 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8010e90:	4b41      	ldr	r3, [pc, #260]	@ (8010f98 <HAL_FMC_MspInit+0x124>)
 8010e92:	2201      	movs	r2, #1
 8010e94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010e96:	4b41      	ldr	r3, [pc, #260]	@ (8010f9c <HAL_FMC_MspInit+0x128>)
 8010e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8010f9c <HAL_FMC_MspInit+0x128>)
 8010e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ea2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8010ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8010f9c <HAL_FMC_MspInit+0x128>)
 8010ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010eb0:	603b      	str	r3, [r7, #0]
 8010eb2:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8010eb4:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8010eb8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010eba:	2302      	movs	r3, #2
 8010ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010ec6:	230c      	movs	r3, #12
 8010ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010eca:	1d3b      	adds	r3, r7, #4
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4834      	ldr	r0, [pc, #208]	@ (8010fa0 <HAL_FMC_MspInit+0x12c>)
 8010ed0:	f000 fd78 	bl	80119c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010ed4:	2380      	movs	r3, #128	@ 0x80
 8010ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ed8:	2302      	movs	r3, #2
 8010eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010edc:	2300      	movs	r3, #0
 8010ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8010ee4:	230d      	movs	r3, #13
 8010ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ee8:	1d3b      	adds	r3, r7, #4
 8010eea:	4619      	mov	r1, r3
 8010eec:	482d      	ldr	r0, [pc, #180]	@ (8010fa4 <HAL_FMC_MspInit+0x130>)
 8010eee:	f000 fd69 	bl	80119c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8010ef2:	233f      	movs	r3, #63	@ 0x3f
 8010ef4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ef6:	2302      	movs	r3, #2
 8010ef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010efa:	2300      	movs	r3, #0
 8010efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010efe:	2303      	movs	r3, #3
 8010f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f02:	230c      	movs	r3, #12
 8010f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010f06:	1d3b      	adds	r3, r7, #4
 8010f08:	4619      	mov	r1, r3
 8010f0a:	4827      	ldr	r0, [pc, #156]	@ (8010fa8 <HAL_FMC_MspInit+0x134>)
 8010f0c:	f000 fd5a 	bl	80119c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8010f10:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8010f14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f16:	2302      	movs	r3, #2
 8010f18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f22:	230c      	movs	r3, #12
 8010f24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010f26:	1d3b      	adds	r3, r7, #4
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4820      	ldr	r0, [pc, #128]	@ (8010fac <HAL_FMC_MspInit+0x138>)
 8010f2c:	f000 fd4a 	bl	80119c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8010f30:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8010f34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f36:	2302      	movs	r3, #2
 8010f38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f3e:	2303      	movs	r3, #3
 8010f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f42:	230c      	movs	r3, #12
 8010f44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010f46:	1d3b      	adds	r3, r7, #4
 8010f48:	4619      	mov	r1, r3
 8010f4a:	4819      	ldr	r0, [pc, #100]	@ (8010fb0 <HAL_FMC_MspInit+0x13c>)
 8010f4c:	f000 fd3a 	bl	80119c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010f50:	23c0      	movs	r3, #192	@ 0xc0
 8010f52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f54:	2302      	movs	r3, #2
 8010f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f5c:	2303      	movs	r3, #3
 8010f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8010f60:	2309      	movs	r3, #9
 8010f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010f64:	1d3b      	adds	r3, r7, #4
 8010f66:	4619      	mov	r1, r3
 8010f68:	4812      	ldr	r0, [pc, #72]	@ (8010fb4 <HAL_FMC_MspInit+0x140>)
 8010f6a:	f000 fd2b 	bl	80119c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8010f6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010f72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f74:	2302      	movs	r3, #2
 8010f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f7c:	2303      	movs	r3, #3
 8010f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f80:	230c      	movs	r3, #12
 8010f82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f84:	1d3b      	adds	r3, r7, #4
 8010f86:	4619      	mov	r1, r3
 8010f88:	4806      	ldr	r0, [pc, #24]	@ (8010fa4 <HAL_FMC_MspInit+0x130>)
 8010f8a:	f000 fd1b 	bl	80119c4 <HAL_GPIO_Init>
 8010f8e:	e000      	b.n	8010f92 <HAL_FMC_MspInit+0x11e>
    return;
 8010f90:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8010f92:	3718      	adds	r7, #24
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	20007bec 	.word	0x20007bec
 8010f9c:	44020c00 	.word	0x44020c00
 8010fa0:	42021400 	.word	0x42021400
 8010fa4:	42020000 	.word	0x42020000
 8010fa8:	42021800 	.word	0x42021800
 8010fac:	42021000 	.word	0x42021000
 8010fb0:	42020c00 	.word	0x42020c00
 8010fb4:	42020800 	.word	0x42020800

08010fb8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8010fc0:	f7ff ff58 	bl	8010e74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8010fc4:	bf00      	nop
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8010fd4:	f7ff ff4e 	bl	8010e74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8010fd8:	bf00      	nop
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010fe4:	bf00      	nop
 8010fe6:	e7fd      	b.n	8010fe4 <NMI_Handler+0x4>

08010fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010fec:	bf00      	nop
 8010fee:	e7fd      	b.n	8010fec <HardFault_Handler+0x4>

08010ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010ff4:	bf00      	nop
 8010ff6:	e7fd      	b.n	8010ff4 <MemManage_Handler+0x4>

08010ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010ffc:	bf00      	nop
 8010ffe:	e7fd      	b.n	8010ffc <BusFault_Handler+0x4>

08011000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011000:	b480      	push	{r7}
 8011002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011004:	bf00      	nop
 8011006:	e7fd      	b.n	8011004 <UsageFault_Handler+0x4>

08011008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011008:	b480      	push	{r7}
 801100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801100c:	bf00      	nop
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr

08011016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011016:	b480      	push	{r7}
 8011018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801101a:	bf00      	nop
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011024:	b480      	push	{r7}
 8011026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011028:	bf00      	nop
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr

08011032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011036:	f000 fa4b 	bl	80114d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801103a:	bf00      	nop
 801103c:	bd80      	pop	{r7, pc}

0801103e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 8011042:	2002      	movs	r0, #2
 8011044:	f000 fe5a 	bl	8011cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8011048:	bf00      	nop
 801104a:	bd80      	pop	{r7, pc}

0801104c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 8011050:	2080      	movs	r0, #128	@ 0x80
 8011052:	f000 fe53 	bl	8011cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8011056:	bf00      	nop
 8011058:	bd80      	pop	{r7, pc}

0801105a <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 801105a:	b580      	push	{r7, lr}
 801105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 801105e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011062:	f000 fe4b 	bl	8011cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8011066:	bf00      	nop
 8011068:	bd80      	pop	{r7, pc}
	...

0801106c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8011070:	4802      	ldr	r0, [pc, #8]	@ (801107c <UART4_IRQHandler+0x10>)
 8011072:	f008 fe41 	bl	8019cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8011076:	bf00      	nop
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	200058d0 	.word	0x200058d0

08011080 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8011084:	4802      	ldr	r0, [pc, #8]	@ (8011090 <UART5_IRQHandler+0x10>)
 8011086:	f008 fe37 	bl	8019cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801108a:	bf00      	nop
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	20005964 	.word	0x20005964

08011094 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8011098:	4802      	ldr	r0, [pc, #8]	@ (80110a4 <UART8_IRQHandler+0x10>)
 801109a:	f008 fe2d 	bl	8019cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 801109e:	bf00      	nop
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	200059f8 	.word	0x200059f8

080110a8 <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 80110ac:	4802      	ldr	r0, [pc, #8]	@ (80110b8 <USART10_IRQHandler+0x10>)
 80110ae:	f008 fe23 	bl	8019cf8 <HAL_UART_IRQHandler>
}
 80110b2:	bf00      	nop
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	20005a8c 	.word	0x20005a8c

080110bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80110bc:	b480      	push	{r7}
 80110be:	af00      	add	r7, sp, #0
  return 1;
 80110c0:	2301      	movs	r3, #1
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <_kill>:

int _kill(int pid, int sig)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80110d6:	f00b fe2d 	bl	801cd34 <__errno>
 80110da:	4603      	mov	r3, r0
 80110dc:	2216      	movs	r2, #22
 80110de:	601a      	str	r2, [r3, #0]
  return -1;
 80110e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <_exit>:

void _exit (int status)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80110f4:	f04f 31ff 	mov.w	r1, #4294967295
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f7ff ffe7 	bl	80110cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80110fe:	bf00      	nop
 8011100:	e7fd      	b.n	80110fe <_exit+0x12>

08011102 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b086      	sub	sp, #24
 8011106:	af00      	add	r7, sp, #0
 8011108:	60f8      	str	r0, [r7, #12]
 801110a:	60b9      	str	r1, [r7, #8]
 801110c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801110e:	2300      	movs	r3, #0
 8011110:	617b      	str	r3, [r7, #20]
 8011112:	e00a      	b.n	801112a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8011114:	f3af 8000 	nop.w
 8011118:	4601      	mov	r1, r0
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	1c5a      	adds	r2, r3, #1
 801111e:	60ba      	str	r2, [r7, #8]
 8011120:	b2ca      	uxtb	r2, r1
 8011122:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	3301      	adds	r3, #1
 8011128:	617b      	str	r3, [r7, #20]
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	429a      	cmp	r2, r3
 8011130:	dbf0      	blt.n	8011114 <_read+0x12>
  }

  return len;
 8011132:	687b      	ldr	r3, [r7, #4]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3718      	adds	r7, #24
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b086      	sub	sp, #24
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011148:	2300      	movs	r3, #0
 801114a:	617b      	str	r3, [r7, #20]
 801114c:	e009      	b.n	8011162 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	1c5a      	adds	r2, r3, #1
 8011152:	60ba      	str	r2, [r7, #8]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	4618      	mov	r0, r3
 8011158:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	3301      	adds	r3, #1
 8011160:	617b      	str	r3, [r7, #20]
 8011162:	697a      	ldr	r2, [r7, #20]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	429a      	cmp	r2, r3
 8011168:	dbf1      	blt.n	801114e <_write+0x12>
  }
  return len;
 801116a:	687b      	ldr	r3, [r7, #4]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3718      	adds	r7, #24
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <_close>:

int _close(int file)
{
 8011174:	b480      	push	{r7}
 8011176:	b083      	sub	sp, #12
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801117c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011180:	4618      	mov	r0, r3
 8011182:	370c      	adds	r7, #12
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr

0801118c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801119c:	605a      	str	r2, [r3, #4]
  return 0;
 801119e:	2300      	movs	r3, #0
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	370c      	adds	r7, #12
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <_isatty>:

int _isatty(int file)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80111b4:	2301      	movs	r3, #1
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	370c      	adds	r7, #12
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80111c2:	b480      	push	{r7}
 80111c4:	b085      	sub	sp, #20
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	60f8      	str	r0, [r7, #12]
 80111ca:	60b9      	str	r1, [r7, #8]
 80111cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80111ce:	2300      	movs	r3, #0
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3714      	adds	r7, #20
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b086      	sub	sp, #24
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80111e4:	4a14      	ldr	r2, [pc, #80]	@ (8011238 <_sbrk+0x5c>)
 80111e6:	4b15      	ldr	r3, [pc, #84]	@ (801123c <_sbrk+0x60>)
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80111f0:	4b13      	ldr	r3, [pc, #76]	@ (8011240 <_sbrk+0x64>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d102      	bne.n	80111fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80111f8:	4b11      	ldr	r3, [pc, #68]	@ (8011240 <_sbrk+0x64>)
 80111fa:	4a12      	ldr	r2, [pc, #72]	@ (8011244 <_sbrk+0x68>)
 80111fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80111fe:	4b10      	ldr	r3, [pc, #64]	@ (8011240 <_sbrk+0x64>)
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4413      	add	r3, r2
 8011206:	693a      	ldr	r2, [r7, #16]
 8011208:	429a      	cmp	r2, r3
 801120a:	d207      	bcs.n	801121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801120c:	f00b fd92 	bl	801cd34 <__errno>
 8011210:	4603      	mov	r3, r0
 8011212:	220c      	movs	r2, #12
 8011214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011216:	f04f 33ff 	mov.w	r3, #4294967295
 801121a:	e009      	b.n	8011230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801121c:	4b08      	ldr	r3, [pc, #32]	@ (8011240 <_sbrk+0x64>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8011222:	4b07      	ldr	r3, [pc, #28]	@ (8011240 <_sbrk+0x64>)
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4413      	add	r3, r2
 801122a:	4a05      	ldr	r2, [pc, #20]	@ (8011240 <_sbrk+0x64>)
 801122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801122e:	68fb      	ldr	r3, [r7, #12]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3718      	adds	r7, #24
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	200a0000 	.word	0x200a0000
 801123c:	00000400 	.word	0x00000400
 8011240:	20007bf0 	.word	0x20007bf0
 8011244:	20007d48 	.word	0x20007d48

08011248 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 801124e:	4b34      	ldr	r3, [pc, #208]	@ (8011320 <SystemInit+0xd8>)
 8011250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011254:	4a32      	ldr	r2, [pc, #200]	@ (8011320 <SystemInit+0xd8>)
 8011256:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801125a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 801125e:	4b31      	ldr	r3, [pc, #196]	@ (8011324 <SystemInit+0xdc>)
 8011260:	2201      	movs	r2, #1
 8011262:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8011264:	4b2f      	ldr	r3, [pc, #188]	@ (8011324 <SystemInit+0xdc>)
 8011266:	2200      	movs	r2, #0
 8011268:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 801126a:	4b2e      	ldr	r3, [pc, #184]	@ (8011324 <SystemInit+0xdc>)
 801126c:	2200      	movs	r2, #0
 801126e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8011270:	4b2c      	ldr	r3, [pc, #176]	@ (8011324 <SystemInit+0xdc>)
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	492b      	ldr	r1, [pc, #172]	@ (8011324 <SystemInit+0xdc>)
 8011276:	4b2c      	ldr	r3, [pc, #176]	@ (8011328 <SystemInit+0xe0>)
 8011278:	4013      	ands	r3, r2
 801127a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 801127c:	4b29      	ldr	r3, [pc, #164]	@ (8011324 <SystemInit+0xdc>)
 801127e:	2200      	movs	r2, #0
 8011280:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8011282:	4b28      	ldr	r3, [pc, #160]	@ (8011324 <SystemInit+0xdc>)
 8011284:	2200      	movs	r2, #0
 8011286:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8011288:	4b26      	ldr	r3, [pc, #152]	@ (8011324 <SystemInit+0xdc>)
 801128a:	2200      	movs	r2, #0
 801128c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 801128e:	4b25      	ldr	r3, [pc, #148]	@ (8011324 <SystemInit+0xdc>)
 8011290:	4a26      	ldr	r2, [pc, #152]	@ (801132c <SystemInit+0xe4>)
 8011292:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8011294:	4b23      	ldr	r3, [pc, #140]	@ (8011324 <SystemInit+0xdc>)
 8011296:	2200      	movs	r2, #0
 8011298:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 801129a:	4b22      	ldr	r3, [pc, #136]	@ (8011324 <SystemInit+0xdc>)
 801129c:	4a23      	ldr	r2, [pc, #140]	@ (801132c <SystemInit+0xe4>)
 801129e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80112a0:	4b20      	ldr	r3, [pc, #128]	@ (8011324 <SystemInit+0xdc>)
 80112a2:	2200      	movs	r2, #0
 80112a4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80112a6:	4b1f      	ldr	r3, [pc, #124]	@ (8011324 <SystemInit+0xdc>)
 80112a8:	4a20      	ldr	r2, [pc, #128]	@ (801132c <SystemInit+0xe4>)
 80112aa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80112ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011324 <SystemInit+0xdc>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80112b2:	4b1c      	ldr	r3, [pc, #112]	@ (8011324 <SystemInit+0xdc>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a1b      	ldr	r2, [pc, #108]	@ (8011324 <SystemInit+0xdc>)
 80112b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80112bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80112be:	4b19      	ldr	r3, [pc, #100]	@ (8011324 <SystemInit+0xdc>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80112c4:	4b16      	ldr	r3, [pc, #88]	@ (8011320 <SystemInit+0xd8>)
 80112c6:	4a1a      	ldr	r2, [pc, #104]	@ (8011330 <SystemInit+0xe8>)
 80112c8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80112ca:	4b1a      	ldr	r3, [pc, #104]	@ (8011334 <SystemInit+0xec>)
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80112d2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80112da:	d003      	beq.n	80112e4 <SystemInit+0x9c>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80112e2:	d117      	bne.n	8011314 <SystemInit+0xcc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80112e4:	4b13      	ldr	r3, [pc, #76]	@ (8011334 <SystemInit+0xec>)
 80112e6:	69db      	ldr	r3, [r3, #28]
 80112e8:	f003 0301 	and.w	r3, r3, #1
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d005      	beq.n	80112fc <SystemInit+0xb4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80112f0:	4b10      	ldr	r3, [pc, #64]	@ (8011334 <SystemInit+0xec>)
 80112f2:	4a11      	ldr	r2, [pc, #68]	@ (8011338 <SystemInit+0xf0>)
 80112f4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80112f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011334 <SystemInit+0xec>)
 80112f8:	4a10      	ldr	r2, [pc, #64]	@ (801133c <SystemInit+0xf4>)
 80112fa:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80112fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011334 <SystemInit+0xec>)
 80112fe:	69db      	ldr	r3, [r3, #28]
 8011300:	4a0c      	ldr	r2, [pc, #48]	@ (8011334 <SystemInit+0xec>)
 8011302:	f043 0302 	orr.w	r3, r3, #2
 8011306:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8011308:	4b0a      	ldr	r3, [pc, #40]	@ (8011334 <SystemInit+0xec>)
 801130a:	69db      	ldr	r3, [r3, #28]
 801130c:	4a09      	ldr	r2, [pc, #36]	@ (8011334 <SystemInit+0xec>)
 801130e:	f043 0301 	orr.w	r3, r3, #1
 8011312:	61d3      	str	r3, [r2, #28]
  }
}
 8011314:	bf00      	nop
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr
 8011320:	e000ed00 	.word	0xe000ed00
 8011324:	44020c00 	.word	0x44020c00
 8011328:	eae2eae3 	.word	0xeae2eae3
 801132c:	01010280 	.word	0x01010280
 8011330:	0800c000 	.word	0x0800c000
 8011334:	40022000 	.word	0x40022000
 8011338:	08192a3b 	.word	0x08192a3b
 801133c:	4c5d6e7f 	.word	0x4c5d6e7f

08011340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011340:	480d      	ldr	r0, [pc, #52]	@ (8011378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011344:	f7ff ff80 	bl	8011248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011348:	480c      	ldr	r0, [pc, #48]	@ (801137c <LoopForever+0x6>)
  ldr r1, =_edata
 801134a:	490d      	ldr	r1, [pc, #52]	@ (8011380 <LoopForever+0xa>)
  ldr r2, =_sidata
 801134c:	4a0d      	ldr	r2, [pc, #52]	@ (8011384 <LoopForever+0xe>)
  movs r3, #0
 801134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011350:	e002      	b.n	8011358 <LoopCopyDataInit>

08011352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011356:	3304      	adds	r3, #4

08011358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801135c:	d3f9      	bcc.n	8011352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801135e:	4a0a      	ldr	r2, [pc, #40]	@ (8011388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011360:	4c0a      	ldr	r4, [pc, #40]	@ (801138c <LoopForever+0x16>)
  movs r3, #0
 8011362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011364:	e001      	b.n	801136a <LoopFillZerobss>

08011366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011368:	3204      	adds	r2, #4

0801136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801136c:	d3fb      	bcc.n	8011366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801136e:	f00b fce7 	bl	801cd40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011372:	f7fe f9ff 	bl	800f774 <main>

08011376 <LoopForever>:

LoopForever:
    b LoopForever
 8011376:	e7fe      	b.n	8011376 <LoopForever>
  ldr   r0, =_estack
 8011378:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011380:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8011384:	0801f6e0 	.word	0x0801f6e0
  ldr r2, =_sbss
 8011388:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 801138c:	20007d44 	.word	0x20007d44

08011390 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011390:	e7fe      	b.n	8011390 <ADC1_IRQHandler>
	...

08011394 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011398:	2003      	movs	r0, #3
 801139a:	f000 f98a 	bl	80116b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 801139e:	f002 f9d3 	bl	8013748 <HAL_RCC_GetSysClockFreq>
 80113a2:	4602      	mov	r2, r0
 80113a4:	4b0c      	ldr	r3, [pc, #48]	@ (80113d8 <HAL_Init+0x44>)
 80113a6:	6a1b      	ldr	r3, [r3, #32]
 80113a8:	f003 030f 	and.w	r3, r3, #15
 80113ac:	490b      	ldr	r1, [pc, #44]	@ (80113dc <HAL_Init+0x48>)
 80113ae:	5ccb      	ldrb	r3, [r1, r3]
 80113b0:	fa22 f303 	lsr.w	r3, r2, r3
 80113b4:	4a0a      	ldr	r2, [pc, #40]	@ (80113e0 <HAL_Init+0x4c>)
 80113b6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80113b8:	2004      	movs	r0, #4
 80113ba:	f000 f9cf 	bl	801175c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80113be:	200f      	movs	r0, #15
 80113c0:	f000 f810 	bl	80113e4 <HAL_InitTick>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d001      	beq.n	80113ce <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80113ca:	2301      	movs	r3, #1
 80113cc:	e002      	b.n	80113d4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80113ce:	f7ff f9f2 	bl	80107b6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	44020c00 	.word	0x44020c00
 80113dc:	0801f320 	.word	0x0801f320
 80113e0:	200000a8 	.word	0x200000a8

080113e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80113f0:	4b33      	ldr	r3, [pc, #204]	@ (80114c0 <HAL_InitTick+0xdc>)
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d101      	bne.n	80113fc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80113f8:	2301      	movs	r3, #1
 80113fa:	e05c      	b.n	80114b6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80113fc:	4b31      	ldr	r3, [pc, #196]	@ (80114c4 <HAL_InitTick+0xe0>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f003 0304 	and.w	r3, r3, #4
 8011404:	2b04      	cmp	r3, #4
 8011406:	d10c      	bne.n	8011422 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8011408:	4b2f      	ldr	r3, [pc, #188]	@ (80114c8 <HAL_InitTick+0xe4>)
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	4b2c      	ldr	r3, [pc, #176]	@ (80114c0 <HAL_InitTick+0xdc>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	4619      	mov	r1, r3
 8011412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011416:	fbb3 f3f1 	udiv	r3, r3, r1
 801141a:	fbb2 f3f3 	udiv	r3, r2, r3
 801141e:	60fb      	str	r3, [r7, #12]
 8011420:	e037      	b.n	8011492 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8011422:	f000 f9f3 	bl	801180c <HAL_SYSTICK_GetCLKSourceConfig>
 8011426:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	2b02      	cmp	r3, #2
 801142c:	d023      	beq.n	8011476 <HAL_InitTick+0x92>
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	2b02      	cmp	r3, #2
 8011432:	d82d      	bhi.n	8011490 <HAL_InitTick+0xac>
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d003      	beq.n	8011442 <HAL_InitTick+0x5e>
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	2b01      	cmp	r3, #1
 801143e:	d00d      	beq.n	801145c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8011440:	e026      	b.n	8011490 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8011442:	4b21      	ldr	r3, [pc, #132]	@ (80114c8 <HAL_InitTick+0xe4>)
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	4b1e      	ldr	r3, [pc, #120]	@ (80114c0 <HAL_InitTick+0xdc>)
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	4619      	mov	r1, r3
 801144c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8011450:	fbb3 f3f1 	udiv	r3, r3, r1
 8011454:	fbb2 f3f3 	udiv	r3, r2, r3
 8011458:	60fb      	str	r3, [r7, #12]
        break;
 801145a:	e01a      	b.n	8011492 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 801145c:	4b18      	ldr	r3, [pc, #96]	@ (80114c0 <HAL_InitTick+0xdc>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	461a      	mov	r2, r3
 8011462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011466:	fbb3 f3f2 	udiv	r3, r3, r2
 801146a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 801146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011472:	60fb      	str	r3, [r7, #12]
        break;
 8011474:	e00d      	b.n	8011492 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8011476:	4b12      	ldr	r3, [pc, #72]	@ (80114c0 <HAL_InitTick+0xdc>)
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	461a      	mov	r2, r3
 801147c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011480:	fbb3 f3f2 	udiv	r3, r3, r2
 8011484:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011488:	fbb2 f3f3 	udiv	r3, r2, r3
 801148c:	60fb      	str	r3, [r7, #12]
        break;
 801148e:	e000      	b.n	8011492 <HAL_InitTick+0xae>
        break;
 8011490:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	f000 f940 	bl	8011718 <HAL_SYSTICK_Config>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	e009      	b.n	80114b6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80114a2:	2200      	movs	r2, #0
 80114a4:	6879      	ldr	r1, [r7, #4]
 80114a6:	f04f 30ff 	mov.w	r0, #4294967295
 80114aa:	f000 f90d 	bl	80116c8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80114ae:	4a07      	ldr	r2, [pc, #28]	@ (80114cc <HAL_InitTick+0xe8>)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80114b4:	2300      	movs	r3, #0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	200000b0 	.word	0x200000b0
 80114c4:	e000e010 	.word	0xe000e010
 80114c8:	200000a8 	.word	0x200000a8
 80114cc:	200000ac 	.word	0x200000ac

080114d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80114d0:	b480      	push	{r7}
 80114d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80114d4:	4b06      	ldr	r3, [pc, #24]	@ (80114f0 <HAL_IncTick+0x20>)
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	461a      	mov	r2, r3
 80114da:	4b06      	ldr	r3, [pc, #24]	@ (80114f4 <HAL_IncTick+0x24>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	4413      	add	r3, r2
 80114e0:	4a04      	ldr	r2, [pc, #16]	@ (80114f4 <HAL_IncTick+0x24>)
 80114e2:	6013      	str	r3, [r2, #0]
}
 80114e4:	bf00      	nop
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	200000b0 	.word	0x200000b0
 80114f4:	20007bf4 	.word	0x20007bf4

080114f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80114f8:	b480      	push	{r7}
 80114fa:	af00      	add	r7, sp, #0
  return uwTick;
 80114fc:	4b03      	ldr	r3, [pc, #12]	@ (801150c <HAL_GetTick+0x14>)
 80114fe:	681b      	ldr	r3, [r3, #0]
}
 8011500:	4618      	mov	r0, r3
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop
 801150c:	20007bf4 	.word	0x20007bf4

08011510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011518:	f7ff ffee 	bl	80114f8 <HAL_GetTick>
 801151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011528:	d005      	beq.n	8011536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801152a:	4b0a      	ldr	r3, [pc, #40]	@ (8011554 <HAL_Delay+0x44>)
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	461a      	mov	r2, r3
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4413      	add	r3, r2
 8011534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011536:	bf00      	nop
 8011538:	f7ff ffde 	bl	80114f8 <HAL_GetTick>
 801153c:	4602      	mov	r2, r0
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	1ad3      	subs	r3, r2, r3
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	429a      	cmp	r2, r3
 8011546:	d8f7      	bhi.n	8011538 <HAL_Delay+0x28>
  {
  }
}
 8011548:	bf00      	nop
 801154a:	bf00      	nop
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	200000b0 	.word	0x200000b0

08011558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f003 0307 	and.w	r3, r3, #7
 8011566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011568:	4b0c      	ldr	r3, [pc, #48]	@ (801159c <__NVIC_SetPriorityGrouping+0x44>)
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8011574:	4013      	ands	r3, r2
 8011576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8011584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801158a:	4a04      	ldr	r2, [pc, #16]	@ (801159c <__NVIC_SetPriorityGrouping+0x44>)
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	60d3      	str	r3, [r2, #12]
}
 8011590:	bf00      	nop
 8011592:	3714      	adds	r7, #20
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	e000ed00 	.word	0xe000ed00

080115a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80115a0:	b480      	push	{r7}
 80115a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80115a4:	4b04      	ldr	r3, [pc, #16]	@ (80115b8 <__NVIC_GetPriorityGrouping+0x18>)
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	0a1b      	lsrs	r3, r3, #8
 80115aa:	f003 0307 	and.w	r3, r3, #7
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	e000ed00 	.word	0xe000ed00

080115bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80115c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	db0b      	blt.n	80115e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80115ce:	88fb      	ldrh	r3, [r7, #6]
 80115d0:	f003 021f 	and.w	r2, r3, #31
 80115d4:	4907      	ldr	r1, [pc, #28]	@ (80115f4 <__NVIC_EnableIRQ+0x38>)
 80115d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115da:	095b      	lsrs	r3, r3, #5
 80115dc:	2001      	movs	r0, #1
 80115de:	fa00 f202 	lsl.w	r2, r0, r2
 80115e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80115e6:	bf00      	nop
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop
 80115f4:	e000e100 	.word	0xe000e100

080115f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	6039      	str	r1, [r7, #0]
 8011602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011608:	2b00      	cmp	r3, #0
 801160a:	db0a      	blt.n	8011622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	b2da      	uxtb	r2, r3
 8011610:	490c      	ldr	r1, [pc, #48]	@ (8011644 <__NVIC_SetPriority+0x4c>)
 8011612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011616:	0112      	lsls	r2, r2, #4
 8011618:	b2d2      	uxtb	r2, r2
 801161a:	440b      	add	r3, r1
 801161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011620:	e00a      	b.n	8011638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	b2da      	uxtb	r2, r3
 8011626:	4908      	ldr	r1, [pc, #32]	@ (8011648 <__NVIC_SetPriority+0x50>)
 8011628:	88fb      	ldrh	r3, [r7, #6]
 801162a:	f003 030f 	and.w	r3, r3, #15
 801162e:	3b04      	subs	r3, #4
 8011630:	0112      	lsls	r2, r2, #4
 8011632:	b2d2      	uxtb	r2, r2
 8011634:	440b      	add	r3, r1
 8011636:	761a      	strb	r2, [r3, #24]
}
 8011638:	bf00      	nop
 801163a:	370c      	adds	r7, #12
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	e000e100 	.word	0xe000e100
 8011648:	e000ed00 	.word	0xe000ed00

0801164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801164c:	b480      	push	{r7}
 801164e:	b089      	sub	sp, #36	@ 0x24
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f003 0307 	and.w	r3, r3, #7
 801165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	f1c3 0307 	rsb	r3, r3, #7
 8011666:	2b04      	cmp	r3, #4
 8011668:	bf28      	it	cs
 801166a:	2304      	movcs	r3, #4
 801166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	3304      	adds	r3, #4
 8011672:	2b06      	cmp	r3, #6
 8011674:	d902      	bls.n	801167c <NVIC_EncodePriority+0x30>
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	3b03      	subs	r3, #3
 801167a:	e000      	b.n	801167e <NVIC_EncodePriority+0x32>
 801167c:	2300      	movs	r3, #0
 801167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011680:	f04f 32ff 	mov.w	r2, #4294967295
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	fa02 f303 	lsl.w	r3, r2, r3
 801168a:	43da      	mvns	r2, r3
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	401a      	ands	r2, r3
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011694:	f04f 31ff 	mov.w	r1, #4294967295
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	fa01 f303 	lsl.w	r3, r1, r3
 801169e:	43d9      	mvns	r1, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80116a4:	4313      	orrs	r3, r2
         );
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3724      	adds	r7, #36	@ 0x24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f7ff ff4c 	bl	8011558 <__NVIC_SetPriorityGrouping>
}
 80116c0:	bf00      	nop
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80116d6:	f7ff ff63 	bl	80115a0 <__NVIC_GetPriorityGrouping>
 80116da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	6978      	ldr	r0, [r7, #20]
 80116e2:	f7ff ffb3 	bl	801164c <NVIC_EncodePriority>
 80116e6:	4602      	mov	r2, r0
 80116e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80116ec:	4611      	mov	r1, r2
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff ff82 	bl	80115f8 <__NVIC_SetPriority>
}
 80116f4:	bf00      	nop
 80116f6:	3718      	adds	r7, #24
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	4603      	mov	r3, r0
 8011704:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801170a:	4618      	mov	r0, r3
 801170c:	f7ff ff56 	bl	80115bc <__NVIC_EnableIRQ>
}
 8011710:	bf00      	nop
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3b01      	subs	r3, #1
 8011724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011728:	d301      	bcc.n	801172e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 801172a:	2301      	movs	r3, #1
 801172c:	e00d      	b.n	801174a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 801172e:	4a0a      	ldr	r2, [pc, #40]	@ (8011758 <HAL_SYSTICK_Config+0x40>)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	3b01      	subs	r3, #1
 8011734:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8011736:	4b08      	ldr	r3, [pc, #32]	@ (8011758 <HAL_SYSTICK_Config+0x40>)
 8011738:	2200      	movs	r2, #0
 801173a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 801173c:	4b06      	ldr	r3, [pc, #24]	@ (8011758 <HAL_SYSTICK_Config+0x40>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4a05      	ldr	r2, [pc, #20]	@ (8011758 <HAL_SYSTICK_Config+0x40>)
 8011742:	f043 0303 	orr.w	r3, r3, #3
 8011746:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8011748:	2300      	movs	r3, #0
}
 801174a:	4618      	mov	r0, r3
 801174c:	370c      	adds	r7, #12
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop
 8011758:	e000e010 	.word	0xe000e010

0801175c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b04      	cmp	r3, #4
 8011768:	d844      	bhi.n	80117f4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 801176a:	a201      	add	r2, pc, #4	@ (adr r2, 8011770 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 801176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011770:	08011793 	.word	0x08011793
 8011774:	080117b1 	.word	0x080117b1
 8011778:	080117d3 	.word	0x080117d3
 801177c:	080117f5 	.word	0x080117f5
 8011780:	08011785 	.word	0x08011785
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8011784:	4b1f      	ldr	r3, [pc, #124]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4a1e      	ldr	r2, [pc, #120]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 801178a:	f043 0304 	orr.w	r3, r3, #4
 801178e:	6013      	str	r3, [r2, #0]
      break;
 8011790:	e031      	b.n	80117f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8011792:	4b1c      	ldr	r3, [pc, #112]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a1b      	ldr	r2, [pc, #108]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8011798:	f023 0304 	bic.w	r3, r3, #4
 801179c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 801179e:	4b1a      	ldr	r3, [pc, #104]	@ (8011808 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80117a4:	4a18      	ldr	r2, [pc, #96]	@ (8011808 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117a6:	f023 030c 	bic.w	r3, r3, #12
 80117aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80117ae:	e022      	b.n	80117f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80117b0:	4b14      	ldr	r3, [pc, #80]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4a13      	ldr	r2, [pc, #76]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117b6:	f023 0304 	bic.w	r3, r3, #4
 80117ba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80117bc:	4b12      	ldr	r3, [pc, #72]	@ (8011808 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80117c2:	f023 030c 	bic.w	r3, r3, #12
 80117c6:	4a10      	ldr	r2, [pc, #64]	@ (8011808 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117c8:	f043 0304 	orr.w	r3, r3, #4
 80117cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80117d0:	e011      	b.n	80117f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80117d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4a0b      	ldr	r2, [pc, #44]	@ (8011804 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117d8:	f023 0304 	bic.w	r3, r3, #4
 80117dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80117de:	4b0a      	ldr	r3, [pc, #40]	@ (8011808 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80117e4:	f023 030c 	bic.w	r3, r3, #12
 80117e8:	4a07      	ldr	r2, [pc, #28]	@ (8011808 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117ea:	f043 0308 	orr.w	r3, r3, #8
 80117ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80117f2:	e000      	b.n	80117f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80117f4:	bf00      	nop
  }
}
 80117f6:	bf00      	nop
 80117f8:	370c      	adds	r7, #12
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	e000e010 	.word	0xe000e010
 8011808:	44020c00 	.word	0x44020c00

0801180c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8011812:	4b17      	ldr	r3, [pc, #92]	@ (8011870 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f003 0304 	and.w	r3, r3, #4
 801181a:	2b00      	cmp	r3, #0
 801181c:	d002      	beq.n	8011824 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 801181e:	2304      	movs	r3, #4
 8011820:	607b      	str	r3, [r7, #4]
 8011822:	e01e      	b.n	8011862 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8011824:	4b13      	ldr	r3, [pc, #76]	@ (8011874 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8011826:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801182a:	f003 030c 	and.w	r3, r3, #12
 801182e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	2b08      	cmp	r3, #8
 8011834:	d00f      	beq.n	8011856 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	2b08      	cmp	r3, #8
 801183a:	d80f      	bhi.n	801185c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d003      	beq.n	801184a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	2b04      	cmp	r3, #4
 8011846:	d003      	beq.n	8011850 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8011848:	e008      	b.n	801185c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 801184a:	2300      	movs	r3, #0
 801184c:	607b      	str	r3, [r7, #4]
        break;
 801184e:	e008      	b.n	8011862 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8011850:	2301      	movs	r3, #1
 8011852:	607b      	str	r3, [r7, #4]
        break;
 8011854:	e005      	b.n	8011862 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8011856:	2302      	movs	r3, #2
 8011858:	607b      	str	r3, [r7, #4]
        break;
 801185a:	e002      	b.n	8011862 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 801185c:	2300      	movs	r3, #0
 801185e:	607b      	str	r3, [r7, #4]
        break;
 8011860:	bf00      	nop
    }
  }
  return systick_source;
 8011862:	687b      	ldr	r3, [r7, #4]
}
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	e000e010 	.word	0xe000e010
 8011874:	44020c00 	.word	0x44020c00

08011878 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8011880:	f7ff fe3a 	bl	80114f8 <HAL_GetTick>
 8011884:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d101      	bne.n	8011890 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801188c:	2301      	movs	r3, #1
 801188e:	e06b      	b.n	8011968 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b02      	cmp	r3, #2
 801189a:	d008      	beq.n	80118ae <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2220      	movs	r2, #32
 80118a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2200      	movs	r2, #0
 80118a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	e05c      	b.n	8011968 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	695a      	ldr	r2, [r3, #20]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f042 0204 	orr.w	r2, r2, #4
 80118bc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2205      	movs	r2, #5
 80118c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80118c6:	e020      	b.n	801190a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80118c8:	f7ff fe16 	bl	80114f8 <HAL_GetTick>
 80118cc:	4602      	mov	r2, r0
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	2b05      	cmp	r3, #5
 80118d4:	d919      	bls.n	801190a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118da:	f043 0210 	orr.w	r2, r3, #16
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2203      	movs	r2, #3
 80118e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d003      	beq.n	80118fe <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118fa:	2201      	movs	r2, #1
 80118fc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8011906:	2301      	movs	r3, #1
 8011908:	e02e      	b.n	8011968 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	691b      	ldr	r3, [r3, #16]
 8011910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011914:	2b00      	cmp	r3, #0
 8011916:	d0d7      	beq.n	80118c8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	695a      	ldr	r2, [r3, #20]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f042 0202 	orr.w	r2, r2, #2
 8011926:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2204      	movs	r2, #4
 801192c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8011938:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2201      	movs	r2, #1
 801193e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801194a:	2b00      	cmp	r3, #0
 801194c:	d007      	beq.n	801195e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011952:	2201      	movs	r2, #1
 8011954:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2200      	movs	r2, #0
 801195c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011966:	2300      	movs	r3, #0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d101      	bne.n	8011982 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801197e:	2301      	movs	r3, #1
 8011980:	e019      	b.n	80119b6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b02      	cmp	r3, #2
 801198c:	d004      	beq.n	8011998 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2220      	movs	r2, #32
 8011992:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8011994:	2301      	movs	r3, #1
 8011996:	e00e      	b.n	80119b6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2204      	movs	r2, #4
 801199c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	695b      	ldr	r3, [r3, #20]
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	6812      	ldr	r2, [r2, #0]
 80119aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80119ae:	f043 0304 	orr.w	r3, r3, #4
 80119b2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	370c      	adds	r7, #12
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
	...

080119c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b087      	sub	sp, #28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80119ce:	2300      	movs	r3, #0
 80119d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80119d2:	e136      	b.n	8011c42 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	2101      	movs	r1, #1
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	fa01 f303 	lsl.w	r3, r1, r3
 80119e0:	4013      	ands	r3, r2
 80119e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f000 8128 	beq.w	8011c3c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	2b02      	cmp	r3, #2
 80119f2:	d003      	beq.n	80119fc <HAL_GPIO_Init+0x38>
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	2b12      	cmp	r3, #18
 80119fa:	d125      	bne.n	8011a48 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	08da      	lsrs	r2, r3, #3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	3208      	adds	r2, #8
 8011a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a08:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	f003 0307 	and.w	r3, r3, #7
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	220f      	movs	r2, #15
 8011a14:	fa02 f303 	lsl.w	r3, r2, r3
 8011a18:	43db      	mvns	r3, r3
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	4013      	ands	r3, r2
 8011a1e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	f003 020f 	and.w	r2, r3, #15
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	f003 0307 	and.w	r3, r3, #7
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	fa02 f303 	lsl.w	r3, r2, r3
 8011a34:	697a      	ldr	r2, [r7, #20]
 8011a36:	4313      	orrs	r3, r2
 8011a38:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	08da      	lsrs	r2, r3, #3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3208      	adds	r2, #8
 8011a42:	6979      	ldr	r1, [r7, #20]
 8011a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	005b      	lsls	r3, r3, #1
 8011a52:	2203      	movs	r2, #3
 8011a54:	fa02 f303 	lsl.w	r3, r2, r3
 8011a58:	43db      	mvns	r3, r3
 8011a5a:	697a      	ldr	r2, [r7, #20]
 8011a5c:	4013      	ands	r3, r2
 8011a5e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	f003 0203 	and.w	r2, r3, #3
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a70:	697a      	ldr	r2, [r7, #20]
 8011a72:	4313      	orrs	r3, r2
 8011a74:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	697a      	ldr	r2, [r7, #20]
 8011a7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d00b      	beq.n	8011a9c <HAL_GPIO_Init+0xd8>
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d007      	beq.n	8011a9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011a90:	2b11      	cmp	r3, #17
 8011a92:	d003      	beq.n	8011a9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	2b12      	cmp	r3, #18
 8011a9a:	d130      	bne.n	8011afe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8011aac:	43db      	mvns	r3, r3
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	68da      	ldr	r2, [r3, #12]
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	005b      	lsls	r3, r3, #1
 8011abc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	697a      	ldr	r2, [r7, #20]
 8011aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8011ada:	43db      	mvns	r3, r3
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	4013      	ands	r3, r2
 8011ae0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	091b      	lsrs	r3, r3, #4
 8011ae8:	f003 0201 	and.w	r2, r3, #1
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	fa02 f303 	lsl.w	r3, r2, r3
 8011af2:	697a      	ldr	r2, [r7, #20]
 8011af4:	4313      	orrs	r3, r2
 8011af6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	697a      	ldr	r2, [r7, #20]
 8011afc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	2b03      	cmp	r3, #3
 8011b04:	d017      	beq.n	8011b36 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	005b      	lsls	r3, r3, #1
 8011b10:	2203      	movs	r2, #3
 8011b12:	fa02 f303 	lsl.w	r3, r2, r3
 8011b16:	43db      	mvns	r3, r3
 8011b18:	697a      	ldr	r2, [r7, #20]
 8011b1a:	4013      	ands	r3, r2
 8011b1c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	689a      	ldr	r2, [r3, #8]
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	005b      	lsls	r3, r3, #1
 8011b26:	fa02 f303 	lsl.w	r3, r2, r3
 8011b2a:	697a      	ldr	r2, [r7, #20]
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	697a      	ldr	r2, [r7, #20]
 8011b34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d07c      	beq.n	8011c3c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8011b42:	4a47      	ldr	r2, [pc, #284]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	089b      	lsrs	r3, r3, #2
 8011b48:	3318      	adds	r3, #24
 8011b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b4e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	f003 0303 	and.w	r3, r3, #3
 8011b56:	00db      	lsls	r3, r3, #3
 8011b58:	220f      	movs	r2, #15
 8011b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b5e:	43db      	mvns	r3, r3
 8011b60:	697a      	ldr	r2, [r7, #20]
 8011b62:	4013      	ands	r3, r2
 8011b64:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	0a9a      	lsrs	r2, r3, #10
 8011b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8011c64 <HAL_GPIO_Init+0x2a0>)
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	693a      	ldr	r2, [r7, #16]
 8011b70:	f002 0203 	and.w	r2, r2, #3
 8011b74:	00d2      	lsls	r2, r2, #3
 8011b76:	4093      	lsls	r3, r2
 8011b78:	697a      	ldr	r2, [r7, #20]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8011b7e:	4938      	ldr	r1, [pc, #224]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	089b      	lsrs	r3, r3, #2
 8011b84:	3318      	adds	r3, #24
 8011b86:	697a      	ldr	r2, [r7, #20]
 8011b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8011b8c:	4b34      	ldr	r3, [pc, #208]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	43db      	mvns	r3, r3
 8011b96:	697a      	ldr	r2, [r7, #20]
 8011b98:	4013      	ands	r3, r2
 8011b9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d003      	beq.n	8011bb0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	4313      	orrs	r3, r2
 8011bae:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8011bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8011bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	43db      	mvns	r3, r3
 8011bc0:	697a      	ldr	r2, [r7, #20]
 8011bc2:	4013      	ands	r3, r2
 8011bc4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d003      	beq.n	8011bda <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8011bd2:	697a      	ldr	r2, [r7, #20]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8011bda:	4a21      	ldr	r2, [pc, #132]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8011be0:	4b1f      	ldr	r3, [pc, #124]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011be6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	43db      	mvns	r3, r3
 8011bec:	697a      	ldr	r2, [r7, #20]
 8011bee:	4013      	ands	r3, r2
 8011bf0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d003      	beq.n	8011c06 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8011bfe:	697a      	ldr	r2, [r7, #20]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4313      	orrs	r3, r2
 8011c04:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8011c06:	4a16      	ldr	r2, [pc, #88]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8011c0e:	4b14      	ldr	r3, [pc, #80]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	43db      	mvns	r3, r3
 8011c1a:	697a      	ldr	r2, [r7, #20]
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d003      	beq.n	8011c34 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	4313      	orrs	r3, r2
 8011c32:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8011c34:	4a0a      	ldr	r2, [pc, #40]	@ (8011c60 <HAL_GPIO_Init+0x29c>)
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	fa22 f303 	lsr.w	r3, r2, r3
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f47f aec1 	bne.w	80119d4 <HAL_GPIO_Init+0x10>
  }
}
 8011c52:	bf00      	nop
 8011c54:	bf00      	nop
 8011c56:	371c      	adds	r7, #28
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr
 8011c60:	44022000 	.word	0x44022000
 8011c64:	002f7f7f 	.word	0x002f7f7f

08011c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	460b      	mov	r3, r1
 8011c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	691a      	ldr	r2, [r3, #16]
 8011c78:	887b      	ldrh	r3, [r7, #2]
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d002      	beq.n	8011c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011c80:	2301      	movs	r3, #1
 8011c82:	73fb      	strb	r3, [r7, #15]
 8011c84:	e001      	b.n	8011c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011c86:	2300      	movs	r3, #0
 8011c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	807b      	strh	r3, [r7, #2]
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011ca8:	787b      	ldrb	r3, [r7, #1]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d003      	beq.n	8011cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011cae:	887a      	ldrh	r2, [r7, #2]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011cb4:	e002      	b.n	8011cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011cb6:	887a      	ldrh	r2, [r7, #2]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011cbc:	bf00      	nop
 8011cbe:	370c      	adds	r7, #12
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	695b      	ldr	r3, [r3, #20]
 8011cd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011cda:	887a      	ldrh	r2, [r7, #2]
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	4013      	ands	r3, r2
 8011ce0:	041a      	lsls	r2, r3, #16
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	43d9      	mvns	r1, r3
 8011ce6:	887b      	ldrh	r3, [r7, #2]
 8011ce8:	400b      	ands	r3, r1
 8011cea:	431a      	orrs	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	619a      	str	r2, [r3, #24]
}
 8011cf0:	bf00      	nop
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	4603      	mov	r3, r0
 8011d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8011d06:	4b0f      	ldr	r3, [pc, #60]	@ (8011d44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d08:	68da      	ldr	r2, [r3, #12]
 8011d0a:	88fb      	ldrh	r3, [r7, #6]
 8011d0c:	4013      	ands	r3, r2
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d006      	beq.n	8011d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8011d12:	4a0c      	ldr	r2, [pc, #48]	@ (8011d44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d14:	88fb      	ldrh	r3, [r7, #6]
 8011d16:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8011d18:	88fb      	ldrh	r3, [r7, #6]
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f000 f814 	bl	8011d48 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8011d20:	4b08      	ldr	r3, [pc, #32]	@ (8011d44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d22:	691a      	ldr	r2, [r3, #16]
 8011d24:	88fb      	ldrh	r3, [r7, #6]
 8011d26:	4013      	ands	r3, r2
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d006      	beq.n	8011d3a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8011d2c:	4a05      	ldr	r2, [pc, #20]	@ (8011d44 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d2e:	88fb      	ldrh	r3, [r7, #6]
 8011d30:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8011d32:	88fb      	ldrh	r3, [r7, #6]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fe fd2d 	bl	8010794 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8011d3a:	bf00      	nop
 8011d3c:	3708      	adds	r7, #8
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	44022000 	.word	0x44022000

08011d48 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	4603      	mov	r3, r0
 8011d50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8011d52:	bf00      	nop
 8011d54:	370c      	adds	r7, #12
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
	...

08011d60 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8011d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8011d9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f003 0301 	and.w	r3, r3, #1
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d002      	beq.n	8011d7e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	73fb      	strb	r3, [r7, #15]
 8011d7c:	e007      	b.n	8011d8e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8011d7e:	4b07      	ldr	r3, [pc, #28]	@ (8011d9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f023 0204 	bic.w	r2, r3, #4
 8011d86:	4905      	ldr	r1, [pc, #20]	@ (8011d9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	4313      	orrs	r3, r2
 8011d8c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3714      	adds	r7, #20
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	40030400 	.word	0x40030400

08011da0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8011da0:	b480      	push	{r7}
 8011da2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8011da4:	4b05      	ldr	r3, [pc, #20]	@ (8011dbc <HAL_ICACHE_Enable+0x1c>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4a04      	ldr	r2, [pc, #16]	@ (8011dbc <HAL_ICACHE_Enable+0x1c>)
 8011daa:	f043 0301 	orr.w	r3, r3, #1
 8011dae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011db0:	2300      	movs	r3, #0
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	40030400 	.word	0x40030400

08011dc0 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d101      	bne.n	8011dd6 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e037      	b.n	8011e46 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d106      	bne.n	8011df0 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2200      	movs	r2, #0
 8011de6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f7ff f8ee 	bl	8010fcc <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	3304      	adds	r3, #4
 8011df8:	4619      	mov	r1, r3
 8011dfa:	4610      	mov	r0, r2
 8011dfc:	f00a f94e 	bl	801c09c <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	6818      	ldr	r0, [r3, #0]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	461a      	mov	r2, r3
 8011e0a:	68b9      	ldr	r1, [r7, #8]
 8011e0c:	f00a f970 	bl	801c0f0 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6818      	ldr	r0, [r3, #0]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	461a      	mov	r2, r3
 8011e1a:	6879      	ldr	r1, [r7, #4]
 8011e1c:	f00a f985 	bl	801c12a <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f042 0204 	orr.w	r2, r2, #4
 8011e2e:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011e30:	4b07      	ldr	r3, [pc, #28]	@ (8011e50 <HAL_NAND_Init+0x90>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a06      	ldr	r2, [pc, #24]	@ (8011e50 <HAL_NAND_Init+0x90>)
 8011e36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011e3a:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2201      	movs	r2, #1
 8011e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3710      	adds	r7, #16
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	47000400 	.word	0x47000400

08011e54 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8011e54:	b480      	push	{r7}
 8011e56:	b085      	sub	sp, #20
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	2b02      	cmp	r3, #2
 8011e66:	d101      	bne.n	8011e6c <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8011e68:	2302      	movs	r3, #2
 8011e6a:	e027      	b.n	8011ebc <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d120      	bne.n	8011eba <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d101      	bne.n	8011e86 <HAL_NAND_Reset+0x32>
 8011e82:	2302      	movs	r3, #2
 8011e84:	e01a      	b.n	8011ebc <HAL_NAND_Reset+0x68>
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2201      	movs	r2, #1
 8011e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2202      	movs	r2, #2
 8011e92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8011e96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011e9a:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011ea2:	22ff      	movs	r2, #255	@ 0xff
 8011ea4:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2201      	movs	r2, #1
 8011eaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	e000      	b.n	8011ebc <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8011eba:	2301      	movs	r3, #1

}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3714      	adds	r7, #20
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr

08011ec8 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b08c      	sub	sp, #48	@ 0x30
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	60b9      	str	r1, [r7, #8]
 8011ed2:	607a      	str	r2, [r7, #4]
 8011ed4:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	2b02      	cmp	r3, #2
 8011eec:	d101      	bne.n	8011ef2 <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8011eee:	2302      	movs	r3, #2
 8011ef0:	e140      	b.n	8012174 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	f040 8139 	bne.w	8012172 <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d101      	bne.n	8011f0e <HAL_NAND_Read_Page_8b+0x46>
 8011f0a:	2302      	movs	r3, #2
 8011f0c:	e132      	b.n	8012174 <HAL_NAND_Read_Page_8b+0x2ac>
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2201      	movs	r2, #1
 8011f12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2202      	movs	r2, #2
 8011f1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8011f1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011f22:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	881b      	ldrh	r3, [r3, #0]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	889b      	ldrh	r3, [r3, #4]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	885b      	ldrh	r3, [r3, #2]
 8011f34:	4618      	mov	r0, r3
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f3a:	fb00 f303 	mul.w	r3, r0, r3
 8011f3e:	4413      	add	r3, r2
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011f44:	fb02 f303 	mul.w	r3, r2, r3
 8011f48:	440b      	add	r3, r1
 8011f4a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8011f4c:	e0fa      	b.n	8012144 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011f54:	2200      	movs	r2, #0
 8011f56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011f58:	f3bf 8f4f 	dsb	sy
}
 8011f5c:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f66:	d848      	bhi.n	8011ffa <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f6c:	68fa      	ldr	r2, [r7, #12]
 8011f6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011f70:	fb02 f303 	mul.w	r3, r2, r3
 8011f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f78:	d21a      	bcs.n	8011fb0 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f80:	2200      	movs	r2, #0
 8011f82:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011f84:	f3bf 8f4f 	dsb	sy
}
 8011f88:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f92:	b2d2      	uxtb	r2, r2
 8011f94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011f96:	f3bf 8f4f 	dsb	sy
}
 8011f9a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8011f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f9e:	0a1a      	lsrs	r2, r3, #8
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fa6:	b2d2      	uxtb	r2, r2
 8011fa8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011faa:	f3bf 8f4f 	dsb	sy
}
 8011fae:	e07d      	b.n	80120ac <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011fba:	f3bf 8f4f 	dsb	sy
}
 8011fbe:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8011fc0:	69bb      	ldr	r3, [r7, #24]
 8011fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fc8:	b2d2      	uxtb	r2, r2
 8011fca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011fcc:	f3bf 8f4f 	dsb	sy
}
 8011fd0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd4:	0a1a      	lsrs	r2, r3, #8
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fdc:	b2d2      	uxtb	r2, r2
 8011fde:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011fe0:	f3bf 8f4f 	dsb	sy
}
 8011fe4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe8:	0c1a      	lsrs	r2, r3, #16
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011ff0:	b2d2      	uxtb	r2, r2
 8011ff2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011ff4:	f3bf 8f4f 	dsb	sy
}
 8011ff8:	e058      	b.n	80120ac <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012002:	fb02 f303 	mul.w	r3, r2, r3
 8012006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801200a:	d222      	bcs.n	8012052 <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012012:	2200      	movs	r2, #0
 8012014:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012016:	f3bf 8f4f 	dsb	sy
}
 801201a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012022:	2200      	movs	r2, #0
 8012024:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012026:	f3bf 8f4f 	dsb	sy
}
 801202a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012034:	b2d2      	uxtb	r2, r2
 8012036:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012038:	f3bf 8f4f 	dsb	sy
}
 801203c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012040:	0a1a      	lsrs	r2, r3, #8
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012048:	b2d2      	uxtb	r2, r2
 801204a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801204c:	f3bf 8f4f 	dsb	sy
}
 8012050:	e02c      	b.n	80120ac <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012058:	2200      	movs	r2, #0
 801205a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801205c:	f3bf 8f4f 	dsb	sy
}
 8012060:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012068:	2200      	movs	r2, #0
 801206a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801206c:	f3bf 8f4f 	dsb	sy
}
 8012070:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801207a:	b2d2      	uxtb	r2, r2
 801207c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801207e:	f3bf 8f4f 	dsb	sy
}
 8012082:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012086:	0a1a      	lsrs	r2, r3, #8
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801208e:	b2d2      	uxtb	r2, r2
 8012090:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012092:	f3bf 8f4f 	dsb	sy
}
 8012096:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801209a:	0c1a      	lsrs	r2, r3, #16
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120a2:	b2d2      	uxtb	r2, r2
 80120a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120a6:	f3bf 8f4f 	dsb	sy
}
 80120aa:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80120b2:	2230      	movs	r2, #48	@ 0x30
 80120b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120b6:	f3bf 8f4f 	dsb	sy
}
 80120ba:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d123      	bne.n	801210e <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80120c6:	f7ff fa17 	bl	80114f8 <HAL_GetTick>
 80120ca:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80120cc:	e011      	b.n	80120f2 <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80120ce:	f7ff fa13 	bl	80114f8 <HAL_GetTick>
 80120d2:	4602      	mov	r2, r0
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120dc:	d909      	bls.n	80120f2 <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2203      	movs	r2, #3
 80120e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80120ee:	2303      	movs	r3, #3
 80120f0:	e040      	b.n	8012174 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f000 fd13 	bl	8012b1e <HAL_NAND_Read_Status>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b40      	cmp	r3, #64	@ 0x40
 80120fc:	d1e7      	bne.n	80120ce <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012104:	2200      	movs	r2, #0
 8012106:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012108:	f3bf 8f4f 	dsb	sy
}
 801210c:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 801210e:	2300      	movs	r3, #0
 8012110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012112:	e009      	b.n	8012128 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	781a      	ldrb	r2, [r3, #0]
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	701a      	strb	r2, [r3, #0]
        buff++;
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	3301      	adds	r3, #1
 8012120:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8012122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012124:	3301      	adds	r3, #1
 8012126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801212c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801212e:	429a      	cmp	r2, r3
 8012130:	d3f0      	bcc.n	8012114 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8012132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012134:	3301      	adds	r3, #1
 8012136:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	3b01      	subs	r3, #1
 801213c:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 801213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012140:	3301      	adds	r3, #1
 8012142:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d009      	beq.n	801215e <HAL_NAND_Read_Page_8b+0x296>
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801214e:	68fa      	ldr	r2, [r7, #12]
 8012150:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012152:	fb02 f303 	mul.w	r3, r2, r3
 8012156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012158:	429a      	cmp	r2, r3
 801215a:	f4ff aef8 	bcc.w	8011f4e <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2201      	movs	r2, #1
 8012162:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2200      	movs	r2, #0
 801216a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
 8012170:	e000      	b.n	8012174 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
}
 8012174:	4618      	mov	r0, r3
 8012176:	3730      	adds	r7, #48	@ 0x30
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b08c      	sub	sp, #48	@ 0x30
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]
 8012188:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 801218a:	2300      	movs	r3, #0
 801218c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801219c:	b2db      	uxtb	r3, r3
 801219e:	2b02      	cmp	r3, #2
 80121a0:	d101      	bne.n	80121a6 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80121a2:	2302      	movs	r3, #2
 80121a4:	e13e      	b.n	8012424 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	f040 8137 	bne.w	8012422 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	d101      	bne.n	80121c2 <HAL_NAND_Write_Page_8b+0x46>
 80121be:	2302      	movs	r3, #2
 80121c0:	e130      	b.n	8012424 <HAL_NAND_Write_Page_8b+0x2a8>
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2201      	movs	r2, #1
 80121c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2202      	movs	r2, #2
 80121ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80121d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80121d6:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	881b      	ldrh	r3, [r3, #0]
 80121dc:	4619      	mov	r1, r3
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	889b      	ldrh	r3, [r3, #4]
 80121e2:	461a      	mov	r2, r3
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	885b      	ldrh	r3, [r3, #2]
 80121e8:	4618      	mov	r0, r3
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121ee:	fb00 f303 	mul.w	r3, r0, r3
 80121f2:	4413      	add	r3, r2
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80121f8:	fb02 f303 	mul.w	r3, r2, r3
 80121fc:	440b      	add	r3, r1
 80121fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8012200:	e0f8      	b.n	80123f4 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012208:	2200      	movs	r2, #0
 801220a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801220c:	f3bf 8f4f 	dsb	sy
}
 8012210:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012218:	2280      	movs	r2, #128	@ 0x80
 801221a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801221c:	f3bf 8f4f 	dsb	sy
}
 8012220:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801222a:	d848      	bhi.n	80122be <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012234:	fb02 f303 	mul.w	r3, r2, r3
 8012238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801223c:	d21a      	bcs.n	8012274 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012244:	2200      	movs	r2, #0
 8012246:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012248:	f3bf 8f4f 	dsb	sy
}
 801224c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012256:	b2d2      	uxtb	r2, r2
 8012258:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801225a:	f3bf 8f4f 	dsb	sy
}
 801225e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012262:	0a1a      	lsrs	r2, r3, #8
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801226a:	b2d2      	uxtb	r2, r2
 801226c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801226e:	f3bf 8f4f 	dsb	sy
}
 8012272:	e07d      	b.n	8012370 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801227a:	2200      	movs	r2, #0
 801227c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801227e:	f3bf 8f4f 	dsb	sy
}
 8012282:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801228a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801228c:	b2d2      	uxtb	r2, r2
 801228e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012290:	f3bf 8f4f 	dsb	sy
}
 8012294:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012298:	0a1a      	lsrs	r2, r3, #8
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122a0:	b2d2      	uxtb	r2, r2
 80122a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122a4:	f3bf 8f4f 	dsb	sy
}
 80122a8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80122aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ac:	0c1a      	lsrs	r2, r3, #16
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122b4:	b2d2      	uxtb	r2, r2
 80122b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122b8:	f3bf 8f4f 	dsb	sy
}
 80122bc:	e058      	b.n	8012370 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c2:	68fa      	ldr	r2, [r7, #12]
 80122c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80122c6:	fb02 f303 	mul.w	r3, r2, r3
 80122ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80122ce:	d222      	bcs.n	8012316 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122d6:	2200      	movs	r2, #0
 80122d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122da:	f3bf 8f4f 	dsb	sy
}
 80122de:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122e6:	2200      	movs	r2, #0
 80122e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122ea:	f3bf 8f4f 	dsb	sy
}
 80122ee:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122f8:	b2d2      	uxtb	r2, r2
 80122fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122fc:	f3bf 8f4f 	dsb	sy
}
 8012300:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012304:	0a1a      	lsrs	r2, r3, #8
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801230c:	b2d2      	uxtb	r2, r2
 801230e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012310:	f3bf 8f4f 	dsb	sy
}
 8012314:	e02c      	b.n	8012370 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012316:	69bb      	ldr	r3, [r7, #24]
 8012318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801231c:	2200      	movs	r2, #0
 801231e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012320:	f3bf 8f4f 	dsb	sy
}
 8012324:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801232c:	2200      	movs	r2, #0
 801232e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012330:	f3bf 8f4f 	dsb	sy
}
 8012334:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801233c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801233e:	b2d2      	uxtb	r2, r2
 8012340:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012342:	f3bf 8f4f 	dsb	sy
}
 8012346:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234a:	0a1a      	lsrs	r2, r3, #8
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012352:	b2d2      	uxtb	r2, r2
 8012354:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012356:	f3bf 8f4f 	dsb	sy
}
 801235a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 801235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235e:	0c1a      	lsrs	r2, r3, #16
 8012360:	69bb      	ldr	r3, [r7, #24]
 8012362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012366:	b2d2      	uxtb	r2, r2
 8012368:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801236a:	f3bf 8f4f 	dsb	sy
}
 801236e:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8012370:	2300      	movs	r3, #0
 8012372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012374:	e00c      	b.n	8012390 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	69fa      	ldr	r2, [r7, #28]
 801237a:	7812      	ldrb	r2, [r2, #0]
 801237c:	701a      	strb	r2, [r3, #0]
        buff++;
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	3301      	adds	r3, #1
 8012382:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8012384:	f3bf 8f4f 	dsb	sy
}
 8012388:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 801238a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801238c:	3301      	adds	r3, #1
 801238e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012396:	429a      	cmp	r2, r3
 8012398:	d3ed      	bcc.n	8012376 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80123a0:	2210      	movs	r2, #16
 80123a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80123a4:	f3bf 8f4f 	dsb	sy
}
 80123a8:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 80123aa:	f7ff f8a5 	bl	80114f8 <HAL_GetTick>
 80123ae:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80123b0:	e011      	b.n	80123d6 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80123b2:	f7ff f8a1 	bl	80114f8 <HAL_GetTick>
 80123b6:	4602      	mov	r2, r0
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80123c0:	d909      	bls.n	80123d6 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2203      	movs	r2, #3
 80123c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2200      	movs	r2, #0
 80123ce:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 80123d2:	2303      	movs	r3, #3
 80123d4:	e026      	b.n	8012424 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f000 fba1 	bl	8012b1e <HAL_NAND_Read_Status>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b40      	cmp	r3, #64	@ 0x40
 80123e0:	d1e7      	bne.n	80123b2 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 80123e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123e4:	3301      	adds	r3, #1
 80123e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 80123e8:	6a3b      	ldr	r3, [r7, #32]
 80123ea:	3b01      	subs	r3, #1
 80123ec:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80123ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f0:	3301      	adds	r3, #1
 80123f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80123f4:	6a3b      	ldr	r3, [r7, #32]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d009      	beq.n	801240e <HAL_NAND_Write_Page_8b+0x292>
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012402:	fb02 f303 	mul.w	r3, r2, r3
 8012406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012408:	429a      	cmp	r2, r3
 801240a:	f4ff aefa 	bcc.w	8012202 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	2201      	movs	r2, #1
 8012412:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	2200      	movs	r2, #0
 801241a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801241e:	2300      	movs	r3, #0
 8012420:	e000      	b.n	8012424 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8012422:	2301      	movs	r3, #1
}
 8012424:	4618      	mov	r0, r3
 8012426:	3730      	adds	r7, #48	@ 0x30
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b08c      	sub	sp, #48	@ 0x30
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801244c:	b2db      	uxtb	r3, r3
 801244e:	2b02      	cmp	r3, #2
 8012450:	d101      	bne.n	8012456 <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8012452:	2302      	movs	r3, #2
 8012454:	e151      	b.n	80126fa <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801245c:	b2db      	uxtb	r3, r3
 801245e:	2b01      	cmp	r3, #1
 8012460:	f040 814a 	bne.w	80126f8 <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f893 3020 	ldrb.w	r3, [r3, #32]
 801246a:	2b01      	cmp	r3, #1
 801246c:	d101      	bne.n	8012472 <HAL_NAND_Read_SpareArea_8b+0x46>
 801246e:	2302      	movs	r3, #2
 8012470:	e143      	b.n	80126fa <HAL_NAND_Read_SpareArea_8b+0x2ce>
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2201      	movs	r2, #1
 8012476:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2202      	movs	r2, #2
 801247e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8012482:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012486:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	4619      	mov	r1, r3
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	889b      	ldrh	r3, [r3, #4]
 8012492:	461a      	mov	r2, r3
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	885b      	ldrh	r3, [r3, #2]
 8012498:	4618      	mov	r0, r3
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801249e:	fb00 f303 	mul.w	r3, r0, r3
 80124a2:	4413      	add	r3, r2
 80124a4:	68fa      	ldr	r2, [r7, #12]
 80124a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80124a8:	fb02 f303 	mul.w	r3, r2, r3
 80124ac:	440b      	add	r3, r1
 80124ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124b4:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80124b6:	e108      	b.n	80126ca <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80124c0:	d850      	bhi.n	8012564 <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80124c8:	2250      	movs	r2, #80	@ 0x50
 80124ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80124cc:	f3bf 8f4f 	dsb	sy
}
 80124d0:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124d6:	68fa      	ldr	r2, [r7, #12]
 80124d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80124da:	fb02 f303 	mul.w	r3, r2, r3
 80124de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124e2:	d21a      	bcs.n	801251a <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124ea:	2200      	movs	r2, #0
 80124ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80124ee:	f3bf 8f4f 	dsb	sy
}
 80124f2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80124f4:	69bb      	ldr	r3, [r7, #24]
 80124f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124fc:	b2d2      	uxtb	r2, r2
 80124fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012500:	f3bf 8f4f 	dsb	sy
}
 8012504:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012508:	0a1a      	lsrs	r2, r3, #8
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012510:	b2d2      	uxtb	r2, r2
 8012512:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012514:	f3bf 8f4f 	dsb	sy
}
 8012518:	e08b      	b.n	8012632 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012520:	2200      	movs	r2, #0
 8012522:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012524:	f3bf 8f4f 	dsb	sy
}
 8012528:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012532:	b2d2      	uxtb	r2, r2
 8012534:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012536:	f3bf 8f4f 	dsb	sy
}
 801253a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253e:	0a1a      	lsrs	r2, r3, #8
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012546:	b2d2      	uxtb	r2, r2
 8012548:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801254a:	f3bf 8f4f 	dsb	sy
}
 801254e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012552:	0c1a      	lsrs	r2, r3, #16
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801255a:	b2d2      	uxtb	r2, r2
 801255c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801255e:	f3bf 8f4f 	dsb	sy
}
 8012562:	e066      	b.n	8012632 <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801256a:	2200      	movs	r2, #0
 801256c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801256e:	f3bf 8f4f 	dsb	sy
}
 8012572:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801257c:	fb02 f303 	mul.w	r3, r2, r3
 8012580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012584:	d225      	bcs.n	80125d2 <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801258c:	697a      	ldr	r2, [r7, #20]
 801258e:	b2d2      	uxtb	r2, r2
 8012590:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012592:	f3bf 8f4f 	dsb	sy
}
 8012596:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	0a1a      	lsrs	r2, r3, #8
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125a2:	b2d2      	uxtb	r2, r2
 80125a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125a6:	f3bf 8f4f 	dsb	sy
}
 80125aa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125b4:	b2d2      	uxtb	r2, r2
 80125b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125b8:	f3bf 8f4f 	dsb	sy
}
 80125bc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80125be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c0:	0a1a      	lsrs	r2, r3, #8
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125c8:	b2d2      	uxtb	r2, r2
 80125ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125cc:	f3bf 8f4f 	dsb	sy
}
 80125d0:	e02f      	b.n	8012632 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125d8:	697a      	ldr	r2, [r7, #20]
 80125da:	b2d2      	uxtb	r2, r2
 80125dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125de:	f3bf 8f4f 	dsb	sy
}
 80125e2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	0a1a      	lsrs	r2, r3, #8
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125ee:	b2d2      	uxtb	r2, r2
 80125f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125f2:	f3bf 8f4f 	dsb	sy
}
 80125f6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012600:	b2d2      	uxtb	r2, r2
 8012602:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012604:	f3bf 8f4f 	dsb	sy
}
 8012608:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260c:	0a1a      	lsrs	r2, r3, #8
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012614:	b2d2      	uxtb	r2, r2
 8012616:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012618:	f3bf 8f4f 	dsb	sy
}
 801261c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 801261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012620:	0c1a      	lsrs	r2, r3, #16
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012628:	b2d2      	uxtb	r2, r2
 801262a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801262c:	f3bf 8f4f 	dsb	sy
}
 8012630:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012638:	2230      	movs	r2, #48	@ 0x30
 801263a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801263c:	f3bf 8f4f 	dsb	sy
}
 8012640:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012648:	2b01      	cmp	r3, #1
 801264a:	d123      	bne.n	8012694 <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801264c:	f7fe ff54 	bl	80114f8 <HAL_GetTick>
 8012650:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8012652:	e011      	b.n	8012678 <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8012654:	f7fe ff50 	bl	80114f8 <HAL_GetTick>
 8012658:	4602      	mov	r2, r0
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012662:	d909      	bls.n	8012678 <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2203      	movs	r2, #3
 8012668:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2200      	movs	r2, #0
 8012670:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8012674:	2303      	movs	r3, #3
 8012676:	e040      	b.n	80126fa <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f000 fa50 	bl	8012b1e <HAL_NAND_Read_Status>
 801267e:	4603      	mov	r3, r0
 8012680:	2b40      	cmp	r3, #64	@ 0x40
 8012682:	d1e7      	bne.n	8012654 <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801268a:	2200      	movs	r2, #0
 801268c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801268e:	f3bf 8f4f 	dsb	sy
}
 8012692:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8012694:	2300      	movs	r3, #0
 8012696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012698:	e009      	b.n	80126ae <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	781a      	ldrb	r2, [r3, #0]
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	701a      	strb	r2, [r3, #0]
        buff++;
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	3301      	adds	r3, #1
 80126a6:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 80126a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126aa:	3301      	adds	r3, #1
 80126ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d3f0      	bcc.n	801269a <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 80126b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ba:	3301      	adds	r3, #1
 80126bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	3b01      	subs	r3, #1
 80126c2:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80126c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c6:	3301      	adds	r3, #1
 80126c8:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d009      	beq.n	80126e4 <HAL_NAND_Read_SpareArea_8b+0x2b8>
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80126d8:	fb02 f303 	mul.w	r3, r2, r3
 80126dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126de:	429a      	cmp	r2, r3
 80126e0:	f4ff aeea 	bcc.w	80124b8 <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2201      	movs	r2, #1
 80126e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2200      	movs	r2, #0
 80126f0:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	e000      	b.n	80126fa <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 80126f8:	2301      	movs	r3, #1
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3730      	adds	r7, #48	@ 0x30
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b08c      	sub	sp, #48	@ 0x30
 8012706:	af00      	add	r7, sp, #0
 8012708:	60f8      	str	r0, [r7, #12]
 801270a:	60b9      	str	r1, [r7, #8]
 801270c:	607a      	str	r2, [r7, #4]
 801270e:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 8012710:	2300      	movs	r3, #0
 8012712:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012722:	b2db      	uxtb	r3, r3
 8012724:	2b02      	cmp	r3, #2
 8012726:	d101      	bne.n	801272c <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8012728:	2302      	movs	r3, #2
 801272a:	e157      	b.n	80129dc <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012732:	b2db      	uxtb	r3, r3
 8012734:	2b01      	cmp	r3, #1
 8012736:	f040 8150 	bne.w	80129da <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d101      	bne.n	8012748 <HAL_NAND_Write_SpareArea_8b+0x46>
 8012744:	2302      	movs	r3, #2
 8012746:	e149      	b.n	80129dc <HAL_NAND_Write_SpareArea_8b+0x2da>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2201      	movs	r2, #1
 801274c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2202      	movs	r2, #2
 8012754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8012758:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801275c:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	4619      	mov	r1, r3
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	889b      	ldrh	r3, [r3, #4]
 8012768:	461a      	mov	r2, r3
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	885b      	ldrh	r3, [r3, #2]
 801276e:	4618      	mov	r0, r3
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012774:	fb00 f303 	mul.w	r3, r0, r3
 8012778:	4413      	add	r3, r2
 801277a:	68fa      	ldr	r2, [r7, #12]
 801277c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801277e:	fb02 f303 	mul.w	r3, r2, r3
 8012782:	440b      	add	r3, r1
 8012784:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801278a:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 801278c:	e10e      	b.n	80129ac <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012796:	d858      	bhi.n	801284a <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801279e:	2250      	movs	r2, #80	@ 0x50
 80127a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80127a2:	f3bf 8f4f 	dsb	sy
}
 80127a6:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80127ae:	2280      	movs	r2, #128	@ 0x80
 80127b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80127b2:	f3bf 8f4f 	dsb	sy
}
 80127b6:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127bc:	68fa      	ldr	r2, [r7, #12]
 80127be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80127c0:	fb02 f303 	mul.w	r3, r2, r3
 80127c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127c8:	d21a      	bcs.n	8012800 <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80127ca:	69bb      	ldr	r3, [r7, #24]
 80127cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80127d0:	2200      	movs	r2, #0
 80127d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80127d4:	f3bf 8f4f 	dsb	sy
}
 80127d8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80127e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127e2:	b2d2      	uxtb	r2, r2
 80127e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80127e6:	f3bf 8f4f 	dsb	sy
}
 80127ea:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80127ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ee:	0a1a      	lsrs	r2, r3, #8
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80127f6:	b2d2      	uxtb	r2, r2
 80127f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80127fa:	f3bf 8f4f 	dsb	sy
}
 80127fe:	e093      	b.n	8012928 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012806:	2200      	movs	r2, #0
 8012808:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801280a:	f3bf 8f4f 	dsb	sy
}
 801280e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012810:	69bb      	ldr	r3, [r7, #24]
 8012812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012818:	b2d2      	uxtb	r2, r2
 801281a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801281c:	f3bf 8f4f 	dsb	sy
}
 8012820:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012824:	0a1a      	lsrs	r2, r3, #8
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801282c:	b2d2      	uxtb	r2, r2
 801282e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012830:	f3bf 8f4f 	dsb	sy
}
 8012834:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012838:	0c1a      	lsrs	r2, r3, #16
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012840:	b2d2      	uxtb	r2, r2
 8012842:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012844:	f3bf 8f4f 	dsb	sy
}
 8012848:	e06e      	b.n	8012928 <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012850:	2200      	movs	r2, #0
 8012852:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012854:	f3bf 8f4f 	dsb	sy
}
 8012858:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 801285a:	69bb      	ldr	r3, [r7, #24]
 801285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012860:	2280      	movs	r2, #128	@ 0x80
 8012862:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012864:	f3bf 8f4f 	dsb	sy
}
 8012868:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801286e:	68fa      	ldr	r2, [r7, #12]
 8012870:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012872:	fb02 f303 	mul.w	r3, r2, r3
 8012876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801287a:	d225      	bcs.n	80128c8 <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012882:	697a      	ldr	r2, [r7, #20]
 8012884:	b2d2      	uxtb	r2, r2
 8012886:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012888:	f3bf 8f4f 	dsb	sy
}
 801288c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	0a1a      	lsrs	r2, r3, #8
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012898:	b2d2      	uxtb	r2, r2
 801289a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801289c:	f3bf 8f4f 	dsb	sy
}
 80128a0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128aa:	b2d2      	uxtb	r2, r2
 80128ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128ae:	f3bf 8f4f 	dsb	sy
}
 80128b2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80128b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128b6:	0a1a      	lsrs	r2, r3, #8
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128be:	b2d2      	uxtb	r2, r2
 80128c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128c2:	f3bf 8f4f 	dsb	sy
}
 80128c6:	e02f      	b.n	8012928 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128ce:	697a      	ldr	r2, [r7, #20]
 80128d0:	b2d2      	uxtb	r2, r2
 80128d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128d4:	f3bf 8f4f 	dsb	sy
}
 80128d8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	0a1a      	lsrs	r2, r3, #8
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128e4:	b2d2      	uxtb	r2, r2
 80128e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128e8:	f3bf 8f4f 	dsb	sy
}
 80128ec:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128f6:	b2d2      	uxtb	r2, r2
 80128f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128fa:	f3bf 8f4f 	dsb	sy
}
 80128fe:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012902:	0a1a      	lsrs	r2, r3, #8
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801290a:	b2d2      	uxtb	r2, r2
 801290c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801290e:	f3bf 8f4f 	dsb	sy
}
 8012912:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012916:	0c1a      	lsrs	r2, r3, #16
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801291e:	b2d2      	uxtb	r2, r2
 8012920:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012922:	f3bf 8f4f 	dsb	sy
}
 8012926:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8012928:	2300      	movs	r3, #0
 801292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801292c:	e00c      	b.n	8012948 <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	69fa      	ldr	r2, [r7, #28]
 8012932:	7812      	ldrb	r2, [r2, #0]
 8012934:	701a      	strb	r2, [r3, #0]
        buff++;
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	3301      	adds	r3, #1
 801293a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 801293c:	f3bf 8f4f 	dsb	sy
}
 8012940:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8012942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012944:	3301      	adds	r3, #1
 8012946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801294c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801294e:	429a      	cmp	r2, r3
 8012950:	d3ed      	bcc.n	801292e <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012958:	2210      	movs	r2, #16
 801295a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801295c:	f3bf 8f4f 	dsb	sy
}
 8012960:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8012962:	f7fe fdc9 	bl	80114f8 <HAL_GetTick>
 8012966:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8012968:	e011      	b.n	801298e <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 801296a:	f7fe fdc5 	bl	80114f8 <HAL_GetTick>
 801296e:	4602      	mov	r2, r0
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012978:	d909      	bls.n	801298e <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2203      	movs	r2, #3
 801297e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2200      	movs	r2, #0
 8012986:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 801298a:	2303      	movs	r3, #3
 801298c:	e026      	b.n	80129dc <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 801298e:	68f8      	ldr	r0, [r7, #12]
 8012990:	f000 f8c5 	bl	8012b1e <HAL_NAND_Read_Status>
 8012994:	4603      	mov	r3, r0
 8012996:	2b40      	cmp	r3, #64	@ 0x40
 8012998:	d1e7      	bne.n	801296a <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 801299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801299c:	3301      	adds	r3, #1
 801299e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 80129a0:	6a3b      	ldr	r3, [r7, #32]
 80129a2:	3b01      	subs	r3, #1
 80129a4:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80129a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a8:	3301      	adds	r3, #1
 80129aa:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80129ac:	6a3b      	ldr	r3, [r7, #32]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d009      	beq.n	80129c6 <HAL_NAND_Write_SpareArea_8b+0x2c4>
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80129ba:	fb02 f303 	mul.w	r3, r2, r3
 80129be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129c0:	429a      	cmp	r2, r3
 80129c2:	f4ff aee4 	bcc.w	801278e <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2201      	movs	r2, #1
 80129ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2200      	movs	r2, #0
 80129d2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80129d6:	2300      	movs	r3, #0
 80129d8:	e000      	b.n	80129dc <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 80129da:	2301      	movs	r3, #1
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3730      	adds	r7, #48	@ 0x30
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b085      	sub	sp, #20
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	2b02      	cmp	r3, #2
 80129f8:	d101      	bne.n	80129fe <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 80129fa:	2302      	movs	r3, #2
 80129fc:	e089      	b.n	8012b12 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	f040 8082 	bne.w	8012b10 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d101      	bne.n	8012a1a <HAL_NAND_Erase_Block+0x36>
 8012a16:	2302      	movs	r3, #2
 8012a18:	e07b      	b.n	8012b12 <HAL_NAND_Erase_Block+0x12e>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2202      	movs	r2, #2
 8012a26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8012a2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012a2e:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012a36:	2260      	movs	r2, #96	@ 0x60
 8012a38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a3a:	f3bf 8f4f 	dsb	sy
}
 8012a3e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	b2da      	uxtb	r2, r3
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	889b      	ldrh	r3, [r3, #4]
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	885b      	ldrh	r3, [r3, #2]
 8012a50:	4618      	mov	r0, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a56:	fb00 f303 	mul.w	r3, r0, r3
 8012a5a:	440b      	add	r3, r1
 8012a5c:	b2d9      	uxtb	r1, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	fb11 f303 	smulbb	r3, r1, r3
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	68f9      	ldr	r1, [r7, #12]
 8012a6c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8012a70:	4413      	add	r3, r2
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a76:	f3bf 8f4f 	dsb	sy
}
 8012a7a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	881b      	ldrh	r3, [r3, #0]
 8012a80:	4619      	mov	r1, r3
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	889b      	ldrh	r3, [r3, #4]
 8012a86:	461a      	mov	r2, r3
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	885b      	ldrh	r3, [r3, #2]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a92:	fb00 f303 	mul.w	r3, r0, r3
 8012a96:	4413      	add	r3, r2
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012a9c:	fb02 f303 	mul.w	r3, r2, r3
 8012aa0:	440b      	add	r3, r1
 8012aa2:	0a1a      	lsrs	r2, r3, #8
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012aaa:	b2d2      	uxtb	r2, r2
 8012aac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012aae:	f3bf 8f4f 	dsb	sy
}
 8012ab2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	4619      	mov	r1, r3
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	889b      	ldrh	r3, [r3, #4]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	885b      	ldrh	r3, [r3, #2]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aca:	fb00 f303 	mul.w	r3, r0, r3
 8012ace:	4413      	add	r3, r2
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012ad4:	fb02 f303 	mul.w	r3, r2, r3
 8012ad8:	440b      	add	r3, r1
 8012ada:	0c1a      	lsrs	r2, r3, #16
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012ae2:	b2d2      	uxtb	r2, r2
 8012ae4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ae6:	f3bf 8f4f 	dsb	sy
}
 8012aea:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012af2:	22d0      	movs	r2, #208	@ 0xd0
 8012af4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012af6:	f3bf 8f4f 	dsb	sy
}
 8012afa:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2201      	movs	r2, #1
 8012b00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e000      	b.n	8012b12 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8012b10:	2301      	movs	r3, #1
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3714      	adds	r7, #20
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8012b1e:	b480      	push	{r7}
 8012b20:	b085      	sub	sp, #20
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8012b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012b2a:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012b32:	2270      	movs	r2, #112	@ 0x70
 8012b34:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d001      	beq.n	8012b4c <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	e007      	b.n	8012b5c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8012b56:	2340      	movs	r3, #64	@ 0x40
 8012b58:	e000      	b.n	8012b5c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8012b5a:	2300      	movs	r3, #0
  }
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3714      	adds	r7, #20
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr

08012b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b088      	sub	sp, #32
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d102      	bne.n	8012b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012b76:	2301      	movs	r3, #1
 8012b78:	f000 bc28 	b.w	80133cc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012b7c:	4b94      	ldr	r3, [pc, #592]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	f003 0318 	and.w	r3, r3, #24
 8012b84:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8012b86:	4b92      	ldr	r3, [pc, #584]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b8a:	f003 0303 	and.w	r3, r3, #3
 8012b8e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	f003 0310 	and.w	r3, r3, #16
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d05b      	beq.n	8012c54 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	2b08      	cmp	r3, #8
 8012ba0:	d005      	beq.n	8012bae <HAL_RCC_OscConfig+0x46>
 8012ba2:	69fb      	ldr	r3, [r7, #28]
 8012ba4:	2b18      	cmp	r3, #24
 8012ba6:	d114      	bne.n	8012bd2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d111      	bne.n	8012bd2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	69db      	ldr	r3, [r3, #28]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d102      	bne.n	8012bbc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	f000 bc08 	b.w	80133cc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8012bbc:	4b84      	ldr	r3, [pc, #528]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012bbe:	699b      	ldr	r3, [r3, #24]
 8012bc0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6a1b      	ldr	r3, [r3, #32]
 8012bc8:	041b      	lsls	r3, r3, #16
 8012bca:	4981      	ldr	r1, [pc, #516]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8012bd0:	e040      	b.n	8012c54 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	69db      	ldr	r3, [r3, #28]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d023      	beq.n	8012c22 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8012bda:	4b7d      	ldr	r3, [pc, #500]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	4a7c      	ldr	r2, [pc, #496]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012be6:	f7fe fc87 	bl	80114f8 <HAL_GetTick>
 8012bea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8012bec:	e008      	b.n	8012c00 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8012bee:	f7fe fc83 	bl	80114f8 <HAL_GetTick>
 8012bf2:	4602      	mov	r2, r0
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	1ad3      	subs	r3, r2, r3
 8012bf8:	2b02      	cmp	r3, #2
 8012bfa:	d901      	bls.n	8012c00 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8012bfc:	2303      	movs	r3, #3
 8012bfe:	e3e5      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8012c00:	4b73      	ldr	r3, [pc, #460]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d0f0      	beq.n	8012bee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8012c0c:	4b70      	ldr	r3, [pc, #448]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c0e:	699b      	ldr	r3, [r3, #24]
 8012c10:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6a1b      	ldr	r3, [r3, #32]
 8012c18:	041b      	lsls	r3, r3, #16
 8012c1a:	496d      	ldr	r1, [pc, #436]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	618b      	str	r3, [r1, #24]
 8012c20:	e018      	b.n	8012c54 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012c22:	4b6b      	ldr	r3, [pc, #428]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4a6a      	ldr	r2, [pc, #424]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c2e:	f7fe fc63 	bl	80114f8 <HAL_GetTick>
 8012c32:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8012c34:	e008      	b.n	8012c48 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8012c36:	f7fe fc5f 	bl	80114f8 <HAL_GetTick>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	2b02      	cmp	r3, #2
 8012c42:	d901      	bls.n	8012c48 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8012c44:	2303      	movs	r3, #3
 8012c46:	e3c1      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8012c48:	4b61      	ldr	r3, [pc, #388]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1f0      	bne.n	8012c36 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f003 0301 	and.w	r3, r3, #1
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	f000 80a0 	beq.w	8012da2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	2b10      	cmp	r3, #16
 8012c66:	d005      	beq.n	8012c74 <HAL_RCC_OscConfig+0x10c>
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	2b18      	cmp	r3, #24
 8012c6c:	d109      	bne.n	8012c82 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	2b03      	cmp	r3, #3
 8012c72:	d106      	bne.n	8012c82 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f040 8092 	bne.w	8012da2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e3a4      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c8a:	d106      	bne.n	8012c9a <HAL_RCC_OscConfig+0x132>
 8012c8c:	4b50      	ldr	r3, [pc, #320]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4a4f      	ldr	r2, [pc, #316]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012c96:	6013      	str	r3, [r2, #0]
 8012c98:	e058      	b.n	8012d4c <HAL_RCC_OscConfig+0x1e4>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d112      	bne.n	8012cc8 <HAL_RCC_OscConfig+0x160>
 8012ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012cac:	6013      	str	r3, [r2, #0]
 8012cae:	4b48      	ldr	r3, [pc, #288]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	4a47      	ldr	r2, [pc, #284]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012cb8:	6013      	str	r3, [r2, #0]
 8012cba:	4b45      	ldr	r3, [pc, #276]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a44      	ldr	r2, [pc, #272]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012cc4:	6013      	str	r3, [r2, #0]
 8012cc6:	e041      	b.n	8012d4c <HAL_RCC_OscConfig+0x1e4>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012cd0:	d112      	bne.n	8012cf8 <HAL_RCC_OscConfig+0x190>
 8012cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012cdc:	6013      	str	r3, [r2, #0]
 8012cde:	4b3c      	ldr	r3, [pc, #240]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012ce4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012ce8:	6013      	str	r3, [r2, #0]
 8012cea:	4b39      	ldr	r3, [pc, #228]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	4a38      	ldr	r2, [pc, #224]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012cf4:	6013      	str	r3, [r2, #0]
 8012cf6:	e029      	b.n	8012d4c <HAL_RCC_OscConfig+0x1e4>
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8012d00:	d112      	bne.n	8012d28 <HAL_RCC_OscConfig+0x1c0>
 8012d02:	4b33      	ldr	r3, [pc, #204]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	4a32      	ldr	r2, [pc, #200]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012d0c:	6013      	str	r3, [r2, #0]
 8012d0e:	4b30      	ldr	r3, [pc, #192]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a2f      	ldr	r2, [pc, #188]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012d18:	6013      	str	r3, [r2, #0]
 8012d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	e011      	b.n	8012d4c <HAL_RCC_OscConfig+0x1e4>
 8012d28:	4b29      	ldr	r3, [pc, #164]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4a28      	ldr	r2, [pc, #160]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012d32:	6013      	str	r3, [r2, #0]
 8012d34:	4b26      	ldr	r3, [pc, #152]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a25      	ldr	r2, [pc, #148]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d3e:	6013      	str	r3, [r2, #0]
 8012d40:	4b23      	ldr	r3, [pc, #140]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4a22      	ldr	r2, [pc, #136]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d46:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d013      	beq.n	8012d7c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d54:	f7fe fbd0 	bl	80114f8 <HAL_GetTick>
 8012d58:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012d5a:	e008      	b.n	8012d6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8012d5c:	f7fe fbcc 	bl	80114f8 <HAL_GetTick>
 8012d60:	4602      	mov	r2, r0
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	1ad3      	subs	r3, r2, r3
 8012d66:	2b64      	cmp	r3, #100	@ 0x64
 8012d68:	d901      	bls.n	8012d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8012d6a:	2303      	movs	r3, #3
 8012d6c:	e32e      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012d6e:	4b18      	ldr	r3, [pc, #96]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0f0      	beq.n	8012d5c <HAL_RCC_OscConfig+0x1f4>
 8012d7a:	e012      	b.n	8012da2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d7c:	f7fe fbbc 	bl	80114f8 <HAL_GetTick>
 8012d80:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012d82:	e008      	b.n	8012d96 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8012d84:	f7fe fbb8 	bl	80114f8 <HAL_GetTick>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	1ad3      	subs	r3, r2, r3
 8012d8e:	2b64      	cmp	r3, #100	@ 0x64
 8012d90:	d901      	bls.n	8012d96 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8012d92:	2303      	movs	r3, #3
 8012d94:	e31a      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012d96:	4b0e      	ldr	r3, [pc, #56]	@ (8012dd0 <HAL_RCC_OscConfig+0x268>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1f0      	bne.n	8012d84 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f003 0302 	and.w	r3, r3, #2
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	f000 809a 	beq.w	8012ee4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d005      	beq.n	8012dc2 <HAL_RCC_OscConfig+0x25a>
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	2b18      	cmp	r3, #24
 8012dba:	d149      	bne.n	8012e50 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d146      	bne.n	8012e50 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d104      	bne.n	8012dd4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	e2fe      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
 8012dce:	bf00      	nop
 8012dd0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d11c      	bne.n	8012e14 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8012dda:	4b9a      	ldr	r3, [pc, #616]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f003 0218 	and.w	r2, r3, #24
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	691b      	ldr	r3, [r3, #16]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d014      	beq.n	8012e14 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8012dea:	4b96      	ldr	r3, [pc, #600]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f023 0218 	bic.w	r2, r3, #24
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	4993      	ldr	r1, [pc, #588]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8012dfc:	f000 fdd0 	bl	80139a0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8012e00:	4b91      	ldr	r3, [pc, #580]	@ (8013048 <HAL_RCC_OscConfig+0x4e0>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fe faed 	bl	80113e4 <HAL_InitTick>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d001      	beq.n	8012e14 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e2db      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e14:	f7fe fb70 	bl	80114f8 <HAL_GetTick>
 8012e18:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e1a:	e008      	b.n	8012e2e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012e1c:	f7fe fb6c 	bl	80114f8 <HAL_GetTick>
 8012e20:	4602      	mov	r2, r0
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	2b02      	cmp	r3, #2
 8012e28:	d901      	bls.n	8012e2e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	e2ce      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e2e:	4b85      	ldr	r3, [pc, #532]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f003 0302 	and.w	r3, r3, #2
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d0f0      	beq.n	8012e1c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8012e3a:	4b82      	ldr	r3, [pc, #520]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e3c:	691b      	ldr	r3, [r3, #16]
 8012e3e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	695b      	ldr	r3, [r3, #20]
 8012e46:	041b      	lsls	r3, r3, #16
 8012e48:	497e      	ldr	r1, [pc, #504]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e4a:	4313      	orrs	r3, r2
 8012e4c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8012e4e:	e049      	b.n	8012ee4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	68db      	ldr	r3, [r3, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d02c      	beq.n	8012eb2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8012e58:	4b7a      	ldr	r3, [pc, #488]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f023 0218 	bic.w	r2, r3, #24
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	691b      	ldr	r3, [r3, #16]
 8012e64:	4977      	ldr	r1, [pc, #476]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e66:	4313      	orrs	r3, r2
 8012e68:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8012e6a:	4b76      	ldr	r3, [pc, #472]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	4a75      	ldr	r2, [pc, #468]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e70:	f043 0301 	orr.w	r3, r3, #1
 8012e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e76:	f7fe fb3f 	bl	80114f8 <HAL_GetTick>
 8012e7a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e7c:	e008      	b.n	8012e90 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012e7e:	f7fe fb3b 	bl	80114f8 <HAL_GetTick>
 8012e82:	4602      	mov	r2, r0
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d901      	bls.n	8012e90 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	e29d      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e90:	4b6c      	ldr	r3, [pc, #432]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f003 0302 	and.w	r3, r3, #2
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d0f0      	beq.n	8012e7e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8012e9c:	4b69      	ldr	r3, [pc, #420]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012e9e:	691b      	ldr	r3, [r3, #16]
 8012ea0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	695b      	ldr	r3, [r3, #20]
 8012ea8:	041b      	lsls	r3, r3, #16
 8012eaa:	4966      	ldr	r1, [pc, #408]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012eac:	4313      	orrs	r3, r2
 8012eae:	610b      	str	r3, [r1, #16]
 8012eb0:	e018      	b.n	8012ee4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012eb2:	4b64      	ldr	r3, [pc, #400]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4a63      	ldr	r2, [pc, #396]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012eb8:	f023 0301 	bic.w	r3, r3, #1
 8012ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ebe:	f7fe fb1b 	bl	80114f8 <HAL_GetTick>
 8012ec2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012ec4:	e008      	b.n	8012ed8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012ec6:	f7fe fb17 	bl	80114f8 <HAL_GetTick>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	1ad3      	subs	r3, r2, r3
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	d901      	bls.n	8012ed8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8012ed4:	2303      	movs	r3, #3
 8012ed6:	e279      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f003 0302 	and.w	r3, r3, #2
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d1f0      	bne.n	8012ec6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f003 0308 	and.w	r3, r3, #8
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d03c      	beq.n	8012f6a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d01c      	beq.n	8012f32 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012ef8:	4b52      	ldr	r3, [pc, #328]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012efe:	4a51      	ldr	r2, [pc, #324]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012f00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012f04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f08:	f7fe faf6 	bl	80114f8 <HAL_GetTick>
 8012f0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8012f0e:	e008      	b.n	8012f22 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8012f10:	f7fe faf2 	bl	80114f8 <HAL_GetTick>
 8012f14:	4602      	mov	r2, r0
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	1ad3      	subs	r3, r2, r3
 8012f1a:	2b02      	cmp	r3, #2
 8012f1c:	d901      	bls.n	8012f22 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8012f1e:	2303      	movs	r3, #3
 8012f20:	e254      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8012f22:	4b48      	ldr	r3, [pc, #288]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d0ef      	beq.n	8012f10 <HAL_RCC_OscConfig+0x3a8>
 8012f30:	e01b      	b.n	8012f6a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012f32:	4b44      	ldr	r3, [pc, #272]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f38:	4a42      	ldr	r2, [pc, #264]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f42:	f7fe fad9 	bl	80114f8 <HAL_GetTick>
 8012f46:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8012f48:	e008      	b.n	8012f5c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8012f4a:	f7fe fad5 	bl	80114f8 <HAL_GetTick>
 8012f4e:	4602      	mov	r2, r0
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	1ad3      	subs	r3, r2, r3
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	d901      	bls.n	8012f5c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8012f58:	2303      	movs	r3, #3
 8012f5a:	e237      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8012f5c:	4b39      	ldr	r3, [pc, #228]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1ef      	bne.n	8012f4a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f003 0304 	and.w	r3, r3, #4
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	f000 80d2 	beq.w	801311c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8012f78:	4b34      	ldr	r3, [pc, #208]	@ (801304c <HAL_RCC_OscConfig+0x4e4>)
 8012f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f7c:	f003 0301 	and.w	r3, r3, #1
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d118      	bne.n	8012fb6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8012f84:	4b31      	ldr	r3, [pc, #196]	@ (801304c <HAL_RCC_OscConfig+0x4e4>)
 8012f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f88:	4a30      	ldr	r2, [pc, #192]	@ (801304c <HAL_RCC_OscConfig+0x4e4>)
 8012f8a:	f043 0301 	orr.w	r3, r3, #1
 8012f8e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012f90:	f7fe fab2 	bl	80114f8 <HAL_GetTick>
 8012f94:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8012f96:	e008      	b.n	8012faa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012f98:	f7fe faae 	bl	80114f8 <HAL_GetTick>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	1ad3      	subs	r3, r2, r3
 8012fa2:	2b02      	cmp	r3, #2
 8012fa4:	d901      	bls.n	8012faa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8012fa6:	2303      	movs	r3, #3
 8012fa8:	e210      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8012faa:	4b28      	ldr	r3, [pc, #160]	@ (801304c <HAL_RCC_OscConfig+0x4e4>)
 8012fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fae:	f003 0301 	and.w	r3, r3, #1
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d0f0      	beq.n	8012f98 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	2b01      	cmp	r3, #1
 8012fbc:	d108      	bne.n	8012fd0 <HAL_RCC_OscConfig+0x468>
 8012fbe:	4b21      	ldr	r3, [pc, #132]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012fc6:	f043 0301 	orr.w	r3, r3, #1
 8012fca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8012fce:	e074      	b.n	80130ba <HAL_RCC_OscConfig+0x552>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d118      	bne.n	801300a <HAL_RCC_OscConfig+0x4a2>
 8012fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012fde:	4a19      	ldr	r2, [pc, #100]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012fe0:	f023 0301 	bic.w	r3, r3, #1
 8012fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8012fe8:	4b16      	ldr	r3, [pc, #88]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012fee:	4a15      	ldr	r2, [pc, #84]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8012ff8:	4b12      	ldr	r3, [pc, #72]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8012ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012ffe:	4a11      	ldr	r2, [pc, #68]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8013000:	f023 0304 	bic.w	r3, r3, #4
 8013004:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013008:	e057      	b.n	80130ba <HAL_RCC_OscConfig+0x552>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	689b      	ldr	r3, [r3, #8]
 801300e:	2b05      	cmp	r3, #5
 8013010:	d11e      	bne.n	8013050 <HAL_RCC_OscConfig+0x4e8>
 8013012:	4b0c      	ldr	r3, [pc, #48]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8013014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013018:	4a0a      	ldr	r2, [pc, #40]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 801301a:	f043 0304 	orr.w	r3, r3, #4
 801301e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013022:	4b08      	ldr	r3, [pc, #32]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8013024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013028:	4a06      	ldr	r2, [pc, #24]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 801302a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801302e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013032:	4b04      	ldr	r3, [pc, #16]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 8013034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013038:	4a02      	ldr	r2, [pc, #8]	@ (8013044 <HAL_RCC_OscConfig+0x4dc>)
 801303a:	f043 0301 	orr.w	r3, r3, #1
 801303e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013042:	e03a      	b.n	80130ba <HAL_RCC_OscConfig+0x552>
 8013044:	44020c00 	.word	0x44020c00
 8013048:	200000ac 	.word	0x200000ac
 801304c:	44020800 	.word	0x44020800
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	2b85      	cmp	r3, #133	@ 0x85
 8013056:	d118      	bne.n	801308a <HAL_RCC_OscConfig+0x522>
 8013058:	4ba2      	ldr	r3, [pc, #648]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801305a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801305e:	4aa1      	ldr	r2, [pc, #644]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013060:	f043 0304 	orr.w	r3, r3, #4
 8013064:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013068:	4b9e      	ldr	r3, [pc, #632]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801306a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801306e:	4a9d      	ldr	r2, [pc, #628]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013074:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013078:	4b9a      	ldr	r3, [pc, #616]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801307a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801307e:	4a99      	ldr	r2, [pc, #612]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013080:	f043 0301 	orr.w	r3, r3, #1
 8013084:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013088:	e017      	b.n	80130ba <HAL_RCC_OscConfig+0x552>
 801308a:	4b96      	ldr	r3, [pc, #600]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801308c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013090:	4a94      	ldr	r2, [pc, #592]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013092:	f023 0301 	bic.w	r3, r3, #1
 8013096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801309a:	4b92      	ldr	r3, [pc, #584]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801309c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130a0:	4a90      	ldr	r2, [pc, #576]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80130a2:	f023 0304 	bic.w	r3, r3, #4
 80130a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80130aa:	4b8e      	ldr	r3, [pc, #568]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80130ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130b0:	4a8c      	ldr	r2, [pc, #560]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80130b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80130b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	689b      	ldr	r3, [r3, #8]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d016      	beq.n	80130f0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80130c2:	f7fe fa19 	bl	80114f8 <HAL_GetTick>
 80130c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80130c8:	e00a      	b.n	80130e0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80130ca:	f7fe fa15 	bl	80114f8 <HAL_GetTick>
 80130ce:	4602      	mov	r2, r0
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80130d8:	4293      	cmp	r3, r2
 80130da:	d901      	bls.n	80130e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80130dc:	2303      	movs	r3, #3
 80130de:	e175      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80130e0:	4b80      	ldr	r3, [pc, #512]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80130e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130e6:	f003 0302 	and.w	r3, r3, #2
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d0ed      	beq.n	80130ca <HAL_RCC_OscConfig+0x562>
 80130ee:	e015      	b.n	801311c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80130f0:	f7fe fa02 	bl	80114f8 <HAL_GetTick>
 80130f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80130f6:	e00a      	b.n	801310e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80130f8:	f7fe f9fe 	bl	80114f8 <HAL_GetTick>
 80130fc:	4602      	mov	r2, r0
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013106:	4293      	cmp	r3, r2
 8013108:	d901      	bls.n	801310e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 801310a:	2303      	movs	r3, #3
 801310c:	e15e      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801310e:	4b75      	ldr	r3, [pc, #468]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013114:	f003 0302 	and.w	r3, r3, #2
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1ed      	bne.n	80130f8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f003 0320 	and.w	r3, r3, #32
 8013124:	2b00      	cmp	r3, #0
 8013126:	d036      	beq.n	8013196 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801312c:	2b00      	cmp	r3, #0
 801312e:	d019      	beq.n	8013164 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013130:	4b6c      	ldr	r3, [pc, #432]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a6b      	ldr	r2, [pc, #428]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013136:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801313a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801313c:	f7fe f9dc 	bl	80114f8 <HAL_GetTick>
 8013140:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8013142:	e008      	b.n	8013156 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8013144:	f7fe f9d8 	bl	80114f8 <HAL_GetTick>
 8013148:	4602      	mov	r2, r0
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	2b02      	cmp	r3, #2
 8013150:	d901      	bls.n	8013156 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8013152:	2303      	movs	r3, #3
 8013154:	e13a      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8013156:	4b63      	ldr	r3, [pc, #396]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801315e:	2b00      	cmp	r3, #0
 8013160:	d0f0      	beq.n	8013144 <HAL_RCC_OscConfig+0x5dc>
 8013162:	e018      	b.n	8013196 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013164:	4b5f      	ldr	r3, [pc, #380]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a5e      	ldr	r2, [pc, #376]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801316a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801316e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013170:	f7fe f9c2 	bl	80114f8 <HAL_GetTick>
 8013174:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8013176:	e008      	b.n	801318a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8013178:	f7fe f9be 	bl	80114f8 <HAL_GetTick>
 801317c:	4602      	mov	r2, r0
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	2b02      	cmp	r3, #2
 8013184:	d901      	bls.n	801318a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8013186:	2303      	movs	r3, #3
 8013188:	e120      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 801318a:	4b56      	ldr	r3, [pc, #344]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013192:	2b00      	cmp	r3, #0
 8013194:	d1f0      	bne.n	8013178 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801319a:	2b00      	cmp	r3, #0
 801319c:	f000 8115 	beq.w	80133ca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	2b18      	cmp	r3, #24
 80131a4:	f000 80af 	beq.w	8013306 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131ac:	2b02      	cmp	r3, #2
 80131ae:	f040 8086 	bne.w	80132be <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80131b2:	4b4c      	ldr	r3, [pc, #304]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4a4b      	ldr	r2, [pc, #300]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80131b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80131bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80131be:	f7fe f99b 	bl	80114f8 <HAL_GetTick>
 80131c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80131c4:	e008      	b.n	80131d8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80131c6:	f7fe f997 	bl	80114f8 <HAL_GetTick>
 80131ca:	4602      	mov	r2, r0
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	1ad3      	subs	r3, r2, r3
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d901      	bls.n	80131d8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80131d4:	2303      	movs	r3, #3
 80131d6:	e0f9      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80131d8:	4b42      	ldr	r3, [pc, #264]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d1f0      	bne.n	80131c6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80131e4:	4b3f      	ldr	r3, [pc, #252]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80131e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80131ec:	f023 0303 	bic.w	r3, r3, #3
 80131f0:	687a      	ldr	r2, [r7, #4]
 80131f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80131f8:	0212      	lsls	r2, r2, #8
 80131fa:	430a      	orrs	r2, r1
 80131fc:	4939      	ldr	r1, [pc, #228]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80131fe:	4313      	orrs	r3, r2
 8013200:	628b      	str	r3, [r1, #40]	@ 0x28
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013206:	3b01      	subs	r3, #1
 8013208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013210:	3b01      	subs	r3, #1
 8013212:	025b      	lsls	r3, r3, #9
 8013214:	b29b      	uxth	r3, r3
 8013216:	431a      	orrs	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801321c:	3b01      	subs	r3, #1
 801321e:	041b      	lsls	r3, r3, #16
 8013220:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013224:	431a      	orrs	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801322a:	3b01      	subs	r3, #1
 801322c:	061b      	lsls	r3, r3, #24
 801322e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013232:	492c      	ldr	r1, [pc, #176]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013234:	4313      	orrs	r3, r2
 8013236:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8013238:	4b2a      	ldr	r3, [pc, #168]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801323c:	4a29      	ldr	r2, [pc, #164]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801323e:	f023 0310 	bic.w	r3, r3, #16
 8013242:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013248:	4a26      	ldr	r2, [pc, #152]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 801324e:	4b25      	ldr	r3, [pc, #148]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013252:	4a24      	ldr	r2, [pc, #144]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013254:	f043 0310 	orr.w	r3, r3, #16
 8013258:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 801325a:	4b22      	ldr	r3, [pc, #136]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801325e:	f023 020c 	bic.w	r2, r3, #12
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013266:	491f      	ldr	r1, [pc, #124]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013268:	4313      	orrs	r3, r2
 801326a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 801326c:	4b1d      	ldr	r3, [pc, #116]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013270:	f023 0220 	bic.w	r2, r3, #32
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013278:	491a      	ldr	r1, [pc, #104]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801327a:	4313      	orrs	r3, r2
 801327c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 801327e:	4b19      	ldr	r3, [pc, #100]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013282:	4a18      	ldr	r2, [pc, #96]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013288:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 801328a:	4b16      	ldr	r3, [pc, #88]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4a15      	ldr	r2, [pc, #84]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 8013290:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013296:	f7fe f92f 	bl	80114f8 <HAL_GetTick>
 801329a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801329c:	e008      	b.n	80132b0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 801329e:	f7fe f92b 	bl	80114f8 <HAL_GetTick>
 80132a2:	4602      	mov	r2, r0
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	1ad3      	subs	r3, r2, r3
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d901      	bls.n	80132b0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80132ac:	2303      	movs	r3, #3
 80132ae:	e08d      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80132b0:	4b0c      	ldr	r3, [pc, #48]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d0f0      	beq.n	801329e <HAL_RCC_OscConfig+0x736>
 80132bc:	e085      	b.n	80133ca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80132be:	4b09      	ldr	r3, [pc, #36]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	4a08      	ldr	r2, [pc, #32]	@ (80132e4 <HAL_RCC_OscConfig+0x77c>)
 80132c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80132c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80132ca:	f7fe f915 	bl	80114f8 <HAL_GetTick>
 80132ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80132d0:	e00a      	b.n	80132e8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80132d2:	f7fe f911 	bl	80114f8 <HAL_GetTick>
 80132d6:	4602      	mov	r2, r0
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	1ad3      	subs	r3, r2, r3
 80132dc:	2b02      	cmp	r3, #2
 80132de:	d903      	bls.n	80132e8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80132e0:	2303      	movs	r3, #3
 80132e2:	e073      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
 80132e4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80132e8:	4b3a      	ldr	r3, [pc, #232]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d1ee      	bne.n	80132d2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80132f4:	4b37      	ldr	r3, [pc, #220]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 80132f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132f8:	4a36      	ldr	r2, [pc, #216]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 80132fa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80132fe:	f023 0303 	bic.w	r3, r3, #3
 8013302:	6293      	str	r3, [r2, #40]	@ 0x28
 8013304:	e061      	b.n	80133ca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8013306:	4b33      	ldr	r3, [pc, #204]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 8013308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801330a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801330c:	4b31      	ldr	r3, [pc, #196]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 801330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013310:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013316:	2b01      	cmp	r3, #1
 8013318:	d031      	beq.n	801337e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	f003 0203 	and.w	r2, r3, #3
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013324:	429a      	cmp	r2, r3
 8013326:	d12a      	bne.n	801337e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	0a1b      	lsrs	r3, r3, #8
 801332c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8013334:	429a      	cmp	r2, r3
 8013336:	d122      	bne.n	801337e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013342:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8013344:	429a      	cmp	r2, r3
 8013346:	d11a      	bne.n	801337e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	0a5b      	lsrs	r3, r3, #9
 801334c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013354:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8013356:	429a      	cmp	r2, r3
 8013358:	d111      	bne.n	801337e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	0c1b      	lsrs	r3, r3, #16
 801335e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013366:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8013368:	429a      	cmp	r2, r3
 801336a:	d108      	bne.n	801337e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	0e1b      	lsrs	r3, r3, #24
 8013370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013378:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 801337a:	429a      	cmp	r2, r3
 801337c:	d001      	beq.n	8013382 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 801337e:	2301      	movs	r3, #1
 8013380:	e024      	b.n	80133cc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8013382:	4b14      	ldr	r3, [pc, #80]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 8013384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013386:	08db      	lsrs	r3, r3, #3
 8013388:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8013390:	429a      	cmp	r2, r3
 8013392:	d01a      	beq.n	80133ca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8013394:	4b0f      	ldr	r3, [pc, #60]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 8013396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013398:	4a0e      	ldr	r2, [pc, #56]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 801339a:	f023 0310 	bic.w	r3, r3, #16
 801339e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80133a0:	f7fe f8aa 	bl	80114f8 <HAL_GetTick>
 80133a4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80133a6:	bf00      	nop
 80133a8:	f7fe f8a6 	bl	80114f8 <HAL_GetTick>
 80133ac:	4602      	mov	r2, r0
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d0f9      	beq.n	80133a8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133b8:	4a06      	ldr	r2, [pc, #24]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 80133ba:	00db      	lsls	r3, r3, #3
 80133bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80133be:	4b05      	ldr	r3, [pc, #20]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 80133c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133c2:	4a04      	ldr	r2, [pc, #16]	@ (80133d4 <HAL_RCC_OscConfig+0x86c>)
 80133c4:	f043 0310 	orr.w	r3, r3, #16
 80133c8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3720      	adds	r7, #32
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}
 80133d4:	44020c00 	.word	0x44020c00

080133d8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b084      	sub	sp, #16
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d101      	bne.n	80133ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80133e8:	2301      	movs	r3, #1
 80133ea:	e19e      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80133ec:	4b83      	ldr	r3, [pc, #524]	@ (80135fc <HAL_RCC_ClockConfig+0x224>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f003 030f 	and.w	r3, r3, #15
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d910      	bls.n	801341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80133fa:	4b80      	ldr	r3, [pc, #512]	@ (80135fc <HAL_RCC_ClockConfig+0x224>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f023 020f 	bic.w	r2, r3, #15
 8013402:	497e      	ldr	r1, [pc, #504]	@ (80135fc <HAL_RCC_ClockConfig+0x224>)
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	4313      	orrs	r3, r2
 8013408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801340a:	4b7c      	ldr	r3, [pc, #496]	@ (80135fc <HAL_RCC_ClockConfig+0x224>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f003 030f 	and.w	r3, r3, #15
 8013412:	683a      	ldr	r2, [r7, #0]
 8013414:	429a      	cmp	r2, r3
 8013416:	d001      	beq.n	801341c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013418:	2301      	movs	r3, #1
 801341a:	e186      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f003 0310 	and.w	r3, r3, #16
 8013424:	2b00      	cmp	r3, #0
 8013426:	d012      	beq.n	801344e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	695a      	ldr	r2, [r3, #20]
 801342c:	4b74      	ldr	r3, [pc, #464]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801342e:	6a1b      	ldr	r3, [r3, #32]
 8013430:	0a1b      	lsrs	r3, r3, #8
 8013432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013436:	429a      	cmp	r2, r3
 8013438:	d909      	bls.n	801344e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 801343a:	4b71      	ldr	r3, [pc, #452]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801343c:	6a1b      	ldr	r3, [r3, #32]
 801343e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	695b      	ldr	r3, [r3, #20]
 8013446:	021b      	lsls	r3, r3, #8
 8013448:	496d      	ldr	r1, [pc, #436]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801344a:	4313      	orrs	r3, r2
 801344c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f003 0308 	and.w	r3, r3, #8
 8013456:	2b00      	cmp	r3, #0
 8013458:	d012      	beq.n	8013480 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	691a      	ldr	r2, [r3, #16]
 801345e:	4b68      	ldr	r3, [pc, #416]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 8013460:	6a1b      	ldr	r3, [r3, #32]
 8013462:	091b      	lsrs	r3, r3, #4
 8013464:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013468:	429a      	cmp	r2, r3
 801346a:	d909      	bls.n	8013480 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 801346c:	4b64      	ldr	r3, [pc, #400]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801346e:	6a1b      	ldr	r3, [r3, #32]
 8013470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	011b      	lsls	r3, r3, #4
 801347a:	4961      	ldr	r1, [pc, #388]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801347c:	4313      	orrs	r3, r2
 801347e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f003 0304 	and.w	r3, r3, #4
 8013488:	2b00      	cmp	r3, #0
 801348a:	d010      	beq.n	80134ae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	68da      	ldr	r2, [r3, #12]
 8013490:	4b5b      	ldr	r3, [pc, #364]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 8013492:	6a1b      	ldr	r3, [r3, #32]
 8013494:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013498:	429a      	cmp	r2, r3
 801349a:	d908      	bls.n	80134ae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 801349c:	4b58      	ldr	r3, [pc, #352]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801349e:	6a1b      	ldr	r3, [r3, #32]
 80134a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	4955      	ldr	r1, [pc, #340]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80134aa:	4313      	orrs	r3, r2
 80134ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f003 0302 	and.w	r3, r3, #2
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d010      	beq.n	80134dc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	689a      	ldr	r2, [r3, #8]
 80134be:	4b50      	ldr	r3, [pc, #320]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80134c0:	6a1b      	ldr	r3, [r3, #32]
 80134c2:	f003 030f 	and.w	r3, r3, #15
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d908      	bls.n	80134dc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80134ca:	4b4d      	ldr	r3, [pc, #308]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80134cc:	6a1b      	ldr	r3, [r3, #32]
 80134ce:	f023 020f 	bic.w	r2, r3, #15
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	689b      	ldr	r3, [r3, #8]
 80134d6:	494a      	ldr	r1, [pc, #296]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80134d8:	4313      	orrs	r3, r2
 80134da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f003 0301 	and.w	r3, r3, #1
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	f000 8093 	beq.w	8013610 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	2b03      	cmp	r3, #3
 80134f0:	d107      	bne.n	8013502 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80134f2:	4b43      	ldr	r3, [pc, #268]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d121      	bne.n	8013542 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80134fe:	2301      	movs	r3, #1
 8013500:	e113      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	2b02      	cmp	r3, #2
 8013508:	d107      	bne.n	801351a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801350a:	4b3d      	ldr	r3, [pc, #244]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013512:	2b00      	cmp	r3, #0
 8013514:	d115      	bne.n	8013542 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8013516:	2301      	movs	r3, #1
 8013518:	e107      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	2b01      	cmp	r3, #1
 8013520:	d107      	bne.n	8013532 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8013522:	4b37      	ldr	r3, [pc, #220]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801352a:	2b00      	cmp	r3, #0
 801352c:	d109      	bne.n	8013542 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 801352e:	2301      	movs	r3, #1
 8013530:	e0fb      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013532:	4b33      	ldr	r3, [pc, #204]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f003 0302 	and.w	r3, r3, #2
 801353a:	2b00      	cmp	r3, #0
 801353c:	d101      	bne.n	8013542 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 801353e:	2301      	movs	r3, #1
 8013540:	e0f3      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8013542:	4b2f      	ldr	r3, [pc, #188]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 8013544:	69db      	ldr	r3, [r3, #28]
 8013546:	f023 0203 	bic.w	r2, r3, #3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	492c      	ldr	r1, [pc, #176]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 8013550:	4313      	orrs	r3, r2
 8013552:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013554:	f7fd ffd0 	bl	80114f8 <HAL_GetTick>
 8013558:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	2b03      	cmp	r3, #3
 8013560:	d112      	bne.n	8013588 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013562:	e00a      	b.n	801357a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8013564:	f7fd ffc8 	bl	80114f8 <HAL_GetTick>
 8013568:	4602      	mov	r2, r0
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	1ad3      	subs	r3, r2, r3
 801356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013572:	4293      	cmp	r3, r2
 8013574:	d901      	bls.n	801357a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8013576:	2303      	movs	r3, #3
 8013578:	e0d7      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801357a:	4b21      	ldr	r3, [pc, #132]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 801357c:	69db      	ldr	r3, [r3, #28]
 801357e:	f003 0318 	and.w	r3, r3, #24
 8013582:	2b18      	cmp	r3, #24
 8013584:	d1ee      	bne.n	8013564 <HAL_RCC_ClockConfig+0x18c>
 8013586:	e043      	b.n	8013610 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	2b02      	cmp	r3, #2
 801358e:	d112      	bne.n	80135b6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013590:	e00a      	b.n	80135a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8013592:	f7fd ffb1 	bl	80114f8 <HAL_GetTick>
 8013596:	4602      	mov	r2, r0
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d901      	bls.n	80135a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80135a4:	2303      	movs	r3, #3
 80135a6:	e0c0      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80135a8:	4b15      	ldr	r3, [pc, #84]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80135aa:	69db      	ldr	r3, [r3, #28]
 80135ac:	f003 0318 	and.w	r3, r3, #24
 80135b0:	2b10      	cmp	r3, #16
 80135b2:	d1ee      	bne.n	8013592 <HAL_RCC_ClockConfig+0x1ba>
 80135b4:	e02c      	b.n	8013610 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d122      	bne.n	8013604 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80135be:	e00a      	b.n	80135d6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80135c0:	f7fd ff9a 	bl	80114f8 <HAL_GetTick>
 80135c4:	4602      	mov	r2, r0
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	1ad3      	subs	r3, r2, r3
 80135ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d901      	bls.n	80135d6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80135d2:	2303      	movs	r3, #3
 80135d4:	e0a9      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80135d6:	4b0a      	ldr	r3, [pc, #40]	@ (8013600 <HAL_RCC_ClockConfig+0x228>)
 80135d8:	69db      	ldr	r3, [r3, #28]
 80135da:	f003 0318 	and.w	r3, r3, #24
 80135de:	2b08      	cmp	r3, #8
 80135e0:	d1ee      	bne.n	80135c0 <HAL_RCC_ClockConfig+0x1e8>
 80135e2:	e015      	b.n	8013610 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80135e4:	f7fd ff88 	bl	80114f8 <HAL_GetTick>
 80135e8:	4602      	mov	r2, r0
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d906      	bls.n	8013604 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80135f6:	2303      	movs	r3, #3
 80135f8:	e097      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
 80135fa:	bf00      	nop
 80135fc:	40022000 	.word	0x40022000
 8013600:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013604:	4b4b      	ldr	r3, [pc, #300]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 8013606:	69db      	ldr	r3, [r3, #28]
 8013608:	f003 0318 	and.w	r3, r3, #24
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1e9      	bne.n	80135e4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f003 0302 	and.w	r3, r3, #2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d010      	beq.n	801363e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	689a      	ldr	r2, [r3, #8]
 8013620:	4b44      	ldr	r3, [pc, #272]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 8013622:	6a1b      	ldr	r3, [r3, #32]
 8013624:	f003 030f 	and.w	r3, r3, #15
 8013628:	429a      	cmp	r2, r3
 801362a:	d208      	bcs.n	801363e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 801362c:	4b41      	ldr	r3, [pc, #260]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 801362e:	6a1b      	ldr	r3, [r3, #32]
 8013630:	f023 020f 	bic.w	r2, r3, #15
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	689b      	ldr	r3, [r3, #8]
 8013638:	493e      	ldr	r1, [pc, #248]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 801363a:	4313      	orrs	r3, r2
 801363c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801363e:	4b3e      	ldr	r3, [pc, #248]	@ (8013738 <HAL_RCC_ClockConfig+0x360>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f003 030f 	and.w	r3, r3, #15
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	429a      	cmp	r2, r3
 801364a:	d210      	bcs.n	801366e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801364c:	4b3a      	ldr	r3, [pc, #232]	@ (8013738 <HAL_RCC_ClockConfig+0x360>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f023 020f 	bic.w	r2, r3, #15
 8013654:	4938      	ldr	r1, [pc, #224]	@ (8013738 <HAL_RCC_ClockConfig+0x360>)
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	4313      	orrs	r3, r2
 801365a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801365c:	4b36      	ldr	r3, [pc, #216]	@ (8013738 <HAL_RCC_ClockConfig+0x360>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f003 030f 	and.w	r3, r3, #15
 8013664:	683a      	ldr	r2, [r7, #0]
 8013666:	429a      	cmp	r2, r3
 8013668:	d001      	beq.n	801366e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 801366a:	2301      	movs	r3, #1
 801366c:	e05d      	b.n	801372a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f003 0304 	and.w	r3, r3, #4
 8013676:	2b00      	cmp	r3, #0
 8013678:	d010      	beq.n	801369c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	68da      	ldr	r2, [r3, #12]
 801367e:	4b2d      	ldr	r3, [pc, #180]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 8013680:	6a1b      	ldr	r3, [r3, #32]
 8013682:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013686:	429a      	cmp	r2, r3
 8013688:	d208      	bcs.n	801369c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 801368a:	4b2a      	ldr	r3, [pc, #168]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 801368c:	6a1b      	ldr	r3, [r3, #32]
 801368e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	4927      	ldr	r1, [pc, #156]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 8013698:	4313      	orrs	r3, r2
 801369a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	f003 0308 	and.w	r3, r3, #8
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d012      	beq.n	80136ce <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	691a      	ldr	r2, [r3, #16]
 80136ac:	4b21      	ldr	r3, [pc, #132]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 80136ae:	6a1b      	ldr	r3, [r3, #32]
 80136b0:	091b      	lsrs	r3, r3, #4
 80136b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d209      	bcs.n	80136ce <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80136ba:	4b1e      	ldr	r3, [pc, #120]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 80136bc:	6a1b      	ldr	r3, [r3, #32]
 80136be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	691b      	ldr	r3, [r3, #16]
 80136c6:	011b      	lsls	r3, r3, #4
 80136c8:	491a      	ldr	r1, [pc, #104]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 80136ca:	4313      	orrs	r3, r2
 80136cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f003 0310 	and.w	r3, r3, #16
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d012      	beq.n	8013700 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	695a      	ldr	r2, [r3, #20]
 80136de:	4b15      	ldr	r3, [pc, #84]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 80136e0:	6a1b      	ldr	r3, [r3, #32]
 80136e2:	0a1b      	lsrs	r3, r3, #8
 80136e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d209      	bcs.n	8013700 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80136ec:	4b11      	ldr	r3, [pc, #68]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 80136ee:	6a1b      	ldr	r3, [r3, #32]
 80136f0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	695b      	ldr	r3, [r3, #20]
 80136f8:	021b      	lsls	r3, r3, #8
 80136fa:	490e      	ldr	r1, [pc, #56]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 80136fc:	4313      	orrs	r3, r2
 80136fe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8013700:	f000 f822 	bl	8013748 <HAL_RCC_GetSysClockFreq>
 8013704:	4602      	mov	r2, r0
 8013706:	4b0b      	ldr	r3, [pc, #44]	@ (8013734 <HAL_RCC_ClockConfig+0x35c>)
 8013708:	6a1b      	ldr	r3, [r3, #32]
 801370a:	f003 030f 	and.w	r3, r3, #15
 801370e:	490b      	ldr	r1, [pc, #44]	@ (801373c <HAL_RCC_ClockConfig+0x364>)
 8013710:	5ccb      	ldrb	r3, [r1, r3]
 8013712:	fa22 f303 	lsr.w	r3, r2, r3
 8013716:	4a0a      	ldr	r2, [pc, #40]	@ (8013740 <HAL_RCC_ClockConfig+0x368>)
 8013718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801371a:	4b0a      	ldr	r3, [pc, #40]	@ (8013744 <HAL_RCC_ClockConfig+0x36c>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	4618      	mov	r0, r3
 8013720:	f7fd fe60 	bl	80113e4 <HAL_InitTick>
 8013724:	4603      	mov	r3, r0
 8013726:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8013728:	7afb      	ldrb	r3, [r7, #11]
}
 801372a:	4618      	mov	r0, r3
 801372c:	3710      	adds	r7, #16
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	44020c00 	.word	0x44020c00
 8013738:	40022000 	.word	0x40022000
 801373c:	0801f320 	.word	0x0801f320
 8013740:	200000a8 	.word	0x200000a8
 8013744:	200000ac 	.word	0x200000ac

08013748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013748:	b480      	push	{r7}
 801374a:	b089      	sub	sp, #36	@ 0x24
 801374c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 801374e:	4b8c      	ldr	r3, [pc, #560]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 8013750:	69db      	ldr	r3, [r3, #28]
 8013752:	f003 0318 	and.w	r3, r3, #24
 8013756:	2b08      	cmp	r3, #8
 8013758:	d102      	bne.n	8013760 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801375a:	4b8a      	ldr	r3, [pc, #552]	@ (8013984 <HAL_RCC_GetSysClockFreq+0x23c>)
 801375c:	61fb      	str	r3, [r7, #28]
 801375e:	e107      	b.n	8013970 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8013760:	4b87      	ldr	r3, [pc, #540]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 8013762:	69db      	ldr	r3, [r3, #28]
 8013764:	f003 0318 	and.w	r3, r3, #24
 8013768:	2b00      	cmp	r3, #0
 801376a:	d112      	bne.n	8013792 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 801376c:	4b84      	ldr	r3, [pc, #528]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f003 0320 	and.w	r3, r3, #32
 8013774:	2b00      	cmp	r3, #0
 8013776:	d009      	beq.n	801378c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8013778:	4b81      	ldr	r3, [pc, #516]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	08db      	lsrs	r3, r3, #3
 801377e:	f003 0303 	and.w	r3, r3, #3
 8013782:	4a81      	ldr	r2, [pc, #516]	@ (8013988 <HAL_RCC_GetSysClockFreq+0x240>)
 8013784:	fa22 f303 	lsr.w	r3, r2, r3
 8013788:	61fb      	str	r3, [r7, #28]
 801378a:	e0f1      	b.n	8013970 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 801378c:	4b7e      	ldr	r3, [pc, #504]	@ (8013988 <HAL_RCC_GetSysClockFreq+0x240>)
 801378e:	61fb      	str	r3, [r7, #28]
 8013790:	e0ee      	b.n	8013970 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8013792:	4b7b      	ldr	r3, [pc, #492]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 8013794:	69db      	ldr	r3, [r3, #28]
 8013796:	f003 0318 	and.w	r3, r3, #24
 801379a:	2b10      	cmp	r3, #16
 801379c:	d102      	bne.n	80137a4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801379e:	4b7b      	ldr	r3, [pc, #492]	@ (801398c <HAL_RCC_GetSysClockFreq+0x244>)
 80137a0:	61fb      	str	r3, [r7, #28]
 80137a2:	e0e5      	b.n	8013970 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80137a4:	4b76      	ldr	r3, [pc, #472]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 80137a6:	69db      	ldr	r3, [r3, #28]
 80137a8:	f003 0318 	and.w	r3, r3, #24
 80137ac:	2b18      	cmp	r3, #24
 80137ae:	f040 80dd 	bne.w	801396c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80137b2:	4b73      	ldr	r3, [pc, #460]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 80137b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137b6:	f003 0303 	and.w	r3, r3, #3
 80137ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80137bc:	4b70      	ldr	r3, [pc, #448]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 80137be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137c0:	0a1b      	lsrs	r3, r3, #8
 80137c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80137c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80137c8:	4b6d      	ldr	r3, [pc, #436]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 80137ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137cc:	091b      	lsrs	r3, r3, #4
 80137ce:	f003 0301 	and.w	r3, r3, #1
 80137d2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80137d4:	4b6a      	ldr	r3, [pc, #424]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 80137d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80137d8:	08db      	lsrs	r3, r3, #3
 80137da:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80137de:	68fa      	ldr	r2, [r7, #12]
 80137e0:	fb02 f303 	mul.w	r3, r2, r3
 80137e4:	ee07 3a90 	vmov	s15, r3
 80137e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137ec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	f000 80b7 	beq.w	8013966 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d003      	beq.n	8013806 <HAL_RCC_GetSysClockFreq+0xbe>
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2b03      	cmp	r3, #3
 8013802:	d056      	beq.n	80138b2 <HAL_RCC_GetSysClockFreq+0x16a>
 8013804:	e077      	b.n	80138f6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8013806:	4b5e      	ldr	r3, [pc, #376]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f003 0320 	and.w	r3, r3, #32
 801380e:	2b00      	cmp	r3, #0
 8013810:	d02d      	beq.n	801386e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8013812:	4b5b      	ldr	r3, [pc, #364]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	08db      	lsrs	r3, r3, #3
 8013818:	f003 0303 	and.w	r3, r3, #3
 801381c:	4a5a      	ldr	r2, [pc, #360]	@ (8013988 <HAL_RCC_GetSysClockFreq+0x240>)
 801381e:	fa22 f303 	lsr.w	r3, r2, r3
 8013822:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	ee07 3a90 	vmov	s15, r3
 801382a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	ee07 3a90 	vmov	s15, r3
 8013834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801383c:	4b50      	ldr	r3, [pc, #320]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 801383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013844:	ee07 3a90 	vmov	s15, r3
 8013848:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 801384c:	ed97 6a02 	vldr	s12, [r7, #8]
 8013850:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8013990 <HAL_RCC_GetSysClockFreq+0x248>
 8013854:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013858:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 801385c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013860:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013868:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 801386c:	e065      	b.n	801393a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	ee07 3a90 	vmov	s15, r3
 8013874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013878:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8013994 <HAL_RCC_GetSysClockFreq+0x24c>
 801387c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013880:	4b3f      	ldr	r3, [pc, #252]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 8013882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013888:	ee07 3a90 	vmov	s15, r3
 801388c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8013890:	ed97 6a02 	vldr	s12, [r7, #8]
 8013894:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8013990 <HAL_RCC_GetSysClockFreq+0x248>
 8013898:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801389c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80138a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80138a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80138b0:	e043      	b.n	801393a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	ee07 3a90 	vmov	s15, r3
 80138b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138bc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8013998 <HAL_RCC_GetSysClockFreq+0x250>
 80138c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80138c4:	4b2e      	ldr	r3, [pc, #184]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 80138c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80138c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138cc:	ee07 3a90 	vmov	s15, r3
 80138d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80138d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80138d8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8013990 <HAL_RCC_GetSysClockFreq+0x248>
 80138dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80138e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80138e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138f0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80138f4:	e021      	b.n	801393a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	ee07 3a90 	vmov	s15, r3
 80138fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013900:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801399c <HAL_RCC_GetSysClockFreq+0x254>
 8013904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013908:	4b1d      	ldr	r3, [pc, #116]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 801390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013910:	ee07 3a90 	vmov	s15, r3
 8013914:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8013918:	ed97 6a02 	vldr	s12, [r7, #8]
 801391c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8013990 <HAL_RCC_GetSysClockFreq+0x248>
 8013920:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013924:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8013928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801392c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013934:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8013938:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 801393a:	4b11      	ldr	r3, [pc, #68]	@ (8013980 <HAL_RCC_GetSysClockFreq+0x238>)
 801393c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801393e:	0a5b      	lsrs	r3, r3, #9
 8013940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013944:	3301      	adds	r3, #1
 8013946:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	ee07 3a90 	vmov	s15, r3
 801394e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013952:	edd7 6a06 	vldr	s13, [r7, #24]
 8013956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801395a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801395e:	ee17 3a90 	vmov	r3, s15
 8013962:	61fb      	str	r3, [r7, #28]
 8013964:	e004      	b.n	8013970 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8013966:	2300      	movs	r3, #0
 8013968:	61fb      	str	r3, [r7, #28]
 801396a:	e001      	b.n	8013970 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 801396c:	4b06      	ldr	r3, [pc, #24]	@ (8013988 <HAL_RCC_GetSysClockFreq+0x240>)
 801396e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8013970:	69fb      	ldr	r3, [r7, #28]
}
 8013972:	4618      	mov	r0, r3
 8013974:	3724      	adds	r7, #36	@ 0x24
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop
 8013980:	44020c00 	.word	0x44020c00
 8013984:	003d0900 	.word	0x003d0900
 8013988:	03d09000 	.word	0x03d09000
 801398c:	017d7840 	.word	0x017d7840
 8013990:	46000000 	.word	0x46000000
 8013994:	4c742400 	.word	0x4c742400
 8013998:	4bbebc20 	.word	0x4bbebc20
 801399c:	4a742400 	.word	0x4a742400

080139a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80139a4:	f7ff fed0 	bl	8013748 <HAL_RCC_GetSysClockFreq>
 80139a8:	4602      	mov	r2, r0
 80139aa:	4b08      	ldr	r3, [pc, #32]	@ (80139cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80139ac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80139ae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80139b2:	4907      	ldr	r1, [pc, #28]	@ (80139d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80139b4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80139b6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80139ba:	fa22 f303 	lsr.w	r3, r2, r3
 80139be:	4a05      	ldr	r2, [pc, #20]	@ (80139d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80139c0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80139c2:	4b04      	ldr	r3, [pc, #16]	@ (80139d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80139c4:	681b      	ldr	r3, [r3, #0]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	44020c00 	.word	0x44020c00
 80139d0:	0801f320 	.word	0x0801f320
 80139d4:	200000a8 	.word	0x200000a8

080139d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80139dc:	f7ff ffe0 	bl	80139a0 <HAL_RCC_GetHCLKFreq>
 80139e0:	4602      	mov	r2, r0
 80139e2:	4b06      	ldr	r3, [pc, #24]	@ (80139fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80139e4:	6a1b      	ldr	r3, [r3, #32]
 80139e6:	091b      	lsrs	r3, r3, #4
 80139e8:	f003 0307 	and.w	r3, r3, #7
 80139ec:	4904      	ldr	r1, [pc, #16]	@ (8013a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80139ee:	5ccb      	ldrb	r3, [r1, r3]
 80139f0:	f003 031f 	and.w	r3, r3, #31
 80139f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	44020c00 	.word	0x44020c00
 8013a00:	0801f330 	.word	0x0801f330

08013a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8013a08:	f7ff ffca 	bl	80139a0 <HAL_RCC_GetHCLKFreq>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	4b06      	ldr	r3, [pc, #24]	@ (8013a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013a10:	6a1b      	ldr	r3, [r3, #32]
 8013a12:	0a1b      	lsrs	r3, r3, #8
 8013a14:	f003 0307 	and.w	r3, r3, #7
 8013a18:	4904      	ldr	r1, [pc, #16]	@ (8013a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8013a1a:	5ccb      	ldrb	r3, [r1, r3]
 8013a1c:	f003 031f 	and.w	r3, r3, #31
 8013a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	bd80      	pop	{r7, pc}
 8013a28:	44020c00 	.word	0x44020c00
 8013a2c:	0801f330 	.word	0x0801f330

08013a30 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8013a34:	f7ff ffb4 	bl	80139a0 <HAL_RCC_GetHCLKFreq>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	4b06      	ldr	r3, [pc, #24]	@ (8013a54 <HAL_RCC_GetPCLK3Freq+0x24>)
 8013a3c:	6a1b      	ldr	r3, [r3, #32]
 8013a3e:	0b1b      	lsrs	r3, r3, #12
 8013a40:	f003 0307 	and.w	r3, r3, #7
 8013a44:	4904      	ldr	r1, [pc, #16]	@ (8013a58 <HAL_RCC_GetPCLK3Freq+0x28>)
 8013a46:	5ccb      	ldrb	r3, [r1, r3]
 8013a48:	f003 031f 	and.w	r3, r3, #31
 8013a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	44020c00 	.word	0x44020c00
 8013a58:	0801f330 	.word	0x0801f330

08013a5c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8013a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a60:	b0d8      	sub	sp, #352	@ 0x160
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013a68:	2300      	movs	r3, #0
 8013a6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8013a80:	2500      	movs	r5, #0
 8013a82:	ea54 0305 	orrs.w	r3, r4, r5
 8013a86:	d00b      	beq.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8013a88:	4bcd      	ldr	r3, [pc, #820]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013a8e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8013a92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a98:	4ac9      	ldr	r2, [pc, #804]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013a9a:	430b      	orrs	r3, r1
 8013a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa8:	f002 0801 	and.w	r8, r2, #1
 8013aac:	f04f 0900 	mov.w	r9, #0
 8013ab0:	ea58 0309 	orrs.w	r3, r8, r9
 8013ab4:	d042      	beq.n	8013b3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8013ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013abc:	2b05      	cmp	r3, #5
 8013abe:	d823      	bhi.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8013ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8013ac8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8013ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac6:	bf00      	nop
 8013ac8:	08013b11 	.word	0x08013b11
 8013acc:	08013ae1 	.word	0x08013ae1
 8013ad0:	08013af5 	.word	0x08013af5
 8013ad4:	08013b11 	.word	0x08013b11
 8013ad8:	08013b11 	.word	0x08013b11
 8013adc:	08013b11 	.word	0x08013b11
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ae4:	3308      	adds	r3, #8
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f004 feda 	bl	80188a0 <RCCEx_PLL2_Config>
 8013aec:	4603      	mov	r3, r0
 8013aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8013af2:	e00e      	b.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013af8:	3330      	adds	r3, #48	@ 0x30
 8013afa:	4618      	mov	r0, r3
 8013afc:	f004 ff68 	bl	80189d0 <RCCEx_PLL3_Config>
 8013b00:	4603      	mov	r3, r0
 8013b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8013b06:	e004      	b.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013b0e:	e000      	b.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8013b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013b12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10c      	bne.n	8013b34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8013b1a:	4ba9      	ldr	r3, [pc, #676]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013b20:	f023 0107 	bic.w	r1, r3, #7
 8013b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013b2a:	4aa5      	ldr	r2, [pc, #660]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013b2c:	430b      	orrs	r3, r1
 8013b2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013b32:	e003      	b.n	8013b3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013b38:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b44:	f002 0a02 	and.w	sl, r2, #2
 8013b48:	f04f 0b00 	mov.w	fp, #0
 8013b4c:	ea5a 030b 	orrs.w	r3, sl, fp
 8013b50:	f000 8088 	beq.w	8013c64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8013b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013b5a:	2b28      	cmp	r3, #40	@ 0x28
 8013b5c:	d868      	bhi.n	8013c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8013b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8013b64 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8013b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b64:	08013c39 	.word	0x08013c39
 8013b68:	08013c31 	.word	0x08013c31
 8013b6c:	08013c31 	.word	0x08013c31
 8013b70:	08013c31 	.word	0x08013c31
 8013b74:	08013c31 	.word	0x08013c31
 8013b78:	08013c31 	.word	0x08013c31
 8013b7c:	08013c31 	.word	0x08013c31
 8013b80:	08013c31 	.word	0x08013c31
 8013b84:	08013c09 	.word	0x08013c09
 8013b88:	08013c31 	.word	0x08013c31
 8013b8c:	08013c31 	.word	0x08013c31
 8013b90:	08013c31 	.word	0x08013c31
 8013b94:	08013c31 	.word	0x08013c31
 8013b98:	08013c31 	.word	0x08013c31
 8013b9c:	08013c31 	.word	0x08013c31
 8013ba0:	08013c31 	.word	0x08013c31
 8013ba4:	08013c1d 	.word	0x08013c1d
 8013ba8:	08013c31 	.word	0x08013c31
 8013bac:	08013c31 	.word	0x08013c31
 8013bb0:	08013c31 	.word	0x08013c31
 8013bb4:	08013c31 	.word	0x08013c31
 8013bb8:	08013c31 	.word	0x08013c31
 8013bbc:	08013c31 	.word	0x08013c31
 8013bc0:	08013c31 	.word	0x08013c31
 8013bc4:	08013c39 	.word	0x08013c39
 8013bc8:	08013c31 	.word	0x08013c31
 8013bcc:	08013c31 	.word	0x08013c31
 8013bd0:	08013c31 	.word	0x08013c31
 8013bd4:	08013c31 	.word	0x08013c31
 8013bd8:	08013c31 	.word	0x08013c31
 8013bdc:	08013c31 	.word	0x08013c31
 8013be0:	08013c31 	.word	0x08013c31
 8013be4:	08013c39 	.word	0x08013c39
 8013be8:	08013c31 	.word	0x08013c31
 8013bec:	08013c31 	.word	0x08013c31
 8013bf0:	08013c31 	.word	0x08013c31
 8013bf4:	08013c31 	.word	0x08013c31
 8013bf8:	08013c31 	.word	0x08013c31
 8013bfc:	08013c31 	.word	0x08013c31
 8013c00:	08013c31 	.word	0x08013c31
 8013c04:	08013c39 	.word	0x08013c39
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c0c:	3308      	adds	r3, #8
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f004 fe46 	bl	80188a0 <RCCEx_PLL2_Config>
 8013c14:	4603      	mov	r3, r0
 8013c16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8013c1a:	e00e      	b.n	8013c3a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c20:	3330      	adds	r3, #48	@ 0x30
 8013c22:	4618      	mov	r0, r3
 8013c24:	f004 fed4 	bl	80189d0 <RCCEx_PLL3_Config>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8013c2e:	e004      	b.n	8013c3a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013c30:	2301      	movs	r3, #1
 8013c32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013c36:	e000      	b.n	8013c3a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8013c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013c3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d10c      	bne.n	8013c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8013c42:	4b5f      	ldr	r3, [pc, #380]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013c44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013c48:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8013c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013c52:	4a5b      	ldr	r2, [pc, #364]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013c54:	430b      	orrs	r3, r1
 8013c56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013c5a:	e003      	b.n	8013c64 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013c60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6c:	f002 0304 	and.w	r3, r2, #4
 8013c70:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8013c74:	2300      	movs	r3, #0
 8013c76:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8013c7a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8013c7e:	460b      	mov	r3, r1
 8013c80:	4313      	orrs	r3, r2
 8013c82:	d04e      	beq.n	8013d22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8013c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013c8a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8013c8e:	d02c      	beq.n	8013cea <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8013c90:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8013c94:	d825      	bhi.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c9a:	d028      	beq.n	8013cee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8013c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ca0:	d81f      	bhi.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013ca2:	2bc0      	cmp	r3, #192	@ 0xc0
 8013ca4:	d025      	beq.n	8013cf2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8013ca6:	2bc0      	cmp	r3, #192	@ 0xc0
 8013ca8:	d81b      	bhi.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013caa:	2b80      	cmp	r3, #128	@ 0x80
 8013cac:	d00f      	beq.n	8013cce <HAL_RCCEx_PeriphCLKConfig+0x272>
 8013cae:	2b80      	cmp	r3, #128	@ 0x80
 8013cb0:	d817      	bhi.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d01f      	beq.n	8013cf6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8013cb6:	2b40      	cmp	r3, #64	@ 0x40
 8013cb8:	d113      	bne.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013cbe:	3308      	adds	r3, #8
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f004 fded 	bl	80188a0 <RCCEx_PLL2_Config>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8013ccc:	e014      	b.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013cd2:	3330      	adds	r3, #48	@ 0x30
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f004 fe7b 	bl	80189d0 <RCCEx_PLL3_Config>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8013ce0:	e00a      	b.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013ce8:	e006      	b.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013cea:	bf00      	nop
 8013cec:	e004      	b.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013cee:	bf00      	nop
 8013cf0:	e002      	b.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013cf2:	bf00      	nop
 8013cf4:	e000      	b.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013cf8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d10c      	bne.n	8013d1a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8013d00:	4b2f      	ldr	r3, [pc, #188]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013d06:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8013d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013d10:	4a2b      	ldr	r2, [pc, #172]	@ (8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013d12:	430b      	orrs	r3, r1
 8013d14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013d18:	e003      	b.n	8013d22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013d1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8013d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2a:	f002 0308 	and.w	r3, r2, #8
 8013d2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8013d32:	2300      	movs	r3, #0
 8013d34:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8013d38:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	d056      	beq.n	8013df0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8013d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013d48:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8013d4c:	d031      	beq.n	8013db2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8013d4e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8013d52:	d82a      	bhi.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013d58:	d02d      	beq.n	8013db6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8013d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013d5e:	d824      	bhi.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013d60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013d64:	d029      	beq.n	8013dba <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8013d66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013d6a:	d81e      	bhi.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d70:	d011      	beq.n	8013d96 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8013d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d76:	d818      	bhi.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d023      	beq.n	8013dc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8013d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d80:	d113      	bne.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d86:	3308      	adds	r3, #8
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f004 fd89 	bl	80188a0 <RCCEx_PLL2_Config>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8013d94:	e017      	b.n	8013dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d9a:	3330      	adds	r3, #48	@ 0x30
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f004 fe17 	bl	80189d0 <RCCEx_PLL3_Config>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8013da8:	e00d      	b.n	8013dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013daa:	2301      	movs	r3, #1
 8013dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013db0:	e009      	b.n	8013dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8013db2:	bf00      	nop
 8013db4:	e007      	b.n	8013dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8013db6:	bf00      	nop
 8013db8:	e005      	b.n	8013dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8013dba:	bf00      	nop
 8013dbc:	e003      	b.n	8013dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8013dbe:	bf00      	nop
 8013dc0:	44020c00 	.word	0x44020c00
        break;
 8013dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013dc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d10c      	bne.n	8013de8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8013dce:	4bbb      	ldr	r3, [pc, #748]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013dd4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8013dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013dde:	4ab7      	ldr	r2, [pc, #732]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013de0:	430b      	orrs	r3, r1
 8013de2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013de6:	e003      	b.n	8013df0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013de8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013dec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8013df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	f002 0310 	and.w	r3, r2, #16
 8013dfc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013e00:	2300      	movs	r3, #0
 8013e02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013e06:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	d053      	beq.n	8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8013e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013e1a:	d031      	beq.n	8013e80 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8013e1c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013e20:	d82a      	bhi.n	8013e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e26:	d02d      	beq.n	8013e84 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8013e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e2c:	d824      	bhi.n	8013e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e32:	d029      	beq.n	8013e88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8013e34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e38:	d81e      	bhi.n	8013e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013e3e:	d011      	beq.n	8013e64 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8013e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013e44:	d818      	bhi.n	8013e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d020      	beq.n	8013e8c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8013e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013e4e:	d113      	bne.n	8013e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013e54:	3308      	adds	r3, #8
 8013e56:	4618      	mov	r0, r3
 8013e58:	f004 fd22 	bl	80188a0 <RCCEx_PLL2_Config>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8013e62:	e014      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013e68:	3330      	adds	r3, #48	@ 0x30
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f004 fdb0 	bl	80189d0 <RCCEx_PLL3_Config>
 8013e70:	4603      	mov	r3, r0
 8013e72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8013e76:	e00a      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013e78:	2301      	movs	r3, #1
 8013e7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013e7e:	e006      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013e80:	bf00      	nop
 8013e82:	e004      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013e84:	bf00      	nop
 8013e86:	e002      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013e88:	bf00      	nop
 8013e8a:	e000      	b.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013e8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d10c      	bne.n	8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8013e96:	4b89      	ldr	r3, [pc, #548]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013e9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8013ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ea6:	4a85      	ldr	r2, [pc, #532]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013ea8:	430b      	orrs	r3, r1
 8013eaa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013eae:	e003      	b.n	8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013eb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013eb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8013eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec0:	f002 0320 	and.w	r3, r2, #32
 8013ec4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013ece:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	d053      	beq.n	8013f80 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8013ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ede:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8013ee2:	d031      	beq.n	8013f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8013ee4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8013ee8:	d82a      	bhi.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013eee:	d02d      	beq.n	8013f4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8013ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013ef4:	d824      	bhi.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013ef6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8013efa:	d029      	beq.n	8013f50 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8013efc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8013f00:	d81e      	bhi.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f06:	d011      	beq.n	8013f2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8013f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f0c:	d818      	bhi.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d020      	beq.n	8013f54 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8013f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013f16:	d113      	bne.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f004 fcbe 	bl	80188a0 <RCCEx_PLL2_Config>
 8013f24:	4603      	mov	r3, r0
 8013f26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8013f2a:	e014      	b.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f30:	3330      	adds	r3, #48	@ 0x30
 8013f32:	4618      	mov	r0, r3
 8013f34:	f004 fd4c 	bl	80189d0 <RCCEx_PLL3_Config>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8013f3e:	e00a      	b.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f40:	2301      	movs	r3, #1
 8013f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013f46:	e006      	b.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013f48:	bf00      	nop
 8013f4a:	e004      	b.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013f4c:	bf00      	nop
 8013f4e:	e002      	b.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013f50:	bf00      	nop
 8013f52:	e000      	b.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10c      	bne.n	8013f78 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8013f5e:	4b57      	ldr	r3, [pc, #348]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013f64:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8013f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f6e:	4a53      	ldr	r2, [pc, #332]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013f70:	430b      	orrs	r3, r1
 8013f72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013f76:	e003      	b.n	8013f80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013f7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8013f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f88:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8013f8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8013f90:	2300      	movs	r3, #0
 8013f92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013f96:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	4313      	orrs	r3, r2
 8013f9e:	d053      	beq.n	8014048 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8013fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fa6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8013faa:	d031      	beq.n	8014010 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8013fac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8013fb0:	d82a      	bhi.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8013fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013fb6:	d02d      	beq.n	8014014 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8013fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013fbc:	d824      	bhi.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8013fbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8013fc2:	d029      	beq.n	8014018 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013fc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8013fc8:	d81e      	bhi.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8013fca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8013fce:	d011      	beq.n	8013ff4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8013fd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8013fd4:	d818      	bhi.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d020      	beq.n	801401c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8013fda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013fde:	d113      	bne.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013fe4:	3308      	adds	r3, #8
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f004 fc5a 	bl	80188a0 <RCCEx_PLL2_Config>
 8013fec:	4603      	mov	r3, r0
 8013fee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8013ff2:	e014      	b.n	801401e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ff8:	3330      	adds	r3, #48	@ 0x30
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f004 fce8 	bl	80189d0 <RCCEx_PLL3_Config>
 8014000:	4603      	mov	r3, r0
 8014002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8014006:	e00a      	b.n	801401e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014008:	2301      	movs	r3, #1
 801400a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801400e:	e006      	b.n	801401e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8014010:	bf00      	nop
 8014012:	e004      	b.n	801401e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8014014:	bf00      	nop
 8014016:	e002      	b.n	801401e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8014018:	bf00      	nop
 801401a:	e000      	b.n	801401e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 801401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801401e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10c      	bne.n	8014040 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8014026:	4b25      	ldr	r3, [pc, #148]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8014028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801402c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8014030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014036:	4a21      	ldr	r2, [pc, #132]	@ (80140bc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8014038:	430b      	orrs	r3, r1
 801403a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801403e:	e003      	b.n	8014048 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014040:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014044:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8014048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014050:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8014054:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8014058:	2300      	movs	r3, #0
 801405a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 801405e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8014062:	460b      	mov	r3, r1
 8014064:	4313      	orrs	r3, r2
 8014066:	d055      	beq.n	8014114 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8014068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801406c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801406e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8014072:	d033      	beq.n	80140dc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8014074:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8014078:	d82c      	bhi.n	80140d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 801407a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801407e:	d02f      	beq.n	80140e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8014080:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014084:	d826      	bhi.n	80140d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8014086:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801408a:	d02b      	beq.n	80140e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 801408c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8014090:	d820      	bhi.n	80140d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8014092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014096:	d013      	beq.n	80140c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8014098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801409c:	d81a      	bhi.n	80140d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d022      	beq.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80140a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80140a6:	d115      	bne.n	80140d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80140a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80140ac:	3308      	adds	r3, #8
 80140ae:	4618      	mov	r0, r3
 80140b0:	f004 fbf6 	bl	80188a0 <RCCEx_PLL2_Config>
 80140b4:	4603      	mov	r3, r0
 80140b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80140ba:	e016      	b.n	80140ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80140bc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80140c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80140c4:	3330      	adds	r3, #48	@ 0x30
 80140c6:	4618      	mov	r0, r3
 80140c8:	f004 fc82 	bl	80189d0 <RCCEx_PLL3_Config>
 80140cc:	4603      	mov	r3, r0
 80140ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80140d2:	e00a      	b.n	80140ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80140d4:	2301      	movs	r3, #1
 80140d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80140da:	e006      	b.n	80140ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80140dc:	bf00      	nop
 80140de:	e004      	b.n	80140ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80140e0:	bf00      	nop
 80140e2:	e002      	b.n	80140ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80140e4:	bf00      	nop
 80140e6:	e000      	b.n	80140ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80140e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80140ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d10c      	bne.n	801410c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80140f2:	4bbb      	ldr	r3, [pc, #748]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80140f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80140f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80140fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014102:	4ab7      	ldr	r2, [pc, #732]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014104:	430b      	orrs	r3, r1
 8014106:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801410a:	e003      	b.n	8014114 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801410c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014110:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8014114:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8014120:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8014124:	2300      	movs	r3, #0
 8014126:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801412a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 801412e:	460b      	mov	r3, r1
 8014130:	4313      	orrs	r3, r2
 8014132:	d053      	beq.n	80141dc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8014134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801413a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801413e:	d031      	beq.n	80141a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8014140:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014144:	d82a      	bhi.n	801419c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8014146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801414a:	d02d      	beq.n	80141a8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 801414c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014150:	d824      	bhi.n	801419c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8014152:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014156:	d029      	beq.n	80141ac <HAL_RCCEx_PeriphCLKConfig+0x750>
 8014158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801415c:	d81e      	bhi.n	801419c <HAL_RCCEx_PeriphCLKConfig+0x740>
 801415e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014162:	d011      	beq.n	8014188 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8014164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014168:	d818      	bhi.n	801419c <HAL_RCCEx_PeriphCLKConfig+0x740>
 801416a:	2b00      	cmp	r3, #0
 801416c:	d020      	beq.n	80141b0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 801416e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014172:	d113      	bne.n	801419c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014178:	3308      	adds	r3, #8
 801417a:	4618      	mov	r0, r3
 801417c:	f004 fb90 	bl	80188a0 <RCCEx_PLL2_Config>
 8014180:	4603      	mov	r3, r0
 8014182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8014186:	e014      	b.n	80141b2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801418c:	3330      	adds	r3, #48	@ 0x30
 801418e:	4618      	mov	r0, r3
 8014190:	f004 fc1e 	bl	80189d0 <RCCEx_PLL3_Config>
 8014194:	4603      	mov	r3, r0
 8014196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 801419a:	e00a      	b.n	80141b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801419c:	2301      	movs	r3, #1
 801419e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80141a2:	e006      	b.n	80141b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80141a4:	bf00      	nop
 80141a6:	e004      	b.n	80141b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80141a8:	bf00      	nop
 80141aa:	e002      	b.n	80141b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80141ac:	bf00      	nop
 80141ae:	e000      	b.n	80141b2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80141b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80141b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d10c      	bne.n	80141d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80141ba:	4b89      	ldr	r3, [pc, #548]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80141bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80141c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80141c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80141c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80141ca:	4a85      	ldr	r2, [pc, #532]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80141cc:	430b      	orrs	r3, r1
 80141ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80141d2:	e003      	b.n	80141dc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80141d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80141d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80141dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80141e8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80141ec:	2300      	movs	r3, #0
 80141ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80141f2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80141f6:	460b      	mov	r3, r1
 80141f8:	4313      	orrs	r3, r2
 80141fa:	d055      	beq.n	80142a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80141fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014204:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8014208:	d031      	beq.n	801426e <HAL_RCCEx_PeriphCLKConfig+0x812>
 801420a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 801420e:	d82a      	bhi.n	8014266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8014210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014214:	d02d      	beq.n	8014272 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8014216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801421a:	d824      	bhi.n	8014266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 801421c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8014220:	d029      	beq.n	8014276 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8014222:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8014226:	d81e      	bhi.n	8014266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8014228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801422c:	d011      	beq.n	8014252 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 801422e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014232:	d818      	bhi.n	8014266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8014234:	2b00      	cmp	r3, #0
 8014236:	d020      	beq.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8014238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801423c:	d113      	bne.n	8014266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801423e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014242:	3308      	adds	r3, #8
 8014244:	4618      	mov	r0, r3
 8014246:	f004 fb2b 	bl	80188a0 <RCCEx_PLL2_Config>
 801424a:	4603      	mov	r3, r0
 801424c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8014250:	e014      	b.n	801427c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014252:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014256:	3330      	adds	r3, #48	@ 0x30
 8014258:	4618      	mov	r0, r3
 801425a:	f004 fbb9 	bl	80189d0 <RCCEx_PLL3_Config>
 801425e:	4603      	mov	r3, r0
 8014260:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8014264:	e00a      	b.n	801427c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014266:	2301      	movs	r3, #1
 8014268:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801426c:	e006      	b.n	801427c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 801426e:	bf00      	nop
 8014270:	e004      	b.n	801427c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8014272:	bf00      	nop
 8014274:	e002      	b.n	801427c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8014276:	bf00      	nop
 8014278:	e000      	b.n	801427c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 801427a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801427c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014280:	2b00      	cmp	r3, #0
 8014282:	d10d      	bne.n	80142a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8014284:	4b56      	ldr	r3, [pc, #344]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801428a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 801428e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014296:	4a52      	ldr	r2, [pc, #328]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014298:	430b      	orrs	r3, r1
 801429a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801429e:	e003      	b.n	80142a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80142a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80142a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80142a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80142ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80142b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80142b8:	2300      	movs	r3, #0
 80142ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80142be:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80142c2:	460b      	mov	r3, r1
 80142c4:	4313      	orrs	r3, r2
 80142c6:	d044      	beq.n	8014352 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80142c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80142cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80142d0:	2b05      	cmp	r3, #5
 80142d2:	d823      	bhi.n	801431c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80142d4:	a201      	add	r2, pc, #4	@ (adr r2, 80142dc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80142d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142da:	bf00      	nop
 80142dc:	08014325 	.word	0x08014325
 80142e0:	080142f5 	.word	0x080142f5
 80142e4:	08014309 	.word	0x08014309
 80142e8:	08014325 	.word	0x08014325
 80142ec:	08014325 	.word	0x08014325
 80142f0:	08014325 	.word	0x08014325
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80142f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80142f8:	3308      	adds	r3, #8
 80142fa:	4618      	mov	r0, r3
 80142fc:	f004 fad0 	bl	80188a0 <RCCEx_PLL2_Config>
 8014300:	4603      	mov	r3, r0
 8014302:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8014306:	e00e      	b.n	8014326 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801430c:	3330      	adds	r3, #48	@ 0x30
 801430e:	4618      	mov	r0, r3
 8014310:	f004 fb5e 	bl	80189d0 <RCCEx_PLL3_Config>
 8014314:	4603      	mov	r3, r0
 8014316:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 801431a:	e004      	b.n	8014326 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801431c:	2301      	movs	r3, #1
 801431e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014322:	e000      	b.n	8014326 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8014324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014326:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801432a:	2b00      	cmp	r3, #0
 801432c:	d10d      	bne.n	801434a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 801432e:	4b2c      	ldr	r3, [pc, #176]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014330:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014334:	f023 0107 	bic.w	r1, r3, #7
 8014338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014340:	4a27      	ldr	r2, [pc, #156]	@ (80143e0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014342:	430b      	orrs	r3, r1
 8014344:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014348:	e003      	b.n	8014352 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801434a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801434e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8014352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801435e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8014362:	2300      	movs	r3, #0
 8014364:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8014368:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801436c:	460b      	mov	r3, r1
 801436e:	4313      	orrs	r3, r2
 8014370:	d04f      	beq.n	8014412 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8014372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801437a:	2b50      	cmp	r3, #80	@ 0x50
 801437c:	d029      	beq.n	80143d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 801437e:	2b50      	cmp	r3, #80	@ 0x50
 8014380:	d823      	bhi.n	80143ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8014382:	2b40      	cmp	r3, #64	@ 0x40
 8014384:	d027      	beq.n	80143d6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8014386:	2b40      	cmp	r3, #64	@ 0x40
 8014388:	d81f      	bhi.n	80143ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 801438a:	2b30      	cmp	r3, #48	@ 0x30
 801438c:	d025      	beq.n	80143da <HAL_RCCEx_PeriphCLKConfig+0x97e>
 801438e:	2b30      	cmp	r3, #48	@ 0x30
 8014390:	d81b      	bhi.n	80143ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8014392:	2b20      	cmp	r3, #32
 8014394:	d00f      	beq.n	80143b6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8014396:	2b20      	cmp	r3, #32
 8014398:	d817      	bhi.n	80143ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 801439a:	2b00      	cmp	r3, #0
 801439c:	d022      	beq.n	80143e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 801439e:	2b10      	cmp	r3, #16
 80143a0:	d113      	bne.n	80143ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80143a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80143a6:	3308      	adds	r3, #8
 80143a8:	4618      	mov	r0, r3
 80143aa:	f004 fa79 	bl	80188a0 <RCCEx_PLL2_Config>
 80143ae:	4603      	mov	r3, r0
 80143b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80143b4:	e017      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80143b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80143ba:	3330      	adds	r3, #48	@ 0x30
 80143bc:	4618      	mov	r0, r3
 80143be:	f004 fb07 	bl	80189d0 <RCCEx_PLL3_Config>
 80143c2:	4603      	mov	r3, r0
 80143c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80143c8:	e00d      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80143ca:	2301      	movs	r3, #1
 80143cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80143d0:	e009      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80143d2:	bf00      	nop
 80143d4:	e007      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80143d6:	bf00      	nop
 80143d8:	e005      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80143da:	bf00      	nop
 80143dc:	e003      	b.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80143de:	bf00      	nop
 80143e0:	44020c00 	.word	0x44020c00
        break;
 80143e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80143e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d10d      	bne.n	801440a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80143ee:	4baf      	ldr	r3, [pc, #700]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80143f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80143f4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80143f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80143fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014400:	4aaa      	ldr	r2, [pc, #680]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014402:	430b      	orrs	r3, r1
 8014404:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014408:	e003      	b.n	8014412 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801440a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801440e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801441e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8014422:	2300      	movs	r3, #0
 8014424:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014428:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801442c:	460b      	mov	r3, r1
 801442e:	4313      	orrs	r3, r2
 8014430:	d055      	beq.n	80144de <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8014432:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801443a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801443e:	d031      	beq.n	80144a4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8014440:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014444:	d82a      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8014446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801444a:	d02d      	beq.n	80144a8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 801444c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014450:	d824      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8014452:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014456:	d029      	beq.n	80144ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8014458:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801445c:	d81e      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 801445e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014462:	d011      	beq.n	8014488 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8014464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014468:	d818      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 801446a:	2b00      	cmp	r3, #0
 801446c:	d020      	beq.n	80144b0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 801446e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014472:	d113      	bne.n	801449c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014474:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014478:	3308      	adds	r3, #8
 801447a:	4618      	mov	r0, r3
 801447c:	f004 fa10 	bl	80188a0 <RCCEx_PLL2_Config>
 8014480:	4603      	mov	r3, r0
 8014482:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8014486:	e014      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801448c:	3330      	adds	r3, #48	@ 0x30
 801448e:	4618      	mov	r0, r3
 8014490:	f004 fa9e 	bl	80189d0 <RCCEx_PLL3_Config>
 8014494:	4603      	mov	r3, r0
 8014496:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 801449a:	e00a      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801449c:	2301      	movs	r3, #1
 801449e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80144a2:	e006      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80144a4:	bf00      	nop
 80144a6:	e004      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80144a8:	bf00      	nop
 80144aa:	e002      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80144ac:	bf00      	nop
 80144ae:	e000      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80144b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80144b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d10d      	bne.n	80144d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80144ba:	4b7c      	ldr	r3, [pc, #496]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80144bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80144c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80144c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80144c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80144cc:	4a77      	ldr	r2, [pc, #476]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80144ce:	430b      	orrs	r3, r1
 80144d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80144d4:	e003      	b.n	80144de <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80144d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80144da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80144de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80144e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80144ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80144ee:	2300      	movs	r3, #0
 80144f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80144f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80144f8:	460b      	mov	r3, r1
 80144fa:	4313      	orrs	r3, r2
 80144fc:	d03d      	beq.n	801457a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80144fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014506:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801450a:	d01b      	beq.n	8014544 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 801450c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014510:	d814      	bhi.n	801453c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8014512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014516:	d017      	beq.n	8014548 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8014518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801451c:	d80e      	bhi.n	801453c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 801451e:	2b00      	cmp	r3, #0
 8014520:	d014      	beq.n	801454c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8014522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014526:	d109      	bne.n	801453c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801452c:	3330      	adds	r3, #48	@ 0x30
 801452e:	4618      	mov	r0, r3
 8014530:	f004 fa4e 	bl	80189d0 <RCCEx_PLL3_Config>
 8014534:	4603      	mov	r3, r0
 8014536:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 801453a:	e008      	b.n	801454e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801453c:	2301      	movs	r3, #1
 801453e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014542:	e004      	b.n	801454e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8014544:	bf00      	nop
 8014546:	e002      	b.n	801454e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8014548:	bf00      	nop
 801454a:	e000      	b.n	801454e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 801454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801454e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014552:	2b00      	cmp	r3, #0
 8014554:	d10d      	bne.n	8014572 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8014556:	4b55      	ldr	r3, [pc, #340]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801455c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8014560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014568:	4a50      	ldr	r2, [pc, #320]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 801456a:	430b      	orrs	r3, r1
 801456c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8014570:	e003      	b.n	801457a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014572:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014576:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801457a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014582:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8014586:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801458a:	2300      	movs	r3, #0
 801458c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8014590:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8014594:	460b      	mov	r3, r1
 8014596:	4313      	orrs	r3, r2
 8014598:	d03d      	beq.n	8014616 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 801459a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80145a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80145a6:	d01b      	beq.n	80145e0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80145a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80145ac:	d814      	bhi.n	80145d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80145ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80145b2:	d017      	beq.n	80145e4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80145b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80145b8:	d80e      	bhi.n	80145d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d014      	beq.n	80145e8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80145be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80145c2:	d109      	bne.n	80145d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80145c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80145c8:	3330      	adds	r3, #48	@ 0x30
 80145ca:	4618      	mov	r0, r3
 80145cc:	f004 fa00 	bl	80189d0 <RCCEx_PLL3_Config>
 80145d0:	4603      	mov	r3, r0
 80145d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80145d6:	e008      	b.n	80145ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80145d8:	2301      	movs	r3, #1
 80145da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80145de:	e004      	b.n	80145ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80145e0:	bf00      	nop
 80145e2:	e002      	b.n	80145ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80145e4:	bf00      	nop
 80145e6:	e000      	b.n	80145ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80145e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80145ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d10d      	bne.n	801460e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80145f2:	4b2e      	ldr	r3, [pc, #184]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80145f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80145f8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80145fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014604:	4a29      	ldr	r2, [pc, #164]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014606:	430b      	orrs	r3, r1
 8014608:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801460c:	e003      	b.n	8014616 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801460e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014612:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8014622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014626:	2300      	movs	r3, #0
 8014628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801462c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014630:	460b      	mov	r3, r1
 8014632:	4313      	orrs	r3, r2
 8014634:	d040      	beq.n	80146b8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8014636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801463a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801463e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014642:	d01b      	beq.n	801467c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8014644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014648:	d814      	bhi.n	8014674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 801464a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801464e:	d017      	beq.n	8014680 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8014650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014654:	d80e      	bhi.n	8014674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8014656:	2b00      	cmp	r3, #0
 8014658:	d014      	beq.n	8014684 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 801465a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801465e:	d109      	bne.n	8014674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014664:	3330      	adds	r3, #48	@ 0x30
 8014666:	4618      	mov	r0, r3
 8014668:	f004 f9b2 	bl	80189d0 <RCCEx_PLL3_Config>
 801466c:	4603      	mov	r3, r0
 801466e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8014672:	e008      	b.n	8014686 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014674:	2301      	movs	r3, #1
 8014676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801467a:	e004      	b.n	8014686 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 801467c:	bf00      	nop
 801467e:	e002      	b.n	8014686 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8014680:	bf00      	nop
 8014682:	e000      	b.n	8014686 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8014684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014686:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801468a:	2b00      	cmp	r3, #0
 801468c:	d110      	bne.n	80146b0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 801468e:	4b07      	ldr	r3, [pc, #28]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014690:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014694:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8014698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801469c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80146a0:	4a02      	ldr	r2, [pc, #8]	@ (80146ac <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80146a2:	430b      	orrs	r3, r1
 80146a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80146a8:	e006      	b.n	80146b8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80146aa:	bf00      	nop
 80146ac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80146b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80146b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80146b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80146bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c0:	2100      	movs	r1, #0
 80146c2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80146c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80146ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80146ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80146d2:	460b      	mov	r3, r1
 80146d4:	4313      	orrs	r3, r2
 80146d6:	d03d      	beq.n	8014754 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80146d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80146dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80146e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80146e4:	d01b      	beq.n	801471e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80146e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80146ea:	d814      	bhi.n	8014716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80146ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80146f0:	d017      	beq.n	8014722 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80146f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80146f6:	d80e      	bhi.n	8014716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d014      	beq.n	8014726 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80146fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014700:	d109      	bne.n	8014716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014702:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014706:	3330      	adds	r3, #48	@ 0x30
 8014708:	4618      	mov	r0, r3
 801470a:	f004 f961 	bl	80189d0 <RCCEx_PLL3_Config>
 801470e:	4603      	mov	r3, r0
 8014710:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8014714:	e008      	b.n	8014728 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014716:	2301      	movs	r3, #1
 8014718:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801471c:	e004      	b.n	8014728 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 801471e:	bf00      	nop
 8014720:	e002      	b.n	8014728 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8014722:	bf00      	nop
 8014724:	e000      	b.n	8014728 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8014726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014728:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801472c:	2b00      	cmp	r3, #0
 801472e:	d10d      	bne.n	801474c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8014730:	4bbe      	ldr	r3, [pc, #760]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014732:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014736:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801473a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801473e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014742:	4aba      	ldr	r2, [pc, #744]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014744:	430b      	orrs	r3, r1
 8014746:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801474a:	e003      	b.n	8014754 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801474c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014750:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8014754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8014760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014764:	2300      	movs	r3, #0
 8014766:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801476a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801476e:	460b      	mov	r3, r1
 8014770:	4313      	orrs	r3, r2
 8014772:	d035      	beq.n	80147e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8014774:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801477c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014780:	d015      	beq.n	80147ae <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8014782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014786:	d80e      	bhi.n	80147a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8014788:	2b00      	cmp	r3, #0
 801478a:	d012      	beq.n	80147b2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 801478c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014790:	d109      	bne.n	80147a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014796:	3330      	adds	r3, #48	@ 0x30
 8014798:	4618      	mov	r0, r3
 801479a:	f004 f919 	bl	80189d0 <RCCEx_PLL3_Config>
 801479e:	4603      	mov	r3, r0
 80147a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80147a4:	e006      	b.n	80147b4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80147a6:	2301      	movs	r3, #1
 80147a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80147ac:	e002      	b.n	80147b4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80147ae:	bf00      	nop
 80147b0:	e000      	b.n	80147b4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80147b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80147b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d10d      	bne.n	80147d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80147bc:	4b9b      	ldr	r3, [pc, #620]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80147be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80147c2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80147c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80147ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80147ce:	4a97      	ldr	r2, [pc, #604]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80147d0:	430b      	orrs	r3, r1
 80147d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80147d6:	e003      	b.n	80147e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80147d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80147dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80147e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80147e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e8:	2100      	movs	r1, #0
 80147ea:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80147ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80147f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80147f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80147fa:	460b      	mov	r3, r1
 80147fc:	4313      	orrs	r3, r2
 80147fe:	d00e      	beq.n	801481e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8014800:	4b8a      	ldr	r3, [pc, #552]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014802:	69db      	ldr	r3, [r3, #28]
 8014804:	4a89      	ldr	r2, [pc, #548]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801480a:	61d3      	str	r3, [r2, #28]
 801480c:	4b87      	ldr	r3, [pc, #540]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801480e:	69d9      	ldr	r1, [r3, #28]
 8014810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014814:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8014818:	4a84      	ldr	r2, [pc, #528]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801481a:	430b      	orrs	r3, r1
 801481c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801481e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014826:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801482a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801482e:	2300      	movs	r3, #0
 8014830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014834:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8014838:	460b      	mov	r3, r1
 801483a:	4313      	orrs	r3, r2
 801483c:	d055      	beq.n	80148ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 801483e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014846:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801484a:	d031      	beq.n	80148b0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 801484c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8014850:	d82a      	bhi.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8014852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014856:	d02d      	beq.n	80148b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8014858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801485c:	d824      	bhi.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 801485e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014862:	d029      	beq.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8014864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014868:	d81e      	bhi.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 801486a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801486e:	d011      	beq.n	8014894 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8014870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014874:	d818      	bhi.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8014876:	2b00      	cmp	r3, #0
 8014878:	d020      	beq.n	80148bc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 801487a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801487e:	d113      	bne.n	80148a8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014880:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014884:	3308      	adds	r3, #8
 8014886:	4618      	mov	r0, r3
 8014888:	f004 f80a 	bl	80188a0 <RCCEx_PLL2_Config>
 801488c:	4603      	mov	r3, r0
 801488e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8014892:	e014      	b.n	80148be <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014898:	3330      	adds	r3, #48	@ 0x30
 801489a:	4618      	mov	r0, r3
 801489c:	f004 f898 	bl	80189d0 <RCCEx_PLL3_Config>
 80148a0:	4603      	mov	r3, r0
 80148a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80148a6:	e00a      	b.n	80148be <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80148a8:	2301      	movs	r3, #1
 80148aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80148ae:	e006      	b.n	80148be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80148b0:	bf00      	nop
 80148b2:	e004      	b.n	80148be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80148b4:	bf00      	nop
 80148b6:	e002      	b.n	80148be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80148b8:	bf00      	nop
 80148ba:	e000      	b.n	80148be <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80148bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80148be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d10d      	bne.n	80148e2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80148c6:	4b59      	ldr	r3, [pc, #356]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80148c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80148cc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80148d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80148d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148d8:	4a54      	ldr	r2, [pc, #336]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80148da:	430b      	orrs	r3, r1
 80148dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80148e0:	e003      	b.n	80148ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80148e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80148ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80148ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80148f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80148fa:	2300      	movs	r3, #0
 80148fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014900:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8014904:	460b      	mov	r3, r1
 8014906:	4313      	orrs	r3, r2
 8014908:	d055      	beq.n	80149b6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 801490a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801490e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014912:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8014916:	d031      	beq.n	801497c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8014918:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801491c:	d82a      	bhi.n	8014974 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 801491e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014922:	d02d      	beq.n	8014980 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8014924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014928:	d824      	bhi.n	8014974 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 801492a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801492e:	d029      	beq.n	8014984 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8014930:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014934:	d81e      	bhi.n	8014974 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8014936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801493a:	d011      	beq.n	8014960 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 801493c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014940:	d818      	bhi.n	8014974 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8014942:	2b00      	cmp	r3, #0
 8014944:	d020      	beq.n	8014988 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8014946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801494a:	d113      	bne.n	8014974 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801494c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014950:	3308      	adds	r3, #8
 8014952:	4618      	mov	r0, r3
 8014954:	f003 ffa4 	bl	80188a0 <RCCEx_PLL2_Config>
 8014958:	4603      	mov	r3, r0
 801495a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 801495e:	e014      	b.n	801498a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014964:	3330      	adds	r3, #48	@ 0x30
 8014966:	4618      	mov	r0, r3
 8014968:	f004 f832 	bl	80189d0 <RCCEx_PLL3_Config>
 801496c:	4603      	mov	r3, r0
 801496e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8014972:	e00a      	b.n	801498a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014974:	2301      	movs	r3, #1
 8014976:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801497a:	e006      	b.n	801498a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 801497c:	bf00      	nop
 801497e:	e004      	b.n	801498a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8014980:	bf00      	nop
 8014982:	e002      	b.n	801498a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8014984:	bf00      	nop
 8014986:	e000      	b.n	801498a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8014988:	bf00      	nop
    }

    if (ret == HAL_OK)
 801498a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801498e:	2b00      	cmp	r3, #0
 8014990:	d10d      	bne.n	80149ae <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8014992:	4b26      	ldr	r3, [pc, #152]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014994:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014998:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801499c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80149a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80149a4:	4a21      	ldr	r2, [pc, #132]	@ (8014a2c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80149a6:	430b      	orrs	r3, r1
 80149a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80149ac:	e003      	b.n	80149b6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80149ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80149b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80149b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80149ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149be:	2100      	movs	r1, #0
 80149c0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80149c4:	f003 0320 	and.w	r3, r3, #32
 80149c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80149cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80149d0:	460b      	mov	r3, r1
 80149d2:	4313      	orrs	r3, r2
 80149d4:	d057      	beq.n	8014a86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80149d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80149da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80149de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80149e2:	d033      	beq.n	8014a4c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80149e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80149e8:	d82c      	bhi.n	8014a44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80149ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80149ee:	d02f      	beq.n	8014a50 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80149f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80149f4:	d826      	bhi.n	8014a44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80149f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80149fa:	d02b      	beq.n	8014a54 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80149fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014a00:	d820      	bhi.n	8014a44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8014a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014a06:	d013      	beq.n	8014a30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8014a08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014a0c:	d81a      	bhi.n	8014a44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d022      	beq.n	8014a58 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8014a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014a16:	d115      	bne.n	8014a44 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a1c:	3308      	adds	r3, #8
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f003 ff3e 	bl	80188a0 <RCCEx_PLL2_Config>
 8014a24:	4603      	mov	r3, r0
 8014a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8014a2a:	e016      	b.n	8014a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8014a2c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a34:	3330      	adds	r3, #48	@ 0x30
 8014a36:	4618      	mov	r0, r3
 8014a38:	f003 ffca 	bl	80189d0 <RCCEx_PLL3_Config>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8014a42:	e00a      	b.n	8014a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014a44:	2301      	movs	r3, #1
 8014a46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014a4a:	e006      	b.n	8014a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014a4c:	bf00      	nop
 8014a4e:	e004      	b.n	8014a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014a50:	bf00      	nop
 8014a52:	e002      	b.n	8014a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014a54:	bf00      	nop
 8014a56:	e000      	b.n	8014a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d10d      	bne.n	8014a7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8014a62:	4bbb      	ldr	r3, [pc, #748]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014a64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014a68:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8014a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014a74:	4ab6      	ldr	r2, [pc, #728]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014a76:	430b      	orrs	r3, r1
 8014a78:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014a7c:	e003      	b.n	8014a86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014a82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8014a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	2100      	movs	r1, #0
 8014a90:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8014a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8014a9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8014aa0:	460b      	mov	r3, r1
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	d055      	beq.n	8014b52 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8014aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014aae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8014ab2:	d031      	beq.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8014ab4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8014ab8:	d82a      	bhi.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014abe:	d02d      	beq.n	8014b1c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8014ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014ac4:	d824      	bhi.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014ac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014aca:	d029      	beq.n	8014b20 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8014acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014ad0:	d81e      	bhi.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014ad6:	d011      	beq.n	8014afc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8014ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014adc:	d818      	bhi.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d020      	beq.n	8014b24 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8014ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014ae6:	d113      	bne.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014aec:	3308      	adds	r3, #8
 8014aee:	4618      	mov	r0, r3
 8014af0:	f003 fed6 	bl	80188a0 <RCCEx_PLL2_Config>
 8014af4:	4603      	mov	r3, r0
 8014af6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8014afa:	e014      	b.n	8014b26 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b00:	3330      	adds	r3, #48	@ 0x30
 8014b02:	4618      	mov	r0, r3
 8014b04:	f003 ff64 	bl	80189d0 <RCCEx_PLL3_Config>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8014b0e:	e00a      	b.n	8014b26 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014b10:	2301      	movs	r3, #1
 8014b12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014b16:	e006      	b.n	8014b26 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b18:	bf00      	nop
 8014b1a:	e004      	b.n	8014b26 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b1c:	bf00      	nop
 8014b1e:	e002      	b.n	8014b26 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b20:	bf00      	nop
 8014b22:	e000      	b.n	8014b26 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014b26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d10d      	bne.n	8014b4a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8014b2e:	4b88      	ldr	r3, [pc, #544]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014b30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014b34:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8014b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014b40:	4a83      	ldr	r2, [pc, #524]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014b42:	430b      	orrs	r3, r1
 8014b44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014b48:	e003      	b.n	8014b52 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014b4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8014b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b5a:	2100      	movs	r1, #0
 8014b5c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8014b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014b68:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	d055      	beq.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8014b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014b7a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014b7e:	d031      	beq.n	8014be4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8014b80:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014b84:	d82a      	bhi.n	8014bdc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014b8a:	d02d      	beq.n	8014be8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8014b8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014b90:	d824      	bhi.n	8014bdc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014b92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014b96:	d029      	beq.n	8014bec <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8014b98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014b9c:	d81e      	bhi.n	8014bdc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014b9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014ba2:	d011      	beq.n	8014bc8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8014ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014ba8:	d818      	bhi.n	8014bdc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d020      	beq.n	8014bf0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8014bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014bb2:	d113      	bne.n	8014bdc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014bb8:	3308      	adds	r3, #8
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f003 fe70 	bl	80188a0 <RCCEx_PLL2_Config>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8014bc6:	e014      	b.n	8014bf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014bcc:	3330      	adds	r3, #48	@ 0x30
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f003 fefe 	bl	80189d0 <RCCEx_PLL3_Config>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8014bda:	e00a      	b.n	8014bf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014be2:	e006      	b.n	8014bf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014be4:	bf00      	nop
 8014be6:	e004      	b.n	8014bf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014be8:	bf00      	nop
 8014bea:	e002      	b.n	8014bf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014bec:	bf00      	nop
 8014bee:	e000      	b.n	8014bf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d10d      	bne.n	8014c16 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8014bfa:	4b55      	ldr	r3, [pc, #340]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014bfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014c00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8014c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014c0c:	4a50      	ldr	r2, [pc, #320]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014c0e:	430b      	orrs	r3, r1
 8014c10:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014c14:	e003      	b.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014c1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8014c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c26:	2100      	movs	r1, #0
 8014c28:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8014c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014c34:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8014c38:	460b      	mov	r3, r1
 8014c3a:	4313      	orrs	r3, r2
 8014c3c:	d055      	beq.n	8014cea <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8014c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014c4a:	d031      	beq.n	8014cb0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8014c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014c50:	d82a      	bhi.n	8014ca8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014c56:	d02d      	beq.n	8014cb4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8014c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014c5c:	d824      	bhi.n	8014ca8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014c5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014c62:	d029      	beq.n	8014cb8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8014c64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014c68:	d81e      	bhi.n	8014ca8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014c6e:	d011      	beq.n	8014c94 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8014c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014c74:	d818      	bhi.n	8014ca8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d020      	beq.n	8014cbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8014c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014c7e:	d113      	bne.n	8014ca8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c84:	3308      	adds	r3, #8
 8014c86:	4618      	mov	r0, r3
 8014c88:	f003 fe0a 	bl	80188a0 <RCCEx_PLL2_Config>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8014c92:	e014      	b.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c98:	3330      	adds	r3, #48	@ 0x30
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f003 fe98 	bl	80189d0 <RCCEx_PLL3_Config>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8014ca6:	e00a      	b.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014ca8:	2301      	movs	r3, #1
 8014caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014cae:	e006      	b.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014cb0:	bf00      	nop
 8014cb2:	e004      	b.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014cb4:	bf00      	nop
 8014cb6:	e002      	b.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014cb8:	bf00      	nop
 8014cba:	e000      	b.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d10d      	bne.n	8014ce2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8014cc6:	4b22      	ldr	r3, [pc, #136]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014cc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014ccc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8014cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014cd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014cda:	430b      	orrs	r3, r1
 8014cdc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014ce0:	e003      	b.n	8014cea <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014ce6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8014cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8014cf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014d00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8014d04:	460b      	mov	r3, r1
 8014d06:	4313      	orrs	r3, r2
 8014d08:	d055      	beq.n	8014db6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8014d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014d0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014d12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d16:	d035      	beq.n	8014d84 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8014d18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d1c:	d82e      	bhi.n	8014d7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8014d1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014d22:	d031      	beq.n	8014d88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8014d24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014d28:	d828      	bhi.n	8014d7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8014d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d2e:	d01b      	beq.n	8014d68 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8014d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d34:	d822      	bhi.n	8014d7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d003      	beq.n	8014d42 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8014d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d3e:	d009      	beq.n	8014d54 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8014d40:	e01c      	b.n	8014d7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d42:	4b03      	ldr	r3, [pc, #12]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d46:	4a02      	ldr	r2, [pc, #8]	@ (8014d50 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014d4c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014d4e:	e01c      	b.n	8014d8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8014d50:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014d58:	3308      	adds	r3, #8
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f003 fda0 	bl	80188a0 <RCCEx_PLL2_Config>
 8014d60:	4603      	mov	r3, r0
 8014d62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014d66:	e010      	b.n	8014d8a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014d6c:	3330      	adds	r3, #48	@ 0x30
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f003 fe2e 	bl	80189d0 <RCCEx_PLL3_Config>
 8014d74:	4603      	mov	r3, r0
 8014d76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014d7a:	e006      	b.n	8014d8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014d82:	e002      	b.n	8014d8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8014d84:	bf00      	nop
 8014d86:	e000      	b.n	8014d8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8014d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d10d      	bne.n	8014dae <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8014d92:	4bc3      	ldr	r3, [pc, #780]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014d98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8014d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014da0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014da4:	4abe      	ldr	r2, [pc, #760]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014da6:	430b      	orrs	r3, r1
 8014da8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014dac:	e003      	b.n	8014db6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014dae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014db2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8014db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbe:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8014dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014dcc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	4313      	orrs	r3, r2
 8014dd4:	d051      	beq.n	8014e7a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8014dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014dda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014dde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014de2:	d033      	beq.n	8014e4c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8014de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014de8:	d82c      	bhi.n	8014e44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8014dea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8014dee:	d02d      	beq.n	8014e4c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8014df0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8014df4:	d826      	bhi.n	8014e44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8014df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014dfa:	d019      	beq.n	8014e30 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8014dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014e00:	d820      	bhi.n	8014e44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d003      	beq.n	8014e0e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8014e06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014e0a:	d007      	beq.n	8014e1c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8014e0c:	e01a      	b.n	8014e44 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014e0e:	4ba4      	ldr	r3, [pc, #656]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e12:	4aa3      	ldr	r2, [pc, #652]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014e18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014e1a:	e018      	b.n	8014e4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e20:	3308      	adds	r3, #8
 8014e22:	4618      	mov	r0, r3
 8014e24:	f003 fd3c 	bl	80188a0 <RCCEx_PLL2_Config>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014e2e:	e00e      	b.n	8014e4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e34:	3330      	adds	r3, #48	@ 0x30
 8014e36:	4618      	mov	r0, r3
 8014e38:	f003 fdca 	bl	80189d0 <RCCEx_PLL3_Config>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014e42:	e004      	b.n	8014e4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014e44:	2301      	movs	r3, #1
 8014e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014e4a:	e000      	b.n	8014e4e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8014e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d10d      	bne.n	8014e72 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8014e56:	4b92      	ldr	r3, [pc, #584]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014e5c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8014e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014e68:	4a8d      	ldr	r2, [pc, #564]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e6a:	430b      	orrs	r3, r1
 8014e6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014e70:	e003      	b.n	8014e7a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014e76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8014e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e82:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8014e86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014e88:	2300      	movs	r3, #0
 8014e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014e8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8014e90:	460b      	mov	r3, r1
 8014e92:	4313      	orrs	r3, r2
 8014e94:	d032      	beq.n	8014efc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8014e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014e9e:	2b05      	cmp	r3, #5
 8014ea0:	d80f      	bhi.n	8014ec2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8014ea2:	2b03      	cmp	r3, #3
 8014ea4:	d211      	bcs.n	8014eca <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8014ea6:	2b01      	cmp	r3, #1
 8014ea8:	d911      	bls.n	8014ece <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8014eaa:	2b02      	cmp	r3, #2
 8014eac:	d109      	bne.n	8014ec2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014eb2:	3308      	adds	r3, #8
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f003 fcf3 	bl	80188a0 <RCCEx_PLL2_Config>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014ec0:	e006      	b.n	8014ed0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014ec8:	e002      	b.n	8014ed0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8014eca:	bf00      	nop
 8014ecc:	e000      	b.n	8014ed0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8014ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014ed0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d10d      	bne.n	8014ef4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8014ed8:	4b71      	ldr	r3, [pc, #452]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014ede:	f023 0107 	bic.w	r1, r3, #7
 8014ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014ee6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014eea:	4a6d      	ldr	r2, [pc, #436]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014eec:	430b      	orrs	r3, r1
 8014eee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014ef2:	e003      	b.n	8014efc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ef4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014ef8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8014efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f04:	2100      	movs	r1, #0
 8014f06:	6739      	str	r1, [r7, #112]	@ 0x70
 8014f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8014f0e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8014f12:	460b      	mov	r3, r1
 8014f14:	4313      	orrs	r3, r2
 8014f16:	d024      	beq.n	8014f62 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8014f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d005      	beq.n	8014f30 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8014f24:	2b08      	cmp	r3, #8
 8014f26:	d005      	beq.n	8014f34 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014f28:	2301      	movs	r3, #1
 8014f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014f2e:	e002      	b.n	8014f36 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8014f30:	bf00      	nop
 8014f32:	e000      	b.n	8014f36 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8014f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014f36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d10d      	bne.n	8014f5a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8014f3e:	4b58      	ldr	r3, [pc, #352]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014f44:	f023 0108 	bic.w	r1, r3, #8
 8014f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014f50:	4a53      	ldr	r2, [pc, #332]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014f52:	430b      	orrs	r3, r1
 8014f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014f58:	e003      	b.n	8014f62 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014f5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8014f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014f70:	2300      	movs	r3, #0
 8014f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014f74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8014f78:	460b      	mov	r3, r1
 8014f7a:	4313      	orrs	r3, r2
 8014f7c:	f000 80b9 	beq.w	80150f2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8014f80:	4b48      	ldr	r3, [pc, #288]	@ (80150a4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8014f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f84:	4a47      	ldr	r2, [pc, #284]	@ (80150a4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8014f86:	f043 0301 	orr.w	r3, r3, #1
 8014f8a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014f8c:	f7fc fab4 	bl	80114f8 <HAL_GetTick>
 8014f90:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8014f94:	e00b      	b.n	8014fae <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014f96:	f7fc faaf 	bl	80114f8 <HAL_GetTick>
 8014f9a:	4602      	mov	r2, r0
 8014f9c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	d903      	bls.n	8014fae <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8014fa6:	2303      	movs	r3, #3
 8014fa8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014fac:	e005      	b.n	8014fba <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8014fae:	4b3d      	ldr	r3, [pc, #244]	@ (80150a4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8014fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fb2:	f003 0301 	and.w	r3, r3, #1
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d0ed      	beq.n	8014f96 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8014fba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	f040 8093 	bne.w	80150ea <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8014fc4:	4b36      	ldr	r3, [pc, #216]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014fce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8014fd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d023      	beq.n	8015022 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8014fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014fde:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8014fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d01b      	beq.n	8015022 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014fea:	4b2d      	ldr	r3, [pc, #180]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014ff4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014ff8:	4b29      	ldr	r3, [pc, #164]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014ffe:	4a28      	ldr	r2, [pc, #160]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015004:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015008:	4b25      	ldr	r3, [pc, #148]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801500a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801500e:	4a24      	ldr	r2, [pc, #144]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015014:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015018:	4a21      	ldr	r2, [pc, #132]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801501a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801501e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8015022:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8015026:	f003 0301 	and.w	r3, r3, #1
 801502a:	2b00      	cmp	r3, #0
 801502c:	d019      	beq.n	8015062 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801502e:	f7fc fa63 	bl	80114f8 <HAL_GetTick>
 8015032:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015036:	e00d      	b.n	8015054 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015038:	f7fc fa5e 	bl	80114f8 <HAL_GetTick>
 801503c:	4602      	mov	r2, r0
 801503e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8015042:	1ad2      	subs	r2, r2, r3
 8015044:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015048:	429a      	cmp	r2, r3
 801504a:	d903      	bls.n	8015054 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 801504c:	2303      	movs	r3, #3
 801504e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8015052:	e006      	b.n	8015062 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015054:	4b12      	ldr	r3, [pc, #72]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801505a:	f003 0302 	and.w	r3, r3, #2
 801505e:	2b00      	cmp	r3, #0
 8015060:	d0ea      	beq.n	8015038 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8015062:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015066:	2b00      	cmp	r3, #0
 8015068:	d13a      	bne.n	80150e0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 801506a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801506e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8015072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801507a:	d115      	bne.n	80150a8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 801507c:	4b08      	ldr	r3, [pc, #32]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801507e:	69db      	ldr	r3, [r3, #28]
 8015080:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8015084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015088:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801508c:	091b      	lsrs	r3, r3, #4
 801508e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015092:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8015096:	4a02      	ldr	r2, [pc, #8]	@ (80150a0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015098:	430b      	orrs	r3, r1
 801509a:	61d3      	str	r3, [r2, #28]
 801509c:	e00a      	b.n	80150b4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 801509e:	bf00      	nop
 80150a0:	44020c00 	.word	0x44020c00
 80150a4:	44020800 	.word	0x44020800
 80150a8:	4b9f      	ldr	r3, [pc, #636]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80150aa:	69db      	ldr	r3, [r3, #28]
 80150ac:	4a9e      	ldr	r2, [pc, #632]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80150ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80150b2:	61d3      	str	r3, [r2, #28]
 80150b4:	4b9c      	ldr	r3, [pc, #624]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80150b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80150ba:	4a9b      	ldr	r2, [pc, #620]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80150bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80150c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80150c4:	4b98      	ldr	r3, [pc, #608]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80150c6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80150ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80150ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80150d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80150d6:	4a94      	ldr	r2, [pc, #592]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80150d8:	430b      	orrs	r3, r1
 80150da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80150de:	e008      	b.n	80150f2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80150e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80150e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80150e8:	e003      	b.n	80150f2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80150ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80150f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80150f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150fa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80150fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8015100:	2300      	movs	r3, #0
 8015102:	667b      	str	r3, [r7, #100]	@ 0x64
 8015104:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8015108:	460b      	mov	r3, r1
 801510a:	4313      	orrs	r3, r2
 801510c:	d035      	beq.n	801517a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 801510e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015112:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8015116:	2b30      	cmp	r3, #48	@ 0x30
 8015118:	d014      	beq.n	8015144 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 801511a:	2b30      	cmp	r3, #48	@ 0x30
 801511c:	d80e      	bhi.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 801511e:	2b20      	cmp	r3, #32
 8015120:	d012      	beq.n	8015148 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8015122:	2b20      	cmp	r3, #32
 8015124:	d80a      	bhi.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8015126:	2b00      	cmp	r3, #0
 8015128:	d010      	beq.n	801514c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 801512a:	2b10      	cmp	r3, #16
 801512c:	d106      	bne.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801512e:	4b7e      	ldr	r3, [pc, #504]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015132:	4a7d      	ldr	r2, [pc, #500]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015138:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 801513a:	e008      	b.n	801514e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801513c:	2301      	movs	r3, #1
 801513e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015142:	e004      	b.n	801514e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8015144:	bf00      	nop
 8015146:	e002      	b.n	801514e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8015148:	bf00      	nop
 801514a:	e000      	b.n	801514e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 801514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801514e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015152:	2b00      	cmp	r3, #0
 8015154:	d10d      	bne.n	8015172 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8015156:	4b74      	ldr	r3, [pc, #464]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801515c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8015160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015164:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8015168:	4a6f      	ldr	r2, [pc, #444]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801516a:	430b      	orrs	r3, r1
 801516c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8015170:	e003      	b.n	801517a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015176:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801517a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015182:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8015186:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015188:	2300      	movs	r3, #0
 801518a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801518c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8015190:	460b      	mov	r3, r1
 8015192:	4313      	orrs	r3, r2
 8015194:	d033      	beq.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8015196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801519a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d002      	beq.n	80151a8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80151a2:	2b40      	cmp	r3, #64	@ 0x40
 80151a4:	d007      	beq.n	80151b6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80151a6:	e010      	b.n	80151ca <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80151a8:	4b5f      	ldr	r3, [pc, #380]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80151aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151ac:	4a5e      	ldr	r2, [pc, #376]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80151ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80151b2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80151b4:	e00d      	b.n	80151d2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80151b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80151ba:	3308      	adds	r3, #8
 80151bc:	4618      	mov	r0, r3
 80151be:	f003 fb6f 	bl	80188a0 <RCCEx_PLL2_Config>
 80151c2:	4603      	mov	r3, r0
 80151c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80151c8:	e003      	b.n	80151d2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80151ca:	2301      	movs	r3, #1
 80151cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80151d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80151d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d10d      	bne.n	80151f6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80151da:	4b53      	ldr	r3, [pc, #332]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80151dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80151e0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80151e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80151e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80151ec:	4a4e      	ldr	r2, [pc, #312]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80151ee:	430b      	orrs	r3, r1
 80151f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80151f4:	e003      	b.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80151f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80151fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80151fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015206:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801520a:	653b      	str	r3, [r7, #80]	@ 0x50
 801520c:	2300      	movs	r3, #0
 801520e:	657b      	str	r3, [r7, #84]	@ 0x54
 8015210:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8015214:	460b      	mov	r3, r1
 8015216:	4313      	orrs	r3, r2
 8015218:	d033      	beq.n	8015282 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 801521a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801521e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015222:	2b00      	cmp	r3, #0
 8015224:	d002      	beq.n	801522c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8015226:	2b80      	cmp	r3, #128	@ 0x80
 8015228:	d007      	beq.n	801523a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 801522a:	e010      	b.n	801524e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801522c:	4b3e      	ldr	r3, [pc, #248]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015230:	4a3d      	ldr	r2, [pc, #244]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015236:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8015238:	e00d      	b.n	8015256 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801523a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801523e:	3308      	adds	r3, #8
 8015240:	4618      	mov	r0, r3
 8015242:	f003 fb2d 	bl	80188a0 <RCCEx_PLL2_Config>
 8015246:	4603      	mov	r3, r0
 8015248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 801524c:	e003      	b.n	8015256 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 801524e:	2301      	movs	r3, #1
 8015250:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801525a:	2b00      	cmp	r3, #0
 801525c:	d10d      	bne.n	801527a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 801525e:	4b32      	ldr	r3, [pc, #200]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015260:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015264:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8015268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801526c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015270:	4a2d      	ldr	r2, [pc, #180]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015272:	430b      	orrs	r3, r1
 8015274:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8015278:	e003      	b.n	8015282 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801527a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801527e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8015282:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 801528e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015290:	2300      	movs	r3, #0
 8015292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015294:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8015298:	460b      	mov	r3, r1
 801529a:	4313      	orrs	r3, r2
 801529c:	d04a      	beq.n	8015334 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 801529e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80152a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80152a6:	2b04      	cmp	r3, #4
 80152a8:	d827      	bhi.n	80152fa <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80152aa:	a201      	add	r2, pc, #4	@ (adr r2, 80152b0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80152ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b0:	080152c5 	.word	0x080152c5
 80152b4:	080152d3 	.word	0x080152d3
 80152b8:	080152e7 	.word	0x080152e7
 80152bc:	08015303 	.word	0x08015303
 80152c0:	08015303 	.word	0x08015303
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80152c4:	4b18      	ldr	r3, [pc, #96]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80152c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152c8:	4a17      	ldr	r2, [pc, #92]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80152ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80152ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80152d0:	e018      	b.n	8015304 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80152d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80152d6:	3308      	adds	r3, #8
 80152d8:	4618      	mov	r0, r3
 80152da:	f003 fae1 	bl	80188a0 <RCCEx_PLL2_Config>
 80152de:	4603      	mov	r3, r0
 80152e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80152e4:	e00e      	b.n	8015304 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80152e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80152ea:	3330      	adds	r3, #48	@ 0x30
 80152ec:	4618      	mov	r0, r3
 80152ee:	f003 fb6f 	bl	80189d0 <RCCEx_PLL3_Config>
 80152f2:	4603      	mov	r3, r0
 80152f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80152f8:	e004      	b.n	8015304 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80152fa:	2301      	movs	r3, #1
 80152fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015300:	e000      	b.n	8015304 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8015302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015304:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015308:	2b00      	cmp	r3, #0
 801530a:	d10f      	bne.n	801532c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 801530c:	4b06      	ldr	r3, [pc, #24]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801530e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015312:	f023 0107 	bic.w	r1, r3, #7
 8015316:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801531a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801531e:	4a02      	ldr	r2, [pc, #8]	@ (8015328 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015320:	430b      	orrs	r3, r1
 8015322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015326:	e005      	b.n	8015334 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8015328:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 801532c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015330:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8015334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8015340:	643b      	str	r3, [r7, #64]	@ 0x40
 8015342:	2300      	movs	r3, #0
 8015344:	647b      	str	r3, [r7, #68]	@ 0x44
 8015346:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801534a:	460b      	mov	r3, r1
 801534c:	4313      	orrs	r3, r2
 801534e:	f000 8081 	beq.w	8015454 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8015352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015356:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801535a:	2b20      	cmp	r3, #32
 801535c:	d85f      	bhi.n	801541e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 801535e:	a201      	add	r2, pc, #4	@ (adr r2, 8015364 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8015360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015364:	080153e9 	.word	0x080153e9
 8015368:	0801541f 	.word	0x0801541f
 801536c:	0801541f 	.word	0x0801541f
 8015370:	0801541f 	.word	0x0801541f
 8015374:	0801541f 	.word	0x0801541f
 8015378:	0801541f 	.word	0x0801541f
 801537c:	0801541f 	.word	0x0801541f
 8015380:	0801541f 	.word	0x0801541f
 8015384:	080153f7 	.word	0x080153f7
 8015388:	0801541f 	.word	0x0801541f
 801538c:	0801541f 	.word	0x0801541f
 8015390:	0801541f 	.word	0x0801541f
 8015394:	0801541f 	.word	0x0801541f
 8015398:	0801541f 	.word	0x0801541f
 801539c:	0801541f 	.word	0x0801541f
 80153a0:	0801541f 	.word	0x0801541f
 80153a4:	0801540b 	.word	0x0801540b
 80153a8:	0801541f 	.word	0x0801541f
 80153ac:	0801541f 	.word	0x0801541f
 80153b0:	0801541f 	.word	0x0801541f
 80153b4:	0801541f 	.word	0x0801541f
 80153b8:	0801541f 	.word	0x0801541f
 80153bc:	0801541f 	.word	0x0801541f
 80153c0:	0801541f 	.word	0x0801541f
 80153c4:	08015427 	.word	0x08015427
 80153c8:	0801541f 	.word	0x0801541f
 80153cc:	0801541f 	.word	0x0801541f
 80153d0:	0801541f 	.word	0x0801541f
 80153d4:	0801541f 	.word	0x0801541f
 80153d8:	0801541f 	.word	0x0801541f
 80153dc:	0801541f 	.word	0x0801541f
 80153e0:	0801541f 	.word	0x0801541f
 80153e4:	08015427 	.word	0x08015427
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80153e8:	4bab      	ldr	r3, [pc, #684]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80153ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153ec:	4aaa      	ldr	r2, [pc, #680]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80153ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80153f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80153f4:	e018      	b.n	8015428 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80153f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80153fa:	3308      	adds	r3, #8
 80153fc:	4618      	mov	r0, r3
 80153fe:	f003 fa4f 	bl	80188a0 <RCCEx_PLL2_Config>
 8015402:	4603      	mov	r3, r0
 8015404:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8015408:	e00e      	b.n	8015428 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801540a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801540e:	3330      	adds	r3, #48	@ 0x30
 8015410:	4618      	mov	r0, r3
 8015412:	f003 fadd 	bl	80189d0 <RCCEx_PLL3_Config>
 8015416:	4603      	mov	r3, r0
 8015418:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 801541c:	e004      	b.n	8015428 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801541e:	2301      	movs	r3, #1
 8015420:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015424:	e000      	b.n	8015428 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8015426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801542c:	2b00      	cmp	r3, #0
 801542e:	d10d      	bne.n	801544c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8015430:	4b99      	ldr	r3, [pc, #612]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015436:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801543a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801543e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015442:	4a95      	ldr	r2, [pc, #596]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015444:	430b      	orrs	r3, r1
 8015446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801544a:	e003      	b.n	8015454 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801544c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015450:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8015454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8015460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015462:	2300      	movs	r3, #0
 8015464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801546a:	460b      	mov	r3, r1
 801546c:	4313      	orrs	r3, r2
 801546e:	d04e      	beq.n	801550e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8015470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801547c:	d02e      	beq.n	80154dc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 801547e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015482:	d827      	bhi.n	80154d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8015484:	2bc0      	cmp	r3, #192	@ 0xc0
 8015486:	d02b      	beq.n	80154e0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8015488:	2bc0      	cmp	r3, #192	@ 0xc0
 801548a:	d823      	bhi.n	80154d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 801548c:	2b80      	cmp	r3, #128	@ 0x80
 801548e:	d017      	beq.n	80154c0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8015490:	2b80      	cmp	r3, #128	@ 0x80
 8015492:	d81f      	bhi.n	80154d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8015494:	2b00      	cmp	r3, #0
 8015496:	d002      	beq.n	801549e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8015498:	2b40      	cmp	r3, #64	@ 0x40
 801549a:	d007      	beq.n	80154ac <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 801549c:	e01a      	b.n	80154d4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801549e:	4b7e      	ldr	r3, [pc, #504]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80154a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154a2:	4a7d      	ldr	r2, [pc, #500]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80154a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80154a8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80154aa:	e01a      	b.n	80154e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80154ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80154b0:	3308      	adds	r3, #8
 80154b2:	4618      	mov	r0, r3
 80154b4:	f003 f9f4 	bl	80188a0 <RCCEx_PLL2_Config>
 80154b8:	4603      	mov	r3, r0
 80154ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80154be:	e010      	b.n	80154e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80154c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80154c4:	3330      	adds	r3, #48	@ 0x30
 80154c6:	4618      	mov	r0, r3
 80154c8:	f003 fa82 	bl	80189d0 <RCCEx_PLL3_Config>
 80154cc:	4603      	mov	r3, r0
 80154ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80154d2:	e006      	b.n	80154e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80154d4:	2301      	movs	r3, #1
 80154d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80154da:	e002      	b.n	80154e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80154dc:	bf00      	nop
 80154de:	e000      	b.n	80154e2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80154e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80154e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d10d      	bne.n	8015506 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80154ea:	4b6b      	ldr	r3, [pc, #428]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80154ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80154f0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80154f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80154f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80154fc:	4a66      	ldr	r2, [pc, #408]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80154fe:	430b      	orrs	r3, r1
 8015500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015504:	e003      	b.n	801550e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801550a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 801550e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015516:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801551a:	633b      	str	r3, [r7, #48]	@ 0x30
 801551c:	2300      	movs	r3, #0
 801551e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015520:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8015524:	460b      	mov	r3, r1
 8015526:	4313      	orrs	r3, r2
 8015528:	d055      	beq.n	80155d6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 801552a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801552e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8015532:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8015536:	d031      	beq.n	801559c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8015538:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 801553c:	d82a      	bhi.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 801553e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015542:	d02d      	beq.n	80155a0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8015544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015548:	d824      	bhi.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 801554a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801554e:	d029      	beq.n	80155a4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8015550:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8015554:	d81e      	bhi.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8015556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801555a:	d011      	beq.n	8015580 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 801555c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015560:	d818      	bhi.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8015562:	2b00      	cmp	r3, #0
 8015564:	d020      	beq.n	80155a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8015566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801556a:	d113      	bne.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801556c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015570:	3308      	adds	r3, #8
 8015572:	4618      	mov	r0, r3
 8015574:	f003 f994 	bl	80188a0 <RCCEx_PLL2_Config>
 8015578:	4603      	mov	r3, r0
 801557a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 801557e:	e014      	b.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015584:	3330      	adds	r3, #48	@ 0x30
 8015586:	4618      	mov	r0, r3
 8015588:	f003 fa22 	bl	80189d0 <RCCEx_PLL3_Config>
 801558c:	4603      	mov	r3, r0
 801558e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8015592:	e00a      	b.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015594:	2301      	movs	r3, #1
 8015596:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801559a:	e006      	b.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 801559c:	bf00      	nop
 801559e:	e004      	b.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80155a0:	bf00      	nop
 80155a2:	e002      	b.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80155a4:	bf00      	nop
 80155a6:	e000      	b.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80155a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80155aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d10d      	bne.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80155b2:	4b39      	ldr	r3, [pc, #228]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80155b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80155b8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80155bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80155c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80155c4:	4a34      	ldr	r2, [pc, #208]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80155c6:	430b      	orrs	r3, r1
 80155c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80155cc:	e003      	b.n	80155d6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80155ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80155d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80155d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80155da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80155e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80155e4:	2300      	movs	r3, #0
 80155e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80155e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80155ec:	460b      	mov	r3, r1
 80155ee:	4313      	orrs	r3, r2
 80155f0:	d058      	beq.n	80156a4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80155f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80155f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80155fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80155fe:	d031      	beq.n	8015664 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8015600:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8015604:	d82a      	bhi.n	801565c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8015606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801560a:	d02d      	beq.n	8015668 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 801560c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015610:	d824      	bhi.n	801565c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8015612:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015616:	d029      	beq.n	801566c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8015618:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801561c:	d81e      	bhi.n	801565c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 801561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015622:	d011      	beq.n	8015648 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8015624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015628:	d818      	bhi.n	801565c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 801562a:	2b00      	cmp	r3, #0
 801562c:	d020      	beq.n	8015670 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 801562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015632:	d113      	bne.n	801565c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015638:	3308      	adds	r3, #8
 801563a:	4618      	mov	r0, r3
 801563c:	f003 f930 	bl	80188a0 <RCCEx_PLL2_Config>
 8015640:	4603      	mov	r3, r0
 8015642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8015646:	e014      	b.n	8015672 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801564c:	3330      	adds	r3, #48	@ 0x30
 801564e:	4618      	mov	r0, r3
 8015650:	f003 f9be 	bl	80189d0 <RCCEx_PLL3_Config>
 8015654:	4603      	mov	r3, r0
 8015656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 801565a:	e00a      	b.n	8015672 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801565c:	2301      	movs	r3, #1
 801565e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015662:	e006      	b.n	8015672 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8015664:	bf00      	nop
 8015666:	e004      	b.n	8015672 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8015668:	bf00      	nop
 801566a:	e002      	b.n	8015672 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 801566c:	bf00      	nop
 801566e:	e000      	b.n	8015672 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8015670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015676:	2b00      	cmp	r3, #0
 8015678:	d110      	bne.n	801569c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 801567a:	4b07      	ldr	r3, [pc, #28]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801567c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015680:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8015684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801568c:	4902      	ldr	r1, [pc, #8]	@ (8015698 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801568e:	4313      	orrs	r3, r2
 8015690:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8015694:	e006      	b.n	80156a4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8015696:	bf00      	nop
 8015698:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 801569c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80156a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80156a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80156a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ac:	2100      	movs	r1, #0
 80156ae:	6239      	str	r1, [r7, #32]
 80156b0:	f003 0301 	and.w	r3, r3, #1
 80156b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80156b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80156ba:	460b      	mov	r3, r1
 80156bc:	4313      	orrs	r3, r2
 80156be:	d055      	beq.n	801576c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80156c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80156c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80156c8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80156cc:	d031      	beq.n	8015732 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80156ce:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80156d2:	d82a      	bhi.n	801572a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80156d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80156d8:	d02d      	beq.n	8015736 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80156da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80156de:	d824      	bhi.n	801572a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80156e0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80156e4:	d029      	beq.n	801573a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80156e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80156ea:	d81e      	bhi.n	801572a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80156ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156f0:	d011      	beq.n	8015716 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80156f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156f6:	d818      	bhi.n	801572a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d020      	beq.n	801573e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80156fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015700:	d113      	bne.n	801572a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015702:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015706:	3308      	adds	r3, #8
 8015708:	4618      	mov	r0, r3
 801570a:	f003 f8c9 	bl	80188a0 <RCCEx_PLL2_Config>
 801570e:	4603      	mov	r3, r0
 8015710:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015714:	e014      	b.n	8015740 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801571a:	3330      	adds	r3, #48	@ 0x30
 801571c:	4618      	mov	r0, r3
 801571e:	f003 f957 	bl	80189d0 <RCCEx_PLL3_Config>
 8015722:	4603      	mov	r3, r0
 8015724:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015728:	e00a      	b.n	8015740 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801572a:	2301      	movs	r3, #1
 801572c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015730:	e006      	b.n	8015740 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8015732:	bf00      	nop
 8015734:	e004      	b.n	8015740 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8015736:	bf00      	nop
 8015738:	e002      	b.n	8015740 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 801573a:	bf00      	nop
 801573c:	e000      	b.n	8015740 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 801573e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015740:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015744:	2b00      	cmp	r3, #0
 8015746:	d10d      	bne.n	8015764 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8015748:	4b88      	ldr	r3, [pc, #544]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801574a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801574e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8015752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801575a:	4984      	ldr	r1, [pc, #528]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801575c:	4313      	orrs	r3, r2
 801575e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8015762:	e003      	b.n	801576c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015764:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015768:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801576c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015774:	2100      	movs	r1, #0
 8015776:	61b9      	str	r1, [r7, #24]
 8015778:	f003 0302 	and.w	r3, r3, #2
 801577c:	61fb      	str	r3, [r7, #28]
 801577e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8015782:	460b      	mov	r3, r1
 8015784:	4313      	orrs	r3, r2
 8015786:	d03d      	beq.n	8015804 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8015788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801578c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8015790:	2b03      	cmp	r3, #3
 8015792:	d81c      	bhi.n	80157ce <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8015794:	a201      	add	r2, pc, #4	@ (adr r2, 801579c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8015796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801579a:	bf00      	nop
 801579c:	080157d7 	.word	0x080157d7
 80157a0:	080157ad 	.word	0x080157ad
 80157a4:	080157bb 	.word	0x080157bb
 80157a8:	080157d7 	.word	0x080157d7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157ac:	4b6f      	ldr	r3, [pc, #444]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80157ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157b0:	4a6e      	ldr	r2, [pc, #440]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80157b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80157b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80157b8:	e00e      	b.n	80157d8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80157ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80157be:	3308      	adds	r3, #8
 80157c0:	4618      	mov	r0, r3
 80157c2:	f003 f86d 	bl	80188a0 <RCCEx_PLL2_Config>
 80157c6:	4603      	mov	r3, r0
 80157c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80157cc:	e004      	b.n	80157d8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80157ce:	2301      	movs	r3, #1
 80157d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80157d4:	e000      	b.n	80157d8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80157d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80157d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d10d      	bne.n	80157fc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80157e0:	4b62      	ldr	r3, [pc, #392]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80157e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80157e6:	f023 0203 	bic.w	r2, r3, #3
 80157ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80157ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80157f2:	495e      	ldr	r1, [pc, #376]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80157f4:	4313      	orrs	r3, r2
 80157f6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80157fa:	e003      	b.n	8015804 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015800:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580c:	2100      	movs	r1, #0
 801580e:	6139      	str	r1, [r7, #16]
 8015810:	f003 0304 	and.w	r3, r3, #4
 8015814:	617b      	str	r3, [r7, #20]
 8015816:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801581a:	460b      	mov	r3, r1
 801581c:	4313      	orrs	r3, r2
 801581e:	d03a      	beq.n	8015896 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8015820:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015824:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801582c:	d00e      	beq.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 801582e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015832:	d815      	bhi.n	8015860 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8015834:	2b00      	cmp	r3, #0
 8015836:	d017      	beq.n	8015868 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8015838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801583c:	d110      	bne.n	8015860 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801583e:	4b4b      	ldr	r3, [pc, #300]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015842:	4a4a      	ldr	r2, [pc, #296]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015848:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801584a:	e00e      	b.n	801586a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801584c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015850:	3308      	adds	r3, #8
 8015852:	4618      	mov	r0, r3
 8015854:	f003 f824 	bl	80188a0 <RCCEx_PLL2_Config>
 8015858:	4603      	mov	r3, r0
 801585a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801585e:	e004      	b.n	801586a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8015860:	2301      	movs	r3, #1
 8015862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015866:	e000      	b.n	801586a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8015868:	bf00      	nop
    }

    if (ret == HAL_OK)
 801586a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801586e:	2b00      	cmp	r3, #0
 8015870:	d10d      	bne.n	801588e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8015872:	4b3e      	ldr	r3, [pc, #248]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801587c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015880:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015884:	4939      	ldr	r1, [pc, #228]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015886:	4313      	orrs	r3, r2
 8015888:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 801588c:	e003      	b.n	8015896 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801588e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015892:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8015896:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801589e:	2100      	movs	r1, #0
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	f003 0310 	and.w	r3, r3, #16
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80158ac:	460b      	mov	r3, r1
 80158ae:	4313      	orrs	r3, r2
 80158b0:	d038      	beq.n	8015924 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80158b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80158b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80158ba:	2b30      	cmp	r3, #48	@ 0x30
 80158bc:	d01b      	beq.n	80158f6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80158be:	2b30      	cmp	r3, #48	@ 0x30
 80158c0:	d815      	bhi.n	80158ee <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80158c2:	2b10      	cmp	r3, #16
 80158c4:	d002      	beq.n	80158cc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80158c6:	2b20      	cmp	r3, #32
 80158c8:	d007      	beq.n	80158da <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80158ca:	e010      	b.n	80158ee <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80158cc:	4b27      	ldr	r3, [pc, #156]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80158ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158d0:	4a26      	ldr	r2, [pc, #152]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80158d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80158d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80158d8:	e00e      	b.n	80158f8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80158da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80158de:	3330      	adds	r3, #48	@ 0x30
 80158e0:	4618      	mov	r0, r3
 80158e2:	f003 f875 	bl	80189d0 <RCCEx_PLL3_Config>
 80158e6:	4603      	mov	r3, r0
 80158e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80158ec:	e004      	b.n	80158f8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80158ee:	2301      	movs	r3, #1
 80158f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80158f4:	e000      	b.n	80158f8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80158f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d10d      	bne.n	801591c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8015900:	4b1a      	ldr	r3, [pc, #104]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015902:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015906:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801590a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801590e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015912:	4916      	ldr	r1, [pc, #88]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015914:	4313      	orrs	r3, r2
 8015916:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 801591a:	e003      	b.n	8015924 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801591c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015920:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8015924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801592c:	2100      	movs	r1, #0
 801592e:	6039      	str	r1, [r7, #0]
 8015930:	f003 0308 	and.w	r3, r3, #8
 8015934:	607b      	str	r3, [r7, #4]
 8015936:	e9d7 1200 	ldrd	r1, r2, [r7]
 801593a:	460b      	mov	r3, r1
 801593c:	4313      	orrs	r3, r2
 801593e:	d00c      	beq.n	801595a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8015940:	4b0a      	ldr	r3, [pc, #40]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015946:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801594a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801594e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8015952:	4906      	ldr	r1, [pc, #24]	@ (801596c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015954:	4313      	orrs	r3, r2
 8015956:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 801595a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 801595e:	4618      	mov	r0, r3
 8015960:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8015964:	46bd      	mov	sp, r7
 8015966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801596a:	bf00      	nop
 801596c:	44020c00 	.word	0x44020c00

08015970 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8015970:	b480      	push	{r7}
 8015972:	b08b      	sub	sp, #44	@ 0x2c
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8015978:	4bad      	ldr	r3, [pc, #692]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 801597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801597c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015980:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8015982:	4bab      	ldr	r3, [pc, #684]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015986:	f003 0303 	and.w	r3, r3, #3
 801598a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 801598c:	4ba8      	ldr	r3, [pc, #672]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 801598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015990:	0a1b      	lsrs	r3, r3, #8
 8015992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015996:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8015998:	4ba5      	ldr	r3, [pc, #660]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 801599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801599c:	f003 0310 	and.w	r3, r3, #16
 80159a0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80159a2:	4ba3      	ldr	r3, [pc, #652]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80159a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159a6:	08db      	lsrs	r3, r3, #3
 80159a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159ac:	697a      	ldr	r2, [r7, #20]
 80159ae:	fb02 f303 	mul.w	r3, r2, r3
 80159b2:	ee07 3a90 	vmov	s15, r3
 80159b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80159ba:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 8126 	beq.w	8015c12 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80159c6:	69fb      	ldr	r3, [r7, #28]
 80159c8:	2b03      	cmp	r3, #3
 80159ca:	d053      	beq.n	8015a74 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	2b03      	cmp	r3, #3
 80159d0:	d86f      	bhi.n	8015ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	2b01      	cmp	r3, #1
 80159d6:	d003      	beq.n	80159e0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80159d8:	69fb      	ldr	r3, [r7, #28]
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d02b      	beq.n	8015a36 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80159de:	e068      	b.n	8015ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80159e0:	4b93      	ldr	r3, [pc, #588]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	08db      	lsrs	r3, r3, #3
 80159e6:	f003 0303 	and.w	r3, r3, #3
 80159ea:	4a92      	ldr	r2, [pc, #584]	@ (8015c34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80159ec:	fa22 f303 	lsr.w	r3, r2, r3
 80159f0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	ee07 3a90 	vmov	s15, r3
 80159f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80159fc:	69bb      	ldr	r3, [r7, #24]
 80159fe:	ee07 3a90 	vmov	s15, r3
 8015a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a0a:	6a3b      	ldr	r3, [r7, #32]
 8015a0c:	ee07 3a90 	vmov	s15, r3
 8015a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a14:	ed97 6a04 	vldr	s12, [r7, #16]
 8015a18:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8015c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015a34:	e068      	b.n	8015b08 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	ee07 3a90 	vmov	s15, r3
 8015a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a40:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8015c3c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8015a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a48:	6a3b      	ldr	r3, [r7, #32]
 8015a4a:	ee07 3a90 	vmov	s15, r3
 8015a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a52:	ed97 6a04 	vldr	s12, [r7, #16]
 8015a56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015a72:	e049      	b.n	8015b08 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015a74:	69bb      	ldr	r3, [r7, #24]
 8015a76:	ee07 3a90 	vmov	s15, r3
 8015a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a7e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8015c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8015a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a86:	6a3b      	ldr	r3, [r7, #32]
 8015a88:	ee07 3a90 	vmov	s15, r3
 8015a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a90:	ed97 6a04 	vldr	s12, [r7, #16]
 8015a94:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8015c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015aac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015ab0:	e02a      	b.n	8015b08 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	08db      	lsrs	r3, r3, #3
 8015ab8:	f003 0303 	and.w	r3, r3, #3
 8015abc:	4a5d      	ldr	r2, [pc, #372]	@ (8015c34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8015abe:	fa22 f303 	lsr.w	r3, r2, r3
 8015ac2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	ee07 3a90 	vmov	s15, r3
 8015aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ace:	69bb      	ldr	r3, [r7, #24]
 8015ad0:	ee07 3a90 	vmov	s15, r3
 8015ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015adc:	6a3b      	ldr	r3, [r7, #32]
 8015ade:	ee07 3a90 	vmov	s15, r3
 8015ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ae6:	ed97 6a04 	vldr	s12, [r7, #16]
 8015aea:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8015c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015b06:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015b08:	4b49      	ldr	r3, [pc, #292]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b14:	d121      	bne.n	8015b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8015b16:	4b46      	ldr	r3, [pc, #280]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d017      	beq.n	8015b52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015b22:	4b43      	ldr	r3, [pc, #268]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b26:	0a5b      	lsrs	r3, r3, #9
 8015b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015b2c:	ee07 3a90 	vmov	s15, r3
 8015b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8015b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015b38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8015b3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015b48:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	601a      	str	r2, [r3, #0]
 8015b50:	e006      	b.n	8015b60 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2200      	movs	r2, #0
 8015b56:	601a      	str	r2, [r3, #0]
 8015b58:	e002      	b.n	8015b60 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015b60:	4b33      	ldr	r3, [pc, #204]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b6c:	d121      	bne.n	8015bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8015b6e:	4b30      	ldr	r3, [pc, #192]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d017      	beq.n	8015baa <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b7e:	0c1b      	lsrs	r3, r3, #16
 8015b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015b84:	ee07 3a90 	vmov	s15, r3
 8015b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8015b8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015b90:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8015b94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ba0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	605a      	str	r2, [r3, #4]
 8015ba8:	e006      	b.n	8015bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2200      	movs	r2, #0
 8015bae:	605a      	str	r2, [r3, #4]
 8015bb0:	e002      	b.n	8015bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015bc4:	d121      	bne.n	8015c0a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8015bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d017      	beq.n	8015c02 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015bd2:	4b17      	ldr	r3, [pc, #92]	@ (8015c30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015bd6:	0e1b      	lsrs	r3, r3, #24
 8015bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015bdc:	ee07 3a90 	vmov	s15, r3
 8015be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8015be4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015be8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8015bec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bf8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8015c00:	e010      	b.n	8015c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2200      	movs	r2, #0
 8015c06:	609a      	str	r2, [r3, #8]
}
 8015c08:	e00c      	b.n	8015c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	609a      	str	r2, [r3, #8]
}
 8015c10:	e008      	b.n	8015c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2200      	movs	r2, #0
 8015c16:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2200      	movs	r2, #0
 8015c22:	609a      	str	r2, [r3, #8]
}
 8015c24:	bf00      	nop
 8015c26:	372c      	adds	r7, #44	@ 0x2c
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2e:	4770      	bx	lr
 8015c30:	44020c00 	.word	0x44020c00
 8015c34:	03d09000 	.word	0x03d09000
 8015c38:	46000000 	.word	0x46000000
 8015c3c:	4a742400 	.word	0x4a742400
 8015c40:	4bbebc20 	.word	0x4bbebc20

08015c44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8015c44:	b480      	push	{r7}
 8015c46:	b08b      	sub	sp, #44	@ 0x2c
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8015c4c:	4bad      	ldr	r3, [pc, #692]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c54:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8015c56:	4bab      	ldr	r3, [pc, #684]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c5a:	f003 0303 	and.w	r3, r3, #3
 8015c5e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8015c60:	4ba8      	ldr	r3, [pc, #672]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c64:	0a1b      	lsrs	r3, r3, #8
 8015c66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015c6a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8015c6c:	4ba5      	ldr	r3, [pc, #660]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c70:	f003 0310 	and.w	r3, r3, #16
 8015c74:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8015c76:	4ba3      	ldr	r3, [pc, #652]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c7a:	08db      	lsrs	r3, r3, #3
 8015c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c80:	697a      	ldr	r2, [r7, #20]
 8015c82:	fb02 f303 	mul.w	r3, r2, r3
 8015c86:	ee07 3a90 	vmov	s15, r3
 8015c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c8e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8015c92:	69bb      	ldr	r3, [r7, #24]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 8126 	beq.w	8015ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8015c9a:	69fb      	ldr	r3, [r7, #28]
 8015c9c:	2b03      	cmp	r3, #3
 8015c9e:	d053      	beq.n	8015d48 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	2b03      	cmp	r3, #3
 8015ca4:	d86f      	bhi.n	8015d86 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8015ca6:	69fb      	ldr	r3, [r7, #28]
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	d003      	beq.n	8015cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	2b02      	cmp	r3, #2
 8015cb0:	d02b      	beq.n	8015d0a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8015cb2:	e068      	b.n	8015d86 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015cb4:	4b93      	ldr	r3, [pc, #588]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	08db      	lsrs	r3, r3, #3
 8015cba:	f003 0303 	and.w	r3, r3, #3
 8015cbe:	4a92      	ldr	r2, [pc, #584]	@ (8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8015cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8015cc4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	ee07 3a90 	vmov	s15, r3
 8015ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015cd0:	69bb      	ldr	r3, [r7, #24]
 8015cd2:	ee07 3a90 	vmov	s15, r3
 8015cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015cde:	6a3b      	ldr	r3, [r7, #32]
 8015ce0:	ee07 3a90 	vmov	s15, r3
 8015ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ce8:	ed97 6a04 	vldr	s12, [r7, #16]
 8015cec:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8015f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015cf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015d08:	e068      	b.n	8015ddc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015d0a:	69bb      	ldr	r3, [r7, #24]
 8015d0c:	ee07 3a90 	vmov	s15, r3
 8015d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d14:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8015f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8015d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d1c:	6a3b      	ldr	r3, [r7, #32]
 8015d1e:	ee07 3a90 	vmov	s15, r3
 8015d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d26:	ed97 6a04 	vldr	s12, [r7, #16]
 8015d2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015d46:	e049      	b.n	8015ddc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015d48:	69bb      	ldr	r3, [r7, #24]
 8015d4a:	ee07 3a90 	vmov	s15, r3
 8015d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d52:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8015f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8015d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d5a:	6a3b      	ldr	r3, [r7, #32]
 8015d5c:	ee07 3a90 	vmov	s15, r3
 8015d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d64:	ed97 6a04 	vldr	s12, [r7, #16]
 8015d68:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8015f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015d84:	e02a      	b.n	8015ddc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015d86:	4b5f      	ldr	r3, [pc, #380]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	08db      	lsrs	r3, r3, #3
 8015d8c:	f003 0303 	and.w	r3, r3, #3
 8015d90:	4a5d      	ldr	r2, [pc, #372]	@ (8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8015d92:	fa22 f303 	lsr.w	r3, r2, r3
 8015d96:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	ee07 3a90 	vmov	s15, r3
 8015d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015da2:	69bb      	ldr	r3, [r7, #24]
 8015da4:	ee07 3a90 	vmov	s15, r3
 8015da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015db0:	6a3b      	ldr	r3, [r7, #32]
 8015db2:	ee07 3a90 	vmov	s15, r3
 8015db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dba:	ed97 6a04 	vldr	s12, [r7, #16]
 8015dbe:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8015f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015dd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015dda:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015ddc:	4b49      	ldr	r3, [pc, #292]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015de8:	d121      	bne.n	8015e2e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8015dea:	4b46      	ldr	r3, [pc, #280]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d017      	beq.n	8015e26 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8015df6:	4b43      	ldr	r3, [pc, #268]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015dfa:	0a5b      	lsrs	r3, r3, #9
 8015dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e00:	ee07 3a90 	vmov	s15, r3
 8015e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8015e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8015e10:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e1c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	601a      	str	r2, [r3, #0]
 8015e24:	e006      	b.n	8015e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	601a      	str	r2, [r3, #0]
 8015e2c:	e002      	b.n	8015e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2200      	movs	r2, #0
 8015e32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015e34:	4b33      	ldr	r3, [pc, #204]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015e40:	d121      	bne.n	8015e86 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8015e42:	4b30      	ldr	r3, [pc, #192]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d017      	beq.n	8015e7e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8015e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e52:	0c1b      	lsrs	r3, r3, #16
 8015e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e58:	ee07 3a90 	vmov	s15, r3
 8015e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8015e60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8015e68:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e74:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	605a      	str	r2, [r3, #4]
 8015e7c:	e006      	b.n	8015e8c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	605a      	str	r2, [r3, #4]
 8015e84:	e002      	b.n	8015e8c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2200      	movs	r2, #0
 8015e8a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015e94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015e98:	d121      	bne.n	8015ede <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8015e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d017      	beq.n	8015ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8015ea6:	4b17      	ldr	r3, [pc, #92]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015eaa:	0e1b      	lsrs	r3, r3, #24
 8015eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015eb0:	ee07 3a90 	vmov	s15, r3
 8015eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8015eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8015ec0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ecc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8015ed4:	e010      	b.n	8015ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2200      	movs	r2, #0
 8015eda:	609a      	str	r2, [r3, #8]
}
 8015edc:	e00c      	b.n	8015ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	609a      	str	r2, [r3, #8]
}
 8015ee4:	e008      	b.n	8015ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	609a      	str	r2, [r3, #8]
}
 8015ef8:	bf00      	nop
 8015efa:	372c      	adds	r7, #44	@ 0x2c
 8015efc:	46bd      	mov	sp, r7
 8015efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f02:	4770      	bx	lr
 8015f04:	44020c00 	.word	0x44020c00
 8015f08:	03d09000 	.word	0x03d09000
 8015f0c:	46000000 	.word	0x46000000
 8015f10:	4a742400 	.word	0x4a742400
 8015f14:	4bbebc20 	.word	0x4bbebc20

08015f18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b08b      	sub	sp, #44	@ 0x2c
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8015f20:	4bad      	ldr	r3, [pc, #692]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f28:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8015f2a:	4bab      	ldr	r3, [pc, #684]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f2e:	f003 0303 	and.w	r3, r3, #3
 8015f32:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8015f34:	4ba8      	ldr	r3, [pc, #672]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f38:	0a1b      	lsrs	r3, r3, #8
 8015f3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015f3e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8015f40:	4ba5      	ldr	r3, [pc, #660]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f44:	f003 0310 	and.w	r3, r3, #16
 8015f48:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8015f4a:	4ba3      	ldr	r3, [pc, #652]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015f4e:	08db      	lsrs	r3, r3, #3
 8015f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f54:	697a      	ldr	r2, [r7, #20]
 8015f56:	fb02 f303 	mul.w	r3, r2, r3
 8015f5a:	ee07 3a90 	vmov	s15, r3
 8015f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f62:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8015f66:	69bb      	ldr	r3, [r7, #24]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	f000 8126 	beq.w	80161ba <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8015f6e:	69fb      	ldr	r3, [r7, #28]
 8015f70:	2b03      	cmp	r3, #3
 8015f72:	d053      	beq.n	801601c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	2b03      	cmp	r3, #3
 8015f78:	d86f      	bhi.n	801605a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8015f7a:	69fb      	ldr	r3, [r7, #28]
 8015f7c:	2b01      	cmp	r3, #1
 8015f7e:	d003      	beq.n	8015f88 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8015f80:	69fb      	ldr	r3, [r7, #28]
 8015f82:	2b02      	cmp	r3, #2
 8015f84:	d02b      	beq.n	8015fde <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8015f86:	e068      	b.n	801605a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015f88:	4b93      	ldr	r3, [pc, #588]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	08db      	lsrs	r3, r3, #3
 8015f8e:	f003 0303 	and.w	r3, r3, #3
 8015f92:	4a92      	ldr	r2, [pc, #584]	@ (80161dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8015f94:	fa22 f303 	lsr.w	r3, r2, r3
 8015f98:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	ee07 3a90 	vmov	s15, r3
 8015fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	ee07 3a90 	vmov	s15, r3
 8015faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	ee07 3a90 	vmov	s15, r3
 8015fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8015fc0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80161e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8015fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015fcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015fdc:	e068      	b.n	80160b0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8015fde:	69bb      	ldr	r3, [r7, #24]
 8015fe0:	ee07 3a90 	vmov	s15, r3
 8015fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fe8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80161e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8015fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ff0:	6a3b      	ldr	r3, [r7, #32]
 8015ff2:	ee07 3a90 	vmov	s15, r3
 8015ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ffa:	ed97 6a04 	vldr	s12, [r7, #16]
 8015ffe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80161e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8016002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801600a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801600e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016016:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 801601a:	e049      	b.n	80160b0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	ee07 3a90 	vmov	s15, r3
 8016022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016026:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80161e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 801602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801602e:	6a3b      	ldr	r3, [r7, #32]
 8016030:	ee07 3a90 	vmov	s15, r3
 8016034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016038:	ed97 6a04 	vldr	s12, [r7, #16]
 801603c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80161e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8016040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801604c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016054:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8016058:	e02a      	b.n	80160b0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801605a:	4b5f      	ldr	r3, [pc, #380]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	08db      	lsrs	r3, r3, #3
 8016060:	f003 0303 	and.w	r3, r3, #3
 8016064:	4a5d      	ldr	r2, [pc, #372]	@ (80161dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8016066:	fa22 f303 	lsr.w	r3, r2, r3
 801606a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	ee07 3a90 	vmov	s15, r3
 8016072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	ee07 3a90 	vmov	s15, r3
 801607c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016084:	6a3b      	ldr	r3, [r7, #32]
 8016086:	ee07 3a90 	vmov	s15, r3
 801608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801608e:	ed97 6a04 	vldr	s12, [r7, #16]
 8016092:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80161e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8016096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801609e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80160ae:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80160b0:	4b49      	ldr	r3, [pc, #292]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80160b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80160bc:	d121      	bne.n	8016102 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80160be:	4b46      	ldr	r3, [pc, #280]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80160c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d017      	beq.n	80160fa <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80160ca:	4b43      	ldr	r3, [pc, #268]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80160cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160ce:	0a5b      	lsrs	r3, r3, #9
 80160d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80160d4:	ee07 3a90 	vmov	s15, r3
 80160d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80160dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80160e0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80160e4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80160e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80160ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160f0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	601a      	str	r2, [r3, #0]
 80160f8:	e006      	b.n	8016108 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	2200      	movs	r2, #0
 80160fe:	601a      	str	r2, [r3, #0]
 8016100:	e002      	b.n	8016108 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2200      	movs	r2, #0
 8016106:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016108:	4b33      	ldr	r3, [pc, #204]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016114:	d121      	bne.n	801615a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8016116:	4b30      	ldr	r3, [pc, #192]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801611a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801611e:	2b00      	cmp	r3, #0
 8016120:	d017      	beq.n	8016152 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8016122:	4b2d      	ldr	r3, [pc, #180]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016126:	0c1b      	lsrs	r3, r3, #16
 8016128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801612c:	ee07 3a90 	vmov	s15, r3
 8016130:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8016134:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016138:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 801613c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8016140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016148:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	605a      	str	r2, [r3, #4]
 8016150:	e006      	b.n	8016160 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	2200      	movs	r2, #0
 8016156:	605a      	str	r2, [r3, #4]
 8016158:	e002      	b.n	8016160 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2200      	movs	r2, #0
 801615e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016160:	4b1d      	ldr	r3, [pc, #116]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801616c:	d121      	bne.n	80161b2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 801616e:	4b1a      	ldr	r3, [pc, #104]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8016176:	2b00      	cmp	r3, #0
 8016178:	d017      	beq.n	80161aa <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801617a:	4b17      	ldr	r3, [pc, #92]	@ (80161d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801617c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801617e:	0e1b      	lsrs	r3, r3, #24
 8016180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016184:	ee07 3a90 	vmov	s15, r3
 8016188:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 801618c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016190:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8016194:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8016198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801619c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161a0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80161a8:	e010      	b.n	80161cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2200      	movs	r2, #0
 80161ae:	609a      	str	r2, [r3, #8]
}
 80161b0:	e00c      	b.n	80161cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2200      	movs	r2, #0
 80161b6:	609a      	str	r2, [r3, #8]
}
 80161b8:	e008      	b.n	80161cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2200      	movs	r2, #0
 80161be:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2200      	movs	r2, #0
 80161c4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2200      	movs	r2, #0
 80161ca:	609a      	str	r2, [r3, #8]
}
 80161cc:	bf00      	nop
 80161ce:	372c      	adds	r7, #44	@ 0x2c
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr
 80161d8:	44020c00 	.word	0x44020c00
 80161dc:	03d09000 	.word	0x03d09000
 80161e0:	46000000 	.word	0x46000000
 80161e4:	4a742400 	.word	0x4a742400
 80161e8:	4bbebc20 	.word	0x4bbebc20

080161ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80161ec:	b590      	push	{r4, r7, lr}
 80161ee:	b08f      	sub	sp, #60	@ 0x3c
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80161f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80161fa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80161fe:	4321      	orrs	r1, r4
 8016200:	d150      	bne.n	80162a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8016202:	4b26      	ldr	r3, [pc, #152]	@ (801629c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801620c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 801620e:	4b23      	ldr	r3, [pc, #140]	@ (801629c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016214:	f003 0302 	and.w	r3, r3, #2
 8016218:	2b02      	cmp	r3, #2
 801621a:	d108      	bne.n	801622e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 801621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801621e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016222:	d104      	bne.n	801622e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8016224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016228:	637b      	str	r3, [r7, #52]	@ 0x34
 801622a:	f002 bb2a 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 801622e:	4b1b      	ldr	r3, [pc, #108]	@ (801629c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801623c:	d108      	bne.n	8016250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 801623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016244:	d104      	bne.n	8016250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8016246:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801624a:	637b      	str	r3, [r7, #52]	@ 0x34
 801624c:	f002 bb19 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8016250:	4b12      	ldr	r3, [pc, #72]	@ (801629c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801625c:	d119      	bne.n	8016292 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 801625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016260:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016264:	d115      	bne.n	8016292 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8016266:	4b0d      	ldr	r3, [pc, #52]	@ (801629c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016268:	69db      	ldr	r3, [r3, #28]
 801626a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 801626e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016272:	d30a      	bcc.n	801628a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8016274:	4b09      	ldr	r3, [pc, #36]	@ (801629c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016276:	69db      	ldr	r3, [r3, #28]
 8016278:	0a1b      	lsrs	r3, r3, #8
 801627a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801627e:	4a08      	ldr	r2, [pc, #32]	@ (80162a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8016280:	fbb2 f3f3 	udiv	r3, r2, r3
 8016284:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8016286:	f002 bafc 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 801628a:	2300      	movs	r3, #0
 801628c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 801628e:	f002 baf8 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8016292:	2300      	movs	r3, #0
 8016294:	637b      	str	r3, [r7, #52]	@ 0x34
 8016296:	f002 baf4 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801629a:	bf00      	nop
 801629c:	44020c00 	.word	0x44020c00
 80162a0:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80162a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162a8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80162ac:	ea50 0104 	orrs.w	r1, r0, r4
 80162b0:	f001 8275 	beq.w	801779e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80162b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162b8:	2801      	cmp	r0, #1
 80162ba:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80162be:	f082 82dd 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80162c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162c6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80162ca:	ea50 0104 	orrs.w	r1, r0, r4
 80162ce:	f001 816c 	beq.w	80175aa <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80162d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162d6:	2801      	cmp	r0, #1
 80162d8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80162dc:	f082 82ce 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80162e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162e4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80162e8:	ea50 0104 	orrs.w	r1, r0, r4
 80162ec:	f001 8602 	beq.w	8017ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80162f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80162f4:	2801      	cmp	r0, #1
 80162f6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80162fa:	f082 82bf 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80162fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016302:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8016306:	ea50 0104 	orrs.w	r1, r0, r4
 801630a:	f001 854c 	beq.w	8017da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 801630e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016312:	2801      	cmp	r0, #1
 8016314:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8016318:	f082 82b0 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801631c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016320:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8016324:	ea50 0104 	orrs.w	r1, r0, r4
 8016328:	f001 849e 	beq.w	8017c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 801632c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016330:	2801      	cmp	r0, #1
 8016332:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8016336:	f082 82a1 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801633a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801633e:	f1a1 0420 	sub.w	r4, r1, #32
 8016342:	ea50 0104 	orrs.w	r1, r0, r4
 8016346:	f001 83e8 	beq.w	8017b1a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 801634a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801634e:	2801      	cmp	r0, #1
 8016350:	f171 0120 	sbcs.w	r1, r1, #32
 8016354:	f082 8292 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016358:	e9d7 0100 	ldrd	r0, r1, [r7]
 801635c:	f1a1 0410 	sub.w	r4, r1, #16
 8016360:	ea50 0104 	orrs.w	r1, r0, r4
 8016364:	f002 8256 	beq.w	8018814 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8016368:	e9d7 0100 	ldrd	r0, r1, [r7]
 801636c:	2801      	cmp	r0, #1
 801636e:	f171 0110 	sbcs.w	r1, r1, #16
 8016372:	f082 8283 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016376:	e9d7 0100 	ldrd	r0, r1, [r7]
 801637a:	f1a1 0408 	sub.w	r4, r1, #8
 801637e:	ea50 0104 	orrs.w	r1, r0, r4
 8016382:	f002 81cc 	beq.w	801871e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8016386:	e9d7 0100 	ldrd	r0, r1, [r7]
 801638a:	2801      	cmp	r0, #1
 801638c:	f171 0108 	sbcs.w	r1, r1, #8
 8016390:	f082 8274 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016394:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016398:	1f0c      	subs	r4, r1, #4
 801639a:	ea50 0104 	orrs.w	r1, r0, r4
 801639e:	f001 8648 	beq.w	8018032 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80163a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163a6:	2801      	cmp	r0, #1
 80163a8:	f171 0104 	sbcs.w	r1, r1, #4
 80163ac:	f082 8266 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80163b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163b4:	1e8c      	subs	r4, r1, #2
 80163b6:	ea50 0104 	orrs.w	r1, r0, r4
 80163ba:	f002 8143 	beq.w	8018644 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80163be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163c2:	2801      	cmp	r0, #1
 80163c4:	f171 0102 	sbcs.w	r1, r1, #2
 80163c8:	f082 8258 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80163cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163d0:	1e4c      	subs	r4, r1, #1
 80163d2:	ea50 0104 	orrs.w	r1, r0, r4
 80163d6:	f002 80ce 	beq.w	8018576 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80163da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163de:	2801      	cmp	r0, #1
 80163e0:	f171 0101 	sbcs.w	r1, r1, #1
 80163e4:	f082 824a 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80163e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163ec:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80163f0:	4321      	orrs	r1, r4
 80163f2:	f002 8059 	beq.w	80184a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80163f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163fa:	4cd9      	ldr	r4, [pc, #868]	@ (8016760 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80163fc:	42a0      	cmp	r0, r4
 80163fe:	f171 0100 	sbcs.w	r1, r1, #0
 8016402:	f082 823b 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016406:	e9d7 0100 	ldrd	r0, r1, [r7]
 801640a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 801640e:	4321      	orrs	r1, r4
 8016410:	f001 87d9 	beq.w	80183c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8016414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016418:	4cd2      	ldr	r4, [pc, #840]	@ (8016764 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 801641a:	42a0      	cmp	r0, r4
 801641c:	f171 0100 	sbcs.w	r1, r1, #0
 8016420:	f082 822c 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016428:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 801642c:	4321      	orrs	r1, r4
 801642e:	f001 8751 	beq.w	80182d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8016432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016436:	4ccc      	ldr	r4, [pc, #816]	@ (8016768 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8016438:	42a0      	cmp	r0, r4
 801643a:	f171 0100 	sbcs.w	r1, r1, #0
 801643e:	f082 821d 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016446:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 801644a:	4321      	orrs	r1, r4
 801644c:	f001 869a 	beq.w	8018184 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8016450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016454:	4cc5      	ldr	r4, [pc, #788]	@ (801676c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8016456:	42a0      	cmp	r0, r4
 8016458:	f171 0100 	sbcs.w	r1, r1, #0
 801645c:	f082 820e 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016464:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8016468:	4321      	orrs	r1, r4
 801646a:	f001 8612 	beq.w	8018092 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 801646e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016472:	4cbf      	ldr	r4, [pc, #764]	@ (8016770 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8016474:	42a0      	cmp	r0, r4
 8016476:	f171 0100 	sbcs.w	r1, r1, #0
 801647a:	f082 81ff 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801647e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016482:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8016486:	4321      	orrs	r1, r4
 8016488:	f002 817e 	beq.w	8018788 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 801648c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016490:	4cb8      	ldr	r4, [pc, #736]	@ (8016774 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8016492:	42a0      	cmp	r0, r4
 8016494:	f171 0100 	sbcs.w	r1, r1, #0
 8016498:	f082 81f0 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801649c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164a0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80164a4:	4321      	orrs	r1, r4
 80164a6:	f000 829e 	beq.w	80169e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80164aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164ae:	4cb2      	ldr	r4, [pc, #712]	@ (8016778 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80164b0:	42a0      	cmp	r0, r4
 80164b2:	f171 0100 	sbcs.w	r1, r1, #0
 80164b6:	f082 81e1 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80164ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164be:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80164c2:	4321      	orrs	r1, r4
 80164c4:	f000 826d 	beq.w	80169a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80164c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164cc:	4cab      	ldr	r4, [pc, #684]	@ (801677c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80164ce:	42a0      	cmp	r0, r4
 80164d0:	f171 0100 	sbcs.w	r1, r1, #0
 80164d4:	f082 81d2 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80164d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164dc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80164e0:	4321      	orrs	r1, r4
 80164e2:	f001 800d 	beq.w	8017500 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80164e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164ea:	4ca5      	ldr	r4, [pc, #660]	@ (8016780 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80164ec:	42a0      	cmp	r0, r4
 80164ee:	f171 0100 	sbcs.w	r1, r1, #0
 80164f2:	f082 81c3 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80164f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164fa:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80164fe:	4321      	orrs	r1, r4
 8016500:	f000 81d0 	beq.w	80168a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8016504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016508:	4c9e      	ldr	r4, [pc, #632]	@ (8016784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 801650a:	42a0      	cmp	r0, r4
 801650c:	f171 0100 	sbcs.w	r1, r1, #0
 8016510:	f082 81b4 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016518:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 801651c:	4321      	orrs	r1, r4
 801651e:	f000 8142 	beq.w	80167a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8016522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016526:	4c98      	ldr	r4, [pc, #608]	@ (8016788 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8016528:	42a0      	cmp	r0, r4
 801652a:	f171 0100 	sbcs.w	r1, r1, #0
 801652e:	f082 81a5 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016536:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 801653a:	4321      	orrs	r1, r4
 801653c:	f001 824e 	beq.w	80179dc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8016540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016544:	4c91      	ldr	r4, [pc, #580]	@ (801678c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8016546:	42a0      	cmp	r0, r4
 8016548:	f171 0100 	sbcs.w	r1, r1, #0
 801654c:	f082 8196 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016554:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8016558:	4321      	orrs	r1, r4
 801655a:	f001 8197 	beq.w	801788c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 801655e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016562:	4c8b      	ldr	r4, [pc, #556]	@ (8016790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8016564:	42a0      	cmp	r0, r4
 8016566:	f171 0100 	sbcs.w	r1, r1, #0
 801656a:	f082 8187 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801656e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016572:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8016576:	4321      	orrs	r1, r4
 8016578:	f001 8154 	beq.w	8017824 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 801657c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016580:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8016584:	f171 0100 	sbcs.w	r1, r1, #0
 8016588:	f082 8178 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801658c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016590:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8016594:	4321      	orrs	r1, r4
 8016596:	f001 80b7 	beq.w	8017708 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 801659a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801659e:	f248 0401 	movw	r4, #32769	@ 0x8001
 80165a2:	42a0      	cmp	r0, r4
 80165a4:	f171 0100 	sbcs.w	r1, r1, #0
 80165a8:	f082 8168 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80165ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165b0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80165b4:	4321      	orrs	r1, r4
 80165b6:	f001 8064 	beq.w	8017682 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80165ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165be:	f244 0401 	movw	r4, #16385	@ 0x4001
 80165c2:	42a0      	cmp	r0, r4
 80165c4:	f171 0100 	sbcs.w	r1, r1, #0
 80165c8:	f082 8158 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80165cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165d0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80165d4:	4321      	orrs	r1, r4
 80165d6:	f001 8011 	beq.w	80175fc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80165da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165de:	f242 0401 	movw	r4, #8193	@ 0x2001
 80165e2:	42a0      	cmp	r0, r4
 80165e4:	f171 0100 	sbcs.w	r1, r1, #0
 80165e8:	f082 8148 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80165ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165f0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80165f4:	4321      	orrs	r1, r4
 80165f6:	f000 871e 	beq.w	8017436 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80165fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165fe:	f241 0401 	movw	r4, #4097	@ 0x1001
 8016602:	42a0      	cmp	r0, r4
 8016604:	f171 0100 	sbcs.w	r1, r1, #0
 8016608:	f082 8138 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801660c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016610:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8016614:	4321      	orrs	r1, r4
 8016616:	f000 86a8 	beq.w	801736a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 801661a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801661e:	f640 0401 	movw	r4, #2049	@ 0x801
 8016622:	42a0      	cmp	r0, r4
 8016624:	f171 0100 	sbcs.w	r1, r1, #0
 8016628:	f082 8128 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801662c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016630:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8016634:	4321      	orrs	r1, r4
 8016636:	f000 8632 	beq.w	801729e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 801663a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801663e:	f240 4401 	movw	r4, #1025	@ 0x401
 8016642:	42a0      	cmp	r0, r4
 8016644:	f171 0100 	sbcs.w	r1, r1, #0
 8016648:	f082 8118 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801664c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016650:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8016654:	4321      	orrs	r1, r4
 8016656:	f000 85b0 	beq.w	80171ba <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 801665a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801665e:	f240 2401 	movw	r4, #513	@ 0x201
 8016662:	42a0      	cmp	r0, r4
 8016664:	f171 0100 	sbcs.w	r1, r1, #0
 8016668:	f082 8108 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801666c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016670:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8016674:	4321      	orrs	r1, r4
 8016676:	f000 8535 	beq.w	80170e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 801667a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801667e:	f240 1401 	movw	r4, #257	@ 0x101
 8016682:	42a0      	cmp	r0, r4
 8016684:	f171 0100 	sbcs.w	r1, r1, #0
 8016688:	f082 80f8 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801668c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016690:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8016694:	4321      	orrs	r1, r4
 8016696:	f000 84ba 	beq.w	801700e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 801669a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801669e:	2881      	cmp	r0, #129	@ 0x81
 80166a0:	f171 0100 	sbcs.w	r1, r1, #0
 80166a4:	f082 80ea 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166ac:	2821      	cmp	r0, #33	@ 0x21
 80166ae:	f171 0100 	sbcs.w	r1, r1, #0
 80166b2:	d26f      	bcs.n	8016794 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80166b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166b8:	4301      	orrs	r1, r0
 80166ba:	f002 80df 	beq.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166c2:	1e42      	subs	r2, r0, #1
 80166c4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80166c8:	2a20      	cmp	r2, #32
 80166ca:	f173 0100 	sbcs.w	r1, r3, #0
 80166ce:	f082 80d5 	bcs.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166d2:	2a1f      	cmp	r2, #31
 80166d4:	f202 80d2 	bhi.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166d8:	a101      	add	r1, pc, #4	@ (adr r1, 80166e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80166da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80166de:	bf00      	nop
 80166e0:	08016a41 	.word	0x08016a41
 80166e4:	08016b0d 	.word	0x08016b0d
 80166e8:	0801887d 	.word	0x0801887d
 80166ec:	08016bcd 	.word	0x08016bcd
 80166f0:	0801887d 	.word	0x0801887d
 80166f4:	0801887d 	.word	0x0801887d
 80166f8:	0801887d 	.word	0x0801887d
 80166fc:	08016c9d 	.word	0x08016c9d
 8016700:	0801887d 	.word	0x0801887d
 8016704:	0801887d 	.word	0x0801887d
 8016708:	0801887d 	.word	0x0801887d
 801670c:	0801887d 	.word	0x0801887d
 8016710:	0801887d 	.word	0x0801887d
 8016714:	0801887d 	.word	0x0801887d
 8016718:	0801887d 	.word	0x0801887d
 801671c:	08016d7f 	.word	0x08016d7f
 8016720:	0801887d 	.word	0x0801887d
 8016724:	0801887d 	.word	0x0801887d
 8016728:	0801887d 	.word	0x0801887d
 801672c:	0801887d 	.word	0x0801887d
 8016730:	0801887d 	.word	0x0801887d
 8016734:	0801887d 	.word	0x0801887d
 8016738:	0801887d 	.word	0x0801887d
 801673c:	0801887d 	.word	0x0801887d
 8016740:	0801887d 	.word	0x0801887d
 8016744:	0801887d 	.word	0x0801887d
 8016748:	0801887d 	.word	0x0801887d
 801674c:	0801887d 	.word	0x0801887d
 8016750:	0801887d 	.word	0x0801887d
 8016754:	0801887d 	.word	0x0801887d
 8016758:	0801887d 	.word	0x0801887d
 801675c:	08016e55 	.word	0x08016e55
 8016760:	80000001 	.word	0x80000001
 8016764:	40000001 	.word	0x40000001
 8016768:	20000001 	.word	0x20000001
 801676c:	10000001 	.word	0x10000001
 8016770:	08000001 	.word	0x08000001
 8016774:	04000001 	.word	0x04000001
 8016778:	00800001 	.word	0x00800001
 801677c:	00400001 	.word	0x00400001
 8016780:	00200001 	.word	0x00200001
 8016784:	00100001 	.word	0x00100001
 8016788:	00080001 	.word	0x00080001
 801678c:	00040001 	.word	0x00040001
 8016790:	00020001 	.word	0x00020001
 8016794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016798:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 801679c:	430b      	orrs	r3, r1
 801679e:	f000 83c4 	beq.w	8016f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80167a2:	f002 b86b 	b.w	801887c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80167a6:	4ba1      	ldr	r3, [pc, #644]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80167a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80167ac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80167b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80167b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80167b8:	d036      	beq.n	8016828 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80167ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80167c0:	d86b      	bhi.n	801689a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80167c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80167c8:	d02b      	beq.n	8016822 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80167ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80167d0:	d863      	bhi.n	801689a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80167d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80167d8:	d01b      	beq.n	8016812 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80167da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80167e0:	d85b      	bhi.n	801689a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80167e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d004      	beq.n	80167f2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80167e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80167ee:	d008      	beq.n	8016802 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80167f0:	e053      	b.n	801689a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80167f2:	f107 0320 	add.w	r3, r7, #32
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7ff f8ba 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80167fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016800:	e04e      	b.n	80168a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016802:	f107 0314 	add.w	r3, r7, #20
 8016806:	4618      	mov	r0, r3
 8016808:	f7ff fa1c 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801680c:	697b      	ldr	r3, [r7, #20]
 801680e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016810:	e046      	b.n	80168a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016812:	f107 0308 	add.w	r3, r7, #8
 8016816:	4618      	mov	r0, r3
 8016818:	f7ff fb7e 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016820:	e03e      	b.n	80168a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8016822:	4b83      	ldr	r3, [pc, #524]	@ (8016a30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8016824:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016826:	e03b      	b.n	80168a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016828:	4b80      	ldr	r3, [pc, #512]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801682a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801682e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016832:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016834:	4b7d      	ldr	r3, [pc, #500]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	f003 0302 	and.w	r3, r3, #2
 801683c:	2b02      	cmp	r3, #2
 801683e:	d10c      	bne.n	801685a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8016840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016842:	2b00      	cmp	r3, #0
 8016844:	d109      	bne.n	801685a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016846:	4b79      	ldr	r3, [pc, #484]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	08db      	lsrs	r3, r3, #3
 801684c:	f003 0303 	and.w	r3, r3, #3
 8016850:	4a78      	ldr	r2, [pc, #480]	@ (8016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8016852:	fa22 f303 	lsr.w	r3, r2, r3
 8016856:	637b      	str	r3, [r7, #52]	@ 0x34
 8016858:	e01e      	b.n	8016898 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801685a:	4b74      	ldr	r3, [pc, #464]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016866:	d106      	bne.n	8016876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8016868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801686a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801686e:	d102      	bne.n	8016876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8016870:	4b71      	ldr	r3, [pc, #452]	@ (8016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8016872:	637b      	str	r3, [r7, #52]	@ 0x34
 8016874:	e010      	b.n	8016898 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016876:	4b6d      	ldr	r3, [pc, #436]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801687e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016882:	d106      	bne.n	8016892 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8016884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016886:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801688a:	d102      	bne.n	8016892 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801688c:	4b6b      	ldr	r3, [pc, #428]	@ (8016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 801688e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016890:	e002      	b.n	8016898 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8016892:	2300      	movs	r3, #0
 8016894:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8016896:	e003      	b.n	80168a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8016898:	e002      	b.n	80168a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 801689a:	2300      	movs	r3, #0
 801689c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801689e:	bf00      	nop
          }
        }
        break;
 80168a0:	f001 bfef 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80168a4:	4b61      	ldr	r3, [pc, #388]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80168a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80168aa:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80168ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80168b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80168b6:	d036      	beq.n	8016926 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80168b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80168be:	d86b      	bhi.n	8016998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80168c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168c2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80168c6:	d02b      	beq.n	8016920 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80168c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80168ce:	d863      	bhi.n	8016998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80168d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80168d6:	d01b      	beq.n	8016910 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80168d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80168de:	d85b      	bhi.n	8016998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80168e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d004      	beq.n	80168f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80168e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80168ec:	d008      	beq.n	8016900 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80168ee:	e053      	b.n	8016998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80168f0:	f107 0320 	add.w	r3, r7, #32
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7ff f83b 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80168fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80168fe:	e04e      	b.n	801699e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016900:	f107 0314 	add.w	r3, r7, #20
 8016904:	4618      	mov	r0, r3
 8016906:	f7ff f99d 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801690a:	697b      	ldr	r3, [r7, #20]
 801690c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801690e:	e046      	b.n	801699e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016910:	f107 0308 	add.w	r3, r7, #8
 8016914:	4618      	mov	r0, r3
 8016916:	f7ff faff 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801691e:	e03e      	b.n	801699e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8016920:	4b43      	ldr	r3, [pc, #268]	@ (8016a30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8016922:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016924:	e03b      	b.n	801699e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016926:	4b41      	ldr	r3, [pc, #260]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801692c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016930:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016932:	4b3e      	ldr	r3, [pc, #248]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	f003 0302 	and.w	r3, r3, #2
 801693a:	2b02      	cmp	r3, #2
 801693c:	d10c      	bne.n	8016958 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 801693e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016940:	2b00      	cmp	r3, #0
 8016942:	d109      	bne.n	8016958 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016944:	4b39      	ldr	r3, [pc, #228]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	08db      	lsrs	r3, r3, #3
 801694a:	f003 0303 	and.w	r3, r3, #3
 801694e:	4a39      	ldr	r2, [pc, #228]	@ (8016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8016950:	fa22 f303 	lsr.w	r3, r2, r3
 8016954:	637b      	str	r3, [r7, #52]	@ 0x34
 8016956:	e01e      	b.n	8016996 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016958:	4b34      	ldr	r3, [pc, #208]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016964:	d106      	bne.n	8016974 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8016966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801696c:	d102      	bne.n	8016974 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801696e:	4b32      	ldr	r3, [pc, #200]	@ (8016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8016970:	637b      	str	r3, [r7, #52]	@ 0x34
 8016972:	e010      	b.n	8016996 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016974:	4b2d      	ldr	r3, [pc, #180]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801697c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016980:	d106      	bne.n	8016990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8016982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016988:	d102      	bne.n	8016990 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801698a:	4b2c      	ldr	r3, [pc, #176]	@ (8016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 801698c:	637b      	str	r3, [r7, #52]	@ 0x34
 801698e:	e002      	b.n	8016996 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8016990:	2300      	movs	r3, #0
 8016992:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8016994:	e003      	b.n	801699e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8016996:	e002      	b.n	801699e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8016998:	2300      	movs	r3, #0
 801699a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801699c:	bf00      	nop
          }
        }
        break;
 801699e:	f001 bf70 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80169a2:	4b22      	ldr	r3, [pc, #136]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80169a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80169a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80169ac:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80169ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d108      	bne.n	80169c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80169b4:	f107 0320 	add.w	r3, r7, #32
 80169b8:	4618      	mov	r0, r3
 80169ba:	f7fe ffd9 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80169be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80169c2:	f001 bf5e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80169c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169c8:	2b40      	cmp	r3, #64	@ 0x40
 80169ca:	d108      	bne.n	80169de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80169cc:	f107 0314 	add.w	r3, r7, #20
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7ff f937 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80169da:	f001 bf52 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80169de:	2300      	movs	r3, #0
 80169e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80169e2:	f001 bf4e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80169e6:	4b11      	ldr	r3, [pc, #68]	@ (8016a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80169e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80169ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80169f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80169f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d108      	bne.n	8016a0a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80169f8:	f107 0320 	add.w	r3, r7, #32
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7fe ffb7 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016a06:	f001 bf3c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8016a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a0c:	2b80      	cmp	r3, #128	@ 0x80
 8016a0e:	d108      	bne.n	8016a22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a10:	f107 0314 	add.w	r3, r7, #20
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7ff f915 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8016a1a:	69fb      	ldr	r3, [r7, #28]
 8016a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016a1e:	f001 bf30 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8016a22:	2300      	movs	r3, #0
 8016a24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016a26:	f001 bf2c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016a2a:	bf00      	nop
 8016a2c:	44020c00 	.word	0x44020c00
 8016a30:	00bb8000 	.word	0x00bb8000
 8016a34:	03d09000 	.word	0x03d09000
 8016a38:	003d0900 	.word	0x003d0900
 8016a3c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8016a40:	4b9d      	ldr	r3, [pc, #628]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016a46:	f003 0307 	and.w	r3, r3, #7
 8016a4a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8016a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d104      	bne.n	8016a5c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8016a52:	f7fc ffd7 	bl	8013a04 <HAL_RCC_GetPCLK2Freq>
 8016a56:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8016a58:	f001 bf13 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8016a5c:	4b96      	ldr	r3, [pc, #600]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016a68:	d10a      	bne.n	8016a80 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8016a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a6c:	2b01      	cmp	r3, #1
 8016a6e:	d107      	bne.n	8016a80 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a70:	f107 0314 	add.w	r3, r7, #20
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7ff f8e5 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016a7e:	e043      	b.n	8016b08 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8016a80:	4b8d      	ldr	r3, [pc, #564]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016a8c:	d10a      	bne.n	8016aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8016a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a90:	2b02      	cmp	r3, #2
 8016a92:	d107      	bne.n	8016aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016a94:	f107 0308 	add.w	r3, r7, #8
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7ff fa3d 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016aa2:	e031      	b.n	8016b08 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8016aa4:	4b84      	ldr	r3, [pc, #528]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f003 0302 	and.w	r3, r3, #2
 8016aac:	2b02      	cmp	r3, #2
 8016aae:	d10c      	bne.n	8016aca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8016ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ab2:	2b03      	cmp	r3, #3
 8016ab4:	d109      	bne.n	8016aca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016ab6:	4b80      	ldr	r3, [pc, #512]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	08db      	lsrs	r3, r3, #3
 8016abc:	f003 0303 	and.w	r3, r3, #3
 8016ac0:	4a7e      	ldr	r2, [pc, #504]	@ (8016cbc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8016ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8016ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ac8:	e01e      	b.n	8016b08 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8016aca:	4b7b      	ldr	r3, [pc, #492]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ad6:	d105      	bne.n	8016ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8016ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ada:	2b04      	cmp	r3, #4
 8016adc:	d102      	bne.n	8016ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8016ade:	4b78      	ldr	r3, [pc, #480]	@ (8016cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8016ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ae2:	e011      	b.n	8016b08 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8016ae4:	4b74      	ldr	r3, [pc, #464]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016aea:	f003 0302 	and.w	r3, r3, #2
 8016aee:	2b02      	cmp	r3, #2
 8016af0:	d106      	bne.n	8016b00 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8016af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016af4:	2b05      	cmp	r3, #5
 8016af6:	d103      	bne.n	8016b00 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8016af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016afe:	e003      	b.n	8016b08 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8016b00:	2300      	movs	r3, #0
 8016b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016b04:	f001 bebd 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016b08:	f001 bebb 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8016b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016b16:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8016b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d104      	bne.n	8016b28 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016b1e:	f7fc ff5b 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8016b22:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8016b24:	f001 bead 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8016b28:	4b63      	ldr	r3, [pc, #396]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016b34:	d10a      	bne.n	8016b4c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8016b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b38:	2b08      	cmp	r3, #8
 8016b3a:	d107      	bne.n	8016b4c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016b3c:	f107 0314 	add.w	r3, r7, #20
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7ff f87f 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016b46:	69bb      	ldr	r3, [r7, #24]
 8016b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b4a:	e03d      	b.n	8016bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8016b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b4e:	2b10      	cmp	r3, #16
 8016b50:	d108      	bne.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016b52:	f107 0308 	add.w	r3, r7, #8
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7ff f9de 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016b60:	f001 be8f 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8016b64:	4b54      	ldr	r3, [pc, #336]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	f003 0302 	and.w	r3, r3, #2
 8016b6c:	2b02      	cmp	r3, #2
 8016b6e:	d10c      	bne.n	8016b8a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8016b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b72:	2b18      	cmp	r3, #24
 8016b74:	d109      	bne.n	8016b8a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016b76:	4b50      	ldr	r3, [pc, #320]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	08db      	lsrs	r3, r3, #3
 8016b7c:	f003 0303 	and.w	r3, r3, #3
 8016b80:	4a4e      	ldr	r2, [pc, #312]	@ (8016cbc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8016b82:	fa22 f303 	lsr.w	r3, r2, r3
 8016b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b88:	e01e      	b.n	8016bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8016b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b96:	d105      	bne.n	8016ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8016b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b9a:	2b20      	cmp	r3, #32
 8016b9c:	d102      	bne.n	8016ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8016b9e:	4b48      	ldr	r3, [pc, #288]	@ (8016cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8016ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ba2:	e011      	b.n	8016bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8016ba4:	4b44      	ldr	r3, [pc, #272]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016baa:	f003 0302 	and.w	r3, r3, #2
 8016bae:	2b02      	cmp	r3, #2
 8016bb0:	d106      	bne.n	8016bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8016bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bb4:	2b28      	cmp	r3, #40	@ 0x28
 8016bb6:	d103      	bne.n	8016bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8016bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016bbe:	e003      	b.n	8016bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016bc4:	f001 be5d 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016bc8:	f001 be5b 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8016bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016bce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016bd2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8016bd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8016bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d104      	bne.n	8016be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016bde:	f7fc fefb 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8016be2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8016be4:	f001 be4d 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8016be8:	4b33      	ldr	r3, [pc, #204]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016bf4:	d10a      	bne.n	8016c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8016bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bf8:	2b40      	cmp	r3, #64	@ 0x40
 8016bfa:	d107      	bne.n	8016c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016bfc:	f107 0314 	add.w	r3, r7, #20
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7ff f81f 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016c06:	69bb      	ldr	r3, [r7, #24]
 8016c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c0a:	e045      	b.n	8016c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8016c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016c18:	d10a      	bne.n	8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8016c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c1c:	2b80      	cmp	r3, #128	@ 0x80
 8016c1e:	d107      	bne.n	8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016c20:	f107 0308 	add.w	r3, r7, #8
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7ff f977 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c2e:	e033      	b.n	8016c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8016c30:	4b21      	ldr	r3, [pc, #132]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	f003 0302 	and.w	r3, r3, #2
 8016c38:	2b02      	cmp	r3, #2
 8016c3a:	d10c      	bne.n	8016c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8016c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8016c40:	d109      	bne.n	8016c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016c42:	4b1d      	ldr	r3, [pc, #116]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	08db      	lsrs	r3, r3, #3
 8016c48:	f003 0303 	and.w	r3, r3, #3
 8016c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8016cbc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8016c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8016c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c54:	e020      	b.n	8016c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8016c56:	4b18      	ldr	r3, [pc, #96]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c62:	d106      	bne.n	8016c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8016c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016c6a:	d102      	bne.n	8016c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8016c6c:	4b14      	ldr	r3, [pc, #80]	@ (8016cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8016c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c70:	e012      	b.n	8016c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8016c72:	4b11      	ldr	r3, [pc, #68]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016c78:	f003 0302 	and.w	r3, r3, #2
 8016c7c:	2b02      	cmp	r3, #2
 8016c7e:	d107      	bne.n	8016c90 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8016c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8016c86:	d103      	bne.n	8016c90 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8016c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c8e:	e003      	b.n	8016c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8016c90:	2300      	movs	r3, #0
 8016c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016c94:	f001 bdf5 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016c98:	f001 bdf3 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8016c9c:	4b06      	ldr	r3, [pc, #24]	@ (8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016ca2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8016ca6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8016ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d10a      	bne.n	8016cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016cae:	f7fc fe93 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8016cb2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8016cb4:	f001 bde5 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016cb8:	44020c00 	.word	0x44020c00
 8016cbc:	03d09000 	.word	0x03d09000
 8016cc0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8016cc4:	4ba0      	ldr	r3, [pc, #640]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016ccc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016cd0:	d10b      	bne.n	8016cea <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8016cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016cd8:	d107      	bne.n	8016cea <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016cda:	f107 0314 	add.w	r3, r7, #20
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fe ffb0 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016ce4:	69bb      	ldr	r3, [r7, #24]
 8016ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ce8:	e047      	b.n	8016d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8016cea:	4b97      	ldr	r3, [pc, #604]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016cf6:	d10b      	bne.n	8016d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8016cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016cfe:	d107      	bne.n	8016d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016d00:	f107 0308 	add.w	r3, r7, #8
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7ff f907 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d0e:	e034      	b.n	8016d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8016d10:	4b8d      	ldr	r3, [pc, #564]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	f003 0302 	and.w	r3, r3, #2
 8016d18:	2b02      	cmp	r3, #2
 8016d1a:	d10d      	bne.n	8016d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8016d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d1e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8016d22:	d109      	bne.n	8016d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016d24:	4b88      	ldr	r3, [pc, #544]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	08db      	lsrs	r3, r3, #3
 8016d2a:	f003 0303 	and.w	r3, r3, #3
 8016d2e:	4a87      	ldr	r2, [pc, #540]	@ (8016f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8016d30:	fa22 f303 	lsr.w	r3, r2, r3
 8016d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d36:	e020      	b.n	8016d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8016d38:	4b83      	ldr	r3, [pc, #524]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d44:	d106      	bne.n	8016d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8016d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016d4c:	d102      	bne.n	8016d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8016d4e:	4b80      	ldr	r3, [pc, #512]	@ (8016f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8016d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d52:	e012      	b.n	8016d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8016d54:	4b7c      	ldr	r3, [pc, #496]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016d5a:	f003 0302 	and.w	r3, r3, #2
 8016d5e:	2b02      	cmp	r3, #2
 8016d60:	d107      	bne.n	8016d72 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8016d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d64:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8016d68:	d103      	bne.n	8016d72 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8016d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d70:	e003      	b.n	8016d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8016d72:	2300      	movs	r3, #0
 8016d74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016d76:	f001 bd84 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016d7a:	f001 bd82 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8016d7e:	4b72      	ldr	r3, [pc, #456]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016d84:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8016d88:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8016d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d104      	bne.n	8016d9a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016d90:	f7fc fe22 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8016d94:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8016d96:	f001 bd74 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8016d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016da6:	d10b      	bne.n	8016dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8016da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016dae:	d107      	bne.n	8016dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016db0:	f107 0314 	add.w	r3, r7, #20
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7fe ff45 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016dbe:	e047      	b.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8016dc0:	4b61      	ldr	r3, [pc, #388]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016dcc:	d10b      	bne.n	8016de6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8016dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016dd4:	d107      	bne.n	8016de6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016dd6:	f107 0308 	add.w	r3, r7, #8
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7ff f89c 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8016de4:	e034      	b.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8016de6:	4b58      	ldr	r3, [pc, #352]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f003 0302 	and.w	r3, r3, #2
 8016dee:	2b02      	cmp	r3, #2
 8016df0:	d10d      	bne.n	8016e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8016df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016df8:	d109      	bne.n	8016e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016dfa:	4b53      	ldr	r3, [pc, #332]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	08db      	lsrs	r3, r3, #3
 8016e00:	f003 0303 	and.w	r3, r3, #3
 8016e04:	4a51      	ldr	r2, [pc, #324]	@ (8016f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8016e06:	fa22 f303 	lsr.w	r3, r2, r3
 8016e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e0c:	e020      	b.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8016e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e1a:	d106      	bne.n	8016e2a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8016e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016e22:	d102      	bne.n	8016e2a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8016e24:	4b4a      	ldr	r3, [pc, #296]	@ (8016f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8016e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e28:	e012      	b.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8016e2a:	4b47      	ldr	r3, [pc, #284]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016e30:	f003 0302 	and.w	r3, r3, #2
 8016e34:	2b02      	cmp	r3, #2
 8016e36:	d107      	bne.n	8016e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8016e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8016e3e:	d103      	bne.n	8016e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8016e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e46:	e003      	b.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016e4c:	f001 bd19 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016e50:	f001 bd17 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8016e54:	4b3c      	ldr	r3, [pc, #240]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016e5a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8016e5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8016e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d104      	bne.n	8016e70 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016e66:	f7fc fdb7 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8016e6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8016e6c:	f001 bd09 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8016e70:	4b35      	ldr	r3, [pc, #212]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016e7c:	d10b      	bne.n	8016e96 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8016e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016e84:	d107      	bne.n	8016e96 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016e86:	f107 0314 	add.w	r3, r7, #20
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7fe feda 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016e90:	69bb      	ldr	r3, [r7, #24]
 8016e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e94:	e047      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8016e96:	4b2c      	ldr	r3, [pc, #176]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016ea2:	d10b      	bne.n	8016ebc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8016ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016eaa:	d107      	bne.n	8016ebc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016eac:	f107 0308 	add.w	r3, r7, #8
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7ff f831 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8016eba:	e034      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8016ebc:	4b22      	ldr	r3, [pc, #136]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f003 0302 	and.w	r3, r3, #2
 8016ec4:	2b02      	cmp	r3, #2
 8016ec6:	d10d      	bne.n	8016ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8016ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8016ece:	d109      	bne.n	8016ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	08db      	lsrs	r3, r3, #3
 8016ed6:	f003 0303 	and.w	r3, r3, #3
 8016eda:	4a1c      	ldr	r2, [pc, #112]	@ (8016f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8016edc:	fa22 f303 	lsr.w	r3, r2, r3
 8016ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ee2:	e020      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8016ee4:	4b18      	ldr	r3, [pc, #96]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ef0:	d106      	bne.n	8016f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016ef8:	d102      	bne.n	8016f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8016efa:	4b15      	ldr	r3, [pc, #84]	@ (8016f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8016efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016efe:	e012      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8016f00:	4b11      	ldr	r3, [pc, #68]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016f06:	f003 0302 	and.w	r3, r3, #2
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d107      	bne.n	8016f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8016f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f10:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8016f14:	d103      	bne.n	8016f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8016f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f1c:	e003      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016f22:	f001 bcae 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016f26:	f001 bcac 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8016f2a:	4b07      	ldr	r3, [pc, #28]	@ (8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016f30:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8016f34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8016f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d10b      	bne.n	8016f54 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016f3c:	f7fc fd4c 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8016f40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8016f42:	f001 bc9e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016f46:	bf00      	nop
 8016f48:	44020c00 	.word	0x44020c00
 8016f4c:	03d09000 	.word	0x03d09000
 8016f50:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8016f54:	4ba0      	ldr	r3, [pc, #640]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016f60:	d10b      	bne.n	8016f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8016f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016f68:	d107      	bne.n	8016f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016f6a:	f107 0314 	add.w	r3, r7, #20
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fe fe68 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f78:	e047      	b.n	801700a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8016f7a:	4b97      	ldr	r3, [pc, #604]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016f86:	d10b      	bne.n	8016fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8016f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8016f8e:	d107      	bne.n	8016fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016f90:	f107 0308 	add.w	r3, r7, #8
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7fe ffbf 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f9e:	e034      	b.n	801700a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8016fa0:	4b8d      	ldr	r3, [pc, #564]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	f003 0302 	and.w	r3, r3, #2
 8016fa8:	2b02      	cmp	r3, #2
 8016faa:	d10d      	bne.n	8016fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8016fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8016fb2:	d109      	bne.n	8016fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016fb4:	4b88      	ldr	r3, [pc, #544]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	08db      	lsrs	r3, r3, #3
 8016fba:	f003 0303 	and.w	r3, r3, #3
 8016fbe:	4a87      	ldr	r2, [pc, #540]	@ (80171dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8016fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8016fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fc6:	e020      	b.n	801700a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8016fc8:	4b83      	ldr	r3, [pc, #524]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016fd4:	d106      	bne.n	8016fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8016fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016fdc:	d102      	bne.n	8016fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8016fde:	4b80      	ldr	r3, [pc, #512]	@ (80171e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8016fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fe2:	e012      	b.n	801700a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8016fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016fea:	f003 0302 	and.w	r3, r3, #2
 8016fee:	2b02      	cmp	r3, #2
 8016ff0:	d107      	bne.n	8017002 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8016ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ff4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8016ff8:	d103      	bne.n	8017002 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8016ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8017000:	e003      	b.n	801700a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8017002:	2300      	movs	r3, #0
 8017004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017006:	f001 bc3c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801700a:	f001 bc3a 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 801700e:	4b72      	ldr	r3, [pc, #456]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017014:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8017018:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 801701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801701c:	2b00      	cmp	r3, #0
 801701e:	d104      	bne.n	801702a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8017020:	f7fc fcda 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8017024:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8017026:	f001 bc2c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 801702a:	4b6b      	ldr	r3, [pc, #428]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017036:	d10b      	bne.n	8017050 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8017038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801703a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801703e:	d107      	bne.n	8017050 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017040:	f107 0314 	add.w	r3, r7, #20
 8017044:	4618      	mov	r0, r3
 8017046:	f7fe fdfd 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801704a:	69bb      	ldr	r3, [r7, #24]
 801704c:	637b      	str	r3, [r7, #52]	@ 0x34
 801704e:	e047      	b.n	80170e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8017050:	4b61      	ldr	r3, [pc, #388]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801705c:	d10b      	bne.n	8017076 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 801705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017064:	d107      	bne.n	8017076 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017066:	f107 0308 	add.w	r3, r7, #8
 801706a:	4618      	mov	r0, r3
 801706c:	f7fe ff54 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	637b      	str	r3, [r7, #52]	@ 0x34
 8017074:	e034      	b.n	80170e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8017076:	4b58      	ldr	r3, [pc, #352]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	f003 0302 	and.w	r3, r3, #2
 801707e:	2b02      	cmp	r3, #2
 8017080:	d10d      	bne.n	801709e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8017082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017084:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8017088:	d109      	bne.n	801709e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801708a:	4b53      	ldr	r3, [pc, #332]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	08db      	lsrs	r3, r3, #3
 8017090:	f003 0303 	and.w	r3, r3, #3
 8017094:	4a51      	ldr	r2, [pc, #324]	@ (80171dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8017096:	fa22 f303 	lsr.w	r3, r2, r3
 801709a:	637b      	str	r3, [r7, #52]	@ 0x34
 801709c:	e020      	b.n	80170e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 801709e:	4b4e      	ldr	r3, [pc, #312]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80170a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80170aa:	d106      	bne.n	80170ba <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80170ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80170b2:	d102      	bne.n	80170ba <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80170b4:	4b4a      	ldr	r3, [pc, #296]	@ (80171e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80170b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80170b8:	e012      	b.n	80170e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80170ba:	4b47      	ldr	r3, [pc, #284]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80170c0:	f003 0302 	and.w	r3, r3, #2
 80170c4:	2b02      	cmp	r3, #2
 80170c6:	d107      	bne.n	80170d8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80170c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80170ce:	d103      	bne.n	80170d8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80170d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80170d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80170d6:	e003      	b.n	80170e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80170d8:	2300      	movs	r3, #0
 80170da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80170dc:	f001 bbd1 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80170e0:	f001 bbcf 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80170e4:	4b3c      	ldr	r3, [pc, #240]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80170ea:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80170ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80170f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d104      	bne.n	8017100 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80170f6:	f7fc fc6f 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 80170fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80170fc:	f001 bbc1 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8017100:	4b35      	ldr	r3, [pc, #212]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017108:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801710c:	d10b      	bne.n	8017126 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 801710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017114:	d107      	bne.n	8017126 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017116:	f107 0314 	add.w	r3, r7, #20
 801711a:	4618      	mov	r0, r3
 801711c:	f7fe fd92 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017120:	69bb      	ldr	r3, [r7, #24]
 8017122:	637b      	str	r3, [r7, #52]	@ 0x34
 8017124:	e047      	b.n	80171b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8017126:	4b2c      	ldr	r3, [pc, #176]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801712e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017132:	d10b      	bne.n	801714c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8017134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801713a:	d107      	bne.n	801714c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801713c:	f107 0308 	add.w	r3, r7, #8
 8017140:	4618      	mov	r0, r3
 8017142:	f7fe fee9 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	637b      	str	r3, [r7, #52]	@ 0x34
 801714a:	e034      	b.n	80171b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 801714c:	4b22      	ldr	r3, [pc, #136]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	f003 0302 	and.w	r3, r3, #2
 8017154:	2b02      	cmp	r3, #2
 8017156:	d10d      	bne.n	8017174 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8017158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801715a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801715e:	d109      	bne.n	8017174 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017160:	4b1d      	ldr	r3, [pc, #116]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	08db      	lsrs	r3, r3, #3
 8017166:	f003 0303 	and.w	r3, r3, #3
 801716a:	4a1c      	ldr	r2, [pc, #112]	@ (80171dc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 801716c:	fa22 f303 	lsr.w	r3, r2, r3
 8017170:	637b      	str	r3, [r7, #52]	@ 0x34
 8017172:	e020      	b.n	80171b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8017174:	4b18      	ldr	r3, [pc, #96]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801717c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017180:	d106      	bne.n	8017190 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8017182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017188:	d102      	bne.n	8017190 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 801718a:	4b15      	ldr	r3, [pc, #84]	@ (80171e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 801718c:	637b      	str	r3, [r7, #52]	@ 0x34
 801718e:	e012      	b.n	80171b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8017190:	4b11      	ldr	r3, [pc, #68]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017196:	f003 0302 	and.w	r3, r3, #2
 801719a:	2b02      	cmp	r3, #2
 801719c:	d107      	bne.n	80171ae <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 801719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80171a4:	d103      	bne.n	80171ae <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80171a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80171aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80171ac:	e003      	b.n	80171b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80171ae:	2300      	movs	r3, #0
 80171b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80171b2:	f001 bb66 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80171b6:	f001 bb64 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80171ba:	4b07      	ldr	r3, [pc, #28]	@ (80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80171bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80171c0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80171c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80171c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d10b      	bne.n	80171e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80171cc:	f7fc fc04 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 80171d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80171d2:	f001 bb56 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80171d6:	bf00      	nop
 80171d8:	44020c00 	.word	0x44020c00
 80171dc:	03d09000 	.word	0x03d09000
 80171e0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80171e4:	4ba1      	ldr	r3, [pc, #644]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80171ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80171f0:	d10b      	bne.n	801720a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80171f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80171f8:	d107      	bne.n	801720a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80171fa:	f107 0314 	add.w	r3, r7, #20
 80171fe:	4618      	mov	r0, r3
 8017200:	f7fe fd20 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017204:	69bb      	ldr	r3, [r7, #24]
 8017206:	637b      	str	r3, [r7, #52]	@ 0x34
 8017208:	e047      	b.n	801729a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 801720a:	4b98      	ldr	r3, [pc, #608]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017216:	d10b      	bne.n	8017230 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8017218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801721a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801721e:	d107      	bne.n	8017230 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017220:	f107 0308 	add.w	r3, r7, #8
 8017224:	4618      	mov	r0, r3
 8017226:	f7fe fe77 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	637b      	str	r3, [r7, #52]	@ 0x34
 801722e:	e034      	b.n	801729a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8017230:	4b8e      	ldr	r3, [pc, #568]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f003 0302 	and.w	r3, r3, #2
 8017238:	2b02      	cmp	r3, #2
 801723a:	d10d      	bne.n	8017258 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 801723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801723e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8017242:	d109      	bne.n	8017258 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017244:	4b89      	ldr	r3, [pc, #548]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	08db      	lsrs	r3, r3, #3
 801724a:	f003 0303 	and.w	r3, r3, #3
 801724e:	4a88      	ldr	r2, [pc, #544]	@ (8017470 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8017250:	fa22 f303 	lsr.w	r3, r2, r3
 8017254:	637b      	str	r3, [r7, #52]	@ 0x34
 8017256:	e020      	b.n	801729a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8017258:	4b84      	ldr	r3, [pc, #528]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017264:	d106      	bne.n	8017274 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8017266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801726c:	d102      	bne.n	8017274 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 801726e:	4b81      	ldr	r3, [pc, #516]	@ (8017474 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8017270:	637b      	str	r3, [r7, #52]	@ 0x34
 8017272:	e012      	b.n	801729a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8017274:	4b7d      	ldr	r3, [pc, #500]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801727a:	f003 0302 	and.w	r3, r3, #2
 801727e:	2b02      	cmp	r3, #2
 8017280:	d107      	bne.n	8017292 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8017282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017284:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8017288:	d103      	bne.n	8017292 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 801728a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801728e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017290:	e003      	b.n	801729a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8017292:	2300      	movs	r3, #0
 8017294:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017296:	f001 baf4 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801729a:	f001 baf2 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 801729e:	4b73      	ldr	r3, [pc, #460]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80172a4:	f003 0307 	and.w	r3, r3, #7
 80172a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80172aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d104      	bne.n	80172ba <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80172b0:	f7fc fb92 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 80172b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80172b6:	f001 bae4 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80172ba:	4b6c      	ldr	r3, [pc, #432]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80172c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80172c6:	d10a      	bne.n	80172de <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80172c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ca:	2b01      	cmp	r3, #1
 80172cc:	d107      	bne.n	80172de <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80172ce:	f107 0314 	add.w	r3, r7, #20
 80172d2:	4618      	mov	r0, r3
 80172d4:	f7fe fcb6 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	637b      	str	r3, [r7, #52]	@ 0x34
 80172dc:	e043      	b.n	8017366 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80172de:	4b63      	ldr	r3, [pc, #396]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80172e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80172ea:	d10a      	bne.n	8017302 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80172ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ee:	2b02      	cmp	r3, #2
 80172f0:	d107      	bne.n	8017302 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80172f2:	f107 0308 	add.w	r3, r7, #8
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7fe fe0e 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8017300:	e031      	b.n	8017366 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8017302:	4b5a      	ldr	r3, [pc, #360]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f003 0302 	and.w	r3, r3, #2
 801730a:	2b02      	cmp	r3, #2
 801730c:	d10c      	bne.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 801730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017310:	2b03      	cmp	r3, #3
 8017312:	d109      	bne.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017314:	4b55      	ldr	r3, [pc, #340]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	08db      	lsrs	r3, r3, #3
 801731a:	f003 0303 	and.w	r3, r3, #3
 801731e:	4a54      	ldr	r2, [pc, #336]	@ (8017470 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8017320:	fa22 f303 	lsr.w	r3, r2, r3
 8017324:	637b      	str	r3, [r7, #52]	@ 0x34
 8017326:	e01e      	b.n	8017366 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8017328:	4b50      	ldr	r3, [pc, #320]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017334:	d105      	bne.n	8017342 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8017336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017338:	2b04      	cmp	r3, #4
 801733a:	d102      	bne.n	8017342 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 801733c:	4b4d      	ldr	r3, [pc, #308]	@ (8017474 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 801733e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017340:	e011      	b.n	8017366 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8017342:	4b4a      	ldr	r3, [pc, #296]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017348:	f003 0302 	and.w	r3, r3, #2
 801734c:	2b02      	cmp	r3, #2
 801734e:	d106      	bne.n	801735e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8017350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017352:	2b05      	cmp	r3, #5
 8017354:	d103      	bne.n	801735e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8017356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801735a:	637b      	str	r3, [r7, #52]	@ 0x34
 801735c:	e003      	b.n	8017366 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 801735e:	2300      	movs	r3, #0
 8017360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017362:	f001 ba8e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017366:	f001 ba8c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 801736a:	4b40      	ldr	r3, [pc, #256]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801736c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8017374:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8017376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017378:	2b00      	cmp	r3, #0
 801737a:	d104      	bne.n	8017386 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801737c:	f7fc fb2c 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8017380:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8017382:	f001 ba7e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8017386:	4b39      	ldr	r3, [pc, #228]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801738e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017392:	d10a      	bne.n	80173aa <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8017394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017396:	2b10      	cmp	r3, #16
 8017398:	d107      	bne.n	80173aa <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801739a:	f107 0314 	add.w	r3, r7, #20
 801739e:	4618      	mov	r0, r3
 80173a0:	f7fe fc50 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80173a4:	69bb      	ldr	r3, [r7, #24]
 80173a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80173a8:	e043      	b.n	8017432 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80173aa:	4b30      	ldr	r3, [pc, #192]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80173b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80173b6:	d10a      	bne.n	80173ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80173b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ba:	2b20      	cmp	r3, #32
 80173bc:	d107      	bne.n	80173ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80173be:	f107 0308 	add.w	r3, r7, #8
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7fe fda8 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80173cc:	e031      	b.n	8017432 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80173ce:	4b27      	ldr	r3, [pc, #156]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f003 0302 	and.w	r3, r3, #2
 80173d6:	2b02      	cmp	r3, #2
 80173d8:	d10c      	bne.n	80173f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80173da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173dc:	2b30      	cmp	r3, #48	@ 0x30
 80173de:	d109      	bne.n	80173f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80173e0:	4b22      	ldr	r3, [pc, #136]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	08db      	lsrs	r3, r3, #3
 80173e6:	f003 0303 	and.w	r3, r3, #3
 80173ea:	4a21      	ldr	r2, [pc, #132]	@ (8017470 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80173ec:	fa22 f303 	lsr.w	r3, r2, r3
 80173f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80173f2:	e01e      	b.n	8017432 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80173f4:	4b1d      	ldr	r3, [pc, #116]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80173fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017400:	d105      	bne.n	801740e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8017402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017404:	2b40      	cmp	r3, #64	@ 0x40
 8017406:	d102      	bne.n	801740e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8017408:	4b1a      	ldr	r3, [pc, #104]	@ (8017474 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 801740a:	637b      	str	r3, [r7, #52]	@ 0x34
 801740c:	e011      	b.n	8017432 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 801740e:	4b17      	ldr	r3, [pc, #92]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017414:	f003 0302 	and.w	r3, r3, #2
 8017418:	2b02      	cmp	r3, #2
 801741a:	d106      	bne.n	801742a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 801741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801741e:	2b50      	cmp	r3, #80	@ 0x50
 8017420:	d103      	bne.n	801742a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8017422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017426:	637b      	str	r3, [r7, #52]	@ 0x34
 8017428:	e003      	b.n	8017432 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 801742a:	2300      	movs	r3, #0
 801742c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801742e:	f001 ba28 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017432:	f001 ba26 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8017436:	4b0d      	ldr	r3, [pc, #52]	@ (801746c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801743c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8017440:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8017442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017444:	2b00      	cmp	r3, #0
 8017446:	d104      	bne.n	8017452 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8017448:	f7fc faf2 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 801744c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 801744e:	f001 ba18 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8017452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017458:	d10e      	bne.n	8017478 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801745a:	f107 0314 	add.w	r3, r7, #20
 801745e:	4618      	mov	r0, r3
 8017460:	f7fe fbf0 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017464:	69bb      	ldr	r3, [r7, #24]
 8017466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017468:	f001 ba0b 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801746c:	44020c00 	.word	0x44020c00
 8017470:	03d09000 	.word	0x03d09000
 8017474:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8017478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801747a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801747e:	d108      	bne.n	8017492 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017480:	f107 0308 	add.w	r3, r7, #8
 8017484:	4618      	mov	r0, r3
 8017486:	f7fe fd47 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801748e:	f001 b9f8 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8017492:	4ba4      	ldr	r3, [pc, #656]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	f003 0302 	and.w	r3, r3, #2
 801749a:	2b02      	cmp	r3, #2
 801749c:	d10d      	bne.n	80174ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 801749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80174a4:	d109      	bne.n	80174ba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80174a6:	4b9f      	ldr	r3, [pc, #636]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	08db      	lsrs	r3, r3, #3
 80174ac:	f003 0303 	and.w	r3, r3, #3
 80174b0:	4a9d      	ldr	r2, [pc, #628]	@ (8017728 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80174b2:	fa22 f303 	lsr.w	r3, r2, r3
 80174b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80174b8:	e020      	b.n	80174fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80174ba:	4b9a      	ldr	r3, [pc, #616]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80174c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174c6:	d106      	bne.n	80174d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80174c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80174ce:	d102      	bne.n	80174d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80174d0:	4b96      	ldr	r3, [pc, #600]	@ (801772c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80174d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80174d4:	e012      	b.n	80174fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80174d6:	4b93      	ldr	r3, [pc, #588]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80174d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80174dc:	f003 0302 	and.w	r3, r3, #2
 80174e0:	2b02      	cmp	r3, #2
 80174e2:	d107      	bne.n	80174f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80174e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80174ea:	d103      	bne.n	80174f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80174ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80174f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80174f2:	e003      	b.n	80174fc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80174f4:	2300      	movs	r3, #0
 80174f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80174f8:	f001 b9c3 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80174fc:	f001 b9c1 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8017500:	4b88      	ldr	r3, [pc, #544]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017506:	f003 0307 	and.w	r3, r3, #7
 801750a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 801750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801750e:	2b00      	cmp	r3, #0
 8017510:	d104      	bne.n	801751c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8017512:	f7fc fa45 	bl	80139a0 <HAL_RCC_GetHCLKFreq>
 8017516:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8017518:	f001 b9b3 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 801751c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801751e:	2b01      	cmp	r3, #1
 8017520:	d104      	bne.n	801752c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8017522:	f7fc f911 	bl	8013748 <HAL_RCC_GetSysClockFreq>
 8017526:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8017528:	f001 b9ab 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 801752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801752e:	2b02      	cmp	r3, #2
 8017530:	d108      	bne.n	8017544 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017532:	f107 0314 	add.w	r3, r7, #20
 8017536:	4618      	mov	r0, r3
 8017538:	f7fe fb84 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801753c:	69fb      	ldr	r3, [r7, #28]
 801753e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017540:	f001 b99f 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8017544:	4b77      	ldr	r3, [pc, #476]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801754c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017550:	d105      	bne.n	801755e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8017552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017554:	2b03      	cmp	r3, #3
 8017556:	d102      	bne.n	801755e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8017558:	4b75      	ldr	r3, [pc, #468]	@ (8017730 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 801755a:	637b      	str	r3, [r7, #52]	@ 0x34
 801755c:	e023      	b.n	80175a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 801755e:	4b71      	ldr	r3, [pc, #452]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	f003 0302 	and.w	r3, r3, #2
 8017566:	2b02      	cmp	r3, #2
 8017568:	d10c      	bne.n	8017584 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 801756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801756c:	2b04      	cmp	r3, #4
 801756e:	d109      	bne.n	8017584 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017570:	4b6c      	ldr	r3, [pc, #432]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	08db      	lsrs	r3, r3, #3
 8017576:	f003 0303 	and.w	r3, r3, #3
 801757a:	4a6b      	ldr	r2, [pc, #428]	@ (8017728 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 801757c:	fa22 f303 	lsr.w	r3, r2, r3
 8017580:	637b      	str	r3, [r7, #52]	@ 0x34
 8017582:	e010      	b.n	80175a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8017584:	4b67      	ldr	r3, [pc, #412]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801758c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017590:	d105      	bne.n	801759e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8017592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017594:	2b05      	cmp	r3, #5
 8017596:	d102      	bne.n	801759e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8017598:	4b64      	ldr	r3, [pc, #400]	@ (801772c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 801759a:	637b      	str	r3, [r7, #52]	@ 0x34
 801759c:	e003      	b.n	80175a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 801759e:	2300      	movs	r3, #0
 80175a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80175a2:	f001 b96e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80175a6:	f001 b96c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80175aa:	4b5e      	ldr	r3, [pc, #376]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80175b0:	f003 0308 	and.w	r3, r3, #8
 80175b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80175b6:	4b5b      	ldr	r3, [pc, #364]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80175bc:	f003 0302 	and.w	r3, r3, #2
 80175c0:	2b02      	cmp	r3, #2
 80175c2:	d106      	bne.n	80175d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80175c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d103      	bne.n	80175d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80175ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80175ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80175d0:	e012      	b.n	80175f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80175d2:	4b54      	ldr	r3, [pc, #336]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80175d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80175dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80175e0:	d106      	bne.n	80175f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80175e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175e4:	2b08      	cmp	r3, #8
 80175e6:	d103      	bne.n	80175f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80175e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80175ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80175ee:	e003      	b.n	80175f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80175f0:	2300      	movs	r3, #0
 80175f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80175f4:	f001 b945 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80175f8:	f001 b943 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80175fc:	4b49      	ldr	r3, [pc, #292]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017606:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8017608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801760a:	2b00      	cmp	r3, #0
 801760c:	d104      	bne.n	8017618 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801760e:	f7fc f9e3 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8017612:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8017614:	f001 b935 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8017618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801761a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801761e:	d108      	bne.n	8017632 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017620:	f107 0308 	add.w	r3, r7, #8
 8017624:	4618      	mov	r0, r3
 8017626:	f7fe fc77 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801762a:	693b      	ldr	r3, [r7, #16]
 801762c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801762e:	f001 b928 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8017632:	4b3c      	ldr	r3, [pc, #240]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	f003 0302 	and.w	r3, r3, #2
 801763a:	2b02      	cmp	r3, #2
 801763c:	d10d      	bne.n	801765a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 801763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017644:	d109      	bne.n	801765a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017646:	4b37      	ldr	r3, [pc, #220]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	08db      	lsrs	r3, r3, #3
 801764c:	f003 0303 	and.w	r3, r3, #3
 8017650:	4a35      	ldr	r2, [pc, #212]	@ (8017728 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8017652:	fa22 f303 	lsr.w	r3, r2, r3
 8017656:	637b      	str	r3, [r7, #52]	@ 0x34
 8017658:	e011      	b.n	801767e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 801765a:	4b32      	ldr	r3, [pc, #200]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017666:	d106      	bne.n	8017676 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8017668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801766a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801766e:	d102      	bne.n	8017676 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8017670:	4b2e      	ldr	r3, [pc, #184]	@ (801772c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8017672:	637b      	str	r3, [r7, #52]	@ 0x34
 8017674:	e003      	b.n	801767e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8017676:	2300      	movs	r3, #0
 8017678:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801767a:	f001 b902 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801767e:	f001 b900 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8017682:	4b28      	ldr	r3, [pc, #160]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017684:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017688:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 801768c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 801768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017690:	2b00      	cmp	r3, #0
 8017692:	d104      	bne.n	801769e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8017694:	f7fc f9a0 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8017698:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 801769a:	f001 b8f2 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 801769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80176a4:	d108      	bne.n	80176b8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80176a6:	f107 0308 	add.w	r3, r7, #8
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7fe fc34 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80176b4:	f001 b8e5 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80176b8:	4b1a      	ldr	r3, [pc, #104]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	f003 0302 	and.w	r3, r3, #2
 80176c0:	2b02      	cmp	r3, #2
 80176c2:	d10d      	bne.n	80176e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80176c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80176ca:	d109      	bne.n	80176e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80176cc:	4b15      	ldr	r3, [pc, #84]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	08db      	lsrs	r3, r3, #3
 80176d2:	f003 0303 	and.w	r3, r3, #3
 80176d6:	4a14      	ldr	r2, [pc, #80]	@ (8017728 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80176d8:	fa22 f303 	lsr.w	r3, r2, r3
 80176dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80176de:	e011      	b.n	8017704 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80176e0:	4b10      	ldr	r3, [pc, #64]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80176e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176ec:	d106      	bne.n	80176fc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80176ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80176f4:	d102      	bne.n	80176fc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80176f6:	4b0d      	ldr	r3, [pc, #52]	@ (801772c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80176f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80176fa:	e003      	b.n	8017704 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80176fc:	2300      	movs	r3, #0
 80176fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017700:	f001 b8bf 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017704:	f001 b8bd 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8017708:	4b06      	ldr	r3, [pc, #24]	@ (8017724 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801770a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801770e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8017712:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8017714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017716:	2b00      	cmp	r3, #0
 8017718:	d10c      	bne.n	8017734 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801771a:	f7fc f989 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 801771e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8017720:	f001 b8af 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017724:	44020c00 	.word	0x44020c00
 8017728:	03d09000 	.word	0x03d09000
 801772c:	003d0900 	.word	0x003d0900
 8017730:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8017734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801773a:	d108      	bne.n	801774e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801773c:	f107 0308 	add.w	r3, r7, #8
 8017740:	4618      	mov	r0, r3
 8017742:	f7fe fbe9 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801774a:	f001 b89a 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 801774e:	4b9f      	ldr	r3, [pc, #636]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	f003 0302 	and.w	r3, r3, #2
 8017756:	2b02      	cmp	r3, #2
 8017758:	d10d      	bne.n	8017776 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 801775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801775c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017760:	d109      	bne.n	8017776 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017762:	4b9a      	ldr	r3, [pc, #616]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	08db      	lsrs	r3, r3, #3
 8017768:	f003 0303 	and.w	r3, r3, #3
 801776c:	4a98      	ldr	r2, [pc, #608]	@ (80179d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 801776e:	fa22 f303 	lsr.w	r3, r2, r3
 8017772:	637b      	str	r3, [r7, #52]	@ 0x34
 8017774:	e011      	b.n	801779a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8017776:	4b95      	ldr	r3, [pc, #596]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801777e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017782:	d106      	bne.n	8017792 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8017784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017786:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801778a:	d102      	bne.n	8017792 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 801778c:	4b91      	ldr	r3, [pc, #580]	@ (80179d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 801778e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017790:	e003      	b.n	801779a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8017792:	2300      	movs	r3, #0
 8017794:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017796:	f001 b874 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801779a:	f001 b872 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 801779e:	4b8b      	ldr	r3, [pc, #556]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80177a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80177a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80177aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d104      	bne.n	80177ba <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80177b0:	f7fc f93e 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 80177b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80177b6:	f001 b864 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80177ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80177c0:	d108      	bne.n	80177d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80177c2:	f107 0308 	add.w	r3, r7, #8
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7fe fba6 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80177cc:	693b      	ldr	r3, [r7, #16]
 80177ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80177d0:	f001 b857 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80177d4:	4b7d      	ldr	r3, [pc, #500]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f003 0302 	and.w	r3, r3, #2
 80177dc:	2b02      	cmp	r3, #2
 80177de:	d10d      	bne.n	80177fc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80177e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80177e6:	d109      	bne.n	80177fc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80177e8:	4b78      	ldr	r3, [pc, #480]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	08db      	lsrs	r3, r3, #3
 80177ee:	f003 0303 	and.w	r3, r3, #3
 80177f2:	4a77      	ldr	r2, [pc, #476]	@ (80179d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80177f4:	fa22 f303 	lsr.w	r3, r2, r3
 80177f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80177fa:	e011      	b.n	8017820 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80177fc:	4b73      	ldr	r3, [pc, #460]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017808:	d106      	bne.n	8017818 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 801780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801780c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8017810:	d102      	bne.n	8017818 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8017812:	4b70      	ldr	r3, [pc, #448]	@ (80179d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8017814:	637b      	str	r3, [r7, #52]	@ 0x34
 8017816:	e003      	b.n	8017820 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8017818:	2300      	movs	r3, #0
 801781a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801781c:	f001 b831 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017820:	f001 b82f 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8017824:	4b69      	ldr	r3, [pc, #420]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017826:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801782a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 801782e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8017830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017832:	2b00      	cmp	r3, #0
 8017834:	d104      	bne.n	8017840 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8017836:	f7fc f8cf 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 801783a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 801783c:	f001 b821 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8017840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017846:	d108      	bne.n	801785a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017848:	f107 0308 	add.w	r3, r7, #8
 801784c:	4618      	mov	r0, r3
 801784e:	f7fe fb63 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8017852:	693b      	ldr	r3, [r7, #16]
 8017854:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017856:	f001 b814 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 801785a:	4b5c      	ldr	r3, [pc, #368]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	f003 0302 	and.w	r3, r3, #2
 8017862:	2b02      	cmp	r3, #2
 8017864:	d10e      	bne.n	8017884 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8017866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801786c:	d10a      	bne.n	8017884 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801786e:	4b57      	ldr	r3, [pc, #348]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	08db      	lsrs	r3, r3, #3
 8017874:	f003 0303 	and.w	r3, r3, #3
 8017878:	4a55      	ldr	r2, [pc, #340]	@ (80179d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 801787a:	fa22 f303 	lsr.w	r3, r2, r3
 801787e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017880:	f000 bfff 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8017884:	2300      	movs	r3, #0
 8017886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017888:	f000 bffb 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801788c:	4b4f      	ldr	r3, [pc, #316]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801788e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017892:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017896:	633b      	str	r3, [r7, #48]	@ 0x30
 8017898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801789a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801789e:	d056      	beq.n	801794e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80178a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80178a6:	f200 808b 	bhi.w	80179c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80178aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80178b0:	d03e      	beq.n	8017930 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80178b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80178b8:	f200 8082 	bhi.w	80179c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80178bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80178c2:	d027      	beq.n	8017914 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80178c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80178ca:	d879      	bhi.n	80179c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80178cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178d2:	d017      	beq.n	8017904 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80178d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178da:	d871      	bhi.n	80179c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80178dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d004      	beq.n	80178ec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80178e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80178e8:	d004      	beq.n	80178f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80178ea:	e069      	b.n	80179c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80178ec:	f7fc f8a0 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 80178f0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80178f2:	e068      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80178f4:	f107 0314 	add.w	r3, r7, #20
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7fe f9a3 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017902:	e060      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017904:	f107 0308 	add.w	r3, r7, #8
 8017908:	4618      	mov	r0, r3
 801790a:	f7fe fb05 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017912:	e058      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017914:	4b2d      	ldr	r3, [pc, #180]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801791a:	f003 0302 	and.w	r3, r3, #2
 801791e:	2b02      	cmp	r3, #2
 8017920:	d103      	bne.n	801792a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8017922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017926:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017928:	e04d      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801792a:	2300      	movs	r3, #0
 801792c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801792e:	e04a      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017930:	4b26      	ldr	r3, [pc, #152]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801793a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801793e:	d103      	bne.n	8017948 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8017940:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017944:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017946:	e03e      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8017948:	2300      	movs	r3, #0
 801794a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801794c:	e03b      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801794e:	4b1f      	ldr	r3, [pc, #124]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017954:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017958:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801795a:	4b1c      	ldr	r3, [pc, #112]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	f003 0302 	and.w	r3, r3, #2
 8017962:	2b02      	cmp	r3, #2
 8017964:	d10c      	bne.n	8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8017966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017968:	2b00      	cmp	r3, #0
 801796a:	d109      	bne.n	8017980 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801796c:	4b17      	ldr	r3, [pc, #92]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	08db      	lsrs	r3, r3, #3
 8017972:	f003 0303 	and.w	r3, r3, #3
 8017976:	4a16      	ldr	r2, [pc, #88]	@ (80179d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8017978:	fa22 f303 	lsr.w	r3, r2, r3
 801797c:	637b      	str	r3, [r7, #52]	@ 0x34
 801797e:	e01e      	b.n	80179be <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017980:	4b12      	ldr	r3, [pc, #72]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801798c:	d106      	bne.n	801799c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 801798e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017994:	d102      	bne.n	801799c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017996:	4b0f      	ldr	r3, [pc, #60]	@ (80179d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8017998:	637b      	str	r3, [r7, #52]	@ 0x34
 801799a:	e010      	b.n	80179be <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801799c:	4b0b      	ldr	r3, [pc, #44]	@ (80179cc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80179a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80179a8:	d106      	bne.n	80179b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80179aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80179b0:	d102      	bne.n	80179b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80179b2:	4b09      	ldr	r3, [pc, #36]	@ (80179d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80179b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80179b6:	e002      	b.n	80179be <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80179b8:	2300      	movs	r3, #0
 80179ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80179bc:	e003      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80179be:	e002      	b.n	80179c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80179c0:	2300      	movs	r3, #0
 80179c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80179c4:	bf00      	nop
          }
        }
        break;
 80179c6:	f000 bf5c 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80179ca:	bf00      	nop
 80179cc:	44020c00 	.word	0x44020c00
 80179d0:	03d09000 	.word	0x03d09000
 80179d4:	003d0900 	.word	0x003d0900
 80179d8:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80179dc:	4b9e      	ldr	r3, [pc, #632]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80179de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80179e2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80179e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80179e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80179ee:	d056      	beq.n	8017a9e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80179f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80179f6:	f200 808b 	bhi.w	8017b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80179fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017a00:	d03e      	beq.n	8017a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8017a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017a08:	f200 8082 	bhi.w	8017b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8017a12:	d027      	beq.n	8017a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8017a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8017a1a:	d879      	bhi.n	8017b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017a22:	d017      	beq.n	8017a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8017a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017a2a:	d871      	bhi.n	8017b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d004      	beq.n	8017a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8017a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017a38:	d004      	beq.n	8017a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8017a3a:	e069      	b.n	8017b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8017a3c:	f7fb ffcc 	bl	80139d8 <HAL_RCC_GetPCLK1Freq>
 8017a40:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017a42:	e068      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017a44:	f107 0314 	add.w	r3, r7, #20
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7fe f8fb 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017a52:	e060      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017a54:	f107 0308 	add.w	r3, r7, #8
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7fe fa5d 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017a5e:	693b      	ldr	r3, [r7, #16]
 8017a60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017a62:	e058      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017a64:	4b7c      	ldr	r3, [pc, #496]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017a6a:	f003 0302 	and.w	r3, r3, #2
 8017a6e:	2b02      	cmp	r3, #2
 8017a70:	d103      	bne.n	8017a7a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8017a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017a76:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017a78:	e04d      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017a7e:	e04a      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017a80:	4b75      	ldr	r3, [pc, #468]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017a8e:	d103      	bne.n	8017a98 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8017a90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017a94:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017a96:	e03e      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017a9c:	e03b      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017aa4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017aaa:	4b6b      	ldr	r3, [pc, #428]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	f003 0302 	and.w	r3, r3, #2
 8017ab2:	2b02      	cmp	r3, #2
 8017ab4:	d10c      	bne.n	8017ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8017ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d109      	bne.n	8017ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017abc:	4b66      	ldr	r3, [pc, #408]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	08db      	lsrs	r3, r3, #3
 8017ac2:	f003 0303 	and.w	r3, r3, #3
 8017ac6:	4a65      	ldr	r2, [pc, #404]	@ (8017c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8017ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8017acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ace:	e01e      	b.n	8017b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017ad0:	4b61      	ldr	r3, [pc, #388]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017adc:	d106      	bne.n	8017aec <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8017ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017ae4:	d102      	bne.n	8017aec <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8017c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8017ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8017aea:	e010      	b.n	8017b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017aec:	4b5a      	ldr	r3, [pc, #360]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017af8:	d106      	bne.n	8017b08 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8017afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017b00:	d102      	bne.n	8017b08 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017b02:	4b58      	ldr	r3, [pc, #352]	@ (8017c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8017b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b06:	e002      	b.n	8017b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017b0c:	e003      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8017b0e:	e002      	b.n	8017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8017b10:	2300      	movs	r3, #0
 8017b12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017b14:	bf00      	nop
          }
        }
        break;
 8017b16:	f000 beb4 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8017b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017b1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017b20:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8017b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8017b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017b2c:	d056      	beq.n	8017bdc <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8017b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017b34:	f200 808b 	bhi.w	8017c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017b3e:	d03e      	beq.n	8017bbe <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8017b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017b46:	f200 8082 	bhi.w	8017c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017b50:	d027      	beq.n	8017ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8017b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017b58:	d879      	bhi.n	8017c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017b60:	d017      	beq.n	8017b92 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8017b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017b68:	d871      	bhi.n	8017c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d004      	beq.n	8017b7a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8017b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017b76:	d004      	beq.n	8017b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8017b78:	e069      	b.n	8017c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017b7a:	f7fb ff59 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 8017b7e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017b80:	e068      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017b82:	f107 0314 	add.w	r3, r7, #20
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7fe f85c 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017b90:	e060      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017b92:	f107 0308 	add.w	r3, r7, #8
 8017b96:	4618      	mov	r0, r3
 8017b98:	f7fe f9be 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017b9c:	693b      	ldr	r3, [r7, #16]
 8017b9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017ba0:	e058      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017ba8:	f003 0302 	and.w	r3, r3, #2
 8017bac:	2b02      	cmp	r3, #2
 8017bae:	d103      	bne.n	8017bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8017bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017bb4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017bb6:	e04d      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8017bb8:	2300      	movs	r3, #0
 8017bba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017bbc:	e04a      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017bbe:	4b26      	ldr	r3, [pc, #152]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017bcc:	d103      	bne.n	8017bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8017bce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017bd2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017bd4:	e03e      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017bda:	e03b      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017be2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017be6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017be8:	4b1b      	ldr	r3, [pc, #108]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	f003 0302 	and.w	r3, r3, #2
 8017bf0:	2b02      	cmp	r3, #2
 8017bf2:	d10c      	bne.n	8017c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8017bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d109      	bne.n	8017c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017bfa:	4b17      	ldr	r3, [pc, #92]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	08db      	lsrs	r3, r3, #3
 8017c00:	f003 0303 	and.w	r3, r3, #3
 8017c04:	4a15      	ldr	r2, [pc, #84]	@ (8017c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8017c06:	fa22 f303 	lsr.w	r3, r2, r3
 8017c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017c0c:	e01e      	b.n	8017c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017c0e:	4b12      	ldr	r3, [pc, #72]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c1a:	d106      	bne.n	8017c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8017c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c22:	d102      	bne.n	8017c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017c24:	4b0e      	ldr	r3, [pc, #56]	@ (8017c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8017c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8017c28:	e010      	b.n	8017c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8017c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017c36:	d106      	bne.n	8017c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8017c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017c3e:	d102      	bne.n	8017c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017c40:	4b08      	ldr	r3, [pc, #32]	@ (8017c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8017c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8017c44:	e002      	b.n	8017c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017c46:	2300      	movs	r3, #0
 8017c48:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017c4a:	e003      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8017c4c:	e002      	b.n	8017c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017c52:	bf00      	nop
          }
        }
        break;
 8017c54:	f000 be15 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017c58:	44020c00 	.word	0x44020c00
 8017c5c:	03d09000 	.word	0x03d09000
 8017c60:	003d0900 	.word	0x003d0900
 8017c64:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8017c68:	4b9e      	ldr	r3, [pc, #632]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017c6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017c6e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8017c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8017c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c76:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8017c7a:	d056      	beq.n	8017d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8017c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c7e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8017c82:	f200 808b 	bhi.w	8017d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017c8c:	d03e      	beq.n	8017d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8017c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017c94:	f200 8082 	bhi.w	8017d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017c9e:	d027      	beq.n	8017cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8017ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ca2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017ca6:	d879      	bhi.n	8017d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017caa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017cae:	d017      	beq.n	8017ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8017cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017cb6:	d871      	bhi.n	8017d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d004      	beq.n	8017cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8017cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017cc4:	d004      	beq.n	8017cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8017cc6:	e069      	b.n	8017d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017cc8:	f7fb feb2 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 8017ccc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017cce:	e068      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017cd0:	f107 0314 	add.w	r3, r7, #20
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7fd ffb5 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017cde:	e060      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017ce0:	f107 0308 	add.w	r3, r7, #8
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7fe f917 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017cee:	e058      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017cf0:	4b7c      	ldr	r3, [pc, #496]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017cf6:	f003 0302 	and.w	r3, r3, #2
 8017cfa:	2b02      	cmp	r3, #2
 8017cfc:	d103      	bne.n	8017d06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8017cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017d02:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017d04:	e04d      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017d0a:	e04a      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017d0c:	4b75      	ldr	r3, [pc, #468]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017d1a:	d103      	bne.n	8017d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8017d1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017d20:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017d22:	e03e      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8017d24:	2300      	movs	r3, #0
 8017d26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017d28:	e03b      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017d30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017d36:	4b6b      	ldr	r3, [pc, #428]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	f003 0302 	and.w	r3, r3, #2
 8017d3e:	2b02      	cmp	r3, #2
 8017d40:	d10c      	bne.n	8017d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8017d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d109      	bne.n	8017d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017d48:	4b66      	ldr	r3, [pc, #408]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	08db      	lsrs	r3, r3, #3
 8017d4e:	f003 0303 	and.w	r3, r3, #3
 8017d52:	4a65      	ldr	r2, [pc, #404]	@ (8017ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8017d54:	fa22 f303 	lsr.w	r3, r2, r3
 8017d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8017d5a:	e01e      	b.n	8017d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017d5c:	4b61      	ldr	r3, [pc, #388]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d68:	d106      	bne.n	8017d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8017d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017d70:	d102      	bne.n	8017d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017d72:	4b5e      	ldr	r3, [pc, #376]	@ (8017eec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8017d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8017d76:	e010      	b.n	8017d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017d78:	4b5a      	ldr	r3, [pc, #360]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017d84:	d106      	bne.n	8017d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8017d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017d8c:	d102      	bne.n	8017d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017d8e:	4b58      	ldr	r3, [pc, #352]	@ (8017ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8017d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8017d92:	e002      	b.n	8017d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017d94:	2300      	movs	r3, #0
 8017d96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017d98:	e003      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8017d9a:	e002      	b.n	8017da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017da0:	bf00      	nop
          }
        }
        break;
 8017da2:	f000 bd6e 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8017da6:	4b4f      	ldr	r3, [pc, #316]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017da8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017dac:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8017db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8017db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017db4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8017db8:	d056      	beq.n	8017e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8017dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dbc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8017dc0:	f200 808b 	bhi.w	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017dca:	d03e      	beq.n	8017e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8017dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017dd2:	f200 8082 	bhi.w	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017ddc:	d027      	beq.n	8017e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8017dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017de0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017de4:	d879      	bhi.n	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017dec:	d017      	beq.n	8017e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8017dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017df4:	d871      	bhi.n	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d004      	beq.n	8017e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8017dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017e02:	d004      	beq.n	8017e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8017e04:	e069      	b.n	8017eda <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017e06:	f7fb fe13 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 8017e0a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017e0c:	e068      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017e0e:	f107 0314 	add.w	r3, r7, #20
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7fd ff16 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017e1c:	e060      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017e1e:	f107 0308 	add.w	r3, r7, #8
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7fe f878 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017e28:	693b      	ldr	r3, [r7, #16]
 8017e2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017e2c:	e058      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017e34:	f003 0302 	and.w	r3, r3, #2
 8017e38:	2b02      	cmp	r3, #2
 8017e3a:	d103      	bne.n	8017e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8017e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017e40:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017e42:	e04d      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8017e44:	2300      	movs	r3, #0
 8017e46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017e48:	e04a      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017e4a:	4b26      	ldr	r3, [pc, #152]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017e58:	d103      	bne.n	8017e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8017e5a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017e5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017e60:	e03e      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8017e62:	2300      	movs	r3, #0
 8017e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017e66:	e03b      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017e68:	4b1e      	ldr	r3, [pc, #120]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017e6e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017e72:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017e74:	4b1b      	ldr	r3, [pc, #108]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f003 0302 	and.w	r3, r3, #2
 8017e7c:	2b02      	cmp	r3, #2
 8017e7e:	d10c      	bne.n	8017e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8017e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d109      	bne.n	8017e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017e86:	4b17      	ldr	r3, [pc, #92]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	08db      	lsrs	r3, r3, #3
 8017e8c:	f003 0303 	and.w	r3, r3, #3
 8017e90:	4a15      	ldr	r2, [pc, #84]	@ (8017ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8017e92:	fa22 f303 	lsr.w	r3, r2, r3
 8017e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e98:	e01e      	b.n	8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017e9a:	4b12      	ldr	r3, [pc, #72]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ea6:	d106      	bne.n	8017eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8017ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017eae:	d102      	bne.n	8017eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8017eec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8017eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8017eb4:	e010      	b.n	8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8017ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017ebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017ec2:	d106      	bne.n	8017ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8017ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017eca:	d102      	bne.n	8017ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017ecc:	4b08      	ldr	r3, [pc, #32]	@ (8017ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8017ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ed0:	e002      	b.n	8017ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017ed6:	e003      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8017ed8:	e002      	b.n	8017ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8017eda:	2300      	movs	r3, #0
 8017edc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017ede:	bf00      	nop
          }
        }
        break;
 8017ee0:	f000 bccf 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017ee4:	44020c00 	.word	0x44020c00
 8017ee8:	03d09000 	.word	0x03d09000
 8017eec:	003d0900 	.word	0x003d0900
 8017ef0:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8017ef4:	4b9e      	ldr	r3, [pc, #632]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017efa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8017efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017f06:	d056      	beq.n	8017fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8017f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017f0e:	f200 808b 	bhi.w	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f18:	d03e      	beq.n	8017f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8017f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f20:	f200 8082 	bhi.w	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8017f2a:	d027      	beq.n	8017f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8017f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8017f32:	d879      	bhi.n	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f3a:	d017      	beq.n	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f42:	d871      	bhi.n	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d004      	beq.n	8017f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8017f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017f50:	d004      	beq.n	8017f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8017f52:	e069      	b.n	8018028 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017f54:	f7fb fd6c 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 8017f58:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017f5a:	e068      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017f5c:	f107 0314 	add.w	r3, r7, #20
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7fd fe6f 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017f66:	697b      	ldr	r3, [r7, #20]
 8017f68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017f6a:	e060      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017f6c:	f107 0308 	add.w	r3, r7, #8
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7fd ffd1 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017f76:	693b      	ldr	r3, [r7, #16]
 8017f78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017f7a:	e058      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017f82:	f003 0302 	and.w	r3, r3, #2
 8017f86:	2b02      	cmp	r3, #2
 8017f88:	d103      	bne.n	8017f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8017f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017f8e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017f90:	e04d      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8017f92:	2300      	movs	r3, #0
 8017f94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017f96:	e04a      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017f98:	4b75      	ldr	r3, [pc, #468]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017fa6:	d103      	bne.n	8017fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8017fa8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017fac:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017fae:	e03e      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017fb4:	e03b      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017fbc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	f003 0302 	and.w	r3, r3, #2
 8017fca:	2b02      	cmp	r3, #2
 8017fcc:	d10c      	bne.n	8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8017fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d109      	bne.n	8017fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017fd4:	4b66      	ldr	r3, [pc, #408]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	08db      	lsrs	r3, r3, #3
 8017fda:	f003 0303 	and.w	r3, r3, #3
 8017fde:	4a65      	ldr	r2, [pc, #404]	@ (8018174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8017fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8017fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8017fe6:	e01e      	b.n	8018026 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017fe8:	4b61      	ldr	r3, [pc, #388]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ff4:	d106      	bne.n	8018004 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8017ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017ffc:	d102      	bne.n	8018004 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8018178 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8018000:	637b      	str	r3, [r7, #52]	@ 0x34
 8018002:	e010      	b.n	8018026 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8018004:	4b5a      	ldr	r3, [pc, #360]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801800c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018010:	d106      	bne.n	8018020 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8018012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018018:	d102      	bne.n	8018020 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801801a:	4b58      	ldr	r3, [pc, #352]	@ (801817c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 801801c:	637b      	str	r3, [r7, #52]	@ 0x34
 801801e:	e002      	b.n	8018026 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8018020:	2300      	movs	r3, #0
 8018022:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8018024:	e003      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8018026:	e002      	b.n	801802e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8018028:	2300      	movs	r3, #0
 801802a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801802c:	bf00      	nop
          }
        }
        break;
 801802e:	f000 bc28 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8018032:	4b4f      	ldr	r3, [pc, #316]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801803c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 801803e:	4b4c      	ldr	r3, [pc, #304]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801804a:	d106      	bne.n	801805a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 801804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801804e:	2b00      	cmp	r3, #0
 8018050:	d103      	bne.n	801805a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8018052:	4b4a      	ldr	r3, [pc, #296]	@ (801817c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8018054:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8018056:	f000 bc14 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 801805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801805c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018060:	d108      	bne.n	8018074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018062:	f107 0320 	add.w	r3, r7, #32
 8018066:	4618      	mov	r0, r3
 8018068:	f7fd fc82 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801806e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8018070:	f000 bc07 	b.w	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8018074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801807a:	d107      	bne.n	801808c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801807c:	f107 0314 	add.w	r3, r7, #20
 8018080:	4618      	mov	r0, r3
 8018082:	f7fd fddf 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8018086:	69bb      	ldr	r3, [r7, #24]
 8018088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801808a:	e3fa      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 801808c:	2300      	movs	r3, #0
 801808e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8018090:	e3f7      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8018092:	4b37      	ldr	r3, [pc, #220]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018098:	f003 0307 	and.w	r3, r3, #7
 801809c:	633b      	str	r3, [r7, #48]	@ 0x30
 801809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180a0:	2b04      	cmp	r3, #4
 80180a2:	d861      	bhi.n	8018168 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80180a4:	a201      	add	r2, pc, #4	@ (adr r2, 80180ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80180a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180aa:	bf00      	nop
 80180ac:	080180c1 	.word	0x080180c1
 80180b0:	080180d1 	.word	0x080180d1
 80180b4:	080180e1 	.word	0x080180e1
 80180b8:	080180f1 	.word	0x080180f1
 80180bc:	080180f7 	.word	0x080180f7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80180c0:	f107 0320 	add.w	r3, r7, #32
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7fd fc53 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80180ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80180ce:	e04e      	b.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80180d0:	f107 0314 	add.w	r3, r7, #20
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7fd fdb5 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80180de:	e046      	b.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80180e0:	f107 0308 	add.w	r3, r7, #8
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7fd ff17 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80180ee:	e03e      	b.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80180f0:	4b23      	ldr	r3, [pc, #140]	@ (8018180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80180f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80180f4:	e03b      	b.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80180f6:	4b1e      	ldr	r3, [pc, #120]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80180f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80180fc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8018100:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8018102:	4b1b      	ldr	r3, [pc, #108]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	f003 0302 	and.w	r3, r3, #2
 801810a:	2b02      	cmp	r3, #2
 801810c:	d10c      	bne.n	8018128 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 801810e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018110:	2b00      	cmp	r3, #0
 8018112:	d109      	bne.n	8018128 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8018114:	4b16      	ldr	r3, [pc, #88]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	08db      	lsrs	r3, r3, #3
 801811a:	f003 0303 	and.w	r3, r3, #3
 801811e:	4a15      	ldr	r2, [pc, #84]	@ (8018174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8018120:	fa22 f303 	lsr.w	r3, r2, r3
 8018124:	637b      	str	r3, [r7, #52]	@ 0x34
 8018126:	e01e      	b.n	8018166 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8018128:	4b11      	ldr	r3, [pc, #68]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018134:	d106      	bne.n	8018144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8018136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801813c:	d102      	bne.n	8018144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801813e:	4b0e      	ldr	r3, [pc, #56]	@ (8018178 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8018140:	637b      	str	r3, [r7, #52]	@ 0x34
 8018142:	e010      	b.n	8018166 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8018144:	4b0a      	ldr	r3, [pc, #40]	@ (8018170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801814c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018150:	d106      	bne.n	8018160 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8018152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018158:	d102      	bne.n	8018160 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801815a:	4b08      	ldr	r3, [pc, #32]	@ (801817c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 801815c:	637b      	str	r3, [r7, #52]	@ 0x34
 801815e:	e002      	b.n	8018166 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8018160:	2300      	movs	r3, #0
 8018162:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8018164:	e003      	b.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8018166:	e002      	b.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8018168:	2300      	movs	r3, #0
 801816a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801816c:	bf00      	nop
          }
        }
        break;
 801816e:	e388      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8018170:	44020c00 	.word	0x44020c00
 8018174:	03d09000 	.word	0x03d09000
 8018178:	003d0900 	.word	0x003d0900
 801817c:	017d7840 	.word	0x017d7840
 8018180:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8018184:	4ba9      	ldr	r3, [pc, #676]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801818a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801818e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018192:	2b20      	cmp	r3, #32
 8018194:	f200 809a 	bhi.w	80182cc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8018198:	a201      	add	r2, pc, #4	@ (adr r2, 80181a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 801819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801819e:	bf00      	nop
 80181a0:	08018225 	.word	0x08018225
 80181a4:	080182cd 	.word	0x080182cd
 80181a8:	080182cd 	.word	0x080182cd
 80181ac:	080182cd 	.word	0x080182cd
 80181b0:	080182cd 	.word	0x080182cd
 80181b4:	080182cd 	.word	0x080182cd
 80181b8:	080182cd 	.word	0x080182cd
 80181bc:	080182cd 	.word	0x080182cd
 80181c0:	08018235 	.word	0x08018235
 80181c4:	080182cd 	.word	0x080182cd
 80181c8:	080182cd 	.word	0x080182cd
 80181cc:	080182cd 	.word	0x080182cd
 80181d0:	080182cd 	.word	0x080182cd
 80181d4:	080182cd 	.word	0x080182cd
 80181d8:	080182cd 	.word	0x080182cd
 80181dc:	080182cd 	.word	0x080182cd
 80181e0:	08018245 	.word	0x08018245
 80181e4:	080182cd 	.word	0x080182cd
 80181e8:	080182cd 	.word	0x080182cd
 80181ec:	080182cd 	.word	0x080182cd
 80181f0:	080182cd 	.word	0x080182cd
 80181f4:	080182cd 	.word	0x080182cd
 80181f8:	080182cd 	.word	0x080182cd
 80181fc:	080182cd 	.word	0x080182cd
 8018200:	08018255 	.word	0x08018255
 8018204:	080182cd 	.word	0x080182cd
 8018208:	080182cd 	.word	0x080182cd
 801820c:	080182cd 	.word	0x080182cd
 8018210:	080182cd 	.word	0x080182cd
 8018214:	080182cd 	.word	0x080182cd
 8018218:	080182cd 	.word	0x080182cd
 801821c:	080182cd 	.word	0x080182cd
 8018220:	0801825b 	.word	0x0801825b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018224:	f107 0320 	add.w	r3, r7, #32
 8018228:	4618      	mov	r0, r3
 801822a:	f7fd fba1 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 801822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018230:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018232:	e04e      	b.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018234:	f107 0314 	add.w	r3, r7, #20
 8018238:	4618      	mov	r0, r3
 801823a:	f7fd fd03 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801823e:	697b      	ldr	r3, [r7, #20]
 8018240:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018242:	e046      	b.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018244:	f107 0308 	add.w	r3, r7, #8
 8018248:	4618      	mov	r0, r3
 801824a:	f7fd fe65 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018252:	e03e      	b.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8018254:	4b76      	ldr	r3, [pc, #472]	@ (8018430 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8018256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018258:	e03b      	b.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801825a:	4b74      	ldr	r3, [pc, #464]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801825c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018260:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8018264:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8018266:	4b71      	ldr	r3, [pc, #452]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	f003 0302 	and.w	r3, r3, #2
 801826e:	2b02      	cmp	r3, #2
 8018270:	d10c      	bne.n	801828c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8018272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018274:	2b00      	cmp	r3, #0
 8018276:	d109      	bne.n	801828c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8018278:	4b6c      	ldr	r3, [pc, #432]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	08db      	lsrs	r3, r3, #3
 801827e:	f003 0303 	and.w	r3, r3, #3
 8018282:	4a6c      	ldr	r2, [pc, #432]	@ (8018434 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8018284:	fa22 f303 	lsr.w	r3, r2, r3
 8018288:	637b      	str	r3, [r7, #52]	@ 0x34
 801828a:	e01e      	b.n	80182ca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801828c:	4b67      	ldr	r3, [pc, #412]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018298:	d106      	bne.n	80182a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 801829a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801829c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80182a0:	d102      	bne.n	80182a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80182a2:	4b65      	ldr	r3, [pc, #404]	@ (8018438 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80182a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80182a6:	e010      	b.n	80182ca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80182a8:	4b60      	ldr	r3, [pc, #384]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80182b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80182b4:	d106      	bne.n	80182c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80182b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80182bc:	d102      	bne.n	80182c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80182be:	4b5f      	ldr	r3, [pc, #380]	@ (801843c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80182c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80182c2:	e002      	b.n	80182ca <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80182c4:	2300      	movs	r3, #0
 80182c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80182c8:	e003      	b.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80182ca:	e002      	b.n	80182d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80182d0:	bf00      	nop
          }
        }
        break;
 80182d2:	e2d6      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80182d4:	4b55      	ldr	r3, [pc, #340]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80182d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80182da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80182de:	633b      	str	r3, [r7, #48]	@ 0x30
 80182e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80182e6:	d031      	beq.n	801834c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80182e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80182ee:	d866      	bhi.n	80183be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80182f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80182f4:	d027      	beq.n	8018346 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80182f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80182fa:	d860      	bhi.n	80183be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80182fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182fe:	2b80      	cmp	r3, #128	@ 0x80
 8018300:	d019      	beq.n	8018336 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8018302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018304:	2b80      	cmp	r3, #128	@ 0x80
 8018306:	d85a      	bhi.n	80183be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8018308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801830a:	2b00      	cmp	r3, #0
 801830c:	d003      	beq.n	8018316 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 801830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018310:	2b40      	cmp	r3, #64	@ 0x40
 8018312:	d008      	beq.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8018314:	e053      	b.n	80183be <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018316:	f107 0320 	add.w	r3, r7, #32
 801831a:	4618      	mov	r0, r3
 801831c:	f7fd fb28 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8018320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018322:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018324:	e04e      	b.n	80183c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018326:	f107 0314 	add.w	r3, r7, #20
 801832a:	4618      	mov	r0, r3
 801832c:	f7fd fc8a 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8018330:	697b      	ldr	r3, [r7, #20]
 8018332:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018334:	e046      	b.n	80183c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018336:	f107 0308 	add.w	r3, r7, #8
 801833a:	4618      	mov	r0, r3
 801833c:	f7fd fdec 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8018340:	68bb      	ldr	r3, [r7, #8]
 8018342:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018344:	e03e      	b.n	80183c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8018346:	4b3a      	ldr	r3, [pc, #232]	@ (8018430 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8018348:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801834a:	e03b      	b.n	80183c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801834c:	4b37      	ldr	r3, [pc, #220]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801834e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018352:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8018356:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8018358:	4b34      	ldr	r3, [pc, #208]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	f003 0302 	and.w	r3, r3, #2
 8018360:	2b02      	cmp	r3, #2
 8018362:	d10c      	bne.n	801837e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8018364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018366:	2b00      	cmp	r3, #0
 8018368:	d109      	bne.n	801837e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801836a:	4b30      	ldr	r3, [pc, #192]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	08db      	lsrs	r3, r3, #3
 8018370:	f003 0303 	and.w	r3, r3, #3
 8018374:	4a2f      	ldr	r2, [pc, #188]	@ (8018434 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8018376:	fa22 f303 	lsr.w	r3, r2, r3
 801837a:	637b      	str	r3, [r7, #52]	@ 0x34
 801837c:	e01e      	b.n	80183bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801837e:	4b2b      	ldr	r3, [pc, #172]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801838a:	d106      	bne.n	801839a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 801838c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801838e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018392:	d102      	bne.n	801839a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8018394:	4b28      	ldr	r3, [pc, #160]	@ (8018438 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8018396:	637b      	str	r3, [r7, #52]	@ 0x34
 8018398:	e010      	b.n	80183bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801839a:	4b24      	ldr	r3, [pc, #144]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80183a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80183a6:	d106      	bne.n	80183b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80183a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80183ae:	d102      	bne.n	80183b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80183b0:	4b22      	ldr	r3, [pc, #136]	@ (801843c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80183b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80183b4:	e002      	b.n	80183bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80183b6:	2300      	movs	r3, #0
 80183b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80183ba:	e003      	b.n	80183c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80183bc:	e002      	b.n	80183c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80183be:	2300      	movs	r3, #0
 80183c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80183c2:	bf00      	nop
          }
        }
        break;
 80183c4:	e25d      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80183c6:	4b19      	ldr	r3, [pc, #100]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80183cc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80183d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80183d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d103      	bne.n	80183e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80183d8:	f7fb fb14 	bl	8013a04 <HAL_RCC_GetPCLK2Freq>
 80183dc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80183de:	e250      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80183e0:	4b12      	ldr	r3, [pc, #72]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80183e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80183ec:	d10b      	bne.n	8018406 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80183ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80183f4:	d107      	bne.n	8018406 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80183f6:	f107 0314 	add.w	r3, r7, #20
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7fd fc22 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8018400:	69bb      	ldr	r3, [r7, #24]
 8018402:	637b      	str	r3, [r7, #52]	@ 0x34
 8018404:	e04f      	b.n	80184a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8018406:	4b09      	ldr	r3, [pc, #36]	@ (801842c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801840e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018412:	d115      	bne.n	8018440 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8018414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801841a:	d111      	bne.n	8018440 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801841c:	f107 0308 	add.w	r3, r7, #8
 8018420:	4618      	mov	r0, r3
 8018422:	f7fd fd79 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	637b      	str	r3, [r7, #52]	@ 0x34
 801842a:	e03c      	b.n	80184a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 801842c:	44020c00 	.word	0x44020c00
 8018430:	00bb8000 	.word	0x00bb8000
 8018434:	03d09000 	.word	0x03d09000
 8018438:	003d0900 	.word	0x003d0900
 801843c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8018440:	4b94      	ldr	r3, [pc, #592]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	f003 0302 	and.w	r3, r3, #2
 8018448:	2b02      	cmp	r3, #2
 801844a:	d10d      	bne.n	8018468 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 801844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801844e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8018452:	d109      	bne.n	8018468 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8018454:	4b8f      	ldr	r3, [pc, #572]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	08db      	lsrs	r3, r3, #3
 801845a:	f003 0303 	and.w	r3, r3, #3
 801845e:	4a8e      	ldr	r2, [pc, #568]	@ (8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8018460:	fa22 f303 	lsr.w	r3, r2, r3
 8018464:	637b      	str	r3, [r7, #52]	@ 0x34
 8018466:	e01e      	b.n	80184a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8018468:	4b8a      	ldr	r3, [pc, #552]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018474:	d106      	bne.n	8018484 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8018476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801847c:	d102      	bne.n	8018484 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 801847e:	4b87      	ldr	r3, [pc, #540]	@ (801869c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8018480:	637b      	str	r3, [r7, #52]	@ 0x34
 8018482:	e010      	b.n	80184a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8018484:	4b83      	ldr	r3, [pc, #524]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801848c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018490:	d106      	bne.n	80184a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8018492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018494:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8018498:	d102      	bne.n	80184a0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 801849a:	4b81      	ldr	r3, [pc, #516]	@ (80186a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 801849c:	637b      	str	r3, [r7, #52]	@ 0x34
 801849e:	e002      	b.n	80184a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80184a0:	2300      	movs	r3, #0
 80184a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80184a4:	e1ed      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80184a6:	e1ec      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80184a8:	4b7a      	ldr	r3, [pc, #488]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80184aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80184ae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80184b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80184b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d103      	bne.n	80184c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80184ba:	f7fb fab9 	bl	8013a30 <HAL_RCC_GetPCLK3Freq>
 80184be:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80184c0:	e1df      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80184c2:	4b74      	ldr	r3, [pc, #464]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80184ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80184ce:	d10b      	bne.n	80184e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80184d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80184d6:	d107      	bne.n	80184e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80184d8:	f107 0314 	add.w	r3, r7, #20
 80184dc:	4618      	mov	r0, r3
 80184de:	f7fd fbb1 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80184e2:	69bb      	ldr	r3, [r7, #24]
 80184e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80184e6:	e045      	b.n	8018574 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80184e8:	4b6a      	ldr	r3, [pc, #424]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80184f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80184f4:	d10b      	bne.n	801850e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80184f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80184fc:	d107      	bne.n	801850e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80184fe:	f107 0308 	add.w	r3, r7, #8
 8018502:	4618      	mov	r0, r3
 8018504:	f7fd fd08 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	637b      	str	r3, [r7, #52]	@ 0x34
 801850c:	e032      	b.n	8018574 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 801850e:	4b61      	ldr	r3, [pc, #388]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f003 0302 	and.w	r3, r3, #2
 8018516:	2b02      	cmp	r3, #2
 8018518:	d10d      	bne.n	8018536 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 801851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801851c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8018520:	d109      	bne.n	8018536 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8018522:	4b5c      	ldr	r3, [pc, #368]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	08db      	lsrs	r3, r3, #3
 8018528:	f003 0303 	and.w	r3, r3, #3
 801852c:	4a5a      	ldr	r2, [pc, #360]	@ (8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 801852e:	fa22 f303 	lsr.w	r3, r2, r3
 8018532:	637b      	str	r3, [r7, #52]	@ 0x34
 8018534:	e01e      	b.n	8018574 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8018536:	4b57      	ldr	r3, [pc, #348]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801853e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018542:	d106      	bne.n	8018552 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8018544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801854a:	d102      	bne.n	8018552 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 801854c:	4b53      	ldr	r3, [pc, #332]	@ (801869c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 801854e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018550:	e010      	b.n	8018574 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8018552:	4b50      	ldr	r3, [pc, #320]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801855a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801855e:	d106      	bne.n	801856e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8018560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018562:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8018566:	d102      	bne.n	801856e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8018568:	4b4d      	ldr	r3, [pc, #308]	@ (80186a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 801856a:	637b      	str	r3, [r7, #52]	@ 0x34
 801856c:	e002      	b.n	8018574 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 801856e:	2300      	movs	r3, #0
 8018570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8018572:	e186      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8018574:	e185      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8018576:	4b47      	ldr	r3, [pc, #284]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801857c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8018580:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8018582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018584:	2b00      	cmp	r3, #0
 8018586:	d103      	bne.n	8018590 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8018588:	f7fb fa3c 	bl	8013a04 <HAL_RCC_GetPCLK2Freq>
 801858c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 801858e:	e178      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8018590:	4b40      	ldr	r3, [pc, #256]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801859c:	d10b      	bne.n	80185b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 801859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80185a4:	d107      	bne.n	80185b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80185a6:	f107 0314 	add.w	r3, r7, #20
 80185aa:	4618      	mov	r0, r3
 80185ac:	f7fd fb4a 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80185b0:	69bb      	ldr	r3, [r7, #24]
 80185b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80185b4:	e045      	b.n	8018642 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80185b6:	4b37      	ldr	r3, [pc, #220]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80185be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80185c2:	d10b      	bne.n	80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80185c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80185ca:	d107      	bne.n	80185dc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80185cc:	f107 0308 	add.w	r3, r7, #8
 80185d0:	4618      	mov	r0, r3
 80185d2:	f7fd fca1 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80185da:	e032      	b.n	8018642 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80185dc:	4b2d      	ldr	r3, [pc, #180]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	f003 0302 	and.w	r3, r3, #2
 80185e4:	2b02      	cmp	r3, #2
 80185e6:	d10d      	bne.n	8018604 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80185e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80185ee:	d109      	bne.n	8018604 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80185f0:	4b28      	ldr	r3, [pc, #160]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	08db      	lsrs	r3, r3, #3
 80185f6:	f003 0303 	and.w	r3, r3, #3
 80185fa:	4a27      	ldr	r2, [pc, #156]	@ (8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80185fc:	fa22 f303 	lsr.w	r3, r2, r3
 8018600:	637b      	str	r3, [r7, #52]	@ 0x34
 8018602:	e01e      	b.n	8018642 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8018604:	4b23      	ldr	r3, [pc, #140]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801860c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018610:	d106      	bne.n	8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8018612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018618:	d102      	bne.n	8018620 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 801861a:	4b20      	ldr	r3, [pc, #128]	@ (801869c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 801861c:	637b      	str	r3, [r7, #52]	@ 0x34
 801861e:	e010      	b.n	8018642 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8018620:	4b1c      	ldr	r3, [pc, #112]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801862c:	d106      	bne.n	801863c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 801862e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018630:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8018634:	d102      	bne.n	801863c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8018636:	4b1a      	ldr	r3, [pc, #104]	@ (80186a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8018638:	637b      	str	r3, [r7, #52]	@ 0x34
 801863a:	e002      	b.n	8018642 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 801863c:	2300      	movs	r3, #0
 801863e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8018640:	e11f      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8018642:	e11e      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8018644:	4b13      	ldr	r3, [pc, #76]	@ (8018694 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801864a:	f003 0303 	and.w	r3, r3, #3
 801864e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018652:	2b03      	cmp	r3, #3
 8018654:	d85f      	bhi.n	8018716 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8018656:	a201      	add	r2, pc, #4	@ (adr r2, 801865c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8018658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801865c:	0801866d 	.word	0x0801866d
 8018660:	08018675 	.word	0x08018675
 8018664:	08018685 	.word	0x08018685
 8018668:	080186a5 	.word	0x080186a5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 801866c:	f7fb f998 	bl	80139a0 <HAL_RCC_GetHCLKFreq>
 8018670:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8018672:	e053      	b.n	801871c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018674:	f107 0320 	add.w	r3, r7, #32
 8018678:	4618      	mov	r0, r3
 801867a:	f7fd f979 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 801867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018680:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018682:	e04b      	b.n	801871c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018684:	f107 0314 	add.w	r3, r7, #20
 8018688:	4618      	mov	r0, r3
 801868a:	f7fd fadb 	bl	8015c44 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 801868e:	69fb      	ldr	r3, [r7, #28]
 8018690:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018692:	e043      	b.n	801871c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8018694:	44020c00 	.word	0x44020c00
 8018698:	03d09000 	.word	0x03d09000
 801869c:	003d0900 	.word	0x003d0900
 80186a0:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80186a4:	4b79      	ldr	r3, [pc, #484]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80186a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80186aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80186ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80186b0:	4b76      	ldr	r3, [pc, #472]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f003 0302 	and.w	r3, r3, #2
 80186b8:	2b02      	cmp	r3, #2
 80186ba:	d10c      	bne.n	80186d6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80186bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d109      	bne.n	80186d6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80186c2:	4b72      	ldr	r3, [pc, #456]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	08db      	lsrs	r3, r3, #3
 80186c8:	f003 0303 	and.w	r3, r3, #3
 80186cc:	4a70      	ldr	r2, [pc, #448]	@ (8018890 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80186ce:	fa22 f303 	lsr.w	r3, r2, r3
 80186d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80186d4:	e01e      	b.n	8018714 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80186d6:	4b6d      	ldr	r3, [pc, #436]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80186de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80186e2:	d106      	bne.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80186e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80186ea:	d102      	bne.n	80186f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80186ec:	4b69      	ldr	r3, [pc, #420]	@ (8018894 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80186ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80186f0:	e010      	b.n	8018714 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80186f2:	4b66      	ldr	r3, [pc, #408]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80186fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80186fe:	d106      	bne.n	801870e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8018700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018706:	d102      	bne.n	801870e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8018708:	4b63      	ldr	r3, [pc, #396]	@ (8018898 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 801870a:	637b      	str	r3, [r7, #52]	@ 0x34
 801870c:	e002      	b.n	8018714 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 801870e:	2300      	movs	r3, #0
 8018710:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8018712:	e003      	b.n	801871c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8018714:	e002      	b.n	801871c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8018716:	2300      	movs	r3, #0
 8018718:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801871a:	bf00      	nop
          }
        }
        break;
 801871c:	e0b1      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 801871e:	4b5b      	ldr	r3, [pc, #364]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018724:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018728:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 801872a:	4b58      	ldr	r3, [pc, #352]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801872c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8018730:	f003 0302 	and.w	r3, r3, #2
 8018734:	2b02      	cmp	r3, #2
 8018736:	d106      	bne.n	8018746 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8018738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801873a:	2b00      	cmp	r3, #0
 801873c:	d103      	bne.n	8018746 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 801873e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018742:	637b      	str	r3, [r7, #52]	@ 0x34
 8018744:	e01f      	b.n	8018786 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8018746:	4b51      	ldr	r3, [pc, #324]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801874c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018754:	d106      	bne.n	8018764 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8018756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018758:	2b40      	cmp	r3, #64	@ 0x40
 801875a:	d103      	bne.n	8018764 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 801875c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8018760:	637b      	str	r3, [r7, #52]	@ 0x34
 8018762:	e010      	b.n	8018786 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8018764:	4b49      	ldr	r3, [pc, #292]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801876c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018770:	d106      	bne.n	8018780 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8018772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018774:	2b80      	cmp	r3, #128	@ 0x80
 8018776:	d103      	bne.n	8018780 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8018778:	f248 0312 	movw	r3, #32786	@ 0x8012
 801877c:	637b      	str	r3, [r7, #52]	@ 0x34
 801877e:	e002      	b.n	8018786 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8018780:	2300      	movs	r3, #0
 8018782:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8018784:	e07d      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8018786:	e07c      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8018788:	4b40      	ldr	r3, [pc, #256]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801878a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801878e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8018792:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8018794:	4b3d      	ldr	r3, [pc, #244]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801879c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80187a0:	d105      	bne.n	80187ae <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80187a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d102      	bne.n	80187ae <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80187a8:	4b3c      	ldr	r3, [pc, #240]	@ (801889c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80187aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80187ac:	e031      	b.n	8018812 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80187ae:	4b37      	ldr	r3, [pc, #220]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80187b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80187ba:	d10a      	bne.n	80187d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80187bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187be:	2b10      	cmp	r3, #16
 80187c0:	d107      	bne.n	80187d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80187c2:	f107 0320 	add.w	r3, r7, #32
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fd f8d2 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80187cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80187d0:	e01f      	b.n	8018812 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80187d2:	4b2e      	ldr	r3, [pc, #184]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80187d8:	f003 0302 	and.w	r3, r3, #2
 80187dc:	2b02      	cmp	r3, #2
 80187de:	d106      	bne.n	80187ee <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80187e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187e2:	2b20      	cmp	r3, #32
 80187e4:	d103      	bne.n	80187ee <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80187e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80187ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80187ec:	e011      	b.n	8018812 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80187ee:	4b27      	ldr	r3, [pc, #156]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80187f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80187f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80187fc:	d106      	bne.n	801880c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80187fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018800:	2b30      	cmp	r3, #48	@ 0x30
 8018802:	d103      	bne.n	801880c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8018804:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8018808:	637b      	str	r3, [r7, #52]	@ 0x34
 801880a:	e002      	b.n	8018812 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 801880c:	2300      	movs	r3, #0
 801880e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8018810:	e037      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8018812:	e036      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8018814:	4b1d      	ldr	r3, [pc, #116]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801881a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801881e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8018820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018822:	2b10      	cmp	r3, #16
 8018824:	d107      	bne.n	8018836 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018826:	f107 0320 	add.w	r3, r7, #32
 801882a:	4618      	mov	r0, r3
 801882c:	f7fd f8a0 	bl	8015970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8018830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018832:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8018834:	e025      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8018836:	4b15      	ldr	r3, [pc, #84]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801883e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018842:	d10a      	bne.n	801885a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8018844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018846:	2b20      	cmp	r3, #32
 8018848:	d107      	bne.n	801885a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801884a:	f107 0308 	add.w	r3, r7, #8
 801884e:	4618      	mov	r0, r3
 8018850:	f7fd fb62 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	637b      	str	r3, [r7, #52]	@ 0x34
 8018858:	e00f      	b.n	801887a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 801885a:	4b0c      	ldr	r3, [pc, #48]	@ (801888c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018866:	d105      	bne.n	8018874 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8018868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801886a:	2b30      	cmp	r3, #48	@ 0x30
 801886c:	d102      	bne.n	8018874 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 801886e:	4b0b      	ldr	r3, [pc, #44]	@ (801889c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8018870:	637b      	str	r3, [r7, #52]	@ 0x34
 8018872:	e002      	b.n	801887a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8018874:	2300      	movs	r3, #0
 8018876:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8018878:	e003      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801887a:	e002      	b.n	8018882 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 801887c:	2300      	movs	r3, #0
 801887e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8018880:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8018882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018884:	4618      	mov	r0, r3
 8018886:	373c      	adds	r7, #60	@ 0x3c
 8018888:	46bd      	mov	sp, r7
 801888a:	bd90      	pop	{r4, r7, pc}
 801888c:	44020c00 	.word	0x44020c00
 8018890:	03d09000 	.word	0x03d09000
 8018894:	003d0900 	.word	0x003d0900
 8018898:	017d7840 	.word	0x017d7840
 801889c:	02dc6c00 	.word	0x02dc6c00

080188a0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b084      	sub	sp, #16
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80188a8:	4b48      	ldr	r3, [pc, #288]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	4a47      	ldr	r2, [pc, #284]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 80188ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80188b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80188b4:	f7f8 fe20 	bl	80114f8 <HAL_GetTick>
 80188b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80188ba:	e008      	b.n	80188ce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80188bc:	f7f8 fe1c 	bl	80114f8 <HAL_GetTick>
 80188c0:	4602      	mov	r2, r0
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	1ad3      	subs	r3, r2, r3
 80188c6:	2b02      	cmp	r3, #2
 80188c8:	d901      	bls.n	80188ce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80188ca:	2303      	movs	r3, #3
 80188cc:	e07a      	b.n	80189c4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80188ce:	4b3f      	ldr	r3, [pc, #252]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d1f0      	bne.n	80188bc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80188da:	4b3c      	ldr	r3, [pc, #240]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 80188dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80188e2:	f023 0303 	bic.w	r3, r3, #3
 80188e6:	687a      	ldr	r2, [r7, #4]
 80188e8:	6811      	ldr	r1, [r2, #0]
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	6852      	ldr	r2, [r2, #4]
 80188ee:	0212      	lsls	r2, r2, #8
 80188f0:	430a      	orrs	r2, r1
 80188f2:	4936      	ldr	r1, [pc, #216]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 80188f4:	4313      	orrs	r3, r2
 80188f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	689b      	ldr	r3, [r3, #8]
 80188fc:	3b01      	subs	r3, #1
 80188fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	68db      	ldr	r3, [r3, #12]
 8018906:	3b01      	subs	r3, #1
 8018908:	025b      	lsls	r3, r3, #9
 801890a:	b29b      	uxth	r3, r3
 801890c:	431a      	orrs	r2, r3
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	691b      	ldr	r3, [r3, #16]
 8018912:	3b01      	subs	r3, #1
 8018914:	041b      	lsls	r3, r3, #16
 8018916:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801891a:	431a      	orrs	r2, r3
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	695b      	ldr	r3, [r3, #20]
 8018920:	3b01      	subs	r3, #1
 8018922:	061b      	lsls	r3, r3, #24
 8018924:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018928:	4928      	ldr	r1, [pc, #160]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 801892a:	4313      	orrs	r3, r2
 801892c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 801892e:	4b27      	ldr	r3, [pc, #156]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018932:	f023 020c 	bic.w	r2, r3, #12
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	699b      	ldr	r3, [r3, #24]
 801893a:	4924      	ldr	r1, [pc, #144]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 801893c:	4313      	orrs	r3, r2
 801893e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8018940:	4b22      	ldr	r3, [pc, #136]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018944:	f023 0220 	bic.w	r2, r3, #32
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	69db      	ldr	r3, [r3, #28]
 801894c:	491f      	ldr	r1, [pc, #124]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 801894e:	4313      	orrs	r3, r2
 8018950:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8018952:	4b1e      	ldr	r3, [pc, #120]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801895a:	491c      	ldr	r1, [pc, #112]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 801895c:	4313      	orrs	r3, r2
 801895e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8018960:	4b1a      	ldr	r3, [pc, #104]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018964:	4a19      	ldr	r2, [pc, #100]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018966:	f023 0310 	bic.w	r3, r3, #16
 801896a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 801896c:	4b17      	ldr	r3, [pc, #92]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 801896e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018970:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8018974:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8018978:	687a      	ldr	r2, [r7, #4]
 801897a:	6a12      	ldr	r2, [r2, #32]
 801897c:	00d2      	lsls	r2, r2, #3
 801897e:	4913      	ldr	r1, [pc, #76]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018980:	4313      	orrs	r3, r2
 8018982:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8018984:	4b11      	ldr	r3, [pc, #68]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018988:	4a10      	ldr	r2, [pc, #64]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 801898a:	f043 0310 	orr.w	r3, r3, #16
 801898e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8018990:	4b0e      	ldr	r3, [pc, #56]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	4a0d      	ldr	r2, [pc, #52]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 8018996:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801899a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801899c:	f7f8 fdac 	bl	80114f8 <HAL_GetTick>
 80189a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80189a2:	e008      	b.n	80189b6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80189a4:	f7f8 fda8 	bl	80114f8 <HAL_GetTick>
 80189a8:	4602      	mov	r2, r0
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	1ad3      	subs	r3, r2, r3
 80189ae:	2b02      	cmp	r3, #2
 80189b0:	d901      	bls.n	80189b6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80189b2:	2303      	movs	r3, #3
 80189b4:	e006      	b.n	80189c4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80189b6:	4b05      	ldr	r3, [pc, #20]	@ (80189cc <RCCEx_PLL2_Config+0x12c>)
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d0f0      	beq.n	80189a4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80189c2:	2300      	movs	r3, #0

}
 80189c4:	4618      	mov	r0, r3
 80189c6:	3710      	adds	r7, #16
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}
 80189cc:	44020c00 	.word	0x44020c00

080189d0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b084      	sub	sp, #16
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80189d8:	4b48      	ldr	r3, [pc, #288]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	4a47      	ldr	r2, [pc, #284]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 80189de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80189e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80189e4:	f7f8 fd88 	bl	80114f8 <HAL_GetTick>
 80189e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80189ea:	e008      	b.n	80189fe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80189ec:	f7f8 fd84 	bl	80114f8 <HAL_GetTick>
 80189f0:	4602      	mov	r2, r0
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	1ad3      	subs	r3, r2, r3
 80189f6:	2b02      	cmp	r3, #2
 80189f8:	d901      	bls.n	80189fe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80189fa:	2303      	movs	r3, #3
 80189fc:	e07a      	b.n	8018af4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80189fe:	4b3f      	ldr	r3, [pc, #252]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d1f0      	bne.n	80189ec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8018a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018a12:	f023 0303 	bic.w	r3, r3, #3
 8018a16:	687a      	ldr	r2, [r7, #4]
 8018a18:	6811      	ldr	r1, [r2, #0]
 8018a1a:	687a      	ldr	r2, [r7, #4]
 8018a1c:	6852      	ldr	r2, [r2, #4]
 8018a1e:	0212      	lsls	r2, r2, #8
 8018a20:	430a      	orrs	r2, r1
 8018a22:	4936      	ldr	r1, [pc, #216]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a24:	4313      	orrs	r3, r2
 8018a26:	630b      	str	r3, [r1, #48]	@ 0x30
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	689b      	ldr	r3, [r3, #8]
 8018a2c:	3b01      	subs	r3, #1
 8018a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	68db      	ldr	r3, [r3, #12]
 8018a36:	3b01      	subs	r3, #1
 8018a38:	025b      	lsls	r3, r3, #9
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	431a      	orrs	r2, r3
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	691b      	ldr	r3, [r3, #16]
 8018a42:	3b01      	subs	r3, #1
 8018a44:	041b      	lsls	r3, r3, #16
 8018a46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8018a4a:	431a      	orrs	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	695b      	ldr	r3, [r3, #20]
 8018a50:	3b01      	subs	r3, #1
 8018a52:	061b      	lsls	r3, r3, #24
 8018a54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018a58:	4928      	ldr	r1, [pc, #160]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a5a:	4313      	orrs	r3, r2
 8018a5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8018a5e:	4b27      	ldr	r3, [pc, #156]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a62:	f023 020c 	bic.w	r2, r3, #12
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	699b      	ldr	r3, [r3, #24]
 8018a6a:	4924      	ldr	r1, [pc, #144]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a6c:	4313      	orrs	r3, r2
 8018a6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8018a70:	4b22      	ldr	r3, [pc, #136]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a74:	f023 0220 	bic.w	r2, r3, #32
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	69db      	ldr	r3, [r3, #28]
 8018a7c:	491f      	ldr	r1, [pc, #124]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a7e:	4313      	orrs	r3, r2
 8018a80:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8018a82:	4b1e      	ldr	r3, [pc, #120]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a8a:	491c      	ldr	r1, [pc, #112]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a8c:	4313      	orrs	r3, r2
 8018a8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8018a90:	4b1a      	ldr	r3, [pc, #104]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a94:	4a19      	ldr	r2, [pc, #100]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a96:	f023 0310 	bic.w	r3, r3, #16
 8018a9a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8018a9c:	4b17      	ldr	r3, [pc, #92]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018aa0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8018aa4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8018aa8:	687a      	ldr	r2, [r7, #4]
 8018aaa:	6a12      	ldr	r2, [r2, #32]
 8018aac:	00d2      	lsls	r2, r2, #3
 8018aae:	4913      	ldr	r1, [pc, #76]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018ab0:	4313      	orrs	r3, r2
 8018ab2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8018ab4:	4b11      	ldr	r3, [pc, #68]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ab8:	4a10      	ldr	r2, [pc, #64]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018aba:	f043 0310 	orr.w	r3, r3, #16
 8018abe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8018ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018aca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018acc:	f7f8 fd14 	bl	80114f8 <HAL_GetTick>
 8018ad0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018ad2:	e008      	b.n	8018ae6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018ad4:	f7f8 fd10 	bl	80114f8 <HAL_GetTick>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	1ad3      	subs	r3, r2, r3
 8018ade:	2b02      	cmp	r3, #2
 8018ae0:	d901      	bls.n	8018ae6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8018ae2:	2303      	movs	r3, #3
 8018ae4:	e006      	b.n	8018af4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018ae6:	4b05      	ldr	r3, [pc, #20]	@ (8018afc <RCCEx_PLL3_Config+0x12c>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d0f0      	beq.n	8018ad4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8018af2:	2300      	movs	r3, #0
}
 8018af4:	4618      	mov	r0, r3
 8018af6:	3710      	adds	r7, #16
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bd80      	pop	{r7, pc}
 8018afc:	44020c00 	.word	0x44020c00

08018b00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b084      	sub	sp, #16
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d101      	bne.n	8018b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018b0e:	2301      	movs	r3, #1
 8018b10:	e162      	b.n	8018dd8 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	4a70      	ldr	r2, [pc, #448]	@ (8018cd8 <HAL_SPI_Init+0x1d8>)
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d018      	beq.n	8018b4e <HAL_SPI_Init+0x4e>
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a6e      	ldr	r2, [pc, #440]	@ (8018cdc <HAL_SPI_Init+0x1dc>)
 8018b22:	4293      	cmp	r3, r2
 8018b24:	d013      	beq.n	8018b4e <HAL_SPI_Init+0x4e>
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	4a6d      	ldr	r2, [pc, #436]	@ (8018ce0 <HAL_SPI_Init+0x1e0>)
 8018b2c:	4293      	cmp	r3, r2
 8018b2e:	d00e      	beq.n	8018b4e <HAL_SPI_Init+0x4e>
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	4a6b      	ldr	r2, [pc, #428]	@ (8018ce4 <HAL_SPI_Init+0x1e4>)
 8018b36:	4293      	cmp	r3, r2
 8018b38:	d009      	beq.n	8018b4e <HAL_SPI_Init+0x4e>
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8018ce8 <HAL_SPI_Init+0x1e8>)
 8018b40:	4293      	cmp	r3, r2
 8018b42:	d004      	beq.n	8018b4e <HAL_SPI_Init+0x4e>
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	4a68      	ldr	r2, [pc, #416]	@ (8018cec <HAL_SPI_Init+0x1ec>)
 8018b4a:	4293      	cmp	r3, r2
 8018b4c:	e000      	b.n	8018b50 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8018b4e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2200      	movs	r2, #0
 8018b54:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8018cd8 <HAL_SPI_Init+0x1d8>)
 8018b5c:	4293      	cmp	r3, r2
 8018b5e:	d018      	beq.n	8018b92 <HAL_SPI_Init+0x92>
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	4a5d      	ldr	r2, [pc, #372]	@ (8018cdc <HAL_SPI_Init+0x1dc>)
 8018b66:	4293      	cmp	r3, r2
 8018b68:	d013      	beq.n	8018b92 <HAL_SPI_Init+0x92>
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8018ce0 <HAL_SPI_Init+0x1e0>)
 8018b70:	4293      	cmp	r3, r2
 8018b72:	d00e      	beq.n	8018b92 <HAL_SPI_Init+0x92>
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	4a5a      	ldr	r2, [pc, #360]	@ (8018ce4 <HAL_SPI_Init+0x1e4>)
 8018b7a:	4293      	cmp	r3, r2
 8018b7c:	d009      	beq.n	8018b92 <HAL_SPI_Init+0x92>
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	4a59      	ldr	r2, [pc, #356]	@ (8018ce8 <HAL_SPI_Init+0x1e8>)
 8018b84:	4293      	cmp	r3, r2
 8018b86:	d004      	beq.n	8018b92 <HAL_SPI_Init+0x92>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	4a57      	ldr	r2, [pc, #348]	@ (8018cec <HAL_SPI_Init+0x1ec>)
 8018b8e:	4293      	cmp	r3, r2
 8018b90:	d105      	bne.n	8018b9e <HAL_SPI_Init+0x9e>
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	68db      	ldr	r3, [r3, #12]
 8018b96:	2b0f      	cmp	r3, #15
 8018b98:	d901      	bls.n	8018b9e <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	e11c      	b.n	8018dd8 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f000 fdac 	bl	80196fc <SPI_GetPacketSize>
 8018ba4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	4a4b      	ldr	r2, [pc, #300]	@ (8018cd8 <HAL_SPI_Init+0x1d8>)
 8018bac:	4293      	cmp	r3, r2
 8018bae:	d018      	beq.n	8018be2 <HAL_SPI_Init+0xe2>
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	4a49      	ldr	r2, [pc, #292]	@ (8018cdc <HAL_SPI_Init+0x1dc>)
 8018bb6:	4293      	cmp	r3, r2
 8018bb8:	d013      	beq.n	8018be2 <HAL_SPI_Init+0xe2>
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	4a48      	ldr	r2, [pc, #288]	@ (8018ce0 <HAL_SPI_Init+0x1e0>)
 8018bc0:	4293      	cmp	r3, r2
 8018bc2:	d00e      	beq.n	8018be2 <HAL_SPI_Init+0xe2>
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	4a46      	ldr	r2, [pc, #280]	@ (8018ce4 <HAL_SPI_Init+0x1e4>)
 8018bca:	4293      	cmp	r3, r2
 8018bcc:	d009      	beq.n	8018be2 <HAL_SPI_Init+0xe2>
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	4a45      	ldr	r2, [pc, #276]	@ (8018ce8 <HAL_SPI_Init+0x1e8>)
 8018bd4:	4293      	cmp	r3, r2
 8018bd6:	d004      	beq.n	8018be2 <HAL_SPI_Init+0xe2>
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	4a43      	ldr	r2, [pc, #268]	@ (8018cec <HAL_SPI_Init+0x1ec>)
 8018bde:	4293      	cmp	r3, r2
 8018be0:	d102      	bne.n	8018be8 <HAL_SPI_Init+0xe8>
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	2b08      	cmp	r3, #8
 8018be6:	d820      	bhi.n	8018c2a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018bec:	4a40      	ldr	r2, [pc, #256]	@ (8018cf0 <HAL_SPI_Init+0x1f0>)
 8018bee:	4293      	cmp	r3, r2
 8018bf0:	d018      	beq.n	8018c24 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8018cf4 <HAL_SPI_Init+0x1f4>)
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	d013      	beq.n	8018c24 <HAL_SPI_Init+0x124>
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	4a3d      	ldr	r2, [pc, #244]	@ (8018cf8 <HAL_SPI_Init+0x1f8>)
 8018c02:	4293      	cmp	r3, r2
 8018c04:	d00e      	beq.n	8018c24 <HAL_SPI_Init+0x124>
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8018cfc <HAL_SPI_Init+0x1fc>)
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d009      	beq.n	8018c24 <HAL_SPI_Init+0x124>
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	4a3a      	ldr	r2, [pc, #232]	@ (8018d00 <HAL_SPI_Init+0x200>)
 8018c16:	4293      	cmp	r3, r2
 8018c18:	d004      	beq.n	8018c24 <HAL_SPI_Init+0x124>
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4a39      	ldr	r2, [pc, #228]	@ (8018d04 <HAL_SPI_Init+0x204>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d104      	bne.n	8018c2e <HAL_SPI_Init+0x12e>
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	2b10      	cmp	r3, #16
 8018c28:	d901      	bls.n	8018c2e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	e0d4      	b.n	8018dd8 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8018c34:	b2db      	uxtb	r3, r3
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d106      	bne.n	8018c48 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f7f7 fdbe 	bl	80107c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2202      	movs	r2, #2
 8018c4c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	681a      	ldr	r2, [r3, #0]
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	f022 0201 	bic.w	r2, r2, #1
 8018c5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	689b      	ldr	r3, [r3, #8]
 8018c66:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8018c6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	699b      	ldr	r3, [r3, #24]
 8018c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018c74:	d119      	bne.n	8018caa <HAL_SPI_Init+0x1aa>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	685b      	ldr	r3, [r3, #4]
 8018c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8018c7e:	d103      	bne.n	8018c88 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d008      	beq.n	8018c9a <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d10c      	bne.n	8018caa <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018c98:	d107      	bne.n	8018caa <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	681a      	ldr	r2, [r3, #0]
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8018ca8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	685b      	ldr	r3, [r3, #4]
 8018cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d028      	beq.n	8018d08 <HAL_SPI_Init+0x208>
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	68db      	ldr	r3, [r3, #12]
 8018cba:	2b06      	cmp	r3, #6
 8018cbc:	d924      	bls.n	8018d08 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	430a      	orrs	r2, r1
 8018cd2:	601a      	str	r2, [r3, #0]
 8018cd4:	e020      	b.n	8018d18 <HAL_SPI_Init+0x218>
 8018cd6:	bf00      	nop
 8018cd8:	40014c00 	.word	0x40014c00
 8018cdc:	50014c00 	.word	0x50014c00
 8018ce0:	44002000 	.word	0x44002000
 8018ce4:	54002000 	.word	0x54002000
 8018ce8:	40015000 	.word	0x40015000
 8018cec:	50015000 	.word	0x50015000
 8018cf0:	40013000 	.word	0x40013000
 8018cf4:	50013000 	.word	0x50013000
 8018cf8:	40003800 	.word	0x40003800
 8018cfc:	50003800 	.word	0x50003800
 8018d00:	40003c00 	.word	0x40003c00
 8018d04:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	681a      	ldr	r2, [r3, #0]
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018d16:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	69da      	ldr	r2, [r3, #28]
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d20:	431a      	orrs	r2, r3
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	431a      	orrs	r2, r3
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d2a:	ea42 0103 	orr.w	r1, r2, r3
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	68da      	ldr	r2, [r3, #12]
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	430a      	orrs	r2, r1
 8018d38:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d42:	431a      	orrs	r2, r3
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018d48:	431a      	orrs	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	699b      	ldr	r3, [r3, #24]
 8018d4e:	431a      	orrs	r2, r3
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	691b      	ldr	r3, [r3, #16]
 8018d54:	431a      	orrs	r2, r3
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	695b      	ldr	r3, [r3, #20]
 8018d5a:	431a      	orrs	r2, r3
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	6a1b      	ldr	r3, [r3, #32]
 8018d60:	431a      	orrs	r2, r3
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	431a      	orrs	r2, r3
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d6c:	431a      	orrs	r2, r3
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	689b      	ldr	r3, [r3, #8]
 8018d72:	431a      	orrs	r2, r3
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018d78:	431a      	orrs	r2, r3
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d7e:	431a      	orrs	r2, r3
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018d84:	ea42 0103 	orr.w	r1, r2, r3
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	430a      	orrs	r2, r1
 8018d92:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	f022 0201 	bic.w	r2, r2, #1
 8018da2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d00a      	beq.n	8018dc6 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	68db      	ldr	r3, [r3, #12]
 8018db6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	430a      	orrs	r2, r1
 8018dc4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	2200      	movs	r2, #0
 8018dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2201      	movs	r2, #1
 8018dd2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8018dd6:	2300      	movs	r3, #0
}
 8018dd8:	4618      	mov	r0, r3
 8018dda:	3710      	adds	r7, #16
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}

08018de0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b088      	sub	sp, #32
 8018de4:	af02      	add	r7, sp, #8
 8018de6:	60f8      	str	r0, [r7, #12]
 8018de8:	60b9      	str	r1, [r7, #8]
 8018dea:	603b      	str	r3, [r7, #0]
 8018dec:	4613      	mov	r3, r2
 8018dee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	3320      	adds	r3, #32
 8018df6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018df8:	f7f8 fb7e 	bl	80114f8 <HAL_GetTick>
 8018dfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8018e04:	b2db      	uxtb	r3, r3
 8018e06:	2b01      	cmp	r3, #1
 8018e08:	d001      	beq.n	8018e0e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8018e0a:	2302      	movs	r3, #2
 8018e0c:	e1f9      	b.n	8019202 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 8018e0e:	68bb      	ldr	r3, [r7, #8]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d002      	beq.n	8018e1a <HAL_SPI_Transmit+0x3a>
 8018e14:	88fb      	ldrh	r3, [r7, #6]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d101      	bne.n	8018e1e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	e1f1      	b.n	8019202 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8018e24:	2b01      	cmp	r3, #1
 8018e26:	d101      	bne.n	8018e2c <HAL_SPI_Transmit+0x4c>
 8018e28:	2302      	movs	r3, #2
 8018e2a:	e1ea      	b.n	8019202 <HAL_SPI_Transmit+0x422>
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	2201      	movs	r2, #1
 8018e30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	2203      	movs	r2, #3
 8018e38:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	2200      	movs	r2, #0
 8018e40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	68ba      	ldr	r2, [r7, #8]
 8018e48:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	88fa      	ldrh	r2, [r7, #6]
 8018e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	88fa      	ldrh	r2, [r7, #6]
 8018e56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	2200      	movs	r2, #0
 8018e64:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	2200      	movs	r2, #0
 8018e74:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	689b      	ldr	r3, [r3, #8]
 8018e80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8018e84:	d108      	bne.n	8018e98 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	681a      	ldr	r2, [r3, #0]
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8018e94:	601a      	str	r2, [r3, #0]
 8018e96:	e009      	b.n	8018eac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	68db      	ldr	r3, [r3, #12]
 8018e9e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8018eaa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	0c1b      	lsrs	r3, r3, #16
 8018eb4:	041b      	lsls	r3, r3, #16
 8018eb6:	88f9      	ldrh	r1, [r7, #6]
 8018eb8:	68fa      	ldr	r2, [r7, #12]
 8018eba:	6812      	ldr	r2, [r2, #0]
 8018ebc:	430b      	orrs	r3, r1
 8018ebe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	681a      	ldr	r2, [r3, #0]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	f042 0201 	orr.w	r2, r2, #1
 8018ece:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	685b      	ldr	r3, [r3, #4]
 8018ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8018ed8:	d107      	bne.n	8018eea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	681a      	ldr	r2, [r3, #0]
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	68db      	ldr	r3, [r3, #12]
 8018eee:	2b0f      	cmp	r3, #15
 8018ef0:	d965      	bls.n	8018fbe <HAL_SPI_Transmit+0x1de>
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	4a94      	ldr	r2, [pc, #592]	@ (8019148 <HAL_SPI_Transmit+0x368>)
 8018ef8:	4293      	cmp	r3, r2
 8018efa:	d059      	beq.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	4a92      	ldr	r2, [pc, #584]	@ (801914c <HAL_SPI_Transmit+0x36c>)
 8018f02:	4293      	cmp	r3, r2
 8018f04:	d054      	beq.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	4a91      	ldr	r2, [pc, #580]	@ (8019150 <HAL_SPI_Transmit+0x370>)
 8018f0c:	4293      	cmp	r3, r2
 8018f0e:	d04f      	beq.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	4a8f      	ldr	r2, [pc, #572]	@ (8019154 <HAL_SPI_Transmit+0x374>)
 8018f16:	4293      	cmp	r3, r2
 8018f18:	d04a      	beq.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	4a8e      	ldr	r2, [pc, #568]	@ (8019158 <HAL_SPI_Transmit+0x378>)
 8018f20:	4293      	cmp	r3, r2
 8018f22:	d045      	beq.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	4a8c      	ldr	r2, [pc, #560]	@ (801915c <HAL_SPI_Transmit+0x37c>)
 8018f2a:	4293      	cmp	r3, r2
 8018f2c:	d147      	bne.n	8018fbe <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8018f2e:	e03f      	b.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	695b      	ldr	r3, [r3, #20]
 8018f36:	f003 0302 	and.w	r3, r3, #2
 8018f3a:	2b02      	cmp	r3, #2
 8018f3c:	d114      	bne.n	8018f68 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	6812      	ldr	r2, [r2, #0]
 8018f48:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018f4e:	1d1a      	adds	r2, r3, #4
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	3b01      	subs	r3, #1
 8018f5e:	b29a      	uxth	r2, r3
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018f66:	e023      	b.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018f68:	f7f8 fac6 	bl	80114f8 <HAL_GetTick>
 8018f6c:	4602      	mov	r2, r0
 8018f6e:	693b      	ldr	r3, [r7, #16]
 8018f70:	1ad3      	subs	r3, r2, r3
 8018f72:	683a      	ldr	r2, [r7, #0]
 8018f74:	429a      	cmp	r2, r3
 8018f76:	d803      	bhi.n	8018f80 <HAL_SPI_Transmit+0x1a0>
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f7e:	d102      	bne.n	8018f86 <HAL_SPI_Transmit+0x1a6>
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d114      	bne.n	8018fb0 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8018f86:	68f8      	ldr	r0, [r7, #12]
 8018f88:	f000 faea 	bl	8019560 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018f92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	2201      	movs	r2, #1
 8018fa0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8018fac:	2303      	movs	r3, #3
 8018fae:	e128      	b.n	8019202 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d1b9      	bne.n	8018f30 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8018fbc:	e0fb      	b.n	80191b6 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	2b07      	cmp	r3, #7
 8018fc4:	f240 80f0 	bls.w	80191a8 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8018fc8:	e05d      	b.n	8019086 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	695b      	ldr	r3, [r3, #20]
 8018fd0:	f003 0302 	and.w	r3, r3, #2
 8018fd4:	2b02      	cmp	r3, #2
 8018fd6:	d132      	bne.n	801903e <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018fde:	b29b      	uxth	r3, r3
 8018fe0:	2b01      	cmp	r3, #1
 8018fe2:	d918      	bls.n	8019016 <HAL_SPI_Transmit+0x236>
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d014      	beq.n	8019016 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	6812      	ldr	r2, [r2, #0]
 8018ff6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018ffc:	1d1a      	adds	r2, r3, #4
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019008:	b29b      	uxth	r3, r3
 801900a:	3b02      	subs	r3, #2
 801900c:	b29a      	uxth	r2, r3
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019014:	e037      	b.n	8019086 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801901a:	881a      	ldrh	r2, [r3, #0]
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019024:	1c9a      	adds	r2, r3, #2
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019030:	b29b      	uxth	r3, r3
 8019032:	3b01      	subs	r3, #1
 8019034:	b29a      	uxth	r2, r3
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801903c:	e023      	b.n	8019086 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801903e:	f7f8 fa5b 	bl	80114f8 <HAL_GetTick>
 8019042:	4602      	mov	r2, r0
 8019044:	693b      	ldr	r3, [r7, #16]
 8019046:	1ad3      	subs	r3, r2, r3
 8019048:	683a      	ldr	r2, [r7, #0]
 801904a:	429a      	cmp	r2, r3
 801904c:	d803      	bhi.n	8019056 <HAL_SPI_Transmit+0x276>
 801904e:	683b      	ldr	r3, [r7, #0]
 8019050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019054:	d102      	bne.n	801905c <HAL_SPI_Transmit+0x27c>
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d114      	bne.n	8019086 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801905c:	68f8      	ldr	r0, [r7, #12]
 801905e:	f000 fa7f 	bl	8019560 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019068:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	2201      	movs	r2, #1
 8019076:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	2200      	movs	r2, #0
 801907e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019082:	2303      	movs	r3, #3
 8019084:	e0bd      	b.n	8019202 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801908c:	b29b      	uxth	r3, r3
 801908e:	2b00      	cmp	r3, #0
 8019090:	d19b      	bne.n	8018fca <HAL_SPI_Transmit+0x1ea>
 8019092:	e090      	b.n	80191b6 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	695b      	ldr	r3, [r3, #20]
 801909a:	f003 0302 	and.w	r3, r3, #2
 801909e:	2b02      	cmp	r3, #2
 80190a0:	d15e      	bne.n	8019160 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	2b03      	cmp	r3, #3
 80190ac:	d918      	bls.n	80190e0 <HAL_SPI_Transmit+0x300>
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80190b2:	2b40      	cmp	r3, #64	@ 0x40
 80190b4:	d914      	bls.n	80190e0 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	6812      	ldr	r2, [r2, #0]
 80190c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80190c6:	1d1a      	adds	r2, r3, #4
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80190d2:	b29b      	uxth	r3, r3
 80190d4:	3b04      	subs	r3, #4
 80190d6:	b29a      	uxth	r2, r3
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80190de:	e063      	b.n	80191a8 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80190e6:	b29b      	uxth	r3, r3
 80190e8:	2b01      	cmp	r3, #1
 80190ea:	d917      	bls.n	801911c <HAL_SPI_Transmit+0x33c>
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d013      	beq.n	801911c <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80190f8:	881a      	ldrh	r2, [r3, #0]
 80190fa:	697b      	ldr	r3, [r7, #20]
 80190fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019102:	1c9a      	adds	r2, r3, #2
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801910e:	b29b      	uxth	r3, r3
 8019110:	3b02      	subs	r3, #2
 8019112:	b29a      	uxth	r2, r3
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801911a:	e045      	b.n	80191a8 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	3320      	adds	r3, #32
 8019126:	7812      	ldrb	r2, [r2, #0]
 8019128:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801912e:	1c5a      	adds	r2, r3, #1
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801913a:	b29b      	uxth	r3, r3
 801913c:	3b01      	subs	r3, #1
 801913e:	b29a      	uxth	r2, r3
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019146:	e02f      	b.n	80191a8 <HAL_SPI_Transmit+0x3c8>
 8019148:	40013000 	.word	0x40013000
 801914c:	50013000 	.word	0x50013000
 8019150:	40003800 	.word	0x40003800
 8019154:	50003800 	.word	0x50003800
 8019158:	40003c00 	.word	0x40003c00
 801915c:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019160:	f7f8 f9ca 	bl	80114f8 <HAL_GetTick>
 8019164:	4602      	mov	r2, r0
 8019166:	693b      	ldr	r3, [r7, #16]
 8019168:	1ad3      	subs	r3, r2, r3
 801916a:	683a      	ldr	r2, [r7, #0]
 801916c:	429a      	cmp	r2, r3
 801916e:	d803      	bhi.n	8019178 <HAL_SPI_Transmit+0x398>
 8019170:	683b      	ldr	r3, [r7, #0]
 8019172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019176:	d102      	bne.n	801917e <HAL_SPI_Transmit+0x39e>
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d114      	bne.n	80191a8 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801917e:	68f8      	ldr	r0, [r7, #12]
 8019180:	f000 f9ee 	bl	8019560 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801918a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	2201      	movs	r2, #1
 8019198:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	2200      	movs	r2, #0
 80191a0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80191a4:	2303      	movs	r3, #3
 80191a6:	e02c      	b.n	8019202 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	f47f af6f 	bne.w	8019094 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	9300      	str	r3, [sp, #0]
 80191ba:	683b      	ldr	r3, [r7, #0]
 80191bc:	2200      	movs	r2, #0
 80191be:	2108      	movs	r1, #8
 80191c0:	68f8      	ldr	r0, [r7, #12]
 80191c2:	f000 fa6d 	bl	80196a0 <SPI_WaitOnFlagUntilTimeout>
 80191c6:	4603      	mov	r3, r0
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d007      	beq.n	80191dc <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80191d2:	f043 0220 	orr.w	r2, r3, #32
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f000 f9bf 	bl	8019560 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	2201      	movs	r2, #1
 80191e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	2200      	movs	r2, #0
 80191ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d001      	beq.n	8019200 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 80191fc:	2301      	movs	r3, #1
 80191fe:	e000      	b.n	8019202 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 8019200:	2300      	movs	r3, #0
  }
}
 8019202:	4618      	mov	r0, r3
 8019204:	3718      	adds	r7, #24
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}
 801920a:	bf00      	nop

0801920c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af00      	add	r7, sp, #0
 8019212:	60f8      	str	r0, [r7, #12]
 8019214:	60b9      	str	r1, [r7, #8]
 8019216:	603b      	str	r3, [r7, #0]
 8019218:	4613      	mov	r3, r2
 801921a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	3330      	adds	r3, #48	@ 0x30
 8019222:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019224:	f7f8 f968 	bl	80114f8 <HAL_GetTick>
 8019228:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8019230:	b2db      	uxtb	r3, r3
 8019232:	2b01      	cmp	r3, #1
 8019234:	d001      	beq.n	801923a <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8019236:	2302      	movs	r3, #2
 8019238:	e181      	b.n	801953e <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d002      	beq.n	8019246 <HAL_SPI_Receive+0x3a>
 8019240:	88fb      	ldrh	r3, [r7, #6]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d101      	bne.n	801924a <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8019246:	2301      	movs	r3, #1
 8019248:	e179      	b.n	801953e <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8019250:	2b01      	cmp	r3, #1
 8019252:	d101      	bne.n	8019258 <HAL_SPI_Receive+0x4c>
 8019254:	2302      	movs	r3, #2
 8019256:	e172      	b.n	801953e <HAL_SPI_Receive+0x332>
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2201      	movs	r2, #1
 801925c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	2204      	movs	r2, #4
 8019264:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	2200      	movs	r2, #0
 801926c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	68ba      	ldr	r2, [r7, #8]
 8019274:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	88fa      	ldrh	r2, [r7, #6]
 801927a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	88fa      	ldrh	r2, [r7, #6]
 8019282:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	2200      	movs	r2, #0
 801928a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	2200      	movs	r2, #0
 8019290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	2200      	movs	r2, #0
 8019298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	2200      	movs	r2, #0
 80192a0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	2200      	movs	r2, #0
 80192a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	689b      	ldr	r3, [r3, #8]
 80192ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80192b0:	d108      	bne.n	80192c4 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	681a      	ldr	r2, [r3, #0]
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80192c0:	601a      	str	r2, [r3, #0]
 80192c2:	e009      	b.n	80192d8 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	68db      	ldr	r3, [r3, #12]
 80192ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80192d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	685b      	ldr	r3, [r3, #4]
 80192de:	0c1b      	lsrs	r3, r3, #16
 80192e0:	041b      	lsls	r3, r3, #16
 80192e2:	88f9      	ldrh	r1, [r7, #6]
 80192e4:	68fa      	ldr	r2, [r7, #12]
 80192e6:	6812      	ldr	r2, [r2, #0]
 80192e8:	430b      	orrs	r3, r1
 80192ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	681a      	ldr	r2, [r3, #0]
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	f042 0201 	orr.w	r2, r2, #1
 80192fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8019304:	d107      	bne.n	8019316 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019314:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	68db      	ldr	r3, [r3, #12]
 801931a:	2b0f      	cmp	r3, #15
 801931c:	d966      	bls.n	80193ec <HAL_SPI_Receive+0x1e0>
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	4a89      	ldr	r2, [pc, #548]	@ (8019548 <HAL_SPI_Receive+0x33c>)
 8019324:	4293      	cmp	r3, r2
 8019326:	d05a      	beq.n	80193de <HAL_SPI_Receive+0x1d2>
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	4a87      	ldr	r2, [pc, #540]	@ (801954c <HAL_SPI_Receive+0x340>)
 801932e:	4293      	cmp	r3, r2
 8019330:	d055      	beq.n	80193de <HAL_SPI_Receive+0x1d2>
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	4a86      	ldr	r2, [pc, #536]	@ (8019550 <HAL_SPI_Receive+0x344>)
 8019338:	4293      	cmp	r3, r2
 801933a:	d050      	beq.n	80193de <HAL_SPI_Receive+0x1d2>
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	4a84      	ldr	r2, [pc, #528]	@ (8019554 <HAL_SPI_Receive+0x348>)
 8019342:	4293      	cmp	r3, r2
 8019344:	d04b      	beq.n	80193de <HAL_SPI_Receive+0x1d2>
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	4a83      	ldr	r2, [pc, #524]	@ (8019558 <HAL_SPI_Receive+0x34c>)
 801934c:	4293      	cmp	r3, r2
 801934e:	d046      	beq.n	80193de <HAL_SPI_Receive+0x1d2>
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	4a81      	ldr	r2, [pc, #516]	@ (801955c <HAL_SPI_Receive+0x350>)
 8019356:	4293      	cmp	r3, r2
 8019358:	d148      	bne.n	80193ec <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801935a:	e040      	b.n	80193de <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	695a      	ldr	r2, [r3, #20]
 8019362:	f248 0308 	movw	r3, #32776	@ 0x8008
 8019366:	4013      	ands	r3, r2
 8019368:	2b00      	cmp	r3, #0
 801936a:	d014      	beq.n	8019396 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681a      	ldr	r2, [r3, #0]
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8019376:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801937c:	1d1a      	adds	r2, r3, #4
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8019388:	b29b      	uxth	r3, r3
 801938a:	3b01      	subs	r3, #1
 801938c:	b29a      	uxth	r2, r3
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8019394:	e023      	b.n	80193de <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019396:	f7f8 f8af 	bl	80114f8 <HAL_GetTick>
 801939a:	4602      	mov	r2, r0
 801939c:	693b      	ldr	r3, [r7, #16]
 801939e:	1ad3      	subs	r3, r2, r3
 80193a0:	683a      	ldr	r2, [r7, #0]
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d803      	bhi.n	80193ae <HAL_SPI_Receive+0x1a2>
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ac:	d102      	bne.n	80193b4 <HAL_SPI_Receive+0x1a8>
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d114      	bne.n	80193de <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80193b4:	68f8      	ldr	r0, [r7, #12]
 80193b6:	f000 f8d3 	bl	8019560 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80193c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	2201      	movs	r2, #1
 80193ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	2200      	movs	r2, #0
 80193d6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80193da:	2303      	movs	r3, #3
 80193dc:	e0af      	b.n	801953e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80193e4:	b29b      	uxth	r3, r3
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d1b8      	bne.n	801935c <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80193ea:	e095      	b.n	8019518 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	68db      	ldr	r3, [r3, #12]
 80193f0:	2b07      	cmp	r3, #7
 80193f2:	f240 808b 	bls.w	801950c <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80193f6:	e03f      	b.n	8019478 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	695b      	ldr	r3, [r3, #20]
 80193fe:	f003 0301 	and.w	r3, r3, #1
 8019402:	2b01      	cmp	r3, #1
 8019404:	d114      	bne.n	8019430 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801940a:	697a      	ldr	r2, [r7, #20]
 801940c:	8812      	ldrh	r2, [r2, #0]
 801940e:	b292      	uxth	r2, r2
 8019410:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019416:	1c9a      	adds	r2, r3, #2
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8019422:	b29b      	uxth	r3, r3
 8019424:	3b01      	subs	r3, #1
 8019426:	b29a      	uxth	r2, r3
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801942e:	e023      	b.n	8019478 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019430:	f7f8 f862 	bl	80114f8 <HAL_GetTick>
 8019434:	4602      	mov	r2, r0
 8019436:	693b      	ldr	r3, [r7, #16]
 8019438:	1ad3      	subs	r3, r2, r3
 801943a:	683a      	ldr	r2, [r7, #0]
 801943c:	429a      	cmp	r2, r3
 801943e:	d803      	bhi.n	8019448 <HAL_SPI_Receive+0x23c>
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019446:	d102      	bne.n	801944e <HAL_SPI_Receive+0x242>
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d114      	bne.n	8019478 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801944e:	68f8      	ldr	r0, [r7, #12]
 8019450:	f000 f886 	bl	8019560 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801945a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	2201      	movs	r2, #1
 8019468:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	2200      	movs	r2, #0
 8019470:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019474:	2303      	movs	r3, #3
 8019476:	e062      	b.n	801953e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801947e:	b29b      	uxth	r3, r3
 8019480:	2b00      	cmp	r3, #0
 8019482:	d1b9      	bne.n	80193f8 <HAL_SPI_Receive+0x1ec>
 8019484:	e048      	b.n	8019518 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	695b      	ldr	r3, [r3, #20]
 801948c:	f003 0301 	and.w	r3, r3, #1
 8019490:	2b01      	cmp	r3, #1
 8019492:	d117      	bne.n	80194c4 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80194a0:	7812      	ldrb	r2, [r2, #0]
 80194a2:	b2d2      	uxtb	r2, r2
 80194a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80194aa:	1c5a      	adds	r2, r3, #1
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80194b6:	b29b      	uxth	r3, r3
 80194b8:	3b01      	subs	r3, #1
 80194ba:	b29a      	uxth	r2, r3
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80194c2:	e023      	b.n	801950c <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80194c4:	f7f8 f818 	bl	80114f8 <HAL_GetTick>
 80194c8:	4602      	mov	r2, r0
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	1ad3      	subs	r3, r2, r3
 80194ce:	683a      	ldr	r2, [r7, #0]
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d803      	bhi.n	80194dc <HAL_SPI_Receive+0x2d0>
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194da:	d102      	bne.n	80194e2 <HAL_SPI_Receive+0x2d6>
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d114      	bne.n	801950c <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80194e2:	68f8      	ldr	r0, [r7, #12]
 80194e4:	f000 f83c 	bl	8019560 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80194ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	2201      	movs	r2, #1
 80194fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	2200      	movs	r2, #0
 8019504:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019508:	2303      	movs	r3, #3
 801950a:	e018      	b.n	801953e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8019512:	b29b      	uxth	r3, r3
 8019514:	2b00      	cmp	r3, #0
 8019516:	d1b6      	bne.n	8019486 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8019518:	68f8      	ldr	r0, [r7, #12]
 801951a:	f000 f821 	bl	8019560 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	2201      	movs	r2, #1
 8019522:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	2200      	movs	r2, #0
 801952a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019534:	2b00      	cmp	r3, #0
 8019536:	d001      	beq.n	801953c <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 8019538:	2301      	movs	r3, #1
 801953a:	e000      	b.n	801953e <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 801953c:	2300      	movs	r3, #0
  }
}
 801953e:	4618      	mov	r0, r3
 8019540:	3718      	adds	r7, #24
 8019542:	46bd      	mov	sp, r7
 8019544:	bd80      	pop	{r7, pc}
 8019546:	bf00      	nop
 8019548:	40013000 	.word	0x40013000
 801954c:	50013000 	.word	0x50013000
 8019550:	40003800 	.word	0x40003800
 8019554:	50003800 	.word	0x50003800
 8019558:	40003c00 	.word	0x40003c00
 801955c:	50003c00 	.word	0x50003c00

08019560 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8019560:	b480      	push	{r7}
 8019562:	b085      	sub	sp, #20
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	695b      	ldr	r3, [r3, #20]
 801956e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	699a      	ldr	r2, [r3, #24]
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	f042 0208 	orr.w	r2, r2, #8
 801957e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	699a      	ldr	r2, [r3, #24]
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	f042 0210 	orr.w	r2, r2, #16
 801958e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	f022 0201 	bic.w	r2, r2, #1
 801959e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	691b      	ldr	r3, [r3, #16]
 80195a6:	687a      	ldr	r2, [r7, #4]
 80195a8:	6812      	ldr	r2, [r2, #0]
 80195aa:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80195ae:	f023 0303 	bic.w	r3, r3, #3
 80195b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	689a      	ldr	r2, [r3, #8]
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80195c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	2b04      	cmp	r3, #4
 80195ce:	d014      	beq.n	80195fa <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	f003 0320 	and.w	r3, r3, #32
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d00f      	beq.n	80195fa <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80195e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	699a      	ldr	r2, [r3, #24]
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	f042 0220 	orr.w	r2, r2, #32
 80195f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8019600:	b2db      	uxtb	r3, r3
 8019602:	2b03      	cmp	r3, #3
 8019604:	d014      	beq.n	8019630 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801960c:	2b00      	cmp	r3, #0
 801960e:	d00f      	beq.n	8019630 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019616:	f043 0204 	orr.w	r2, r3, #4
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	699a      	ldr	r2, [r3, #24]
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801962e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019636:	2b00      	cmp	r3, #0
 8019638:	d00f      	beq.n	801965a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019640:	f043 0201 	orr.w	r2, r3, #1
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	699a      	ldr	r2, [r3, #24]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019658:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019660:	2b00      	cmp	r3, #0
 8019662:	d00f      	beq.n	8019684 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801966a:	f043 0208 	orr.w	r2, r3, #8
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	699a      	ldr	r2, [r3, #24]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019682:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2200      	movs	r2, #0
 8019688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2200      	movs	r2, #0
 8019690:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8019694:	bf00      	nop
 8019696:	3714      	adds	r7, #20
 8019698:	46bd      	mov	sp, r7
 801969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969e:	4770      	bx	lr

080196a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b084      	sub	sp, #16
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	60f8      	str	r0, [r7, #12]
 80196a8:	60b9      	str	r1, [r7, #8]
 80196aa:	603b      	str	r3, [r7, #0]
 80196ac:	4613      	mov	r3, r2
 80196ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80196b0:	e010      	b.n	80196d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80196b2:	f7f7 ff21 	bl	80114f8 <HAL_GetTick>
 80196b6:	4602      	mov	r2, r0
 80196b8:	69bb      	ldr	r3, [r7, #24]
 80196ba:	1ad3      	subs	r3, r2, r3
 80196bc:	683a      	ldr	r2, [r7, #0]
 80196be:	429a      	cmp	r2, r3
 80196c0:	d803      	bhi.n	80196ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 80196c2:	683b      	ldr	r3, [r7, #0]
 80196c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196c8:	d102      	bne.n	80196d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d101      	bne.n	80196d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80196d0:	2303      	movs	r3, #3
 80196d2:	e00f      	b.n	80196f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	695a      	ldr	r2, [r3, #20]
 80196da:	68bb      	ldr	r3, [r7, #8]
 80196dc:	4013      	ands	r3, r2
 80196de:	68ba      	ldr	r2, [r7, #8]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	bf0c      	ite	eq
 80196e4:	2301      	moveq	r3, #1
 80196e6:	2300      	movne	r3, #0
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	461a      	mov	r2, r3
 80196ec:	79fb      	ldrb	r3, [r7, #7]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	d0df      	beq.n	80196b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80196f2:	2300      	movs	r3, #0
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3710      	adds	r7, #16
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80196fc:	b480      	push	{r7}
 80196fe:	b085      	sub	sp, #20
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019708:	095b      	lsrs	r3, r3, #5
 801970a:	3301      	adds	r3, #1
 801970c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	68db      	ldr	r3, [r3, #12]
 8019712:	3301      	adds	r3, #1
 8019714:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8019716:	68bb      	ldr	r3, [r7, #8]
 8019718:	3307      	adds	r3, #7
 801971a:	08db      	lsrs	r3, r3, #3
 801971c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801971e:	68bb      	ldr	r3, [r7, #8]
 8019720:	68fa      	ldr	r2, [r7, #12]
 8019722:	fb02 f303 	mul.w	r3, r2, r3
}
 8019726:	4618      	mov	r0, r3
 8019728:	3714      	adds	r7, #20
 801972a:	46bd      	mov	sp, r7
 801972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019730:	4770      	bx	lr
	...

08019734 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b084      	sub	sp, #16
 8019738:	af00      	add	r7, sp, #0
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d101      	bne.n	801974a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8019746:	2301      	movs	r3, #1
 8019748:	e03e      	b.n	80197c8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019750:	b2db      	uxtb	r3, r3
 8019752:	2b00      	cmp	r3, #0
 8019754:	d106      	bne.n	8019764 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	2200      	movs	r2, #0
 801975a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 801975e:	68f8      	ldr	r0, [r7, #12]
 8019760:	f7f7 fc2a 	bl	8010fb8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	681a      	ldr	r2, [r3, #0]
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	3308      	adds	r3, #8
 801976c:	4619      	mov	r1, r3
 801976e:	4610      	mov	r0, r2
 8019770:	f002 fb3e 	bl	801bdf0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	6818      	ldr	r0, [r3, #0]
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	689b      	ldr	r3, [r3, #8]
 801977c:	461a      	mov	r2, r3
 801977e:	68b9      	ldr	r1, [r7, #8]
 8019780:	f002 fc04 	bl	801bf8c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	6858      	ldr	r0, [r3, #4]
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	689a      	ldr	r2, [r3, #8]
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019790:	6879      	ldr	r1, [r7, #4]
 8019792:	f002 fc48 	bl	801c026 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	68fa      	ldr	r2, [r7, #12]
 801979c:	6892      	ldr	r2, [r2, #8]
 801979e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	68fa      	ldr	r2, [r7, #12]
 80197a8:	6892      	ldr	r2, [r2, #8]
 80197aa:	f041 0101 	orr.w	r1, r1, #1
 80197ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80197b2:	4b07      	ldr	r3, [pc, #28]	@ (80197d0 <HAL_SRAM_Init+0x9c>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	4a06      	ldr	r2, [pc, #24]	@ (80197d0 <HAL_SRAM_Init+0x9c>)
 80197b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80197bc:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	2201      	movs	r2, #1
 80197c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80197c6:	2300      	movs	r3, #0
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3710      	adds	r7, #16
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	47000400 	.word	0x47000400

080197d4 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 80197d4:	b480      	push	{r7}
 80197d6:	b08b      	sub	sp, #44	@ 0x2c
 80197d8:	af00      	add	r7, sp, #0
 80197da:	60f8      	str	r0, [r7, #12]
 80197dc:	60b9      	str	r1, [r7, #8]
 80197de:	607a      	str	r2, [r7, #4]
 80197e0:	603b      	str	r3, [r7, #0]
  uint32_t size;
  uint32_t time_out = 0 ;
 80197e2:	2300      	movs	r3, #0
 80197e4:	623b      	str	r3, [r7, #32]
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	61fb      	str	r3, [r7, #28]
  uint8_t *pdestbuff = pDstBuffer;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	61bb      	str	r3, [r7, #24]
  HAL_SRAM_StateTypeDef state = hsram->State;
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80197f4:	75fb      	strb	r3, [r7, #23]


  while(*psramaddress == 0xFF && time_out++ < 0xFFFF0 );
 80197f6:	bf00      	nop
 80197f8:	69fb      	ldr	r3, [r7, #28]
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	2bff      	cmp	r3, #255	@ 0xff
 8019800:	d105      	bne.n	801980e <HAL_SRAM_Read_8b+0x3a>
 8019802:	6a3b      	ldr	r3, [r7, #32]
 8019804:	1c5a      	adds	r2, r3, #1
 8019806:	623a      	str	r2, [r7, #32]
 8019808:	4a1e      	ldr	r2, [pc, #120]	@ (8019884 <HAL_SRAM_Read_8b+0xb0>)
 801980a:	4293      	cmp	r3, r2
 801980c:	d9f4      	bls.n	80197f8 <HAL_SRAM_Read_8b+0x24>
  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 801980e:	7dfb      	ldrb	r3, [r7, #23]
 8019810:	2b01      	cmp	r3, #1
 8019812:	d002      	beq.n	801981a <HAL_SRAM_Read_8b+0x46>
 8019814:	7dfb      	ldrb	r3, [r7, #23]
 8019816:	2b04      	cmp	r3, #4
 8019818:	d12c      	bne.n	8019874 <HAL_SRAM_Read_8b+0xa0>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8019820:	2b01      	cmp	r3, #1
 8019822:	d101      	bne.n	8019828 <HAL_SRAM_Read_8b+0x54>
 8019824:	2302      	movs	r3, #2
 8019826:	e026      	b.n	8019876 <HAL_SRAM_Read_8b+0xa2>
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	2201      	movs	r2, #1
 801982c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	2202      	movs	r2, #2
 8019834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	627b      	str	r3, [r7, #36]	@ 0x24
 801983c:	e00d      	b.n	801985a <HAL_SRAM_Read_8b+0x86>
    {
      *pdestbuff = *psramaddress;
 801983e:	69fb      	ldr	r3, [r7, #28]
 8019840:	781b      	ldrb	r3, [r3, #0]
 8019842:	b2da      	uxtb	r2, r3
 8019844:	69bb      	ldr	r3, [r7, #24]
 8019846:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	3301      	adds	r3, #1
 801984c:	61bb      	str	r3, [r7, #24]
      psramaddress++;
 801984e:	69fb      	ldr	r3, [r7, #28]
 8019850:	3301      	adds	r3, #1
 8019852:	61fb      	str	r3, [r7, #28]
    for (size = BufferSize; size != 0U; size--)
 8019854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019856:	3b01      	subs	r3, #1
 8019858:	627b      	str	r3, [r7, #36]	@ 0x24
 801985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801985c:	2b00      	cmp	r3, #0
 801985e:	d1ee      	bne.n	801983e <HAL_SRAM_Read_8b+0x6a>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	7dfa      	ldrb	r2, [r7, #23]
 8019864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	2200      	movs	r2, #0
 801986c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8019870:	2300      	movs	r3, #0
 8019872:	e000      	b.n	8019876 <HAL_SRAM_Read_8b+0xa2>
    return HAL_ERROR;
 8019874:	2301      	movs	r3, #1
}
 8019876:	4618      	mov	r0, r3
 8019878:	372c      	adds	r7, #44	@ 0x2c
 801987a:	46bd      	mov	sp, r7
 801987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop
 8019884:	000fffef 	.word	0x000fffef

08019888 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 8019888:	b480      	push	{r7}
 801988a:	b089      	sub	sp, #36	@ 0x24
 801988c:	af00      	add	r7, sp, #0
 801988e:	60f8      	str	r0, [r7, #12]
 8019890:	60b9      	str	r1, [r7, #8]
 8019892:	607a      	str	r2, [r7, #4]
 8019894:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80198a4:	b2db      	uxtb	r3, r3
 80198a6:	2b01      	cmp	r3, #1
 80198a8:	d12b      	bne.n	8019902 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80198b0:	2b01      	cmp	r3, #1
 80198b2:	d101      	bne.n	80198b8 <HAL_SRAM_Write_8b+0x30>
 80198b4:	2302      	movs	r3, #2
 80198b6:	e025      	b.n	8019904 <HAL_SRAM_Write_8b+0x7c>
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	2201      	movs	r2, #1
 80198bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	2202      	movs	r2, #2
 80198c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 80198c8:	683b      	ldr	r3, [r7, #0]
 80198ca:	61fb      	str	r3, [r7, #28]
 80198cc:	e00c      	b.n	80198e8 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 80198ce:	697b      	ldr	r3, [r7, #20]
 80198d0:	781a      	ldrb	r2, [r3, #0]
 80198d2:	69bb      	ldr	r3, [r7, #24]
 80198d4:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 80198d6:	697b      	ldr	r3, [r7, #20]
 80198d8:	3301      	adds	r3, #1
 80198da:	617b      	str	r3, [r7, #20]
      psramaddress++;
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	3301      	adds	r3, #1
 80198e0:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 80198e2:	69fb      	ldr	r3, [r7, #28]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	61fb      	str	r3, [r7, #28]
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d1ef      	bne.n	80198ce <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	2201      	movs	r2, #1
 80198f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	2200      	movs	r2, #0
 80198fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80198fe:	2300      	movs	r3, #0
 8019900:	e000      	b.n	8019904 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 8019902:	2301      	movs	r3, #1
}
 8019904:	4618      	mov	r0, r3
 8019906:	3724      	adds	r7, #36	@ 0x24
 8019908:	46bd      	mov	sp, r7
 801990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990e:	4770      	bx	lr

08019910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b082      	sub	sp, #8
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d101      	bne.n	8019922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801991e:	2301      	movs	r3, #1
 8019920:	e042      	b.n	80199a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019928:	2b00      	cmp	r3, #0
 801992a:	d106      	bne.n	801993a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	2200      	movs	r2, #0
 8019930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019934:	6878      	ldr	r0, [r7, #4]
 8019936:	f7f7 f8ad 	bl	8010a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	2224      	movs	r2, #36	@ 0x24
 801993e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	681a      	ldr	r2, [r3, #0]
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	f022 0201 	bic.w	r2, r2, #1
 8019950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019956:	2b00      	cmp	r3, #0
 8019958:	d002      	beq.n	8019960 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f000 fec8 	bl	801a6f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f000 fcd7 	bl	801a314 <UART_SetConfig>
 8019966:	4603      	mov	r3, r0
 8019968:	2b01      	cmp	r3, #1
 801996a:	d101      	bne.n	8019970 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801996c:	2301      	movs	r3, #1
 801996e:	e01b      	b.n	80199a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	685a      	ldr	r2, [r3, #4]
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801997e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	689a      	ldr	r2, [r3, #8]
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801998e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	681a      	ldr	r2, [r3, #0]
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	f042 0201 	orr.w	r2, r2, #1
 801999e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f000 ff47 	bl	801a834 <UART_CheckIdleState>
 80199a6:	4603      	mov	r3, r0
}
 80199a8:	4618      	mov	r0, r3
 80199aa:	3708      	adds	r7, #8
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}

080199b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b08a      	sub	sp, #40	@ 0x28
 80199b4:	af02      	add	r7, sp, #8
 80199b6:	60f8      	str	r0, [r7, #12]
 80199b8:	60b9      	str	r1, [r7, #8]
 80199ba:	603b      	str	r3, [r7, #0]
 80199bc:	4613      	mov	r3, r2
 80199be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80199c6:	2b20      	cmp	r3, #32
 80199c8:	f040 808b 	bne.w	8019ae2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d002      	beq.n	80199d8 <HAL_UART_Transmit+0x28>
 80199d2:	88fb      	ldrh	r3, [r7, #6]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d101      	bne.n	80199dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80199d8:	2301      	movs	r3, #1
 80199da:	e083      	b.n	8019ae4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	689b      	ldr	r3, [r3, #8]
 80199e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80199e6:	2b80      	cmp	r3, #128	@ 0x80
 80199e8:	d107      	bne.n	80199fa <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	689a      	ldr	r2, [r3, #8]
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80199f8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	2200      	movs	r2, #0
 80199fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	2221      	movs	r2, #33	@ 0x21
 8019a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019a0a:	f7f7 fd75 	bl	80114f8 <HAL_GetTick>
 8019a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	88fa      	ldrh	r2, [r7, #6]
 8019a14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	88fa      	ldrh	r2, [r7, #6]
 8019a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	689b      	ldr	r3, [r3, #8]
 8019a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a28:	d108      	bne.n	8019a3c <HAL_UART_Transmit+0x8c>
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	691b      	ldr	r3, [r3, #16]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d104      	bne.n	8019a3c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8019a32:	2300      	movs	r3, #0
 8019a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019a36:	68bb      	ldr	r3, [r7, #8]
 8019a38:	61bb      	str	r3, [r7, #24]
 8019a3a:	e003      	b.n	8019a44 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019a40:	2300      	movs	r3, #0
 8019a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8019a44:	e030      	b.n	8019aa8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019a46:	683b      	ldr	r3, [r7, #0]
 8019a48:	9300      	str	r3, [sp, #0]
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	2180      	movs	r1, #128	@ 0x80
 8019a50:	68f8      	ldr	r0, [r7, #12]
 8019a52:	f000 ff99 	bl	801a988 <UART_WaitOnFlagUntilTimeout>
 8019a56:	4603      	mov	r3, r0
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d005      	beq.n	8019a68 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	2220      	movs	r2, #32
 8019a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8019a64:	2303      	movs	r3, #3
 8019a66:	e03d      	b.n	8019ae4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d10b      	bne.n	8019a86 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	881b      	ldrh	r3, [r3, #0]
 8019a72:	461a      	mov	r2, r3
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019a7e:	69bb      	ldr	r3, [r7, #24]
 8019a80:	3302      	adds	r3, #2
 8019a82:	61bb      	str	r3, [r7, #24]
 8019a84:	e007      	b.n	8019a96 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019a86:	69fb      	ldr	r3, [r7, #28]
 8019a88:	781a      	ldrb	r2, [r3, #0]
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	3301      	adds	r3, #1
 8019a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a9c:	b29b      	uxth	r3, r3
 8019a9e:	3b01      	subs	r3, #1
 8019aa0:	b29a      	uxth	r2, r3
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019aae:	b29b      	uxth	r3, r3
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d1c8      	bne.n	8019a46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	9300      	str	r3, [sp, #0]
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	2200      	movs	r2, #0
 8019abc:	2140      	movs	r1, #64	@ 0x40
 8019abe:	68f8      	ldr	r0, [r7, #12]
 8019ac0:	f000 ff62 	bl	801a988 <UART_WaitOnFlagUntilTimeout>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d005      	beq.n	8019ad6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	2220      	movs	r2, #32
 8019ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8019ad2:	2303      	movs	r3, #3
 8019ad4:	e006      	b.n	8019ae4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	2220      	movs	r2, #32
 8019ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8019ade:	2300      	movs	r3, #0
 8019ae0:	e000      	b.n	8019ae4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8019ae2:	2302      	movs	r3, #2
  }
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3720      	adds	r7, #32
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}

08019aec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8019aec:	b480      	push	{r7}
 8019aee:	b091      	sub	sp, #68	@ 0x44
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	60f8      	str	r0, [r7, #12]
 8019af4:	60b9      	str	r1, [r7, #8]
 8019af6:	4613      	mov	r3, r2
 8019af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b00:	2b20      	cmp	r3, #32
 8019b02:	f040 8088 	bne.w	8019c16 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8019b06:	68bb      	ldr	r3, [r7, #8]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d002      	beq.n	8019b12 <HAL_UART_Transmit_IT+0x26>
 8019b0c:	88fb      	ldrh	r3, [r7, #6]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d101      	bne.n	8019b16 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8019b12:	2301      	movs	r3, #1
 8019b14:	e080      	b.n	8019c18 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	689b      	ldr	r3, [r3, #8]
 8019b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019b20:	2b80      	cmp	r3, #128	@ 0x80
 8019b22:	d107      	bne.n	8019b34 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	689a      	ldr	r2, [r3, #8]
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019b32:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	68ba      	ldr	r2, [r7, #8]
 8019b38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	88fa      	ldrh	r2, [r7, #6]
 8019b3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	88fa      	ldrh	r2, [r7, #6]
 8019b46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	2200      	movs	r2, #0
 8019b4e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	2200      	movs	r2, #0
 8019b54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	2221      	movs	r2, #33	@ 0x21
 8019b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b68:	d12a      	bne.n	8019bc0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	689b      	ldr	r3, [r3, #8]
 8019b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b72:	d107      	bne.n	8019b84 <HAL_UART_Transmit_IT+0x98>
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	691b      	ldr	r3, [r3, #16]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d103      	bne.n	8019b84 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	4a29      	ldr	r2, [pc, #164]	@ (8019c24 <HAL_UART_Transmit_IT+0x138>)
 8019b80:	679a      	str	r2, [r3, #120]	@ 0x78
 8019b82:	e002      	b.n	8019b8a <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	4a28      	ldr	r2, [pc, #160]	@ (8019c28 <HAL_UART_Transmit_IT+0x13c>)
 8019b88:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	3308      	adds	r3, #8
 8019b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b94:	e853 3f00 	ldrex	r3, [r3]
 8019b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	3308      	adds	r3, #8
 8019ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019baa:	637a      	str	r2, [r7, #52]	@ 0x34
 8019bac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019bb2:	e841 2300 	strex	r3, r2, [r1]
 8019bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d1e5      	bne.n	8019b8a <HAL_UART_Transmit_IT+0x9e>
 8019bbe:	e028      	b.n	8019c12 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	689b      	ldr	r3, [r3, #8]
 8019bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019bc8:	d107      	bne.n	8019bda <HAL_UART_Transmit_IT+0xee>
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	691b      	ldr	r3, [r3, #16]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d103      	bne.n	8019bda <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	4a15      	ldr	r2, [pc, #84]	@ (8019c2c <HAL_UART_Transmit_IT+0x140>)
 8019bd6:	679a      	str	r2, [r3, #120]	@ 0x78
 8019bd8:	e002      	b.n	8019be0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	4a14      	ldr	r2, [pc, #80]	@ (8019c30 <HAL_UART_Transmit_IT+0x144>)
 8019bde:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	e853 3f00 	ldrex	r3, [r3]
 8019bec:	613b      	str	r3, [r7, #16]
   return(result);
 8019bee:	693b      	ldr	r3, [r7, #16]
 8019bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	461a      	mov	r2, r3
 8019bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bfe:	623b      	str	r3, [r7, #32]
 8019c00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c02:	69f9      	ldr	r1, [r7, #28]
 8019c04:	6a3a      	ldr	r2, [r7, #32]
 8019c06:	e841 2300 	strex	r3, r2, [r1]
 8019c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c0c:	69bb      	ldr	r3, [r7, #24]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d1e6      	bne.n	8019be0 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 8019c12:	2300      	movs	r3, #0
 8019c14:	e000      	b.n	8019c18 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8019c16:	2302      	movs	r3, #2
  }
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3744      	adds	r7, #68	@ 0x44
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c22:	4770      	bx	lr
 8019c24:	0801affb 	.word	0x0801affb
 8019c28:	0801af1b 	.word	0x0801af1b
 8019c2c:	0801ae59 	.word	0x0801ae59
 8019c30:	0801ada1 	.word	0x0801ada1

08019c34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b08a      	sub	sp, #40	@ 0x28
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	4613      	mov	r3, r2
 8019c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019c48:	2b20      	cmp	r3, #32
 8019c4a:	d14b      	bne.n	8019ce4 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d002      	beq.n	8019c58 <HAL_UART_Receive_IT+0x24>
 8019c52:	88fb      	ldrh	r3, [r7, #6]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d101      	bne.n	8019c5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8019c58:	2301      	movs	r3, #1
 8019c5a:	e044      	b.n	8019ce6 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2200      	movs	r2, #0
 8019c60:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	689b      	ldr	r3, [r3, #8]
 8019c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019c6c:	2b40      	cmp	r3, #64	@ 0x40
 8019c6e:	d107      	bne.n	8019c80 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	689a      	ldr	r2, [r3, #8]
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8019c7e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	4a1a      	ldr	r2, [pc, #104]	@ (8019cf0 <HAL_UART_Receive_IT+0xbc>)
 8019c86:	4293      	cmp	r3, r2
 8019c88:	d024      	beq.n	8019cd4 <HAL_UART_Receive_IT+0xa0>
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	4a19      	ldr	r2, [pc, #100]	@ (8019cf4 <HAL_UART_Receive_IT+0xc0>)
 8019c90:	4293      	cmp	r3, r2
 8019c92:	d01f      	beq.n	8019cd4 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	685b      	ldr	r3, [r3, #4]
 8019c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d018      	beq.n	8019cd4 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ca8:	697b      	ldr	r3, [r7, #20]
 8019caa:	e853 3f00 	ldrex	r3, [r3]
 8019cae:	613b      	str	r3, [r7, #16]
   return(result);
 8019cb0:	693b      	ldr	r3, [r7, #16]
 8019cb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8019cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cc0:	623b      	str	r3, [r7, #32]
 8019cc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cc4:	69f9      	ldr	r1, [r7, #28]
 8019cc6:	6a3a      	ldr	r2, [r7, #32]
 8019cc8:	e841 2300 	strex	r3, r2, [r1]
 8019ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8019cce:	69bb      	ldr	r3, [r7, #24]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d1e6      	bne.n	8019ca2 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019cd4:	88fb      	ldrh	r3, [r7, #6]
 8019cd6:	461a      	mov	r2, r3
 8019cd8:	68b9      	ldr	r1, [r7, #8]
 8019cda:	68f8      	ldr	r0, [r7, #12]
 8019cdc:	f000 fec2 	bl	801aa64 <UART_Start_Receive_IT>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	e000      	b.n	8019ce6 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8019ce4:	2302      	movs	r3, #2
  }
}
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	3728      	adds	r7, #40	@ 0x28
 8019cea:	46bd      	mov	sp, r7
 8019cec:	bd80      	pop	{r7, pc}
 8019cee:	bf00      	nop
 8019cf0:	44002400 	.word	0x44002400
 8019cf4:	54002400 	.word	0x54002400

08019cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b0ae      	sub	sp, #184	@ 0xb8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	69db      	ldr	r3, [r3, #28]
 8019d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	689b      	ldr	r3, [r3, #8]
 8019d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8019d22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8019d26:	4013      	ands	r3, r2
 8019d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8019d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d11b      	bne.n	8019d6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019d38:	f003 0320 	and.w	r3, r3, #32
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d015      	beq.n	8019d6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019d44:	f003 0320 	and.w	r3, r3, #32
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d105      	bne.n	8019d58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d009      	beq.n	8019d6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	f000 82ac 	beq.w	801a2ba <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d66:	6878      	ldr	r0, [r7, #4]
 8019d68:	4798      	blx	r3
      }
      return;
 8019d6a:	e2a6      	b.n	801a2ba <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	f000 80fd 	beq.w	8019f70 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8019d76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8019d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8019f64 <HAL_UART_IRQHandler+0x26c>)
 8019d7c:	4013      	ands	r3, r2
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d106      	bne.n	8019d90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8019d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8019d86:	4b78      	ldr	r3, [pc, #480]	@ (8019f68 <HAL_UART_IRQHandler+0x270>)
 8019d88:	4013      	ands	r3, r2
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	f000 80f0 	beq.w	8019f70 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019d94:	f003 0301 	and.w	r3, r3, #1
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d011      	beq.n	8019dc0 <HAL_UART_IRQHandler+0xc8>
 8019d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d00b      	beq.n	8019dc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	2201      	movs	r2, #1
 8019dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019db6:	f043 0201 	orr.w	r2, r3, #1
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019dc4:	f003 0302 	and.w	r3, r3, #2
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d011      	beq.n	8019df0 <HAL_UART_IRQHandler+0xf8>
 8019dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019dd0:	f003 0301 	and.w	r3, r3, #1
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d00b      	beq.n	8019df0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	2202      	movs	r2, #2
 8019dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019de6:	f043 0204 	orr.w	r2, r3, #4
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019df4:	f003 0304 	and.w	r3, r3, #4
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d011      	beq.n	8019e20 <HAL_UART_IRQHandler+0x128>
 8019dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019e00:	f003 0301 	and.w	r3, r3, #1
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d00b      	beq.n	8019e20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2204      	movs	r2, #4
 8019e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e16:	f043 0202 	orr.w	r2, r3, #2
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019e20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e24:	f003 0308 	and.w	r3, r3, #8
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d017      	beq.n	8019e5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019e30:	f003 0320 	and.w	r3, r3, #32
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d105      	bne.n	8019e44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8019e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8019e3c:	4b49      	ldr	r3, [pc, #292]	@ (8019f64 <HAL_UART_IRQHandler+0x26c>)
 8019e3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d00b      	beq.n	8019e5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2208      	movs	r2, #8
 8019e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e52:	f043 0208 	orr.w	r2, r3, #8
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d012      	beq.n	8019e8e <HAL_UART_IRQHandler+0x196>
 8019e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d00c      	beq.n	8019e8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e84:	f043 0220 	orr.w	r2, r3, #32
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	f000 8212 	beq.w	801a2be <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e9e:	f003 0320 	and.w	r3, r3, #32
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d013      	beq.n	8019ece <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019ea6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019eaa:	f003 0320 	and.w	r3, r3, #32
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d105      	bne.n	8019ebe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d007      	beq.n	8019ece <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d003      	beq.n	8019ece <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	689b      	ldr	r3, [r3, #8]
 8019ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019ee2:	2b40      	cmp	r3, #64	@ 0x40
 8019ee4:	d005      	beq.n	8019ef2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019eea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d02e      	beq.n	8019f50 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f000 fed8 	bl	801aca8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	689b      	ldr	r3, [r3, #8]
 8019efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019f02:	2b40      	cmp	r3, #64	@ 0x40
 8019f04:	d120      	bne.n	8019f48 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d017      	beq.n	8019f40 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f16:	4a15      	ldr	r2, [pc, #84]	@ (8019f6c <HAL_UART_IRQHandler+0x274>)
 8019f18:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f20:	4618      	mov	r0, r3
 8019f22:	f7f7 fd25 	bl	8011970 <HAL_DMA_Abort_IT>
 8019f26:	4603      	mov	r3, r0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d019      	beq.n	8019f60 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f34:	687a      	ldr	r2, [r7, #4]
 8019f36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8019f3a:	4610      	mov	r0, r2
 8019f3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f3e:	e00f      	b.n	8019f60 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8019f40:	6878      	ldr	r0, [r7, #4]
 8019f42:	f000 f9d1 	bl	801a2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f46:	e00b      	b.n	8019f60 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019f48:	6878      	ldr	r0, [r7, #4]
 8019f4a:	f000 f9cd 	bl	801a2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f4e:	e007      	b.n	8019f60 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8019f50:	6878      	ldr	r0, [r7, #4]
 8019f52:	f000 f9c9 	bl	801a2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	2200      	movs	r2, #0
 8019f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8019f5e:	e1ae      	b.n	801a2be <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f60:	bf00      	nop
    return;
 8019f62:	e1ac      	b.n	801a2be <HAL_UART_IRQHandler+0x5c6>
 8019f64:	10000001 	.word	0x10000001
 8019f68:	04000120 	.word	0x04000120
 8019f6c:	0801ad75 	.word	0x0801ad75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f74:	2b01      	cmp	r3, #1
 8019f76:	f040 8142 	bne.w	801a1fe <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f7e:	f003 0310 	and.w	r3, r3, #16
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	f000 813b 	beq.w	801a1fe <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019f8c:	f003 0310 	and.w	r3, r3, #16
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	f000 8134 	beq.w	801a1fe <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	2210      	movs	r2, #16
 8019f9c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	689b      	ldr	r3, [r3, #8]
 8019fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019fa8:	2b40      	cmp	r3, #64	@ 0x40
 8019faa:	f040 80aa 	bne.w	801a102 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019fb8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8019fbc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	f000 8084 	beq.w	801a0ce <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019fcc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8019fd0:	429a      	cmp	r2, r3
 8019fd2:	d27c      	bcs.n	801a0ce <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8019fda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fe6:	2b81      	cmp	r3, #129	@ 0x81
 8019fe8:	d060      	beq.n	801a0ac <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ff0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019ff2:	e853 3f00 	ldrex	r3, [r3]
 8019ff6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8019ff8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019ffa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	461a      	mov	r2, r3
 801a008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a00c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a010:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a012:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a014:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a018:	e841 2300 	strex	r3, r2, [r1]
 801a01c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a01e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a020:	2b00      	cmp	r3, #0
 801a022:	d1e2      	bne.n	8019fea <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	3308      	adds	r3, #8
 801a02a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a02c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a02e:	e853 3f00 	ldrex	r3, [r3]
 801a032:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a036:	f023 0301 	bic.w	r3, r3, #1
 801a03a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	3308      	adds	r3, #8
 801a044:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a048:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a04a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a04c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a04e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a050:	e841 2300 	strex	r3, r2, [r1]
 801a054:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d1e3      	bne.n	801a024 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2220      	movs	r2, #32
 801a060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2200      	movs	r2, #0
 801a068:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a072:	e853 3f00 	ldrex	r3, [r3]
 801a076:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a07a:	f023 0310 	bic.w	r3, r3, #16
 801a07e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	461a      	mov	r2, r3
 801a088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a08c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a08e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a090:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a092:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a094:	e841 2300 	strex	r3, r2, [r1]
 801a098:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a09a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d1e4      	bne.n	801a06a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7f7 fbe6 	bl	8011878 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2202      	movs	r2, #2
 801a0b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	1ad3      	subs	r3, r2, r3
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	6878      	ldr	r0, [r7, #4]
 801a0c8:	f000 f918 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801a0cc:	e0f9      	b.n	801a2c2 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a0d4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 801a0d8:	429a      	cmp	r2, r3
 801a0da:	f040 80f2 	bne.w	801a2c2 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a0e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0e6:	2b81      	cmp	r3, #129	@ 0x81
 801a0e8:	f040 80eb 	bne.w	801a2c2 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	2202      	movs	r2, #2
 801a0f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a0f8:	4619      	mov	r1, r3
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f000 f8fe 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
      return;
 801a100:	e0df      	b.n	801a2c2 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a10e:	b29b      	uxth	r3, r3
 801a110:	1ad3      	subs	r3, r2, r3
 801a112:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	2b00      	cmp	r3, #0
 801a120:	f000 80d1 	beq.w	801a2c6 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 801a124:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 801a128:	2b00      	cmp	r3, #0
 801a12a:	f000 80cc 	beq.w	801a2c6 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a136:	e853 3f00 	ldrex	r3, [r3]
 801a13a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a13e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	461a      	mov	r2, r3
 801a14c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a150:	647b      	str	r3, [r7, #68]	@ 0x44
 801a152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a158:	e841 2300 	strex	r3, r2, [r1]
 801a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a160:	2b00      	cmp	r3, #0
 801a162:	d1e4      	bne.n	801a12e <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	3308      	adds	r3, #8
 801a16a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16e:	e853 3f00 	ldrex	r3, [r3]
 801a172:	623b      	str	r3, [r7, #32]
   return(result);
 801a174:	6a3b      	ldr	r3, [r7, #32]
 801a176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a17a:	f023 0301 	bic.w	r3, r3, #1
 801a17e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	3308      	adds	r3, #8
 801a188:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a18c:	633a      	str	r2, [r7, #48]	@ 0x30
 801a18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a190:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a194:	e841 2300 	strex	r3, r2, [r1]
 801a198:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d1e1      	bne.n	801a164 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	2220      	movs	r2, #32
 801a1a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ba:	693b      	ldr	r3, [r7, #16]
 801a1bc:	e853 3f00 	ldrex	r3, [r3]
 801a1c0:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	f023 0310 	bic.w	r3, r3, #16
 801a1c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	461a      	mov	r2, r3
 801a1d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a1d6:	61fb      	str	r3, [r7, #28]
 801a1d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1da:	69b9      	ldr	r1, [r7, #24]
 801a1dc:	69fa      	ldr	r2, [r7, #28]
 801a1de:	e841 2300 	strex	r3, r2, [r1]
 801a1e2:	617b      	str	r3, [r7, #20]
   return(result);
 801a1e4:	697b      	ldr	r3, [r7, #20]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d1e4      	bne.n	801a1b4 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	2202      	movs	r2, #2
 801a1ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801a1f0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 801a1f4:	4619      	mov	r1, r3
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	f000 f880 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a1fc:	e063      	b.n	801a2c6 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a1fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a206:	2b00      	cmp	r3, #0
 801a208:	d00e      	beq.n	801a228 <HAL_UART_IRQHandler+0x530>
 801a20a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a20e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801a212:	2b00      	cmp	r3, #0
 801a214:	d008      	beq.n	801a228 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801a21e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801a220:	6878      	ldr	r0, [r7, #4]
 801a222:	f001 fcc3 	bl	801bbac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a226:	e051      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801a228:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a22c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a230:	2b00      	cmp	r3, #0
 801a232:	d014      	beq.n	801a25e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801a234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d105      	bne.n	801a24c <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801a240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d008      	beq.n	801a25e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a250:	2b00      	cmp	r3, #0
 801a252:	d03a      	beq.n	801a2ca <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a258:	6878      	ldr	r0, [r7, #4]
 801a25a:	4798      	blx	r3
    }
    return;
 801a25c:	e035      	b.n	801a2ca <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a25e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a266:	2b00      	cmp	r3, #0
 801a268:	d009      	beq.n	801a27e <HAL_UART_IRQHandler+0x586>
 801a26a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a272:	2b00      	cmp	r3, #0
 801a274:	d003      	beq.n	801a27e <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f000 ff34 	bl	801b0e4 <UART_EndTransmit_IT>
    return;
 801a27c:	e026      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801a27e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a286:	2b00      	cmp	r3, #0
 801a288:	d009      	beq.n	801a29e <HAL_UART_IRQHandler+0x5a6>
 801a28a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a28e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801a292:	2b00      	cmp	r3, #0
 801a294:	d003      	beq.n	801a29e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801a296:	6878      	ldr	r0, [r7, #4]
 801a298:	f001 fc9c 	bl	801bbd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a29c:	e016      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801a29e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a2a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d010      	beq.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
 801a2aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	da0c      	bge.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f001 fc84 	bl	801bbc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a2b8:	e008      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
      return;
 801a2ba:	bf00      	nop
 801a2bc:	e006      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
    return;
 801a2be:	bf00      	nop
 801a2c0:	e004      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
      return;
 801a2c2:	bf00      	nop
 801a2c4:	e002      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
      return;
 801a2c6:	bf00      	nop
 801a2c8:	e000      	b.n	801a2cc <HAL_UART_IRQHandler+0x5d4>
    return;
 801a2ca:	bf00      	nop
  }
}
 801a2cc:	37b8      	adds	r7, #184	@ 0xb8
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	bd80      	pop	{r7, pc}
 801a2d2:	bf00      	nop

0801a2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b083      	sub	sp, #12
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a2dc:	bf00      	nop
 801a2de:	370c      	adds	r7, #12
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e6:	4770      	bx	lr

0801a2e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a2e8:	b480      	push	{r7}
 801a2ea:	b083      	sub	sp, #12
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801a2f0:	bf00      	nop
 801a2f2:	370c      	adds	r7, #12
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fa:	4770      	bx	lr

0801a2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a2fc:	b480      	push	{r7}
 801a2fe:	b083      	sub	sp, #12
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
 801a304:	460b      	mov	r3, r1
 801a306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a308:	bf00      	nop
 801a30a:	370c      	adds	r7, #12
 801a30c:	46bd      	mov	sp, r7
 801a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a312:	4770      	bx	lr

0801a314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a318:	b094      	sub	sp, #80	@ 0x50
 801a31a:	af00      	add	r7, sp, #0
 801a31c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a31e:	2300      	movs	r3, #0
 801a320:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801a324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a326:	681a      	ldr	r2, [r3, #0]
 801a328:	4b78      	ldr	r3, [pc, #480]	@ (801a50c <UART_SetConfig+0x1f8>)
 801a32a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a32e:	689a      	ldr	r2, [r3, #8]
 801a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a332:	691b      	ldr	r3, [r3, #16]
 801a334:	431a      	orrs	r2, r3
 801a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a338:	695b      	ldr	r3, [r3, #20]
 801a33a:	431a      	orrs	r2, r3
 801a33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a33e:	69db      	ldr	r3, [r3, #28]
 801a340:	4313      	orrs	r3, r2
 801a342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	4971      	ldr	r1, [pc, #452]	@ (801a510 <UART_SetConfig+0x1fc>)
 801a34c:	4019      	ands	r1, r3
 801a34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a350:	681a      	ldr	r2, [r3, #0]
 801a352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a354:	430b      	orrs	r3, r1
 801a356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	685b      	ldr	r3, [r3, #4]
 801a35e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801a362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a364:	68d9      	ldr	r1, [r3, #12]
 801a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a368:	681a      	ldr	r2, [r3, #0]
 801a36a:	ea40 0301 	orr.w	r3, r0, r1
 801a36e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a372:	699b      	ldr	r3, [r3, #24]
 801a374:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a378:	681a      	ldr	r2, [r3, #0]
 801a37a:	4b64      	ldr	r3, [pc, #400]	@ (801a50c <UART_SetConfig+0x1f8>)
 801a37c:	429a      	cmp	r2, r3
 801a37e:	d009      	beq.n	801a394 <UART_SetConfig+0x80>
 801a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	4b63      	ldr	r3, [pc, #396]	@ (801a514 <UART_SetConfig+0x200>)
 801a386:	429a      	cmp	r2, r3
 801a388:	d004      	beq.n	801a394 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a38c:	6a1a      	ldr	r2, [r3, #32]
 801a38e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a390:	4313      	orrs	r3, r2
 801a392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	689b      	ldr	r3, [r3, #8]
 801a39a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801a39e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801a3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3a4:	681a      	ldr	r2, [r3, #0]
 801a3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3a8:	430b      	orrs	r3, r1
 801a3aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801a3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3b2:	f023 000f 	bic.w	r0, r3, #15
 801a3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801a3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3bc:	681a      	ldr	r2, [r3, #0]
 801a3be:	ea40 0301 	orr.w	r3, r0, r1
 801a3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3c6:	681a      	ldr	r2, [r3, #0]
 801a3c8:	4b53      	ldr	r3, [pc, #332]	@ (801a518 <UART_SetConfig+0x204>)
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d102      	bne.n	801a3d4 <UART_SetConfig+0xc0>
 801a3ce:	2301      	movs	r3, #1
 801a3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a3d2:	e066      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3d6:	681a      	ldr	r2, [r3, #0]
 801a3d8:	4b50      	ldr	r3, [pc, #320]	@ (801a51c <UART_SetConfig+0x208>)
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	d102      	bne.n	801a3e4 <UART_SetConfig+0xd0>
 801a3de:	2302      	movs	r3, #2
 801a3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a3e2:	e05e      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e6:	681a      	ldr	r2, [r3, #0]
 801a3e8:	4b4d      	ldr	r3, [pc, #308]	@ (801a520 <UART_SetConfig+0x20c>)
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d102      	bne.n	801a3f4 <UART_SetConfig+0xe0>
 801a3ee:	2304      	movs	r3, #4
 801a3f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a3f2:	e056      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3f6:	681a      	ldr	r2, [r3, #0]
 801a3f8:	4b4a      	ldr	r3, [pc, #296]	@ (801a524 <UART_SetConfig+0x210>)
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d102      	bne.n	801a404 <UART_SetConfig+0xf0>
 801a3fe:	2308      	movs	r3, #8
 801a400:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a402:	e04e      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a406:	681a      	ldr	r2, [r3, #0]
 801a408:	4b47      	ldr	r3, [pc, #284]	@ (801a528 <UART_SetConfig+0x214>)
 801a40a:	429a      	cmp	r2, r3
 801a40c:	d102      	bne.n	801a414 <UART_SetConfig+0x100>
 801a40e:	2310      	movs	r3, #16
 801a410:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a412:	e046      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a416:	681a      	ldr	r2, [r3, #0]
 801a418:	4b44      	ldr	r3, [pc, #272]	@ (801a52c <UART_SetConfig+0x218>)
 801a41a:	429a      	cmp	r2, r3
 801a41c:	d102      	bne.n	801a424 <UART_SetConfig+0x110>
 801a41e:	2320      	movs	r3, #32
 801a420:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a422:	e03e      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a426:	681a      	ldr	r2, [r3, #0]
 801a428:	4b41      	ldr	r3, [pc, #260]	@ (801a530 <UART_SetConfig+0x21c>)
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d102      	bne.n	801a434 <UART_SetConfig+0x120>
 801a42e:	2340      	movs	r3, #64	@ 0x40
 801a430:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a432:	e036      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a436:	681a      	ldr	r2, [r3, #0]
 801a438:	4b3e      	ldr	r3, [pc, #248]	@ (801a534 <UART_SetConfig+0x220>)
 801a43a:	429a      	cmp	r2, r3
 801a43c:	d102      	bne.n	801a444 <UART_SetConfig+0x130>
 801a43e:	2380      	movs	r3, #128	@ 0x80
 801a440:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a442:	e02e      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	4b3b      	ldr	r3, [pc, #236]	@ (801a538 <UART_SetConfig+0x224>)
 801a44a:	429a      	cmp	r2, r3
 801a44c:	d103      	bne.n	801a456 <UART_SetConfig+0x142>
 801a44e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a452:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a454:	e025      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a458:	681a      	ldr	r2, [r3, #0]
 801a45a:	4b38      	ldr	r3, [pc, #224]	@ (801a53c <UART_SetConfig+0x228>)
 801a45c:	429a      	cmp	r2, r3
 801a45e:	d103      	bne.n	801a468 <UART_SetConfig+0x154>
 801a460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a464:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a466:	e01c      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a46a:	681a      	ldr	r2, [r3, #0]
 801a46c:	4b34      	ldr	r3, [pc, #208]	@ (801a540 <UART_SetConfig+0x22c>)
 801a46e:	429a      	cmp	r2, r3
 801a470:	d103      	bne.n	801a47a <UART_SetConfig+0x166>
 801a472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a476:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a478:	e013      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a47c:	681a      	ldr	r2, [r3, #0]
 801a47e:	4b31      	ldr	r3, [pc, #196]	@ (801a544 <UART_SetConfig+0x230>)
 801a480:	429a      	cmp	r2, r3
 801a482:	d103      	bne.n	801a48c <UART_SetConfig+0x178>
 801a484:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a488:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a48a:	e00a      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a48e:	681a      	ldr	r2, [r3, #0]
 801a490:	4b1e      	ldr	r3, [pc, #120]	@ (801a50c <UART_SetConfig+0x1f8>)
 801a492:	429a      	cmp	r2, r3
 801a494:	d103      	bne.n	801a49e <UART_SetConfig+0x18a>
 801a496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a49a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a49c:	e001      	b.n	801a4a2 <UART_SetConfig+0x18e>
 801a49e:	2300      	movs	r3, #0
 801a4a0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	4b19      	ldr	r3, [pc, #100]	@ (801a50c <UART_SetConfig+0x1f8>)
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d005      	beq.n	801a4b8 <UART_SetConfig+0x1a4>
 801a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ae:	681a      	ldr	r2, [r3, #0]
 801a4b0:	4b18      	ldr	r3, [pc, #96]	@ (801a514 <UART_SetConfig+0x200>)
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	f040 8094 	bne.w	801a5e0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a4b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	623b      	str	r3, [r7, #32]
 801a4be:	627a      	str	r2, [r7, #36]	@ 0x24
 801a4c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a4c4:	f7fb fe92 	bl	80161ec <HAL_RCCEx_GetPeriphCLKFreq>
 801a4c8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801a4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	f000 80f7 	beq.w	801a6c0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4d6:	4a1c      	ldr	r2, [pc, #112]	@ (801a548 <UART_SetConfig+0x234>)
 801a4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a4dc:	461a      	mov	r2, r3
 801a4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 801a4e4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4e8:	685a      	ldr	r2, [r3, #4]
 801a4ea:	4613      	mov	r3, r2
 801a4ec:	005b      	lsls	r3, r3, #1
 801a4ee:	4413      	add	r3, r2
 801a4f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	d305      	bcc.n	801a502 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4f8:	685b      	ldr	r3, [r3, #4]
 801a4fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a4fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a4fe:	429a      	cmp	r2, r3
 801a500:	d924      	bls.n	801a54c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 801a502:	2301      	movs	r3, #1
 801a504:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a508:	e069      	b.n	801a5de <UART_SetConfig+0x2ca>
 801a50a:	bf00      	nop
 801a50c:	44002400 	.word	0x44002400
 801a510:	cfff69f3 	.word	0xcfff69f3
 801a514:	54002400 	.word	0x54002400
 801a518:	40013800 	.word	0x40013800
 801a51c:	40004400 	.word	0x40004400
 801a520:	40004800 	.word	0x40004800
 801a524:	40004c00 	.word	0x40004c00
 801a528:	40005000 	.word	0x40005000
 801a52c:	40006400 	.word	0x40006400
 801a530:	40007800 	.word	0x40007800
 801a534:	40007c00 	.word	0x40007c00
 801a538:	40008000 	.word	0x40008000
 801a53c:	40006800 	.word	0x40006800
 801a540:	40006c00 	.word	0x40006c00
 801a544:	40008400 	.word	0x40008400
 801a548:	0801f338 	.word	0x0801f338
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a54c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a54e:	2200      	movs	r2, #0
 801a550:	61bb      	str	r3, [r7, #24]
 801a552:	61fa      	str	r2, [r7, #28]
 801a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a558:	4a64      	ldr	r2, [pc, #400]	@ (801a6ec <UART_SetConfig+0x3d8>)
 801a55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a55e:	b29b      	uxth	r3, r3
 801a560:	2200      	movs	r2, #0
 801a562:	613b      	str	r3, [r7, #16]
 801a564:	617a      	str	r2, [r7, #20]
 801a566:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a56a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a56e:	f7f2 fb7b 	bl	800cc68 <__aeabi_uldivmod>
 801a572:	4602      	mov	r2, r0
 801a574:	460b      	mov	r3, r1
 801a576:	4610      	mov	r0, r2
 801a578:	4619      	mov	r1, r3
 801a57a:	f04f 0200 	mov.w	r2, #0
 801a57e:	f04f 0300 	mov.w	r3, #0
 801a582:	020b      	lsls	r3, r1, #8
 801a584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a588:	0202      	lsls	r2, r0, #8
 801a58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a58c:	6849      	ldr	r1, [r1, #4]
 801a58e:	0849      	lsrs	r1, r1, #1
 801a590:	2000      	movs	r0, #0
 801a592:	460c      	mov	r4, r1
 801a594:	4605      	mov	r5, r0
 801a596:	eb12 0804 	adds.w	r8, r2, r4
 801a59a:	eb43 0905 	adc.w	r9, r3, r5
 801a59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	60bb      	str	r3, [r7, #8]
 801a5a6:	60fa      	str	r2, [r7, #12]
 801a5a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a5ac:	4640      	mov	r0, r8
 801a5ae:	4649      	mov	r1, r9
 801a5b0:	f7f2 fb5a 	bl	800cc68 <__aeabi_uldivmod>
 801a5b4:	4602      	mov	r2, r0
 801a5b6:	460b      	mov	r3, r1
 801a5b8:	4613      	mov	r3, r2
 801a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a5c2:	d308      	bcc.n	801a5d6 <UART_SetConfig+0x2c2>
 801a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a5ca:	d204      	bcs.n	801a5d6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 801a5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a5d2:	60da      	str	r2, [r3, #12]
 801a5d4:	e003      	b.n	801a5de <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 801a5d6:	2301      	movs	r3, #1
 801a5d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801a5dc:	e070      	b.n	801a6c0 <UART_SetConfig+0x3ac>
 801a5de:	e06f      	b.n	801a6c0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5e2:	69db      	ldr	r3, [r3, #28]
 801a5e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a5e8:	d13c      	bne.n	801a664 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a5ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	603b      	str	r3, [r7, #0]
 801a5f0:	607a      	str	r2, [r7, #4]
 801a5f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a5f6:	f7fb fdf9 	bl	80161ec <HAL_RCCEx_GetPeriphCLKFreq>
 801a5fa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a5fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d05e      	beq.n	801a6c0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a606:	4a39      	ldr	r2, [pc, #228]	@ (801a6ec <UART_SetConfig+0x3d8>)
 801a608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a60c:	461a      	mov	r2, r3
 801a60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a610:	fbb3 f3f2 	udiv	r3, r3, r2
 801a614:	005a      	lsls	r2, r3, #1
 801a616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a618:	685b      	ldr	r3, [r3, #4]
 801a61a:	085b      	lsrs	r3, r3, #1
 801a61c:	441a      	add	r2, r3
 801a61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a620:	685b      	ldr	r3, [r3, #4]
 801a622:	fbb2 f3f3 	udiv	r3, r2, r3
 801a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a62a:	2b0f      	cmp	r3, #15
 801a62c:	d916      	bls.n	801a65c <UART_SetConfig+0x348>
 801a62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a634:	d212      	bcs.n	801a65c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a638:	b29b      	uxth	r3, r3
 801a63a:	f023 030f 	bic.w	r3, r3, #15
 801a63e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a642:	085b      	lsrs	r3, r3, #1
 801a644:	b29b      	uxth	r3, r3
 801a646:	f003 0307 	and.w	r3, r3, #7
 801a64a:	b29a      	uxth	r2, r3
 801a64c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a64e:	4313      	orrs	r3, r2
 801a650:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801a652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a658:	60da      	str	r2, [r3, #12]
 801a65a:	e031      	b.n	801a6c0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801a65c:	2301      	movs	r3, #1
 801a65e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a662:	e02d      	b.n	801a6c0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a666:	2200      	movs	r2, #0
 801a668:	469a      	mov	sl, r3
 801a66a:	4693      	mov	fp, r2
 801a66c:	4650      	mov	r0, sl
 801a66e:	4659      	mov	r1, fp
 801a670:	f7fb fdbc 	bl	80161ec <HAL_RCCEx_GetPeriphCLKFreq>
 801a674:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801a676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d021      	beq.n	801a6c0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a680:	4a1a      	ldr	r2, [pc, #104]	@ (801a6ec <UART_SetConfig+0x3d8>)
 801a682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a686:	461a      	mov	r2, r3
 801a688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a68a:	fbb3 f2f2 	udiv	r2, r3, r2
 801a68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a690:	685b      	ldr	r3, [r3, #4]
 801a692:	085b      	lsrs	r3, r3, #1
 801a694:	441a      	add	r2, r3
 801a696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a698:	685b      	ldr	r3, [r3, #4]
 801a69a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6a2:	2b0f      	cmp	r3, #15
 801a6a4:	d909      	bls.n	801a6ba <UART_SetConfig+0x3a6>
 801a6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a6ac:	d205      	bcs.n	801a6ba <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6b0:	b29a      	uxth	r2, r3
 801a6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	60da      	str	r2, [r3, #12]
 801a6b8:	e002      	b.n	801a6c0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6c2:	2201      	movs	r2, #1
 801a6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6ca:	2201      	movs	r2, #1
 801a6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801a6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6d8:	2200      	movs	r2, #0
 801a6da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801a6dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	3750      	adds	r7, #80	@ 0x50
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a6ea:	bf00      	nop
 801a6ec:	0801f338 	.word	0x0801f338

0801a6f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b083      	sub	sp, #12
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6fc:	f003 0308 	and.w	r3, r3, #8
 801a700:	2b00      	cmp	r3, #0
 801a702:	d00a      	beq.n	801a71a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	685b      	ldr	r3, [r3, #4]
 801a70a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	430a      	orrs	r2, r1
 801a718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a71e:	f003 0301 	and.w	r3, r3, #1
 801a722:	2b00      	cmp	r3, #0
 801a724:	d00a      	beq.n	801a73c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	685b      	ldr	r3, [r3, #4]
 801a72c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	430a      	orrs	r2, r1
 801a73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a740:	f003 0302 	and.w	r3, r3, #2
 801a744:	2b00      	cmp	r3, #0
 801a746:	d00a      	beq.n	801a75e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	685b      	ldr	r3, [r3, #4]
 801a74e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	430a      	orrs	r2, r1
 801a75c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a762:	f003 0304 	and.w	r3, r3, #4
 801a766:	2b00      	cmp	r3, #0
 801a768:	d00a      	beq.n	801a780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	685b      	ldr	r3, [r3, #4]
 801a770:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	430a      	orrs	r2, r1
 801a77e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a784:	f003 0310 	and.w	r3, r3, #16
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d00a      	beq.n	801a7a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	689b      	ldr	r3, [r3, #8]
 801a792:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	430a      	orrs	r2, r1
 801a7a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7a6:	f003 0320 	and.w	r3, r3, #32
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d00a      	beq.n	801a7c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	689b      	ldr	r3, [r3, #8]
 801a7b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	430a      	orrs	r2, r1
 801a7c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d01a      	beq.n	801a806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	685b      	ldr	r3, [r3, #4]
 801a7d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	430a      	orrs	r2, r1
 801a7e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a7ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a7ee:	d10a      	bne.n	801a806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	685b      	ldr	r3, [r3, #4]
 801a7f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	430a      	orrs	r2, r1
 801a804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a80a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d00a      	beq.n	801a828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	685b      	ldr	r3, [r3, #4]
 801a818:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	430a      	orrs	r2, r1
 801a826:	605a      	str	r2, [r3, #4]
  }
}
 801a828:	bf00      	nop
 801a82a:	370c      	adds	r7, #12
 801a82c:	46bd      	mov	sp, r7
 801a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a832:	4770      	bx	lr

0801a834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a834:	b580      	push	{r7, lr}
 801a836:	b098      	sub	sp, #96	@ 0x60
 801a838:	af02      	add	r7, sp, #8
 801a83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	2200      	movs	r2, #0
 801a840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a844:	f7f6 fe58 	bl	80114f8 <HAL_GetTick>
 801a848:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	f003 0308 	and.w	r3, r3, #8
 801a854:	2b08      	cmp	r3, #8
 801a856:	d12f      	bne.n	801a8b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a858:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a85c:	9300      	str	r3, [sp, #0]
 801a85e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a860:	2200      	movs	r2, #0
 801a862:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801a866:	6878      	ldr	r0, [r7, #4]
 801a868:	f000 f88e 	bl	801a988 <UART_WaitOnFlagUntilTimeout>
 801a86c:	4603      	mov	r3, r0
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d022      	beq.n	801a8b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a87a:	e853 3f00 	ldrex	r3, [r3]
 801a87e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a886:	653b      	str	r3, [r7, #80]	@ 0x50
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	461a      	mov	r2, r3
 801a88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a890:	647b      	str	r3, [r7, #68]	@ 0x44
 801a892:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a894:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a898:	e841 2300 	strex	r3, r2, [r1]
 801a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d1e6      	bne.n	801a872 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2220      	movs	r2, #32
 801a8a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a8b4:	2303      	movs	r3, #3
 801a8b6:	e063      	b.n	801a980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	f003 0304 	and.w	r3, r3, #4
 801a8c2:	2b04      	cmp	r3, #4
 801a8c4:	d149      	bne.n	801a95a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a8c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a8ca:	9300      	str	r3, [sp, #0]
 801a8cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801a8d4:	6878      	ldr	r0, [r7, #4]
 801a8d6:	f000 f857 	bl	801a988 <UART_WaitOnFlagUntilTimeout>
 801a8da:	4603      	mov	r3, r0
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d03c      	beq.n	801a95a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8e8:	e853 3f00 	ldrex	r3, [r3]
 801a8ec:	623b      	str	r3, [r7, #32]
   return(result);
 801a8ee:	6a3b      	ldr	r3, [r7, #32]
 801a8f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a8f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	461a      	mov	r2, r3
 801a8fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a8fe:	633b      	str	r3, [r7, #48]	@ 0x30
 801a900:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a906:	e841 2300 	strex	r3, r2, [r1]
 801a90a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d1e6      	bne.n	801a8e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	3308      	adds	r3, #8
 801a918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a91a:	693b      	ldr	r3, [r7, #16]
 801a91c:	e853 3f00 	ldrex	r3, [r3]
 801a920:	60fb      	str	r3, [r7, #12]
   return(result);
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	f023 0301 	bic.w	r3, r3, #1
 801a928:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	3308      	adds	r3, #8
 801a930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a932:	61fa      	str	r2, [r7, #28]
 801a934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a936:	69b9      	ldr	r1, [r7, #24]
 801a938:	69fa      	ldr	r2, [r7, #28]
 801a93a:	e841 2300 	strex	r3, r2, [r1]
 801a93e:	617b      	str	r3, [r7, #20]
   return(result);
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d1e5      	bne.n	801a912 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	2220      	movs	r2, #32
 801a94a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	2200      	movs	r2, #0
 801a952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a956:	2303      	movs	r3, #3
 801a958:	e012      	b.n	801a980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	2220      	movs	r2, #32
 801a95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2220      	movs	r2, #32
 801a966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	2200      	movs	r2, #0
 801a96e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	2200      	movs	r2, #0
 801a974:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	2200      	movs	r2, #0
 801a97a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a97e:	2300      	movs	r3, #0
}
 801a980:	4618      	mov	r0, r3
 801a982:	3758      	adds	r7, #88	@ 0x58
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}

0801a988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b084      	sub	sp, #16
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	60b9      	str	r1, [r7, #8]
 801a992:	603b      	str	r3, [r7, #0]
 801a994:	4613      	mov	r3, r2
 801a996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a998:	e04f      	b.n	801aa3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a99a:	69bb      	ldr	r3, [r7, #24]
 801a99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9a0:	d04b      	beq.n	801aa3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a9a2:	f7f6 fda9 	bl	80114f8 <HAL_GetTick>
 801a9a6:	4602      	mov	r2, r0
 801a9a8:	683b      	ldr	r3, [r7, #0]
 801a9aa:	1ad3      	subs	r3, r2, r3
 801a9ac:	69ba      	ldr	r2, [r7, #24]
 801a9ae:	429a      	cmp	r2, r3
 801a9b0:	d302      	bcc.n	801a9b8 <UART_WaitOnFlagUntilTimeout+0x30>
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d101      	bne.n	801a9bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801a9b8:	2303      	movs	r3, #3
 801a9ba:	e04e      	b.n	801aa5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	f003 0304 	and.w	r3, r3, #4
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d037      	beq.n	801aa3a <UART_WaitOnFlagUntilTimeout+0xb2>
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	2b80      	cmp	r3, #128	@ 0x80
 801a9ce:	d034      	beq.n	801aa3a <UART_WaitOnFlagUntilTimeout+0xb2>
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	2b40      	cmp	r3, #64	@ 0x40
 801a9d4:	d031      	beq.n	801aa3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	69db      	ldr	r3, [r3, #28]
 801a9dc:	f003 0308 	and.w	r3, r3, #8
 801a9e0:	2b08      	cmp	r3, #8
 801a9e2:	d110      	bne.n	801aa06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	2208      	movs	r2, #8
 801a9ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a9ec:	68f8      	ldr	r0, [r7, #12]
 801a9ee:	f000 f95b 	bl	801aca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2208      	movs	r2, #8
 801a9f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801aa02:	2301      	movs	r3, #1
 801aa04:	e029      	b.n	801aa5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	69db      	ldr	r3, [r3, #28]
 801aa0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801aa10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801aa14:	d111      	bne.n	801aa3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aa1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aa20:	68f8      	ldr	r0, [r7, #12]
 801aa22:	f000 f941 	bl	801aca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	2220      	movs	r2, #32
 801aa2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	2200      	movs	r2, #0
 801aa32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801aa36:	2303      	movs	r3, #3
 801aa38:	e00f      	b.n	801aa5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	69da      	ldr	r2, [r3, #28]
 801aa40:	68bb      	ldr	r3, [r7, #8]
 801aa42:	4013      	ands	r3, r2
 801aa44:	68ba      	ldr	r2, [r7, #8]
 801aa46:	429a      	cmp	r2, r3
 801aa48:	bf0c      	ite	eq
 801aa4a:	2301      	moveq	r3, #1
 801aa4c:	2300      	movne	r3, #0
 801aa4e:	b2db      	uxtb	r3, r3
 801aa50:	461a      	mov	r2, r3
 801aa52:	79fb      	ldrb	r3, [r7, #7]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d0a0      	beq.n	801a99a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801aa58:	2300      	movs	r3, #0
}
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	3710      	adds	r7, #16
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	bd80      	pop	{r7, pc}
	...

0801aa64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b0a3      	sub	sp, #140	@ 0x8c
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	60f8      	str	r0, [r7, #12]
 801aa6c:	60b9      	str	r1, [r7, #8]
 801aa6e:	4613      	mov	r3, r2
 801aa70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	68ba      	ldr	r2, [r7, #8]
 801aa76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	88fa      	ldrh	r2, [r7, #6]
 801aa7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	88fa      	ldrh	r2, [r7, #6]
 801aa84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	2200      	movs	r2, #0
 801aa8c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	689b      	ldr	r3, [r3, #8]
 801aa92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801aa96:	d10e      	bne.n	801aab6 <UART_Start_Receive_IT+0x52>
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	691b      	ldr	r3, [r3, #16]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d105      	bne.n	801aaac <UART_Start_Receive_IT+0x48>
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801aaa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801aaaa:	e02d      	b.n	801ab08 <UART_Start_Receive_IT+0xa4>
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	22ff      	movs	r2, #255	@ 0xff
 801aab0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801aab4:	e028      	b.n	801ab08 <UART_Start_Receive_IT+0xa4>
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	689b      	ldr	r3, [r3, #8]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d10d      	bne.n	801aada <UART_Start_Receive_IT+0x76>
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	691b      	ldr	r3, [r3, #16]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d104      	bne.n	801aad0 <UART_Start_Receive_IT+0x6c>
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	22ff      	movs	r2, #255	@ 0xff
 801aaca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801aace:	e01b      	b.n	801ab08 <UART_Start_Receive_IT+0xa4>
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	227f      	movs	r2, #127	@ 0x7f
 801aad4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801aad8:	e016      	b.n	801ab08 <UART_Start_Receive_IT+0xa4>
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	689b      	ldr	r3, [r3, #8]
 801aade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801aae2:	d10d      	bne.n	801ab00 <UART_Start_Receive_IT+0x9c>
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	691b      	ldr	r3, [r3, #16]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d104      	bne.n	801aaf6 <UART_Start_Receive_IT+0x92>
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	227f      	movs	r2, #127	@ 0x7f
 801aaf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801aaf4:	e008      	b.n	801ab08 <UART_Start_Receive_IT+0xa4>
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	223f      	movs	r2, #63	@ 0x3f
 801aafa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801aafe:	e003      	b.n	801ab08 <UART_Start_Receive_IT+0xa4>
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	2200      	movs	r2, #0
 801ab04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	2222      	movs	r2, #34	@ 0x22
 801ab14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	3308      	adds	r3, #8
 801ab1e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ab22:	e853 3f00 	ldrex	r3, [r3]
 801ab26:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801ab28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ab2a:	f043 0301 	orr.w	r3, r3, #1
 801ab2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	3308      	adds	r3, #8
 801ab38:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ab3c:	673a      	str	r2, [r7, #112]	@ 0x70
 801ab3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab40:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801ab42:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801ab44:	e841 2300 	strex	r3, r2, [r1]
 801ab48:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801ab4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d1e3      	bne.n	801ab18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ab54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ab58:	d14f      	bne.n	801abfa <UART_Start_Receive_IT+0x196>
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ab60:	88fa      	ldrh	r2, [r7, #6]
 801ab62:	429a      	cmp	r2, r3
 801ab64:	d349      	bcc.n	801abfa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	689b      	ldr	r3, [r3, #8]
 801ab6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ab6e:	d107      	bne.n	801ab80 <UART_Start_Receive_IT+0x11c>
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	691b      	ldr	r3, [r3, #16]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d103      	bne.n	801ab80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	4a47      	ldr	r2, [pc, #284]	@ (801ac98 <UART_Start_Receive_IT+0x234>)
 801ab7c:	675a      	str	r2, [r3, #116]	@ 0x74
 801ab7e:	e002      	b.n	801ab86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	4a46      	ldr	r2, [pc, #280]	@ (801ac9c <UART_Start_Receive_IT+0x238>)
 801ab84:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	691b      	ldr	r3, [r3, #16]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d01a      	beq.n	801abc4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab96:	e853 3f00 	ldrex	r3, [r3]
 801ab9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801ab9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ab9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801aba2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	461a      	mov	r2, r3
 801abac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801abb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801abb2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801abb4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801abb6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801abb8:	e841 2300 	strex	r3, r2, [r1]
 801abbc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801abbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d1e4      	bne.n	801ab8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	3308      	adds	r3, #8
 801abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801abcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abce:	e853 3f00 	ldrex	r3, [r3]
 801abd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801abd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801abda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	3308      	adds	r3, #8
 801abe2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801abe4:	64ba      	str	r2, [r7, #72]	@ 0x48
 801abe6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801abe8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801abea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801abec:	e841 2300 	strex	r3, r2, [r1]
 801abf0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801abf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d1e5      	bne.n	801abc4 <UART_Start_Receive_IT+0x160>
 801abf8:	e046      	b.n	801ac88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	689b      	ldr	r3, [r3, #8]
 801abfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ac02:	d107      	bne.n	801ac14 <UART_Start_Receive_IT+0x1b0>
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	691b      	ldr	r3, [r3, #16]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d103      	bne.n	801ac14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	4a24      	ldr	r2, [pc, #144]	@ (801aca0 <UART_Start_Receive_IT+0x23c>)
 801ac10:	675a      	str	r2, [r3, #116]	@ 0x74
 801ac12:	e002      	b.n	801ac1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	4a23      	ldr	r2, [pc, #140]	@ (801aca4 <UART_Start_Receive_IT+0x240>)
 801ac18:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	691b      	ldr	r3, [r3, #16]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d019      	beq.n	801ac56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac2a:	e853 3f00 	ldrex	r3, [r3]
 801ac2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac32:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801ac36:	677b      	str	r3, [r7, #116]	@ 0x74
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	461a      	mov	r2, r3
 801ac3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ac40:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac42:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ac44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ac46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ac48:	e841 2300 	strex	r3, r2, [r1]
 801ac4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801ac4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d1e6      	bne.n	801ac22 <UART_Start_Receive_IT+0x1be>
 801ac54:	e018      	b.n	801ac88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac5c:	697b      	ldr	r3, [r7, #20]
 801ac5e:	e853 3f00 	ldrex	r3, [r3]
 801ac62:	613b      	str	r3, [r7, #16]
   return(result);
 801ac64:	693b      	ldr	r3, [r7, #16]
 801ac66:	f043 0320 	orr.w	r3, r3, #32
 801ac6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	461a      	mov	r2, r3
 801ac72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac74:	623b      	str	r3, [r7, #32]
 801ac76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ac78:	69f9      	ldr	r1, [r7, #28]
 801ac7a:	6a3a      	ldr	r2, [r7, #32]
 801ac7c:	e841 2300 	strex	r3, r2, [r1]
 801ac80:	61bb      	str	r3, [r7, #24]
   return(result);
 801ac82:	69bb      	ldr	r3, [r7, #24]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d1e6      	bne.n	801ac56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801ac88:	2300      	movs	r3, #0
}
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	378c      	adds	r7, #140	@ 0x8c
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac94:	4770      	bx	lr
 801ac96:	bf00      	nop
 801ac98:	0801b835 	.word	0x0801b835
 801ac9c:	0801b4c5 	.word	0x0801b4c5
 801aca0:	0801b301 	.word	0x0801b301
 801aca4:	0801b13d 	.word	0x0801b13d

0801aca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801aca8:	b480      	push	{r7}
 801acaa:	b095      	sub	sp, #84	@ 0x54
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acb8:	e853 3f00 	ldrex	r3, [r3]
 801acbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801acc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801acc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	461a      	mov	r2, r3
 801accc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801acce:	643b      	str	r3, [r7, #64]	@ 0x40
 801acd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801acd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801acd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801acd6:	e841 2300 	strex	r3, r2, [r1]
 801acda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d1e6      	bne.n	801acb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	3308      	adds	r3, #8
 801ace8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acea:	6a3b      	ldr	r3, [r7, #32]
 801acec:	e853 3f00 	ldrex	r3, [r3]
 801acf0:	61fb      	str	r3, [r7, #28]
   return(result);
 801acf2:	69fb      	ldr	r3, [r7, #28]
 801acf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801acf8:	f023 0301 	bic.w	r3, r3, #1
 801acfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	3308      	adds	r3, #8
 801ad04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ad06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ad0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad0e:	e841 2300 	strex	r3, r2, [r1]
 801ad12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d1e3      	bne.n	801ace2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d118      	bne.n	801ad54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	e853 3f00 	ldrex	r3, [r3]
 801ad2e:	60bb      	str	r3, [r7, #8]
   return(result);
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	f023 0310 	bic.w	r3, r3, #16
 801ad36:	647b      	str	r3, [r7, #68]	@ 0x44
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	461a      	mov	r2, r3
 801ad3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ad40:	61bb      	str	r3, [r7, #24]
 801ad42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad44:	6979      	ldr	r1, [r7, #20]
 801ad46:	69ba      	ldr	r2, [r7, #24]
 801ad48:	e841 2300 	strex	r3, r2, [r1]
 801ad4c:	613b      	str	r3, [r7, #16]
   return(result);
 801ad4e:	693b      	ldr	r3, [r7, #16]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d1e6      	bne.n	801ad22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	2220      	movs	r2, #32
 801ad58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	2200      	movs	r2, #0
 801ad60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	2200      	movs	r2, #0
 801ad66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801ad68:	bf00      	nop
 801ad6a:	3754      	adds	r7, #84	@ 0x54
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad72:	4770      	bx	lr

0801ad74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b084      	sub	sp, #16
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	2200      	movs	r2, #0
 801ad86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801ad92:	68f8      	ldr	r0, [r7, #12]
 801ad94:	f7ff faa8 	bl	801a2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ad98:	bf00      	nop
 801ad9a:	3710      	adds	r7, #16
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801ada0:	b480      	push	{r7}
 801ada2:	b08f      	sub	sp, #60	@ 0x3c
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801adae:	2b21      	cmp	r3, #33	@ 0x21
 801adb0:	d14c      	bne.n	801ae4c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801adb8:	b29b      	uxth	r3, r3
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d132      	bne.n	801ae24 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801adc4:	6a3b      	ldr	r3, [r7, #32]
 801adc6:	e853 3f00 	ldrex	r3, [r3]
 801adca:	61fb      	str	r3, [r7, #28]
   return(result);
 801adcc:	69fb      	ldr	r3, [r7, #28]
 801adce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801add2:	637b      	str	r3, [r7, #52]	@ 0x34
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	461a      	mov	r2, r3
 801adda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801addc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801adde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ade0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ade2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ade4:	e841 2300 	strex	r3, r2, [r1]
 801ade8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801adea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adec:	2b00      	cmp	r3, #0
 801adee:	d1e6      	bne.n	801adbe <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	e853 3f00 	ldrex	r3, [r3]
 801adfc:	60bb      	str	r3, [r7, #8]
   return(result);
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae04:	633b      	str	r3, [r7, #48]	@ 0x30
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	461a      	mov	r2, r3
 801ae0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae0e:	61bb      	str	r3, [r7, #24]
 801ae10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae12:	6979      	ldr	r1, [r7, #20]
 801ae14:	69ba      	ldr	r2, [r7, #24]
 801ae16:	e841 2300 	strex	r3, r2, [r1]
 801ae1a:	613b      	str	r3, [r7, #16]
   return(result);
 801ae1c:	693b      	ldr	r3, [r7, #16]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d1e6      	bne.n	801adf0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801ae22:	e013      	b.n	801ae4c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ae28:	781a      	ldrb	r2, [r3, #0]
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ae34:	1c5a      	adds	r2, r3, #1
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ae40:	b29b      	uxth	r3, r3
 801ae42:	3b01      	subs	r3, #1
 801ae44:	b29a      	uxth	r2, r3
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801ae4c:	bf00      	nop
 801ae4e:	373c      	adds	r7, #60	@ 0x3c
 801ae50:	46bd      	mov	sp, r7
 801ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae56:	4770      	bx	lr

0801ae58 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801ae58:	b480      	push	{r7}
 801ae5a:	b091      	sub	sp, #68	@ 0x44
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ae66:	2b21      	cmp	r3, #33	@ 0x21
 801ae68:	d151      	bne.n	801af0e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ae70:	b29b      	uxth	r3, r3
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d132      	bne.n	801aedc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae7e:	e853 3f00 	ldrex	r3, [r3]
 801ae82:	623b      	str	r3, [r7, #32]
   return(result);
 801ae84:	6a3b      	ldr	r3, [r7, #32]
 801ae86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ae8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	461a      	mov	r2, r3
 801ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae94:	633b      	str	r3, [r7, #48]	@ 0x30
 801ae96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ae9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ae9c:	e841 2300 	strex	r3, r2, [r1]
 801aea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d1e6      	bne.n	801ae76 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aeae:	693b      	ldr	r3, [r7, #16]
 801aeb0:	e853 3f00 	ldrex	r3, [r3]
 801aeb4:	60fb      	str	r3, [r7, #12]
   return(result);
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aebc:	637b      	str	r3, [r7, #52]	@ 0x34
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	461a      	mov	r2, r3
 801aec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aec6:	61fb      	str	r3, [r7, #28]
 801aec8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aeca:	69b9      	ldr	r1, [r7, #24]
 801aecc:	69fa      	ldr	r2, [r7, #28]
 801aece:	e841 2300 	strex	r3, r2, [r1]
 801aed2:	617b      	str	r3, [r7, #20]
   return(result);
 801aed4:	697b      	ldr	r3, [r7, #20]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d1e6      	bne.n	801aea8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801aeda:	e018      	b.n	801af0e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801aee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aee4:	881b      	ldrh	r3, [r3, #0]
 801aee6:	461a      	mov	r2, r3
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801aef0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aef6:	1c9a      	adds	r2, r3, #2
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801af02:	b29b      	uxth	r3, r3
 801af04:	3b01      	subs	r3, #1
 801af06:	b29a      	uxth	r2, r3
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801af0e:	bf00      	nop
 801af10:	3744      	adds	r7, #68	@ 0x44
 801af12:	46bd      	mov	sp, r7
 801af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af18:	4770      	bx	lr

0801af1a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801af1a:	b480      	push	{r7}
 801af1c:	b091      	sub	sp, #68	@ 0x44
 801af1e:	af00      	add	r7, sp, #0
 801af20:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801af28:	2b21      	cmp	r3, #33	@ 0x21
 801af2a:	d160      	bne.n	801afee <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801af32:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801af34:	e057      	b.n	801afe6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d133      	bne.n	801afaa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	3308      	adds	r3, #8
 801af48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af4c:	e853 3f00 	ldrex	r3, [r3]
 801af50:	623b      	str	r3, [r7, #32]
   return(result);
 801af52:	6a3b      	ldr	r3, [r7, #32]
 801af54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801af58:	63bb      	str	r3, [r7, #56]	@ 0x38
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	3308      	adds	r3, #8
 801af60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801af62:	633a      	str	r2, [r7, #48]	@ 0x30
 801af64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801af66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801af68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af6a:	e841 2300 	strex	r3, r2, [r1]
 801af6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801af70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af72:	2b00      	cmp	r3, #0
 801af74:	d1e5      	bne.n	801af42 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af7c:	693b      	ldr	r3, [r7, #16]
 801af7e:	e853 3f00 	ldrex	r3, [r3]
 801af82:	60fb      	str	r3, [r7, #12]
   return(result);
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af8a:	637b      	str	r3, [r7, #52]	@ 0x34
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	461a      	mov	r2, r3
 801af92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af94:	61fb      	str	r3, [r7, #28]
 801af96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801af98:	69b9      	ldr	r1, [r7, #24]
 801af9a:	69fa      	ldr	r2, [r7, #28]
 801af9c:	e841 2300 	strex	r3, r2, [r1]
 801afa0:	617b      	str	r3, [r7, #20]
   return(result);
 801afa2:	697b      	ldr	r3, [r7, #20]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1e6      	bne.n	801af76 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801afa8:	e021      	b.n	801afee <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	69db      	ldr	r3, [r3, #28]
 801afb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d013      	beq.n	801afe0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afbc:	781a      	ldrb	r2, [r3, #0]
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afc8:	1c5a      	adds	r2, r3, #1
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801afd4:	b29b      	uxth	r3, r3
 801afd6:	3b01      	subs	r3, #1
 801afd8:	b29a      	uxth	r2, r3
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801afe0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801afe2:	3b01      	subs	r3, #1
 801afe4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801afe6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d1a4      	bne.n	801af36 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801afec:	e7ff      	b.n	801afee <UART_TxISR_8BIT_FIFOEN+0xd4>
 801afee:	bf00      	nop
 801aff0:	3744      	adds	r7, #68	@ 0x44
 801aff2:	46bd      	mov	sp, r7
 801aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff8:	4770      	bx	lr

0801affa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801affa:	b480      	push	{r7}
 801affc:	b091      	sub	sp, #68	@ 0x44
 801affe:	af00      	add	r7, sp, #0
 801b000:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b008:	2b21      	cmp	r3, #33	@ 0x21
 801b00a:	d165      	bne.n	801b0d8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801b012:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b014:	e05c      	b.n	801b0d0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d133      	bne.n	801b08a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	3308      	adds	r3, #8
 801b028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b02a:	6a3b      	ldr	r3, [r7, #32]
 801b02c:	e853 3f00 	ldrex	r3, [r3]
 801b030:	61fb      	str	r3, [r7, #28]
   return(result);
 801b032:	69fb      	ldr	r3, [r7, #28]
 801b034:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801b038:	637b      	str	r3, [r7, #52]	@ 0x34
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	3308      	adds	r3, #8
 801b040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b04a:	e841 2300 	strex	r3, r2, [r1]
 801b04e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b052:	2b00      	cmp	r3, #0
 801b054:	d1e5      	bne.n	801b022 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	e853 3f00 	ldrex	r3, [r3]
 801b062:	60bb      	str	r3, [r7, #8]
   return(result);
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b06a:	633b      	str	r3, [r7, #48]	@ 0x30
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	461a      	mov	r2, r3
 801b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b074:	61bb      	str	r3, [r7, #24]
 801b076:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b078:	6979      	ldr	r1, [r7, #20]
 801b07a:	69ba      	ldr	r2, [r7, #24]
 801b07c:	e841 2300 	strex	r3, r2, [r1]
 801b080:	613b      	str	r3, [r7, #16]
   return(result);
 801b082:	693b      	ldr	r3, [r7, #16]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d1e6      	bne.n	801b056 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801b088:	e026      	b.n	801b0d8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	69db      	ldr	r3, [r3, #28]
 801b090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b094:	2b00      	cmp	r3, #0
 801b096:	d018      	beq.n	801b0ca <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b09c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0a0:	881b      	ldrh	r3, [r3, #0]
 801b0a2:	461a      	mov	r2, r3
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b0ac:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b0b2:	1c9a      	adds	r2, r3, #2
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801b0be:	b29b      	uxth	r3, r3
 801b0c0:	3b01      	subs	r3, #1
 801b0c2:	b29a      	uxth	r2, r3
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801b0ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b0cc:	3b01      	subs	r3, #1
 801b0ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b0d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d19f      	bne.n	801b016 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801b0d6:	e7ff      	b.n	801b0d8 <UART_TxISR_16BIT_FIFOEN+0xde>
 801b0d8:	bf00      	nop
 801b0da:	3744      	adds	r7, #68	@ 0x44
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e2:	4770      	bx	lr

0801b0e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b088      	sub	sp, #32
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	e853 3f00 	ldrex	r3, [r3]
 801b0f8:	60bb      	str	r3, [r7, #8]
   return(result);
 801b0fa:	68bb      	ldr	r3, [r7, #8]
 801b0fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b100:	61fb      	str	r3, [r7, #28]
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	461a      	mov	r2, r3
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	61bb      	str	r3, [r7, #24]
 801b10c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b10e:	6979      	ldr	r1, [r7, #20]
 801b110:	69ba      	ldr	r2, [r7, #24]
 801b112:	e841 2300 	strex	r3, r2, [r1]
 801b116:	613b      	str	r3, [r7, #16]
   return(result);
 801b118:	693b      	ldr	r3, [r7, #16]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d1e6      	bne.n	801b0ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	2220      	movs	r2, #32
 801b122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	2200      	movs	r2, #0
 801b12a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b12c:	6878      	ldr	r0, [r7, #4]
 801b12e:	f7ff f8d1 	bl	801a2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b132:	bf00      	nop
 801b134:	3720      	adds	r7, #32
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
	...

0801b13c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b09c      	sub	sp, #112	@ 0x70
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b14a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b154:	2b22      	cmp	r3, #34	@ 0x22
 801b156:	f040 80c3 	bne.w	801b2e0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b160:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b164:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801b168:	b2d9      	uxtb	r1, r3
 801b16a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801b16e:	b2da      	uxtb	r2, r3
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b174:	400a      	ands	r2, r1
 801b176:	b2d2      	uxtb	r2, r2
 801b178:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b17e:	1c5a      	adds	r2, r3, #1
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b18a:	b29b      	uxth	r3, r3
 801b18c:	3b01      	subs	r3, #1
 801b18e:	b29a      	uxth	r2, r3
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b19c:	b29b      	uxth	r3, r3
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	f040 80a6 	bne.w	801b2f0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1ac:	e853 3f00 	ldrex	r3, [r3]
 801b1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801b1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	461a      	mov	r2, r3
 801b1c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b1c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b1c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b1c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b1ca:	e841 2300 	strex	r3, r2, [r1]
 801b1ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801b1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d1e6      	bne.n	801b1a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	3308      	adds	r3, #8
 801b1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1e0:	e853 3f00 	ldrex	r3, [r3]
 801b1e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801b1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b1e8:	f023 0301 	bic.w	r3, r3, #1
 801b1ec:	667b      	str	r3, [r7, #100]	@ 0x64
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	3308      	adds	r3, #8
 801b1f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b1f6:	647a      	str	r2, [r7, #68]	@ 0x44
 801b1f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b1fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b1fe:	e841 2300 	strex	r3, r2, [r1]
 801b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801b204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b206:	2b00      	cmp	r3, #0
 801b208:	d1e5      	bne.n	801b1d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	2220      	movs	r2, #32
 801b20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	2200      	movs	r2, #0
 801b216:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	2200      	movs	r2, #0
 801b21c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	4a35      	ldr	r2, [pc, #212]	@ (801b2f8 <UART_RxISR_8BIT+0x1bc>)
 801b224:	4293      	cmp	r3, r2
 801b226:	d024      	beq.n	801b272 <UART_RxISR_8BIT+0x136>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	4a33      	ldr	r2, [pc, #204]	@ (801b2fc <UART_RxISR_8BIT+0x1c0>)
 801b22e:	4293      	cmp	r3, r2
 801b230:	d01f      	beq.n	801b272 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	685b      	ldr	r3, [r3, #4]
 801b238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d018      	beq.n	801b272 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b248:	e853 3f00 	ldrex	r3, [r3]
 801b24c:	623b      	str	r3, [r7, #32]
   return(result);
 801b24e:	6a3b      	ldr	r3, [r7, #32]
 801b250:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b254:	663b      	str	r3, [r7, #96]	@ 0x60
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	461a      	mov	r2, r3
 801b25c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b25e:	633b      	str	r3, [r7, #48]	@ 0x30
 801b260:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b266:	e841 2300 	strex	r3, r2, [r1]
 801b26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801b26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d1e6      	bne.n	801b240 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b276:	2b01      	cmp	r3, #1
 801b278:	d12e      	bne.n	801b2d8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	2200      	movs	r2, #0
 801b27e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b286:	693b      	ldr	r3, [r7, #16]
 801b288:	e853 3f00 	ldrex	r3, [r3]
 801b28c:	60fb      	str	r3, [r7, #12]
   return(result);
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	f023 0310 	bic.w	r3, r3, #16
 801b294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	461a      	mov	r2, r3
 801b29c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b29e:	61fb      	str	r3, [r7, #28]
 801b2a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2a2:	69b9      	ldr	r1, [r7, #24]
 801b2a4:	69fa      	ldr	r2, [r7, #28]
 801b2a6:	e841 2300 	strex	r3, r2, [r1]
 801b2aa:	617b      	str	r3, [r7, #20]
   return(result);
 801b2ac:	697b      	ldr	r3, [r7, #20]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d1e6      	bne.n	801b280 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	69db      	ldr	r3, [r3, #28]
 801b2b8:	f003 0310 	and.w	r3, r3, #16
 801b2bc:	2b10      	cmp	r3, #16
 801b2be:	d103      	bne.n	801b2c8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2210      	movs	r2, #16
 801b2c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b2ce:	4619      	mov	r1, r3
 801b2d0:	6878      	ldr	r0, [r7, #4]
 801b2d2:	f7ff f813 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b2d6:	e00b      	b.n	801b2f0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 801b2d8:	6878      	ldr	r0, [r7, #4]
 801b2da:	f7f5 f81b 	bl	8010314 <HAL_UART_RxCpltCallback>
}
 801b2de:	e007      	b.n	801b2f0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	699a      	ldr	r2, [r3, #24]
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	f042 0208 	orr.w	r2, r2, #8
 801b2ee:	619a      	str	r2, [r3, #24]
}
 801b2f0:	bf00      	nop
 801b2f2:	3770      	adds	r7, #112	@ 0x70
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}
 801b2f8:	44002400 	.word	0x44002400
 801b2fc:	54002400 	.word	0x54002400

0801b300 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b09c      	sub	sp, #112	@ 0x70
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b30e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b318:	2b22      	cmp	r3, #34	@ 0x22
 801b31a:	f040 80c3 	bne.w	801b4a4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b324:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b32c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801b32e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801b332:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801b336:	4013      	ands	r3, r2
 801b338:	b29a      	uxth	r2, r3
 801b33a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b33c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b342:	1c9a      	adds	r2, r3, #2
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b34e:	b29b      	uxth	r3, r3
 801b350:	3b01      	subs	r3, #1
 801b352:	b29a      	uxth	r2, r3
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b360:	b29b      	uxth	r3, r3
 801b362:	2b00      	cmp	r3, #0
 801b364:	f040 80a6 	bne.w	801b4b4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b36e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b370:	e853 3f00 	ldrex	r3, [r3]
 801b374:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801b376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b37c:	667b      	str	r3, [r7, #100]	@ 0x64
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	461a      	mov	r2, r3
 801b384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b386:	657b      	str	r3, [r7, #84]	@ 0x54
 801b388:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b38a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b38c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b38e:	e841 2300 	strex	r3, r2, [r1]
 801b392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801b394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b396:	2b00      	cmp	r3, #0
 801b398:	d1e6      	bne.n	801b368 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	3308      	adds	r3, #8
 801b3a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b3a4:	e853 3f00 	ldrex	r3, [r3]
 801b3a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b3ac:	f023 0301 	bic.w	r3, r3, #1
 801b3b0:	663b      	str	r3, [r7, #96]	@ 0x60
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	3308      	adds	r3, #8
 801b3b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b3ba:	643a      	str	r2, [r7, #64]	@ 0x40
 801b3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b3c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b3c2:	e841 2300 	strex	r3, r2, [r1]
 801b3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801b3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d1e5      	bne.n	801b39a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	2220      	movs	r2, #32
 801b3d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	2200      	movs	r2, #0
 801b3da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	2200      	movs	r2, #0
 801b3e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	4a35      	ldr	r2, [pc, #212]	@ (801b4bc <UART_RxISR_16BIT+0x1bc>)
 801b3e8:	4293      	cmp	r3, r2
 801b3ea:	d024      	beq.n	801b436 <UART_RxISR_16BIT+0x136>
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	4a33      	ldr	r2, [pc, #204]	@ (801b4c0 <UART_RxISR_16BIT+0x1c0>)
 801b3f2:	4293      	cmp	r3, r2
 801b3f4:	d01f      	beq.n	801b436 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	685b      	ldr	r3, [r3, #4]
 801b3fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b400:	2b00      	cmp	r3, #0
 801b402:	d018      	beq.n	801b436 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b40a:	6a3b      	ldr	r3, [r7, #32]
 801b40c:	e853 3f00 	ldrex	r3, [r3]
 801b410:	61fb      	str	r3, [r7, #28]
   return(result);
 801b412:	69fb      	ldr	r3, [r7, #28]
 801b414:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	461a      	mov	r2, r3
 801b420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b424:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b42a:	e841 2300 	strex	r3, r2, [r1]
 801b42e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b432:	2b00      	cmp	r3, #0
 801b434:	d1e6      	bne.n	801b404 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b43a:	2b01      	cmp	r3, #1
 801b43c:	d12e      	bne.n	801b49c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	2200      	movs	r2, #0
 801b442:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	e853 3f00 	ldrex	r3, [r3]
 801b450:	60bb      	str	r3, [r7, #8]
   return(result);
 801b452:	68bb      	ldr	r3, [r7, #8]
 801b454:	f023 0310 	bic.w	r3, r3, #16
 801b458:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	461a      	mov	r2, r3
 801b460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b462:	61bb      	str	r3, [r7, #24]
 801b464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b466:	6979      	ldr	r1, [r7, #20]
 801b468:	69ba      	ldr	r2, [r7, #24]
 801b46a:	e841 2300 	strex	r3, r2, [r1]
 801b46e:	613b      	str	r3, [r7, #16]
   return(result);
 801b470:	693b      	ldr	r3, [r7, #16]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d1e6      	bne.n	801b444 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	69db      	ldr	r3, [r3, #28]
 801b47c:	f003 0310 	and.w	r3, r3, #16
 801b480:	2b10      	cmp	r3, #16
 801b482:	d103      	bne.n	801b48c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	2210      	movs	r2, #16
 801b48a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b492:	4619      	mov	r1, r3
 801b494:	6878      	ldr	r0, [r7, #4]
 801b496:	f7fe ff31 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b49a:	e00b      	b.n	801b4b4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 801b49c:	6878      	ldr	r0, [r7, #4]
 801b49e:	f7f4 ff39 	bl	8010314 <HAL_UART_RxCpltCallback>
}
 801b4a2:	e007      	b.n	801b4b4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	699a      	ldr	r2, [r3, #24]
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	f042 0208 	orr.w	r2, r2, #8
 801b4b2:	619a      	str	r2, [r3, #24]
}
 801b4b4:	bf00      	nop
 801b4b6:	3770      	adds	r7, #112	@ 0x70
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	bd80      	pop	{r7, pc}
 801b4bc:	44002400 	.word	0x44002400
 801b4c0:	54002400 	.word	0x54002400

0801b4c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801b4c4:	b580      	push	{r7, lr}
 801b4c6:	b0ac      	sub	sp, #176	@ 0xb0
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b4d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	69db      	ldr	r3, [r3, #28]
 801b4dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	689b      	ldr	r3, [r3, #8]
 801b4f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b4fa:	2b22      	cmp	r3, #34	@ 0x22
 801b4fc:	f040 8188 	bne.w	801b810 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b506:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b50a:	e12b      	b.n	801b764 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b512:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b516:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801b51a:	b2d9      	uxtb	r1, r3
 801b51c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801b520:	b2da      	uxtb	r2, r3
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b526:	400a      	ands	r2, r1
 801b528:	b2d2      	uxtb	r2, r2
 801b52a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b530:	1c5a      	adds	r2, r3, #1
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b53c:	b29b      	uxth	r3, r3
 801b53e:	3b01      	subs	r3, #1
 801b540:	b29a      	uxth	r2, r3
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	69db      	ldr	r3, [r3, #28]
 801b54e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801b552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b556:	f003 0307 	and.w	r3, r3, #7
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d053      	beq.n	801b606 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b562:	f003 0301 	and.w	r3, r3, #1
 801b566:	2b00      	cmp	r3, #0
 801b568:	d011      	beq.n	801b58e <UART_RxISR_8BIT_FIFOEN+0xca>
 801b56a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b572:	2b00      	cmp	r3, #0
 801b574:	d00b      	beq.n	801b58e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	2201      	movs	r2, #1
 801b57c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b584:	f043 0201 	orr.w	r2, r3, #1
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b58e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b592:	f003 0302 	and.w	r3, r3, #2
 801b596:	2b00      	cmp	r3, #0
 801b598:	d011      	beq.n	801b5be <UART_RxISR_8BIT_FIFOEN+0xfa>
 801b59a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b59e:	f003 0301 	and.w	r3, r3, #1
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d00b      	beq.n	801b5be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2202      	movs	r2, #2
 801b5ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b5b4:	f043 0204 	orr.w	r2, r3, #4
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5c2:	f003 0304 	and.w	r3, r3, #4
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d011      	beq.n	801b5ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 801b5ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b5ce:	f003 0301 	and.w	r3, r3, #1
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d00b      	beq.n	801b5ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	2204      	movs	r2, #4
 801b5dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b5e4:	f043 0202 	orr.w	r2, r3, #2
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d006      	beq.n	801b606 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b5f8:	6878      	ldr	r0, [r7, #4]
 801b5fa:	f7fe fe75 	bl	801a2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	2200      	movs	r2, #0
 801b602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b60c:	b29b      	uxth	r3, r3
 801b60e:	2b00      	cmp	r3, #0
 801b610:	f040 80a8 	bne.w	801b764 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b61a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b61c:	e853 3f00 	ldrex	r3, [r3]
 801b620:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801b622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	461a      	mov	r2, r3
 801b632:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801b636:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b638:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b63a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b63c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b63e:	e841 2300 	strex	r3, r2, [r1]
 801b642:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801b644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b646:	2b00      	cmp	r3, #0
 801b648:	d1e4      	bne.n	801b614 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	3308      	adds	r3, #8
 801b650:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b654:	e853 3f00 	ldrex	r3, [r3]
 801b658:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801b65a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b65c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b660:	f023 0301 	bic.w	r3, r3, #1
 801b664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	3308      	adds	r3, #8
 801b66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b672:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b674:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b676:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801b678:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b67a:	e841 2300 	strex	r3, r2, [r1]
 801b67e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801b680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b682:	2b00      	cmp	r3, #0
 801b684:	d1e1      	bne.n	801b64a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	2220      	movs	r2, #32
 801b68a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	2200      	movs	r2, #0
 801b692:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	2200      	movs	r2, #0
 801b698:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	4a62      	ldr	r2, [pc, #392]	@ (801b828 <UART_RxISR_8BIT_FIFOEN+0x364>)
 801b6a0:	4293      	cmp	r3, r2
 801b6a2:	d026      	beq.n	801b6f2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	4a60      	ldr	r2, [pc, #384]	@ (801b82c <UART_RxISR_8BIT_FIFOEN+0x368>)
 801b6aa:	4293      	cmp	r3, r2
 801b6ac:	d021      	beq.n	801b6f2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d01a      	beq.n	801b6f2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b6c4:	e853 3f00 	ldrex	r3, [r3]
 801b6c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801b6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b6cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b6d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	461a      	mov	r2, r3
 801b6da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b6de:	657b      	str	r3, [r7, #84]	@ 0x54
 801b6e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b6e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b6e6:	e841 2300 	strex	r3, r2, [r1]
 801b6ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801b6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d1e4      	bne.n	801b6bc <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b6f6:	2b01      	cmp	r3, #1
 801b6f8:	d130      	bne.n	801b75c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b708:	e853 3f00 	ldrex	r3, [r3]
 801b70c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801b70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b710:	f023 0310 	bic.w	r3, r3, #16
 801b714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	461a      	mov	r2, r3
 801b71e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b722:	643b      	str	r3, [r7, #64]	@ 0x40
 801b724:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b726:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b72a:	e841 2300 	strex	r3, r2, [r1]
 801b72e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801b730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b732:	2b00      	cmp	r3, #0
 801b734:	d1e4      	bne.n	801b700 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	69db      	ldr	r3, [r3, #28]
 801b73c:	f003 0310 	and.w	r3, r3, #16
 801b740:	2b10      	cmp	r3, #16
 801b742:	d103      	bne.n	801b74c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	2210      	movs	r2, #16
 801b74a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b752:	4619      	mov	r1, r3
 801b754:	6878      	ldr	r0, [r7, #4]
 801b756:	f7fe fdd1 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801b75a:	e00e      	b.n	801b77a <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 801b75c:	6878      	ldr	r0, [r7, #4]
 801b75e:	f7f4 fdd9 	bl	8010314 <HAL_UART_RxCpltCallback>
        break;
 801b762:	e00a      	b.n	801b77a <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b764:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d006      	beq.n	801b77a <UART_RxISR_8BIT_FIFOEN+0x2b6>
 801b76c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b770:	f003 0320 	and.w	r3, r3, #32
 801b774:	2b00      	cmp	r3, #0
 801b776:	f47f aec9 	bne.w	801b50c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b780:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801b784:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d049      	beq.n	801b820 <UART_RxISR_8BIT_FIFOEN+0x35c>
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b792:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801b796:	429a      	cmp	r2, r3
 801b798:	d242      	bcs.n	801b820 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	3308      	adds	r3, #8
 801b7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7a2:	6a3b      	ldr	r3, [r7, #32]
 801b7a4:	e853 3f00 	ldrex	r3, [r3]
 801b7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 801b7aa:	69fb      	ldr	r3, [r7, #28]
 801b7ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b7b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	3308      	adds	r3, #8
 801b7ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801b7be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b7c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b7c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7c6:	e841 2300 	strex	r3, r2, [r1]
 801b7ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d1e3      	bne.n	801b79a <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	4a16      	ldr	r2, [pc, #88]	@ (801b830 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 801b7d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	e853 3f00 	ldrex	r3, [r3]
 801b7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	f043 0320 	orr.w	r3, r3, #32
 801b7ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	461a      	mov	r2, r3
 801b7f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b7fa:	61bb      	str	r3, [r7, #24]
 801b7fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b7fe:	6979      	ldr	r1, [r7, #20]
 801b800:	69ba      	ldr	r2, [r7, #24]
 801b802:	e841 2300 	strex	r3, r2, [r1]
 801b806:	613b      	str	r3, [r7, #16]
   return(result);
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d1e4      	bne.n	801b7d8 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b80e:	e007      	b.n	801b820 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	699a      	ldr	r2, [r3, #24]
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	f042 0208 	orr.w	r2, r2, #8
 801b81e:	619a      	str	r2, [r3, #24]
}
 801b820:	bf00      	nop
 801b822:	37b0      	adds	r7, #176	@ 0xb0
 801b824:	46bd      	mov	sp, r7
 801b826:	bd80      	pop	{r7, pc}
 801b828:	44002400 	.word	0x44002400
 801b82c:	54002400 	.word	0x54002400
 801b830:	0801b13d 	.word	0x0801b13d

0801b834 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b0ae      	sub	sp, #184	@ 0xb8
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b842:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	69db      	ldr	r3, [r3, #28]
 801b84c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	689b      	ldr	r3, [r3, #8]
 801b860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b86a:	2b22      	cmp	r3, #34	@ 0x22
 801b86c:	f040 818c 	bne.w	801bb88 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b876:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b87a:	e12f      	b.n	801badc <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b882:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b88a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801b88e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801b892:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801b896:	4013      	ands	r3, r2
 801b898:	b29a      	uxth	r2, r3
 801b89a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b89e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b8a4:	1c9a      	adds	r2, r3, #2
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b8b0:	b29b      	uxth	r3, r3
 801b8b2:	3b01      	subs	r3, #1
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	69db      	ldr	r3, [r3, #28]
 801b8c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801b8c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b8ca:	f003 0307 	and.w	r3, r3, #7
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d053      	beq.n	801b97a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b8d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b8d6:	f003 0301 	and.w	r3, r3, #1
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d011      	beq.n	801b902 <UART_RxISR_16BIT_FIFOEN+0xce>
 801b8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b8e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d00b      	beq.n	801b902 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	2201      	movs	r2, #1
 801b8f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b8f8:	f043 0201 	orr.w	r2, r3, #1
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b906:	f003 0302 	and.w	r3, r3, #2
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d011      	beq.n	801b932 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801b90e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b912:	f003 0301 	and.w	r3, r3, #1
 801b916:	2b00      	cmp	r3, #0
 801b918:	d00b      	beq.n	801b932 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	2202      	movs	r2, #2
 801b920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b928:	f043 0204 	orr.w	r2, r3, #4
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b936:	f003 0304 	and.w	r3, r3, #4
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d011      	beq.n	801b962 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801b93e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b942:	f003 0301 	and.w	r3, r3, #1
 801b946:	2b00      	cmp	r3, #0
 801b948:	d00b      	beq.n	801b962 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	2204      	movs	r2, #4
 801b950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b958:	f043 0202 	orr.w	r2, r3, #2
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d006      	beq.n	801b97a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b96c:	6878      	ldr	r0, [r7, #4]
 801b96e:	f7fe fcbb 	bl	801a2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	2200      	movs	r2, #0
 801b976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b980:	b29b      	uxth	r3, r3
 801b982:	2b00      	cmp	r3, #0
 801b984:	f040 80aa 	bne.w	801badc <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b98e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b990:	e853 3f00 	ldrex	r3, [r3]
 801b994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801b996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b99c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	461a      	mov	r2, r3
 801b9a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801b9aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801b9ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801b9b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b9b6:	e841 2300 	strex	r3, r2, [r1]
 801b9ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801b9bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d1e2      	bne.n	801b988 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	3308      	adds	r3, #8
 801b9c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b9cc:	e853 3f00 	ldrex	r3, [r3]
 801b9d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801b9d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b9d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b9d8:	f023 0301 	bic.w	r3, r3, #1
 801b9dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	3308      	adds	r3, #8
 801b9e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801b9ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b9ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b9f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b9f2:	e841 2300 	strex	r3, r2, [r1]
 801b9f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801b9f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d1e1      	bne.n	801b9c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	2220      	movs	r2, #32
 801ba02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	2200      	movs	r2, #0
 801ba0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	2200      	movs	r2, #0
 801ba10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	4a62      	ldr	r2, [pc, #392]	@ (801bba0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 801ba18:	4293      	cmp	r3, r2
 801ba1a:	d026      	beq.n	801ba6a <UART_RxISR_16BIT_FIFOEN+0x236>
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	4a60      	ldr	r2, [pc, #384]	@ (801bba4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 801ba22:	4293      	cmp	r3, r2
 801ba24:	d021      	beq.n	801ba6a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	685b      	ldr	r3, [r3, #4]
 801ba2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d01a      	beq.n	801ba6a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba3c:	e853 3f00 	ldrex	r3, [r3]
 801ba40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801ba42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ba44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ba48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	461a      	mov	r2, r3
 801ba52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801ba56:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ba58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ba5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ba5e:	e841 2300 	strex	r3, r2, [r1]
 801ba62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801ba64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d1e4      	bne.n	801ba34 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ba6e:	2b01      	cmp	r3, #1
 801ba70:	d130      	bne.n	801bad4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	2200      	movs	r2, #0
 801ba76:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba80:	e853 3f00 	ldrex	r3, [r3]
 801ba84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ba86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ba88:	f023 0310 	bic.w	r3, r3, #16
 801ba8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	461a      	mov	r2, r3
 801ba96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801ba9a:	647b      	str	r3, [r7, #68]	@ 0x44
 801ba9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801baa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801baa2:	e841 2300 	strex	r3, r2, [r1]
 801baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801baa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d1e4      	bne.n	801ba78 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	69db      	ldr	r3, [r3, #28]
 801bab4:	f003 0310 	and.w	r3, r3, #16
 801bab8:	2b10      	cmp	r3, #16
 801baba:	d103      	bne.n	801bac4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	2210      	movs	r2, #16
 801bac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801baca:	4619      	mov	r1, r3
 801bacc:	6878      	ldr	r0, [r7, #4]
 801bace:	f7fe fc15 	bl	801a2fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801bad2:	e00e      	b.n	801baf2 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 801bad4:	6878      	ldr	r0, [r7, #4]
 801bad6:	f7f4 fc1d 	bl	8010314 <HAL_UART_RxCpltCallback>
        break;
 801bada:	e00a      	b.n	801baf2 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801badc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d006      	beq.n	801baf2 <UART_RxISR_16BIT_FIFOEN+0x2be>
 801bae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801bae8:	f003 0320 	and.w	r3, r3, #32
 801baec:	2b00      	cmp	r3, #0
 801baee:	f47f aec5 	bne.w	801b87c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801baf8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801bafc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d049      	beq.n	801bb98 <UART_RxISR_16BIT_FIFOEN+0x364>
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801bb0a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d242      	bcs.n	801bb98 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	3308      	adds	r3, #8
 801bb18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb1c:	e853 3f00 	ldrex	r3, [r3]
 801bb20:	623b      	str	r3, [r7, #32]
   return(result);
 801bb22:	6a3b      	ldr	r3, [r7, #32]
 801bb24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801bb28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	3308      	adds	r3, #8
 801bb32:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801bb36:	633a      	str	r2, [r7, #48]	@ 0x30
 801bb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bb3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb3e:	e841 2300 	strex	r3, r2, [r1]
 801bb42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d1e3      	bne.n	801bb12 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	4a16      	ldr	r2, [pc, #88]	@ (801bba8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 801bb4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb56:	693b      	ldr	r3, [r7, #16]
 801bb58:	e853 3f00 	ldrex	r3, [r3]
 801bb5c:	60fb      	str	r3, [r7, #12]
   return(result);
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	f043 0320 	orr.w	r3, r3, #32
 801bb64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	461a      	mov	r2, r3
 801bb6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801bb72:	61fb      	str	r3, [r7, #28]
 801bb74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb76:	69b9      	ldr	r1, [r7, #24]
 801bb78:	69fa      	ldr	r2, [r7, #28]
 801bb7a:	e841 2300 	strex	r3, r2, [r1]
 801bb7e:	617b      	str	r3, [r7, #20]
   return(result);
 801bb80:	697b      	ldr	r3, [r7, #20]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d1e4      	bne.n	801bb50 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801bb86:	e007      	b.n	801bb98 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	699a      	ldr	r2, [r3, #24]
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f042 0208 	orr.w	r2, r2, #8
 801bb96:	619a      	str	r2, [r3, #24]
}
 801bb98:	bf00      	nop
 801bb9a:	37b8      	adds	r7, #184	@ 0xb8
 801bb9c:	46bd      	mov	sp, r7
 801bb9e:	bd80      	pop	{r7, pc}
 801bba0:	44002400 	.word	0x44002400
 801bba4:	54002400 	.word	0x54002400
 801bba8:	0801b301 	.word	0x0801b301

0801bbac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801bbac:	b480      	push	{r7}
 801bbae:	b083      	sub	sp, #12
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801bbb4:	bf00      	nop
 801bbb6:	370c      	adds	r7, #12
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbbe:	4770      	bx	lr

0801bbc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801bbc0:	b480      	push	{r7}
 801bbc2:	b083      	sub	sp, #12
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801bbc8:	bf00      	nop
 801bbca:	370c      	adds	r7, #12
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbd2:	4770      	bx	lr

0801bbd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801bbd4:	b480      	push	{r7}
 801bbd6:	b083      	sub	sp, #12
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801bbdc:	bf00      	nop
 801bbde:	370c      	adds	r7, #12
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe6:	4770      	bx	lr

0801bbe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801bbe8:	b480      	push	{r7}
 801bbea:	b085      	sub	sp, #20
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bbf6:	2b01      	cmp	r3, #1
 801bbf8:	d101      	bne.n	801bbfe <HAL_UARTEx_DisableFifoMode+0x16>
 801bbfa:	2302      	movs	r3, #2
 801bbfc:	e027      	b.n	801bc4e <HAL_UARTEx_DisableFifoMode+0x66>
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	2201      	movs	r2, #1
 801bc02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	2224      	movs	r2, #36	@ 0x24
 801bc0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	681a      	ldr	r2, [r3, #0]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	f022 0201 	bic.w	r2, r2, #1
 801bc24:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801bc2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	2200      	movs	r2, #0
 801bc32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	68fa      	ldr	r2, [r7, #12]
 801bc3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	2220      	movs	r2, #32
 801bc40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	2200      	movs	r2, #0
 801bc48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bc4c:	2300      	movs	r3, #0
}
 801bc4e:	4618      	mov	r0, r3
 801bc50:	3714      	adds	r7, #20
 801bc52:	46bd      	mov	sp, r7
 801bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc58:	4770      	bx	lr

0801bc5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bc5a:	b580      	push	{r7, lr}
 801bc5c:	b084      	sub	sp, #16
 801bc5e:	af00      	add	r7, sp, #0
 801bc60:	6078      	str	r0, [r7, #4]
 801bc62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bc6a:	2b01      	cmp	r3, #1
 801bc6c:	d101      	bne.n	801bc72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801bc6e:	2302      	movs	r3, #2
 801bc70:	e02d      	b.n	801bcce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	2201      	movs	r2, #1
 801bc76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	2224      	movs	r2, #36	@ 0x24
 801bc7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	681a      	ldr	r2, [r3, #0]
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	f022 0201 	bic.w	r2, r2, #1
 801bc98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	689b      	ldr	r3, [r3, #8]
 801bca0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	683a      	ldr	r2, [r7, #0]
 801bcaa:	430a      	orrs	r2, r1
 801bcac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bcae:	6878      	ldr	r0, [r7, #4]
 801bcb0:	f000 f850 	bl	801bd54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	68fa      	ldr	r2, [r7, #12]
 801bcba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	2220      	movs	r2, #32
 801bcc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bccc:	2300      	movs	r3, #0
}
 801bcce:	4618      	mov	r0, r3
 801bcd0:	3710      	adds	r7, #16
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	bd80      	pop	{r7, pc}

0801bcd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bcd6:	b580      	push	{r7, lr}
 801bcd8:	b084      	sub	sp, #16
 801bcda:	af00      	add	r7, sp, #0
 801bcdc:	6078      	str	r0, [r7, #4]
 801bcde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bce6:	2b01      	cmp	r3, #1
 801bce8:	d101      	bne.n	801bcee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801bcea:	2302      	movs	r3, #2
 801bcec:	e02d      	b.n	801bd4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	2201      	movs	r2, #1
 801bcf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	2224      	movs	r2, #36	@ 0x24
 801bcfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	681a      	ldr	r2, [r3, #0]
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	f022 0201 	bic.w	r2, r2, #1
 801bd14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	689b      	ldr	r3, [r3, #8]
 801bd1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	683a      	ldr	r2, [r7, #0]
 801bd26:	430a      	orrs	r2, r1
 801bd28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f000 f812 	bl	801bd54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	68fa      	ldr	r2, [r7, #12]
 801bd36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	2220      	movs	r2, #32
 801bd3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	2200      	movs	r2, #0
 801bd44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bd48:	2300      	movs	r3, #0
}
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	3710      	adds	r7, #16
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd80      	pop	{r7, pc}
	...

0801bd54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801bd54:	b480      	push	{r7}
 801bd56:	b085      	sub	sp, #20
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d108      	bne.n	801bd76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	2201      	movs	r2, #1
 801bd68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2201      	movs	r2, #1
 801bd70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801bd74:	e031      	b.n	801bdda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801bd76:	2308      	movs	r3, #8
 801bd78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801bd7a:	2308      	movs	r3, #8
 801bd7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	689b      	ldr	r3, [r3, #8]
 801bd84:	0e5b      	lsrs	r3, r3, #25
 801bd86:	b2db      	uxtb	r3, r3
 801bd88:	f003 0307 	and.w	r3, r3, #7
 801bd8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	689b      	ldr	r3, [r3, #8]
 801bd94:	0f5b      	lsrs	r3, r3, #29
 801bd96:	b2db      	uxtb	r3, r3
 801bd98:	f003 0307 	and.w	r3, r3, #7
 801bd9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bd9e:	7bbb      	ldrb	r3, [r7, #14]
 801bda0:	7b3a      	ldrb	r2, [r7, #12]
 801bda2:	4911      	ldr	r1, [pc, #68]	@ (801bde8 <UARTEx_SetNbDataToProcess+0x94>)
 801bda4:	5c8a      	ldrb	r2, [r1, r2]
 801bda6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801bdaa:	7b3a      	ldrb	r2, [r7, #12]
 801bdac:	490f      	ldr	r1, [pc, #60]	@ (801bdec <UARTEx_SetNbDataToProcess+0x98>)
 801bdae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bdb0:	fb93 f3f2 	sdiv	r3, r3, r2
 801bdb4:	b29a      	uxth	r2, r3
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bdbc:	7bfb      	ldrb	r3, [r7, #15]
 801bdbe:	7b7a      	ldrb	r2, [r7, #13]
 801bdc0:	4909      	ldr	r1, [pc, #36]	@ (801bde8 <UARTEx_SetNbDataToProcess+0x94>)
 801bdc2:	5c8a      	ldrb	r2, [r1, r2]
 801bdc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801bdc8:	7b7a      	ldrb	r2, [r7, #13]
 801bdca:	4908      	ldr	r1, [pc, #32]	@ (801bdec <UARTEx_SetNbDataToProcess+0x98>)
 801bdcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bdce:	fb93 f3f2 	sdiv	r3, r3, r2
 801bdd2:	b29a      	uxth	r2, r3
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801bdda:	bf00      	nop
 801bddc:	3714      	adds	r7, #20
 801bdde:	46bd      	mov	sp, r7
 801bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde4:	4770      	bx	lr
 801bde6:	bf00      	nop
 801bde8:	0801f350 	.word	0x0801f350
 801bdec:	0801f358 	.word	0x0801f358

0801bdf0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 801bdf0:	b480      	push	{r7}
 801bdf2:	b087      	sub	sp, #28
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	6078      	str	r0, [r7, #4]
 801bdf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	681a      	ldr	r2, [r3, #0]
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be04:	683a      	ldr	r2, [r7, #0]
 801be06:	6812      	ldr	r2, [r2, #0]
 801be08:	f023 0101 	bic.w	r1, r3, #1
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801be12:	683b      	ldr	r3, [r7, #0]
 801be14:	689b      	ldr	r3, [r3, #8]
 801be16:	2b08      	cmp	r3, #8
 801be18:	d102      	bne.n	801be20 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 801be1a:	2340      	movs	r3, #64	@ 0x40
 801be1c:	617b      	str	r3, [r7, #20]
 801be1e:	e001      	b.n	801be24 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 801be20:	2300      	movs	r3, #0
 801be22:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 801be24:	683b      	ldr	r3, [r7, #0]
 801be26:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 801be28:	697b      	ldr	r3, [r7, #20]
 801be2a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 801be2c:	683b      	ldr	r3, [r7, #0]
 801be2e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 801be30:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801be32:	683b      	ldr	r3, [r7, #0]
 801be34:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 801be36:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 801be38:	683b      	ldr	r3, [r7, #0]
 801be3a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 801be3c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 801be3e:	683b      	ldr	r3, [r7, #0]
 801be40:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801be42:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 801be44:	683b      	ldr	r3, [r7, #0]
 801be46:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 801be48:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 801be4e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801be54:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 801be5a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 801be5c:	683b      	ldr	r3, [r7, #0]
 801be5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 801be60:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801be62:	683b      	ldr	r3, [r7, #0]
 801be64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 801be66:	4313      	orrs	r3, r2
 801be68:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 801be6a:	683b      	ldr	r3, [r7, #0]
 801be6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801be6e:	693a      	ldr	r2, [r7, #16]
 801be70:	4313      	orrs	r3, r2
 801be72:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 801be74:	683b      	ldr	r3, [r7, #0]
 801be76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be78:	693a      	ldr	r2, [r7, #16]
 801be7a:	4313      	orrs	r3, r2
 801be7c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 801be7e:	683b      	ldr	r3, [r7, #0]
 801be80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be82:	693a      	ldr	r2, [r7, #16]
 801be84:	4313      	orrs	r3, r2
 801be86:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 801be88:	683b      	ldr	r3, [r7, #0]
 801be8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be8c:	693a      	ldr	r2, [r7, #16]
 801be8e:	4313      	orrs	r3, r2
 801be90:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 801be92:	4b3d      	ldr	r3, [pc, #244]	@ (801bf88 <FMC_NORSRAM_Init+0x198>)
 801be94:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801be9c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801bea4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 801beac:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 801beb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	681a      	ldr	r2, [r3, #0]
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	43db      	mvns	r3, r3
 801bec4:	ea02 0103 	and.w	r1, r2, r3
 801bec8:	683b      	ldr	r3, [r7, #0]
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	693b      	ldr	r3, [r7, #16]
 801bece:	4319      	orrs	r1, r3
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 801bed6:	683b      	ldr	r3, [r7, #0]
 801bed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801beda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bede:	d10c      	bne.n	801befa <FMC_NORSRAM_Init+0x10a>
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d008      	beq.n	801befa <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801bef0:	683b      	ldr	r3, [r7, #0]
 801bef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bef4:	431a      	orrs	r2, r3
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 801befa:	683b      	ldr	r3, [r7, #0]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d006      	beq.n	801bf10 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	681a      	ldr	r2, [r3, #0]
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf0a:	431a      	orrs	r2, r3
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 801bf10:	683b      	ldr	r3, [r7, #0]
 801bf12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bf16:	2b01      	cmp	r3, #1
 801bf18:	d12f      	bne.n	801bf7a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	6a1b      	ldr	r3, [r3, #32]
 801bf1e:	0c1b      	lsrs	r3, r3, #16
 801bf20:	041b      	lsls	r3, r3, #16
 801bf22:	683a      	ldr	r2, [r7, #0]
 801bf24:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 801bf26:	431a      	orrs	r2, r3
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 801bf2c:	683b      	ldr	r3, [r7, #0]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	2b04      	cmp	r3, #4
 801bf32:	d014      	beq.n	801bf5e <FMC_NORSRAM_Init+0x16e>
 801bf34:	2b04      	cmp	r3, #4
 801bf36:	d819      	bhi.n	801bf6c <FMC_NORSRAM_Init+0x17c>
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d002      	beq.n	801bf42 <FMC_NORSRAM_Init+0x152>
 801bf3c:	2b02      	cmp	r3, #2
 801bf3e:	d007      	beq.n	801bf50 <FMC_NORSRAM_Init+0x160>
 801bf40:	e014      	b.n	801bf6c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	6a1b      	ldr	r3, [r3, #32]
 801bf46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	621a      	str	r2, [r3, #32]
        break;
 801bf4e:	e014      	b.n	801bf7a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	6a1b      	ldr	r3, [r3, #32]
 801bf54:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	621a      	str	r2, [r3, #32]
        break;
 801bf5c:	e00d      	b.n	801bf7a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	6a1b      	ldr	r3, [r3, #32]
 801bf62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	621a      	str	r2, [r3, #32]
        break;
 801bf6a:	e006      	b.n	801bf7a <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	6a1b      	ldr	r3, [r3, #32]
 801bf70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	621a      	str	r2, [r3, #32]
        break;
 801bf78:	bf00      	nop
    }
  }

  return HAL_OK;
 801bf7a:	2300      	movs	r3, #0
}
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	371c      	adds	r7, #28
 801bf80:	46bd      	mov	sp, r7
 801bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf86:	4770      	bx	lr
 801bf88:	0008fb7f 	.word	0x0008fb7f

0801bf8c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801bf8c:	b480      	push	{r7}
 801bf8e:	b087      	sub	sp, #28
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	60f8      	str	r0, [r7, #12]
 801bf94:	60b9      	str	r1, [r7, #8]
 801bf96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 801bf98:	68bb      	ldr	r3, [r7, #8]
 801bf9a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	685b      	ldr	r3, [r3, #4]
 801bfa0:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 801bfa2:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 801bfa4:	68bb      	ldr	r3, [r7, #8]
 801bfa6:	689b      	ldr	r3, [r3, #8]
 801bfa8:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 801bfaa:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 801bfac:	68bb      	ldr	r3, [r7, #8]
 801bfae:	68db      	ldr	r3, [r3, #12]
 801bfb0:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 801bfb2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 801bfb4:	68bb      	ldr	r3, [r7, #8]
 801bfb6:	691b      	ldr	r3, [r3, #16]
 801bfb8:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 801bfba:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 801bfbc:	68bb      	ldr	r3, [r7, #8]
 801bfbe:	695b      	ldr	r3, [r3, #20]
 801bfc0:	3b01      	subs	r3, #1
 801bfc2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 801bfc4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 801bfc6:	68bb      	ldr	r3, [r7, #8]
 801bfc8:	699b      	ldr	r3, [r3, #24]
 801bfca:	3b02      	subs	r3, #2
 801bfcc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 801bfce:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 801bfd2:	68bb      	ldr	r3, [r7, #8]
 801bfd4:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 801bfd6:	687a      	ldr	r2, [r7, #4]
 801bfd8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 801bfda:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 801bfdc:	68fb      	ldr	r3, [r7, #12]
 801bfde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801bfea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bfee:	d113      	bne.n	801c018 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	685b      	ldr	r3, [r3, #4]
 801bff4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801bff8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 801bffa:	68bb      	ldr	r3, [r7, #8]
 801bffc:	695b      	ldr	r3, [r3, #20]
 801bffe:	3b01      	subs	r3, #1
 801c000:	051b      	lsls	r3, r3, #20
 801c002:	697a      	ldr	r2, [r7, #20]
 801c004:	4313      	orrs	r3, r2
 801c006:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	685b      	ldr	r3, [r3, #4]
 801c00c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801c010:	697b      	ldr	r3, [r7, #20]
 801c012:	431a      	orrs	r2, r3
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801c018:	2300      	movs	r3, #0
}
 801c01a:	4618      	mov	r0, r3
 801c01c:	371c      	adds	r7, #28
 801c01e:	46bd      	mov	sp, r7
 801c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c024:	4770      	bx	lr

0801c026 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 801c026:	b480      	push	{r7}
 801c028:	b085      	sub	sp, #20
 801c02a:	af00      	add	r7, sp, #0
 801c02c:	60f8      	str	r0, [r7, #12]
 801c02e:	60b9      	str	r1, [r7, #8]
 801c030:	607a      	str	r2, [r7, #4]
 801c032:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801c034:	683b      	ldr	r3, [r7, #0]
 801c036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c03a:	d121      	bne.n	801c080 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	687a      	ldr	r2, [r7, #4]
 801c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c044:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 801c048:	68bb      	ldr	r3, [r7, #8]
 801c04a:	6819      	ldr	r1, [r3, #0]
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	685b      	ldr	r3, [r3, #4]
 801c050:	011b      	lsls	r3, r3, #4
 801c052:	4319      	orrs	r1, r3
 801c054:	68bb      	ldr	r3, [r7, #8]
 801c056:	689b      	ldr	r3, [r3, #8]
 801c058:	021b      	lsls	r3, r3, #8
 801c05a:	4319      	orrs	r1, r3
 801c05c:	68bb      	ldr	r3, [r7, #8]
 801c05e:	68db      	ldr	r3, [r3, #12]
 801c060:	079b      	lsls	r3, r3, #30
 801c062:	4319      	orrs	r1, r3
 801c064:	68bb      	ldr	r3, [r7, #8]
 801c066:	69db      	ldr	r3, [r3, #28]
 801c068:	4319      	orrs	r1, r3
 801c06a:	68bb      	ldr	r3, [r7, #8]
 801c06c:	691b      	ldr	r3, [r3, #16]
 801c06e:	041b      	lsls	r3, r3, #16
 801c070:	430b      	orrs	r3, r1
 801c072:	ea42 0103 	orr.w	r1, r2, r3
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	687a      	ldr	r2, [r7, #4]
 801c07a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801c07e:	e005      	b.n	801c08c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	687a      	ldr	r2, [r7, #4]
 801c084:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 801c088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801c08c:	2300      	movs	r3, #0
}
 801c08e:	4618      	mov	r0, r3
 801c090:	3714      	adds	r7, #20
 801c092:	46bd      	mov	sp, r7
 801c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c098:	4770      	bx	lr
	...

0801c09c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 801c09c:	b480      	push	{r7}
 801c09e:	b083      	sub	sp, #12
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	6078      	str	r0, [r7, #4]
 801c0a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681a      	ldr	r2, [r3, #0]
 801c0aa:	4b10      	ldr	r3, [pc, #64]	@ (801c0ec <FMC_NAND_Init+0x50>)
 801c0ac:	4013      	ands	r3, r2
 801c0ae:	683a      	ldr	r2, [r7, #0]
 801c0b0:	6851      	ldr	r1, [r2, #4]
 801c0b2:	683a      	ldr	r2, [r7, #0]
 801c0b4:	6892      	ldr	r2, [r2, #8]
 801c0b6:	4311      	orrs	r1, r2
 801c0b8:	683a      	ldr	r2, [r7, #0]
 801c0ba:	68d2      	ldr	r2, [r2, #12]
 801c0bc:	4311      	orrs	r1, r2
 801c0be:	683a      	ldr	r2, [r7, #0]
 801c0c0:	6912      	ldr	r2, [r2, #16]
 801c0c2:	4311      	orrs	r1, r2
 801c0c4:	683a      	ldr	r2, [r7, #0]
 801c0c6:	6952      	ldr	r2, [r2, #20]
 801c0c8:	0252      	lsls	r2, r2, #9
 801c0ca:	4311      	orrs	r1, r2
 801c0cc:	683a      	ldr	r2, [r7, #0]
 801c0ce:	6992      	ldr	r2, [r2, #24]
 801c0d0:	0352      	lsls	r2, r2, #13
 801c0d2:	430a      	orrs	r2, r1
 801c0d4:	4313      	orrs	r3, r2
 801c0d6:	f043 0208 	orr.w	r2, r3, #8
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 801c0de:	2300      	movs	r3, #0
}
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	370c      	adds	r7, #12
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ea:	4770      	bx	lr
 801c0ec:	fff00181 	.word	0xfff00181

0801c0f0 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801c0f0:	b480      	push	{r7}
 801c0f2:	b085      	sub	sp, #20
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	60f8      	str	r0, [r7, #12]
 801c0f8:	60b9      	str	r1, [r7, #8]
 801c0fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 801c0fc:	68bb      	ldr	r3, [r7, #8]
 801c0fe:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	685b      	ldr	r3, [r3, #4]
 801c104:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 801c106:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	689b      	ldr	r3, [r3, #8]
 801c10c:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 801c10e:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 801c110:	68bb      	ldr	r3, [r7, #8]
 801c112:	68db      	ldr	r3, [r3, #12]
 801c114:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 801c116:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 801c11c:	2300      	movs	r3, #0
}
 801c11e:	4618      	mov	r0, r3
 801c120:	3714      	adds	r7, #20
 801c122:	46bd      	mov	sp, r7
 801c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c128:	4770      	bx	lr

0801c12a <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801c12a:	b480      	push	{r7}
 801c12c:	b085      	sub	sp, #20
 801c12e:	af00      	add	r7, sp, #0
 801c130:	60f8      	str	r0, [r7, #12]
 801c132:	60b9      	str	r1, [r7, #8]
 801c134:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 801c136:	68bb      	ldr	r3, [r7, #8]
 801c138:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 801c13a:	68bb      	ldr	r3, [r7, #8]
 801c13c:	685b      	ldr	r3, [r3, #4]
 801c13e:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 801c140:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 801c142:	68bb      	ldr	r3, [r7, #8]
 801c144:	689b      	ldr	r3, [r3, #8]
 801c146:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 801c148:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	68db      	ldr	r3, [r3, #12]
 801c14e:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 801c150:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801c156:	2300      	movs	r3, #0
}
 801c158:	4618      	mov	r0, r3
 801c15a:	3714      	adds	r7, #20
 801c15c:	46bd      	mov	sp, r7
 801c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c162:	4770      	bx	lr

0801c164 <__cvt>:
 801c164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c168:	ec57 6b10 	vmov	r6, r7, d0
 801c16c:	2f00      	cmp	r7, #0
 801c16e:	460c      	mov	r4, r1
 801c170:	4619      	mov	r1, r3
 801c172:	463b      	mov	r3, r7
 801c174:	bfb4      	ite	lt
 801c176:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c17a:	2300      	movge	r3, #0
 801c17c:	4691      	mov	r9, r2
 801c17e:	bfbf      	itttt	lt
 801c180:	4632      	movlt	r2, r6
 801c182:	461f      	movlt	r7, r3
 801c184:	232d      	movlt	r3, #45	@ 0x2d
 801c186:	4616      	movlt	r6, r2
 801c188:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c18c:	700b      	strb	r3, [r1, #0]
 801c18e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c190:	f023 0820 	bic.w	r8, r3, #32
 801c194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c198:	d005      	beq.n	801c1a6 <__cvt+0x42>
 801c19a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c19e:	d100      	bne.n	801c1a2 <__cvt+0x3e>
 801c1a0:	3401      	adds	r4, #1
 801c1a2:	2102      	movs	r1, #2
 801c1a4:	e000      	b.n	801c1a8 <__cvt+0x44>
 801c1a6:	2103      	movs	r1, #3
 801c1a8:	ab03      	add	r3, sp, #12
 801c1aa:	4622      	mov	r2, r4
 801c1ac:	9301      	str	r3, [sp, #4]
 801c1ae:	ab02      	add	r3, sp, #8
 801c1b0:	ec47 6b10 	vmov	d0, r6, r7
 801c1b4:	9300      	str	r3, [sp, #0]
 801c1b6:	4653      	mov	r3, sl
 801c1b8:	f000 fe92 	bl	801cee0 <_dtoa_r>
 801c1bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c1c0:	4605      	mov	r5, r0
 801c1c2:	d119      	bne.n	801c1f8 <__cvt+0x94>
 801c1c4:	f019 0f01 	tst.w	r9, #1
 801c1c8:	d00e      	beq.n	801c1e8 <__cvt+0x84>
 801c1ca:	eb00 0904 	add.w	r9, r0, r4
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	2300      	movs	r3, #0
 801c1d2:	4630      	mov	r0, r6
 801c1d4:	4639      	mov	r1, r7
 801c1d6:	f7f0 fc87 	bl	800cae8 <__aeabi_dcmpeq>
 801c1da:	b108      	cbz	r0, 801c1e0 <__cvt+0x7c>
 801c1dc:	f8cd 900c 	str.w	r9, [sp, #12]
 801c1e0:	2230      	movs	r2, #48	@ 0x30
 801c1e2:	9b03      	ldr	r3, [sp, #12]
 801c1e4:	454b      	cmp	r3, r9
 801c1e6:	d31e      	bcc.n	801c226 <__cvt+0xc2>
 801c1e8:	9b03      	ldr	r3, [sp, #12]
 801c1ea:	4628      	mov	r0, r5
 801c1ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c1ee:	1b5b      	subs	r3, r3, r5
 801c1f0:	6013      	str	r3, [r2, #0]
 801c1f2:	b004      	add	sp, #16
 801c1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c1fc:	eb00 0904 	add.w	r9, r0, r4
 801c200:	d1e5      	bne.n	801c1ce <__cvt+0x6a>
 801c202:	7803      	ldrb	r3, [r0, #0]
 801c204:	2b30      	cmp	r3, #48	@ 0x30
 801c206:	d10a      	bne.n	801c21e <__cvt+0xba>
 801c208:	2200      	movs	r2, #0
 801c20a:	2300      	movs	r3, #0
 801c20c:	4630      	mov	r0, r6
 801c20e:	4639      	mov	r1, r7
 801c210:	f7f0 fc6a 	bl	800cae8 <__aeabi_dcmpeq>
 801c214:	b918      	cbnz	r0, 801c21e <__cvt+0xba>
 801c216:	f1c4 0401 	rsb	r4, r4, #1
 801c21a:	f8ca 4000 	str.w	r4, [sl]
 801c21e:	f8da 3000 	ldr.w	r3, [sl]
 801c222:	4499      	add	r9, r3
 801c224:	e7d3      	b.n	801c1ce <__cvt+0x6a>
 801c226:	1c59      	adds	r1, r3, #1
 801c228:	9103      	str	r1, [sp, #12]
 801c22a:	701a      	strb	r2, [r3, #0]
 801c22c:	e7d9      	b.n	801c1e2 <__cvt+0x7e>

0801c22e <__exponent>:
 801c22e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c230:	2900      	cmp	r1, #0
 801c232:	7002      	strb	r2, [r0, #0]
 801c234:	bfba      	itte	lt
 801c236:	4249      	neglt	r1, r1
 801c238:	232d      	movlt	r3, #45	@ 0x2d
 801c23a:	232b      	movge	r3, #43	@ 0x2b
 801c23c:	2909      	cmp	r1, #9
 801c23e:	7043      	strb	r3, [r0, #1]
 801c240:	dd28      	ble.n	801c294 <__exponent+0x66>
 801c242:	f10d 0307 	add.w	r3, sp, #7
 801c246:	270a      	movs	r7, #10
 801c248:	461d      	mov	r5, r3
 801c24a:	461a      	mov	r2, r3
 801c24c:	3b01      	subs	r3, #1
 801c24e:	fbb1 f6f7 	udiv	r6, r1, r7
 801c252:	fb07 1416 	mls	r4, r7, r6, r1
 801c256:	3430      	adds	r4, #48	@ 0x30
 801c258:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c25c:	460c      	mov	r4, r1
 801c25e:	4631      	mov	r1, r6
 801c260:	2c63      	cmp	r4, #99	@ 0x63
 801c262:	dcf2      	bgt.n	801c24a <__exponent+0x1c>
 801c264:	3130      	adds	r1, #48	@ 0x30
 801c266:	1e94      	subs	r4, r2, #2
 801c268:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c26c:	1c41      	adds	r1, r0, #1
 801c26e:	4623      	mov	r3, r4
 801c270:	42ab      	cmp	r3, r5
 801c272:	d30a      	bcc.n	801c28a <__exponent+0x5c>
 801c274:	f10d 0309 	add.w	r3, sp, #9
 801c278:	1a9b      	subs	r3, r3, r2
 801c27a:	42ac      	cmp	r4, r5
 801c27c:	bf88      	it	hi
 801c27e:	2300      	movhi	r3, #0
 801c280:	3302      	adds	r3, #2
 801c282:	4403      	add	r3, r0
 801c284:	1a18      	subs	r0, r3, r0
 801c286:	b003      	add	sp, #12
 801c288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c28a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c28e:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c292:	e7ed      	b.n	801c270 <__exponent+0x42>
 801c294:	2330      	movs	r3, #48	@ 0x30
 801c296:	3130      	adds	r1, #48	@ 0x30
 801c298:	7083      	strb	r3, [r0, #2]
 801c29a:	1d03      	adds	r3, r0, #4
 801c29c:	70c1      	strb	r1, [r0, #3]
 801c29e:	e7f1      	b.n	801c284 <__exponent+0x56>

0801c2a0 <_printf_float>:
 801c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a4:	b08d      	sub	sp, #52	@ 0x34
 801c2a6:	460c      	mov	r4, r1
 801c2a8:	4616      	mov	r6, r2
 801c2aa:	461f      	mov	r7, r3
 801c2ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c2b0:	4605      	mov	r5, r0
 801c2b2:	f000 fcf5 	bl	801cca0 <_localeconv_r>
 801c2b6:	6803      	ldr	r3, [r0, #0]
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	9304      	str	r3, [sp, #16]
 801c2bc:	f7ef ffe8 	bl	800c290 <strlen>
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	9005      	str	r0, [sp, #20]
 801c2c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2c6:	f8d8 3000 	ldr.w	r3, [r8]
 801c2ca:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c2ce:	3307      	adds	r3, #7
 801c2d0:	f8d4 b000 	ldr.w	fp, [r4]
 801c2d4:	f023 0307 	bic.w	r3, r3, #7
 801c2d8:	f103 0208 	add.w	r2, r3, #8
 801c2dc:	f8c8 2000 	str.w	r2, [r8]
 801c2e0:	f04f 32ff 	mov.w	r2, #4294967295
 801c2e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c2e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c2ec:	f8cd 8018 	str.w	r8, [sp, #24]
 801c2f0:	9307      	str	r3, [sp, #28]
 801c2f2:	4b9d      	ldr	r3, [pc, #628]	@ (801c568 <_printf_float+0x2c8>)
 801c2f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c2f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c2fc:	f7f0 fc26 	bl	800cb4c <__aeabi_dcmpun>
 801c300:	bb70      	cbnz	r0, 801c360 <_printf_float+0xc0>
 801c302:	f04f 32ff 	mov.w	r2, #4294967295
 801c306:	4b98      	ldr	r3, [pc, #608]	@ (801c568 <_printf_float+0x2c8>)
 801c308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c30c:	f7f0 fc00 	bl	800cb10 <__aeabi_dcmple>
 801c310:	bb30      	cbnz	r0, 801c360 <_printf_float+0xc0>
 801c312:	2200      	movs	r2, #0
 801c314:	2300      	movs	r3, #0
 801c316:	4640      	mov	r0, r8
 801c318:	4649      	mov	r1, r9
 801c31a:	f7f0 fbef 	bl	800cafc <__aeabi_dcmplt>
 801c31e:	b110      	cbz	r0, 801c326 <_printf_float+0x86>
 801c320:	232d      	movs	r3, #45	@ 0x2d
 801c322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c326:	4a91      	ldr	r2, [pc, #580]	@ (801c56c <_printf_float+0x2cc>)
 801c328:	4b91      	ldr	r3, [pc, #580]	@ (801c570 <_printf_float+0x2d0>)
 801c32a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c32e:	bf94      	ite	ls
 801c330:	4690      	movls	r8, r2
 801c332:	4698      	movhi	r8, r3
 801c334:	2303      	movs	r3, #3
 801c336:	f04f 0900 	mov.w	r9, #0
 801c33a:	6123      	str	r3, [r4, #16]
 801c33c:	f02b 0304 	bic.w	r3, fp, #4
 801c340:	6023      	str	r3, [r4, #0]
 801c342:	4633      	mov	r3, r6
 801c344:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c346:	4621      	mov	r1, r4
 801c348:	4628      	mov	r0, r5
 801c34a:	9700      	str	r7, [sp, #0]
 801c34c:	f000 f9d2 	bl	801c6f4 <_printf_common>
 801c350:	3001      	adds	r0, #1
 801c352:	f040 808d 	bne.w	801c470 <_printf_float+0x1d0>
 801c356:	f04f 30ff 	mov.w	r0, #4294967295
 801c35a:	b00d      	add	sp, #52	@ 0x34
 801c35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c360:	4642      	mov	r2, r8
 801c362:	464b      	mov	r3, r9
 801c364:	4640      	mov	r0, r8
 801c366:	4649      	mov	r1, r9
 801c368:	f7f0 fbf0 	bl	800cb4c <__aeabi_dcmpun>
 801c36c:	b140      	cbz	r0, 801c380 <_printf_float+0xe0>
 801c36e:	464b      	mov	r3, r9
 801c370:	4a80      	ldr	r2, [pc, #512]	@ (801c574 <_printf_float+0x2d4>)
 801c372:	2b00      	cmp	r3, #0
 801c374:	bfbc      	itt	lt
 801c376:	232d      	movlt	r3, #45	@ 0x2d
 801c378:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c37c:	4b7e      	ldr	r3, [pc, #504]	@ (801c578 <_printf_float+0x2d8>)
 801c37e:	e7d4      	b.n	801c32a <_printf_float+0x8a>
 801c380:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c384:	6863      	ldr	r3, [r4, #4]
 801c386:	9206      	str	r2, [sp, #24]
 801c388:	1c5a      	adds	r2, r3, #1
 801c38a:	d13b      	bne.n	801c404 <_printf_float+0x164>
 801c38c:	2306      	movs	r3, #6
 801c38e:	6063      	str	r3, [r4, #4]
 801c390:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c394:	2300      	movs	r3, #0
 801c396:	4628      	mov	r0, r5
 801c398:	6022      	str	r2, [r4, #0]
 801c39a:	9303      	str	r3, [sp, #12]
 801c39c:	ab0a      	add	r3, sp, #40	@ 0x28
 801c39e:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c3a2:	ab09      	add	r3, sp, #36	@ 0x24
 801c3a4:	ec49 8b10 	vmov	d0, r8, r9
 801c3a8:	9300      	str	r3, [sp, #0]
 801c3aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c3ae:	6861      	ldr	r1, [r4, #4]
 801c3b0:	f7ff fed8 	bl	801c164 <__cvt>
 801c3b4:	9b06      	ldr	r3, [sp, #24]
 801c3b6:	4680      	mov	r8, r0
 801c3b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3ba:	2b47      	cmp	r3, #71	@ 0x47
 801c3bc:	d129      	bne.n	801c412 <_printf_float+0x172>
 801c3be:	1cc8      	adds	r0, r1, #3
 801c3c0:	db02      	blt.n	801c3c8 <_printf_float+0x128>
 801c3c2:	6863      	ldr	r3, [r4, #4]
 801c3c4:	4299      	cmp	r1, r3
 801c3c6:	dd41      	ble.n	801c44c <_printf_float+0x1ac>
 801c3c8:	f1aa 0a02 	sub.w	sl, sl, #2
 801c3cc:	fa5f fa8a 	uxtb.w	sl, sl
 801c3d0:	3901      	subs	r1, #1
 801c3d2:	4652      	mov	r2, sl
 801c3d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c3d8:	9109      	str	r1, [sp, #36]	@ 0x24
 801c3da:	f7ff ff28 	bl	801c22e <__exponent>
 801c3de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c3e0:	4681      	mov	r9, r0
 801c3e2:	1813      	adds	r3, r2, r0
 801c3e4:	2a01      	cmp	r2, #1
 801c3e6:	6123      	str	r3, [r4, #16]
 801c3e8:	dc02      	bgt.n	801c3f0 <_printf_float+0x150>
 801c3ea:	6822      	ldr	r2, [r4, #0]
 801c3ec:	07d2      	lsls	r2, r2, #31
 801c3ee:	d501      	bpl.n	801c3f4 <_printf_float+0x154>
 801c3f0:	3301      	adds	r3, #1
 801c3f2:	6123      	str	r3, [r4, #16]
 801c3f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d0a2      	beq.n	801c342 <_printf_float+0xa2>
 801c3fc:	232d      	movs	r3, #45	@ 0x2d
 801c3fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c402:	e79e      	b.n	801c342 <_printf_float+0xa2>
 801c404:	9a06      	ldr	r2, [sp, #24]
 801c406:	2a47      	cmp	r2, #71	@ 0x47
 801c408:	d1c2      	bne.n	801c390 <_printf_float+0xf0>
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d1c0      	bne.n	801c390 <_printf_float+0xf0>
 801c40e:	2301      	movs	r3, #1
 801c410:	e7bd      	b.n	801c38e <_printf_float+0xee>
 801c412:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c416:	d9db      	bls.n	801c3d0 <_printf_float+0x130>
 801c418:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c41c:	d118      	bne.n	801c450 <_printf_float+0x1b0>
 801c41e:	2900      	cmp	r1, #0
 801c420:	6863      	ldr	r3, [r4, #4]
 801c422:	dd0b      	ble.n	801c43c <_printf_float+0x19c>
 801c424:	6121      	str	r1, [r4, #16]
 801c426:	b913      	cbnz	r3, 801c42e <_printf_float+0x18e>
 801c428:	6822      	ldr	r2, [r4, #0]
 801c42a:	07d0      	lsls	r0, r2, #31
 801c42c:	d502      	bpl.n	801c434 <_printf_float+0x194>
 801c42e:	3301      	adds	r3, #1
 801c430:	440b      	add	r3, r1
 801c432:	6123      	str	r3, [r4, #16]
 801c434:	f04f 0900 	mov.w	r9, #0
 801c438:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c43a:	e7db      	b.n	801c3f4 <_printf_float+0x154>
 801c43c:	b913      	cbnz	r3, 801c444 <_printf_float+0x1a4>
 801c43e:	6822      	ldr	r2, [r4, #0]
 801c440:	07d2      	lsls	r2, r2, #31
 801c442:	d501      	bpl.n	801c448 <_printf_float+0x1a8>
 801c444:	3302      	adds	r3, #2
 801c446:	e7f4      	b.n	801c432 <_printf_float+0x192>
 801c448:	2301      	movs	r3, #1
 801c44a:	e7f2      	b.n	801c432 <_printf_float+0x192>
 801c44c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c452:	4299      	cmp	r1, r3
 801c454:	db05      	blt.n	801c462 <_printf_float+0x1c2>
 801c456:	6823      	ldr	r3, [r4, #0]
 801c458:	6121      	str	r1, [r4, #16]
 801c45a:	07d8      	lsls	r0, r3, #31
 801c45c:	d5ea      	bpl.n	801c434 <_printf_float+0x194>
 801c45e:	1c4b      	adds	r3, r1, #1
 801c460:	e7e7      	b.n	801c432 <_printf_float+0x192>
 801c462:	2900      	cmp	r1, #0
 801c464:	bfd4      	ite	le
 801c466:	f1c1 0202 	rsble	r2, r1, #2
 801c46a:	2201      	movgt	r2, #1
 801c46c:	4413      	add	r3, r2
 801c46e:	e7e0      	b.n	801c432 <_printf_float+0x192>
 801c470:	6823      	ldr	r3, [r4, #0]
 801c472:	055a      	lsls	r2, r3, #21
 801c474:	d407      	bmi.n	801c486 <_printf_float+0x1e6>
 801c476:	6923      	ldr	r3, [r4, #16]
 801c478:	4642      	mov	r2, r8
 801c47a:	4631      	mov	r1, r6
 801c47c:	4628      	mov	r0, r5
 801c47e:	47b8      	blx	r7
 801c480:	3001      	adds	r0, #1
 801c482:	d12b      	bne.n	801c4dc <_printf_float+0x23c>
 801c484:	e767      	b.n	801c356 <_printf_float+0xb6>
 801c486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c48a:	f240 80dd 	bls.w	801c648 <_printf_float+0x3a8>
 801c48e:	2200      	movs	r2, #0
 801c490:	2300      	movs	r3, #0
 801c492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c496:	f7f0 fb27 	bl	800cae8 <__aeabi_dcmpeq>
 801c49a:	2800      	cmp	r0, #0
 801c49c:	d033      	beq.n	801c506 <_printf_float+0x266>
 801c49e:	2301      	movs	r3, #1
 801c4a0:	4a36      	ldr	r2, [pc, #216]	@ (801c57c <_printf_float+0x2dc>)
 801c4a2:	4631      	mov	r1, r6
 801c4a4:	4628      	mov	r0, r5
 801c4a6:	47b8      	blx	r7
 801c4a8:	3001      	adds	r0, #1
 801c4aa:	f43f af54 	beq.w	801c356 <_printf_float+0xb6>
 801c4ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c4b2:	4543      	cmp	r3, r8
 801c4b4:	db02      	blt.n	801c4bc <_printf_float+0x21c>
 801c4b6:	6823      	ldr	r3, [r4, #0]
 801c4b8:	07d8      	lsls	r0, r3, #31
 801c4ba:	d50f      	bpl.n	801c4dc <_printf_float+0x23c>
 801c4bc:	4631      	mov	r1, r6
 801c4be:	4628      	mov	r0, r5
 801c4c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c4c4:	47b8      	blx	r7
 801c4c6:	3001      	adds	r0, #1
 801c4c8:	f43f af45 	beq.w	801c356 <_printf_float+0xb6>
 801c4cc:	f04f 0900 	mov.w	r9, #0
 801c4d0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c4d4:	f104 0a1a 	add.w	sl, r4, #26
 801c4d8:	45c8      	cmp	r8, r9
 801c4da:	dc09      	bgt.n	801c4f0 <_printf_float+0x250>
 801c4dc:	6823      	ldr	r3, [r4, #0]
 801c4de:	079b      	lsls	r3, r3, #30
 801c4e0:	f100 8103 	bmi.w	801c6ea <_printf_float+0x44a>
 801c4e4:	68e0      	ldr	r0, [r4, #12]
 801c4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c4e8:	4298      	cmp	r0, r3
 801c4ea:	bfb8      	it	lt
 801c4ec:	4618      	movlt	r0, r3
 801c4ee:	e734      	b.n	801c35a <_printf_float+0xba>
 801c4f0:	2301      	movs	r3, #1
 801c4f2:	4652      	mov	r2, sl
 801c4f4:	4631      	mov	r1, r6
 801c4f6:	4628      	mov	r0, r5
 801c4f8:	47b8      	blx	r7
 801c4fa:	3001      	adds	r0, #1
 801c4fc:	f43f af2b 	beq.w	801c356 <_printf_float+0xb6>
 801c500:	f109 0901 	add.w	r9, r9, #1
 801c504:	e7e8      	b.n	801c4d8 <_printf_float+0x238>
 801c506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c508:	2b00      	cmp	r3, #0
 801c50a:	dc39      	bgt.n	801c580 <_printf_float+0x2e0>
 801c50c:	2301      	movs	r3, #1
 801c50e:	4a1b      	ldr	r2, [pc, #108]	@ (801c57c <_printf_float+0x2dc>)
 801c510:	4631      	mov	r1, r6
 801c512:	4628      	mov	r0, r5
 801c514:	47b8      	blx	r7
 801c516:	3001      	adds	r0, #1
 801c518:	f43f af1d 	beq.w	801c356 <_printf_float+0xb6>
 801c51c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c520:	ea59 0303 	orrs.w	r3, r9, r3
 801c524:	d102      	bne.n	801c52c <_printf_float+0x28c>
 801c526:	6823      	ldr	r3, [r4, #0]
 801c528:	07d9      	lsls	r1, r3, #31
 801c52a:	d5d7      	bpl.n	801c4dc <_printf_float+0x23c>
 801c52c:	4631      	mov	r1, r6
 801c52e:	4628      	mov	r0, r5
 801c530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c534:	47b8      	blx	r7
 801c536:	3001      	adds	r0, #1
 801c538:	f43f af0d 	beq.w	801c356 <_printf_float+0xb6>
 801c53c:	f04f 0a00 	mov.w	sl, #0
 801c540:	f104 0b1a 	add.w	fp, r4, #26
 801c544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c546:	425b      	negs	r3, r3
 801c548:	4553      	cmp	r3, sl
 801c54a:	dc01      	bgt.n	801c550 <_printf_float+0x2b0>
 801c54c:	464b      	mov	r3, r9
 801c54e:	e793      	b.n	801c478 <_printf_float+0x1d8>
 801c550:	2301      	movs	r3, #1
 801c552:	465a      	mov	r2, fp
 801c554:	4631      	mov	r1, r6
 801c556:	4628      	mov	r0, r5
 801c558:	47b8      	blx	r7
 801c55a:	3001      	adds	r0, #1
 801c55c:	f43f aefb 	beq.w	801c356 <_printf_float+0xb6>
 801c560:	f10a 0a01 	add.w	sl, sl, #1
 801c564:	e7ee      	b.n	801c544 <_printf_float+0x2a4>
 801c566:	bf00      	nop
 801c568:	7fefffff 	.word	0x7fefffff
 801c56c:	0801f360 	.word	0x0801f360
 801c570:	0801f364 	.word	0x0801f364
 801c574:	0801f368 	.word	0x0801f368
 801c578:	0801f36c 	.word	0x0801f36c
 801c57c:	0801f370 	.word	0x0801f370
 801c580:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c582:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c586:	4553      	cmp	r3, sl
 801c588:	bfa8      	it	ge
 801c58a:	4653      	movge	r3, sl
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	4699      	mov	r9, r3
 801c590:	dc36      	bgt.n	801c600 <_printf_float+0x360>
 801c592:	f04f 0b00 	mov.w	fp, #0
 801c596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c59a:	f104 021a 	add.w	r2, r4, #26
 801c59e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c5a0:	9306      	str	r3, [sp, #24]
 801c5a2:	eba3 0309 	sub.w	r3, r3, r9
 801c5a6:	455b      	cmp	r3, fp
 801c5a8:	dc31      	bgt.n	801c60e <_printf_float+0x36e>
 801c5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5ac:	459a      	cmp	sl, r3
 801c5ae:	dc3a      	bgt.n	801c626 <_printf_float+0x386>
 801c5b0:	6823      	ldr	r3, [r4, #0]
 801c5b2:	07da      	lsls	r2, r3, #31
 801c5b4:	d437      	bmi.n	801c626 <_printf_float+0x386>
 801c5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5b8:	ebaa 0903 	sub.w	r9, sl, r3
 801c5bc:	9b06      	ldr	r3, [sp, #24]
 801c5be:	ebaa 0303 	sub.w	r3, sl, r3
 801c5c2:	4599      	cmp	r9, r3
 801c5c4:	bfa8      	it	ge
 801c5c6:	4699      	movge	r9, r3
 801c5c8:	f1b9 0f00 	cmp.w	r9, #0
 801c5cc:	dc33      	bgt.n	801c636 <_printf_float+0x396>
 801c5ce:	f04f 0800 	mov.w	r8, #0
 801c5d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c5d6:	f104 0b1a 	add.w	fp, r4, #26
 801c5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5dc:	ebaa 0303 	sub.w	r3, sl, r3
 801c5e0:	eba3 0309 	sub.w	r3, r3, r9
 801c5e4:	4543      	cmp	r3, r8
 801c5e6:	f77f af79 	ble.w	801c4dc <_printf_float+0x23c>
 801c5ea:	2301      	movs	r3, #1
 801c5ec:	465a      	mov	r2, fp
 801c5ee:	4631      	mov	r1, r6
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	47b8      	blx	r7
 801c5f4:	3001      	adds	r0, #1
 801c5f6:	f43f aeae 	beq.w	801c356 <_printf_float+0xb6>
 801c5fa:	f108 0801 	add.w	r8, r8, #1
 801c5fe:	e7ec      	b.n	801c5da <_printf_float+0x33a>
 801c600:	4642      	mov	r2, r8
 801c602:	4631      	mov	r1, r6
 801c604:	4628      	mov	r0, r5
 801c606:	47b8      	blx	r7
 801c608:	3001      	adds	r0, #1
 801c60a:	d1c2      	bne.n	801c592 <_printf_float+0x2f2>
 801c60c:	e6a3      	b.n	801c356 <_printf_float+0xb6>
 801c60e:	2301      	movs	r3, #1
 801c610:	4631      	mov	r1, r6
 801c612:	4628      	mov	r0, r5
 801c614:	9206      	str	r2, [sp, #24]
 801c616:	47b8      	blx	r7
 801c618:	3001      	adds	r0, #1
 801c61a:	f43f ae9c 	beq.w	801c356 <_printf_float+0xb6>
 801c61e:	f10b 0b01 	add.w	fp, fp, #1
 801c622:	9a06      	ldr	r2, [sp, #24]
 801c624:	e7bb      	b.n	801c59e <_printf_float+0x2fe>
 801c626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c62a:	4631      	mov	r1, r6
 801c62c:	4628      	mov	r0, r5
 801c62e:	47b8      	blx	r7
 801c630:	3001      	adds	r0, #1
 801c632:	d1c0      	bne.n	801c5b6 <_printf_float+0x316>
 801c634:	e68f      	b.n	801c356 <_printf_float+0xb6>
 801c636:	9a06      	ldr	r2, [sp, #24]
 801c638:	464b      	mov	r3, r9
 801c63a:	4631      	mov	r1, r6
 801c63c:	4628      	mov	r0, r5
 801c63e:	4442      	add	r2, r8
 801c640:	47b8      	blx	r7
 801c642:	3001      	adds	r0, #1
 801c644:	d1c3      	bne.n	801c5ce <_printf_float+0x32e>
 801c646:	e686      	b.n	801c356 <_printf_float+0xb6>
 801c648:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c64c:	f1ba 0f01 	cmp.w	sl, #1
 801c650:	dc01      	bgt.n	801c656 <_printf_float+0x3b6>
 801c652:	07db      	lsls	r3, r3, #31
 801c654:	d536      	bpl.n	801c6c4 <_printf_float+0x424>
 801c656:	2301      	movs	r3, #1
 801c658:	4642      	mov	r2, r8
 801c65a:	4631      	mov	r1, r6
 801c65c:	4628      	mov	r0, r5
 801c65e:	47b8      	blx	r7
 801c660:	3001      	adds	r0, #1
 801c662:	f43f ae78 	beq.w	801c356 <_printf_float+0xb6>
 801c666:	4631      	mov	r1, r6
 801c668:	4628      	mov	r0, r5
 801c66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c66e:	47b8      	blx	r7
 801c670:	3001      	adds	r0, #1
 801c672:	f43f ae70 	beq.w	801c356 <_printf_float+0xb6>
 801c676:	2200      	movs	r2, #0
 801c678:	2300      	movs	r3, #0
 801c67a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c67e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c682:	f7f0 fa31 	bl	800cae8 <__aeabi_dcmpeq>
 801c686:	b9c0      	cbnz	r0, 801c6ba <_printf_float+0x41a>
 801c688:	4653      	mov	r3, sl
 801c68a:	f108 0201 	add.w	r2, r8, #1
 801c68e:	4631      	mov	r1, r6
 801c690:	4628      	mov	r0, r5
 801c692:	47b8      	blx	r7
 801c694:	3001      	adds	r0, #1
 801c696:	d10c      	bne.n	801c6b2 <_printf_float+0x412>
 801c698:	e65d      	b.n	801c356 <_printf_float+0xb6>
 801c69a:	2301      	movs	r3, #1
 801c69c:	465a      	mov	r2, fp
 801c69e:	4631      	mov	r1, r6
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	47b8      	blx	r7
 801c6a4:	3001      	adds	r0, #1
 801c6a6:	f43f ae56 	beq.w	801c356 <_printf_float+0xb6>
 801c6aa:	f108 0801 	add.w	r8, r8, #1
 801c6ae:	45d0      	cmp	r8, sl
 801c6b0:	dbf3      	blt.n	801c69a <_printf_float+0x3fa>
 801c6b2:	464b      	mov	r3, r9
 801c6b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c6b8:	e6df      	b.n	801c47a <_printf_float+0x1da>
 801c6ba:	f04f 0800 	mov.w	r8, #0
 801c6be:	f104 0b1a 	add.w	fp, r4, #26
 801c6c2:	e7f4      	b.n	801c6ae <_printf_float+0x40e>
 801c6c4:	2301      	movs	r3, #1
 801c6c6:	4642      	mov	r2, r8
 801c6c8:	e7e1      	b.n	801c68e <_printf_float+0x3ee>
 801c6ca:	2301      	movs	r3, #1
 801c6cc:	464a      	mov	r2, r9
 801c6ce:	4631      	mov	r1, r6
 801c6d0:	4628      	mov	r0, r5
 801c6d2:	47b8      	blx	r7
 801c6d4:	3001      	adds	r0, #1
 801c6d6:	f43f ae3e 	beq.w	801c356 <_printf_float+0xb6>
 801c6da:	f108 0801 	add.w	r8, r8, #1
 801c6de:	68e3      	ldr	r3, [r4, #12]
 801c6e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c6e2:	1a5b      	subs	r3, r3, r1
 801c6e4:	4543      	cmp	r3, r8
 801c6e6:	dcf0      	bgt.n	801c6ca <_printf_float+0x42a>
 801c6e8:	e6fc      	b.n	801c4e4 <_printf_float+0x244>
 801c6ea:	f04f 0800 	mov.w	r8, #0
 801c6ee:	f104 0919 	add.w	r9, r4, #25
 801c6f2:	e7f4      	b.n	801c6de <_printf_float+0x43e>

0801c6f4 <_printf_common>:
 801c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6f8:	4616      	mov	r6, r2
 801c6fa:	4698      	mov	r8, r3
 801c6fc:	688a      	ldr	r2, [r1, #8]
 801c6fe:	4607      	mov	r7, r0
 801c700:	690b      	ldr	r3, [r1, #16]
 801c702:	460c      	mov	r4, r1
 801c704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c708:	4293      	cmp	r3, r2
 801c70a:	bfb8      	it	lt
 801c70c:	4613      	movlt	r3, r2
 801c70e:	6033      	str	r3, [r6, #0]
 801c710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c714:	b10a      	cbz	r2, 801c71a <_printf_common+0x26>
 801c716:	3301      	adds	r3, #1
 801c718:	6033      	str	r3, [r6, #0]
 801c71a:	6823      	ldr	r3, [r4, #0]
 801c71c:	0699      	lsls	r1, r3, #26
 801c71e:	bf42      	ittt	mi
 801c720:	6833      	ldrmi	r3, [r6, #0]
 801c722:	3302      	addmi	r3, #2
 801c724:	6033      	strmi	r3, [r6, #0]
 801c726:	6825      	ldr	r5, [r4, #0]
 801c728:	f015 0506 	ands.w	r5, r5, #6
 801c72c:	d106      	bne.n	801c73c <_printf_common+0x48>
 801c72e:	f104 0a19 	add.w	sl, r4, #25
 801c732:	68e3      	ldr	r3, [r4, #12]
 801c734:	6832      	ldr	r2, [r6, #0]
 801c736:	1a9b      	subs	r3, r3, r2
 801c738:	42ab      	cmp	r3, r5
 801c73a:	dc2b      	bgt.n	801c794 <_printf_common+0xa0>
 801c73c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c740:	6822      	ldr	r2, [r4, #0]
 801c742:	3b00      	subs	r3, #0
 801c744:	bf18      	it	ne
 801c746:	2301      	movne	r3, #1
 801c748:	0692      	lsls	r2, r2, #26
 801c74a:	d430      	bmi.n	801c7ae <_printf_common+0xba>
 801c74c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c750:	4641      	mov	r1, r8
 801c752:	4638      	mov	r0, r7
 801c754:	47c8      	blx	r9
 801c756:	3001      	adds	r0, #1
 801c758:	d023      	beq.n	801c7a2 <_printf_common+0xae>
 801c75a:	6823      	ldr	r3, [r4, #0]
 801c75c:	341a      	adds	r4, #26
 801c75e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801c762:	f003 0306 	and.w	r3, r3, #6
 801c766:	2b04      	cmp	r3, #4
 801c768:	bf0a      	itet	eq
 801c76a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801c76e:	2500      	movne	r5, #0
 801c770:	6833      	ldreq	r3, [r6, #0]
 801c772:	f04f 0600 	mov.w	r6, #0
 801c776:	bf08      	it	eq
 801c778:	1aed      	subeq	r5, r5, r3
 801c77a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c77e:	bf08      	it	eq
 801c780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c784:	4293      	cmp	r3, r2
 801c786:	bfc4      	itt	gt
 801c788:	1a9b      	subgt	r3, r3, r2
 801c78a:	18ed      	addgt	r5, r5, r3
 801c78c:	42b5      	cmp	r5, r6
 801c78e:	d11a      	bne.n	801c7c6 <_printf_common+0xd2>
 801c790:	2000      	movs	r0, #0
 801c792:	e008      	b.n	801c7a6 <_printf_common+0xb2>
 801c794:	2301      	movs	r3, #1
 801c796:	4652      	mov	r2, sl
 801c798:	4641      	mov	r1, r8
 801c79a:	4638      	mov	r0, r7
 801c79c:	47c8      	blx	r9
 801c79e:	3001      	adds	r0, #1
 801c7a0:	d103      	bne.n	801c7aa <_printf_common+0xb6>
 801c7a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7aa:	3501      	adds	r5, #1
 801c7ac:	e7c1      	b.n	801c732 <_printf_common+0x3e>
 801c7ae:	18e1      	adds	r1, r4, r3
 801c7b0:	1c5a      	adds	r2, r3, #1
 801c7b2:	2030      	movs	r0, #48	@ 0x30
 801c7b4:	3302      	adds	r3, #2
 801c7b6:	4422      	add	r2, r4
 801c7b8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c7bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c7c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c7c4:	e7c2      	b.n	801c74c <_printf_common+0x58>
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	4622      	mov	r2, r4
 801c7ca:	4641      	mov	r1, r8
 801c7cc:	4638      	mov	r0, r7
 801c7ce:	47c8      	blx	r9
 801c7d0:	3001      	adds	r0, #1
 801c7d2:	d0e6      	beq.n	801c7a2 <_printf_common+0xae>
 801c7d4:	3601      	adds	r6, #1
 801c7d6:	e7d9      	b.n	801c78c <_printf_common+0x98>

0801c7d8 <_printf_i>:
 801c7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c7dc:	7e0f      	ldrb	r7, [r1, #24]
 801c7de:	4691      	mov	r9, r2
 801c7e0:	4680      	mov	r8, r0
 801c7e2:	460c      	mov	r4, r1
 801c7e4:	2f78      	cmp	r7, #120	@ 0x78
 801c7e6:	469a      	mov	sl, r3
 801c7e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c7ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c7ee:	d807      	bhi.n	801c800 <_printf_i+0x28>
 801c7f0:	2f62      	cmp	r7, #98	@ 0x62
 801c7f2:	d80a      	bhi.n	801c80a <_printf_i+0x32>
 801c7f4:	2f00      	cmp	r7, #0
 801c7f6:	f000 80d2 	beq.w	801c99e <_printf_i+0x1c6>
 801c7fa:	2f58      	cmp	r7, #88	@ 0x58
 801c7fc:	f000 80b9 	beq.w	801c972 <_printf_i+0x19a>
 801c800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c808:	e03a      	b.n	801c880 <_printf_i+0xa8>
 801c80a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c80e:	2b15      	cmp	r3, #21
 801c810:	d8f6      	bhi.n	801c800 <_printf_i+0x28>
 801c812:	a101      	add	r1, pc, #4	@ (adr r1, 801c818 <_printf_i+0x40>)
 801c814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c818:	0801c871 	.word	0x0801c871
 801c81c:	0801c885 	.word	0x0801c885
 801c820:	0801c801 	.word	0x0801c801
 801c824:	0801c801 	.word	0x0801c801
 801c828:	0801c801 	.word	0x0801c801
 801c82c:	0801c801 	.word	0x0801c801
 801c830:	0801c885 	.word	0x0801c885
 801c834:	0801c801 	.word	0x0801c801
 801c838:	0801c801 	.word	0x0801c801
 801c83c:	0801c801 	.word	0x0801c801
 801c840:	0801c801 	.word	0x0801c801
 801c844:	0801c985 	.word	0x0801c985
 801c848:	0801c8af 	.word	0x0801c8af
 801c84c:	0801c93f 	.word	0x0801c93f
 801c850:	0801c801 	.word	0x0801c801
 801c854:	0801c801 	.word	0x0801c801
 801c858:	0801c9a7 	.word	0x0801c9a7
 801c85c:	0801c801 	.word	0x0801c801
 801c860:	0801c8af 	.word	0x0801c8af
 801c864:	0801c801 	.word	0x0801c801
 801c868:	0801c801 	.word	0x0801c801
 801c86c:	0801c947 	.word	0x0801c947
 801c870:	6833      	ldr	r3, [r6, #0]
 801c872:	1d1a      	adds	r2, r3, #4
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	6032      	str	r2, [r6, #0]
 801c878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c87c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c880:	2301      	movs	r3, #1
 801c882:	e09d      	b.n	801c9c0 <_printf_i+0x1e8>
 801c884:	6833      	ldr	r3, [r6, #0]
 801c886:	6820      	ldr	r0, [r4, #0]
 801c888:	1d19      	adds	r1, r3, #4
 801c88a:	6031      	str	r1, [r6, #0]
 801c88c:	0606      	lsls	r6, r0, #24
 801c88e:	d501      	bpl.n	801c894 <_printf_i+0xbc>
 801c890:	681d      	ldr	r5, [r3, #0]
 801c892:	e003      	b.n	801c89c <_printf_i+0xc4>
 801c894:	0645      	lsls	r5, r0, #25
 801c896:	d5fb      	bpl.n	801c890 <_printf_i+0xb8>
 801c898:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c89c:	2d00      	cmp	r5, #0
 801c89e:	da03      	bge.n	801c8a8 <_printf_i+0xd0>
 801c8a0:	232d      	movs	r3, #45	@ 0x2d
 801c8a2:	426d      	negs	r5, r5
 801c8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c8a8:	4859      	ldr	r0, [pc, #356]	@ (801ca10 <_printf_i+0x238>)
 801c8aa:	230a      	movs	r3, #10
 801c8ac:	e011      	b.n	801c8d2 <_printf_i+0xfa>
 801c8ae:	6821      	ldr	r1, [r4, #0]
 801c8b0:	6833      	ldr	r3, [r6, #0]
 801c8b2:	0608      	lsls	r0, r1, #24
 801c8b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c8b8:	d402      	bmi.n	801c8c0 <_printf_i+0xe8>
 801c8ba:	0649      	lsls	r1, r1, #25
 801c8bc:	bf48      	it	mi
 801c8be:	b2ad      	uxthmi	r5, r5
 801c8c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801c8c2:	6033      	str	r3, [r6, #0]
 801c8c4:	4852      	ldr	r0, [pc, #328]	@ (801ca10 <_printf_i+0x238>)
 801c8c6:	bf14      	ite	ne
 801c8c8:	230a      	movne	r3, #10
 801c8ca:	2308      	moveq	r3, #8
 801c8cc:	2100      	movs	r1, #0
 801c8ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c8d2:	6866      	ldr	r6, [r4, #4]
 801c8d4:	2e00      	cmp	r6, #0
 801c8d6:	60a6      	str	r6, [r4, #8]
 801c8d8:	bfa2      	ittt	ge
 801c8da:	6821      	ldrge	r1, [r4, #0]
 801c8dc:	f021 0104 	bicge.w	r1, r1, #4
 801c8e0:	6021      	strge	r1, [r4, #0]
 801c8e2:	b90d      	cbnz	r5, 801c8e8 <_printf_i+0x110>
 801c8e4:	2e00      	cmp	r6, #0
 801c8e6:	d04b      	beq.n	801c980 <_printf_i+0x1a8>
 801c8e8:	4616      	mov	r6, r2
 801c8ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801c8ee:	fb03 5711 	mls	r7, r3, r1, r5
 801c8f2:	5dc7      	ldrb	r7, [r0, r7]
 801c8f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c8f8:	462f      	mov	r7, r5
 801c8fa:	460d      	mov	r5, r1
 801c8fc:	42bb      	cmp	r3, r7
 801c8fe:	d9f4      	bls.n	801c8ea <_printf_i+0x112>
 801c900:	2b08      	cmp	r3, #8
 801c902:	d10b      	bne.n	801c91c <_printf_i+0x144>
 801c904:	6823      	ldr	r3, [r4, #0]
 801c906:	07df      	lsls	r7, r3, #31
 801c908:	d508      	bpl.n	801c91c <_printf_i+0x144>
 801c90a:	6923      	ldr	r3, [r4, #16]
 801c90c:	6861      	ldr	r1, [r4, #4]
 801c90e:	4299      	cmp	r1, r3
 801c910:	bfde      	ittt	le
 801c912:	2330      	movle	r3, #48	@ 0x30
 801c914:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c918:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c91c:	1b92      	subs	r2, r2, r6
 801c91e:	6122      	str	r2, [r4, #16]
 801c920:	464b      	mov	r3, r9
 801c922:	aa03      	add	r2, sp, #12
 801c924:	4621      	mov	r1, r4
 801c926:	4640      	mov	r0, r8
 801c928:	f8cd a000 	str.w	sl, [sp]
 801c92c:	f7ff fee2 	bl	801c6f4 <_printf_common>
 801c930:	3001      	adds	r0, #1
 801c932:	d14a      	bne.n	801c9ca <_printf_i+0x1f2>
 801c934:	f04f 30ff 	mov.w	r0, #4294967295
 801c938:	b004      	add	sp, #16
 801c93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c93e:	6823      	ldr	r3, [r4, #0]
 801c940:	f043 0320 	orr.w	r3, r3, #32
 801c944:	6023      	str	r3, [r4, #0]
 801c946:	2778      	movs	r7, #120	@ 0x78
 801c948:	4832      	ldr	r0, [pc, #200]	@ (801ca14 <_printf_i+0x23c>)
 801c94a:	6823      	ldr	r3, [r4, #0]
 801c94c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c950:	061f      	lsls	r7, r3, #24
 801c952:	6831      	ldr	r1, [r6, #0]
 801c954:	f851 5b04 	ldr.w	r5, [r1], #4
 801c958:	d402      	bmi.n	801c960 <_printf_i+0x188>
 801c95a:	065f      	lsls	r7, r3, #25
 801c95c:	bf48      	it	mi
 801c95e:	b2ad      	uxthmi	r5, r5
 801c960:	6031      	str	r1, [r6, #0]
 801c962:	07d9      	lsls	r1, r3, #31
 801c964:	bf44      	itt	mi
 801c966:	f043 0320 	orrmi.w	r3, r3, #32
 801c96a:	6023      	strmi	r3, [r4, #0]
 801c96c:	b11d      	cbz	r5, 801c976 <_printf_i+0x19e>
 801c96e:	2310      	movs	r3, #16
 801c970:	e7ac      	b.n	801c8cc <_printf_i+0xf4>
 801c972:	4827      	ldr	r0, [pc, #156]	@ (801ca10 <_printf_i+0x238>)
 801c974:	e7e9      	b.n	801c94a <_printf_i+0x172>
 801c976:	6823      	ldr	r3, [r4, #0]
 801c978:	f023 0320 	bic.w	r3, r3, #32
 801c97c:	6023      	str	r3, [r4, #0]
 801c97e:	e7f6      	b.n	801c96e <_printf_i+0x196>
 801c980:	4616      	mov	r6, r2
 801c982:	e7bd      	b.n	801c900 <_printf_i+0x128>
 801c984:	6833      	ldr	r3, [r6, #0]
 801c986:	6825      	ldr	r5, [r4, #0]
 801c988:	1d18      	adds	r0, r3, #4
 801c98a:	6961      	ldr	r1, [r4, #20]
 801c98c:	6030      	str	r0, [r6, #0]
 801c98e:	062e      	lsls	r6, r5, #24
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	d501      	bpl.n	801c998 <_printf_i+0x1c0>
 801c994:	6019      	str	r1, [r3, #0]
 801c996:	e002      	b.n	801c99e <_printf_i+0x1c6>
 801c998:	0668      	lsls	r0, r5, #25
 801c99a:	d5fb      	bpl.n	801c994 <_printf_i+0x1bc>
 801c99c:	8019      	strh	r1, [r3, #0]
 801c99e:	2300      	movs	r3, #0
 801c9a0:	4616      	mov	r6, r2
 801c9a2:	6123      	str	r3, [r4, #16]
 801c9a4:	e7bc      	b.n	801c920 <_printf_i+0x148>
 801c9a6:	6833      	ldr	r3, [r6, #0]
 801c9a8:	2100      	movs	r1, #0
 801c9aa:	1d1a      	adds	r2, r3, #4
 801c9ac:	6032      	str	r2, [r6, #0]
 801c9ae:	681e      	ldr	r6, [r3, #0]
 801c9b0:	6862      	ldr	r2, [r4, #4]
 801c9b2:	4630      	mov	r0, r6
 801c9b4:	f000 f9eb 	bl	801cd8e <memchr>
 801c9b8:	b108      	cbz	r0, 801c9be <_printf_i+0x1e6>
 801c9ba:	1b80      	subs	r0, r0, r6
 801c9bc:	6060      	str	r0, [r4, #4]
 801c9be:	6863      	ldr	r3, [r4, #4]
 801c9c0:	6123      	str	r3, [r4, #16]
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c9c8:	e7aa      	b.n	801c920 <_printf_i+0x148>
 801c9ca:	6923      	ldr	r3, [r4, #16]
 801c9cc:	4632      	mov	r2, r6
 801c9ce:	4649      	mov	r1, r9
 801c9d0:	4640      	mov	r0, r8
 801c9d2:	47d0      	blx	sl
 801c9d4:	3001      	adds	r0, #1
 801c9d6:	d0ad      	beq.n	801c934 <_printf_i+0x15c>
 801c9d8:	6823      	ldr	r3, [r4, #0]
 801c9da:	079b      	lsls	r3, r3, #30
 801c9dc:	d413      	bmi.n	801ca06 <_printf_i+0x22e>
 801c9de:	68e0      	ldr	r0, [r4, #12]
 801c9e0:	9b03      	ldr	r3, [sp, #12]
 801c9e2:	4298      	cmp	r0, r3
 801c9e4:	bfb8      	it	lt
 801c9e6:	4618      	movlt	r0, r3
 801c9e8:	e7a6      	b.n	801c938 <_printf_i+0x160>
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	4632      	mov	r2, r6
 801c9ee:	4649      	mov	r1, r9
 801c9f0:	4640      	mov	r0, r8
 801c9f2:	47d0      	blx	sl
 801c9f4:	3001      	adds	r0, #1
 801c9f6:	d09d      	beq.n	801c934 <_printf_i+0x15c>
 801c9f8:	3501      	adds	r5, #1
 801c9fa:	68e3      	ldr	r3, [r4, #12]
 801c9fc:	9903      	ldr	r1, [sp, #12]
 801c9fe:	1a5b      	subs	r3, r3, r1
 801ca00:	42ab      	cmp	r3, r5
 801ca02:	dcf2      	bgt.n	801c9ea <_printf_i+0x212>
 801ca04:	e7eb      	b.n	801c9de <_printf_i+0x206>
 801ca06:	2500      	movs	r5, #0
 801ca08:	f104 0619 	add.w	r6, r4, #25
 801ca0c:	e7f5      	b.n	801c9fa <_printf_i+0x222>
 801ca0e:	bf00      	nop
 801ca10:	0801f372 	.word	0x0801f372
 801ca14:	0801f383 	.word	0x0801f383

0801ca18 <std>:
 801ca18:	2300      	movs	r3, #0
 801ca1a:	b510      	push	{r4, lr}
 801ca1c:	4604      	mov	r4, r0
 801ca1e:	6083      	str	r3, [r0, #8]
 801ca20:	8181      	strh	r1, [r0, #12]
 801ca22:	4619      	mov	r1, r3
 801ca24:	6643      	str	r3, [r0, #100]	@ 0x64
 801ca26:	81c2      	strh	r2, [r0, #14]
 801ca28:	2208      	movs	r2, #8
 801ca2a:	6183      	str	r3, [r0, #24]
 801ca2c:	e9c0 3300 	strd	r3, r3, [r0]
 801ca30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca34:	305c      	adds	r0, #92	@ 0x5c
 801ca36:	f000 f914 	bl	801cc62 <memset>
 801ca3a:	4b0d      	ldr	r3, [pc, #52]	@ (801ca70 <std+0x58>)
 801ca3c:	6224      	str	r4, [r4, #32]
 801ca3e:	6263      	str	r3, [r4, #36]	@ 0x24
 801ca40:	4b0c      	ldr	r3, [pc, #48]	@ (801ca74 <std+0x5c>)
 801ca42:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ca44:	4b0c      	ldr	r3, [pc, #48]	@ (801ca78 <std+0x60>)
 801ca46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ca48:	4b0c      	ldr	r3, [pc, #48]	@ (801ca7c <std+0x64>)
 801ca4a:	6323      	str	r3, [r4, #48]	@ 0x30
 801ca4c:	4b0c      	ldr	r3, [pc, #48]	@ (801ca80 <std+0x68>)
 801ca4e:	429c      	cmp	r4, r3
 801ca50:	d006      	beq.n	801ca60 <std+0x48>
 801ca52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ca56:	4294      	cmp	r4, r2
 801ca58:	d002      	beq.n	801ca60 <std+0x48>
 801ca5a:	33d0      	adds	r3, #208	@ 0xd0
 801ca5c:	429c      	cmp	r4, r3
 801ca5e:	d105      	bne.n	801ca6c <std+0x54>
 801ca60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca68:	f000 b98e 	b.w	801cd88 <__retarget_lock_init_recursive>
 801ca6c:	bd10      	pop	{r4, pc}
 801ca6e:	bf00      	nop
 801ca70:	0801cbdd 	.word	0x0801cbdd
 801ca74:	0801cbff 	.word	0x0801cbff
 801ca78:	0801cc37 	.word	0x0801cc37
 801ca7c:	0801cc5b 	.word	0x0801cc5b
 801ca80:	20007bf8 	.word	0x20007bf8

0801ca84 <stdio_exit_handler>:
 801ca84:	4a02      	ldr	r2, [pc, #8]	@ (801ca90 <stdio_exit_handler+0xc>)
 801ca86:	4903      	ldr	r1, [pc, #12]	@ (801ca94 <stdio_exit_handler+0x10>)
 801ca88:	4803      	ldr	r0, [pc, #12]	@ (801ca98 <stdio_exit_handler+0x14>)
 801ca8a:	f000 b869 	b.w	801cb60 <_fwalk_sglue>
 801ca8e:	bf00      	nop
 801ca90:	200000b4 	.word	0x200000b4
 801ca94:	0801e731 	.word	0x0801e731
 801ca98:	200000c4 	.word	0x200000c4

0801ca9c <cleanup_stdio>:
 801ca9c:	6841      	ldr	r1, [r0, #4]
 801ca9e:	4b0c      	ldr	r3, [pc, #48]	@ (801cad0 <cleanup_stdio+0x34>)
 801caa0:	4299      	cmp	r1, r3
 801caa2:	b510      	push	{r4, lr}
 801caa4:	4604      	mov	r4, r0
 801caa6:	d001      	beq.n	801caac <cleanup_stdio+0x10>
 801caa8:	f001 fe42 	bl	801e730 <_fflush_r>
 801caac:	68a1      	ldr	r1, [r4, #8]
 801caae:	4b09      	ldr	r3, [pc, #36]	@ (801cad4 <cleanup_stdio+0x38>)
 801cab0:	4299      	cmp	r1, r3
 801cab2:	d002      	beq.n	801caba <cleanup_stdio+0x1e>
 801cab4:	4620      	mov	r0, r4
 801cab6:	f001 fe3b 	bl	801e730 <_fflush_r>
 801caba:	68e1      	ldr	r1, [r4, #12]
 801cabc:	4b06      	ldr	r3, [pc, #24]	@ (801cad8 <cleanup_stdio+0x3c>)
 801cabe:	4299      	cmp	r1, r3
 801cac0:	d004      	beq.n	801cacc <cleanup_stdio+0x30>
 801cac2:	4620      	mov	r0, r4
 801cac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cac8:	f001 be32 	b.w	801e730 <_fflush_r>
 801cacc:	bd10      	pop	{r4, pc}
 801cace:	bf00      	nop
 801cad0:	20007bf8 	.word	0x20007bf8
 801cad4:	20007c60 	.word	0x20007c60
 801cad8:	20007cc8 	.word	0x20007cc8

0801cadc <global_stdio_init.part.0>:
 801cadc:	b510      	push	{r4, lr}
 801cade:	4b0b      	ldr	r3, [pc, #44]	@ (801cb0c <global_stdio_init.part.0+0x30>)
 801cae0:	2104      	movs	r1, #4
 801cae2:	4c0b      	ldr	r4, [pc, #44]	@ (801cb10 <global_stdio_init.part.0+0x34>)
 801cae4:	4a0b      	ldr	r2, [pc, #44]	@ (801cb14 <global_stdio_init.part.0+0x38>)
 801cae6:	4620      	mov	r0, r4
 801cae8:	601a      	str	r2, [r3, #0]
 801caea:	2200      	movs	r2, #0
 801caec:	f7ff ff94 	bl	801ca18 <std>
 801caf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801caf4:	2201      	movs	r2, #1
 801caf6:	2109      	movs	r1, #9
 801caf8:	f7ff ff8e 	bl	801ca18 <std>
 801cafc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cb00:	2202      	movs	r2, #2
 801cb02:	2112      	movs	r1, #18
 801cb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb08:	f7ff bf86 	b.w	801ca18 <std>
 801cb0c:	20007d30 	.word	0x20007d30
 801cb10:	20007bf8 	.word	0x20007bf8
 801cb14:	0801ca85 	.word	0x0801ca85

0801cb18 <__sfp_lock_acquire>:
 801cb18:	4801      	ldr	r0, [pc, #4]	@ (801cb20 <__sfp_lock_acquire+0x8>)
 801cb1a:	f000 b936 	b.w	801cd8a <__retarget_lock_acquire_recursive>
 801cb1e:	bf00      	nop
 801cb20:	20007d39 	.word	0x20007d39

0801cb24 <__sfp_lock_release>:
 801cb24:	4801      	ldr	r0, [pc, #4]	@ (801cb2c <__sfp_lock_release+0x8>)
 801cb26:	f000 b931 	b.w	801cd8c <__retarget_lock_release_recursive>
 801cb2a:	bf00      	nop
 801cb2c:	20007d39 	.word	0x20007d39

0801cb30 <__sinit>:
 801cb30:	b510      	push	{r4, lr}
 801cb32:	4604      	mov	r4, r0
 801cb34:	f7ff fff0 	bl	801cb18 <__sfp_lock_acquire>
 801cb38:	6a23      	ldr	r3, [r4, #32]
 801cb3a:	b11b      	cbz	r3, 801cb44 <__sinit+0x14>
 801cb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb40:	f7ff bff0 	b.w	801cb24 <__sfp_lock_release>
 801cb44:	4b04      	ldr	r3, [pc, #16]	@ (801cb58 <__sinit+0x28>)
 801cb46:	6223      	str	r3, [r4, #32]
 801cb48:	4b04      	ldr	r3, [pc, #16]	@ (801cb5c <__sinit+0x2c>)
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d1f5      	bne.n	801cb3c <__sinit+0xc>
 801cb50:	f7ff ffc4 	bl	801cadc <global_stdio_init.part.0>
 801cb54:	e7f2      	b.n	801cb3c <__sinit+0xc>
 801cb56:	bf00      	nop
 801cb58:	0801ca9d 	.word	0x0801ca9d
 801cb5c:	20007d30 	.word	0x20007d30

0801cb60 <_fwalk_sglue>:
 801cb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb64:	4607      	mov	r7, r0
 801cb66:	4688      	mov	r8, r1
 801cb68:	4614      	mov	r4, r2
 801cb6a:	2600      	movs	r6, #0
 801cb6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cb70:	f1b9 0901 	subs.w	r9, r9, #1
 801cb74:	d505      	bpl.n	801cb82 <_fwalk_sglue+0x22>
 801cb76:	6824      	ldr	r4, [r4, #0]
 801cb78:	2c00      	cmp	r4, #0
 801cb7a:	d1f7      	bne.n	801cb6c <_fwalk_sglue+0xc>
 801cb7c:	4630      	mov	r0, r6
 801cb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb82:	89ab      	ldrh	r3, [r5, #12]
 801cb84:	2b01      	cmp	r3, #1
 801cb86:	d907      	bls.n	801cb98 <_fwalk_sglue+0x38>
 801cb88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cb8c:	3301      	adds	r3, #1
 801cb8e:	d003      	beq.n	801cb98 <_fwalk_sglue+0x38>
 801cb90:	4629      	mov	r1, r5
 801cb92:	4638      	mov	r0, r7
 801cb94:	47c0      	blx	r8
 801cb96:	4306      	orrs	r6, r0
 801cb98:	3568      	adds	r5, #104	@ 0x68
 801cb9a:	e7e9      	b.n	801cb70 <_fwalk_sglue+0x10>

0801cb9c <siprintf>:
 801cb9c:	b40e      	push	{r1, r2, r3}
 801cb9e:	b500      	push	{lr}
 801cba0:	b09c      	sub	sp, #112	@ 0x70
 801cba2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801cba6:	ab1d      	add	r3, sp, #116	@ 0x74
 801cba8:	9002      	str	r0, [sp, #8]
 801cbaa:	9006      	str	r0, [sp, #24]
 801cbac:	9107      	str	r1, [sp, #28]
 801cbae:	9104      	str	r1, [sp, #16]
 801cbb0:	4808      	ldr	r0, [pc, #32]	@ (801cbd4 <siprintf+0x38>)
 801cbb2:	4909      	ldr	r1, [pc, #36]	@ (801cbd8 <siprintf+0x3c>)
 801cbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbb8:	9105      	str	r1, [sp, #20]
 801cbba:	a902      	add	r1, sp, #8
 801cbbc:	6800      	ldr	r0, [r0, #0]
 801cbbe:	9301      	str	r3, [sp, #4]
 801cbc0:	f001 fc36 	bl	801e430 <_svfiprintf_r>
 801cbc4:	9b02      	ldr	r3, [sp, #8]
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	701a      	strb	r2, [r3, #0]
 801cbca:	b01c      	add	sp, #112	@ 0x70
 801cbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbd0:	b003      	add	sp, #12
 801cbd2:	4770      	bx	lr
 801cbd4:	200000c0 	.word	0x200000c0
 801cbd8:	ffff0208 	.word	0xffff0208

0801cbdc <__sread>:
 801cbdc:	b510      	push	{r4, lr}
 801cbde:	460c      	mov	r4, r1
 801cbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbe4:	f000 f882 	bl	801ccec <_read_r>
 801cbe8:	2800      	cmp	r0, #0
 801cbea:	bfab      	itete	ge
 801cbec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cbee:	89a3      	ldrhlt	r3, [r4, #12]
 801cbf0:	181b      	addge	r3, r3, r0
 801cbf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cbf6:	bfac      	ite	ge
 801cbf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cbfa:	81a3      	strhlt	r3, [r4, #12]
 801cbfc:	bd10      	pop	{r4, pc}

0801cbfe <__swrite>:
 801cbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc02:	461f      	mov	r7, r3
 801cc04:	898b      	ldrh	r3, [r1, #12]
 801cc06:	4605      	mov	r5, r0
 801cc08:	460c      	mov	r4, r1
 801cc0a:	05db      	lsls	r3, r3, #23
 801cc0c:	4616      	mov	r6, r2
 801cc0e:	d505      	bpl.n	801cc1c <__swrite+0x1e>
 801cc10:	2302      	movs	r3, #2
 801cc12:	2200      	movs	r2, #0
 801cc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc18:	f000 f856 	bl	801ccc8 <_lseek_r>
 801cc1c:	89a3      	ldrh	r3, [r4, #12]
 801cc1e:	4632      	mov	r2, r6
 801cc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc24:	4628      	mov	r0, r5
 801cc26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cc2a:	81a3      	strh	r3, [r4, #12]
 801cc2c:	463b      	mov	r3, r7
 801cc2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc32:	f000 b86d 	b.w	801cd10 <_write_r>

0801cc36 <__sseek>:
 801cc36:	b510      	push	{r4, lr}
 801cc38:	460c      	mov	r4, r1
 801cc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc3e:	f000 f843 	bl	801ccc8 <_lseek_r>
 801cc42:	1c43      	adds	r3, r0, #1
 801cc44:	89a3      	ldrh	r3, [r4, #12]
 801cc46:	bf15      	itete	ne
 801cc48:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cc4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cc4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cc52:	81a3      	strheq	r3, [r4, #12]
 801cc54:	bf18      	it	ne
 801cc56:	81a3      	strhne	r3, [r4, #12]
 801cc58:	bd10      	pop	{r4, pc}

0801cc5a <__sclose>:
 801cc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc5e:	f000 b823 	b.w	801cca8 <_close_r>

0801cc62 <memset>:
 801cc62:	4402      	add	r2, r0
 801cc64:	4603      	mov	r3, r0
 801cc66:	4293      	cmp	r3, r2
 801cc68:	d100      	bne.n	801cc6c <memset+0xa>
 801cc6a:	4770      	bx	lr
 801cc6c:	f803 1b01 	strb.w	r1, [r3], #1
 801cc70:	e7f9      	b.n	801cc66 <memset+0x4>

0801cc72 <strstr>:
 801cc72:	780a      	ldrb	r2, [r1, #0]
 801cc74:	b570      	push	{r4, r5, r6, lr}
 801cc76:	b96a      	cbnz	r2, 801cc94 <strstr+0x22>
 801cc78:	bd70      	pop	{r4, r5, r6, pc}
 801cc7a:	429a      	cmp	r2, r3
 801cc7c:	d109      	bne.n	801cc92 <strstr+0x20>
 801cc7e:	460c      	mov	r4, r1
 801cc80:	4605      	mov	r5, r0
 801cc82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d0f6      	beq.n	801cc78 <strstr+0x6>
 801cc8a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cc8e:	429e      	cmp	r6, r3
 801cc90:	d0f7      	beq.n	801cc82 <strstr+0x10>
 801cc92:	3001      	adds	r0, #1
 801cc94:	7803      	ldrb	r3, [r0, #0]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d1ef      	bne.n	801cc7a <strstr+0x8>
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	e7ec      	b.n	801cc78 <strstr+0x6>
	...

0801cca0 <_localeconv_r>:
 801cca0:	4800      	ldr	r0, [pc, #0]	@ (801cca4 <_localeconv_r+0x4>)
 801cca2:	4770      	bx	lr
 801cca4:	20000200 	.word	0x20000200

0801cca8 <_close_r>:
 801cca8:	b538      	push	{r3, r4, r5, lr}
 801ccaa:	2300      	movs	r3, #0
 801ccac:	4d05      	ldr	r5, [pc, #20]	@ (801ccc4 <_close_r+0x1c>)
 801ccae:	4604      	mov	r4, r0
 801ccb0:	4608      	mov	r0, r1
 801ccb2:	602b      	str	r3, [r5, #0]
 801ccb4:	f7f4 fa5e 	bl	8011174 <_close>
 801ccb8:	1c43      	adds	r3, r0, #1
 801ccba:	d102      	bne.n	801ccc2 <_close_r+0x1a>
 801ccbc:	682b      	ldr	r3, [r5, #0]
 801ccbe:	b103      	cbz	r3, 801ccc2 <_close_r+0x1a>
 801ccc0:	6023      	str	r3, [r4, #0]
 801ccc2:	bd38      	pop	{r3, r4, r5, pc}
 801ccc4:	20007d34 	.word	0x20007d34

0801ccc8 <_lseek_r>:
 801ccc8:	b538      	push	{r3, r4, r5, lr}
 801ccca:	4604      	mov	r4, r0
 801cccc:	4d06      	ldr	r5, [pc, #24]	@ (801cce8 <_lseek_r+0x20>)
 801ccce:	4608      	mov	r0, r1
 801ccd0:	4611      	mov	r1, r2
 801ccd2:	2200      	movs	r2, #0
 801ccd4:	602a      	str	r2, [r5, #0]
 801ccd6:	461a      	mov	r2, r3
 801ccd8:	f7f4 fa73 	bl	80111c2 <_lseek>
 801ccdc:	1c43      	adds	r3, r0, #1
 801ccde:	d102      	bne.n	801cce6 <_lseek_r+0x1e>
 801cce0:	682b      	ldr	r3, [r5, #0]
 801cce2:	b103      	cbz	r3, 801cce6 <_lseek_r+0x1e>
 801cce4:	6023      	str	r3, [r4, #0]
 801cce6:	bd38      	pop	{r3, r4, r5, pc}
 801cce8:	20007d34 	.word	0x20007d34

0801ccec <_read_r>:
 801ccec:	b538      	push	{r3, r4, r5, lr}
 801ccee:	4604      	mov	r4, r0
 801ccf0:	4d06      	ldr	r5, [pc, #24]	@ (801cd0c <_read_r+0x20>)
 801ccf2:	4608      	mov	r0, r1
 801ccf4:	4611      	mov	r1, r2
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	602a      	str	r2, [r5, #0]
 801ccfa:	461a      	mov	r2, r3
 801ccfc:	f7f4 fa01 	bl	8011102 <_read>
 801cd00:	1c43      	adds	r3, r0, #1
 801cd02:	d102      	bne.n	801cd0a <_read_r+0x1e>
 801cd04:	682b      	ldr	r3, [r5, #0]
 801cd06:	b103      	cbz	r3, 801cd0a <_read_r+0x1e>
 801cd08:	6023      	str	r3, [r4, #0]
 801cd0a:	bd38      	pop	{r3, r4, r5, pc}
 801cd0c:	20007d34 	.word	0x20007d34

0801cd10 <_write_r>:
 801cd10:	b538      	push	{r3, r4, r5, lr}
 801cd12:	4604      	mov	r4, r0
 801cd14:	4d06      	ldr	r5, [pc, #24]	@ (801cd30 <_write_r+0x20>)
 801cd16:	4608      	mov	r0, r1
 801cd18:	4611      	mov	r1, r2
 801cd1a:	2200      	movs	r2, #0
 801cd1c:	602a      	str	r2, [r5, #0]
 801cd1e:	461a      	mov	r2, r3
 801cd20:	f7f4 fa0c 	bl	801113c <_write>
 801cd24:	1c43      	adds	r3, r0, #1
 801cd26:	d102      	bne.n	801cd2e <_write_r+0x1e>
 801cd28:	682b      	ldr	r3, [r5, #0]
 801cd2a:	b103      	cbz	r3, 801cd2e <_write_r+0x1e>
 801cd2c:	6023      	str	r3, [r4, #0]
 801cd2e:	bd38      	pop	{r3, r4, r5, pc}
 801cd30:	20007d34 	.word	0x20007d34

0801cd34 <__errno>:
 801cd34:	4b01      	ldr	r3, [pc, #4]	@ (801cd3c <__errno+0x8>)
 801cd36:	6818      	ldr	r0, [r3, #0]
 801cd38:	4770      	bx	lr
 801cd3a:	bf00      	nop
 801cd3c:	200000c0 	.word	0x200000c0

0801cd40 <__libc_init_array>:
 801cd40:	b570      	push	{r4, r5, r6, lr}
 801cd42:	4d0d      	ldr	r5, [pc, #52]	@ (801cd78 <__libc_init_array+0x38>)
 801cd44:	2600      	movs	r6, #0
 801cd46:	4c0d      	ldr	r4, [pc, #52]	@ (801cd7c <__libc_init_array+0x3c>)
 801cd48:	1b64      	subs	r4, r4, r5
 801cd4a:	10a4      	asrs	r4, r4, #2
 801cd4c:	42a6      	cmp	r6, r4
 801cd4e:	d109      	bne.n	801cd64 <__libc_init_array+0x24>
 801cd50:	4d0b      	ldr	r5, [pc, #44]	@ (801cd80 <__libc_init_array+0x40>)
 801cd52:	2600      	movs	r6, #0
 801cd54:	4c0b      	ldr	r4, [pc, #44]	@ (801cd84 <__libc_init_array+0x44>)
 801cd56:	f002 f985 	bl	801f064 <_init>
 801cd5a:	1b64      	subs	r4, r4, r5
 801cd5c:	10a4      	asrs	r4, r4, #2
 801cd5e:	42a6      	cmp	r6, r4
 801cd60:	d105      	bne.n	801cd6e <__libc_init_array+0x2e>
 801cd62:	bd70      	pop	{r4, r5, r6, pc}
 801cd64:	f855 3b04 	ldr.w	r3, [r5], #4
 801cd68:	3601      	adds	r6, #1
 801cd6a:	4798      	blx	r3
 801cd6c:	e7ee      	b.n	801cd4c <__libc_init_array+0xc>
 801cd6e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cd72:	3601      	adds	r6, #1
 801cd74:	4798      	blx	r3
 801cd76:	e7f2      	b.n	801cd5e <__libc_init_array+0x1e>
 801cd78:	0801f6d8 	.word	0x0801f6d8
 801cd7c:	0801f6d8 	.word	0x0801f6d8
 801cd80:	0801f6d8 	.word	0x0801f6d8
 801cd84:	0801f6dc 	.word	0x0801f6dc

0801cd88 <__retarget_lock_init_recursive>:
 801cd88:	4770      	bx	lr

0801cd8a <__retarget_lock_acquire_recursive>:
 801cd8a:	4770      	bx	lr

0801cd8c <__retarget_lock_release_recursive>:
 801cd8c:	4770      	bx	lr

0801cd8e <memchr>:
 801cd8e:	b2c9      	uxtb	r1, r1
 801cd90:	4603      	mov	r3, r0
 801cd92:	4402      	add	r2, r0
 801cd94:	b510      	push	{r4, lr}
 801cd96:	4293      	cmp	r3, r2
 801cd98:	4618      	mov	r0, r3
 801cd9a:	d101      	bne.n	801cda0 <memchr+0x12>
 801cd9c:	2000      	movs	r0, #0
 801cd9e:	e003      	b.n	801cda8 <memchr+0x1a>
 801cda0:	7804      	ldrb	r4, [r0, #0]
 801cda2:	3301      	adds	r3, #1
 801cda4:	428c      	cmp	r4, r1
 801cda6:	d1f6      	bne.n	801cd96 <memchr+0x8>
 801cda8:	bd10      	pop	{r4, pc}

0801cdaa <memcpy>:
 801cdaa:	440a      	add	r2, r1
 801cdac:	1e43      	subs	r3, r0, #1
 801cdae:	4291      	cmp	r1, r2
 801cdb0:	d100      	bne.n	801cdb4 <memcpy+0xa>
 801cdb2:	4770      	bx	lr
 801cdb4:	b510      	push	{r4, lr}
 801cdb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cdba:	4291      	cmp	r1, r2
 801cdbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cdc0:	d1f9      	bne.n	801cdb6 <memcpy+0xc>
 801cdc2:	bd10      	pop	{r4, pc}

0801cdc4 <quorem>:
 801cdc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc8:	6903      	ldr	r3, [r0, #16]
 801cdca:	4607      	mov	r7, r0
 801cdcc:	690c      	ldr	r4, [r1, #16]
 801cdce:	42a3      	cmp	r3, r4
 801cdd0:	f2c0 8083 	blt.w	801ceda <quorem+0x116>
 801cdd4:	3c01      	subs	r4, #1
 801cdd6:	f100 0514 	add.w	r5, r0, #20
 801cdda:	f101 0814 	add.w	r8, r1, #20
 801cdde:	00a3      	lsls	r3, r4, #2
 801cde0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cde4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cde8:	9300      	str	r3, [sp, #0]
 801cdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cdee:	9301      	str	r3, [sp, #4]
 801cdf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	429a      	cmp	r2, r3
 801cdf8:	fbb2 f6f3 	udiv	r6, r2, r3
 801cdfc:	d331      	bcc.n	801ce62 <quorem+0x9e>
 801cdfe:	f04f 0a00 	mov.w	sl, #0
 801ce02:	46c4      	mov	ip, r8
 801ce04:	46ae      	mov	lr, r5
 801ce06:	46d3      	mov	fp, sl
 801ce08:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ce0c:	b298      	uxth	r0, r3
 801ce0e:	45e1      	cmp	r9, ip
 801ce10:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801ce14:	fb06 a000 	mla	r0, r6, r0, sl
 801ce18:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801ce1c:	b280      	uxth	r0, r0
 801ce1e:	fb06 2303 	mla	r3, r6, r3, r2
 801ce22:	f8de 2000 	ldr.w	r2, [lr]
 801ce26:	b292      	uxth	r2, r2
 801ce28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ce2c:	eba2 0200 	sub.w	r2, r2, r0
 801ce30:	b29b      	uxth	r3, r3
 801ce32:	f8de 0000 	ldr.w	r0, [lr]
 801ce36:	445a      	add	r2, fp
 801ce38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ce3c:	b292      	uxth	r2, r2
 801ce3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ce42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ce46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ce4a:	f84e 2b04 	str.w	r2, [lr], #4
 801ce4e:	d2db      	bcs.n	801ce08 <quorem+0x44>
 801ce50:	9b00      	ldr	r3, [sp, #0]
 801ce52:	58eb      	ldr	r3, [r5, r3]
 801ce54:	b92b      	cbnz	r3, 801ce62 <quorem+0x9e>
 801ce56:	9b01      	ldr	r3, [sp, #4]
 801ce58:	3b04      	subs	r3, #4
 801ce5a:	429d      	cmp	r5, r3
 801ce5c:	461a      	mov	r2, r3
 801ce5e:	d330      	bcc.n	801cec2 <quorem+0xfe>
 801ce60:	613c      	str	r4, [r7, #16]
 801ce62:	4638      	mov	r0, r7
 801ce64:	f001 f97c 	bl	801e160 <__mcmp>
 801ce68:	2800      	cmp	r0, #0
 801ce6a:	db26      	blt.n	801ceba <quorem+0xf6>
 801ce6c:	4629      	mov	r1, r5
 801ce6e:	2000      	movs	r0, #0
 801ce70:	f858 2b04 	ldr.w	r2, [r8], #4
 801ce74:	f8d1 c000 	ldr.w	ip, [r1]
 801ce78:	fa1f fe82 	uxth.w	lr, r2
 801ce7c:	45c1      	cmp	r9, r8
 801ce7e:	fa1f f38c 	uxth.w	r3, ip
 801ce82:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801ce86:	eba3 030e 	sub.w	r3, r3, lr
 801ce8a:	4403      	add	r3, r0
 801ce8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ce90:	b29b      	uxth	r3, r3
 801ce92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ce96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ce9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ce9e:	f841 3b04 	str.w	r3, [r1], #4
 801cea2:	d2e5      	bcs.n	801ce70 <quorem+0xac>
 801cea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ceac:	b922      	cbnz	r2, 801ceb8 <quorem+0xf4>
 801ceae:	3b04      	subs	r3, #4
 801ceb0:	429d      	cmp	r5, r3
 801ceb2:	461a      	mov	r2, r3
 801ceb4:	d30b      	bcc.n	801cece <quorem+0x10a>
 801ceb6:	613c      	str	r4, [r7, #16]
 801ceb8:	3601      	adds	r6, #1
 801ceba:	4630      	mov	r0, r6
 801cebc:	b003      	add	sp, #12
 801cebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cec2:	6812      	ldr	r2, [r2, #0]
 801cec4:	3b04      	subs	r3, #4
 801cec6:	2a00      	cmp	r2, #0
 801cec8:	d1ca      	bne.n	801ce60 <quorem+0x9c>
 801ceca:	3c01      	subs	r4, #1
 801cecc:	e7c5      	b.n	801ce5a <quorem+0x96>
 801cece:	6812      	ldr	r2, [r2, #0]
 801ced0:	3b04      	subs	r3, #4
 801ced2:	2a00      	cmp	r2, #0
 801ced4:	d1ef      	bne.n	801ceb6 <quorem+0xf2>
 801ced6:	3c01      	subs	r4, #1
 801ced8:	e7ea      	b.n	801ceb0 <quorem+0xec>
 801ceda:	2000      	movs	r0, #0
 801cedc:	e7ee      	b.n	801cebc <quorem+0xf8>
	...

0801cee0 <_dtoa_r>:
 801cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cee4:	69c7      	ldr	r7, [r0, #28]
 801cee6:	b099      	sub	sp, #100	@ 0x64
 801cee8:	4683      	mov	fp, r0
 801ceea:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ceec:	9109      	str	r1, [sp, #36]	@ 0x24
 801ceee:	920e      	str	r2, [sp, #56]	@ 0x38
 801cef0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cef2:	ec55 4b10 	vmov	r4, r5, d0
 801cef6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801cefa:	b97f      	cbnz	r7, 801cf1c <_dtoa_r+0x3c>
 801cefc:	2010      	movs	r0, #16
 801cefe:	f000 fdfd 	bl	801dafc <malloc>
 801cf02:	4602      	mov	r2, r0
 801cf04:	f8cb 001c 	str.w	r0, [fp, #28]
 801cf08:	b920      	cbnz	r0, 801cf14 <_dtoa_r+0x34>
 801cf0a:	4ba7      	ldr	r3, [pc, #668]	@ (801d1a8 <_dtoa_r+0x2c8>)
 801cf0c:	21ef      	movs	r1, #239	@ 0xef
 801cf0e:	48a7      	ldr	r0, [pc, #668]	@ (801d1ac <_dtoa_r+0x2cc>)
 801cf10:	f001 fc60 	bl	801e7d4 <__assert_func>
 801cf14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801cf18:	6007      	str	r7, [r0, #0]
 801cf1a:	60c7      	str	r7, [r0, #12]
 801cf1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cf20:	6819      	ldr	r1, [r3, #0]
 801cf22:	b159      	cbz	r1, 801cf3c <_dtoa_r+0x5c>
 801cf24:	685a      	ldr	r2, [r3, #4]
 801cf26:	2301      	movs	r3, #1
 801cf28:	4658      	mov	r0, fp
 801cf2a:	4093      	lsls	r3, r2
 801cf2c:	604a      	str	r2, [r1, #4]
 801cf2e:	608b      	str	r3, [r1, #8]
 801cf30:	f000 feda 	bl	801dce8 <_Bfree>
 801cf34:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cf38:	2200      	movs	r2, #0
 801cf3a:	601a      	str	r2, [r3, #0]
 801cf3c:	1e2b      	subs	r3, r5, #0
 801cf3e:	bfb7      	itett	lt
 801cf40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801cf44:	2300      	movge	r3, #0
 801cf46:	2201      	movlt	r2, #1
 801cf48:	9303      	strlt	r3, [sp, #12]
 801cf4a:	bfa8      	it	ge
 801cf4c:	6033      	strge	r3, [r6, #0]
 801cf4e:	9f03      	ldr	r7, [sp, #12]
 801cf50:	4b97      	ldr	r3, [pc, #604]	@ (801d1b0 <_dtoa_r+0x2d0>)
 801cf52:	bfb8      	it	lt
 801cf54:	6032      	strlt	r2, [r6, #0]
 801cf56:	43bb      	bics	r3, r7
 801cf58:	d112      	bne.n	801cf80 <_dtoa_r+0xa0>
 801cf5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801cf5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cf60:	6013      	str	r3, [r2, #0]
 801cf62:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cf66:	4323      	orrs	r3, r4
 801cf68:	f000 854c 	beq.w	801da04 <_dtoa_r+0xb24>
 801cf6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cf6e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801d1c4 <_dtoa_r+0x2e4>
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	f000 854e 	beq.w	801da14 <_dtoa_r+0xb34>
 801cf78:	f10a 0303 	add.w	r3, sl, #3
 801cf7c:	f000 bd48 	b.w	801da10 <_dtoa_r+0xb30>
 801cf80:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cf84:	2200      	movs	r2, #0
 801cf86:	2300      	movs	r3, #0
 801cf88:	ec51 0b17 	vmov	r0, r1, d7
 801cf8c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801cf90:	f7ef fdaa 	bl	800cae8 <__aeabi_dcmpeq>
 801cf94:	4680      	mov	r8, r0
 801cf96:	b158      	cbz	r0, 801cfb0 <_dtoa_r+0xd0>
 801cf98:	2301      	movs	r3, #1
 801cf9a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cf9c:	6013      	str	r3, [r2, #0]
 801cf9e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cfa0:	b113      	cbz	r3, 801cfa8 <_dtoa_r+0xc8>
 801cfa2:	4b84      	ldr	r3, [pc, #528]	@ (801d1b4 <_dtoa_r+0x2d4>)
 801cfa4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801cfa6:	6013      	str	r3, [r2, #0]
 801cfa8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801d1c8 <_dtoa_r+0x2e8>
 801cfac:	f000 bd32 	b.w	801da14 <_dtoa_r+0xb34>
 801cfb0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801cfb4:	aa16      	add	r2, sp, #88	@ 0x58
 801cfb6:	a917      	add	r1, sp, #92	@ 0x5c
 801cfb8:	4658      	mov	r0, fp
 801cfba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cfbe:	f001 f983 	bl	801e2c8 <__d2b>
 801cfc2:	4681      	mov	r9, r0
 801cfc4:	2e00      	cmp	r6, #0
 801cfc6:	d075      	beq.n	801d0b4 <_dtoa_r+0x1d4>
 801cfc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cfca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801cfce:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801cfd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cfd6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801cfda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cfde:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801cfe2:	4619      	mov	r1, r3
 801cfe4:	2200      	movs	r2, #0
 801cfe6:	4b74      	ldr	r3, [pc, #464]	@ (801d1b8 <_dtoa_r+0x2d8>)
 801cfe8:	f7ef f95e 	bl	800c2a8 <__aeabi_dsub>
 801cfec:	a368      	add	r3, pc, #416	@ (adr r3, 801d190 <_dtoa_r+0x2b0>)
 801cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cff2:	f7ef fb11 	bl	800c618 <__aeabi_dmul>
 801cff6:	a368      	add	r3, pc, #416	@ (adr r3, 801d198 <_dtoa_r+0x2b8>)
 801cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cffc:	f7ef f956 	bl	800c2ac <__adddf3>
 801d000:	4604      	mov	r4, r0
 801d002:	460d      	mov	r5, r1
 801d004:	4630      	mov	r0, r6
 801d006:	f7ef fa9d 	bl	800c544 <__aeabi_i2d>
 801d00a:	a365      	add	r3, pc, #404	@ (adr r3, 801d1a0 <_dtoa_r+0x2c0>)
 801d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d010:	f7ef fb02 	bl	800c618 <__aeabi_dmul>
 801d014:	4602      	mov	r2, r0
 801d016:	460b      	mov	r3, r1
 801d018:	4620      	mov	r0, r4
 801d01a:	4629      	mov	r1, r5
 801d01c:	f7ef f946 	bl	800c2ac <__adddf3>
 801d020:	4604      	mov	r4, r0
 801d022:	460d      	mov	r5, r1
 801d024:	f7ef fda8 	bl	800cb78 <__aeabi_d2iz>
 801d028:	2200      	movs	r2, #0
 801d02a:	4607      	mov	r7, r0
 801d02c:	2300      	movs	r3, #0
 801d02e:	4620      	mov	r0, r4
 801d030:	4629      	mov	r1, r5
 801d032:	f7ef fd63 	bl	800cafc <__aeabi_dcmplt>
 801d036:	b140      	cbz	r0, 801d04a <_dtoa_r+0x16a>
 801d038:	4638      	mov	r0, r7
 801d03a:	f7ef fa83 	bl	800c544 <__aeabi_i2d>
 801d03e:	4622      	mov	r2, r4
 801d040:	462b      	mov	r3, r5
 801d042:	f7ef fd51 	bl	800cae8 <__aeabi_dcmpeq>
 801d046:	b900      	cbnz	r0, 801d04a <_dtoa_r+0x16a>
 801d048:	3f01      	subs	r7, #1
 801d04a:	2f16      	cmp	r7, #22
 801d04c:	d851      	bhi.n	801d0f2 <_dtoa_r+0x212>
 801d04e:	4b5b      	ldr	r3, [pc, #364]	@ (801d1bc <_dtoa_r+0x2dc>)
 801d050:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05c:	f7ef fd4e 	bl	800cafc <__aeabi_dcmplt>
 801d060:	2800      	cmp	r0, #0
 801d062:	d048      	beq.n	801d0f6 <_dtoa_r+0x216>
 801d064:	3f01      	subs	r7, #1
 801d066:	2300      	movs	r3, #0
 801d068:	9312      	str	r3, [sp, #72]	@ 0x48
 801d06a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d06c:	1b9b      	subs	r3, r3, r6
 801d06e:	1e5a      	subs	r2, r3, #1
 801d070:	bf46      	itte	mi
 801d072:	f1c3 0801 	rsbmi	r8, r3, #1
 801d076:	2300      	movmi	r3, #0
 801d078:	f04f 0800 	movpl.w	r8, #0
 801d07c:	9208      	str	r2, [sp, #32]
 801d07e:	bf48      	it	mi
 801d080:	9308      	strmi	r3, [sp, #32]
 801d082:	2f00      	cmp	r7, #0
 801d084:	db39      	blt.n	801d0fa <_dtoa_r+0x21a>
 801d086:	9b08      	ldr	r3, [sp, #32]
 801d088:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d08a:	443b      	add	r3, r7
 801d08c:	9308      	str	r3, [sp, #32]
 801d08e:	2300      	movs	r3, #0
 801d090:	930a      	str	r3, [sp, #40]	@ 0x28
 801d092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d094:	2b09      	cmp	r3, #9
 801d096:	d864      	bhi.n	801d162 <_dtoa_r+0x282>
 801d098:	2b05      	cmp	r3, #5
 801d09a:	bfc5      	ittet	gt
 801d09c:	3b04      	subgt	r3, #4
 801d09e:	2400      	movgt	r4, #0
 801d0a0:	2401      	movle	r4, #1
 801d0a2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0a6:	3b02      	subs	r3, #2
 801d0a8:	2b03      	cmp	r3, #3
 801d0aa:	d865      	bhi.n	801d178 <_dtoa_r+0x298>
 801d0ac:	e8df f003 	tbb	[pc, r3]
 801d0b0:	5737392c 	.word	0x5737392c
 801d0b4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d0b8:	441e      	add	r6, r3
 801d0ba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d0be:	2b20      	cmp	r3, #32
 801d0c0:	bfc9      	itett	gt
 801d0c2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d0c6:	f1c3 0320 	rsble	r3, r3, #32
 801d0ca:	409f      	lslgt	r7, r3
 801d0cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d0d0:	bfd8      	it	le
 801d0d2:	fa04 f003 	lslle.w	r0, r4, r3
 801d0d6:	f106 36ff 	add.w	r6, r6, #4294967295
 801d0da:	bfc4      	itt	gt
 801d0dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d0e0:	ea47 0003 	orrgt.w	r0, r7, r3
 801d0e4:	f7ef fa1e 	bl	800c524 <__aeabi_ui2d>
 801d0e8:	2201      	movs	r2, #1
 801d0ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d0ee:	9214      	str	r2, [sp, #80]	@ 0x50
 801d0f0:	e777      	b.n	801cfe2 <_dtoa_r+0x102>
 801d0f2:	2301      	movs	r3, #1
 801d0f4:	e7b8      	b.n	801d068 <_dtoa_r+0x188>
 801d0f6:	9012      	str	r0, [sp, #72]	@ 0x48
 801d0f8:	e7b7      	b.n	801d06a <_dtoa_r+0x18a>
 801d0fa:	427b      	negs	r3, r7
 801d0fc:	eba8 0807 	sub.w	r8, r8, r7
 801d100:	930a      	str	r3, [sp, #40]	@ 0x28
 801d102:	2300      	movs	r3, #0
 801d104:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d106:	e7c4      	b.n	801d092 <_dtoa_r+0x1b2>
 801d108:	2300      	movs	r3, #0
 801d10a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d10e:	2b00      	cmp	r3, #0
 801d110:	dc35      	bgt.n	801d17e <_dtoa_r+0x29e>
 801d112:	2301      	movs	r3, #1
 801d114:	461a      	mov	r2, r3
 801d116:	9300      	str	r3, [sp, #0]
 801d118:	9307      	str	r3, [sp, #28]
 801d11a:	920e      	str	r2, [sp, #56]	@ 0x38
 801d11c:	e00b      	b.n	801d136 <_dtoa_r+0x256>
 801d11e:	2301      	movs	r3, #1
 801d120:	e7f3      	b.n	801d10a <_dtoa_r+0x22a>
 801d122:	2300      	movs	r3, #0
 801d124:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d128:	18fb      	adds	r3, r7, r3
 801d12a:	9300      	str	r3, [sp, #0]
 801d12c:	3301      	adds	r3, #1
 801d12e:	2b01      	cmp	r3, #1
 801d130:	9307      	str	r3, [sp, #28]
 801d132:	bfb8      	it	lt
 801d134:	2301      	movlt	r3, #1
 801d136:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d13a:	2100      	movs	r1, #0
 801d13c:	2204      	movs	r2, #4
 801d13e:	f102 0514 	add.w	r5, r2, #20
 801d142:	429d      	cmp	r5, r3
 801d144:	d91f      	bls.n	801d186 <_dtoa_r+0x2a6>
 801d146:	6041      	str	r1, [r0, #4]
 801d148:	4658      	mov	r0, fp
 801d14a:	f000 fd8d 	bl	801dc68 <_Balloc>
 801d14e:	4682      	mov	sl, r0
 801d150:	2800      	cmp	r0, #0
 801d152:	d13b      	bne.n	801d1cc <_dtoa_r+0x2ec>
 801d154:	4b1a      	ldr	r3, [pc, #104]	@ (801d1c0 <_dtoa_r+0x2e0>)
 801d156:	4602      	mov	r2, r0
 801d158:	f240 11af 	movw	r1, #431	@ 0x1af
 801d15c:	e6d7      	b.n	801cf0e <_dtoa_r+0x2e>
 801d15e:	2301      	movs	r3, #1
 801d160:	e7e0      	b.n	801d124 <_dtoa_r+0x244>
 801d162:	2401      	movs	r4, #1
 801d164:	2300      	movs	r3, #0
 801d166:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d168:	9309      	str	r3, [sp, #36]	@ 0x24
 801d16a:	f04f 33ff 	mov.w	r3, #4294967295
 801d16e:	2200      	movs	r2, #0
 801d170:	9300      	str	r3, [sp, #0]
 801d172:	9307      	str	r3, [sp, #28]
 801d174:	2312      	movs	r3, #18
 801d176:	e7d0      	b.n	801d11a <_dtoa_r+0x23a>
 801d178:	2301      	movs	r3, #1
 801d17a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d17c:	e7f5      	b.n	801d16a <_dtoa_r+0x28a>
 801d17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d180:	9300      	str	r3, [sp, #0]
 801d182:	9307      	str	r3, [sp, #28]
 801d184:	e7d7      	b.n	801d136 <_dtoa_r+0x256>
 801d186:	3101      	adds	r1, #1
 801d188:	0052      	lsls	r2, r2, #1
 801d18a:	e7d8      	b.n	801d13e <_dtoa_r+0x25e>
 801d18c:	f3af 8000 	nop.w
 801d190:	636f4361 	.word	0x636f4361
 801d194:	3fd287a7 	.word	0x3fd287a7
 801d198:	8b60c8b3 	.word	0x8b60c8b3
 801d19c:	3fc68a28 	.word	0x3fc68a28
 801d1a0:	509f79fb 	.word	0x509f79fb
 801d1a4:	3fd34413 	.word	0x3fd34413
 801d1a8:	0801f3a1 	.word	0x0801f3a1
 801d1ac:	0801f3b8 	.word	0x0801f3b8
 801d1b0:	7ff00000 	.word	0x7ff00000
 801d1b4:	0801f371 	.word	0x0801f371
 801d1b8:	3ff80000 	.word	0x3ff80000
 801d1bc:	0801f4b0 	.word	0x0801f4b0
 801d1c0:	0801f410 	.word	0x0801f410
 801d1c4:	0801f39d 	.word	0x0801f39d
 801d1c8:	0801f370 	.word	0x0801f370
 801d1cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d1d0:	6018      	str	r0, [r3, #0]
 801d1d2:	9b07      	ldr	r3, [sp, #28]
 801d1d4:	2b0e      	cmp	r3, #14
 801d1d6:	f200 80a4 	bhi.w	801d322 <_dtoa_r+0x442>
 801d1da:	2c00      	cmp	r4, #0
 801d1dc:	f000 80a1 	beq.w	801d322 <_dtoa_r+0x442>
 801d1e0:	2f00      	cmp	r7, #0
 801d1e2:	dd33      	ble.n	801d24c <_dtoa_r+0x36c>
 801d1e4:	f007 020f 	and.w	r2, r7, #15
 801d1e8:	4bac      	ldr	r3, [pc, #688]	@ (801d49c <_dtoa_r+0x5bc>)
 801d1ea:	05f8      	lsls	r0, r7, #23
 801d1ec:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d1f4:	ed93 7b00 	vldr	d7, [r3]
 801d1f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d1fc:	d516      	bpl.n	801d22c <_dtoa_r+0x34c>
 801d1fe:	4ba8      	ldr	r3, [pc, #672]	@ (801d4a0 <_dtoa_r+0x5c0>)
 801d200:	f004 040f 	and.w	r4, r4, #15
 801d204:	2603      	movs	r6, #3
 801d206:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d20a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d20e:	f7ef fb2d 	bl	800c86c <__aeabi_ddiv>
 801d212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d216:	4da2      	ldr	r5, [pc, #648]	@ (801d4a0 <_dtoa_r+0x5c0>)
 801d218:	b954      	cbnz	r4, 801d230 <_dtoa_r+0x350>
 801d21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d222:	f7ef fb23 	bl	800c86c <__aeabi_ddiv>
 801d226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d22a:	e028      	b.n	801d27e <_dtoa_r+0x39e>
 801d22c:	2602      	movs	r6, #2
 801d22e:	e7f2      	b.n	801d216 <_dtoa_r+0x336>
 801d230:	07e1      	lsls	r1, r4, #31
 801d232:	d508      	bpl.n	801d246 <_dtoa_r+0x366>
 801d234:	3601      	adds	r6, #1
 801d236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d23a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d23e:	f7ef f9eb 	bl	800c618 <__aeabi_dmul>
 801d242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d246:	1064      	asrs	r4, r4, #1
 801d248:	3508      	adds	r5, #8
 801d24a:	e7e5      	b.n	801d218 <_dtoa_r+0x338>
 801d24c:	f000 80d2 	beq.w	801d3f4 <_dtoa_r+0x514>
 801d250:	427c      	negs	r4, r7
 801d252:	4b92      	ldr	r3, [pc, #584]	@ (801d49c <_dtoa_r+0x5bc>)
 801d254:	4d92      	ldr	r5, [pc, #584]	@ (801d4a0 <_dtoa_r+0x5c0>)
 801d256:	2602      	movs	r6, #2
 801d258:	f004 020f 	and.w	r2, r4, #15
 801d25c:	1124      	asrs	r4, r4, #4
 801d25e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d26a:	f7ef f9d5 	bl	800c618 <__aeabi_dmul>
 801d26e:	2300      	movs	r3, #0
 801d270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d274:	2c00      	cmp	r4, #0
 801d276:	f040 80b2 	bne.w	801d3de <_dtoa_r+0x4fe>
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d1d3      	bne.n	801d226 <_dtoa_r+0x346>
 801d27e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d280:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d284:	2b00      	cmp	r3, #0
 801d286:	f000 80b7 	beq.w	801d3f8 <_dtoa_r+0x518>
 801d28a:	2200      	movs	r2, #0
 801d28c:	4b85      	ldr	r3, [pc, #532]	@ (801d4a4 <_dtoa_r+0x5c4>)
 801d28e:	4620      	mov	r0, r4
 801d290:	4629      	mov	r1, r5
 801d292:	f7ef fc33 	bl	800cafc <__aeabi_dcmplt>
 801d296:	2800      	cmp	r0, #0
 801d298:	f000 80ae 	beq.w	801d3f8 <_dtoa_r+0x518>
 801d29c:	9b07      	ldr	r3, [sp, #28]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	f000 80aa 	beq.w	801d3f8 <_dtoa_r+0x518>
 801d2a4:	9b00      	ldr	r3, [sp, #0]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	dd37      	ble.n	801d31a <_dtoa_r+0x43a>
 801d2aa:	1e7b      	subs	r3, r7, #1
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	4629      	mov	r1, r5
 801d2b2:	9304      	str	r3, [sp, #16]
 801d2b4:	3601      	adds	r6, #1
 801d2b6:	4b7c      	ldr	r3, [pc, #496]	@ (801d4a8 <_dtoa_r+0x5c8>)
 801d2b8:	f7ef f9ae 	bl	800c618 <__aeabi_dmul>
 801d2bc:	9c00      	ldr	r4, [sp, #0]
 801d2be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d2c2:	4630      	mov	r0, r6
 801d2c4:	f7ef f93e 	bl	800c544 <__aeabi_i2d>
 801d2c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d2cc:	f7ef f9a4 	bl	800c618 <__aeabi_dmul>
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	4b76      	ldr	r3, [pc, #472]	@ (801d4ac <_dtoa_r+0x5cc>)
 801d2d4:	f7ee ffea 	bl	800c2ac <__adddf3>
 801d2d8:	4605      	mov	r5, r0
 801d2da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d2de:	2c00      	cmp	r4, #0
 801d2e0:	f040 808d 	bne.w	801d3fe <_dtoa_r+0x51e>
 801d2e4:	2200      	movs	r2, #0
 801d2e6:	4b72      	ldr	r3, [pc, #456]	@ (801d4b0 <_dtoa_r+0x5d0>)
 801d2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2ec:	f7ee ffdc 	bl	800c2a8 <__aeabi_dsub>
 801d2f0:	4602      	mov	r2, r0
 801d2f2:	460b      	mov	r3, r1
 801d2f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d2f8:	462a      	mov	r2, r5
 801d2fa:	4633      	mov	r3, r6
 801d2fc:	f7ef fc1c 	bl	800cb38 <__aeabi_dcmpgt>
 801d300:	2800      	cmp	r0, #0
 801d302:	f040 828b 	bne.w	801d81c <_dtoa_r+0x93c>
 801d306:	462a      	mov	r2, r5
 801d308:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d310:	f7ef fbf4 	bl	800cafc <__aeabi_dcmplt>
 801d314:	2800      	cmp	r0, #0
 801d316:	f040 8128 	bne.w	801d56a <_dtoa_r+0x68a>
 801d31a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d31e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d324:	2b00      	cmp	r3, #0
 801d326:	f2c0 815a 	blt.w	801d5de <_dtoa_r+0x6fe>
 801d32a:	2f0e      	cmp	r7, #14
 801d32c:	f300 8157 	bgt.w	801d5de <_dtoa_r+0x6fe>
 801d330:	4b5a      	ldr	r3, [pc, #360]	@ (801d49c <_dtoa_r+0x5bc>)
 801d332:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d336:	ed93 7b00 	vldr	d7, [r3]
 801d33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	ed8d 7b00 	vstr	d7, [sp]
 801d342:	da03      	bge.n	801d34c <_dtoa_r+0x46c>
 801d344:	9b07      	ldr	r3, [sp, #28]
 801d346:	2b00      	cmp	r3, #0
 801d348:	f340 8101 	ble.w	801d54e <_dtoa_r+0x66e>
 801d34c:	4656      	mov	r6, sl
 801d34e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d352:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d356:	4620      	mov	r0, r4
 801d358:	4629      	mov	r1, r5
 801d35a:	f7ef fa87 	bl	800c86c <__aeabi_ddiv>
 801d35e:	f7ef fc0b 	bl	800cb78 <__aeabi_d2iz>
 801d362:	4680      	mov	r8, r0
 801d364:	f7ef f8ee 	bl	800c544 <__aeabi_i2d>
 801d368:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d36c:	f7ef f954 	bl	800c618 <__aeabi_dmul>
 801d370:	4602      	mov	r2, r0
 801d372:	4620      	mov	r0, r4
 801d374:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d378:	460b      	mov	r3, r1
 801d37a:	4629      	mov	r1, r5
 801d37c:	f7ee ff94 	bl	800c2a8 <__aeabi_dsub>
 801d380:	9d07      	ldr	r5, [sp, #28]
 801d382:	f806 4b01 	strb.w	r4, [r6], #1
 801d386:	eba6 040a 	sub.w	r4, r6, sl
 801d38a:	4602      	mov	r2, r0
 801d38c:	460b      	mov	r3, r1
 801d38e:	42a5      	cmp	r5, r4
 801d390:	f040 8117 	bne.w	801d5c2 <_dtoa_r+0x6e2>
 801d394:	f7ee ff8a 	bl	800c2ac <__adddf3>
 801d398:	4604      	mov	r4, r0
 801d39a:	460d      	mov	r5, r1
 801d39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3a0:	f7ef fbca 	bl	800cb38 <__aeabi_dcmpgt>
 801d3a4:	2800      	cmp	r0, #0
 801d3a6:	f040 80f9 	bne.w	801d59c <_dtoa_r+0x6bc>
 801d3aa:	4620      	mov	r0, r4
 801d3ac:	4629      	mov	r1, r5
 801d3ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3b2:	f7ef fb99 	bl	800cae8 <__aeabi_dcmpeq>
 801d3b6:	b118      	cbz	r0, 801d3c0 <_dtoa_r+0x4e0>
 801d3b8:	f018 0f01 	tst.w	r8, #1
 801d3bc:	f040 80ee 	bne.w	801d59c <_dtoa_r+0x6bc>
 801d3c0:	4649      	mov	r1, r9
 801d3c2:	4658      	mov	r0, fp
 801d3c4:	f000 fc90 	bl	801dce8 <_Bfree>
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	3701      	adds	r7, #1
 801d3cc:	7033      	strb	r3, [r6, #0]
 801d3ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d3d0:	601f      	str	r7, [r3, #0]
 801d3d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	f000 831d 	beq.w	801da14 <_dtoa_r+0xb34>
 801d3da:	601e      	str	r6, [r3, #0]
 801d3dc:	e31a      	b.n	801da14 <_dtoa_r+0xb34>
 801d3de:	07e2      	lsls	r2, r4, #31
 801d3e0:	d505      	bpl.n	801d3ee <_dtoa_r+0x50e>
 801d3e2:	3601      	adds	r6, #1
 801d3e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d3e8:	f7ef f916 	bl	800c618 <__aeabi_dmul>
 801d3ec:	2301      	movs	r3, #1
 801d3ee:	1064      	asrs	r4, r4, #1
 801d3f0:	3508      	adds	r5, #8
 801d3f2:	e73f      	b.n	801d274 <_dtoa_r+0x394>
 801d3f4:	2602      	movs	r6, #2
 801d3f6:	e742      	b.n	801d27e <_dtoa_r+0x39e>
 801d3f8:	9c07      	ldr	r4, [sp, #28]
 801d3fa:	9704      	str	r7, [sp, #16]
 801d3fc:	e761      	b.n	801d2c2 <_dtoa_r+0x3e2>
 801d3fe:	4b27      	ldr	r3, [pc, #156]	@ (801d49c <_dtoa_r+0x5bc>)
 801d400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d402:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d406:	4454      	add	r4, sl
 801d408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d40c:	2900      	cmp	r1, #0
 801d40e:	d053      	beq.n	801d4b8 <_dtoa_r+0x5d8>
 801d410:	2000      	movs	r0, #0
 801d412:	4928      	ldr	r1, [pc, #160]	@ (801d4b4 <_dtoa_r+0x5d4>)
 801d414:	f7ef fa2a 	bl	800c86c <__aeabi_ddiv>
 801d418:	4633      	mov	r3, r6
 801d41a:	4656      	mov	r6, sl
 801d41c:	462a      	mov	r2, r5
 801d41e:	f7ee ff43 	bl	800c2a8 <__aeabi_dsub>
 801d422:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d42a:	f7ef fba5 	bl	800cb78 <__aeabi_d2iz>
 801d42e:	4605      	mov	r5, r0
 801d430:	f7ef f888 	bl	800c544 <__aeabi_i2d>
 801d434:	4602      	mov	r2, r0
 801d436:	460b      	mov	r3, r1
 801d438:	3530      	adds	r5, #48	@ 0x30
 801d43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d43e:	f7ee ff33 	bl	800c2a8 <__aeabi_dsub>
 801d442:	4602      	mov	r2, r0
 801d444:	460b      	mov	r3, r1
 801d446:	f806 5b01 	strb.w	r5, [r6], #1
 801d44a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d44e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d452:	f7ef fb53 	bl	800cafc <__aeabi_dcmplt>
 801d456:	2800      	cmp	r0, #0
 801d458:	d171      	bne.n	801d53e <_dtoa_r+0x65e>
 801d45a:	2000      	movs	r0, #0
 801d45c:	4911      	ldr	r1, [pc, #68]	@ (801d4a4 <_dtoa_r+0x5c4>)
 801d45e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d462:	f7ee ff21 	bl	800c2a8 <__aeabi_dsub>
 801d466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d46a:	f7ef fb47 	bl	800cafc <__aeabi_dcmplt>
 801d46e:	2800      	cmp	r0, #0
 801d470:	f040 8095 	bne.w	801d59e <_dtoa_r+0x6be>
 801d474:	42a6      	cmp	r6, r4
 801d476:	f43f af50 	beq.w	801d31a <_dtoa_r+0x43a>
 801d47a:	2200      	movs	r2, #0
 801d47c:	4b0a      	ldr	r3, [pc, #40]	@ (801d4a8 <_dtoa_r+0x5c8>)
 801d47e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d482:	f7ef f8c9 	bl	800c618 <__aeabi_dmul>
 801d486:	2200      	movs	r2, #0
 801d488:	4b07      	ldr	r3, [pc, #28]	@ (801d4a8 <_dtoa_r+0x5c8>)
 801d48a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d492:	f7ef f8c1 	bl	800c618 <__aeabi_dmul>
 801d496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d49a:	e7c4      	b.n	801d426 <_dtoa_r+0x546>
 801d49c:	0801f4b0 	.word	0x0801f4b0
 801d4a0:	0801f488 	.word	0x0801f488
 801d4a4:	3ff00000 	.word	0x3ff00000
 801d4a8:	40240000 	.word	0x40240000
 801d4ac:	401c0000 	.word	0x401c0000
 801d4b0:	40140000 	.word	0x40140000
 801d4b4:	3fe00000 	.word	0x3fe00000
 801d4b8:	4631      	mov	r1, r6
 801d4ba:	4656      	mov	r6, sl
 801d4bc:	4628      	mov	r0, r5
 801d4be:	f7ef f8ab 	bl	800c618 <__aeabi_dmul>
 801d4c2:	9415      	str	r4, [sp, #84]	@ 0x54
 801d4c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d4c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4cc:	f7ef fb54 	bl	800cb78 <__aeabi_d2iz>
 801d4d0:	4605      	mov	r5, r0
 801d4d2:	f7ef f837 	bl	800c544 <__aeabi_i2d>
 801d4d6:	4602      	mov	r2, r0
 801d4d8:	3530      	adds	r5, #48	@ 0x30
 801d4da:	460b      	mov	r3, r1
 801d4dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4e0:	f7ee fee2 	bl	800c2a8 <__aeabi_dsub>
 801d4e4:	f806 5b01 	strb.w	r5, [r6], #1
 801d4e8:	4602      	mov	r2, r0
 801d4ea:	460b      	mov	r3, r1
 801d4ec:	42a6      	cmp	r6, r4
 801d4ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d4f2:	f04f 0200 	mov.w	r2, #0
 801d4f6:	d124      	bne.n	801d542 <_dtoa_r+0x662>
 801d4f8:	4bac      	ldr	r3, [pc, #688]	@ (801d7ac <_dtoa_r+0x8cc>)
 801d4fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d4fe:	f7ee fed5 	bl	800c2ac <__adddf3>
 801d502:	4602      	mov	r2, r0
 801d504:	460b      	mov	r3, r1
 801d506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d50a:	f7ef fb15 	bl	800cb38 <__aeabi_dcmpgt>
 801d50e:	2800      	cmp	r0, #0
 801d510:	d145      	bne.n	801d59e <_dtoa_r+0x6be>
 801d512:	2000      	movs	r0, #0
 801d514:	49a5      	ldr	r1, [pc, #660]	@ (801d7ac <_dtoa_r+0x8cc>)
 801d516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d51a:	f7ee fec5 	bl	800c2a8 <__aeabi_dsub>
 801d51e:	4602      	mov	r2, r0
 801d520:	460b      	mov	r3, r1
 801d522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d526:	f7ef fae9 	bl	800cafc <__aeabi_dcmplt>
 801d52a:	2800      	cmp	r0, #0
 801d52c:	f43f aef5 	beq.w	801d31a <_dtoa_r+0x43a>
 801d530:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801d532:	1e73      	subs	r3, r6, #1
 801d534:	9315      	str	r3, [sp, #84]	@ 0x54
 801d536:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d53a:	2b30      	cmp	r3, #48	@ 0x30
 801d53c:	d0f8      	beq.n	801d530 <_dtoa_r+0x650>
 801d53e:	9f04      	ldr	r7, [sp, #16]
 801d540:	e73e      	b.n	801d3c0 <_dtoa_r+0x4e0>
 801d542:	4b9b      	ldr	r3, [pc, #620]	@ (801d7b0 <_dtoa_r+0x8d0>)
 801d544:	f7ef f868 	bl	800c618 <__aeabi_dmul>
 801d548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d54c:	e7bc      	b.n	801d4c8 <_dtoa_r+0x5e8>
 801d54e:	d10c      	bne.n	801d56a <_dtoa_r+0x68a>
 801d550:	2200      	movs	r2, #0
 801d552:	4b98      	ldr	r3, [pc, #608]	@ (801d7b4 <_dtoa_r+0x8d4>)
 801d554:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d558:	f7ef f85e 	bl	800c618 <__aeabi_dmul>
 801d55c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d560:	f7ef fae0 	bl	800cb24 <__aeabi_dcmpge>
 801d564:	2800      	cmp	r0, #0
 801d566:	f000 8157 	beq.w	801d818 <_dtoa_r+0x938>
 801d56a:	2400      	movs	r4, #0
 801d56c:	4625      	mov	r5, r4
 801d56e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d570:	4656      	mov	r6, sl
 801d572:	43db      	mvns	r3, r3
 801d574:	9304      	str	r3, [sp, #16]
 801d576:	2700      	movs	r7, #0
 801d578:	4621      	mov	r1, r4
 801d57a:	4658      	mov	r0, fp
 801d57c:	f000 fbb4 	bl	801dce8 <_Bfree>
 801d580:	2d00      	cmp	r5, #0
 801d582:	d0dc      	beq.n	801d53e <_dtoa_r+0x65e>
 801d584:	b12f      	cbz	r7, 801d592 <_dtoa_r+0x6b2>
 801d586:	42af      	cmp	r7, r5
 801d588:	d003      	beq.n	801d592 <_dtoa_r+0x6b2>
 801d58a:	4639      	mov	r1, r7
 801d58c:	4658      	mov	r0, fp
 801d58e:	f000 fbab 	bl	801dce8 <_Bfree>
 801d592:	4629      	mov	r1, r5
 801d594:	4658      	mov	r0, fp
 801d596:	f000 fba7 	bl	801dce8 <_Bfree>
 801d59a:	e7d0      	b.n	801d53e <_dtoa_r+0x65e>
 801d59c:	9704      	str	r7, [sp, #16]
 801d59e:	4633      	mov	r3, r6
 801d5a0:	461e      	mov	r6, r3
 801d5a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d5a6:	2a39      	cmp	r2, #57	@ 0x39
 801d5a8:	d107      	bne.n	801d5ba <_dtoa_r+0x6da>
 801d5aa:	459a      	cmp	sl, r3
 801d5ac:	d1f8      	bne.n	801d5a0 <_dtoa_r+0x6c0>
 801d5ae:	9a04      	ldr	r2, [sp, #16]
 801d5b0:	3201      	adds	r2, #1
 801d5b2:	9204      	str	r2, [sp, #16]
 801d5b4:	2230      	movs	r2, #48	@ 0x30
 801d5b6:	f88a 2000 	strb.w	r2, [sl]
 801d5ba:	781a      	ldrb	r2, [r3, #0]
 801d5bc:	3201      	adds	r2, #1
 801d5be:	701a      	strb	r2, [r3, #0]
 801d5c0:	e7bd      	b.n	801d53e <_dtoa_r+0x65e>
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	4b7a      	ldr	r3, [pc, #488]	@ (801d7b0 <_dtoa_r+0x8d0>)
 801d5c6:	f7ef f827 	bl	800c618 <__aeabi_dmul>
 801d5ca:	2200      	movs	r2, #0
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	4604      	mov	r4, r0
 801d5d0:	460d      	mov	r5, r1
 801d5d2:	f7ef fa89 	bl	800cae8 <__aeabi_dcmpeq>
 801d5d6:	2800      	cmp	r0, #0
 801d5d8:	f43f aebb 	beq.w	801d352 <_dtoa_r+0x472>
 801d5dc:	e6f0      	b.n	801d3c0 <_dtoa_r+0x4e0>
 801d5de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d5e0:	2a00      	cmp	r2, #0
 801d5e2:	f000 80db 	beq.w	801d79c <_dtoa_r+0x8bc>
 801d5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d5e8:	2a01      	cmp	r2, #1
 801d5ea:	f300 80bf 	bgt.w	801d76c <_dtoa_r+0x88c>
 801d5ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d5f0:	2a00      	cmp	r2, #0
 801d5f2:	f000 80b7 	beq.w	801d764 <_dtoa_r+0x884>
 801d5f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d5fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d5fc:	4646      	mov	r6, r8
 801d5fe:	9a08      	ldr	r2, [sp, #32]
 801d600:	2101      	movs	r1, #1
 801d602:	4658      	mov	r0, fp
 801d604:	4498      	add	r8, r3
 801d606:	441a      	add	r2, r3
 801d608:	9208      	str	r2, [sp, #32]
 801d60a:	f000 fc23 	bl	801de54 <__i2b>
 801d60e:	4605      	mov	r5, r0
 801d610:	b15e      	cbz	r6, 801d62a <_dtoa_r+0x74a>
 801d612:	9b08      	ldr	r3, [sp, #32]
 801d614:	2b00      	cmp	r3, #0
 801d616:	dd08      	ble.n	801d62a <_dtoa_r+0x74a>
 801d618:	42b3      	cmp	r3, r6
 801d61a:	9a08      	ldr	r2, [sp, #32]
 801d61c:	bfa8      	it	ge
 801d61e:	4633      	movge	r3, r6
 801d620:	eba8 0803 	sub.w	r8, r8, r3
 801d624:	1af6      	subs	r6, r6, r3
 801d626:	1ad3      	subs	r3, r2, r3
 801d628:	9308      	str	r3, [sp, #32]
 801d62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d62c:	b1f3      	cbz	r3, 801d66c <_dtoa_r+0x78c>
 801d62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d630:	2b00      	cmp	r3, #0
 801d632:	f000 80b7 	beq.w	801d7a4 <_dtoa_r+0x8c4>
 801d636:	b18c      	cbz	r4, 801d65c <_dtoa_r+0x77c>
 801d638:	4629      	mov	r1, r5
 801d63a:	4622      	mov	r2, r4
 801d63c:	4658      	mov	r0, fp
 801d63e:	f000 fcc9 	bl	801dfd4 <__pow5mult>
 801d642:	464a      	mov	r2, r9
 801d644:	4601      	mov	r1, r0
 801d646:	4605      	mov	r5, r0
 801d648:	4658      	mov	r0, fp
 801d64a:	f000 fc19 	bl	801de80 <__multiply>
 801d64e:	4649      	mov	r1, r9
 801d650:	9004      	str	r0, [sp, #16]
 801d652:	4658      	mov	r0, fp
 801d654:	f000 fb48 	bl	801dce8 <_Bfree>
 801d658:	9b04      	ldr	r3, [sp, #16]
 801d65a:	4699      	mov	r9, r3
 801d65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d65e:	1b1a      	subs	r2, r3, r4
 801d660:	d004      	beq.n	801d66c <_dtoa_r+0x78c>
 801d662:	4649      	mov	r1, r9
 801d664:	4658      	mov	r0, fp
 801d666:	f000 fcb5 	bl	801dfd4 <__pow5mult>
 801d66a:	4681      	mov	r9, r0
 801d66c:	2101      	movs	r1, #1
 801d66e:	4658      	mov	r0, fp
 801d670:	f000 fbf0 	bl	801de54 <__i2b>
 801d674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d676:	4604      	mov	r4, r0
 801d678:	2b00      	cmp	r3, #0
 801d67a:	f000 81cf 	beq.w	801da1c <_dtoa_r+0xb3c>
 801d67e:	461a      	mov	r2, r3
 801d680:	4601      	mov	r1, r0
 801d682:	4658      	mov	r0, fp
 801d684:	f000 fca6 	bl	801dfd4 <__pow5mult>
 801d688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d68a:	4604      	mov	r4, r0
 801d68c:	2b01      	cmp	r3, #1
 801d68e:	f300 8095 	bgt.w	801d7bc <_dtoa_r+0x8dc>
 801d692:	9b02      	ldr	r3, [sp, #8]
 801d694:	2b00      	cmp	r3, #0
 801d696:	f040 8087 	bne.w	801d7a8 <_dtoa_r+0x8c8>
 801d69a:	9b03      	ldr	r3, [sp, #12]
 801d69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	f040 8089 	bne.w	801d7b8 <_dtoa_r+0x8d8>
 801d6a6:	9b03      	ldr	r3, [sp, #12]
 801d6a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d6ac:	0d1b      	lsrs	r3, r3, #20
 801d6ae:	051b      	lsls	r3, r3, #20
 801d6b0:	b12b      	cbz	r3, 801d6be <_dtoa_r+0x7de>
 801d6b2:	9b08      	ldr	r3, [sp, #32]
 801d6b4:	f108 0801 	add.w	r8, r8, #1
 801d6b8:	3301      	adds	r3, #1
 801d6ba:	9308      	str	r3, [sp, #32]
 801d6bc:	2301      	movs	r3, #1
 801d6be:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	f000 81b0 	beq.w	801da28 <_dtoa_r+0xb48>
 801d6c8:	6923      	ldr	r3, [r4, #16]
 801d6ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d6ce:	6918      	ldr	r0, [r3, #16]
 801d6d0:	f000 fb74 	bl	801ddbc <__hi0bits>
 801d6d4:	f1c0 0020 	rsb	r0, r0, #32
 801d6d8:	9b08      	ldr	r3, [sp, #32]
 801d6da:	4418      	add	r0, r3
 801d6dc:	f010 001f 	ands.w	r0, r0, #31
 801d6e0:	d077      	beq.n	801d7d2 <_dtoa_r+0x8f2>
 801d6e2:	f1c0 0320 	rsb	r3, r0, #32
 801d6e6:	2b04      	cmp	r3, #4
 801d6e8:	dd6b      	ble.n	801d7c2 <_dtoa_r+0x8e2>
 801d6ea:	f1c0 001c 	rsb	r0, r0, #28
 801d6ee:	9b08      	ldr	r3, [sp, #32]
 801d6f0:	4480      	add	r8, r0
 801d6f2:	4403      	add	r3, r0
 801d6f4:	4406      	add	r6, r0
 801d6f6:	9308      	str	r3, [sp, #32]
 801d6f8:	f1b8 0f00 	cmp.w	r8, #0
 801d6fc:	dd05      	ble.n	801d70a <_dtoa_r+0x82a>
 801d6fe:	4649      	mov	r1, r9
 801d700:	4642      	mov	r2, r8
 801d702:	4658      	mov	r0, fp
 801d704:	f000 fcc0 	bl	801e088 <__lshift>
 801d708:	4681      	mov	r9, r0
 801d70a:	9b08      	ldr	r3, [sp, #32]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	dd05      	ble.n	801d71c <_dtoa_r+0x83c>
 801d710:	4621      	mov	r1, r4
 801d712:	461a      	mov	r2, r3
 801d714:	4658      	mov	r0, fp
 801d716:	f000 fcb7 	bl	801e088 <__lshift>
 801d71a:	4604      	mov	r4, r0
 801d71c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d059      	beq.n	801d7d6 <_dtoa_r+0x8f6>
 801d722:	4621      	mov	r1, r4
 801d724:	4648      	mov	r0, r9
 801d726:	f000 fd1b 	bl	801e160 <__mcmp>
 801d72a:	2800      	cmp	r0, #0
 801d72c:	da53      	bge.n	801d7d6 <_dtoa_r+0x8f6>
 801d72e:	1e7b      	subs	r3, r7, #1
 801d730:	4649      	mov	r1, r9
 801d732:	220a      	movs	r2, #10
 801d734:	4658      	mov	r0, fp
 801d736:	9304      	str	r3, [sp, #16]
 801d738:	2300      	movs	r3, #0
 801d73a:	f000 faf7 	bl	801dd2c <__multadd>
 801d73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d740:	4681      	mov	r9, r0
 801d742:	2b00      	cmp	r3, #0
 801d744:	f000 8172 	beq.w	801da2c <_dtoa_r+0xb4c>
 801d748:	2300      	movs	r3, #0
 801d74a:	4629      	mov	r1, r5
 801d74c:	220a      	movs	r2, #10
 801d74e:	4658      	mov	r0, fp
 801d750:	f000 faec 	bl	801dd2c <__multadd>
 801d754:	9b00      	ldr	r3, [sp, #0]
 801d756:	4605      	mov	r5, r0
 801d758:	2b00      	cmp	r3, #0
 801d75a:	dc67      	bgt.n	801d82c <_dtoa_r+0x94c>
 801d75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d75e:	2b02      	cmp	r3, #2
 801d760:	dc41      	bgt.n	801d7e6 <_dtoa_r+0x906>
 801d762:	e063      	b.n	801d82c <_dtoa_r+0x94c>
 801d764:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d76a:	e746      	b.n	801d5fa <_dtoa_r+0x71a>
 801d76c:	9b07      	ldr	r3, [sp, #28]
 801d76e:	1e5c      	subs	r4, r3, #1
 801d770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d772:	42a3      	cmp	r3, r4
 801d774:	bfb7      	itett	lt
 801d776:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d778:	1b1c      	subge	r4, r3, r4
 801d77a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801d77c:	1ae3      	sublt	r3, r4, r3
 801d77e:	bfbe      	ittt	lt
 801d780:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801d782:	2400      	movlt	r4, #0
 801d784:	18d2      	addlt	r2, r2, r3
 801d786:	9b07      	ldr	r3, [sp, #28]
 801d788:	bfb8      	it	lt
 801d78a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	bfb5      	itete	lt
 801d790:	eba8 0603 	sublt.w	r6, r8, r3
 801d794:	4646      	movge	r6, r8
 801d796:	2300      	movlt	r3, #0
 801d798:	9b07      	ldrge	r3, [sp, #28]
 801d79a:	e730      	b.n	801d5fe <_dtoa_r+0x71e>
 801d79c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d79e:	4646      	mov	r6, r8
 801d7a0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d7a2:	e735      	b.n	801d610 <_dtoa_r+0x730>
 801d7a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d7a6:	e75c      	b.n	801d662 <_dtoa_r+0x782>
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	e788      	b.n	801d6be <_dtoa_r+0x7de>
 801d7ac:	3fe00000 	.word	0x3fe00000
 801d7b0:	40240000 	.word	0x40240000
 801d7b4:	40140000 	.word	0x40140000
 801d7b8:	9b02      	ldr	r3, [sp, #8]
 801d7ba:	e780      	b.n	801d6be <_dtoa_r+0x7de>
 801d7bc:	2300      	movs	r3, #0
 801d7be:	930a      	str	r3, [sp, #40]	@ 0x28
 801d7c0:	e782      	b.n	801d6c8 <_dtoa_r+0x7e8>
 801d7c2:	d099      	beq.n	801d6f8 <_dtoa_r+0x818>
 801d7c4:	331c      	adds	r3, #28
 801d7c6:	9a08      	ldr	r2, [sp, #32]
 801d7c8:	441a      	add	r2, r3
 801d7ca:	4498      	add	r8, r3
 801d7cc:	441e      	add	r6, r3
 801d7ce:	9208      	str	r2, [sp, #32]
 801d7d0:	e792      	b.n	801d6f8 <_dtoa_r+0x818>
 801d7d2:	4603      	mov	r3, r0
 801d7d4:	e7f6      	b.n	801d7c4 <_dtoa_r+0x8e4>
 801d7d6:	9b07      	ldr	r3, [sp, #28]
 801d7d8:	9704      	str	r7, [sp, #16]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	dc20      	bgt.n	801d820 <_dtoa_r+0x940>
 801d7de:	9300      	str	r3, [sp, #0]
 801d7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7e2:	2b02      	cmp	r3, #2
 801d7e4:	dd1e      	ble.n	801d824 <_dtoa_r+0x944>
 801d7e6:	9b00      	ldr	r3, [sp, #0]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	f47f aec0 	bne.w	801d56e <_dtoa_r+0x68e>
 801d7ee:	4621      	mov	r1, r4
 801d7f0:	2205      	movs	r2, #5
 801d7f2:	4658      	mov	r0, fp
 801d7f4:	f000 fa9a 	bl	801dd2c <__multadd>
 801d7f8:	4601      	mov	r1, r0
 801d7fa:	4604      	mov	r4, r0
 801d7fc:	4648      	mov	r0, r9
 801d7fe:	f000 fcaf 	bl	801e160 <__mcmp>
 801d802:	2800      	cmp	r0, #0
 801d804:	f77f aeb3 	ble.w	801d56e <_dtoa_r+0x68e>
 801d808:	2331      	movs	r3, #49	@ 0x31
 801d80a:	4656      	mov	r6, sl
 801d80c:	f806 3b01 	strb.w	r3, [r6], #1
 801d810:	9b04      	ldr	r3, [sp, #16]
 801d812:	3301      	adds	r3, #1
 801d814:	9304      	str	r3, [sp, #16]
 801d816:	e6ae      	b.n	801d576 <_dtoa_r+0x696>
 801d818:	9c07      	ldr	r4, [sp, #28]
 801d81a:	9704      	str	r7, [sp, #16]
 801d81c:	4625      	mov	r5, r4
 801d81e:	e7f3      	b.n	801d808 <_dtoa_r+0x928>
 801d820:	9b07      	ldr	r3, [sp, #28]
 801d822:	9300      	str	r3, [sp, #0]
 801d824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d826:	2b00      	cmp	r3, #0
 801d828:	f000 8104 	beq.w	801da34 <_dtoa_r+0xb54>
 801d82c:	2e00      	cmp	r6, #0
 801d82e:	dd05      	ble.n	801d83c <_dtoa_r+0x95c>
 801d830:	4629      	mov	r1, r5
 801d832:	4632      	mov	r2, r6
 801d834:	4658      	mov	r0, fp
 801d836:	f000 fc27 	bl	801e088 <__lshift>
 801d83a:	4605      	mov	r5, r0
 801d83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d05a      	beq.n	801d8f8 <_dtoa_r+0xa18>
 801d842:	6869      	ldr	r1, [r5, #4]
 801d844:	4658      	mov	r0, fp
 801d846:	f000 fa0f 	bl	801dc68 <_Balloc>
 801d84a:	4606      	mov	r6, r0
 801d84c:	b928      	cbnz	r0, 801d85a <_dtoa_r+0x97a>
 801d84e:	4b84      	ldr	r3, [pc, #528]	@ (801da60 <_dtoa_r+0xb80>)
 801d850:	4602      	mov	r2, r0
 801d852:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d856:	f7ff bb5a 	b.w	801cf0e <_dtoa_r+0x2e>
 801d85a:	692a      	ldr	r2, [r5, #16]
 801d85c:	f105 010c 	add.w	r1, r5, #12
 801d860:	300c      	adds	r0, #12
 801d862:	3202      	adds	r2, #2
 801d864:	0092      	lsls	r2, r2, #2
 801d866:	f7ff faa0 	bl	801cdaa <memcpy>
 801d86a:	2201      	movs	r2, #1
 801d86c:	4631      	mov	r1, r6
 801d86e:	4658      	mov	r0, fp
 801d870:	f000 fc0a 	bl	801e088 <__lshift>
 801d874:	f10a 0301 	add.w	r3, sl, #1
 801d878:	462f      	mov	r7, r5
 801d87a:	4605      	mov	r5, r0
 801d87c:	9307      	str	r3, [sp, #28]
 801d87e:	9b00      	ldr	r3, [sp, #0]
 801d880:	4453      	add	r3, sl
 801d882:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d884:	9b02      	ldr	r3, [sp, #8]
 801d886:	f003 0301 	and.w	r3, r3, #1
 801d88a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d88c:	9b07      	ldr	r3, [sp, #28]
 801d88e:	4621      	mov	r1, r4
 801d890:	4648      	mov	r0, r9
 801d892:	3b01      	subs	r3, #1
 801d894:	9300      	str	r3, [sp, #0]
 801d896:	f7ff fa95 	bl	801cdc4 <quorem>
 801d89a:	4639      	mov	r1, r7
 801d89c:	9002      	str	r0, [sp, #8]
 801d89e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d8a2:	4648      	mov	r0, r9
 801d8a4:	f000 fc5c 	bl	801e160 <__mcmp>
 801d8a8:	462a      	mov	r2, r5
 801d8aa:	9008      	str	r0, [sp, #32]
 801d8ac:	4621      	mov	r1, r4
 801d8ae:	4658      	mov	r0, fp
 801d8b0:	f000 fc72 	bl	801e198 <__mdiff>
 801d8b4:	68c2      	ldr	r2, [r0, #12]
 801d8b6:	4606      	mov	r6, r0
 801d8b8:	bb02      	cbnz	r2, 801d8fc <_dtoa_r+0xa1c>
 801d8ba:	4601      	mov	r1, r0
 801d8bc:	4648      	mov	r0, r9
 801d8be:	f000 fc4f 	bl	801e160 <__mcmp>
 801d8c2:	4602      	mov	r2, r0
 801d8c4:	4631      	mov	r1, r6
 801d8c6:	4658      	mov	r0, fp
 801d8c8:	920e      	str	r2, [sp, #56]	@ 0x38
 801d8ca:	f000 fa0d 	bl	801dce8 <_Bfree>
 801d8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8d2:	9e07      	ldr	r6, [sp, #28]
 801d8d4:	ea43 0102 	orr.w	r1, r3, r2
 801d8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8da:	4319      	orrs	r1, r3
 801d8dc:	d110      	bne.n	801d900 <_dtoa_r+0xa20>
 801d8de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d8e2:	d029      	beq.n	801d938 <_dtoa_r+0xa58>
 801d8e4:	9b08      	ldr	r3, [sp, #32]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	dd02      	ble.n	801d8f0 <_dtoa_r+0xa10>
 801d8ea:	9b02      	ldr	r3, [sp, #8]
 801d8ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d8f0:	9b00      	ldr	r3, [sp, #0]
 801d8f2:	f883 8000 	strb.w	r8, [r3]
 801d8f6:	e63f      	b.n	801d578 <_dtoa_r+0x698>
 801d8f8:	4628      	mov	r0, r5
 801d8fa:	e7bb      	b.n	801d874 <_dtoa_r+0x994>
 801d8fc:	2201      	movs	r2, #1
 801d8fe:	e7e1      	b.n	801d8c4 <_dtoa_r+0x9e4>
 801d900:	9b08      	ldr	r3, [sp, #32]
 801d902:	2b00      	cmp	r3, #0
 801d904:	db04      	blt.n	801d910 <_dtoa_r+0xa30>
 801d906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d908:	430b      	orrs	r3, r1
 801d90a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d90c:	430b      	orrs	r3, r1
 801d90e:	d120      	bne.n	801d952 <_dtoa_r+0xa72>
 801d910:	2a00      	cmp	r2, #0
 801d912:	dded      	ble.n	801d8f0 <_dtoa_r+0xa10>
 801d914:	4649      	mov	r1, r9
 801d916:	2201      	movs	r2, #1
 801d918:	4658      	mov	r0, fp
 801d91a:	f000 fbb5 	bl	801e088 <__lshift>
 801d91e:	4621      	mov	r1, r4
 801d920:	4681      	mov	r9, r0
 801d922:	f000 fc1d 	bl	801e160 <__mcmp>
 801d926:	2800      	cmp	r0, #0
 801d928:	dc03      	bgt.n	801d932 <_dtoa_r+0xa52>
 801d92a:	d1e1      	bne.n	801d8f0 <_dtoa_r+0xa10>
 801d92c:	f018 0f01 	tst.w	r8, #1
 801d930:	d0de      	beq.n	801d8f0 <_dtoa_r+0xa10>
 801d932:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d936:	d1d8      	bne.n	801d8ea <_dtoa_r+0xa0a>
 801d938:	2339      	movs	r3, #57	@ 0x39
 801d93a:	9a00      	ldr	r2, [sp, #0]
 801d93c:	7013      	strb	r3, [r2, #0]
 801d93e:	4633      	mov	r3, r6
 801d940:	461e      	mov	r6, r3
 801d942:	3b01      	subs	r3, #1
 801d944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d948:	2a39      	cmp	r2, #57	@ 0x39
 801d94a:	d052      	beq.n	801d9f2 <_dtoa_r+0xb12>
 801d94c:	3201      	adds	r2, #1
 801d94e:	701a      	strb	r2, [r3, #0]
 801d950:	e612      	b.n	801d578 <_dtoa_r+0x698>
 801d952:	2a00      	cmp	r2, #0
 801d954:	dd07      	ble.n	801d966 <_dtoa_r+0xa86>
 801d956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d95a:	d0ed      	beq.n	801d938 <_dtoa_r+0xa58>
 801d95c:	f108 0301 	add.w	r3, r8, #1
 801d960:	9a00      	ldr	r2, [sp, #0]
 801d962:	7013      	strb	r3, [r2, #0]
 801d964:	e608      	b.n	801d578 <_dtoa_r+0x698>
 801d966:	9b07      	ldr	r3, [sp, #28]
 801d968:	9a07      	ldr	r2, [sp, #28]
 801d96a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d970:	4293      	cmp	r3, r2
 801d972:	d028      	beq.n	801d9c6 <_dtoa_r+0xae6>
 801d974:	4649      	mov	r1, r9
 801d976:	2300      	movs	r3, #0
 801d978:	220a      	movs	r2, #10
 801d97a:	4658      	mov	r0, fp
 801d97c:	f000 f9d6 	bl	801dd2c <__multadd>
 801d980:	42af      	cmp	r7, r5
 801d982:	4681      	mov	r9, r0
 801d984:	f04f 0300 	mov.w	r3, #0
 801d988:	f04f 020a 	mov.w	r2, #10
 801d98c:	4639      	mov	r1, r7
 801d98e:	4658      	mov	r0, fp
 801d990:	d107      	bne.n	801d9a2 <_dtoa_r+0xac2>
 801d992:	f000 f9cb 	bl	801dd2c <__multadd>
 801d996:	4607      	mov	r7, r0
 801d998:	4605      	mov	r5, r0
 801d99a:	9b07      	ldr	r3, [sp, #28]
 801d99c:	3301      	adds	r3, #1
 801d99e:	9307      	str	r3, [sp, #28]
 801d9a0:	e774      	b.n	801d88c <_dtoa_r+0x9ac>
 801d9a2:	f000 f9c3 	bl	801dd2c <__multadd>
 801d9a6:	4629      	mov	r1, r5
 801d9a8:	4607      	mov	r7, r0
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	220a      	movs	r2, #10
 801d9ae:	4658      	mov	r0, fp
 801d9b0:	f000 f9bc 	bl	801dd2c <__multadd>
 801d9b4:	4605      	mov	r5, r0
 801d9b6:	e7f0      	b.n	801d99a <_dtoa_r+0xaba>
 801d9b8:	9b00      	ldr	r3, [sp, #0]
 801d9ba:	2700      	movs	r7, #0
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	bfcc      	ite	gt
 801d9c0:	461e      	movgt	r6, r3
 801d9c2:	2601      	movle	r6, #1
 801d9c4:	4456      	add	r6, sl
 801d9c6:	4649      	mov	r1, r9
 801d9c8:	2201      	movs	r2, #1
 801d9ca:	4658      	mov	r0, fp
 801d9cc:	f000 fb5c 	bl	801e088 <__lshift>
 801d9d0:	4621      	mov	r1, r4
 801d9d2:	4681      	mov	r9, r0
 801d9d4:	f000 fbc4 	bl	801e160 <__mcmp>
 801d9d8:	2800      	cmp	r0, #0
 801d9da:	dcb0      	bgt.n	801d93e <_dtoa_r+0xa5e>
 801d9dc:	d102      	bne.n	801d9e4 <_dtoa_r+0xb04>
 801d9de:	f018 0f01 	tst.w	r8, #1
 801d9e2:	d1ac      	bne.n	801d93e <_dtoa_r+0xa5e>
 801d9e4:	4633      	mov	r3, r6
 801d9e6:	461e      	mov	r6, r3
 801d9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d9ec:	2a30      	cmp	r2, #48	@ 0x30
 801d9ee:	d0fa      	beq.n	801d9e6 <_dtoa_r+0xb06>
 801d9f0:	e5c2      	b.n	801d578 <_dtoa_r+0x698>
 801d9f2:	459a      	cmp	sl, r3
 801d9f4:	d1a4      	bne.n	801d940 <_dtoa_r+0xa60>
 801d9f6:	9b04      	ldr	r3, [sp, #16]
 801d9f8:	3301      	adds	r3, #1
 801d9fa:	9304      	str	r3, [sp, #16]
 801d9fc:	2331      	movs	r3, #49	@ 0x31
 801d9fe:	f88a 3000 	strb.w	r3, [sl]
 801da02:	e5b9      	b.n	801d578 <_dtoa_r+0x698>
 801da04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801da06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801da64 <_dtoa_r+0xb84>
 801da0a:	b11b      	cbz	r3, 801da14 <_dtoa_r+0xb34>
 801da0c:	f10a 0308 	add.w	r3, sl, #8
 801da10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801da12:	6013      	str	r3, [r2, #0]
 801da14:	4650      	mov	r0, sl
 801da16:	b019      	add	sp, #100	@ 0x64
 801da18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da1e:	2b01      	cmp	r3, #1
 801da20:	f77f ae37 	ble.w	801d692 <_dtoa_r+0x7b2>
 801da24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da26:	930a      	str	r3, [sp, #40]	@ 0x28
 801da28:	2001      	movs	r0, #1
 801da2a:	e655      	b.n	801d6d8 <_dtoa_r+0x7f8>
 801da2c:	9b00      	ldr	r3, [sp, #0]
 801da2e:	2b00      	cmp	r3, #0
 801da30:	f77f aed6 	ble.w	801d7e0 <_dtoa_r+0x900>
 801da34:	4656      	mov	r6, sl
 801da36:	4621      	mov	r1, r4
 801da38:	4648      	mov	r0, r9
 801da3a:	f7ff f9c3 	bl	801cdc4 <quorem>
 801da3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801da42:	9b00      	ldr	r3, [sp, #0]
 801da44:	f806 8b01 	strb.w	r8, [r6], #1
 801da48:	eba6 020a 	sub.w	r2, r6, sl
 801da4c:	4293      	cmp	r3, r2
 801da4e:	ddb3      	ble.n	801d9b8 <_dtoa_r+0xad8>
 801da50:	4649      	mov	r1, r9
 801da52:	2300      	movs	r3, #0
 801da54:	220a      	movs	r2, #10
 801da56:	4658      	mov	r0, fp
 801da58:	f000 f968 	bl	801dd2c <__multadd>
 801da5c:	4681      	mov	r9, r0
 801da5e:	e7ea      	b.n	801da36 <_dtoa_r+0xb56>
 801da60:	0801f410 	.word	0x0801f410
 801da64:	0801f394 	.word	0x0801f394

0801da68 <_free_r>:
 801da68:	b538      	push	{r3, r4, r5, lr}
 801da6a:	4605      	mov	r5, r0
 801da6c:	2900      	cmp	r1, #0
 801da6e:	d041      	beq.n	801daf4 <_free_r+0x8c>
 801da70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da74:	1f0c      	subs	r4, r1, #4
 801da76:	2b00      	cmp	r3, #0
 801da78:	bfb8      	it	lt
 801da7a:	18e4      	addlt	r4, r4, r3
 801da7c:	f000 f8e8 	bl	801dc50 <__malloc_lock>
 801da80:	4a1d      	ldr	r2, [pc, #116]	@ (801daf8 <_free_r+0x90>)
 801da82:	6813      	ldr	r3, [r2, #0]
 801da84:	b933      	cbnz	r3, 801da94 <_free_r+0x2c>
 801da86:	6063      	str	r3, [r4, #4]
 801da88:	6014      	str	r4, [r2, #0]
 801da8a:	4628      	mov	r0, r5
 801da8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da90:	f000 b8e4 	b.w	801dc5c <__malloc_unlock>
 801da94:	42a3      	cmp	r3, r4
 801da96:	d908      	bls.n	801daaa <_free_r+0x42>
 801da98:	6820      	ldr	r0, [r4, #0]
 801da9a:	1821      	adds	r1, r4, r0
 801da9c:	428b      	cmp	r3, r1
 801da9e:	bf01      	itttt	eq
 801daa0:	6819      	ldreq	r1, [r3, #0]
 801daa2:	685b      	ldreq	r3, [r3, #4]
 801daa4:	1809      	addeq	r1, r1, r0
 801daa6:	6021      	streq	r1, [r4, #0]
 801daa8:	e7ed      	b.n	801da86 <_free_r+0x1e>
 801daaa:	461a      	mov	r2, r3
 801daac:	685b      	ldr	r3, [r3, #4]
 801daae:	b10b      	cbz	r3, 801dab4 <_free_r+0x4c>
 801dab0:	42a3      	cmp	r3, r4
 801dab2:	d9fa      	bls.n	801daaa <_free_r+0x42>
 801dab4:	6811      	ldr	r1, [r2, #0]
 801dab6:	1850      	adds	r0, r2, r1
 801dab8:	42a0      	cmp	r0, r4
 801daba:	d10b      	bne.n	801dad4 <_free_r+0x6c>
 801dabc:	6820      	ldr	r0, [r4, #0]
 801dabe:	4401      	add	r1, r0
 801dac0:	1850      	adds	r0, r2, r1
 801dac2:	6011      	str	r1, [r2, #0]
 801dac4:	4283      	cmp	r3, r0
 801dac6:	d1e0      	bne.n	801da8a <_free_r+0x22>
 801dac8:	6818      	ldr	r0, [r3, #0]
 801daca:	685b      	ldr	r3, [r3, #4]
 801dacc:	4408      	add	r0, r1
 801dace:	6053      	str	r3, [r2, #4]
 801dad0:	6010      	str	r0, [r2, #0]
 801dad2:	e7da      	b.n	801da8a <_free_r+0x22>
 801dad4:	d902      	bls.n	801dadc <_free_r+0x74>
 801dad6:	230c      	movs	r3, #12
 801dad8:	602b      	str	r3, [r5, #0]
 801dada:	e7d6      	b.n	801da8a <_free_r+0x22>
 801dadc:	6820      	ldr	r0, [r4, #0]
 801dade:	1821      	adds	r1, r4, r0
 801dae0:	428b      	cmp	r3, r1
 801dae2:	bf02      	ittt	eq
 801dae4:	6819      	ldreq	r1, [r3, #0]
 801dae6:	685b      	ldreq	r3, [r3, #4]
 801dae8:	1809      	addeq	r1, r1, r0
 801daea:	6063      	str	r3, [r4, #4]
 801daec:	bf08      	it	eq
 801daee:	6021      	streq	r1, [r4, #0]
 801daf0:	6054      	str	r4, [r2, #4]
 801daf2:	e7ca      	b.n	801da8a <_free_r+0x22>
 801daf4:	bd38      	pop	{r3, r4, r5, pc}
 801daf6:	bf00      	nop
 801daf8:	20007d40 	.word	0x20007d40

0801dafc <malloc>:
 801dafc:	4b02      	ldr	r3, [pc, #8]	@ (801db08 <malloc+0xc>)
 801dafe:	4601      	mov	r1, r0
 801db00:	6818      	ldr	r0, [r3, #0]
 801db02:	f000 b825 	b.w	801db50 <_malloc_r>
 801db06:	bf00      	nop
 801db08:	200000c0 	.word	0x200000c0

0801db0c <sbrk_aligned>:
 801db0c:	b570      	push	{r4, r5, r6, lr}
 801db0e:	4e0f      	ldr	r6, [pc, #60]	@ (801db4c <sbrk_aligned+0x40>)
 801db10:	460c      	mov	r4, r1
 801db12:	4605      	mov	r5, r0
 801db14:	6831      	ldr	r1, [r6, #0]
 801db16:	b911      	cbnz	r1, 801db1e <sbrk_aligned+0x12>
 801db18:	f000 fe4c 	bl	801e7b4 <_sbrk_r>
 801db1c:	6030      	str	r0, [r6, #0]
 801db1e:	4621      	mov	r1, r4
 801db20:	4628      	mov	r0, r5
 801db22:	f000 fe47 	bl	801e7b4 <_sbrk_r>
 801db26:	1c43      	adds	r3, r0, #1
 801db28:	d103      	bne.n	801db32 <sbrk_aligned+0x26>
 801db2a:	f04f 34ff 	mov.w	r4, #4294967295
 801db2e:	4620      	mov	r0, r4
 801db30:	bd70      	pop	{r4, r5, r6, pc}
 801db32:	1cc4      	adds	r4, r0, #3
 801db34:	f024 0403 	bic.w	r4, r4, #3
 801db38:	42a0      	cmp	r0, r4
 801db3a:	d0f8      	beq.n	801db2e <sbrk_aligned+0x22>
 801db3c:	1a21      	subs	r1, r4, r0
 801db3e:	4628      	mov	r0, r5
 801db40:	f000 fe38 	bl	801e7b4 <_sbrk_r>
 801db44:	3001      	adds	r0, #1
 801db46:	d1f2      	bne.n	801db2e <sbrk_aligned+0x22>
 801db48:	e7ef      	b.n	801db2a <sbrk_aligned+0x1e>
 801db4a:	bf00      	nop
 801db4c:	20007d3c 	.word	0x20007d3c

0801db50 <_malloc_r>:
 801db50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db54:	1ccd      	adds	r5, r1, #3
 801db56:	4606      	mov	r6, r0
 801db58:	f025 0503 	bic.w	r5, r5, #3
 801db5c:	3508      	adds	r5, #8
 801db5e:	2d0c      	cmp	r5, #12
 801db60:	bf38      	it	cc
 801db62:	250c      	movcc	r5, #12
 801db64:	2d00      	cmp	r5, #0
 801db66:	db01      	blt.n	801db6c <_malloc_r+0x1c>
 801db68:	42a9      	cmp	r1, r5
 801db6a:	d904      	bls.n	801db76 <_malloc_r+0x26>
 801db6c:	230c      	movs	r3, #12
 801db6e:	6033      	str	r3, [r6, #0]
 801db70:	2000      	movs	r0, #0
 801db72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801dc4c <_malloc_r+0xfc>
 801db7a:	f000 f869 	bl	801dc50 <__malloc_lock>
 801db7e:	f8d8 3000 	ldr.w	r3, [r8]
 801db82:	461c      	mov	r4, r3
 801db84:	bb44      	cbnz	r4, 801dbd8 <_malloc_r+0x88>
 801db86:	4629      	mov	r1, r5
 801db88:	4630      	mov	r0, r6
 801db8a:	f7ff ffbf 	bl	801db0c <sbrk_aligned>
 801db8e:	1c43      	adds	r3, r0, #1
 801db90:	4604      	mov	r4, r0
 801db92:	d158      	bne.n	801dc46 <_malloc_r+0xf6>
 801db94:	f8d8 4000 	ldr.w	r4, [r8]
 801db98:	4627      	mov	r7, r4
 801db9a:	2f00      	cmp	r7, #0
 801db9c:	d143      	bne.n	801dc26 <_malloc_r+0xd6>
 801db9e:	2c00      	cmp	r4, #0
 801dba0:	d04b      	beq.n	801dc3a <_malloc_r+0xea>
 801dba2:	6823      	ldr	r3, [r4, #0]
 801dba4:	4639      	mov	r1, r7
 801dba6:	4630      	mov	r0, r6
 801dba8:	eb04 0903 	add.w	r9, r4, r3
 801dbac:	f000 fe02 	bl	801e7b4 <_sbrk_r>
 801dbb0:	4581      	cmp	r9, r0
 801dbb2:	d142      	bne.n	801dc3a <_malloc_r+0xea>
 801dbb4:	6821      	ldr	r1, [r4, #0]
 801dbb6:	4630      	mov	r0, r6
 801dbb8:	1a6d      	subs	r5, r5, r1
 801dbba:	4629      	mov	r1, r5
 801dbbc:	f7ff ffa6 	bl	801db0c <sbrk_aligned>
 801dbc0:	3001      	adds	r0, #1
 801dbc2:	d03a      	beq.n	801dc3a <_malloc_r+0xea>
 801dbc4:	6823      	ldr	r3, [r4, #0]
 801dbc6:	442b      	add	r3, r5
 801dbc8:	6023      	str	r3, [r4, #0]
 801dbca:	f8d8 3000 	ldr.w	r3, [r8]
 801dbce:	685a      	ldr	r2, [r3, #4]
 801dbd0:	bb62      	cbnz	r2, 801dc2c <_malloc_r+0xdc>
 801dbd2:	f8c8 7000 	str.w	r7, [r8]
 801dbd6:	e00f      	b.n	801dbf8 <_malloc_r+0xa8>
 801dbd8:	6822      	ldr	r2, [r4, #0]
 801dbda:	1b52      	subs	r2, r2, r5
 801dbdc:	d420      	bmi.n	801dc20 <_malloc_r+0xd0>
 801dbde:	2a0b      	cmp	r2, #11
 801dbe0:	d917      	bls.n	801dc12 <_malloc_r+0xc2>
 801dbe2:	1961      	adds	r1, r4, r5
 801dbe4:	42a3      	cmp	r3, r4
 801dbe6:	6025      	str	r5, [r4, #0]
 801dbe8:	bf18      	it	ne
 801dbea:	6059      	strne	r1, [r3, #4]
 801dbec:	6863      	ldr	r3, [r4, #4]
 801dbee:	bf08      	it	eq
 801dbf0:	f8c8 1000 	streq.w	r1, [r8]
 801dbf4:	5162      	str	r2, [r4, r5]
 801dbf6:	604b      	str	r3, [r1, #4]
 801dbf8:	4630      	mov	r0, r6
 801dbfa:	f000 f82f 	bl	801dc5c <__malloc_unlock>
 801dbfe:	f104 000b 	add.w	r0, r4, #11
 801dc02:	1d23      	adds	r3, r4, #4
 801dc04:	f020 0007 	bic.w	r0, r0, #7
 801dc08:	1ac2      	subs	r2, r0, r3
 801dc0a:	bf1c      	itt	ne
 801dc0c:	1a1b      	subne	r3, r3, r0
 801dc0e:	50a3      	strne	r3, [r4, r2]
 801dc10:	e7af      	b.n	801db72 <_malloc_r+0x22>
 801dc12:	6862      	ldr	r2, [r4, #4]
 801dc14:	42a3      	cmp	r3, r4
 801dc16:	bf0c      	ite	eq
 801dc18:	f8c8 2000 	streq.w	r2, [r8]
 801dc1c:	605a      	strne	r2, [r3, #4]
 801dc1e:	e7eb      	b.n	801dbf8 <_malloc_r+0xa8>
 801dc20:	4623      	mov	r3, r4
 801dc22:	6864      	ldr	r4, [r4, #4]
 801dc24:	e7ae      	b.n	801db84 <_malloc_r+0x34>
 801dc26:	463c      	mov	r4, r7
 801dc28:	687f      	ldr	r7, [r7, #4]
 801dc2a:	e7b6      	b.n	801db9a <_malloc_r+0x4a>
 801dc2c:	461a      	mov	r2, r3
 801dc2e:	685b      	ldr	r3, [r3, #4]
 801dc30:	42a3      	cmp	r3, r4
 801dc32:	d1fb      	bne.n	801dc2c <_malloc_r+0xdc>
 801dc34:	2300      	movs	r3, #0
 801dc36:	6053      	str	r3, [r2, #4]
 801dc38:	e7de      	b.n	801dbf8 <_malloc_r+0xa8>
 801dc3a:	230c      	movs	r3, #12
 801dc3c:	4630      	mov	r0, r6
 801dc3e:	6033      	str	r3, [r6, #0]
 801dc40:	f000 f80c 	bl	801dc5c <__malloc_unlock>
 801dc44:	e794      	b.n	801db70 <_malloc_r+0x20>
 801dc46:	6005      	str	r5, [r0, #0]
 801dc48:	e7d6      	b.n	801dbf8 <_malloc_r+0xa8>
 801dc4a:	bf00      	nop
 801dc4c:	20007d40 	.word	0x20007d40

0801dc50 <__malloc_lock>:
 801dc50:	4801      	ldr	r0, [pc, #4]	@ (801dc58 <__malloc_lock+0x8>)
 801dc52:	f7ff b89a 	b.w	801cd8a <__retarget_lock_acquire_recursive>
 801dc56:	bf00      	nop
 801dc58:	20007d38 	.word	0x20007d38

0801dc5c <__malloc_unlock>:
 801dc5c:	4801      	ldr	r0, [pc, #4]	@ (801dc64 <__malloc_unlock+0x8>)
 801dc5e:	f7ff b895 	b.w	801cd8c <__retarget_lock_release_recursive>
 801dc62:	bf00      	nop
 801dc64:	20007d38 	.word	0x20007d38

0801dc68 <_Balloc>:
 801dc68:	b570      	push	{r4, r5, r6, lr}
 801dc6a:	69c6      	ldr	r6, [r0, #28]
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	460d      	mov	r5, r1
 801dc70:	b976      	cbnz	r6, 801dc90 <_Balloc+0x28>
 801dc72:	2010      	movs	r0, #16
 801dc74:	f7ff ff42 	bl	801dafc <malloc>
 801dc78:	4602      	mov	r2, r0
 801dc7a:	61e0      	str	r0, [r4, #28]
 801dc7c:	b920      	cbnz	r0, 801dc88 <_Balloc+0x20>
 801dc7e:	4b18      	ldr	r3, [pc, #96]	@ (801dce0 <_Balloc+0x78>)
 801dc80:	216b      	movs	r1, #107	@ 0x6b
 801dc82:	4818      	ldr	r0, [pc, #96]	@ (801dce4 <_Balloc+0x7c>)
 801dc84:	f000 fda6 	bl	801e7d4 <__assert_func>
 801dc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dc8c:	6006      	str	r6, [r0, #0]
 801dc8e:	60c6      	str	r6, [r0, #12]
 801dc90:	69e6      	ldr	r6, [r4, #28]
 801dc92:	68f3      	ldr	r3, [r6, #12]
 801dc94:	b183      	cbz	r3, 801dcb8 <_Balloc+0x50>
 801dc96:	69e3      	ldr	r3, [r4, #28]
 801dc98:	68db      	ldr	r3, [r3, #12]
 801dc9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dc9e:	b9b8      	cbnz	r0, 801dcd0 <_Balloc+0x68>
 801dca0:	2101      	movs	r1, #1
 801dca2:	4620      	mov	r0, r4
 801dca4:	fa01 f605 	lsl.w	r6, r1, r5
 801dca8:	1d72      	adds	r2, r6, #5
 801dcaa:	0092      	lsls	r2, r2, #2
 801dcac:	f000 fdb0 	bl	801e810 <_calloc_r>
 801dcb0:	b160      	cbz	r0, 801dccc <_Balloc+0x64>
 801dcb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dcb6:	e00e      	b.n	801dcd6 <_Balloc+0x6e>
 801dcb8:	2221      	movs	r2, #33	@ 0x21
 801dcba:	2104      	movs	r1, #4
 801dcbc:	4620      	mov	r0, r4
 801dcbe:	f000 fda7 	bl	801e810 <_calloc_r>
 801dcc2:	69e3      	ldr	r3, [r4, #28]
 801dcc4:	60f0      	str	r0, [r6, #12]
 801dcc6:	68db      	ldr	r3, [r3, #12]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d1e4      	bne.n	801dc96 <_Balloc+0x2e>
 801dccc:	2000      	movs	r0, #0
 801dcce:	bd70      	pop	{r4, r5, r6, pc}
 801dcd0:	6802      	ldr	r2, [r0, #0]
 801dcd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dcd6:	2300      	movs	r3, #0
 801dcd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dcdc:	e7f7      	b.n	801dcce <_Balloc+0x66>
 801dcde:	bf00      	nop
 801dce0:	0801f3a1 	.word	0x0801f3a1
 801dce4:	0801f421 	.word	0x0801f421

0801dce8 <_Bfree>:
 801dce8:	b570      	push	{r4, r5, r6, lr}
 801dcea:	69c6      	ldr	r6, [r0, #28]
 801dcec:	4605      	mov	r5, r0
 801dcee:	460c      	mov	r4, r1
 801dcf0:	b976      	cbnz	r6, 801dd10 <_Bfree+0x28>
 801dcf2:	2010      	movs	r0, #16
 801dcf4:	f7ff ff02 	bl	801dafc <malloc>
 801dcf8:	4602      	mov	r2, r0
 801dcfa:	61e8      	str	r0, [r5, #28]
 801dcfc:	b920      	cbnz	r0, 801dd08 <_Bfree+0x20>
 801dcfe:	4b09      	ldr	r3, [pc, #36]	@ (801dd24 <_Bfree+0x3c>)
 801dd00:	218f      	movs	r1, #143	@ 0x8f
 801dd02:	4809      	ldr	r0, [pc, #36]	@ (801dd28 <_Bfree+0x40>)
 801dd04:	f000 fd66 	bl	801e7d4 <__assert_func>
 801dd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dd0c:	6006      	str	r6, [r0, #0]
 801dd0e:	60c6      	str	r6, [r0, #12]
 801dd10:	b13c      	cbz	r4, 801dd22 <_Bfree+0x3a>
 801dd12:	69eb      	ldr	r3, [r5, #28]
 801dd14:	6862      	ldr	r2, [r4, #4]
 801dd16:	68db      	ldr	r3, [r3, #12]
 801dd18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dd1c:	6021      	str	r1, [r4, #0]
 801dd1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dd22:	bd70      	pop	{r4, r5, r6, pc}
 801dd24:	0801f3a1 	.word	0x0801f3a1
 801dd28:	0801f421 	.word	0x0801f421

0801dd2c <__multadd>:
 801dd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd30:	f101 0c14 	add.w	ip, r1, #20
 801dd34:	4607      	mov	r7, r0
 801dd36:	460c      	mov	r4, r1
 801dd38:	461e      	mov	r6, r3
 801dd3a:	690d      	ldr	r5, [r1, #16]
 801dd3c:	2000      	movs	r0, #0
 801dd3e:	f8dc 3000 	ldr.w	r3, [ip]
 801dd42:	3001      	adds	r0, #1
 801dd44:	b299      	uxth	r1, r3
 801dd46:	4285      	cmp	r5, r0
 801dd48:	fb02 6101 	mla	r1, r2, r1, r6
 801dd4c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dd50:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801dd54:	b289      	uxth	r1, r1
 801dd56:	fb02 3306 	mla	r3, r2, r6, r3
 801dd5a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dd5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dd62:	f84c 1b04 	str.w	r1, [ip], #4
 801dd66:	dcea      	bgt.n	801dd3e <__multadd+0x12>
 801dd68:	b30e      	cbz	r6, 801ddae <__multadd+0x82>
 801dd6a:	68a3      	ldr	r3, [r4, #8]
 801dd6c:	42ab      	cmp	r3, r5
 801dd6e:	dc19      	bgt.n	801dda4 <__multadd+0x78>
 801dd70:	6861      	ldr	r1, [r4, #4]
 801dd72:	4638      	mov	r0, r7
 801dd74:	3101      	adds	r1, #1
 801dd76:	f7ff ff77 	bl	801dc68 <_Balloc>
 801dd7a:	4680      	mov	r8, r0
 801dd7c:	b928      	cbnz	r0, 801dd8a <__multadd+0x5e>
 801dd7e:	4602      	mov	r2, r0
 801dd80:	4b0c      	ldr	r3, [pc, #48]	@ (801ddb4 <__multadd+0x88>)
 801dd82:	21ba      	movs	r1, #186	@ 0xba
 801dd84:	480c      	ldr	r0, [pc, #48]	@ (801ddb8 <__multadd+0x8c>)
 801dd86:	f000 fd25 	bl	801e7d4 <__assert_func>
 801dd8a:	6922      	ldr	r2, [r4, #16]
 801dd8c:	f104 010c 	add.w	r1, r4, #12
 801dd90:	300c      	adds	r0, #12
 801dd92:	3202      	adds	r2, #2
 801dd94:	0092      	lsls	r2, r2, #2
 801dd96:	f7ff f808 	bl	801cdaa <memcpy>
 801dd9a:	4621      	mov	r1, r4
 801dd9c:	4644      	mov	r4, r8
 801dd9e:	4638      	mov	r0, r7
 801dda0:	f7ff ffa2 	bl	801dce8 <_Bfree>
 801dda4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dda8:	3501      	adds	r5, #1
 801ddaa:	615e      	str	r6, [r3, #20]
 801ddac:	6125      	str	r5, [r4, #16]
 801ddae:	4620      	mov	r0, r4
 801ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddb4:	0801f410 	.word	0x0801f410
 801ddb8:	0801f421 	.word	0x0801f421

0801ddbc <__hi0bits>:
 801ddbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	bf36      	itet	cc
 801ddc4:	0403      	lslcc	r3, r0, #16
 801ddc6:	2000      	movcs	r0, #0
 801ddc8:	2010      	movcc	r0, #16
 801ddca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ddce:	bf3c      	itt	cc
 801ddd0:	021b      	lslcc	r3, r3, #8
 801ddd2:	3008      	addcc	r0, #8
 801ddd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ddd8:	bf3c      	itt	cc
 801ddda:	011b      	lslcc	r3, r3, #4
 801dddc:	3004      	addcc	r0, #4
 801ddde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dde2:	bf3c      	itt	cc
 801dde4:	009b      	lslcc	r3, r3, #2
 801dde6:	3002      	addcc	r0, #2
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	db05      	blt.n	801ddf8 <__hi0bits+0x3c>
 801ddec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ddf0:	f100 0001 	add.w	r0, r0, #1
 801ddf4:	bf08      	it	eq
 801ddf6:	2020      	moveq	r0, #32
 801ddf8:	4770      	bx	lr

0801ddfa <__lo0bits>:
 801ddfa:	6803      	ldr	r3, [r0, #0]
 801ddfc:	4602      	mov	r2, r0
 801ddfe:	f013 0007 	ands.w	r0, r3, #7
 801de02:	d00b      	beq.n	801de1c <__lo0bits+0x22>
 801de04:	07d9      	lsls	r1, r3, #31
 801de06:	d421      	bmi.n	801de4c <__lo0bits+0x52>
 801de08:	0798      	lsls	r0, r3, #30
 801de0a:	bf47      	ittee	mi
 801de0c:	085b      	lsrmi	r3, r3, #1
 801de0e:	2001      	movmi	r0, #1
 801de10:	089b      	lsrpl	r3, r3, #2
 801de12:	2002      	movpl	r0, #2
 801de14:	bf4c      	ite	mi
 801de16:	6013      	strmi	r3, [r2, #0]
 801de18:	6013      	strpl	r3, [r2, #0]
 801de1a:	4770      	bx	lr
 801de1c:	b299      	uxth	r1, r3
 801de1e:	b909      	cbnz	r1, 801de24 <__lo0bits+0x2a>
 801de20:	0c1b      	lsrs	r3, r3, #16
 801de22:	2010      	movs	r0, #16
 801de24:	b2d9      	uxtb	r1, r3
 801de26:	b909      	cbnz	r1, 801de2c <__lo0bits+0x32>
 801de28:	3008      	adds	r0, #8
 801de2a:	0a1b      	lsrs	r3, r3, #8
 801de2c:	0719      	lsls	r1, r3, #28
 801de2e:	bf04      	itt	eq
 801de30:	091b      	lsreq	r3, r3, #4
 801de32:	3004      	addeq	r0, #4
 801de34:	0799      	lsls	r1, r3, #30
 801de36:	bf04      	itt	eq
 801de38:	089b      	lsreq	r3, r3, #2
 801de3a:	3002      	addeq	r0, #2
 801de3c:	07d9      	lsls	r1, r3, #31
 801de3e:	d403      	bmi.n	801de48 <__lo0bits+0x4e>
 801de40:	085b      	lsrs	r3, r3, #1
 801de42:	f100 0001 	add.w	r0, r0, #1
 801de46:	d003      	beq.n	801de50 <__lo0bits+0x56>
 801de48:	6013      	str	r3, [r2, #0]
 801de4a:	4770      	bx	lr
 801de4c:	2000      	movs	r0, #0
 801de4e:	4770      	bx	lr
 801de50:	2020      	movs	r0, #32
 801de52:	4770      	bx	lr

0801de54 <__i2b>:
 801de54:	b510      	push	{r4, lr}
 801de56:	460c      	mov	r4, r1
 801de58:	2101      	movs	r1, #1
 801de5a:	f7ff ff05 	bl	801dc68 <_Balloc>
 801de5e:	4602      	mov	r2, r0
 801de60:	b928      	cbnz	r0, 801de6e <__i2b+0x1a>
 801de62:	4b05      	ldr	r3, [pc, #20]	@ (801de78 <__i2b+0x24>)
 801de64:	f240 1145 	movw	r1, #325	@ 0x145
 801de68:	4804      	ldr	r0, [pc, #16]	@ (801de7c <__i2b+0x28>)
 801de6a:	f000 fcb3 	bl	801e7d4 <__assert_func>
 801de6e:	2301      	movs	r3, #1
 801de70:	6144      	str	r4, [r0, #20]
 801de72:	6103      	str	r3, [r0, #16]
 801de74:	bd10      	pop	{r4, pc}
 801de76:	bf00      	nop
 801de78:	0801f410 	.word	0x0801f410
 801de7c:	0801f421 	.word	0x0801f421

0801de80 <__multiply>:
 801de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de84:	4614      	mov	r4, r2
 801de86:	690a      	ldr	r2, [r1, #16]
 801de88:	460f      	mov	r7, r1
 801de8a:	b085      	sub	sp, #20
 801de8c:	6923      	ldr	r3, [r4, #16]
 801de8e:	429a      	cmp	r2, r3
 801de90:	bfa2      	ittt	ge
 801de92:	4623      	movge	r3, r4
 801de94:	460c      	movge	r4, r1
 801de96:	461f      	movge	r7, r3
 801de98:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801de9c:	68a3      	ldr	r3, [r4, #8]
 801de9e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801dea2:	6861      	ldr	r1, [r4, #4]
 801dea4:	eb0a 0609 	add.w	r6, sl, r9
 801dea8:	42b3      	cmp	r3, r6
 801deaa:	bfb8      	it	lt
 801deac:	3101      	addlt	r1, #1
 801deae:	f7ff fedb 	bl	801dc68 <_Balloc>
 801deb2:	b930      	cbnz	r0, 801dec2 <__multiply+0x42>
 801deb4:	4602      	mov	r2, r0
 801deb6:	4b45      	ldr	r3, [pc, #276]	@ (801dfcc <__multiply+0x14c>)
 801deb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801debc:	4844      	ldr	r0, [pc, #272]	@ (801dfd0 <__multiply+0x150>)
 801debe:	f000 fc89 	bl	801e7d4 <__assert_func>
 801dec2:	f100 0514 	add.w	r5, r0, #20
 801dec6:	2200      	movs	r2, #0
 801dec8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801decc:	462b      	mov	r3, r5
 801dece:	4543      	cmp	r3, r8
 801ded0:	d321      	bcc.n	801df16 <__multiply+0x96>
 801ded2:	f107 0114 	add.w	r1, r7, #20
 801ded6:	f104 0214 	add.w	r2, r4, #20
 801deda:	f104 0715 	add.w	r7, r4, #21
 801dede:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801dee2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801dee6:	9302      	str	r3, [sp, #8]
 801dee8:	1b13      	subs	r3, r2, r4
 801deea:	3b15      	subs	r3, #21
 801deec:	f023 0303 	bic.w	r3, r3, #3
 801def0:	3304      	adds	r3, #4
 801def2:	42ba      	cmp	r2, r7
 801def4:	bf38      	it	cc
 801def6:	2304      	movcc	r3, #4
 801def8:	9301      	str	r3, [sp, #4]
 801defa:	9b02      	ldr	r3, [sp, #8]
 801defc:	9103      	str	r1, [sp, #12]
 801defe:	428b      	cmp	r3, r1
 801df00:	d80c      	bhi.n	801df1c <__multiply+0x9c>
 801df02:	2e00      	cmp	r6, #0
 801df04:	dd03      	ble.n	801df0e <__multiply+0x8e>
 801df06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d05b      	beq.n	801dfc6 <__multiply+0x146>
 801df0e:	6106      	str	r6, [r0, #16]
 801df10:	b005      	add	sp, #20
 801df12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df16:	f843 2b04 	str.w	r2, [r3], #4
 801df1a:	e7d8      	b.n	801dece <__multiply+0x4e>
 801df1c:	f8b1 a000 	ldrh.w	sl, [r1]
 801df20:	f1ba 0f00 	cmp.w	sl, #0
 801df24:	d024      	beq.n	801df70 <__multiply+0xf0>
 801df26:	f104 0e14 	add.w	lr, r4, #20
 801df2a:	46a9      	mov	r9, r5
 801df2c:	f04f 0c00 	mov.w	ip, #0
 801df30:	f85e 7b04 	ldr.w	r7, [lr], #4
 801df34:	f8d9 3000 	ldr.w	r3, [r9]
 801df38:	fa1f fb87 	uxth.w	fp, r7
 801df3c:	4572      	cmp	r2, lr
 801df3e:	b29b      	uxth	r3, r3
 801df40:	fb0a 330b 	mla	r3, sl, fp, r3
 801df44:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801df48:	f8d9 7000 	ldr.w	r7, [r9]
 801df4c:	4463      	add	r3, ip
 801df4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801df52:	fb0a c70b 	mla	r7, sl, fp, ip
 801df56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801df5a:	b29b      	uxth	r3, r3
 801df5c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801df60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801df64:	f849 3b04 	str.w	r3, [r9], #4
 801df68:	d8e2      	bhi.n	801df30 <__multiply+0xb0>
 801df6a:	9b01      	ldr	r3, [sp, #4]
 801df6c:	f845 c003 	str.w	ip, [r5, r3]
 801df70:	9b03      	ldr	r3, [sp, #12]
 801df72:	3104      	adds	r1, #4
 801df74:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801df78:	f1b9 0f00 	cmp.w	r9, #0
 801df7c:	d021      	beq.n	801dfc2 <__multiply+0x142>
 801df7e:	682b      	ldr	r3, [r5, #0]
 801df80:	f104 0c14 	add.w	ip, r4, #20
 801df84:	46ae      	mov	lr, r5
 801df86:	f04f 0a00 	mov.w	sl, #0
 801df8a:	f8bc b000 	ldrh.w	fp, [ip]
 801df8e:	b29b      	uxth	r3, r3
 801df90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801df94:	fb09 770b 	mla	r7, r9, fp, r7
 801df98:	4457      	add	r7, sl
 801df9a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801df9e:	f84e 3b04 	str.w	r3, [lr], #4
 801dfa2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dfa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dfaa:	f8be 3000 	ldrh.w	r3, [lr]
 801dfae:	4562      	cmp	r2, ip
 801dfb0:	fb09 330a 	mla	r3, r9, sl, r3
 801dfb4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801dfb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dfbc:	d8e5      	bhi.n	801df8a <__multiply+0x10a>
 801dfbe:	9f01      	ldr	r7, [sp, #4]
 801dfc0:	51eb      	str	r3, [r5, r7]
 801dfc2:	3504      	adds	r5, #4
 801dfc4:	e799      	b.n	801defa <__multiply+0x7a>
 801dfc6:	3e01      	subs	r6, #1
 801dfc8:	e79b      	b.n	801df02 <__multiply+0x82>
 801dfca:	bf00      	nop
 801dfcc:	0801f410 	.word	0x0801f410
 801dfd0:	0801f421 	.word	0x0801f421

0801dfd4 <__pow5mult>:
 801dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfd8:	4615      	mov	r5, r2
 801dfda:	f012 0203 	ands.w	r2, r2, #3
 801dfde:	4607      	mov	r7, r0
 801dfe0:	460e      	mov	r6, r1
 801dfe2:	d007      	beq.n	801dff4 <__pow5mult+0x20>
 801dfe4:	3a01      	subs	r2, #1
 801dfe6:	4c25      	ldr	r4, [pc, #148]	@ (801e07c <__pow5mult+0xa8>)
 801dfe8:	2300      	movs	r3, #0
 801dfea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dfee:	f7ff fe9d 	bl	801dd2c <__multadd>
 801dff2:	4606      	mov	r6, r0
 801dff4:	10ad      	asrs	r5, r5, #2
 801dff6:	d03d      	beq.n	801e074 <__pow5mult+0xa0>
 801dff8:	69fc      	ldr	r4, [r7, #28]
 801dffa:	b97c      	cbnz	r4, 801e01c <__pow5mult+0x48>
 801dffc:	2010      	movs	r0, #16
 801dffe:	f7ff fd7d 	bl	801dafc <malloc>
 801e002:	4602      	mov	r2, r0
 801e004:	61f8      	str	r0, [r7, #28]
 801e006:	b928      	cbnz	r0, 801e014 <__pow5mult+0x40>
 801e008:	4b1d      	ldr	r3, [pc, #116]	@ (801e080 <__pow5mult+0xac>)
 801e00a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e00e:	481d      	ldr	r0, [pc, #116]	@ (801e084 <__pow5mult+0xb0>)
 801e010:	f000 fbe0 	bl	801e7d4 <__assert_func>
 801e014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e018:	6004      	str	r4, [r0, #0]
 801e01a:	60c4      	str	r4, [r0, #12]
 801e01c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e024:	b94c      	cbnz	r4, 801e03a <__pow5mult+0x66>
 801e026:	f240 2171 	movw	r1, #625	@ 0x271
 801e02a:	4638      	mov	r0, r7
 801e02c:	f7ff ff12 	bl	801de54 <__i2b>
 801e030:	2300      	movs	r3, #0
 801e032:	4604      	mov	r4, r0
 801e034:	f8c8 0008 	str.w	r0, [r8, #8]
 801e038:	6003      	str	r3, [r0, #0]
 801e03a:	f04f 0900 	mov.w	r9, #0
 801e03e:	07eb      	lsls	r3, r5, #31
 801e040:	d50a      	bpl.n	801e058 <__pow5mult+0x84>
 801e042:	4631      	mov	r1, r6
 801e044:	4622      	mov	r2, r4
 801e046:	4638      	mov	r0, r7
 801e048:	f7ff ff1a 	bl	801de80 <__multiply>
 801e04c:	4680      	mov	r8, r0
 801e04e:	4631      	mov	r1, r6
 801e050:	4638      	mov	r0, r7
 801e052:	4646      	mov	r6, r8
 801e054:	f7ff fe48 	bl	801dce8 <_Bfree>
 801e058:	106d      	asrs	r5, r5, #1
 801e05a:	d00b      	beq.n	801e074 <__pow5mult+0xa0>
 801e05c:	6820      	ldr	r0, [r4, #0]
 801e05e:	b938      	cbnz	r0, 801e070 <__pow5mult+0x9c>
 801e060:	4622      	mov	r2, r4
 801e062:	4621      	mov	r1, r4
 801e064:	4638      	mov	r0, r7
 801e066:	f7ff ff0b 	bl	801de80 <__multiply>
 801e06a:	6020      	str	r0, [r4, #0]
 801e06c:	f8c0 9000 	str.w	r9, [r0]
 801e070:	4604      	mov	r4, r0
 801e072:	e7e4      	b.n	801e03e <__pow5mult+0x6a>
 801e074:	4630      	mov	r0, r6
 801e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e07a:	bf00      	nop
 801e07c:	0801f47c 	.word	0x0801f47c
 801e080:	0801f3a1 	.word	0x0801f3a1
 801e084:	0801f421 	.word	0x0801f421

0801e088 <__lshift>:
 801e088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e08c:	460c      	mov	r4, r1
 801e08e:	4607      	mov	r7, r0
 801e090:	4691      	mov	r9, r2
 801e092:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e096:	6923      	ldr	r3, [r4, #16]
 801e098:	6849      	ldr	r1, [r1, #4]
 801e09a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e09e:	68a3      	ldr	r3, [r4, #8]
 801e0a0:	f108 0601 	add.w	r6, r8, #1
 801e0a4:	42b3      	cmp	r3, r6
 801e0a6:	db0b      	blt.n	801e0c0 <__lshift+0x38>
 801e0a8:	4638      	mov	r0, r7
 801e0aa:	f7ff fddd 	bl	801dc68 <_Balloc>
 801e0ae:	4605      	mov	r5, r0
 801e0b0:	b948      	cbnz	r0, 801e0c6 <__lshift+0x3e>
 801e0b2:	4602      	mov	r2, r0
 801e0b4:	4b28      	ldr	r3, [pc, #160]	@ (801e158 <__lshift+0xd0>)
 801e0b6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e0ba:	4828      	ldr	r0, [pc, #160]	@ (801e15c <__lshift+0xd4>)
 801e0bc:	f000 fb8a 	bl	801e7d4 <__assert_func>
 801e0c0:	3101      	adds	r1, #1
 801e0c2:	005b      	lsls	r3, r3, #1
 801e0c4:	e7ee      	b.n	801e0a4 <__lshift+0x1c>
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	f100 0114 	add.w	r1, r0, #20
 801e0cc:	f100 0210 	add.w	r2, r0, #16
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	4553      	cmp	r3, sl
 801e0d4:	db33      	blt.n	801e13e <__lshift+0xb6>
 801e0d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e0da:	f104 0314 	add.w	r3, r4, #20
 801e0de:	6920      	ldr	r0, [r4, #16]
 801e0e0:	f019 091f 	ands.w	r9, r9, #31
 801e0e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e0e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e0ec:	d02b      	beq.n	801e146 <__lshift+0xbe>
 801e0ee:	f1c9 0e20 	rsb	lr, r9, #32
 801e0f2:	468a      	mov	sl, r1
 801e0f4:	2200      	movs	r2, #0
 801e0f6:	6818      	ldr	r0, [r3, #0]
 801e0f8:	fa00 f009 	lsl.w	r0, r0, r9
 801e0fc:	4310      	orrs	r0, r2
 801e0fe:	f84a 0b04 	str.w	r0, [sl], #4
 801e102:	f853 2b04 	ldr.w	r2, [r3], #4
 801e106:	459c      	cmp	ip, r3
 801e108:	fa22 f20e 	lsr.w	r2, r2, lr
 801e10c:	d8f3      	bhi.n	801e0f6 <__lshift+0x6e>
 801e10e:	ebac 0304 	sub.w	r3, ip, r4
 801e112:	f104 0015 	add.w	r0, r4, #21
 801e116:	3b15      	subs	r3, #21
 801e118:	f023 0303 	bic.w	r3, r3, #3
 801e11c:	3304      	adds	r3, #4
 801e11e:	4584      	cmp	ip, r0
 801e120:	bf38      	it	cc
 801e122:	2304      	movcc	r3, #4
 801e124:	50ca      	str	r2, [r1, r3]
 801e126:	b10a      	cbz	r2, 801e12c <__lshift+0xa4>
 801e128:	f108 0602 	add.w	r6, r8, #2
 801e12c:	3e01      	subs	r6, #1
 801e12e:	4638      	mov	r0, r7
 801e130:	4621      	mov	r1, r4
 801e132:	612e      	str	r6, [r5, #16]
 801e134:	f7ff fdd8 	bl	801dce8 <_Bfree>
 801e138:	4628      	mov	r0, r5
 801e13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e13e:	3301      	adds	r3, #1
 801e140:	f842 0f04 	str.w	r0, [r2, #4]!
 801e144:	e7c5      	b.n	801e0d2 <__lshift+0x4a>
 801e146:	3904      	subs	r1, #4
 801e148:	f853 2b04 	ldr.w	r2, [r3], #4
 801e14c:	459c      	cmp	ip, r3
 801e14e:	f841 2f04 	str.w	r2, [r1, #4]!
 801e152:	d8f9      	bhi.n	801e148 <__lshift+0xc0>
 801e154:	e7ea      	b.n	801e12c <__lshift+0xa4>
 801e156:	bf00      	nop
 801e158:	0801f410 	.word	0x0801f410
 801e15c:	0801f421 	.word	0x0801f421

0801e160 <__mcmp>:
 801e160:	4603      	mov	r3, r0
 801e162:	690a      	ldr	r2, [r1, #16]
 801e164:	6900      	ldr	r0, [r0, #16]
 801e166:	1a80      	subs	r0, r0, r2
 801e168:	b530      	push	{r4, r5, lr}
 801e16a:	d10e      	bne.n	801e18a <__mcmp+0x2a>
 801e16c:	3314      	adds	r3, #20
 801e16e:	3114      	adds	r1, #20
 801e170:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e174:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e17c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e180:	4295      	cmp	r5, r2
 801e182:	d003      	beq.n	801e18c <__mcmp+0x2c>
 801e184:	d205      	bcs.n	801e192 <__mcmp+0x32>
 801e186:	f04f 30ff 	mov.w	r0, #4294967295
 801e18a:	bd30      	pop	{r4, r5, pc}
 801e18c:	42a3      	cmp	r3, r4
 801e18e:	d3f3      	bcc.n	801e178 <__mcmp+0x18>
 801e190:	e7fb      	b.n	801e18a <__mcmp+0x2a>
 801e192:	2001      	movs	r0, #1
 801e194:	e7f9      	b.n	801e18a <__mcmp+0x2a>
	...

0801e198 <__mdiff>:
 801e198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e19c:	4689      	mov	r9, r1
 801e19e:	4606      	mov	r6, r0
 801e1a0:	4611      	mov	r1, r2
 801e1a2:	4614      	mov	r4, r2
 801e1a4:	4648      	mov	r0, r9
 801e1a6:	f7ff ffdb 	bl	801e160 <__mcmp>
 801e1aa:	1e05      	subs	r5, r0, #0
 801e1ac:	d112      	bne.n	801e1d4 <__mdiff+0x3c>
 801e1ae:	4629      	mov	r1, r5
 801e1b0:	4630      	mov	r0, r6
 801e1b2:	f7ff fd59 	bl	801dc68 <_Balloc>
 801e1b6:	4602      	mov	r2, r0
 801e1b8:	b928      	cbnz	r0, 801e1c6 <__mdiff+0x2e>
 801e1ba:	4b41      	ldr	r3, [pc, #260]	@ (801e2c0 <__mdiff+0x128>)
 801e1bc:	f240 2137 	movw	r1, #567	@ 0x237
 801e1c0:	4840      	ldr	r0, [pc, #256]	@ (801e2c4 <__mdiff+0x12c>)
 801e1c2:	f000 fb07 	bl	801e7d4 <__assert_func>
 801e1c6:	2301      	movs	r3, #1
 801e1c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e1cc:	4610      	mov	r0, r2
 801e1ce:	b003      	add	sp, #12
 801e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1d4:	bfbc      	itt	lt
 801e1d6:	464b      	movlt	r3, r9
 801e1d8:	46a1      	movlt	r9, r4
 801e1da:	4630      	mov	r0, r6
 801e1dc:	bfb8      	it	lt
 801e1de:	2501      	movlt	r5, #1
 801e1e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e1e4:	bfb4      	ite	lt
 801e1e6:	461c      	movlt	r4, r3
 801e1e8:	2500      	movge	r5, #0
 801e1ea:	f7ff fd3d 	bl	801dc68 <_Balloc>
 801e1ee:	4602      	mov	r2, r0
 801e1f0:	b918      	cbnz	r0, 801e1fa <__mdiff+0x62>
 801e1f2:	4b33      	ldr	r3, [pc, #204]	@ (801e2c0 <__mdiff+0x128>)
 801e1f4:	f240 2145 	movw	r1, #581	@ 0x245
 801e1f8:	e7e2      	b.n	801e1c0 <__mdiff+0x28>
 801e1fa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e1fe:	f104 0e14 	add.w	lr, r4, #20
 801e202:	6926      	ldr	r6, [r4, #16]
 801e204:	f100 0b14 	add.w	fp, r0, #20
 801e208:	60c5      	str	r5, [r0, #12]
 801e20a:	f109 0514 	add.w	r5, r9, #20
 801e20e:	f109 0310 	add.w	r3, r9, #16
 801e212:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e216:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e21a:	46d9      	mov	r9, fp
 801e21c:	f04f 0c00 	mov.w	ip, #0
 801e220:	9301      	str	r3, [sp, #4]
 801e222:	9b01      	ldr	r3, [sp, #4]
 801e224:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e228:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e22c:	4576      	cmp	r6, lr
 801e22e:	9301      	str	r3, [sp, #4]
 801e230:	fa1f f38a 	uxth.w	r3, sl
 801e234:	4619      	mov	r1, r3
 801e236:	b283      	uxth	r3, r0
 801e238:	ea4f 4010 	mov.w	r0, r0, lsr #16
 801e23c:	eba1 0303 	sub.w	r3, r1, r3
 801e240:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e244:	4463      	add	r3, ip
 801e246:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e24a:	b29b      	uxth	r3, r3
 801e24c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e250:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e254:	f849 3b04 	str.w	r3, [r9], #4
 801e258:	d8e3      	bhi.n	801e222 <__mdiff+0x8a>
 801e25a:	1b33      	subs	r3, r6, r4
 801e25c:	3415      	adds	r4, #21
 801e25e:	3b15      	subs	r3, #21
 801e260:	f023 0303 	bic.w	r3, r3, #3
 801e264:	3304      	adds	r3, #4
 801e266:	42a6      	cmp	r6, r4
 801e268:	bf38      	it	cc
 801e26a:	2304      	movcc	r3, #4
 801e26c:	441d      	add	r5, r3
 801e26e:	445b      	add	r3, fp
 801e270:	462c      	mov	r4, r5
 801e272:	461e      	mov	r6, r3
 801e274:	4544      	cmp	r4, r8
 801e276:	d30e      	bcc.n	801e296 <__mdiff+0xfe>
 801e278:	f108 0103 	add.w	r1, r8, #3
 801e27c:	1b49      	subs	r1, r1, r5
 801e27e:	3d03      	subs	r5, #3
 801e280:	f021 0103 	bic.w	r1, r1, #3
 801e284:	45a8      	cmp	r8, r5
 801e286:	bf38      	it	cc
 801e288:	2100      	movcc	r1, #0
 801e28a:	440b      	add	r3, r1
 801e28c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e290:	b199      	cbz	r1, 801e2ba <__mdiff+0x122>
 801e292:	6117      	str	r7, [r2, #16]
 801e294:	e79a      	b.n	801e1cc <__mdiff+0x34>
 801e296:	f854 1b04 	ldr.w	r1, [r4], #4
 801e29a:	46e6      	mov	lr, ip
 801e29c:	fa1f fc81 	uxth.w	ip, r1
 801e2a0:	0c08      	lsrs	r0, r1, #16
 801e2a2:	4471      	add	r1, lr
 801e2a4:	44f4      	add	ip, lr
 801e2a6:	b289      	uxth	r1, r1
 801e2a8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e2ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e2b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e2b4:	f846 1b04 	str.w	r1, [r6], #4
 801e2b8:	e7dc      	b.n	801e274 <__mdiff+0xdc>
 801e2ba:	3f01      	subs	r7, #1
 801e2bc:	e7e6      	b.n	801e28c <__mdiff+0xf4>
 801e2be:	bf00      	nop
 801e2c0:	0801f410 	.word	0x0801f410
 801e2c4:	0801f421 	.word	0x0801f421

0801e2c8 <__d2b>:
 801e2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e2cc:	460f      	mov	r7, r1
 801e2ce:	2101      	movs	r1, #1
 801e2d0:	4616      	mov	r6, r2
 801e2d2:	ec59 8b10 	vmov	r8, r9, d0
 801e2d6:	f7ff fcc7 	bl	801dc68 <_Balloc>
 801e2da:	4604      	mov	r4, r0
 801e2dc:	b930      	cbnz	r0, 801e2ec <__d2b+0x24>
 801e2de:	4602      	mov	r2, r0
 801e2e0:	4b23      	ldr	r3, [pc, #140]	@ (801e370 <__d2b+0xa8>)
 801e2e2:	f240 310f 	movw	r1, #783	@ 0x30f
 801e2e6:	4823      	ldr	r0, [pc, #140]	@ (801e374 <__d2b+0xac>)
 801e2e8:	f000 fa74 	bl	801e7d4 <__assert_func>
 801e2ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e2f4:	b10d      	cbz	r5, 801e2fa <__d2b+0x32>
 801e2f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e2fa:	9301      	str	r3, [sp, #4]
 801e2fc:	f1b8 0300 	subs.w	r3, r8, #0
 801e300:	d023      	beq.n	801e34a <__d2b+0x82>
 801e302:	4668      	mov	r0, sp
 801e304:	9300      	str	r3, [sp, #0]
 801e306:	f7ff fd78 	bl	801ddfa <__lo0bits>
 801e30a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e30e:	b1d0      	cbz	r0, 801e346 <__d2b+0x7e>
 801e310:	f1c0 0320 	rsb	r3, r0, #32
 801e314:	fa02 f303 	lsl.w	r3, r2, r3
 801e318:	40c2      	lsrs	r2, r0
 801e31a:	430b      	orrs	r3, r1
 801e31c:	9201      	str	r2, [sp, #4]
 801e31e:	6163      	str	r3, [r4, #20]
 801e320:	9b01      	ldr	r3, [sp, #4]
 801e322:	2b00      	cmp	r3, #0
 801e324:	61a3      	str	r3, [r4, #24]
 801e326:	bf0c      	ite	eq
 801e328:	2201      	moveq	r2, #1
 801e32a:	2202      	movne	r2, #2
 801e32c:	6122      	str	r2, [r4, #16]
 801e32e:	b1a5      	cbz	r5, 801e35a <__d2b+0x92>
 801e330:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e334:	4405      	add	r5, r0
 801e336:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e33a:	603d      	str	r5, [r7, #0]
 801e33c:	6030      	str	r0, [r6, #0]
 801e33e:	4620      	mov	r0, r4
 801e340:	b003      	add	sp, #12
 801e342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e346:	6161      	str	r1, [r4, #20]
 801e348:	e7ea      	b.n	801e320 <__d2b+0x58>
 801e34a:	a801      	add	r0, sp, #4
 801e34c:	f7ff fd55 	bl	801ddfa <__lo0bits>
 801e350:	9b01      	ldr	r3, [sp, #4]
 801e352:	3020      	adds	r0, #32
 801e354:	2201      	movs	r2, #1
 801e356:	6163      	str	r3, [r4, #20]
 801e358:	e7e8      	b.n	801e32c <__d2b+0x64>
 801e35a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e35e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e362:	6038      	str	r0, [r7, #0]
 801e364:	6918      	ldr	r0, [r3, #16]
 801e366:	f7ff fd29 	bl	801ddbc <__hi0bits>
 801e36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e36e:	e7e5      	b.n	801e33c <__d2b+0x74>
 801e370:	0801f410 	.word	0x0801f410
 801e374:	0801f421 	.word	0x0801f421

0801e378 <__ssputs_r>:
 801e378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e37c:	461f      	mov	r7, r3
 801e37e:	688e      	ldr	r6, [r1, #8]
 801e380:	4682      	mov	sl, r0
 801e382:	460c      	mov	r4, r1
 801e384:	42be      	cmp	r6, r7
 801e386:	4690      	mov	r8, r2
 801e388:	680b      	ldr	r3, [r1, #0]
 801e38a:	d82d      	bhi.n	801e3e8 <__ssputs_r+0x70>
 801e38c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e390:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e394:	d026      	beq.n	801e3e4 <__ssputs_r+0x6c>
 801e396:	6965      	ldr	r5, [r4, #20]
 801e398:	6909      	ldr	r1, [r1, #16]
 801e39a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e39e:	eba3 0901 	sub.w	r9, r3, r1
 801e3a2:	1c7b      	adds	r3, r7, #1
 801e3a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e3a8:	444b      	add	r3, r9
 801e3aa:	106d      	asrs	r5, r5, #1
 801e3ac:	429d      	cmp	r5, r3
 801e3ae:	bf38      	it	cc
 801e3b0:	461d      	movcc	r5, r3
 801e3b2:	0553      	lsls	r3, r2, #21
 801e3b4:	d527      	bpl.n	801e406 <__ssputs_r+0x8e>
 801e3b6:	4629      	mov	r1, r5
 801e3b8:	f7ff fbca 	bl	801db50 <_malloc_r>
 801e3bc:	4606      	mov	r6, r0
 801e3be:	b360      	cbz	r0, 801e41a <__ssputs_r+0xa2>
 801e3c0:	464a      	mov	r2, r9
 801e3c2:	6921      	ldr	r1, [r4, #16]
 801e3c4:	f7fe fcf1 	bl	801cdaa <memcpy>
 801e3c8:	89a3      	ldrh	r3, [r4, #12]
 801e3ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e3d2:	81a3      	strh	r3, [r4, #12]
 801e3d4:	6126      	str	r6, [r4, #16]
 801e3d6:	444e      	add	r6, r9
 801e3d8:	6165      	str	r5, [r4, #20]
 801e3da:	eba5 0509 	sub.w	r5, r5, r9
 801e3de:	6026      	str	r6, [r4, #0]
 801e3e0:	463e      	mov	r6, r7
 801e3e2:	60a5      	str	r5, [r4, #8]
 801e3e4:	42be      	cmp	r6, r7
 801e3e6:	d900      	bls.n	801e3ea <__ssputs_r+0x72>
 801e3e8:	463e      	mov	r6, r7
 801e3ea:	4632      	mov	r2, r6
 801e3ec:	4641      	mov	r1, r8
 801e3ee:	6820      	ldr	r0, [r4, #0]
 801e3f0:	f000 f9c6 	bl	801e780 <memmove>
 801e3f4:	68a3      	ldr	r3, [r4, #8]
 801e3f6:	2000      	movs	r0, #0
 801e3f8:	1b9b      	subs	r3, r3, r6
 801e3fa:	60a3      	str	r3, [r4, #8]
 801e3fc:	6823      	ldr	r3, [r4, #0]
 801e3fe:	4433      	add	r3, r6
 801e400:	6023      	str	r3, [r4, #0]
 801e402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e406:	462a      	mov	r2, r5
 801e408:	f000 fa28 	bl	801e85c <_realloc_r>
 801e40c:	4606      	mov	r6, r0
 801e40e:	2800      	cmp	r0, #0
 801e410:	d1e0      	bne.n	801e3d4 <__ssputs_r+0x5c>
 801e412:	6921      	ldr	r1, [r4, #16]
 801e414:	4650      	mov	r0, sl
 801e416:	f7ff fb27 	bl	801da68 <_free_r>
 801e41a:	230c      	movs	r3, #12
 801e41c:	f04f 30ff 	mov.w	r0, #4294967295
 801e420:	f8ca 3000 	str.w	r3, [sl]
 801e424:	89a3      	ldrh	r3, [r4, #12]
 801e426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e42a:	81a3      	strh	r3, [r4, #12]
 801e42c:	e7e9      	b.n	801e402 <__ssputs_r+0x8a>
	...

0801e430 <_svfiprintf_r>:
 801e430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e434:	4698      	mov	r8, r3
 801e436:	898b      	ldrh	r3, [r1, #12]
 801e438:	b09d      	sub	sp, #116	@ 0x74
 801e43a:	4607      	mov	r7, r0
 801e43c:	061b      	lsls	r3, r3, #24
 801e43e:	460d      	mov	r5, r1
 801e440:	4614      	mov	r4, r2
 801e442:	d510      	bpl.n	801e466 <_svfiprintf_r+0x36>
 801e444:	690b      	ldr	r3, [r1, #16]
 801e446:	b973      	cbnz	r3, 801e466 <_svfiprintf_r+0x36>
 801e448:	2140      	movs	r1, #64	@ 0x40
 801e44a:	f7ff fb81 	bl	801db50 <_malloc_r>
 801e44e:	6028      	str	r0, [r5, #0]
 801e450:	6128      	str	r0, [r5, #16]
 801e452:	b930      	cbnz	r0, 801e462 <_svfiprintf_r+0x32>
 801e454:	230c      	movs	r3, #12
 801e456:	603b      	str	r3, [r7, #0]
 801e458:	f04f 30ff 	mov.w	r0, #4294967295
 801e45c:	b01d      	add	sp, #116	@ 0x74
 801e45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e462:	2340      	movs	r3, #64	@ 0x40
 801e464:	616b      	str	r3, [r5, #20]
 801e466:	2300      	movs	r3, #0
 801e468:	f8cd 800c 	str.w	r8, [sp, #12]
 801e46c:	f04f 0901 	mov.w	r9, #1
 801e470:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801e614 <_svfiprintf_r+0x1e4>
 801e474:	9309      	str	r3, [sp, #36]	@ 0x24
 801e476:	2320      	movs	r3, #32
 801e478:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e47c:	2330      	movs	r3, #48	@ 0x30
 801e47e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e482:	4623      	mov	r3, r4
 801e484:	469a      	mov	sl, r3
 801e486:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e48a:	b10a      	cbz	r2, 801e490 <_svfiprintf_r+0x60>
 801e48c:	2a25      	cmp	r2, #37	@ 0x25
 801e48e:	d1f9      	bne.n	801e484 <_svfiprintf_r+0x54>
 801e490:	ebba 0b04 	subs.w	fp, sl, r4
 801e494:	d00b      	beq.n	801e4ae <_svfiprintf_r+0x7e>
 801e496:	465b      	mov	r3, fp
 801e498:	4622      	mov	r2, r4
 801e49a:	4629      	mov	r1, r5
 801e49c:	4638      	mov	r0, r7
 801e49e:	f7ff ff6b 	bl	801e378 <__ssputs_r>
 801e4a2:	3001      	adds	r0, #1
 801e4a4:	f000 80a7 	beq.w	801e5f6 <_svfiprintf_r+0x1c6>
 801e4a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e4aa:	445a      	add	r2, fp
 801e4ac:	9209      	str	r2, [sp, #36]	@ 0x24
 801e4ae:	f89a 3000 	ldrb.w	r3, [sl]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	f000 809f 	beq.w	801e5f6 <_svfiprintf_r+0x1c6>
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	f04f 32ff 	mov.w	r2, #4294967295
 801e4be:	f10a 0a01 	add.w	sl, sl, #1
 801e4c2:	9304      	str	r3, [sp, #16]
 801e4c4:	9307      	str	r3, [sp, #28]
 801e4c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e4ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801e4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4d0:	4654      	mov	r4, sl
 801e4d2:	2205      	movs	r2, #5
 801e4d4:	484f      	ldr	r0, [pc, #316]	@ (801e614 <_svfiprintf_r+0x1e4>)
 801e4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4da:	f7fe fc58 	bl	801cd8e <memchr>
 801e4de:	9a04      	ldr	r2, [sp, #16]
 801e4e0:	b9d8      	cbnz	r0, 801e51a <_svfiprintf_r+0xea>
 801e4e2:	06d0      	lsls	r0, r2, #27
 801e4e4:	bf44      	itt	mi
 801e4e6:	2320      	movmi	r3, #32
 801e4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e4ec:	0711      	lsls	r1, r2, #28
 801e4ee:	bf44      	itt	mi
 801e4f0:	232b      	movmi	r3, #43	@ 0x2b
 801e4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e4f6:	f89a 3000 	ldrb.w	r3, [sl]
 801e4fa:	2b2a      	cmp	r3, #42	@ 0x2a
 801e4fc:	d015      	beq.n	801e52a <_svfiprintf_r+0xfa>
 801e4fe:	9a07      	ldr	r2, [sp, #28]
 801e500:	4654      	mov	r4, sl
 801e502:	2000      	movs	r0, #0
 801e504:	f04f 0c0a 	mov.w	ip, #10
 801e508:	4621      	mov	r1, r4
 801e50a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e50e:	3b30      	subs	r3, #48	@ 0x30
 801e510:	2b09      	cmp	r3, #9
 801e512:	d94b      	bls.n	801e5ac <_svfiprintf_r+0x17c>
 801e514:	b1b0      	cbz	r0, 801e544 <_svfiprintf_r+0x114>
 801e516:	9207      	str	r2, [sp, #28]
 801e518:	e014      	b.n	801e544 <_svfiprintf_r+0x114>
 801e51a:	eba0 0308 	sub.w	r3, r0, r8
 801e51e:	46a2      	mov	sl, r4
 801e520:	fa09 f303 	lsl.w	r3, r9, r3
 801e524:	4313      	orrs	r3, r2
 801e526:	9304      	str	r3, [sp, #16]
 801e528:	e7d2      	b.n	801e4d0 <_svfiprintf_r+0xa0>
 801e52a:	9b03      	ldr	r3, [sp, #12]
 801e52c:	1d19      	adds	r1, r3, #4
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	2b00      	cmp	r3, #0
 801e532:	9103      	str	r1, [sp, #12]
 801e534:	bfbb      	ittet	lt
 801e536:	425b      	neglt	r3, r3
 801e538:	f042 0202 	orrlt.w	r2, r2, #2
 801e53c:	9307      	strge	r3, [sp, #28]
 801e53e:	9307      	strlt	r3, [sp, #28]
 801e540:	bfb8      	it	lt
 801e542:	9204      	strlt	r2, [sp, #16]
 801e544:	7823      	ldrb	r3, [r4, #0]
 801e546:	2b2e      	cmp	r3, #46	@ 0x2e
 801e548:	d10a      	bne.n	801e560 <_svfiprintf_r+0x130>
 801e54a:	7863      	ldrb	r3, [r4, #1]
 801e54c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e54e:	d132      	bne.n	801e5b6 <_svfiprintf_r+0x186>
 801e550:	9b03      	ldr	r3, [sp, #12]
 801e552:	3402      	adds	r4, #2
 801e554:	1d1a      	adds	r2, r3, #4
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e55c:	9203      	str	r2, [sp, #12]
 801e55e:	9305      	str	r3, [sp, #20]
 801e560:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e624 <_svfiprintf_r+0x1f4>
 801e564:	2203      	movs	r2, #3
 801e566:	7821      	ldrb	r1, [r4, #0]
 801e568:	4650      	mov	r0, sl
 801e56a:	f7fe fc10 	bl	801cd8e <memchr>
 801e56e:	b138      	cbz	r0, 801e580 <_svfiprintf_r+0x150>
 801e570:	eba0 000a 	sub.w	r0, r0, sl
 801e574:	2240      	movs	r2, #64	@ 0x40
 801e576:	9b04      	ldr	r3, [sp, #16]
 801e578:	3401      	adds	r4, #1
 801e57a:	4082      	lsls	r2, r0
 801e57c:	4313      	orrs	r3, r2
 801e57e:	9304      	str	r3, [sp, #16]
 801e580:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e584:	2206      	movs	r2, #6
 801e586:	4824      	ldr	r0, [pc, #144]	@ (801e618 <_svfiprintf_r+0x1e8>)
 801e588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e58c:	f7fe fbff 	bl	801cd8e <memchr>
 801e590:	2800      	cmp	r0, #0
 801e592:	d036      	beq.n	801e602 <_svfiprintf_r+0x1d2>
 801e594:	4b21      	ldr	r3, [pc, #132]	@ (801e61c <_svfiprintf_r+0x1ec>)
 801e596:	bb1b      	cbnz	r3, 801e5e0 <_svfiprintf_r+0x1b0>
 801e598:	9b03      	ldr	r3, [sp, #12]
 801e59a:	3307      	adds	r3, #7
 801e59c:	f023 0307 	bic.w	r3, r3, #7
 801e5a0:	3308      	adds	r3, #8
 801e5a2:	9303      	str	r3, [sp, #12]
 801e5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5a6:	4433      	add	r3, r6
 801e5a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e5aa:	e76a      	b.n	801e482 <_svfiprintf_r+0x52>
 801e5ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5b0:	460c      	mov	r4, r1
 801e5b2:	2001      	movs	r0, #1
 801e5b4:	e7a8      	b.n	801e508 <_svfiprintf_r+0xd8>
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	3401      	adds	r4, #1
 801e5ba:	f04f 0c0a 	mov.w	ip, #10
 801e5be:	4619      	mov	r1, r3
 801e5c0:	9305      	str	r3, [sp, #20]
 801e5c2:	4620      	mov	r0, r4
 801e5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5c8:	3a30      	subs	r2, #48	@ 0x30
 801e5ca:	2a09      	cmp	r2, #9
 801e5cc:	d903      	bls.n	801e5d6 <_svfiprintf_r+0x1a6>
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d0c6      	beq.n	801e560 <_svfiprintf_r+0x130>
 801e5d2:	9105      	str	r1, [sp, #20]
 801e5d4:	e7c4      	b.n	801e560 <_svfiprintf_r+0x130>
 801e5d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e5da:	4604      	mov	r4, r0
 801e5dc:	2301      	movs	r3, #1
 801e5de:	e7f0      	b.n	801e5c2 <_svfiprintf_r+0x192>
 801e5e0:	ab03      	add	r3, sp, #12
 801e5e2:	462a      	mov	r2, r5
 801e5e4:	a904      	add	r1, sp, #16
 801e5e6:	4638      	mov	r0, r7
 801e5e8:	9300      	str	r3, [sp, #0]
 801e5ea:	4b0d      	ldr	r3, [pc, #52]	@ (801e620 <_svfiprintf_r+0x1f0>)
 801e5ec:	f7fd fe58 	bl	801c2a0 <_printf_float>
 801e5f0:	1c42      	adds	r2, r0, #1
 801e5f2:	4606      	mov	r6, r0
 801e5f4:	d1d6      	bne.n	801e5a4 <_svfiprintf_r+0x174>
 801e5f6:	89ab      	ldrh	r3, [r5, #12]
 801e5f8:	065b      	lsls	r3, r3, #25
 801e5fa:	f53f af2d 	bmi.w	801e458 <_svfiprintf_r+0x28>
 801e5fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e600:	e72c      	b.n	801e45c <_svfiprintf_r+0x2c>
 801e602:	ab03      	add	r3, sp, #12
 801e604:	462a      	mov	r2, r5
 801e606:	a904      	add	r1, sp, #16
 801e608:	4638      	mov	r0, r7
 801e60a:	9300      	str	r3, [sp, #0]
 801e60c:	4b04      	ldr	r3, [pc, #16]	@ (801e620 <_svfiprintf_r+0x1f0>)
 801e60e:	f7fe f8e3 	bl	801c7d8 <_printf_i>
 801e612:	e7ed      	b.n	801e5f0 <_svfiprintf_r+0x1c0>
 801e614:	0801f578 	.word	0x0801f578
 801e618:	0801f582 	.word	0x0801f582
 801e61c:	0801c2a1 	.word	0x0801c2a1
 801e620:	0801e379 	.word	0x0801e379
 801e624:	0801f57e 	.word	0x0801f57e

0801e628 <__sflush_r>:
 801e628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e630:	0716      	lsls	r6, r2, #28
 801e632:	4605      	mov	r5, r0
 801e634:	460c      	mov	r4, r1
 801e636:	d454      	bmi.n	801e6e2 <__sflush_r+0xba>
 801e638:	684b      	ldr	r3, [r1, #4]
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	dc02      	bgt.n	801e644 <__sflush_r+0x1c>
 801e63e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e640:	2b00      	cmp	r3, #0
 801e642:	dd48      	ble.n	801e6d6 <__sflush_r+0xae>
 801e644:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e646:	2e00      	cmp	r6, #0
 801e648:	d045      	beq.n	801e6d6 <__sflush_r+0xae>
 801e64a:	2300      	movs	r3, #0
 801e64c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e650:	682f      	ldr	r7, [r5, #0]
 801e652:	6a21      	ldr	r1, [r4, #32]
 801e654:	602b      	str	r3, [r5, #0]
 801e656:	d030      	beq.n	801e6ba <__sflush_r+0x92>
 801e658:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e65a:	89a3      	ldrh	r3, [r4, #12]
 801e65c:	0759      	lsls	r1, r3, #29
 801e65e:	d505      	bpl.n	801e66c <__sflush_r+0x44>
 801e660:	6863      	ldr	r3, [r4, #4]
 801e662:	1ad2      	subs	r2, r2, r3
 801e664:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e666:	b10b      	cbz	r3, 801e66c <__sflush_r+0x44>
 801e668:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e66a:	1ad2      	subs	r2, r2, r3
 801e66c:	2300      	movs	r3, #0
 801e66e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e670:	6a21      	ldr	r1, [r4, #32]
 801e672:	4628      	mov	r0, r5
 801e674:	47b0      	blx	r6
 801e676:	1c43      	adds	r3, r0, #1
 801e678:	89a3      	ldrh	r3, [r4, #12]
 801e67a:	d106      	bne.n	801e68a <__sflush_r+0x62>
 801e67c:	6829      	ldr	r1, [r5, #0]
 801e67e:	291d      	cmp	r1, #29
 801e680:	d82b      	bhi.n	801e6da <__sflush_r+0xb2>
 801e682:	4a2a      	ldr	r2, [pc, #168]	@ (801e72c <__sflush_r+0x104>)
 801e684:	410a      	asrs	r2, r1
 801e686:	07d6      	lsls	r6, r2, #31
 801e688:	d427      	bmi.n	801e6da <__sflush_r+0xb2>
 801e68a:	2200      	movs	r2, #0
 801e68c:	04d9      	lsls	r1, r3, #19
 801e68e:	6062      	str	r2, [r4, #4]
 801e690:	6922      	ldr	r2, [r4, #16]
 801e692:	6022      	str	r2, [r4, #0]
 801e694:	d504      	bpl.n	801e6a0 <__sflush_r+0x78>
 801e696:	1c42      	adds	r2, r0, #1
 801e698:	d101      	bne.n	801e69e <__sflush_r+0x76>
 801e69a:	682b      	ldr	r3, [r5, #0]
 801e69c:	b903      	cbnz	r3, 801e6a0 <__sflush_r+0x78>
 801e69e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e6a2:	602f      	str	r7, [r5, #0]
 801e6a4:	b1b9      	cbz	r1, 801e6d6 <__sflush_r+0xae>
 801e6a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e6aa:	4299      	cmp	r1, r3
 801e6ac:	d002      	beq.n	801e6b4 <__sflush_r+0x8c>
 801e6ae:	4628      	mov	r0, r5
 801e6b0:	f7ff f9da 	bl	801da68 <_free_r>
 801e6b4:	2300      	movs	r3, #0
 801e6b6:	6363      	str	r3, [r4, #52]	@ 0x34
 801e6b8:	e00d      	b.n	801e6d6 <__sflush_r+0xae>
 801e6ba:	2301      	movs	r3, #1
 801e6bc:	4628      	mov	r0, r5
 801e6be:	47b0      	blx	r6
 801e6c0:	4602      	mov	r2, r0
 801e6c2:	1c50      	adds	r0, r2, #1
 801e6c4:	d1c9      	bne.n	801e65a <__sflush_r+0x32>
 801e6c6:	682b      	ldr	r3, [r5, #0]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d0c6      	beq.n	801e65a <__sflush_r+0x32>
 801e6cc:	2b1d      	cmp	r3, #29
 801e6ce:	d001      	beq.n	801e6d4 <__sflush_r+0xac>
 801e6d0:	2b16      	cmp	r3, #22
 801e6d2:	d11d      	bne.n	801e710 <__sflush_r+0xe8>
 801e6d4:	602f      	str	r7, [r5, #0]
 801e6d6:	2000      	movs	r0, #0
 801e6d8:	e021      	b.n	801e71e <__sflush_r+0xf6>
 801e6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e6de:	b21b      	sxth	r3, r3
 801e6e0:	e01a      	b.n	801e718 <__sflush_r+0xf0>
 801e6e2:	690f      	ldr	r7, [r1, #16]
 801e6e4:	2f00      	cmp	r7, #0
 801e6e6:	d0f6      	beq.n	801e6d6 <__sflush_r+0xae>
 801e6e8:	0793      	lsls	r3, r2, #30
 801e6ea:	680e      	ldr	r6, [r1, #0]
 801e6ec:	600f      	str	r7, [r1, #0]
 801e6ee:	bf0c      	ite	eq
 801e6f0:	694b      	ldreq	r3, [r1, #20]
 801e6f2:	2300      	movne	r3, #0
 801e6f4:	eba6 0807 	sub.w	r8, r6, r7
 801e6f8:	608b      	str	r3, [r1, #8]
 801e6fa:	f1b8 0f00 	cmp.w	r8, #0
 801e6fe:	ddea      	ble.n	801e6d6 <__sflush_r+0xae>
 801e700:	4643      	mov	r3, r8
 801e702:	463a      	mov	r2, r7
 801e704:	6a21      	ldr	r1, [r4, #32]
 801e706:	4628      	mov	r0, r5
 801e708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e70a:	47b0      	blx	r6
 801e70c:	2800      	cmp	r0, #0
 801e70e:	dc08      	bgt.n	801e722 <__sflush_r+0xfa>
 801e710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e718:	f04f 30ff 	mov.w	r0, #4294967295
 801e71c:	81a3      	strh	r3, [r4, #12]
 801e71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e722:	4407      	add	r7, r0
 801e724:	eba8 0800 	sub.w	r8, r8, r0
 801e728:	e7e7      	b.n	801e6fa <__sflush_r+0xd2>
 801e72a:	bf00      	nop
 801e72c:	dfbffffe 	.word	0xdfbffffe

0801e730 <_fflush_r>:
 801e730:	b538      	push	{r3, r4, r5, lr}
 801e732:	690b      	ldr	r3, [r1, #16]
 801e734:	4605      	mov	r5, r0
 801e736:	460c      	mov	r4, r1
 801e738:	b913      	cbnz	r3, 801e740 <_fflush_r+0x10>
 801e73a:	2500      	movs	r5, #0
 801e73c:	4628      	mov	r0, r5
 801e73e:	bd38      	pop	{r3, r4, r5, pc}
 801e740:	b118      	cbz	r0, 801e74a <_fflush_r+0x1a>
 801e742:	6a03      	ldr	r3, [r0, #32]
 801e744:	b90b      	cbnz	r3, 801e74a <_fflush_r+0x1a>
 801e746:	f7fe f9f3 	bl	801cb30 <__sinit>
 801e74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d0f3      	beq.n	801e73a <_fflush_r+0xa>
 801e752:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e754:	07d0      	lsls	r0, r2, #31
 801e756:	d404      	bmi.n	801e762 <_fflush_r+0x32>
 801e758:	0599      	lsls	r1, r3, #22
 801e75a:	d402      	bmi.n	801e762 <_fflush_r+0x32>
 801e75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e75e:	f7fe fb14 	bl	801cd8a <__retarget_lock_acquire_recursive>
 801e762:	4628      	mov	r0, r5
 801e764:	4621      	mov	r1, r4
 801e766:	f7ff ff5f 	bl	801e628 <__sflush_r>
 801e76a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e76c:	4605      	mov	r5, r0
 801e76e:	07da      	lsls	r2, r3, #31
 801e770:	d4e4      	bmi.n	801e73c <_fflush_r+0xc>
 801e772:	89a3      	ldrh	r3, [r4, #12]
 801e774:	059b      	lsls	r3, r3, #22
 801e776:	d4e1      	bmi.n	801e73c <_fflush_r+0xc>
 801e778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e77a:	f7fe fb07 	bl	801cd8c <__retarget_lock_release_recursive>
 801e77e:	e7dd      	b.n	801e73c <_fflush_r+0xc>

0801e780 <memmove>:
 801e780:	4288      	cmp	r0, r1
 801e782:	b510      	push	{r4, lr}
 801e784:	eb01 0402 	add.w	r4, r1, r2
 801e788:	d902      	bls.n	801e790 <memmove+0x10>
 801e78a:	4284      	cmp	r4, r0
 801e78c:	4623      	mov	r3, r4
 801e78e:	d807      	bhi.n	801e7a0 <memmove+0x20>
 801e790:	1e43      	subs	r3, r0, #1
 801e792:	42a1      	cmp	r1, r4
 801e794:	d008      	beq.n	801e7a8 <memmove+0x28>
 801e796:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e79a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e79e:	e7f8      	b.n	801e792 <memmove+0x12>
 801e7a0:	4402      	add	r2, r0
 801e7a2:	4601      	mov	r1, r0
 801e7a4:	428a      	cmp	r2, r1
 801e7a6:	d100      	bne.n	801e7aa <memmove+0x2a>
 801e7a8:	bd10      	pop	{r4, pc}
 801e7aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e7ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e7b2:	e7f7      	b.n	801e7a4 <memmove+0x24>

0801e7b4 <_sbrk_r>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	4d05      	ldr	r5, [pc, #20]	@ (801e7d0 <_sbrk_r+0x1c>)
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	4608      	mov	r0, r1
 801e7be:	602b      	str	r3, [r5, #0]
 801e7c0:	f7f2 fd0c 	bl	80111dc <_sbrk>
 801e7c4:	1c43      	adds	r3, r0, #1
 801e7c6:	d102      	bne.n	801e7ce <_sbrk_r+0x1a>
 801e7c8:	682b      	ldr	r3, [r5, #0]
 801e7ca:	b103      	cbz	r3, 801e7ce <_sbrk_r+0x1a>
 801e7cc:	6023      	str	r3, [r4, #0]
 801e7ce:	bd38      	pop	{r3, r4, r5, pc}
 801e7d0:	20007d34 	.word	0x20007d34

0801e7d4 <__assert_func>:
 801e7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e7d6:	4614      	mov	r4, r2
 801e7d8:	461a      	mov	r2, r3
 801e7da:	4b09      	ldr	r3, [pc, #36]	@ (801e800 <__assert_func+0x2c>)
 801e7dc:	4605      	mov	r5, r0
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	68d8      	ldr	r0, [r3, #12]
 801e7e2:	b954      	cbnz	r4, 801e7fa <__assert_func+0x26>
 801e7e4:	4b07      	ldr	r3, [pc, #28]	@ (801e804 <__assert_func+0x30>)
 801e7e6:	461c      	mov	r4, r3
 801e7e8:	9100      	str	r1, [sp, #0]
 801e7ea:	4907      	ldr	r1, [pc, #28]	@ (801e808 <__assert_func+0x34>)
 801e7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e7f0:	462b      	mov	r3, r5
 801e7f2:	f000 f86f 	bl	801e8d4 <fiprintf>
 801e7f6:	f000 f87f 	bl	801e8f8 <abort>
 801e7fa:	4b04      	ldr	r3, [pc, #16]	@ (801e80c <__assert_func+0x38>)
 801e7fc:	e7f4      	b.n	801e7e8 <__assert_func+0x14>
 801e7fe:	bf00      	nop
 801e800:	200000c0 	.word	0x200000c0
 801e804:	0801f5ce 	.word	0x0801f5ce
 801e808:	0801f5a0 	.word	0x0801f5a0
 801e80c:	0801f593 	.word	0x0801f593

0801e810 <_calloc_r>:
 801e810:	b570      	push	{r4, r5, r6, lr}
 801e812:	fba1 5402 	umull	r5, r4, r1, r2
 801e816:	b93c      	cbnz	r4, 801e828 <_calloc_r+0x18>
 801e818:	4629      	mov	r1, r5
 801e81a:	f7ff f999 	bl	801db50 <_malloc_r>
 801e81e:	4606      	mov	r6, r0
 801e820:	b928      	cbnz	r0, 801e82e <_calloc_r+0x1e>
 801e822:	2600      	movs	r6, #0
 801e824:	4630      	mov	r0, r6
 801e826:	bd70      	pop	{r4, r5, r6, pc}
 801e828:	220c      	movs	r2, #12
 801e82a:	6002      	str	r2, [r0, #0]
 801e82c:	e7f9      	b.n	801e822 <_calloc_r+0x12>
 801e82e:	462a      	mov	r2, r5
 801e830:	4621      	mov	r1, r4
 801e832:	f7fe fa16 	bl	801cc62 <memset>
 801e836:	e7f5      	b.n	801e824 <_calloc_r+0x14>

0801e838 <__ascii_mbtowc>:
 801e838:	b082      	sub	sp, #8
 801e83a:	b901      	cbnz	r1, 801e83e <__ascii_mbtowc+0x6>
 801e83c:	a901      	add	r1, sp, #4
 801e83e:	b142      	cbz	r2, 801e852 <__ascii_mbtowc+0x1a>
 801e840:	b14b      	cbz	r3, 801e856 <__ascii_mbtowc+0x1e>
 801e842:	7813      	ldrb	r3, [r2, #0]
 801e844:	600b      	str	r3, [r1, #0]
 801e846:	7812      	ldrb	r2, [r2, #0]
 801e848:	1e10      	subs	r0, r2, #0
 801e84a:	bf18      	it	ne
 801e84c:	2001      	movne	r0, #1
 801e84e:	b002      	add	sp, #8
 801e850:	4770      	bx	lr
 801e852:	4610      	mov	r0, r2
 801e854:	e7fb      	b.n	801e84e <__ascii_mbtowc+0x16>
 801e856:	f06f 0001 	mvn.w	r0, #1
 801e85a:	e7f8      	b.n	801e84e <__ascii_mbtowc+0x16>

0801e85c <_realloc_r>:
 801e85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e860:	4680      	mov	r8, r0
 801e862:	4615      	mov	r5, r2
 801e864:	460c      	mov	r4, r1
 801e866:	b921      	cbnz	r1, 801e872 <_realloc_r+0x16>
 801e868:	4611      	mov	r1, r2
 801e86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e86e:	f7ff b96f 	b.w	801db50 <_malloc_r>
 801e872:	b92a      	cbnz	r2, 801e880 <_realloc_r+0x24>
 801e874:	f7ff f8f8 	bl	801da68 <_free_r>
 801e878:	2400      	movs	r4, #0
 801e87a:	4620      	mov	r0, r4
 801e87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e880:	f000 f841 	bl	801e906 <_malloc_usable_size_r>
 801e884:	4285      	cmp	r5, r0
 801e886:	4606      	mov	r6, r0
 801e888:	d802      	bhi.n	801e890 <_realloc_r+0x34>
 801e88a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e88e:	d8f4      	bhi.n	801e87a <_realloc_r+0x1e>
 801e890:	4629      	mov	r1, r5
 801e892:	4640      	mov	r0, r8
 801e894:	f7ff f95c 	bl	801db50 <_malloc_r>
 801e898:	4607      	mov	r7, r0
 801e89a:	2800      	cmp	r0, #0
 801e89c:	d0ec      	beq.n	801e878 <_realloc_r+0x1c>
 801e89e:	42b5      	cmp	r5, r6
 801e8a0:	462a      	mov	r2, r5
 801e8a2:	4621      	mov	r1, r4
 801e8a4:	bf28      	it	cs
 801e8a6:	4632      	movcs	r2, r6
 801e8a8:	f7fe fa7f 	bl	801cdaa <memcpy>
 801e8ac:	4621      	mov	r1, r4
 801e8ae:	4640      	mov	r0, r8
 801e8b0:	463c      	mov	r4, r7
 801e8b2:	f7ff f8d9 	bl	801da68 <_free_r>
 801e8b6:	e7e0      	b.n	801e87a <_realloc_r+0x1e>

0801e8b8 <__ascii_wctomb>:
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	4608      	mov	r0, r1
 801e8bc:	b141      	cbz	r1, 801e8d0 <__ascii_wctomb+0x18>
 801e8be:	2aff      	cmp	r2, #255	@ 0xff
 801e8c0:	d904      	bls.n	801e8cc <__ascii_wctomb+0x14>
 801e8c2:	228a      	movs	r2, #138	@ 0x8a
 801e8c4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8c8:	601a      	str	r2, [r3, #0]
 801e8ca:	4770      	bx	lr
 801e8cc:	2001      	movs	r0, #1
 801e8ce:	700a      	strb	r2, [r1, #0]
 801e8d0:	4770      	bx	lr
	...

0801e8d4 <fiprintf>:
 801e8d4:	b40e      	push	{r1, r2, r3}
 801e8d6:	b503      	push	{r0, r1, lr}
 801e8d8:	ab03      	add	r3, sp, #12
 801e8da:	4601      	mov	r1, r0
 801e8dc:	4805      	ldr	r0, [pc, #20]	@ (801e8f4 <fiprintf+0x20>)
 801e8de:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8e2:	6800      	ldr	r0, [r0, #0]
 801e8e4:	9301      	str	r3, [sp, #4]
 801e8e6:	f000 f83f 	bl	801e968 <_vfiprintf_r>
 801e8ea:	b002      	add	sp, #8
 801e8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801e8f0:	b003      	add	sp, #12
 801e8f2:	4770      	bx	lr
 801e8f4:	200000c0 	.word	0x200000c0

0801e8f8 <abort>:
 801e8f8:	2006      	movs	r0, #6
 801e8fa:	b508      	push	{r3, lr}
 801e8fc:	f000 fa08 	bl	801ed10 <raise>
 801e900:	2001      	movs	r0, #1
 801e902:	f7f2 fbf3 	bl	80110ec <_exit>

0801e906 <_malloc_usable_size_r>:
 801e906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e90a:	1f18      	subs	r0, r3, #4
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	bfbc      	itt	lt
 801e910:	580b      	ldrlt	r3, [r1, r0]
 801e912:	18c0      	addlt	r0, r0, r3
 801e914:	4770      	bx	lr

0801e916 <__sfputc_r>:
 801e916:	6893      	ldr	r3, [r2, #8]
 801e918:	3b01      	subs	r3, #1
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	6093      	str	r3, [r2, #8]
 801e91e:	b410      	push	{r4}
 801e920:	da08      	bge.n	801e934 <__sfputc_r+0x1e>
 801e922:	6994      	ldr	r4, [r2, #24]
 801e924:	42a3      	cmp	r3, r4
 801e926:	db01      	blt.n	801e92c <__sfputc_r+0x16>
 801e928:	290a      	cmp	r1, #10
 801e92a:	d103      	bne.n	801e934 <__sfputc_r+0x1e>
 801e92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e930:	f000 b932 	b.w	801eb98 <__swbuf_r>
 801e934:	6813      	ldr	r3, [r2, #0]
 801e936:	1c58      	adds	r0, r3, #1
 801e938:	6010      	str	r0, [r2, #0]
 801e93a:	4608      	mov	r0, r1
 801e93c:	7019      	strb	r1, [r3, #0]
 801e93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e942:	4770      	bx	lr

0801e944 <__sfputs_r>:
 801e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e946:	4606      	mov	r6, r0
 801e948:	460f      	mov	r7, r1
 801e94a:	4614      	mov	r4, r2
 801e94c:	18d5      	adds	r5, r2, r3
 801e94e:	42ac      	cmp	r4, r5
 801e950:	d101      	bne.n	801e956 <__sfputs_r+0x12>
 801e952:	2000      	movs	r0, #0
 801e954:	e007      	b.n	801e966 <__sfputs_r+0x22>
 801e956:	463a      	mov	r2, r7
 801e958:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e95c:	4630      	mov	r0, r6
 801e95e:	f7ff ffda 	bl	801e916 <__sfputc_r>
 801e962:	1c43      	adds	r3, r0, #1
 801e964:	d1f3      	bne.n	801e94e <__sfputs_r+0xa>
 801e966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e968 <_vfiprintf_r>:
 801e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e96c:	460d      	mov	r5, r1
 801e96e:	b09d      	sub	sp, #116	@ 0x74
 801e970:	4614      	mov	r4, r2
 801e972:	4698      	mov	r8, r3
 801e974:	4606      	mov	r6, r0
 801e976:	b118      	cbz	r0, 801e980 <_vfiprintf_r+0x18>
 801e978:	6a03      	ldr	r3, [r0, #32]
 801e97a:	b90b      	cbnz	r3, 801e980 <_vfiprintf_r+0x18>
 801e97c:	f7fe f8d8 	bl	801cb30 <__sinit>
 801e980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e982:	07d9      	lsls	r1, r3, #31
 801e984:	d405      	bmi.n	801e992 <_vfiprintf_r+0x2a>
 801e986:	89ab      	ldrh	r3, [r5, #12]
 801e988:	059a      	lsls	r2, r3, #22
 801e98a:	d402      	bmi.n	801e992 <_vfiprintf_r+0x2a>
 801e98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e98e:	f7fe f9fc 	bl	801cd8a <__retarget_lock_acquire_recursive>
 801e992:	89ab      	ldrh	r3, [r5, #12]
 801e994:	071b      	lsls	r3, r3, #28
 801e996:	d501      	bpl.n	801e99c <_vfiprintf_r+0x34>
 801e998:	692b      	ldr	r3, [r5, #16]
 801e99a:	b99b      	cbnz	r3, 801e9c4 <_vfiprintf_r+0x5c>
 801e99c:	4629      	mov	r1, r5
 801e99e:	4630      	mov	r0, r6
 801e9a0:	f000 f938 	bl	801ec14 <__swsetup_r>
 801e9a4:	b170      	cbz	r0, 801e9c4 <_vfiprintf_r+0x5c>
 801e9a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e9a8:	07dc      	lsls	r4, r3, #31
 801e9aa:	d504      	bpl.n	801e9b6 <_vfiprintf_r+0x4e>
 801e9ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e9b0:	b01d      	add	sp, #116	@ 0x74
 801e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9b6:	89ab      	ldrh	r3, [r5, #12]
 801e9b8:	0598      	lsls	r0, r3, #22
 801e9ba:	d4f7      	bmi.n	801e9ac <_vfiprintf_r+0x44>
 801e9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e9be:	f7fe f9e5 	bl	801cd8c <__retarget_lock_release_recursive>
 801e9c2:	e7f3      	b.n	801e9ac <_vfiprintf_r+0x44>
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e9ca:	f04f 0901 	mov.w	r9, #1
 801e9ce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 801eb84 <_vfiprintf_r+0x21c>
 801e9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9d4:	2320      	movs	r3, #32
 801e9d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e9da:	2330      	movs	r3, #48	@ 0x30
 801e9dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e9e0:	4623      	mov	r3, r4
 801e9e2:	469a      	mov	sl, r3
 801e9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e9e8:	b10a      	cbz	r2, 801e9ee <_vfiprintf_r+0x86>
 801e9ea:	2a25      	cmp	r2, #37	@ 0x25
 801e9ec:	d1f9      	bne.n	801e9e2 <_vfiprintf_r+0x7a>
 801e9ee:	ebba 0b04 	subs.w	fp, sl, r4
 801e9f2:	d00b      	beq.n	801ea0c <_vfiprintf_r+0xa4>
 801e9f4:	465b      	mov	r3, fp
 801e9f6:	4622      	mov	r2, r4
 801e9f8:	4629      	mov	r1, r5
 801e9fa:	4630      	mov	r0, r6
 801e9fc:	f7ff ffa2 	bl	801e944 <__sfputs_r>
 801ea00:	3001      	adds	r0, #1
 801ea02:	f000 80a7 	beq.w	801eb54 <_vfiprintf_r+0x1ec>
 801ea06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea08:	445a      	add	r2, fp
 801ea0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ea10:	2b00      	cmp	r3, #0
 801ea12:	f000 809f 	beq.w	801eb54 <_vfiprintf_r+0x1ec>
 801ea16:	2300      	movs	r3, #0
 801ea18:	f04f 32ff 	mov.w	r2, #4294967295
 801ea1c:	f10a 0a01 	add.w	sl, sl, #1
 801ea20:	9304      	str	r3, [sp, #16]
 801ea22:	9307      	str	r3, [sp, #28]
 801ea24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ea28:	931a      	str	r3, [sp, #104]	@ 0x68
 801ea2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ea2e:	4654      	mov	r4, sl
 801ea30:	2205      	movs	r2, #5
 801ea32:	4854      	ldr	r0, [pc, #336]	@ (801eb84 <_vfiprintf_r+0x21c>)
 801ea34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea38:	f7fe f9a9 	bl	801cd8e <memchr>
 801ea3c:	9a04      	ldr	r2, [sp, #16]
 801ea3e:	b9d8      	cbnz	r0, 801ea78 <_vfiprintf_r+0x110>
 801ea40:	06d1      	lsls	r1, r2, #27
 801ea42:	bf44      	itt	mi
 801ea44:	2320      	movmi	r3, #32
 801ea46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ea4a:	0713      	lsls	r3, r2, #28
 801ea4c:	bf44      	itt	mi
 801ea4e:	232b      	movmi	r3, #43	@ 0x2b
 801ea50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ea54:	f89a 3000 	ldrb.w	r3, [sl]
 801ea58:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea5a:	d015      	beq.n	801ea88 <_vfiprintf_r+0x120>
 801ea5c:	9a07      	ldr	r2, [sp, #28]
 801ea5e:	4654      	mov	r4, sl
 801ea60:	2000      	movs	r0, #0
 801ea62:	f04f 0c0a 	mov.w	ip, #10
 801ea66:	4621      	mov	r1, r4
 801ea68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ea6c:	3b30      	subs	r3, #48	@ 0x30
 801ea6e:	2b09      	cmp	r3, #9
 801ea70:	d94b      	bls.n	801eb0a <_vfiprintf_r+0x1a2>
 801ea72:	b1b0      	cbz	r0, 801eaa2 <_vfiprintf_r+0x13a>
 801ea74:	9207      	str	r2, [sp, #28]
 801ea76:	e014      	b.n	801eaa2 <_vfiprintf_r+0x13a>
 801ea78:	eba0 0308 	sub.w	r3, r0, r8
 801ea7c:	46a2      	mov	sl, r4
 801ea7e:	fa09 f303 	lsl.w	r3, r9, r3
 801ea82:	4313      	orrs	r3, r2
 801ea84:	9304      	str	r3, [sp, #16]
 801ea86:	e7d2      	b.n	801ea2e <_vfiprintf_r+0xc6>
 801ea88:	9b03      	ldr	r3, [sp, #12]
 801ea8a:	1d19      	adds	r1, r3, #4
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	9103      	str	r1, [sp, #12]
 801ea92:	bfbb      	ittet	lt
 801ea94:	425b      	neglt	r3, r3
 801ea96:	f042 0202 	orrlt.w	r2, r2, #2
 801ea9a:	9307      	strge	r3, [sp, #28]
 801ea9c:	9307      	strlt	r3, [sp, #28]
 801ea9e:	bfb8      	it	lt
 801eaa0:	9204      	strlt	r2, [sp, #16]
 801eaa2:	7823      	ldrb	r3, [r4, #0]
 801eaa4:	2b2e      	cmp	r3, #46	@ 0x2e
 801eaa6:	d10a      	bne.n	801eabe <_vfiprintf_r+0x156>
 801eaa8:	7863      	ldrb	r3, [r4, #1]
 801eaaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801eaac:	d132      	bne.n	801eb14 <_vfiprintf_r+0x1ac>
 801eaae:	9b03      	ldr	r3, [sp, #12]
 801eab0:	3402      	adds	r4, #2
 801eab2:	1d1a      	adds	r2, r3, #4
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eaba:	9203      	str	r2, [sp, #12]
 801eabc:	9305      	str	r3, [sp, #20]
 801eabe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801eb94 <_vfiprintf_r+0x22c>
 801eac2:	2203      	movs	r2, #3
 801eac4:	7821      	ldrb	r1, [r4, #0]
 801eac6:	4650      	mov	r0, sl
 801eac8:	f7fe f961 	bl	801cd8e <memchr>
 801eacc:	b138      	cbz	r0, 801eade <_vfiprintf_r+0x176>
 801eace:	eba0 000a 	sub.w	r0, r0, sl
 801ead2:	2240      	movs	r2, #64	@ 0x40
 801ead4:	9b04      	ldr	r3, [sp, #16]
 801ead6:	3401      	adds	r4, #1
 801ead8:	4082      	lsls	r2, r0
 801eada:	4313      	orrs	r3, r2
 801eadc:	9304      	str	r3, [sp, #16]
 801eade:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eae2:	2206      	movs	r2, #6
 801eae4:	4828      	ldr	r0, [pc, #160]	@ (801eb88 <_vfiprintf_r+0x220>)
 801eae6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eaea:	f7fe f950 	bl	801cd8e <memchr>
 801eaee:	2800      	cmp	r0, #0
 801eaf0:	d03f      	beq.n	801eb72 <_vfiprintf_r+0x20a>
 801eaf2:	4b26      	ldr	r3, [pc, #152]	@ (801eb8c <_vfiprintf_r+0x224>)
 801eaf4:	bb1b      	cbnz	r3, 801eb3e <_vfiprintf_r+0x1d6>
 801eaf6:	9b03      	ldr	r3, [sp, #12]
 801eaf8:	3307      	adds	r3, #7
 801eafa:	f023 0307 	bic.w	r3, r3, #7
 801eafe:	3308      	adds	r3, #8
 801eb00:	9303      	str	r3, [sp, #12]
 801eb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb04:	443b      	add	r3, r7
 801eb06:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb08:	e76a      	b.n	801e9e0 <_vfiprintf_r+0x78>
 801eb0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb0e:	460c      	mov	r4, r1
 801eb10:	2001      	movs	r0, #1
 801eb12:	e7a8      	b.n	801ea66 <_vfiprintf_r+0xfe>
 801eb14:	2300      	movs	r3, #0
 801eb16:	3401      	adds	r4, #1
 801eb18:	f04f 0c0a 	mov.w	ip, #10
 801eb1c:	4619      	mov	r1, r3
 801eb1e:	9305      	str	r3, [sp, #20]
 801eb20:	4620      	mov	r0, r4
 801eb22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eb26:	3a30      	subs	r2, #48	@ 0x30
 801eb28:	2a09      	cmp	r2, #9
 801eb2a:	d903      	bls.n	801eb34 <_vfiprintf_r+0x1cc>
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d0c6      	beq.n	801eabe <_vfiprintf_r+0x156>
 801eb30:	9105      	str	r1, [sp, #20]
 801eb32:	e7c4      	b.n	801eabe <_vfiprintf_r+0x156>
 801eb34:	fb0c 2101 	mla	r1, ip, r1, r2
 801eb38:	4604      	mov	r4, r0
 801eb3a:	2301      	movs	r3, #1
 801eb3c:	e7f0      	b.n	801eb20 <_vfiprintf_r+0x1b8>
 801eb3e:	ab03      	add	r3, sp, #12
 801eb40:	462a      	mov	r2, r5
 801eb42:	a904      	add	r1, sp, #16
 801eb44:	4630      	mov	r0, r6
 801eb46:	9300      	str	r3, [sp, #0]
 801eb48:	4b11      	ldr	r3, [pc, #68]	@ (801eb90 <_vfiprintf_r+0x228>)
 801eb4a:	f7fd fba9 	bl	801c2a0 <_printf_float>
 801eb4e:	4607      	mov	r7, r0
 801eb50:	1c78      	adds	r0, r7, #1
 801eb52:	d1d6      	bne.n	801eb02 <_vfiprintf_r+0x19a>
 801eb54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801eb56:	07d9      	lsls	r1, r3, #31
 801eb58:	d405      	bmi.n	801eb66 <_vfiprintf_r+0x1fe>
 801eb5a:	89ab      	ldrh	r3, [r5, #12]
 801eb5c:	059a      	lsls	r2, r3, #22
 801eb5e:	d402      	bmi.n	801eb66 <_vfiprintf_r+0x1fe>
 801eb60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801eb62:	f7fe f913 	bl	801cd8c <__retarget_lock_release_recursive>
 801eb66:	89ab      	ldrh	r3, [r5, #12]
 801eb68:	065b      	lsls	r3, r3, #25
 801eb6a:	f53f af1f 	bmi.w	801e9ac <_vfiprintf_r+0x44>
 801eb6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb70:	e71e      	b.n	801e9b0 <_vfiprintf_r+0x48>
 801eb72:	ab03      	add	r3, sp, #12
 801eb74:	462a      	mov	r2, r5
 801eb76:	a904      	add	r1, sp, #16
 801eb78:	4630      	mov	r0, r6
 801eb7a:	9300      	str	r3, [sp, #0]
 801eb7c:	4b04      	ldr	r3, [pc, #16]	@ (801eb90 <_vfiprintf_r+0x228>)
 801eb7e:	f7fd fe2b 	bl	801c7d8 <_printf_i>
 801eb82:	e7e4      	b.n	801eb4e <_vfiprintf_r+0x1e6>
 801eb84:	0801f578 	.word	0x0801f578
 801eb88:	0801f582 	.word	0x0801f582
 801eb8c:	0801c2a1 	.word	0x0801c2a1
 801eb90:	0801e945 	.word	0x0801e945
 801eb94:	0801f57e 	.word	0x0801f57e

0801eb98 <__swbuf_r>:
 801eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb9a:	460e      	mov	r6, r1
 801eb9c:	4614      	mov	r4, r2
 801eb9e:	4605      	mov	r5, r0
 801eba0:	b118      	cbz	r0, 801ebaa <__swbuf_r+0x12>
 801eba2:	6a03      	ldr	r3, [r0, #32]
 801eba4:	b90b      	cbnz	r3, 801ebaa <__swbuf_r+0x12>
 801eba6:	f7fd ffc3 	bl	801cb30 <__sinit>
 801ebaa:	69a3      	ldr	r3, [r4, #24]
 801ebac:	60a3      	str	r3, [r4, #8]
 801ebae:	89a3      	ldrh	r3, [r4, #12]
 801ebb0:	071a      	lsls	r2, r3, #28
 801ebb2:	d501      	bpl.n	801ebb8 <__swbuf_r+0x20>
 801ebb4:	6923      	ldr	r3, [r4, #16]
 801ebb6:	b943      	cbnz	r3, 801ebca <__swbuf_r+0x32>
 801ebb8:	4621      	mov	r1, r4
 801ebba:	4628      	mov	r0, r5
 801ebbc:	f000 f82a 	bl	801ec14 <__swsetup_r>
 801ebc0:	b118      	cbz	r0, 801ebca <__swbuf_r+0x32>
 801ebc2:	f04f 37ff 	mov.w	r7, #4294967295
 801ebc6:	4638      	mov	r0, r7
 801ebc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ebca:	6823      	ldr	r3, [r4, #0]
 801ebcc:	b2f6      	uxtb	r6, r6
 801ebce:	6922      	ldr	r2, [r4, #16]
 801ebd0:	4637      	mov	r7, r6
 801ebd2:	1a98      	subs	r0, r3, r2
 801ebd4:	6963      	ldr	r3, [r4, #20]
 801ebd6:	4283      	cmp	r3, r0
 801ebd8:	dc05      	bgt.n	801ebe6 <__swbuf_r+0x4e>
 801ebda:	4621      	mov	r1, r4
 801ebdc:	4628      	mov	r0, r5
 801ebde:	f7ff fda7 	bl	801e730 <_fflush_r>
 801ebe2:	2800      	cmp	r0, #0
 801ebe4:	d1ed      	bne.n	801ebc2 <__swbuf_r+0x2a>
 801ebe6:	68a3      	ldr	r3, [r4, #8]
 801ebe8:	3b01      	subs	r3, #1
 801ebea:	60a3      	str	r3, [r4, #8]
 801ebec:	6823      	ldr	r3, [r4, #0]
 801ebee:	1c5a      	adds	r2, r3, #1
 801ebf0:	6022      	str	r2, [r4, #0]
 801ebf2:	701e      	strb	r6, [r3, #0]
 801ebf4:	1c43      	adds	r3, r0, #1
 801ebf6:	6962      	ldr	r2, [r4, #20]
 801ebf8:	429a      	cmp	r2, r3
 801ebfa:	d004      	beq.n	801ec06 <__swbuf_r+0x6e>
 801ebfc:	89a3      	ldrh	r3, [r4, #12]
 801ebfe:	07db      	lsls	r3, r3, #31
 801ec00:	d5e1      	bpl.n	801ebc6 <__swbuf_r+0x2e>
 801ec02:	2e0a      	cmp	r6, #10
 801ec04:	d1df      	bne.n	801ebc6 <__swbuf_r+0x2e>
 801ec06:	4621      	mov	r1, r4
 801ec08:	4628      	mov	r0, r5
 801ec0a:	f7ff fd91 	bl	801e730 <_fflush_r>
 801ec0e:	2800      	cmp	r0, #0
 801ec10:	d0d9      	beq.n	801ebc6 <__swbuf_r+0x2e>
 801ec12:	e7d6      	b.n	801ebc2 <__swbuf_r+0x2a>

0801ec14 <__swsetup_r>:
 801ec14:	b538      	push	{r3, r4, r5, lr}
 801ec16:	4b29      	ldr	r3, [pc, #164]	@ (801ecbc <__swsetup_r+0xa8>)
 801ec18:	4605      	mov	r5, r0
 801ec1a:	460c      	mov	r4, r1
 801ec1c:	6818      	ldr	r0, [r3, #0]
 801ec1e:	b118      	cbz	r0, 801ec28 <__swsetup_r+0x14>
 801ec20:	6a03      	ldr	r3, [r0, #32]
 801ec22:	b90b      	cbnz	r3, 801ec28 <__swsetup_r+0x14>
 801ec24:	f7fd ff84 	bl	801cb30 <__sinit>
 801ec28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec2c:	0719      	lsls	r1, r3, #28
 801ec2e:	d422      	bmi.n	801ec76 <__swsetup_r+0x62>
 801ec30:	06da      	lsls	r2, r3, #27
 801ec32:	d407      	bmi.n	801ec44 <__swsetup_r+0x30>
 801ec34:	2209      	movs	r2, #9
 801ec36:	602a      	str	r2, [r5, #0]
 801ec38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ec40:	81a3      	strh	r3, [r4, #12]
 801ec42:	e033      	b.n	801ecac <__swsetup_r+0x98>
 801ec44:	0758      	lsls	r0, r3, #29
 801ec46:	d512      	bpl.n	801ec6e <__swsetup_r+0x5a>
 801ec48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec4a:	b141      	cbz	r1, 801ec5e <__swsetup_r+0x4a>
 801ec4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec50:	4299      	cmp	r1, r3
 801ec52:	d002      	beq.n	801ec5a <__swsetup_r+0x46>
 801ec54:	4628      	mov	r0, r5
 801ec56:	f7fe ff07 	bl	801da68 <_free_r>
 801ec5a:	2300      	movs	r3, #0
 801ec5c:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec5e:	89a3      	ldrh	r3, [r4, #12]
 801ec60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ec64:	81a3      	strh	r3, [r4, #12]
 801ec66:	2300      	movs	r3, #0
 801ec68:	6063      	str	r3, [r4, #4]
 801ec6a:	6923      	ldr	r3, [r4, #16]
 801ec6c:	6023      	str	r3, [r4, #0]
 801ec6e:	89a3      	ldrh	r3, [r4, #12]
 801ec70:	f043 0308 	orr.w	r3, r3, #8
 801ec74:	81a3      	strh	r3, [r4, #12]
 801ec76:	6923      	ldr	r3, [r4, #16]
 801ec78:	b94b      	cbnz	r3, 801ec8e <__swsetup_r+0x7a>
 801ec7a:	89a3      	ldrh	r3, [r4, #12]
 801ec7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ec80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ec84:	d003      	beq.n	801ec8e <__swsetup_r+0x7a>
 801ec86:	4621      	mov	r1, r4
 801ec88:	4628      	mov	r0, r5
 801ec8a:	f000 f882 	bl	801ed92 <__smakebuf_r>
 801ec8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec92:	f013 0201 	ands.w	r2, r3, #1
 801ec96:	d00a      	beq.n	801ecae <__swsetup_r+0x9a>
 801ec98:	2200      	movs	r2, #0
 801ec9a:	60a2      	str	r2, [r4, #8]
 801ec9c:	6962      	ldr	r2, [r4, #20]
 801ec9e:	4252      	negs	r2, r2
 801eca0:	61a2      	str	r2, [r4, #24]
 801eca2:	6922      	ldr	r2, [r4, #16]
 801eca4:	b942      	cbnz	r2, 801ecb8 <__swsetup_r+0xa4>
 801eca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ecaa:	d1c5      	bne.n	801ec38 <__swsetup_r+0x24>
 801ecac:	bd38      	pop	{r3, r4, r5, pc}
 801ecae:	0799      	lsls	r1, r3, #30
 801ecb0:	bf58      	it	pl
 801ecb2:	6962      	ldrpl	r2, [r4, #20]
 801ecb4:	60a2      	str	r2, [r4, #8]
 801ecb6:	e7f4      	b.n	801eca2 <__swsetup_r+0x8e>
 801ecb8:	2000      	movs	r0, #0
 801ecba:	e7f7      	b.n	801ecac <__swsetup_r+0x98>
 801ecbc:	200000c0 	.word	0x200000c0

0801ecc0 <_raise_r>:
 801ecc0:	291f      	cmp	r1, #31
 801ecc2:	b538      	push	{r3, r4, r5, lr}
 801ecc4:	4605      	mov	r5, r0
 801ecc6:	460c      	mov	r4, r1
 801ecc8:	d904      	bls.n	801ecd4 <_raise_r+0x14>
 801ecca:	2316      	movs	r3, #22
 801eccc:	6003      	str	r3, [r0, #0]
 801ecce:	f04f 30ff 	mov.w	r0, #4294967295
 801ecd2:	bd38      	pop	{r3, r4, r5, pc}
 801ecd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ecd6:	b112      	cbz	r2, 801ecde <_raise_r+0x1e>
 801ecd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ecdc:	b94b      	cbnz	r3, 801ecf2 <_raise_r+0x32>
 801ecde:	4628      	mov	r0, r5
 801ece0:	f000 f830 	bl	801ed44 <_getpid_r>
 801ece4:	4622      	mov	r2, r4
 801ece6:	4601      	mov	r1, r0
 801ece8:	4628      	mov	r0, r5
 801ecea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ecee:	f000 b817 	b.w	801ed20 <_kill_r>
 801ecf2:	2b01      	cmp	r3, #1
 801ecf4:	d00a      	beq.n	801ed0c <_raise_r+0x4c>
 801ecf6:	1c59      	adds	r1, r3, #1
 801ecf8:	d103      	bne.n	801ed02 <_raise_r+0x42>
 801ecfa:	2316      	movs	r3, #22
 801ecfc:	6003      	str	r3, [r0, #0]
 801ecfe:	2001      	movs	r0, #1
 801ed00:	e7e7      	b.n	801ecd2 <_raise_r+0x12>
 801ed02:	2100      	movs	r1, #0
 801ed04:	4620      	mov	r0, r4
 801ed06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ed0a:	4798      	blx	r3
 801ed0c:	2000      	movs	r0, #0
 801ed0e:	e7e0      	b.n	801ecd2 <_raise_r+0x12>

0801ed10 <raise>:
 801ed10:	4b02      	ldr	r3, [pc, #8]	@ (801ed1c <raise+0xc>)
 801ed12:	4601      	mov	r1, r0
 801ed14:	6818      	ldr	r0, [r3, #0]
 801ed16:	f7ff bfd3 	b.w	801ecc0 <_raise_r>
 801ed1a:	bf00      	nop
 801ed1c:	200000c0 	.word	0x200000c0

0801ed20 <_kill_r>:
 801ed20:	b538      	push	{r3, r4, r5, lr}
 801ed22:	2300      	movs	r3, #0
 801ed24:	4d06      	ldr	r5, [pc, #24]	@ (801ed40 <_kill_r+0x20>)
 801ed26:	4604      	mov	r4, r0
 801ed28:	4608      	mov	r0, r1
 801ed2a:	4611      	mov	r1, r2
 801ed2c:	602b      	str	r3, [r5, #0]
 801ed2e:	f7f2 f9cd 	bl	80110cc <_kill>
 801ed32:	1c43      	adds	r3, r0, #1
 801ed34:	d102      	bne.n	801ed3c <_kill_r+0x1c>
 801ed36:	682b      	ldr	r3, [r5, #0]
 801ed38:	b103      	cbz	r3, 801ed3c <_kill_r+0x1c>
 801ed3a:	6023      	str	r3, [r4, #0]
 801ed3c:	bd38      	pop	{r3, r4, r5, pc}
 801ed3e:	bf00      	nop
 801ed40:	20007d34 	.word	0x20007d34

0801ed44 <_getpid_r>:
 801ed44:	f7f2 b9ba 	b.w	80110bc <_getpid>

0801ed48 <__swhatbuf_r>:
 801ed48:	b570      	push	{r4, r5, r6, lr}
 801ed4a:	460c      	mov	r4, r1
 801ed4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed50:	b096      	sub	sp, #88	@ 0x58
 801ed52:	4615      	mov	r5, r2
 801ed54:	2900      	cmp	r1, #0
 801ed56:	461e      	mov	r6, r3
 801ed58:	da0c      	bge.n	801ed74 <__swhatbuf_r+0x2c>
 801ed5a:	89a3      	ldrh	r3, [r4, #12]
 801ed5c:	2100      	movs	r1, #0
 801ed5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ed62:	bf14      	ite	ne
 801ed64:	2340      	movne	r3, #64	@ 0x40
 801ed66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ed6a:	2000      	movs	r0, #0
 801ed6c:	6031      	str	r1, [r6, #0]
 801ed6e:	602b      	str	r3, [r5, #0]
 801ed70:	b016      	add	sp, #88	@ 0x58
 801ed72:	bd70      	pop	{r4, r5, r6, pc}
 801ed74:	466a      	mov	r2, sp
 801ed76:	f000 f849 	bl	801ee0c <_fstat_r>
 801ed7a:	2800      	cmp	r0, #0
 801ed7c:	dbed      	blt.n	801ed5a <__swhatbuf_r+0x12>
 801ed7e:	9901      	ldr	r1, [sp, #4]
 801ed80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ed84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ed88:	4259      	negs	r1, r3
 801ed8a:	4159      	adcs	r1, r3
 801ed8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ed90:	e7eb      	b.n	801ed6a <__swhatbuf_r+0x22>

0801ed92 <__smakebuf_r>:
 801ed92:	898b      	ldrh	r3, [r1, #12]
 801ed94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ed96:	079d      	lsls	r5, r3, #30
 801ed98:	4606      	mov	r6, r0
 801ed9a:	460c      	mov	r4, r1
 801ed9c:	d507      	bpl.n	801edae <__smakebuf_r+0x1c>
 801ed9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eda2:	6023      	str	r3, [r4, #0]
 801eda4:	6123      	str	r3, [r4, #16]
 801eda6:	2301      	movs	r3, #1
 801eda8:	6163      	str	r3, [r4, #20]
 801edaa:	b003      	add	sp, #12
 801edac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801edae:	ab01      	add	r3, sp, #4
 801edb0:	466a      	mov	r2, sp
 801edb2:	f7ff ffc9 	bl	801ed48 <__swhatbuf_r>
 801edb6:	9f00      	ldr	r7, [sp, #0]
 801edb8:	4605      	mov	r5, r0
 801edba:	4630      	mov	r0, r6
 801edbc:	4639      	mov	r1, r7
 801edbe:	f7fe fec7 	bl	801db50 <_malloc_r>
 801edc2:	b948      	cbnz	r0, 801edd8 <__smakebuf_r+0x46>
 801edc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801edc8:	059a      	lsls	r2, r3, #22
 801edca:	d4ee      	bmi.n	801edaa <__smakebuf_r+0x18>
 801edcc:	f023 0303 	bic.w	r3, r3, #3
 801edd0:	f043 0302 	orr.w	r3, r3, #2
 801edd4:	81a3      	strh	r3, [r4, #12]
 801edd6:	e7e2      	b.n	801ed9e <__smakebuf_r+0xc>
 801edd8:	89a3      	ldrh	r3, [r4, #12]
 801edda:	6020      	str	r0, [r4, #0]
 801eddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ede0:	81a3      	strh	r3, [r4, #12]
 801ede2:	9b01      	ldr	r3, [sp, #4]
 801ede4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ede8:	b15b      	cbz	r3, 801ee02 <__smakebuf_r+0x70>
 801edea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801edee:	4630      	mov	r0, r6
 801edf0:	f000 f81e 	bl	801ee30 <_isatty_r>
 801edf4:	b128      	cbz	r0, 801ee02 <__smakebuf_r+0x70>
 801edf6:	89a3      	ldrh	r3, [r4, #12]
 801edf8:	f023 0303 	bic.w	r3, r3, #3
 801edfc:	f043 0301 	orr.w	r3, r3, #1
 801ee00:	81a3      	strh	r3, [r4, #12]
 801ee02:	89a3      	ldrh	r3, [r4, #12]
 801ee04:	431d      	orrs	r5, r3
 801ee06:	81a5      	strh	r5, [r4, #12]
 801ee08:	e7cf      	b.n	801edaa <__smakebuf_r+0x18>
	...

0801ee0c <_fstat_r>:
 801ee0c:	b538      	push	{r3, r4, r5, lr}
 801ee0e:	2300      	movs	r3, #0
 801ee10:	4d06      	ldr	r5, [pc, #24]	@ (801ee2c <_fstat_r+0x20>)
 801ee12:	4604      	mov	r4, r0
 801ee14:	4608      	mov	r0, r1
 801ee16:	4611      	mov	r1, r2
 801ee18:	602b      	str	r3, [r5, #0]
 801ee1a:	f7f2 f9b7 	bl	801118c <_fstat>
 801ee1e:	1c43      	adds	r3, r0, #1
 801ee20:	d102      	bne.n	801ee28 <_fstat_r+0x1c>
 801ee22:	682b      	ldr	r3, [r5, #0]
 801ee24:	b103      	cbz	r3, 801ee28 <_fstat_r+0x1c>
 801ee26:	6023      	str	r3, [r4, #0]
 801ee28:	bd38      	pop	{r3, r4, r5, pc}
 801ee2a:	bf00      	nop
 801ee2c:	20007d34 	.word	0x20007d34

0801ee30 <_isatty_r>:
 801ee30:	b538      	push	{r3, r4, r5, lr}
 801ee32:	2300      	movs	r3, #0
 801ee34:	4d05      	ldr	r5, [pc, #20]	@ (801ee4c <_isatty_r+0x1c>)
 801ee36:	4604      	mov	r4, r0
 801ee38:	4608      	mov	r0, r1
 801ee3a:	602b      	str	r3, [r5, #0]
 801ee3c:	f7f2 f9b6 	bl	80111ac <_isatty>
 801ee40:	1c43      	adds	r3, r0, #1
 801ee42:	d102      	bne.n	801ee4a <_isatty_r+0x1a>
 801ee44:	682b      	ldr	r3, [r5, #0]
 801ee46:	b103      	cbz	r3, 801ee4a <_isatty_r+0x1a>
 801ee48:	6023      	str	r3, [r4, #0]
 801ee4a:	bd38      	pop	{r3, r4, r5, pc}
 801ee4c:	20007d34 	.word	0x20007d34

0801ee50 <sqrt>:
 801ee50:	b538      	push	{r3, r4, r5, lr}
 801ee52:	ec55 4b10 	vmov	r4, r5, d0
 801ee56:	ed2d 8b02 	vpush	{d8}
 801ee5a:	f000 f825 	bl	801eea8 <__ieee754_sqrt>
 801ee5e:	4622      	mov	r2, r4
 801ee60:	462b      	mov	r3, r5
 801ee62:	4620      	mov	r0, r4
 801ee64:	4629      	mov	r1, r5
 801ee66:	eeb0 8a40 	vmov.f32	s16, s0
 801ee6a:	eef0 8a60 	vmov.f32	s17, s1
 801ee6e:	f7ed fe6d 	bl	800cb4c <__aeabi_dcmpun>
 801ee72:	b990      	cbnz	r0, 801ee9a <sqrt+0x4a>
 801ee74:	2200      	movs	r2, #0
 801ee76:	2300      	movs	r3, #0
 801ee78:	4620      	mov	r0, r4
 801ee7a:	4629      	mov	r1, r5
 801ee7c:	f7ed fe3e 	bl	800cafc <__aeabi_dcmplt>
 801ee80:	b158      	cbz	r0, 801ee9a <sqrt+0x4a>
 801ee82:	f7fd ff57 	bl	801cd34 <__errno>
 801ee86:	2321      	movs	r3, #33	@ 0x21
 801ee88:	2200      	movs	r2, #0
 801ee8a:	6003      	str	r3, [r0, #0]
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	4610      	mov	r0, r2
 801ee90:	4619      	mov	r1, r3
 801ee92:	f7ed fceb 	bl	800c86c <__aeabi_ddiv>
 801ee96:	ec41 0b18 	vmov	d8, r0, r1
 801ee9a:	eeb0 0a48 	vmov.f32	s0, s16
 801ee9e:	eef0 0a68 	vmov.f32	s1, s17
 801eea2:	ecbd 8b02 	vpop	{d8}
 801eea6:	bd38      	pop	{r3, r4, r5, pc}

0801eea8 <__ieee754_sqrt>:
 801eea8:	4a6b      	ldr	r2, [pc, #428]	@ (801f058 <__ieee754_sqrt+0x1b0>)
 801eeaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeae:	ec55 4b10 	vmov	r4, r5, d0
 801eeb2:	43aa      	bics	r2, r5
 801eeb4:	462b      	mov	r3, r5
 801eeb6:	4621      	mov	r1, r4
 801eeb8:	d110      	bne.n	801eedc <__ieee754_sqrt+0x34>
 801eeba:	4622      	mov	r2, r4
 801eebc:	4620      	mov	r0, r4
 801eebe:	4629      	mov	r1, r5
 801eec0:	f7ed fbaa 	bl	800c618 <__aeabi_dmul>
 801eec4:	4602      	mov	r2, r0
 801eec6:	460b      	mov	r3, r1
 801eec8:	4620      	mov	r0, r4
 801eeca:	4629      	mov	r1, r5
 801eecc:	f7ed f9ee 	bl	800c2ac <__adddf3>
 801eed0:	4604      	mov	r4, r0
 801eed2:	460d      	mov	r5, r1
 801eed4:	ec45 4b10 	vmov	d0, r4, r5
 801eed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eedc:	2d00      	cmp	r5, #0
 801eede:	dc0e      	bgt.n	801eefe <__ieee754_sqrt+0x56>
 801eee0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801eee4:	4322      	orrs	r2, r4
 801eee6:	d0f5      	beq.n	801eed4 <__ieee754_sqrt+0x2c>
 801eee8:	b19d      	cbz	r5, 801ef12 <__ieee754_sqrt+0x6a>
 801eeea:	4622      	mov	r2, r4
 801eeec:	4620      	mov	r0, r4
 801eeee:	4629      	mov	r1, r5
 801eef0:	f7ed f9da 	bl	800c2a8 <__aeabi_dsub>
 801eef4:	4602      	mov	r2, r0
 801eef6:	460b      	mov	r3, r1
 801eef8:	f7ed fcb8 	bl	800c86c <__aeabi_ddiv>
 801eefc:	e7e8      	b.n	801eed0 <__ieee754_sqrt+0x28>
 801eefe:	152a      	asrs	r2, r5, #20
 801ef00:	d115      	bne.n	801ef2e <__ieee754_sqrt+0x86>
 801ef02:	2000      	movs	r0, #0
 801ef04:	e009      	b.n	801ef1a <__ieee754_sqrt+0x72>
 801ef06:	0acb      	lsrs	r3, r1, #11
 801ef08:	3a15      	subs	r2, #21
 801ef0a:	0549      	lsls	r1, r1, #21
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d0fa      	beq.n	801ef06 <__ieee754_sqrt+0x5e>
 801ef10:	e7f7      	b.n	801ef02 <__ieee754_sqrt+0x5a>
 801ef12:	462a      	mov	r2, r5
 801ef14:	e7fa      	b.n	801ef0c <__ieee754_sqrt+0x64>
 801ef16:	005b      	lsls	r3, r3, #1
 801ef18:	3001      	adds	r0, #1
 801ef1a:	02dc      	lsls	r4, r3, #11
 801ef1c:	d5fb      	bpl.n	801ef16 <__ieee754_sqrt+0x6e>
 801ef1e:	1e44      	subs	r4, r0, #1
 801ef20:	1b12      	subs	r2, r2, r4
 801ef22:	f1c0 0420 	rsb	r4, r0, #32
 801ef26:	fa21 f404 	lsr.w	r4, r1, r4
 801ef2a:	4081      	lsls	r1, r0
 801ef2c:	4323      	orrs	r3, r4
 801ef2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ef32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801ef36:	07d2      	lsls	r2, r2, #31
 801ef38:	f04f 0600 	mov.w	r6, #0
 801ef3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ef40:	ea4f 0565 	mov.w	r5, r5, asr #1
 801ef44:	f04f 0016 	mov.w	r0, #22
 801ef48:	4632      	mov	r2, r6
 801ef4a:	bf58      	it	pl
 801ef4c:	005b      	lslpl	r3, r3, #1
 801ef4e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801ef52:	bf5c      	itt	pl
 801ef54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801ef58:	0049      	lslpl	r1, r1, #1
 801ef5a:	005b      	lsls	r3, r3, #1
 801ef5c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801ef60:	0049      	lsls	r1, r1, #1
 801ef62:	1917      	adds	r7, r2, r4
 801ef64:	429f      	cmp	r7, r3
 801ef66:	bfde      	ittt	le
 801ef68:	193a      	addle	r2, r7, r4
 801ef6a:	1bdb      	suble	r3, r3, r7
 801ef6c:	1936      	addle	r6, r6, r4
 801ef6e:	0fcf      	lsrs	r7, r1, #31
 801ef70:	3801      	subs	r0, #1
 801ef72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ef76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801ef7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ef7e:	d1f0      	bne.n	801ef62 <__ieee754_sqrt+0xba>
 801ef80:	4604      	mov	r4, r0
 801ef82:	2720      	movs	r7, #32
 801ef84:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ef88:	429a      	cmp	r2, r3
 801ef8a:	eb00 0e0c 	add.w	lr, r0, ip
 801ef8e:	db02      	blt.n	801ef96 <__ieee754_sqrt+0xee>
 801ef90:	d113      	bne.n	801efba <__ieee754_sqrt+0x112>
 801ef92:	458e      	cmp	lr, r1
 801ef94:	d811      	bhi.n	801efba <__ieee754_sqrt+0x112>
 801ef96:	f1be 0f00 	cmp.w	lr, #0
 801ef9a:	eb0e 000c 	add.w	r0, lr, ip
 801ef9e:	da43      	bge.n	801f028 <__ieee754_sqrt+0x180>
 801efa0:	2800      	cmp	r0, #0
 801efa2:	db41      	blt.n	801f028 <__ieee754_sqrt+0x180>
 801efa4:	f102 0801 	add.w	r8, r2, #1
 801efa8:	1a9b      	subs	r3, r3, r2
 801efaa:	458e      	cmp	lr, r1
 801efac:	4464      	add	r4, ip
 801efae:	eba1 010e 	sub.w	r1, r1, lr
 801efb2:	bf88      	it	hi
 801efb4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801efb8:	4642      	mov	r2, r8
 801efba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801efbe:	3f01      	subs	r7, #1
 801efc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801efc4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801efc8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801efcc:	d1dc      	bne.n	801ef88 <__ieee754_sqrt+0xe0>
 801efce:	4319      	orrs	r1, r3
 801efd0:	d01b      	beq.n	801f00a <__ieee754_sqrt+0x162>
 801efd2:	f8df a088 	ldr.w	sl, [pc, #136]	@ 801f05c <__ieee754_sqrt+0x1b4>
 801efd6:	f8df b088 	ldr.w	fp, [pc, #136]	@ 801f060 <__ieee754_sqrt+0x1b8>
 801efda:	e9da 0100 	ldrd	r0, r1, [sl]
 801efde:	e9db 2300 	ldrd	r2, r3, [fp]
 801efe2:	e9da 8900 	ldrd	r8, r9, [sl]
 801efe6:	f7ed f95f 	bl	800c2a8 <__aeabi_dsub>
 801efea:	4602      	mov	r2, r0
 801efec:	460b      	mov	r3, r1
 801efee:	4640      	mov	r0, r8
 801eff0:	4649      	mov	r1, r9
 801eff2:	f7ed fd8d 	bl	800cb10 <__aeabi_dcmple>
 801eff6:	b140      	cbz	r0, 801f00a <__ieee754_sqrt+0x162>
 801eff8:	f1b4 3fff 	cmp.w	r4, #4294967295
 801effc:	e9da 0100 	ldrd	r0, r1, [sl]
 801f000:	e9db 2300 	ldrd	r2, r3, [fp]
 801f004:	d112      	bne.n	801f02c <__ieee754_sqrt+0x184>
 801f006:	3601      	adds	r6, #1
 801f008:	463c      	mov	r4, r7
 801f00a:	1072      	asrs	r2, r6, #1
 801f00c:	07f1      	lsls	r1, r6, #31
 801f00e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801f012:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f016:	bf48      	it	mi
 801f018:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f01c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f020:	4618      	mov	r0, r3
 801f022:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f026:	e753      	b.n	801eed0 <__ieee754_sqrt+0x28>
 801f028:	4690      	mov	r8, r2
 801f02a:	e7bd      	b.n	801efa8 <__ieee754_sqrt+0x100>
 801f02c:	e9da 8900 	ldrd	r8, r9, [sl]
 801f030:	f7ed f93c 	bl	800c2ac <__adddf3>
 801f034:	4602      	mov	r2, r0
 801f036:	460b      	mov	r3, r1
 801f038:	4640      	mov	r0, r8
 801f03a:	4649      	mov	r1, r9
 801f03c:	f7ed fd5e 	bl	800cafc <__aeabi_dcmplt>
 801f040:	b128      	cbz	r0, 801f04e <__ieee754_sqrt+0x1a6>
 801f042:	1ca0      	adds	r0, r4, #2
 801f044:	f104 0402 	add.w	r4, r4, #2
 801f048:	bf08      	it	eq
 801f04a:	3601      	addeq	r6, #1
 801f04c:	e7dd      	b.n	801f00a <__ieee754_sqrt+0x162>
 801f04e:	1c63      	adds	r3, r4, #1
 801f050:	f023 0401 	bic.w	r4, r3, #1
 801f054:	e7d9      	b.n	801f00a <__ieee754_sqrt+0x162>
 801f056:	bf00      	nop
 801f058:	7ff00000 	.word	0x7ff00000
 801f05c:	20000288 	.word	0x20000288
 801f060:	20000280 	.word	0x20000280

0801f064 <_init>:
 801f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f066:	bf00      	nop
 801f068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f06a:	bc08      	pop	{r3}
 801f06c:	469e      	mov	lr, r3
 801f06e:	4770      	bx	lr

0801f070 <_fini>:
 801f070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f072:	bf00      	nop
 801f074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f076:	bc08      	pop	{r3}
 801f078:	469e      	mov	lr, r3
 801f07a:	4770      	bx	lr
