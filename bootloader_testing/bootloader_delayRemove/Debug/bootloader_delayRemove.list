
bootloader_delayRemove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe0  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800a22c  0800a22c  0000b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  0000c028  2**0
                  CONTENTS
  4 .ARM          00000008  0800a430  0800a430  0000b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a438  0800a438  0000c028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a438  0800a438  0000b438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a43c  0800a43c  0000b43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800a440  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000028  0800a468  0000c028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800a468  0000c1ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f5d  00000000  00000000  0000c05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002909  00000000  00000000  0001efbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000218c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fc  00000000  00000000  000225b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031d12  00000000  00000000  00022fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012caf  00000000  00000000  00054cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135ae7  00000000  00000000  0006796d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019d454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  0019d498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001a0984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a214 	.word	0x0800a214

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	0800a214 	.word	0x0800a214

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetSectorAndBank>:




// Function to calculate sector and bank from address
void GetSectorAndBank(uint32_t address, uint32_t *sector, uint32_t *bank) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
    if (address < FLASH_BASE_BANK2) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80005b6:	d209      	bcs.n	80005cc <GetSectorAndBank+0x28>
        // Address is in Bank 1
        *bank = FLASH_BANK_1;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
        *sector = (address - FLASH_BASE_BANK1) / FLASH_SECTOR_SIZE;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80005c4:	0b5a      	lsrs	r2, r3, #13
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	601a      	str	r2, [r3, #0]
    } else {
        // Address is in Bank 2
        *bank = FLASH_BANK_2;
        *sector = (address - FLASH_BASE_BANK2) / FLASH_SECTOR_SIZE;
    }
}
 80005ca:	e008      	b.n	80005de <GetSectorAndBank+0x3a>
        *bank = FLASH_BANK_2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2202      	movs	r2, #2
 80005d0:	601a      	str	r2, [r3, #0]
        *sector = (address - FLASH_BASE_BANK2) / FLASH_SECTOR_SIZE;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1a3 6301 	sub.w	r3, r3, #135266304	@ 0x8100000
 80005d8:	0b5a      	lsrs	r2, r3, #13
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <flash_erase>:
/**
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b08a      	sub	sp, #40	@ 0x28
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Unlock();
 80005f2:	f001 f9fb 	bl	80019ec <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
	uint32_t pageError = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	uint32_t sector, bank;
	while(address < 0x08100000)
 8000608:	e033      	b.n	8000672 <flash_erase+0x88>
	{
		// Calculate sector and bank from the address
		GetSectorAndBank(address, &sector, &bank);
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffc5 	bl	80005a4 <GetSectorAndBank>

		// Validate sector and address range
		if (sector >= FLASH_TOTAL_SECTORS || address > FLASH_BANK2_END_ADDRESS) {
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	2bff      	cmp	r3, #255	@ 0xff
 800061e:	d803      	bhi.n	8000628 <flash_erase+0x3e>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8000626:	d303      	bcc.n	8000630 <flash_erase+0x46>
			HAL_FLASH_Lock();
 8000628:	f001 fa06 	bl	8001a38 <HAL_FLASH_Lock>
			return FLASH_ERROR;
 800062c:	23ff      	movs	r3, #255	@ 0xff
 800062e:	e027      	b.n	8000680 <flash_erase+0x96>
		}

		// Configure the erase structure
		eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000630:	2304      	movs	r3, #4
 8000632:	61bb      	str	r3, [r7, #24]
		eraseInitStruct.Banks = bank;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	61fb      	str	r3, [r7, #28]
		eraseInitStruct.Sector = sector;
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	623b      	str	r3, [r7, #32]
		eraseInitStruct.NbSectors = 1;  // Erase one sector at a time
 800063c:	2301      	movs	r3, #1
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop

		// Perform Flash erase
		__disable_irq();

		if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 8000644:	f107 0214 	add.w	r2, r7, #20
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fb42 	bl	8001cd8 <HAL_FLASHEx_Erase>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <flash_erase+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
}
 800065c:	bf00      	nop
			__enable_irq();
			HAL_FLASH_Lock();
 800065e:	f001 f9eb 	bl	8001a38 <HAL_FLASH_Lock>
			return FLASH_ERROR;
 8000662:	23ff      	movs	r3, #255	@ 0xff
 8000664:	e00c      	b.n	8000680 <flash_erase+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
}
 8000668:	bf00      	nop
		}

		__enable_irq();
		address = address + 0x2000;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000670:	607b      	str	r3, [r7, #4]
	while(address < 0x08100000)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000678:	d3c7      	bcc.n	800060a <flash_erase+0x20>
	}

	HAL_FLASH_Lock();
 800067a:	f001 f9dd 	bl	8001a38 <HAL_FLASH_Lock>
	return FLASH_OK;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3728      	adds	r7, #40	@ 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <flash_jump_to_app>:
/**
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	//	 Function pointer to the address of the user application.
	fnc_ptr jump_to_app;
	jump_to_app =(fnc_ptr) (*(volatile uint32_t*) (FLASH_APP_START_ADDRESS + 4u));
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <flash_jump_to_app+0x2c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	607b      	str	r3, [r7, #4]

	HAL_DeInit();
 8000694:	f000 fdf2 	bl	800127c <HAL_DeInit>
	//	 Change the main stack pointer.
	__set_MSP(*(volatile uint32_t*) FLASH_APP_START_ADDRESS);
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <flash_jump_to_app+0x30>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f383 8808 	msr	MSP, r3
}
 80006a4:	bf00      	nop
	jump_to_app();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4798      	blx	r3
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0800c004 	.word	0x0800c004
 80006b8:	0800c000 	.word	0x0800c000

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c0:	f000 fdb4 	bl	800122c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c4:	f000 f84c 	bl	8000760 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c8:	f000 f906 	bl	80008d8 <MX_GPIO_Init>
	MX_UART5_Init();
 80006cc:	f000 f8b8 	bl	8000840 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	UART_InitAllHandlers();
 80006d0:	f000 f97a 	bl	80009c8 <UART_InitAllHandlers>
	if((IsBootloaderMode())){
 80006d4:	f000 f986 	bl	80009e4 <IsBootloaderMode>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00c      	beq.n	80006f8 <main+0x3c>
	uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 80006de:	4817      	ldr	r0, [pc, #92]	@ (800073c <main+0x80>)
 80006e0:	f000 fb6a 	bl	8000db8 <uart_transmit_str>
	uart_transmit_str((uint8_t*)"UART Bootloader\n\r");
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <main+0x84>)
 80006e6:	f000 fb67 	bl	8000db8 <uart_transmit_str>
	uart_transmit_str((uint8_t*)"Entering into bootloader mode, open Tera Term and send binary file in XMODEM mode\n\r");
 80006ea:	4816      	ldr	r0, [pc, #88]	@ (8000744 <main+0x88>)
 80006ec:	f000 fb64 	bl	8000db8 <uart_transmit_str>
	uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 80006f0:	4815      	ldr	r0, [pc, #84]	@ (8000748 <main+0x8c>)
 80006f2:	f000 fb61 	bl	8000db8 <uart_transmit_str>
 80006f6:	e001      	b.n	80006fc <main+0x40>
	}
	else{
		flash_jump_to_app();
 80006f8:	f7ff ffc6 	bl	8000688 <flash_jump_to_app>
	}
	circular_buffer_init(&uart_buffer);
 80006fc:	4813      	ldr	r0, [pc, #76]	@ (800074c <main+0x90>)
 80006fe:	f000 f9ab 	bl	8000a58 <circular_buffer_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
#if 1
		if((IsBootloaderMode())){
 8000702:	f000 f96f 	bl	80009e4 <IsBootloaderMode>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d013      	beq.n	8000734 <main+0x78>

			flash_erase(APPLICATION_START_ADDRESS);
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <main+0x94>)
 800070e:	f7ff ff6c 	bl	80005ea <flash_erase>
			uart_transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 8000712:	4810      	ldr	r0, [pc, #64]	@ (8000754 <main+0x98>)
 8000714:	f000 fb50 	bl	8000db8 <uart_transmit_str>
			xmodem_receive(&huart5);
 8000718:	480f      	ldr	r0, [pc, #60]	@ (8000758 <main+0x9c>)
 800071a:	f000 fbf3 	bl	8000f04 <xmodem_receive>
			HAL_Delay(wait_time);
 800071e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000722:	f000 fe8d 	bl	8001440 <HAL_Delay>
			circular_buffer_init(&uart_buffer);
 8000726:	4809      	ldr	r0, [pc, #36]	@ (800074c <main+0x90>)
 8000728:	f000 f996 	bl	8000a58 <circular_buffer_init>
			uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <main+0xa0>)
 800072e:	f000 fb43 	bl	8000db8 <uart_transmit_str>
 8000732:	e7e6      	b.n	8000702 <main+0x46>
		}
		else
//#else
			/*make sure your code is update into flash*/
			flash_jump_to_app();
 8000734:	f7ff ffa8 	bl	8000688 <flash_jump_to_app>
		if((IsBootloaderMode())){
 8000738:	e7e3      	b.n	8000702 <main+0x46>
 800073a:	bf00      	nop
 800073c:	0800a22c 	.word	0x0800a22c
 8000740:	0800a254 	.word	0x0800a254
 8000744:	0800a268 	.word	0x0800a268
 8000748:	0800a2bc 	.word	0x0800a2bc
 800074c:	200000dc 	.word	0x200000dc
 8000750:	0800c000 	.word	0x0800c000
 8000754:	0800a2e4 	.word	0x0800a2e4
 8000758:	20000044 	.word	0x20000044
 800075c:	0800a334 	.word	0x0800a334

08000760 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b09c      	sub	sp, #112	@ 0x70
 8000764:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2250      	movs	r2, #80	@ 0x50
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f009 fd16 	bl	800a1a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <SystemClock_Config+0xd8>)
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	4a2b      	ldr	r2, [pc, #172]	@ (8000838 <SystemClock_Config+0xd8>)
 800078c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000790:	6113      	str	r3, [r2, #16]
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <SystemClock_Config+0xd8>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079e:	bf00      	nop
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemClock_Config+0xd8>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d1f9      	bne.n	80007a0 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80007ba:	2303      	movs	r3, #3
 80007bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 80007c2:	2350      	movs	r3, #80	@ 0x50
 80007c4:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80007d2:	2308      	movs	r3, #8
 80007d4:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fce6 	bl	80021b4 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80007ee:	f000 f97e 	bl	8000aee <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	231f      	movs	r3, #31
 80007f4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f002 f907 	bl	8002a24 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800081c:	f000 f967 	bl	8000aee <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <SystemClock_Config+0xdc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000828:	4a04      	ldr	r2, [pc, #16]	@ (800083c <SystemClock_Config+0xdc>)
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	3770      	adds	r7, #112	@ 0x70
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	44020800 	.word	0x44020800
 800083c:	40022000 	.word	0x40022000

08000840 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8000844:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000846:	4a23      	ldr	r2, [pc, #140]	@ (80008d4 <MX_UART5_Init+0x94>)
 8000848:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800084a:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_UART5_Init+0x90>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_UART5_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_UART5_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_UART5_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_UART5_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8000888:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <MX_UART5_Init+0x90>)
 800088a:	f007 fc5f 	bl	800814c <HAL_UART_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8000894:	f000 f92b 	bl	8000aee <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <MX_UART5_Init+0x90>)
 800089c:	f009 fbb5 	bl	800a00a <HAL_UARTEx_SetTxFifoThreshold>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 80008a6:	f000 f922 	bl	8000aee <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <MX_UART5_Init+0x90>)
 80008ae:	f009 fbea 	bl	800a086 <HAL_UARTEx_SetRxFifoThreshold>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 80008b8:	f000 f919 	bl	8000aee <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_UART5_Init+0x90>)
 80008be:	f009 fb6b 	bl	8009f98 <HAL_UARTEx_DisableFifoMode>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80008c8:	f000 f911 	bl	8000aee <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000044 	.word	0x20000044
 80008d4:	40005000 	.word	0x40005000

080008d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <MX_GPIO_Init+0xe4>)
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	4a31      	ldr	r2, [pc, #196]	@ (80009bc <MX_GPIO_Init+0xe4>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008fe:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <MX_GPIO_Init+0xe4>)
 8000900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800090c:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800090e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000912:	4a2a      	ldr	r2, [pc, #168]	@ (80009bc <MX_GPIO_Init+0xe4>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800091e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <MX_GPIO_Init+0xe4>)
 8000932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800093c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800094a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094e:	4a1b      	ldr	r2, [pc, #108]	@ (80009bc <MX_GPIO_Init+0xe4>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800095a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_GPIO_Init+0xe4>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <MX_GPIO_Init+0xe4>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_GPIO_Init+0xe4>)
 8000978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : GPIO_3_Pin */
	GPIO_InitStruct.Pin = GPIO_3_Pin;
 8000984:	2310      	movs	r3, #16
 8000986:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480a      	ldr	r0, [pc, #40]	@ (80009c0 <MX_GPIO_Init+0xe8>)
 8000998:	f001 faa2 	bl	8001ee0 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_2_Pin */
	GPIO_InitStruct.Pin = GPIO_2_Pin;
 800099c:	2308      	movs	r3, #8
 800099e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_GPIO_Init+0xec>)
 80009b0:	f001 fa96 	bl	8001ee0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	@ 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	44020c00 	.word	0x44020c00
 80009c0:	42021000 	.word	0x42021000
 80009c4:	42020c00 	.word	0x42020c00

080009c8 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */

void UART_InitAllHandlers(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer[0], sizeof(uart5_rx_buffer));
 80009cc:	2201      	movs	r2, #1
 80009ce:	4903      	ldr	r1, [pc, #12]	@ (80009dc <UART_InitAllHandlers+0x14>)
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <UART_InitAllHandlers+0x18>)
 80009d2:	f007 fca9 	bl	8008328 <HAL_UART_Receive_IT>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	20000044 	.word	0x20000044

080009e4 <IsBootloaderMode>:
	// Lock the flash after erasing
	HAL_FLASH_Lock();
}

// Check if bootloader mode should run (e.g., check GPIO or specific condition)
bool IsBootloaderMode(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

	if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == 1)
 80009e8:	2108      	movs	r1, #8
 80009ea:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <IsBootloaderMode+0x2c>)
 80009ec:	f001 fbca 	bl	8002184 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d108      	bne.n	8000a08 <IsBootloaderMode+0x24>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 1)) {
 80009f6:	2110      	movs	r1, #16
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <IsBootloaderMode+0x30>)
 80009fa:	f001 fbc3 	bl	8002184 <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d101      	bne.n	8000a08 <IsBootloaderMode+0x24>
		return GPIO_PIN_RESET; // Enter bootloader if button is pressed
 8000a04:	2300      	movs	r3, #0
 8000a06:	e000      	b.n	8000a0a <IsBootloaderMode+0x26>
	} else
		return GPIO_PIN_SET;
 8000a08:	2301      	movs	r3, #1

}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	42020c00 	.word	0x42020c00
 8000a14:	42021000 	.word	0x42021000

08000a18 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART5) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_UART_RxCpltCallback+0x30>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10a      	bne.n	8000a40 <HAL_UART_RxCpltCallback+0x28>
		// Handle data received from UART5
		HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer[0], 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4907      	ldr	r1, [pc, #28]	@ (8000a4c <HAL_UART_RxCpltCallback+0x34>)
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <HAL_UART_RxCpltCallback+0x38>)
 8000a30:	f007 fc7a 	bl	8008328 <HAL_UART_Receive_IT>

		circular_buffer_write(&uart_buffer, uart5_rx_buffer[0]);
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HAL_UART_RxCpltCallback+0x34>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <HAL_UART_RxCpltCallback+0x3c>)
 8000a3c:	f000 f822 	bl	8000a84 <circular_buffer_write>
	}

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005000 	.word	0x40005000
 8000a4c:	200000d8 	.word	0x200000d8
 8000a50:	20000044 	.word	0x20000044
 8000a54:	200000dc 	.word	0x200000dc

08000a58 <circular_buffer_init>:

void circular_buffer_init(CircularBuffer *cb) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	cb->head = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	cb->tail = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	cb->full = false;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <circular_buffer_write>:



void circular_buffer_write(CircularBuffer *cb, uint8_t value) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	cb->data[cb->head] = value;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	78f9      	ldrb	r1, [r7, #3]
 8000a9a:	54d1      	strb	r1, [r2, r3]

	// Advance the head pointer
	cb->head = (cb->head + 1) % BUFFER_SIZE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	if (cb->full) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <circular_buffer_write+0x42>
		// If the buffer is full, advance the tail pointer
		cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000abc:	3301      	adds	r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	}

	// Check if the buffer is full
	cb->full = (cb->head == cb->tail);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	bf0c      	ite	eq
 8000ad6:	2301      	moveq	r3, #1
 8000ad8:	2300      	movne	r3, #0
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000af6:	bf00      	nop
 8000af8:	e7fd      	b.n	8000af6 <Error_Handler+0x8>

08000afa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0cc      	sub	sp, #304	@ 0x130
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b16:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b2c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b30:	4618      	mov	r0, r3
 8000b32:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000b36:	461a      	mov	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f009 fb31 	bl	800a1a0 <memset>
  if(huart->Instance==UART5)
 8000b3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a36      	ldr	r2, [pc, #216]	@ (8000c24 <HAL_UART_MspInit+0x11c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d164      	bne.n	8000c1a <HAL_UART_MspInit+0x112>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b54:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000b58:	f04f 0210 	mov.w	r2, #16
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fa97 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000b80:	f7ff ffb5 	bl	8000aee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b84:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <HAL_UART_MspInit+0x120>)
 8000b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b8a:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <HAL_UART_MspInit+0x120>)
 8000b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b94:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <HAL_UART_MspInit+0x120>)
 8000b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b9a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000b9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ba2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000bb0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <HAL_UART_MspInit+0x120>)
 8000bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <HAL_UART_MspInit+0x120>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_UART_MspInit+0x120>)
 8000bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc8:	f003 0202 	and.w	r2, r3, #2
 8000bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000bde:	681b      	ldr	r3, [r3, #0]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000bf8:	230e      	movs	r3, #14
 8000bfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <HAL_UART_MspInit+0x124>)
 8000c06:	f001 f96b 	bl	8001ee0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	203e      	movs	r0, #62	@ 0x3e
 8000c10:	f000 fcf2 	bl	80015f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c14:	203e      	movs	r0, #62	@ 0x3e
 8000c16:	f000 fd09 	bl	800162c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000c1a:	bf00      	nop
 8000c1c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40005000 	.word	0x40005000
 8000c28:	44020c00 	.word	0x44020c00
 8000c2c:	42020400 	.word	0x42020400

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	// Capture the register values during NMI
	uint32_t *stackFrame;
	__asm volatile(
 8000c36:	f01e 0f04 	tst.w	lr, #4
 8000c3a:	bf0c      	ite	eq
 8000c3c:	f3ef 8308 	mrseq	r3, MSP
 8000c40:	f3ef 8309 	mrsne	r3, PSP
 8000c44:	607b      	str	r3, [r7, #4]
//
//	// Send the message over UART (you can change huart1 to your actual UART handle)
//	HAL_UART_Transmit(&huart5, (uint8_t*) msg, len, HAL_MAX_DELAY);
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000c46:	bf00      	nop
 8000c48:	e7fd      	b.n	8000c46 <NMI_Handler+0x16>
	...

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {

    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  uart_transmit_str((uint8_t*)"\n\Failure\n\r");
 8000c50:	4801      	ldr	r0, [pc, #4]	@ (8000c58 <HardFault_Handler+0xc>)
 8000c52:	f000 f8b1 	bl	8000db8 <uart_transmit_str>
 8000c56:	e7fb      	b.n	8000c50 <HardFault_Handler+0x4>
 8000c58:	0800a3b0 	.word	0x0800a3b0

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 fbad 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <UART5_IRQHandler+0x10>)
 8000cb2:	f007 fb9b 	bl	80083ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000044 	.word	0x20000044

08000cc0 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */

void SystemInit(void) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
	uint32_t reg_opsr;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8000cc6:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <SystemInit+0xdc>)
 8000cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ccc:	4a33      	ldr	r2, [pc, #204]	@ (8000d9c <SystemInit+0xdc>)
 8000cce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR = RCC_CR_HSION;
 8000cd6:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <SystemInit+0xe0>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <SystemInit+0xe0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <SystemInit+0xe0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]

	/* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <SystemInit+0xe0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	492c      	ldr	r1, [pc, #176]	@ (8000da0 <SystemInit+0xe0>)
 8000cee:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <SystemInit+0xe4>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON |
			RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

	/* Reset PLLxCFGR register */
	RCC->PLL1CFGR = 0U;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <SystemInit+0xe0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL2CFGR = 0U;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <SystemInit+0xe0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
	RCC->PLL3CFGR = 0U;
 8000d00:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <SystemInit+0xe0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280U;
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <SystemInit+0xe0>)
 8000d08:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <SystemInit+0xe8>)
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000U;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <SystemInit+0xe0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	639a      	str	r2, [r3, #56]	@ 0x38
	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280U;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <SystemInit+0xe0>)
 8000d14:	4a24      	ldr	r2, [pc, #144]	@ (8000da8 <SystemInit+0xe8>)
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL2FRACR register */
	RCC->PLL2FRACR = 0x00000000U;
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <SystemInit+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280U;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <SystemInit+0xe0>)
 8000d20:	4a21      	ldr	r2, [pc, #132]	@ (8000da8 <SystemInit+0xe8>)
 8000d22:	645a      	str	r2, [r3, #68]	@ 0x44
	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000U;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <SystemInit+0xe0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <SystemInit+0xe0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <SystemInit+0xe0>)
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d34:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <SystemInit+0xe0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	651a      	str	r2, [r3, #80]	@ 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <SystemInit+0xdc>)
 8000d3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d42:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

	/* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
	reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <SystemInit+0xec>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d4c:	607b      	str	r3, [r7, #4]
	if ((reg_opsr == FLASH_OPSR_CODE_OP)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d54:	d003      	beq.n	8000d5e <SystemInit+0x9e>
			|| (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1))) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d5c:	d117      	bne.n	8000d8e <SystemInit+0xce>
		/* Check FLASH Option Control Register access */
		if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U) {
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <SystemInit+0xec>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <SystemInit+0xb6>
			/* Authorizes the Option Byte registers programming */
			FLASH->OPTKEYR = 0x08192A3BU;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <SystemInit+0xec>)
 8000d6c:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <SystemInit+0xf0>)
 8000d6e:	60da      	str	r2, [r3, #12]
			FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <SystemInit+0xec>)
 8000d72:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <SystemInit+0xf4>)
 8000d74:	60da      	str	r2, [r3, #12]
		}
		/* Launch the option bytes change operation */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <SystemInit+0xec>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <SystemInit+0xec>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	61d3      	str	r3, [r2, #28]

		/* Lock the FLASH Option Control Register access */
		FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <SystemInit+0xec>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a09      	ldr	r2, [pc, #36]	@ (8000dac <SystemInit+0xec>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	61d3      	str	r3, [r2, #28]
	}
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	44020c00 	.word	0x44020c00
 8000da4:	eae2eae3 	.word	0xeae2eae3
 8000da8:	01010280 	.word	0x01010280
 8000dac:	40022000 	.word	0x40022000
 8000db0:	08192a3b 	.word	0x08192a3b
 8000db4:	4c5d6e7f 	.word	0x4c5d6e7f

08000db8 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8000dc0:	23ff      	movs	r3, #255	@ 0xff
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8000dc8:	e002      	b.n	8000dd0 <uart_transmit_str+0x18>
  {
    length++;
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f6      	bne.n	8000dca <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart5, data, length, UART_TIMEOUT))
 8000ddc:	89ba      	ldrh	r2, [r7, #12]
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <uart_transmit_str+0x48>)
 8000de6:	f007 fa01 	bl	80081ec <HAL_UART_Transmit>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000044 	.word	0x20000044

08000e04 <calculate_crc>:
int circular_buffer_is_full(CircularBuffer *cb);
int circular_buffer_read_length(CircularBuffer *cb, uint8_t *dest, uint32_t length);
extern CircularBuffer uart_buffer;

/* CRC16 Calculation */
static uint16_t calculate_crc(const uint8_t *data, uint16_t length) {
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < length; i++) {
 8000e14:	2300      	movs	r3, #0
 8000e16:	81bb      	strh	r3, [r7, #12]
 8000e18:	e027      	b.n	8000e6a <calculate_crc+0x66>
		crc ^= (data[i] << 8);
 8000e1a:	89bb      	ldrh	r3, [r7, #12]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2a:	4053      	eors	r3, r2
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	72fb      	strb	r3, [r7, #11]
 8000e34:	e013      	b.n	8000e5e <calculate_crc+0x5a>
			if (crc & 0x8000) {
 8000e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	da09      	bge.n	8000e52 <calculate_crc+0x4e>
				crc = (crc << 1) ^ 0x1021;
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000e48:	f083 0301 	eor.w	r3, r3, #1
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	81fb      	strh	r3, [r7, #14]
 8000e50:	e002      	b.n	8000e58 <calculate_crc+0x54>
			} else {
				crc <<= 1;
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000e58:	7afb      	ldrb	r3, [r7, #11]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	72fb      	strb	r3, [r7, #11]
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	2b07      	cmp	r3, #7
 8000e62:	d9e8      	bls.n	8000e36 <calculate_crc+0x32>
	for (uint16_t i = 0; i < length; i++) {
 8000e64:	89bb      	ldrh	r3, [r7, #12]
 8000e66:	3301      	adds	r3, #1
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	89ba      	ldrh	r2, [r7, #12]
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3d3      	bcc.n	8000e1a <calculate_crc+0x16>
			}
		}
	}
	return crc;
 8000e72:	89fb      	ldrh	r3, [r7, #14]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <xmodem_receive_packet>:

/* Receive a single XMODEM packet */
static bool xmodem_receive_packet(UART_HandleTypeDef *huart, uint8_t *packet, uint8_t *packet_num) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	uint8_t header[3];
	uint16_t crc_received, crc_calculated;

	/* Wait for SOH */
	circular_buffer_read_length(&uart_buffer, &header[0], 3);
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	2203      	movs	r2, #3
 8000e92:	4619      	mov	r1, r3
 8000e94:	481a      	ldr	r0, [pc, #104]	@ (8000f00 <xmodem_receive_packet+0x80>)
 8000e96:	f000 f911 	bl	80010bc <circular_buffer_read_length>
	if(header[0] != SOH){
 8000e9a:	7e3b      	ldrb	r3, [r7, #24]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d001      	beq.n	8000ea4 <xmodem_receive_packet+0x24>
		return false;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e029      	b.n	8000ef8 <xmodem_receive_packet+0x78>
	}

	/* Read the packet data */
	if(circular_buffer_read_length(&uart_buffer, packet, 128) ){
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <xmodem_receive_packet+0x80>)
 8000eaa:	f000 f907 	bl	80010bc <circular_buffer_read_length>
		// return false;
	}

	/* Read the CRC */
	uint8_t crc_bytes[2];
	if(circular_buffer_read_length(&uart_buffer, crc_bytes, 2)) {
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <xmodem_receive_packet+0x80>)
 8000eb8:	f000 f900 	bl	80010bc <circular_buffer_read_length>
		//return false;
	}
	crc_received = (crc_bytes[0] << 8) | crc_bytes[1];
 8000ebc:	7d3b      	ldrb	r3, [r7, #20]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7d7b      	ldrb	r3, [r7, #21]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	83fb      	strh	r3, [r7, #30]

	/* Verify packet number and CRC */
	crc_calculated = calculate_crc(packet, PACKET_SIZE);
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	68b8      	ldr	r0, [r7, #8]
 8000ed0:	f7ff ff98 	bl	8000e04 <calculate_crc>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	83bb      	strh	r3, [r7, #28]
	if ((header[1] != (uint8_t)(~header[2])) || crc_calculated != crc_received) {
 8000ed8:	7e7a      	ldrb	r2, [r7, #25]
 8000eda:	7ebb      	ldrb	r3, [r7, #26]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d103      	bne.n	8000eec <xmodem_receive_packet+0x6c>
 8000ee4:	8bba      	ldrh	r2, [r7, #28]
 8000ee6:	8bfb      	ldrh	r3, [r7, #30]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d001      	beq.n	8000ef0 <xmodem_receive_packet+0x70>
		return false;
 8000eec:	2300      	movs	r3, #0
 8000eee:	e003      	b.n	8000ef8 <xmodem_receive_packet+0x78>
	}

	*packet_num = header[1];
 8000ef0:	7e7a      	ldrb	r2, [r7, #25]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	701a      	strb	r2, [r3, #0]
	return true;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000dc 	.word	0x200000dc

08000f04 <xmodem_receive>:

/* XMODEM Receive Function */
bool xmodem_receive(UART_HandleTypeDef *huart) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ac      	sub	sp, #176	@ 0xb0
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = FLASH_APP_START_ADDRESS;
 8000f0c:	4b67      	ldr	r3, [pc, #412]	@ (80010ac <xmodem_receive+0x1a8>)
 8000f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	uint8_t packet_num = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	uint8_t packet[PACKET_SIZE];
	bool transfer_active = false;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	bool packet_status = false;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
	/* Check for EOT */
	uint8_t eot;


	uint8_t response = 'C';
 8000f24:	2343      	movs	r3, #67	@ 0x43
 8000f26:	77bb      	strb	r3, [r7, #30]
//	HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
//	transfer_active = true;
#if 1
 // Continuously send 'C' to request transfer until the first valid packet is received
	while (!transfer_active) {
 8000f28:	e01d      	b.n	8000f66 <xmodem_receive+0x62>
		HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 8000f2a:	f107 011e 	add.w	r1, r7, #30
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	2201      	movs	r2, #1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f007 f959 	bl	80081ec <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000f3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f3e:	f000 fa7f 	bl	8001440 <HAL_Delay>
		// Attempt to receive a packet
		if (xmodem_receive_packet(huart, packet, &packet_num)) {
 8000f42:	f107 02a3 	add.w	r2, r7, #163	@ 0xa3
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff97 	bl	8000e80 <xmodem_receive_packet>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <xmodem_receive+0x62>
			transfer_active = true;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
			packet_status = true;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
			break;
 8000f64:	e006      	b.n	8000f74 <xmodem_receive+0x70>
	while (!transfer_active) {
 8000f66:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1da      	bne.n	8000f2a <xmodem_receive+0x26>
		}
	}
#endif

	while (transfer_active) {
 8000f74:	e090      	b.n	8001098 <xmodem_receive+0x194>
		/* Send NAK to start the transfer */
		//        uint8_t response = NAK;
		//        HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
		HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	@ 0x64
 8000f78:	f000 fa62 	bl	8001440 <HAL_Delay>
		/* Receive packets */
//		if (xmodem_receive_packet(huart, packet, &packet_num))
		if(packet_status == true || xmodem_receive_packet(huart, packet, &packet_num))
 8000f7c:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10a      	bne.n	8000f9a <xmodem_receive+0x96>
 8000f84:	f107 02a3 	add.w	r2, r7, #163	@ 0xa3
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff76 	bl	8000e80 <xmodem_receive_packet>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d04d      	beq.n	8001036 <xmodem_receive+0x132>
		{
			packet_status = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
			/* Write the packet to flash */
			for (uint32_t i = 0; i < PACKET_SIZE; i += 16) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000fa6:	e02d      	b.n	8001004 <xmodem_receive+0x100>
				// Prepare 16 bytes of data for FLASH_TYPEPROGRAM_QUADWORD
				uint64_t quadword[2]; // 16 bytes (128 bits)
				quadword[0] = *(uint64_t *)(packet + i);       // First 8 bytes
 8000fa8:	f107 0220 	add.w	r2, r7, #32
 8000fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
				quadword[1] = *(uint64_t *)(packet + i + 8);   // Next 8 bytes
 8000fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	f107 0220 	add.w	r2, r7, #32
 8000fc4:	4413      	add	r3, r2
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	e9c7 2304 	strd	r2, r3, [r7, #16]

				// Ensure the flash address is 16-byte aligned
				if (flash_address % 16 != 0) {
 8000fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d119      	bne.n	800100e <xmodem_receive+0x10a>
					// Handle alignment error (optional)
					break;
				}

				// Write 16 bytes to flash
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, flash_address, (uint32_t)quadword) != HAL_OK) {
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fc85 	bl	80018f4 <HAL_FLASH_Program>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d110      	bne.n	8001012 <xmodem_receive+0x10e>
					// Handle flash programming error
					break;
				}

				// Increment the address by 16 bytes for the next quadword
				flash_address += 16;
 8000ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ff4:	3310      	adds	r3, #16
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			for (uint32_t i = 0; i < PACKET_SIZE; i += 16) {
 8000ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ffe:	3310      	adds	r3, #16
 8001000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001004:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001008:	2b7f      	cmp	r3, #127	@ 0x7f
 800100a:	d9cd      	bls.n	8000fa8 <xmodem_receive+0xa4>
 800100c:	e002      	b.n	8001014 <xmodem_receive+0x110>
					break;
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <xmodem_receive+0x110>
					break;
 8001012:	bf00      	nop
			}


			/* Send ACK */

			response = ACK;
 8001014:	2306      	movs	r3, #6
 8001016:	77bb      	strb	r3, [r7, #30]
			HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 8001018:	f107 011e 	add.w	r1, r7, #30
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	2201      	movs	r2, #1
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f007 f8e2 	bl	80081ec <HAL_UART_Transmit>
			packet_num++;
 8001028:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800102c:	3301      	adds	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8001034:	e015      	b.n	8001062 <xmodem_receive+0x15e>

		}
		else {
			/* Send NAK for invalid packet */
			response = NAK;
 8001036:	2315      	movs	r3, #21
 8001038:	77bb      	strb	r3, [r7, #30]
			HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 800103a:	f107 011e 	add.w	r1, r7, #30
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2201      	movs	r2, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 f8d1 	bl	80081ec <HAL_UART_Transmit>
			circular_buffer_read_length(&uart_buffer, &eot,1);
 800104a:	f107 031f 	add.w	r3, r7, #31
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <xmodem_receive+0x1ac>)
 8001054:	f000 f832 	bl	80010bc <circular_buffer_read_length>
			//            uart_transmit_str((uint8_t*)"\n\rSuccess.\n\r");
			//            uart_transmit_str((uint8_t*)"\n\rSuccess\n\r");
			if (eot != EOT)
 8001058:	7ffb      	ldrb	r3, [r7, #31]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d001      	beq.n	8001062 <xmodem_receive+0x15e>
				return false;
 800105e:	2300      	movs	r3, #0
 8001060:	e020      	b.n	80010a4 <xmodem_receive+0x1a0>
		}


		if (eot == EOT) {
 8001062:	7ffb      	ldrb	r3, [r7, #31]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d117      	bne.n	8001098 <xmodem_receive+0x194>
			/* Send ACK and exit transfer */
			response = ACK;
 8001068:	2306      	movs	r3, #6
 800106a:	77bb      	strb	r3, [r7, #30]
			HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 800106c:	f107 011e 	add.w	r1, r7, #30
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	2201      	movs	r2, #1
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f007 f8b8 	bl	80081ec <HAL_UART_Transmit>
			(void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <xmodem_receive+0x1b0>)
 800107e:	f7ff fe9b 	bl	8000db8 <uart_transmit_str>
			(void)uart_transmit_str((uint8_t*)"Switch to Normal Mode...\n\r");
 8001082:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <xmodem_receive+0x1b4>)
 8001084:	f7ff fe98 	bl	8000db8 <uart_transmit_str>
//			(void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
			flash_jump_to_app();
 8001088:	f7ff fafe 	bl	8000688 <flash_jump_to_app>
			packet_status = false;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
			transfer_active = false;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	while (transfer_active) {
 8001098:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800109c:	2b00      	cmp	r3, #0
 800109e:	f47f af6a 	bne.w	8000f76 <xmodem_receive+0x72>
//			while(1);
		}
	}

	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	37b0      	adds	r7, #176	@ 0xb0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0800c000 	.word	0x0800c000
 80010b0:	200000dc 	.word	0x200000dc
 80010b4:	0800a3bc 	.word	0x0800a3bc
 80010b8:	0800a3d4 	.word	0x0800a3d4

080010bc <circular_buffer_read_length>:


int circular_buffer_read_length(CircularBuffer *cb, uint8_t *dest, uint32_t length) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	if (circular_buffer_is_empty(cb)) {
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f868 	bl	800119e <circular_buffer_is_empty>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <circular_buffer_read_length+0x1c>
		return false; // Buffer is empty
 80010d4:	2300      	movs	r3, #0
 80010d6:	e05e      	b.n	8001196 <circular_buffer_read_length+0xda>
	}

	// Calculate available data
	uint32_t available_data = cb->full ? BUFFER_SIZE : (cb->head >= cb->tail ? cb->head - cb->tail : BUFFER_SIZE - (cb->tail - cb->head));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <circular_buffer_read_length+0x2c>
 80010e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e6:	e018      	b.n	800111a <circular_buffer_read_length+0x5e>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d307      	bcc.n	8001108 <circular_buffer_read_length+0x4c>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	e008      	b.n	800111a <circular_buffer_read_length+0x5e>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800111a:	617b      	str	r3, [r7, #20]
	if (length > available_data) {
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	d901      	bls.n	8001128 <circular_buffer_read_length+0x6c>
		return false; // Not enough data
 8001124:	2300      	movs	r3, #0
 8001126:	e036      	b.n	8001196 <circular_buffer_read_length+0xda>
	}

	// Determine the number of bytes until the end of the buffer
	uint32_t bytes_to_end = BUFFER_SIZE - cb->tail;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800112e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001132:	613b      	str	r3, [r7, #16]

	if (length <= bytes_to_end) {
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d80a      	bhi.n	8001152 <circular_buffer_read_length+0x96>
		// All requested data is in a contiguous block
		memcpy(dest, &cb->data[cb->tail], length);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4619      	mov	r1, r3
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f009 f854 	bl	800a1f8 <memcpy>
 8001150:	e013      	b.n	800117a <circular_buffer_read_length+0xbe>
	} else {
		// Data wraps around, so split into two memcpy calls
		memcpy(dest, &cb->data[cb->tail], bytes_to_end);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4619      	mov	r1, r3
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f009 f849 	bl	800a1f8 <memcpy>
		memcpy(dest + bytes_to_end, &cb->data[0], length - bytes_to_end);
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	18d0      	adds	r0, r2, r3
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	461a      	mov	r2, r3
 8001176:	f009 f83f 	bl	800a1f8 <memcpy>
	}

	// Advance the tail pointer
	cb->tail = (cb->tail + length) % BUFFER_SIZE;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

	// Clear the full flag
	cb->full = false;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

	return true;
 8001194:	2301      	movs	r3, #1
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <circular_buffer_is_empty>:

int circular_buffer_is_full(CircularBuffer *cb) {
	return cb->full;
}

int circular_buffer_is_empty(CircularBuffer *cb) {
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return (cb->head == cb->tail && !cb->full);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d109      	bne.n	80011ca <circular_buffer_is_empty+0x2c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80011bc:	f083 0301 	eor.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <circular_buffer_is_empty+0x2c>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <circular_buffer_is_empty+0x2e>
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011dc:	f7ff fd70 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <LoopForever+0xe>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001224 <LoopForever+0x16>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001206:	f008 ffd3 	bl	800a1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800120a:	f7ff fa57 	bl	80006bc <main>

0800120e <LoopForever>:

LoopForever:
    b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
  ldr   r0, =_estack
 8001210:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800121c:	0800a440 	.word	0x0800a440
  ldr r2, =_sbss
 8001220:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001224:	200001ec 	.word	0x200001ec

08001228 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_IRQHandler>
	...

0800122c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f9d6 	bl	80015e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001236:	f001 fdad 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 800123a:	4602      	mov	r2, r0
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <HAL_Init+0x44>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	490b      	ldr	r1, [pc, #44]	@ (8001274 <HAL_Init+0x48>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_Init+0x4c>)
 800124e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001250:	2004      	movs	r0, #4
 8001252:	f000 fa1b 	bl	800168c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f85c 	bl	8001314 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e002      	b.n	800126c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001266:	f7ff fc48 	bl	8000afa <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	bd80      	pop	{r7, pc}
 8001270:	44020c00 	.word	0x44020c00
 8001274:	0800a3f0 	.word	0x0800a3f0
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_DeInit+0x68>)
 8001282:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_DeInit+0x6c>)
 8001284:	675a      	str	r2, [r3, #116]	@ 0x74
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_DeInit+0x68>)
 8001288:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <HAL_DeInit+0x70>)
 800128a:	679a      	str	r2, [r3, #120]	@ 0x78
  __HAL_RCC_APB1_RELEASE_RESET();
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_DeInit+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	675a      	str	r2, [r3, #116]	@ 0x74
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_DeInit+0x68>)
 8001294:	2200      	movs	r2, #0
 8001296:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_RCC_APB2_FORCE_RESET();
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_DeInit+0x68>)
 800129a:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <HAL_DeInit+0x74>)
 800129c:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_APB2_RELEASE_RESET();
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_DeInit+0x68>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_APB3_FORCE_RESET();
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_DeInit+0x68>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <HAL_DeInit+0x78>)
 80012a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_APB3_RELEASE_RESET();
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_DeInit+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB1_FORCE_RESET();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_DeInit+0x68>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	@ (80012f8 <HAL_DeInit+0x7c>)
 80012b8:	661a      	str	r2, [r3, #96]	@ 0x60
  __HAL_RCC_AHB1_RELEASE_RESET();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_DeInit+0x68>)
 80012bc:	2200      	movs	r2, #0
 80012be:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_RCC_AHB2_FORCE_RESET();
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_DeInit+0x68>)
 80012c2:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <HAL_DeInit+0x80>)
 80012c4:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_RCC_AHB2_RELEASE_RESET();
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <HAL_DeInit+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	665a      	str	r2, [r3, #100]	@ 0x64

#if defined(AHB4PERIPH_BASE)
  __HAL_RCC_AHB4_FORCE_RESET();
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_DeInit+0x68>)
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_DeInit+0x84>)
 80012d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __HAL_RCC_AHB4_RELEASE_RESET();
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <HAL_DeInit+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif /* AHB4PERIPH_BASE */

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80012d8:	f000 f814 	bl	8001304 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	44020c00 	.word	0x44020c00
 80012e8:	dffec1ff 	.word	0xdffec1ff
 80012ec:	4080062b 	.word	0x4080062b
 80012f0:	017f7800 	.word	0x017f7800
 80012f4:	001008e0 	.word	0x001008e0
 80012f8:	010ad003 	.word	0x010ad003
 80012fc:	001f1dff 	.word	0x001f1dff
 8001300:	00111880 	.word	0x00111880

08001304 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <HAL_InitTick+0xdc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e05c      	b.n	80013e6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800132c:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <HAL_InitTick+0xe0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b04      	cmp	r3, #4
 8001336:	d10c      	bne.n	8001352 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001338:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <HAL_InitTick+0xe4>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <HAL_InitTick+0xdc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e037      	b.n	80013c2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001352:	f000 f9f3 	bl	800173c <HAL_SYSTICK_GetCLKSourceConfig>
 8001356:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d023      	beq.n	80013a6 <HAL_InitTick+0x92>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d82d      	bhi.n	80013c0 <HAL_InitTick+0xac>
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_InitTick+0x5e>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d00d      	beq.n	800138c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001370:	e026      	b.n	80013c0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <HAL_InitTick+0xe4>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_InitTick+0xdc>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001380:	fbb3 f3f1 	udiv	r3, r3, r1
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	60fb      	str	r3, [r7, #12]
        break;
 800138a:	e01a      	b.n	80013c2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_InitTick+0xdc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001396:	fbb3 f3f2 	udiv	r3, r3, r2
 800139a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	60fb      	str	r3, [r7, #12]
        break;
 80013a4:	e00d      	b.n	80013c2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_InitTick+0xdc>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	60fb      	str	r3, [r7, #12]
        break;
 80013be:	e000      	b.n	80013c2 <HAL_InitTick+0xae>
        break;
 80013c0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f940 	bl	8001648 <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e009      	b.n	80013e6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d2:	2200      	movs	r2, #0
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	f000 f90d 	bl	80015f8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80013de:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <HAL_InitTick+0xe8>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	e000e010 	.word	0xe000e010
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	200001e8 	.word	0x200001e8

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200001e8 	.word	0x200001e8

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	@ (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ff4c 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001606:	f7ff ff63 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800160a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f7ff ffb3 	bl	800157c <NVIC_EncodePriority>
 8001616:	4602      	mov	r2, r0
 8001618:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff82 	bl	8001528 <__NVIC_SetPriority>
}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff56 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800165a:	2301      	movs	r3, #1
 800165c:	e00d      	b.n	800167a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_SYSTICK_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_SYSTICK_Config+0x40>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_SYSTICK_Config+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <HAL_SYSTICK_Config+0x40>)
 8001672:	f043 0303 	orr.w	r3, r3, #3
 8001676:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b04      	cmp	r3, #4
 8001698:	d844      	bhi.n	8001724 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800169a:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016c3 	.word	0x080016c3
 80016a4:	080016e1 	.word	0x080016e1
 80016a8:	08001703 	.word	0x08001703
 80016ac:	08001725 	.word	0x08001725
 80016b0:	080016b5 	.word	0x080016b5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6013      	str	r3, [r2, #0]
      break;
 80016c0:	e031      	b.n	8001726 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016d4:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016d6:	f023 030c 	bic.w	r3, r3, #12
 80016da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80016de:	e022      	b.n	8001726 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016e6:	f023 0304 	bic.w	r3, r3, #4
 80016ea:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016f2:	f023 030c 	bic.w	r3, r3, #12
 80016f6:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001700:	e011      	b.n	8001726 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001714:	f023 030c 	bic.w	r3, r3, #12
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001722:	e000      	b.n	8001726 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001724:	bf00      	nop
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010
 8001738:	44020c00 	.word	0x44020c00

0800173c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001742:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800174e:	2304      	movs	r3, #4
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e01e      	b.n	8001792 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b08      	cmp	r3, #8
 8001764:	d00f      	beq.n	8001786 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d80f      	bhi.n	800178c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d003      	beq.n	8001780 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001778:	e008      	b.n	800178c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
        break;
 800177e:	e008      	b.n	8001792 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001780:	2301      	movs	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
        break;
 8001784:	e005      	b.n	8001792 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001786:	2302      	movs	r3, #2
 8001788:	607b      	str	r3, [r7, #4]
        break;
 800178a:	e002      	b.n	8001792 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
        break;
 8001790:	bf00      	nop
    }
  }
  return systick_source;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e010 	.word	0xe000e010
 80017a4:	44020c00 	.word	0x44020c00

080017a8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80017b0:	f7ff fe3a 	bl	8001428 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e06b      	b.n	8001898 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d008      	beq.n	80017de <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e05c      	b.n	8001898 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0204 	orr.w	r2, r2, #4
 80017ec:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80017f6:	e020      	b.n	800183a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80017f8:	f7ff fe16 	bl	8001428 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b05      	cmp	r3, #5
 8001804:	d919      	bls.n	800183a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f043 0210 	orr.w	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2203      	movs	r2, #3
 8001816:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800181e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800182a:	2201      	movs	r2, #1
 800182c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e02e      	b.n	8001898 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0d7      	beq.n	80017f8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0202 	orr.w	r2, r2, #2
 8001856:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2204      	movs	r2, #4
 800185c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001868:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001882:	2201      	movs	r2, #1
 8001884:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e019      	b.n	80018e6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e00e      	b.n	80018e6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2204      	movs	r2, #4
 80018cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001900:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <HAL_FLASH_Program+0xe0>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_FLASH_Program+0x18>
 8001908:	2302      	movs	r3, #2
 800190a:	e05e      	b.n	80019ca <HAL_FLASH_Program+0xd6>
 800190c:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <HAL_FLASH_Program+0xe0>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
  HAL_FLASH_Unlock();
 8001912:	f000 f86b 	bl	80019ec <HAL_FLASH_Unlock>
  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_FLASH_Program+0xe0>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800191c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001920:	f000 f8a6 	bl	8001a70 <FLASH_WaitForLastOperation>
 8001924:	4603      	mov	r3, r0
 8001926:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d147      	bne.n	80019be <HAL_FLASH_Program+0xca>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 800192e:	4a29      	ldr	r2, [pc, #164]	@ (80019d4 <HAL_FLASH_Program+0xe0>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001934:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <HAL_FLASH_Program+0xe4>)
 8001936:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800193e:	2b02      	cmp	r3, #2
 8001940:	d104      	bne.n	800194c <HAL_FLASH_Program+0x58>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f000 f8e1 	bl	8001b0c <FLASH_Program_QuadWord>
 800194a:	e01b      	b.n	8001984 <HAL_FLASH_Program+0x90>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a23      	ldr	r2, [pc, #140]	@ (80019dc <HAL_FLASH_Program+0xe8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d003      	beq.n	800195c <HAL_FLASH_Program+0x68>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <HAL_FLASH_Program+0xec>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d104      	bne.n	8001966 <HAL_FLASH_Program+0x72>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 f954 	bl	8001c0c <FLASH_Program_QuadWord_OBK>
 8001964:	e00e      	b.n	8001984 <HAL_FLASH_Program+0x90>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <HAL_FLASH_Program+0xf0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d104      	bne.n	800197c <HAL_FLASH_Program+0x88>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f000 f995 	bl	8001ca4 <FLASH_Program_HalfWord>
 800197a:	e003      	b.n	8001984 <HAL_FLASH_Program+0x90>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 f990 	bl	8001ca4 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001988:	f000 f872 	bl	8001a70 <FLASH_WaitForLastOperation>
 800198c:	4603      	mov	r3, r0
 800198e:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	43db      	mvns	r3, r3
 80019a0:	401a      	ands	r2, r3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <HAL_FLASH_Program+0xec>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d107      	bne.n	80019be <HAL_FLASH_Program+0xca>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_FLASH_Program+0xf4>)
 80019b0:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0204 	bic.w	r2, r3, #4
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019be:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_FLASH_Program+0xe0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
  HAL_FLASH_Lock();
 80019c4:	f000 f838 	bl	8001a38 <HAL_FLASH_Lock>
  /* return status */
  return status;
 80019c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	40022028 	.word	0x40022028
 80019dc:	10000002 	.word	0x10000002
 80019e0:	10000006 	.word	0x10000006
 80019e4:	40000002 	.word	0x40000002
 80019e8:	40022040 	.word	0x40022040

080019ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_FLASH_Unlock+0x40>)
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_FLASH_Unlock+0x40>)
 8001a04:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_FLASH_Unlock+0x44>)
 8001a06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_FLASH_Unlock+0x40>)
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_FLASH_Unlock+0x48>)
 8001a0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_FLASH_Unlock+0x40>)
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	45670123 	.word	0x45670123
 8001a34:	cdef89ab 	.word	0xcdef89ab

08001a38 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_FLASH_Lock+0x34>)
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_FLASH_Lock+0x34>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <HAL_FLASH_Lock+0x34>)
 8001a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40022000 	.word	0x40022000

08001a70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fcd6 	bl	8001428 <HAL_GetTick>
 8001a7c:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <FLASH_WaitForLastOperation+0x90>)
 8001a80:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8001a82:	e010      	b.n	8001aa6 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8a:	d00c      	beq.n	8001aa6 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a8c:	f7ff fccc 	bl	8001428 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d302      	bcc.n	8001aa2 <FLASH_WaitForLastOperation+0x32>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e027      	b.n	8001af6 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030b 	and.w	r3, r3, #11
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1e8      	bne.n	8001a84 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <FLASH_WaitForLastOperation+0x94>)
 8001ab4:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 8001abe:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00c      	beq.n	8001ae0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <FLASH_WaitForLastOperation+0x98>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	4a0e      	ldr	r2, [pc, #56]	@ (8001b08 <FLASH_WaitForLastOperation+0x98>)
 8001ad0:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e00a      	b.n	8001af6 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40022020 	.word	0x40022020
 8001b04:	40022030 	.word	0x40022030
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <FLASH_Program_QuadWord>:
  * @brief  Program a quad-word (128-bit) at a specified address.
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    uint8_t index = 4;
 8001b16:	2304      	movs	r3, #4
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	623b      	str	r3, [r7, #32]
    uint32_t *src_addr  = (uint32_t *)DataAddress;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	61fb      	str	r3, [r7, #28]
    uint32_t primask_bit;
    __IO uint32_t *reg_cr;

    /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001b24:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <FLASH_Program_QuadWord+0xf8>)
 8001b26:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    /* Validate FlashAddress and DataAddress */
    if ((FlashAddress % 16) != 0 ) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d15f      	bne.n	8001bf2 <FLASH_Program_QuadWord+0xe6>
//        printf("Error: Address is not 16-byte aligned. FlashAddress: 0x%08X, DataAddress: 0x%08X\n", FlashAddress, DataAddress);
        return;
    }

    if (FlashAddress < FLASH_BASE || FlashAddress >= (FLASH_BASE + FLASH_SIZE)) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b38:	d35d      	bcc.n	8001bf6 <FLASH_Program_QuadWord+0xea>
 8001b3a:	4b33      	ldr	r3, [pc, #204]	@ (8001c08 <FLASH_Program_QuadWord+0xfc>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00c      	beq.n	8001b60 <FLASH_Program_QuadWord+0x54>
 8001b46:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <FLASH_Program_QuadWord+0xfc>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <FLASH_Program_QuadWord+0x4e>
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <FLASH_Program_QuadWord+0xfc>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001b58:	e004      	b.n	8001b64 <FLASH_Program_QuadWord+0x58>
 8001b5a:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 8001b5e:	e001      	b.n	8001b64 <FLASH_Program_QuadWord+0x58>
 8001b60:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d945      	bls.n	8001bf6 <FLASH_Program_QuadWord+0xea>
//        printf("Error: FlashAddress is out of range: 0x%08X\n", FlashAddress);
        return;
    }

    /* Ensure flash is ready */
    if (FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE) != HAL_OK) {
 8001b6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6e:	f7ff ff7f 	bl	8001a70 <FLASH_WaitForLastOperation>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d140      	bne.n	8001bfa <FLASH_Program_QuadWord+0xee>
//        printf("Error: Flash is busy or timeout occurred.\n");
        return;
    }

    /* Clear and set PG bit */
    if (READ_BIT((*reg_cr), FLASH_CR_PG)) {
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <FLASH_Program_QuadWord+0x84>
        CLEAR_BIT((*reg_cr), FLASH_CR_PG);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0202 	bic.w	r2, r3, #2
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]
    }
    SET_BIT((*reg_cr), FLASH_CR_PG);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f043 0202 	orr.w	r2, r3, #2
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8001ba2:	693b      	ldr	r3, [r7, #16]

    /* Enter critical section */
    primask_bit = __get_PRIMASK();
 8001ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba6:	b672      	cpsid	i
}
 8001ba8:	bf00      	nop
    __disable_irq();

    /* Program the quad-word */
    do {
        *dest_addr = *src_addr;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	61fb      	str	r3, [r7, #28]
        index--;
 8001bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    } while (index != 0U);
 8001bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ec      	bne.n	8001baa <FLASH_Program_QuadWord+0x9e>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f383 8810 	msr	PRIMASK, r3
}
 8001bda:	bf00      	nop

    /* Exit critical section */
    __set_PRIMASK(primask_bit);

    /* Wait for last operation to complete */
    if (FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE) != HAL_OK) {
 8001bdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be0:	f7ff ff46 	bl	8001a70 <FLASH_WaitForLastOperation>
//        printf("Error: Flash programming failed during post-operation.\n");
    }

    /* Clear PG bit */
    CLEAR_BIT((*reg_cr), FLASH_CR_PG);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 0202 	bic.w	r2, r3, #2
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e004      	b.n	8001bfc <FLASH_Program_QuadWord+0xf0>
        return;
 8001bf2:	bf00      	nop
 8001bf4:	e002      	b.n	8001bfc <FLASH_Program_QuadWord+0xf0>
        return;
 8001bf6:	bf00      	nop
 8001bf8:	e000      	b.n	8001bfc <FLASH_Program_QuadWord+0xf0>
        return;
 8001bfa:	bf00      	nop
}
 8001bfc:	3728      	adds	r7, #40	@ 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022028 	.word	0x40022028
 8001c08:	08fff80c 	.word	0x08fff80c

08001c0c <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	@ 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8001c16:	2304      	movs	r3, #4
 8001c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <FLASH_Program_QuadWord_OBK+0x8c>)
 8001c26:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <FLASH_Program_QuadWord_OBK+0x90>)
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <FLASH_Program_QuadWord_OBK+0x94>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c50:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001c52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	3304      	adds	r3, #4
 8001c64:	623b      	str	r3, [r7, #32]
    src_addr++;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	61fb      	str	r3, [r7, #28]
    index--;
 8001c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c70:	3b01      	subs	r3, #1
 8001c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8001c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ec      	bne.n	8001c58 <FLASH_Program_QuadWord_OBK+0x4c>
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f383 8810 	msr	PRIMASK, r3
}
 8001c88:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001c8a:	bf00      	nop
 8001c8c:	372c      	adds	r7, #44	@ 0x2c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40022028 	.word	0x40022028
 8001c9c:	40022040 	.word	0x40022040
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <FLASH_Program_HalfWord+0x30>)
 8001cb0:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	801a      	strh	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40022028 	.word	0x40022028

08001cd8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <HAL_FLASHEx_Erase+0xf4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_FLASHEx_Erase+0x16>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e06a      	b.n	8001dc4 <HAL_FLASHEx_Erase+0xec>
 8001cee:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <HAL_FLASHEx_Erase+0xf4>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cf4:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <HAL_FLASHEx_Erase+0xf4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001cfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cfe:	f7ff feb7 	bl	8001a70 <FLASH_WaitForLastOperation>
 8001d02:	4603      	mov	r3, r0
 8001d04:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d157      	bne.n	8001dbc <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2e      	ldr	r2, [pc, #184]	@ (8001dcc <HAL_FLASHEx_Erase+0xf4>)
 8001d12:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001d14:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <HAL_FLASHEx_Erase+0xf8>)
 8001d16:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d20:	f248 0208 	movw	r2, #32776	@ 0x8008
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d10b      	bne.n	8001d40 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f853 	bl	8001dd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d36:	f7ff fe9b 	bl	8001a70 <FLASH_WaitForLastOperation>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]
 8001d3e:	e033      	b.n	8001da8 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	@ (8001dd4 <HAL_FLASHEx_Erase+0xfc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d108      	bne.n	8001d5c <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8001d4a:	f000 f8b5 	bl	8001eb8 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d52:	f7ff fe8d 	bl	8001a70 <FLASH_WaitForLastOperation>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]
 8001d5a:	e025      	b.n	8001da8 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d62:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e015      	b.n	8001d98 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4619      	mov	r1, r3
 8001d72:	6938      	ldr	r0, [r7, #16]
 8001d74:	f000 f868 	bl	8001e48 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d7c:	f7ff fe78 	bl	8001a70 <FLASH_WaitForLastOperation>
 8001d80:	4603      	mov	r3, r0
 8001d82:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	601a      	str	r2, [r3, #0]
          break;
 8001d90:	e00a      	b.n	8001da8 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	3301      	adds	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3e1      	bcc.n	8001d6c <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_FLASHEx_Erase+0xf4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]

  return status;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	40022028 	.word	0x40022028
 8001dd4:	80000008 	.word	0x80000008

08001dd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <FLASH_MassErase+0x6c>)
 8001de2:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d108      	bne.n	8001e00 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df6:	f043 0320 	orr.w	r3, r3, #32
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8001dfe:	e01b      	b.n	8001e38 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e12:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001e16:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e30:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40022028 	.word	0x40022028

08001e48 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <FLASH_Erase_Sector+0x6c>)
 8001e54:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d011      	beq.n	8001e84 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e68:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	019b      	lsls	r3, r3, #6
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8001e82:	e010      	b.n	8001ea6 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e9e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6013      	str	r3, [r2, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40022028 	.word	0x40022028

08001eb8 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <FLASH_OBKErase+0x24>)
 8001ec0:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f043 0208 	orr.w	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40022040 	.word	0x40022040

08001ee0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001eee:	e136      	b.n	800215e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8128 	beq.w	8002158 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x38>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d125      	bne.n	8001f64 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d00b      	beq.n	8001fb8 <HAL_GPIO_Init+0xd8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fac:	2b11      	cmp	r3, #17
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b12      	cmp	r3, #18
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0201 	and.w	r2, r3, #1
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4013      	ands	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d07c      	beq.n	8002158 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800205e:	4a47      	ldr	r2, [pc, #284]	@ (800217c <HAL_GPIO_Init+0x29c>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3318      	adds	r3, #24
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4013      	ands	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0a9a      	lsrs	r2, r3, #10
 8002086:	4b3e      	ldr	r3, [pc, #248]	@ (8002180 <HAL_GPIO_Init+0x2a0>)
 8002088:	4013      	ands	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	f002 0203 	and.w	r2, r2, #3
 8002090:	00d2      	lsls	r2, r2, #3
 8002092:	4093      	lsls	r3, r2
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800209a:	4938      	ldr	r1, [pc, #224]	@ (800217c <HAL_GPIO_Init+0x29c>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3318      	adds	r3, #24
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80020a8:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_GPIO_Init+0x29c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80020cc:	4a2b      	ldr	r2, [pc, #172]	@ (800217c <HAL_GPIO_Init+0x29c>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80020d2:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <HAL_GPIO_Init+0x29c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43db      	mvns	r3, r3
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4013      	ands	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80020f6:	4a21      	ldr	r2, [pc, #132]	@ (800217c <HAL_GPIO_Init+0x29c>)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_GPIO_Init+0x29c>)
 80020fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002102:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4013      	ands	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002122:	4a16      	ldr	r2, [pc, #88]	@ (800217c <HAL_GPIO_Init+0x29c>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_GPIO_Init+0x29c>)
 800212c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002130:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4013      	ands	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002150:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_GPIO_Init+0x29c>)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	3301      	adds	r3, #1
 800215c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f aec1 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	44022000 	.word	0x44022000
 8002180:	002f7f7f 	.word	0x002f7f7f

08002184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f000 bc28 	b.w	8002a18 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c8:	4b94      	ldr	r3, [pc, #592]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 0318 	and.w	r3, r3, #24
 80021d0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80021d2:	4b92      	ldr	r3, [pc, #584]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d05b      	beq.n	80022a0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x46>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b18      	cmp	r3, #24
 80021f2:	d114      	bne.n	800221e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d111      	bne.n	800221e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f000 bc08 	b.w	8002a18 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002208:	4b84      	ldr	r3, [pc, #528]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	4981      	ldr	r1, [pc, #516]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002218:	4313      	orrs	r3, r2
 800221a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800221c:	e040      	b.n	80022a0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002226:	4b7d      	ldr	r3, [pc, #500]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7c      	ldr	r2, [pc, #496]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7ff f8f9 	bl	8001428 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800223a:	f7ff f8f5 	bl	8001428 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e3e5      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800224c:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002258:	4b70      	ldr	r3, [pc, #448]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	496d      	ldr	r1, [pc, #436]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002268:	4313      	orrs	r3, r2
 800226a:	618b      	str	r3, [r1, #24]
 800226c:	e018      	b.n	80022a0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800226e:	4b6b      	ldr	r3, [pc, #428]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6a      	ldr	r2, [pc, #424]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff f8d5 	bl	8001428 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002282:	f7ff f8d1 	bl	8001428 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e3c1      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002294:	4b61      	ldr	r3, [pc, #388]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a0 	beq.w	80023ee <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x10c>
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b18      	cmp	r3, #24
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 8092 	bne.w	80023ee <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e3a4      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x132>
 80022d8:	4b50      	ldr	r3, [pc, #320]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4f      	ldr	r2, [pc, #316]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e058      	b.n	8002398 <HAL_RCC_OscConfig+0x1e4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d112      	bne.n	8002314 <HAL_RCC_OscConfig+0x160>
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a47      	ldr	r2, [pc, #284]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002300:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b45      	ldr	r3, [pc, #276]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a44      	ldr	r2, [pc, #272]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e041      	b.n	8002398 <HAL_RCC_OscConfig+0x1e4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x190>
 800231e:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a3e      	ldr	r2, [pc, #248]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a3b      	ldr	r2, [pc, #236]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002330:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a38      	ldr	r2, [pc, #224]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e029      	b.n	8002398 <HAL_RCC_OscConfig+0x1e4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800234c:	d112      	bne.n	8002374 <HAL_RCC_OscConfig+0x1c0>
 800234e:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b30      	ldr	r3, [pc, #192]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2f      	ldr	r2, [pc, #188]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2c      	ldr	r2, [pc, #176]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e011      	b.n	8002398 <HAL_RCC_OscConfig+0x1e4>
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a28      	ldr	r2, [pc, #160]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b26      	ldr	r3, [pc, #152]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a25      	ldr	r2, [pc, #148]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a22      	ldr	r2, [pc, #136]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 8002392:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f842 	bl	8001428 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80023a8:	f7ff f83e 	bl	8001428 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e32e      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	4b18      	ldr	r3, [pc, #96]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1f4>
 80023c6:	e012      	b.n	80023ee <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f82e 	bl	8001428 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80023d0:	f7ff f82a 	bl	8001428 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e31a      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <HAL_RCC_OscConfig+0x268>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 809a 	beq.w	8002530 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x25a>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	2b18      	cmp	r3, #24
 8002406:	d149      	bne.n	800249c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d146      	bne.n	800249c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e2fe      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
 800241a:	bf00      	nop
 800241c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002426:	4b9a      	ldr	r3, [pc, #616]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0218 	and.w	r2, r3, #24
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	429a      	cmp	r2, r3
 8002434:	d014      	beq.n	8002460 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002436:	4b96      	ldr	r3, [pc, #600]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 0218 	bic.w	r2, r3, #24
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	4993      	ldr	r1, [pc, #588]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002448:	f000 fdd0 	bl	8002fec <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800244c:	4b91      	ldr	r3, [pc, #580]	@ (8002694 <HAL_RCC_OscConfig+0x4e0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe ff5f 	bl	8001314 <HAL_InitTick>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e2db      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe ffe2 	bl	8001428 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002468:	f7fe ffde 	bl	8001428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e2ce      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247a:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002486:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	497e      	ldr	r1, [pc, #504]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800249a:	e049      	b.n	8002530 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d02c      	beq.n	80024fe <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80024a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0218 	bic.w	r2, r3, #24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4977      	ldr	r1, [pc, #476]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80024b6:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe ffb1 	bl	8001428 <HAL_GetTick>
 80024c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80024ca:	f7fe ffad 	bl	8001428 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e29d      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80024e8:	4b69      	ldr	r3, [pc, #420]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	4966      	ldr	r1, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	610b      	str	r3, [r1, #16]
 80024fc:	e018      	b.n	8002530 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b64      	ldr	r3, [pc, #400]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a63      	ldr	r2, [pc, #396]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe ff8d 	bl	8001428 <HAL_GetTick>
 800250e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002512:	f7fe ff89 	bl	8001428 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e279      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002524:	4b5a      	ldr	r3, [pc, #360]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01c      	beq.n	800257e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002544:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254a:	4a51      	ldr	r2, [pc, #324]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800254c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002550:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe ff68 	bl	8001428 <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800255c:	f7fe ff64 	bl	8001428 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e254      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800256e:	4b48      	ldr	r3, [pc, #288]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ef      	beq.n	800255c <HAL_RCC_OscConfig+0x3a8>
 800257c:	e01b      	b.n	80025b6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002584:	4a42      	ldr	r2, [pc, #264]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800258a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe ff4b 	bl	8001428 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002596:	f7fe ff47 	bl	8001428 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e237      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80025a8:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 80025aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ef      	bne.n	8002596 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80d2 	beq.w	8002768 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80025c4:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_RCC_OscConfig+0x4e4>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d118      	bne.n	8002602 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80025d0:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <HAL_RCC_OscConfig+0x4e4>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	4a30      	ldr	r2, [pc, #192]	@ (8002698 <HAL_RCC_OscConfig+0x4e4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025dc:	f7fe ff24 	bl	8001428 <HAL_GetTick>
 80025e0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe ff20 	bl	8001428 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e210      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80025f6:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <HAL_RCC_OscConfig+0x4e4>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x468>
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002610:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800261a:	e074      	b.n	8002706 <HAL_RCC_OscConfig+0x552>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d118      	bne.n	8002656 <HAL_RCC_OscConfig+0x4a2>
 8002624:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800262a:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800263a:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800263c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002640:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800264a:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002654:	e057      	b.n	8002706 <HAL_RCC_OscConfig+0x552>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d11e      	bne.n	800269c <HAL_RCC_OscConfig+0x4e8>
 800265e:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002674:	4a06      	ldr	r2, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800267a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002684:	4a02      	ldr	r2, [pc, #8]	@ (8002690 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800268e:	e03a      	b.n	8002706 <HAL_RCC_OscConfig+0x552>
 8002690:	44020c00 	.word	0x44020c00
 8002694:	20000004 	.word	0x20000004
 8002698:	44020800 	.word	0x44020800
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b85      	cmp	r3, #133	@ 0x85
 80026a2:	d118      	bne.n	80026d6 <HAL_RCC_OscConfig+0x522>
 80026a4:	4ba2      	ldr	r3, [pc, #648]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026aa:	4aa1      	ldr	r2, [pc, #644]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026b4:	4b9e      	ldr	r3, [pc, #632]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ba:	4a9d      	ldr	r2, [pc, #628]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026c4:	4b9a      	ldr	r3, [pc, #616]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ca:	4a99      	ldr	r2, [pc, #612]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026d4:	e017      	b.n	8002706 <HAL_RCC_OscConfig+0x552>
 80026d6:	4b96      	ldr	r3, [pc, #600]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026dc:	4a94      	ldr	r2, [pc, #592]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026e6:	4b92      	ldr	r3, [pc, #584]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ec:	4a90      	ldr	r2, [pc, #576]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026fc:	4a8c      	ldr	r2, [pc, #560]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80026fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fe8b 	bl	8001428 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fe87 	bl	8001428 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e175      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	4b80      	ldr	r3, [pc, #512]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800272e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ed      	beq.n	8002716 <HAL_RCC_OscConfig+0x562>
 800273a:	e015      	b.n	8002768 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fe74 	bl	8001428 <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fe70 	bl	8001428 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e15e      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275a:	4b75      	ldr	r3, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800275c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ed      	bne.n	8002744 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d036      	beq.n	80027e2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d019      	beq.n	80027b0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800277c:	4b6c      	ldr	r3, [pc, #432]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6b      	ldr	r2, [pc, #428]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002782:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fe4e 	bl	8001428 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002790:	f7fe fe4a 	bl	8001428 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e13a      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80027a2:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x5dc>
 80027ae:	e018      	b.n	80027e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80027b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fe34 	bl	8001428 <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80027c4:	f7fe fe30 	bl	8001428 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e120      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80027d6:	4b56      	ldr	r3, [pc, #344]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8115 	beq.w	8002a16 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b18      	cmp	r3, #24
 80027f0:	f000 80af 	beq.w	8002952 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f040 8086 	bne.w	800290a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80027fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4b      	ldr	r2, [pc, #300]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fe0d 	bl	8001428 <HAL_GetTick>
 800280e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002812:	f7fe fe09 	bl	8001428 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0f9      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002824:	4b42      	ldr	r3, [pc, #264]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002830:	4b3f      	ldr	r3, [pc, #252]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002838:	f023 0303 	bic.w	r3, r3, #3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002844:	0212      	lsls	r2, r2, #8
 8002846:	430a      	orrs	r2, r1
 8002848:	4939      	ldr	r1, [pc, #228]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	628b      	str	r3, [r1, #40]	@ 0x28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	3b01      	subs	r3, #1
 8002854:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	3b01      	subs	r3, #1
 800285e:	025b      	lsls	r3, r3, #9
 8002860:	b29b      	uxth	r3, r3
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	3b01      	subs	r3, #1
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	3b01      	subs	r3, #1
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800287e:	492c      	ldr	r1, [pc, #176]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002884:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	4a29      	ldr	r2, [pc, #164]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800288a:	f023 0310 	bic.w	r3, r3, #16
 800288e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002894:	4a26      	ldr	r2, [pc, #152]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800289a:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	4a24      	ldr	r2, [pc, #144]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028a0:	f043 0310 	orr.w	r3, r3, #16
 80028a4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80028a6:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	f023 020c 	bic.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	491f      	ldr	r1, [pc, #124]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	f023 0220 	bic.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c4:	491a      	ldr	r1, [pc, #104]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80028d6:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a15      	ldr	r2, [pc, #84]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fda1 	bl	8001428 <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fd9d 	bl	8001428 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e08d      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x736>
 8002908:	e085      	b.n	8002a16 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a08      	ldr	r2, [pc, #32]	@ (8002930 <HAL_RCC_OscConfig+0x77c>)
 8002910:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe fd87 	bl	8001428 <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800291e:	f7fe fd83 	bl	8001428 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d903      	bls.n	8002934 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e073      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
 8002930:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002934:	4b3a      	ldr	r3, [pc, #232]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ee      	bne.n	800291e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002940:	4b37      	ldr	r3, [pc, #220]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	4a36      	ldr	r2, [pc, #216]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002946:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	6293      	str	r3, [r2, #40]	@ 0x28
 8002950:	e061      	b.n	8002a16 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002952:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002958:	4b31      	ldr	r3, [pc, #196]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 800295a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	2b01      	cmp	r3, #1
 8002964:	d031      	beq.n	80029ca <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d12a      	bne.n	80029ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d122      	bne.n	80029ca <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d11a      	bne.n	80029ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	0a5b      	lsrs	r3, r3, #9
 8002998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d111      	bne.n	80029ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d108      	bne.n	80029ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	0e1b      	lsrs	r3, r3, #24
 80029bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e024      	b.n	8002a18 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80029dc:	429a      	cmp	r2, r3
 80029de:	d01a      	beq.n	8002a16 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80029e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 80029e6:	f023 0310 	bic.w	r3, r3, #16
 80029ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fd1c 	bl	8001428 <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80029f2:	bf00      	nop
 80029f4:	f7fe fd18 	bl	8001428 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d0f9      	beq.n	80029f4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	4a06      	ldr	r2, [pc, #24]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_RCC_OscConfig+0x86c>)
 8002a10:	f043 0310 	orr.w	r3, r3, #16
 8002a14:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	44020c00 	.word	0x44020c00

08002a24 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e19e      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b83      	ldr	r3, [pc, #524]	@ (8002c48 <HAL_RCC_ClockConfig+0x224>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d910      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b80      	ldr	r3, [pc, #512]	@ (8002c48 <HAL_RCC_ClockConfig+0x224>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 020f 	bic.w	r2, r3, #15
 8002a4e:	497e      	ldr	r1, [pc, #504]	@ (8002c48 <HAL_RCC_ClockConfig+0x224>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b7c      	ldr	r3, [pc, #496]	@ (8002c48 <HAL_RCC_ClockConfig+0x224>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e186      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	4b74      	ldr	r3, [pc, #464]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d909      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002a86:	4b71      	ldr	r3, [pc, #452]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	496d      	ldr	r1, [pc, #436]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d909      	bls.n	8002acc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002ab8:	4b64      	ldr	r3, [pc, #400]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	4961      	ldr	r1, [pc, #388]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b5b      	ldr	r3, [pc, #364]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d908      	bls.n	8002afa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ae8:	4b58      	ldr	r3, [pc, #352]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4955      	ldr	r1, [pc, #340]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d908      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b16:	4b4d      	ldr	r3, [pc, #308]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f023 020f 	bic.w	r2, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	494a      	ldr	r1, [pc, #296]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8093 	beq.w	8002c5c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b3e:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e113      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d115      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e107      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002b6e:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0fb      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7e:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0f3      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	492c      	ldr	r1, [pc, #176]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fc42 	bl	8001428 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d112      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe fc3a 	bl	8001428 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0d7      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0318 	and.w	r3, r3, #24
 8002bce:	2b18      	cmp	r3, #24
 8002bd0:	d1ee      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x18c>
 8002bd2:	e043      	b.n	8002c5c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d112      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bde:	f7fe fc23 	bl	8001428 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0c0      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf4:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f003 0318 	and.w	r3, r3, #24
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d1ee      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
 8002c00:	e02c      	b.n	8002c5c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d122      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe fc0c 	bl	8001428 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0a9      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x228>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0318 	and.w	r3, r3, #24
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x1e8>
 8002c2e:	e015      	b.n	8002c5c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe fbfa 	bl	8001428 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d906      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e097      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c50:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0318 	and.w	r3, r3, #24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e9      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	4b44      	ldr	r3, [pc, #272]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d208      	bcs.n	8002c8a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002c78:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f023 020f 	bic.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	493e      	ldr	r1, [pc, #248]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <HAL_RCC_ClockConfig+0x360>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d210      	bcs.n	8002cba <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c98:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <HAL_RCC_ClockConfig+0x360>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 020f 	bic.w	r2, r3, #15
 8002ca0:	4938      	ldr	r1, [pc, #224]	@ (8002d84 <HAL_RCC_ClockConfig+0x360>)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca8:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_RCC_ClockConfig+0x360>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e05d      	b.n	8002d76 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d208      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4927      	ldr	r1, [pc, #156]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d209      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	491a      	ldr	r1, [pc, #104]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d209      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002d38:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	490e      	ldr	r1, [pc, #56]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d4c:	f000 f822 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490b      	ldr	r1, [pc, #44]	@ (8002d88 <HAL_RCC_ClockConfig+0x364>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_RCC_ClockConfig+0x368>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_RCC_ClockConfig+0x36c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fad2 	bl	8001314 <HAL_InitTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002d74:	7afb      	ldrb	r3, [r7, #11]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	44020c00 	.word	0x44020c00
 8002d84:	40022000 	.word	0x40022000
 8002d88:	0800a3f0 	.word	0x0800a3f0
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	@ 0x24
 8002d98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002d9a:	4b8c      	ldr	r3, [pc, #560]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0318 	and.w	r3, r3, #24
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002da6:	4b8a      	ldr	r3, [pc, #552]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e107      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dac:	4b87      	ldr	r3, [pc, #540]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 0318 	and.w	r3, r3, #24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d112      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002db8:	4b84      	ldr	r3, [pc, #528]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002dc4:	4b81      	ldr	r3, [pc, #516]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	4a81      	ldr	r2, [pc, #516]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e0f1      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e0ee      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dde:	4b7b      	ldr	r3, [pc, #492]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0318 	and.w	r3, r3, #24
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dea:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x244>)
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e0e5      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4b76      	ldr	r3, [pc, #472]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f003 0318 	and.w	r3, r3, #24
 8002df8:	2b18      	cmp	r3, #24
 8002dfa:	f040 80dd 	bne.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002dfe:	4b73      	ldr	r3, [pc, #460]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002e08:	4b70      	ldr	r3, [pc, #448]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002e14:	4b6d      	ldr	r3, [pc, #436]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e20:	4b6a      	ldr	r3, [pc, #424]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e38:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80b7 	beq.w	8002fb2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0xbe>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d056      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x16a>
 8002e50:	e077      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e52:	4b5e      	ldr	r3, [pc, #376]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02d      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e88:	4b50      	ldr	r3, [pc, #320]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e98:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x248>
 8002ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002eb8:	e065      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002fe0 <HAL_RCC_GetSysClockFreq+0x24c>
 8002ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002edc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x248>
 8002ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002efc:	e043      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f08:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002fe4 <HAL_RCC_GetSysClockFreq+0x250>
 8002f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f10:	4b2e      	ldr	r3, [pc, #184]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f20:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f24:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x248>
 8002f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002f40:	e021      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002fe8 <HAL_RCC_GetSysClockFreq+0x254>
 8002f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f68:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002fdc <HAL_RCC_GetSysClockFreq+0x248>
 8002f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f80:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f84:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002f86:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x238>)
 8002f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8a:	0a5b      	lsrs	r3, r3, #9
 8002f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f90:	3301      	adds	r3, #1
 8002f92:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f9e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002faa:	ee17 3a90 	vmov	r3, s15
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	e004      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e001      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fba:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	44020c00 	.word	0x44020c00
 8002fd0:	003d0900 	.word	0x003d0900
 8002fd4:	03d09000 	.word	0x03d09000
 8002fd8:	017d7840 	.word	0x017d7840
 8002fdc:	46000000 	.word	0x46000000
 8002fe0:	4c742400 	.word	0x4c742400
 8002fe4:	4bbebc20 	.word	0x4bbebc20
 8002fe8:	4a742400 	.word	0x4a742400

08002fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ff0:	f7ff fed0 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002ffa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ffe:	4907      	ldr	r1, [pc, #28]	@ (800301c <HAL_RCC_GetHCLKFreq+0x30>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003002:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <HAL_RCC_GetHCLKFreq+0x34>)
 800300c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800300e:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <HAL_RCC_GetHCLKFreq+0x34>)
 8003010:	681b      	ldr	r3, [r3, #0]
}
 8003012:	4618      	mov	r0, r3
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	44020c00 	.word	0x44020c00
 800301c:	0800a3f0 	.word	0x0800a3f0
 8003020:	20000000 	.word	0x20000000

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003028:	f7ff ffe0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	@ (800304c <HAL_RCC_GetPCLK1Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	44020c00 	.word	0x44020c00
 800304c:	0800a400 	.word	0x0800a400

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003054:	f7ff ffca 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4904      	ldr	r1, [pc, #16]	@ (8003078 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	44020c00 	.word	0x44020c00
 8003078:	0800a400 	.word	0x0800a400

0800307c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003080:	f7ff ffb4 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	0b1b      	lsrs	r3, r3, #12
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	44020c00 	.word	0x44020c00
 80030a4:	0800a400 	.word	0x0800a400

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b0d8      	sub	sp, #352	@ 0x160
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80030cc:	2500      	movs	r5, #0
 80030ce:	ea54 0305 	orrs.w	r3, r4, r5
 80030d2:	d00b      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80030d4:	4bcd      	ldr	r3, [pc, #820]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030da:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80030de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	4ac9      	ldr	r2, [pc, #804]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f002 0801 	and.w	r8, r2, #1
 80030f8:	f04f 0900 	mov.w	r9, #0
 80030fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003100:	d042      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003108:	2b05      	cmp	r3, #5
 800310a:	d823      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800310c:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	0800315d 	.word	0x0800315d
 8003118:	0800312d 	.word	0x0800312d
 800311c:	08003141 	.word	0x08003141
 8003120:	0800315d 	.word	0x0800315d
 8003124:	0800315d 	.word	0x0800315d
 8003128:	0800315d 	.word	0x0800315d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800312c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003130:	3308      	adds	r3, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f004 feda 	bl	8007eec <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800313e:	e00e      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003144:	3330      	adds	r3, #48	@ 0x30
 8003146:	4618      	mov	r0, r3
 8003148:	f004 ff68 	bl	800801c <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003166:	4ba9      	ldr	r3, [pc, #676]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800316c:	f023 0107 	bic.w	r1, r3, #7
 8003170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	4aa5      	ldr	r2, [pc, #660]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003178:	430b      	orrs	r3, r1
 800317a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800317e:	e003      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003184:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f002 0a02 	and.w	sl, r2, #2
 8003194:	f04f 0b00 	mov.w	fp, #0
 8003198:	ea5a 030b 	orrs.w	r3, sl, fp
 800319c:	f000 8088 	beq.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80031a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	2b28      	cmp	r3, #40	@ 0x28
 80031a8:	d868      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80031aa:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	08003285 	.word	0x08003285
 80031b4:	0800327d 	.word	0x0800327d
 80031b8:	0800327d 	.word	0x0800327d
 80031bc:	0800327d 	.word	0x0800327d
 80031c0:	0800327d 	.word	0x0800327d
 80031c4:	0800327d 	.word	0x0800327d
 80031c8:	0800327d 	.word	0x0800327d
 80031cc:	0800327d 	.word	0x0800327d
 80031d0:	08003255 	.word	0x08003255
 80031d4:	0800327d 	.word	0x0800327d
 80031d8:	0800327d 	.word	0x0800327d
 80031dc:	0800327d 	.word	0x0800327d
 80031e0:	0800327d 	.word	0x0800327d
 80031e4:	0800327d 	.word	0x0800327d
 80031e8:	0800327d 	.word	0x0800327d
 80031ec:	0800327d 	.word	0x0800327d
 80031f0:	08003269 	.word	0x08003269
 80031f4:	0800327d 	.word	0x0800327d
 80031f8:	0800327d 	.word	0x0800327d
 80031fc:	0800327d 	.word	0x0800327d
 8003200:	0800327d 	.word	0x0800327d
 8003204:	0800327d 	.word	0x0800327d
 8003208:	0800327d 	.word	0x0800327d
 800320c:	0800327d 	.word	0x0800327d
 8003210:	08003285 	.word	0x08003285
 8003214:	0800327d 	.word	0x0800327d
 8003218:	0800327d 	.word	0x0800327d
 800321c:	0800327d 	.word	0x0800327d
 8003220:	0800327d 	.word	0x0800327d
 8003224:	0800327d 	.word	0x0800327d
 8003228:	0800327d 	.word	0x0800327d
 800322c:	0800327d 	.word	0x0800327d
 8003230:	08003285 	.word	0x08003285
 8003234:	0800327d 	.word	0x0800327d
 8003238:	0800327d 	.word	0x0800327d
 800323c:	0800327d 	.word	0x0800327d
 8003240:	0800327d 	.word	0x0800327d
 8003244:	0800327d 	.word	0x0800327d
 8003248:	0800327d 	.word	0x0800327d
 800324c:	0800327d 	.word	0x0800327d
 8003250:	08003285 	.word	0x08003285
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003258:	3308      	adds	r3, #8
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fe46 	bl	8007eec <RCCEx_PLL2_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003266:	e00e      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800326c:	3330      	adds	r3, #48	@ 0x30
 800326e:	4618      	mov	r0, r3
 8003270:	f004 fed4 	bl	800801c <RCCEx_PLL3_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800327a:	e004      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003286:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800328e:	4b5f      	ldr	r3, [pc, #380]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003294:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	4a5b      	ldr	r2, [pc, #364]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032a6:	e003      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f002 0304 	and.w	r3, r2, #4
 80032bc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80032c6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d04e      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80032d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032da:	d02c      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80032dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032e0:	d825      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e6:	d028      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ec:	d81f      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f0:	d025      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80032f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f4:	d81b      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d00f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d817      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01f      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	d113      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800330a:	3308      	adds	r3, #8
 800330c:	4618      	mov	r0, r3
 800330e:	f004 fded 	bl	8007eec <RCCEx_PLL2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003318:	e014      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800331a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800331e:	3330      	adds	r3, #48	@ 0x30
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fe7b 	bl	800801c <RCCEx_PLL3_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800332c:	e00a      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003336:	bf00      	nop
 8003338:	e004      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800333a:	bf00      	nop
 800333c:	e002      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003344:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10c      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800334c:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800334e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003352:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003356:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800335a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800335c:	4a2b      	ldr	r2, [pc, #172]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800335e:	430b      	orrs	r3, r1
 8003360:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003364:	e003      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003366:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800336a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800336e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f002 0308 	and.w	r3, r2, #8
 800337a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003384:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003388:	460b      	mov	r3, r1
 800338a:	4313      	orrs	r3, r2
 800338c:	d056      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800338e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003394:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003398:	d031      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x356>
 800339a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800339e:	d82a      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033a4:	d02d      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80033a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033aa:	d824      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033b0:	d029      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80033b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033b6:	d81e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033bc:	d011      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d818      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033cc:	d113      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033d2:	3308      	adds	r3, #8
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 fd89 	bl	8007eec <RCCEx_PLL2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80033e0:	e017      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033e6:	3330      	adds	r3, #48	@ 0x30
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 fe17 	bl	800801c <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80033f4:	e00d      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033fc:	e009      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033fe:	bf00      	nop
 8003400:	e007      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003402:	bf00      	nop
 8003404:	e005      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003406:	bf00      	nop
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800340a:	bf00      	nop
 800340c:	44020c00 	.word	0x44020c00
        break;
 8003410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003412:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800341a:	4bbb      	ldr	r3, [pc, #748]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800341c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003420:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342a:	4ab7      	ldr	r2, [pc, #732]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800342c:	430b      	orrs	r3, r1
 800342e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003438:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800343c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f002 0310 	and.w	r3, r2, #16
 8003448:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003452:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003456:	460b      	mov	r3, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	d053      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800345c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003462:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003466:	d031      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003468:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800346c:	d82a      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800346e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003472:	d02d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003478:	d824      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800347a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800347e:	d029      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003480:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003484:	d81e      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348a:	d011      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003490:	d818      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d020      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349a:	d113      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800349c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034a0:	3308      	adds	r3, #8
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 fd22 	bl	8007eec <RCCEx_PLL2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80034ae:	e014      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034b4:	3330      	adds	r3, #48	@ 0x30
 80034b6:	4618      	mov	r0, r3
 80034b8:	f004 fdb0 	bl	800801c <RCCEx_PLL3_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80034c2:	e00a      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034ca:	e006      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034cc:	bf00      	nop
 80034ce:	e004      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034d0:	bf00      	nop
 80034d2:	e002      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80034e2:	4b89      	ldr	r3, [pc, #548]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f2:	4a85      	ldr	r2, [pc, #532]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034fa:	e003      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003500:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f002 0320 	and.w	r3, r2, #32
 8003510:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800351a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	d053      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800352e:	d031      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003530:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003534:	d82a      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800353a:	d02d      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800353c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003540:	d824      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003542:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003546:	d029      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003548:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800354c:	d81e      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003552:	d011      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d818      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d020      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800355e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003562:	d113      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003568:	3308      	adds	r3, #8
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fcbe 	bl	8007eec <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003576:	e014      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800357c:	3330      	adds	r3, #48	@ 0x30
 800357e:	4618      	mov	r0, r3
 8003580:	f004 fd4c 	bl	800801c <RCCEx_PLL3_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800358a:	e00a      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003592:	e006      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003594:	bf00      	nop
 8003596:	e004      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003598:	bf00      	nop
 800359a:	e002      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80035a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80035aa:	4b57      	ldr	r3, [pc, #348]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035b0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80035b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a53      	ldr	r2, [pc, #332]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035c2:	e003      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80035d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035e2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d053      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80035ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035f6:	d031      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80035f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035fc:	d82a      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003602:	d02d      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003608:	d824      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800360a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800360e:	d029      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003610:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003614:	d81e      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003616:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800361a:	d011      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800361c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003620:	d818      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800362a:	d113      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800362c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003630:	3308      	adds	r3, #8
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fc5a 	bl	8007eec <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800363e:	e014      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003644:	3330      	adds	r3, #48	@ 0x30
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fce8 	bl	800801c <RCCEx_PLL3_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003652:	e00a      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800365a:	e006      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800365c:	bf00      	nop
 800365e:	e004      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003660:	bf00      	nop
 8003662:	e002      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003664:	bf00      	nop
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003672:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003678:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800367c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003682:	4a21      	ldr	r2, [pc, #132]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003684:	430b      	orrs	r3, r1
 8003686:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003690:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80036a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80036aa:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	d055      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80036b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80036be:	d033      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80036c0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80036c4:	d82c      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ca:	d02f      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80036cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d0:	d826      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036d6:	d02b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80036d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036dc:	d820      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e2:	d013      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e8:	d81a      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d022      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80036ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f2:	d115      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036f8:	3308      	adds	r3, #8
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fbf6 	bl	8007eec <RCCEx_PLL2_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003706:	e016      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003708:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800370c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003710:	3330      	adds	r3, #48	@ 0x30
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fc82 	bl	800801c <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800371e:	e00a      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003726:	e006      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003728:	bf00      	nop
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800373e:	4bbb      	ldr	r3, [pc, #748]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003744:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800374c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800374e:	4ab7      	ldr	r2, [pc, #732]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003750:	430b      	orrs	r3, r1
 8003752:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003756:	e003      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800375c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800376c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003776:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d053      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003786:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800378a:	d031      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800378c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003790:	d82a      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003792:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003796:	d02d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003798:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800379c:	d824      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800379e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037a2:	d029      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80037a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037a8:	d81e      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80037aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ae:	d011      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80037b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037b4:	d818      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x754>
 80037ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037be:	d113      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037c4:	3308      	adds	r3, #8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fb90 	bl	8007eec <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80037d2:	e014      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037d8:	3330      	adds	r3, #48	@ 0x30
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fc1e 	bl	800801c <RCCEx_PLL3_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80037e6:	e00a      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037ee:	e006      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037f0:	bf00      	nop
 80037f2:	e004      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037f4:	bf00      	nop
 80037f6:	e002      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003806:	4b89      	ldr	r3, [pc, #548]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800380c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003816:	4a85      	ldr	r2, [pc, #532]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003818:	430b      	orrs	r3, r1
 800381a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800381e:	e003      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003824:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003834:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800383e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003842:	460b      	mov	r3, r1
 8003844:	4313      	orrs	r3, r2
 8003846:	d055      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800384c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003850:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003854:	d031      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003856:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800385a:	d82a      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800385c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003860:	d02d      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003866:	d824      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003868:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800386c:	d029      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800386e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003872:	d81e      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003878:	d011      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800387a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800387e:	d818      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003888:	d113      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800388a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800388e:	3308      	adds	r3, #8
 8003890:	4618      	mov	r0, r3
 8003892:	f004 fb2b 	bl	8007eec <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800389c:	e014      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800389e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038a2:	3330      	adds	r3, #48	@ 0x30
 80038a4:	4618      	mov	r0, r3
 80038a6:	f004 fbb9 	bl	800801c <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80038d0:	4b56      	ldr	r3, [pc, #344]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038d6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80038da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e2:	4a52      	ldr	r2, [pc, #328]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038ea:	e003      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003900:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800390a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d044      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800391c:	2b05      	cmp	r3, #5
 800391e:	d823      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003920:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003971 	.word	0x08003971
 800392c:	08003941 	.word	0x08003941
 8003930:	08003955 	.word	0x08003955
 8003934:	08003971 	.word	0x08003971
 8003938:	08003971 	.word	0x08003971
 800393c:	08003971 	.word	0x08003971
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003940:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003944:	3308      	adds	r3, #8
 8003946:	4618      	mov	r0, r3
 8003948:	f004 fad0 	bl	8007eec <RCCEx_PLL2_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003952:	e00e      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003954:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003958:	3330      	adds	r3, #48	@ 0x30
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fb5e 	bl	800801c <RCCEx_PLL3_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003966:	e004      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800397a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800397c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003980:	f023 0107 	bic.w	r1, r3, #7
 8003984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398c:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800398e:	430b      	orrs	r3, r1
 8003990:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003996:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800399a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800399e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039b4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d04f      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80039be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	2b50      	cmp	r3, #80	@ 0x50
 80039c8:	d029      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80039ca:	2b50      	cmp	r3, #80	@ 0x50
 80039cc:	d823      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039ce:	2b40      	cmp	r3, #64	@ 0x40
 80039d0:	d027      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80039d2:	2b40      	cmp	r3, #64	@ 0x40
 80039d4:	d81f      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039d6:	2b30      	cmp	r3, #48	@ 0x30
 80039d8:	d025      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80039da:	2b30      	cmp	r3, #48	@ 0x30
 80039dc:	d81b      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d00f      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d817      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d113      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f2:	3308      	adds	r3, #8
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 fa79 	bl	8007eec <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003a00:	e017      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a06:	3330      	adds	r3, #48	@ 0x30
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 fb07 	bl	800801c <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003a14:	e00d      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a1c:	e009      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e007      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a22:	bf00      	nop
 8003a24:	e005      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a26:	bf00      	nop
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003a2a:	bf00      	nop
 8003a2c:	44020c00 	.word	0x44020c00
        break;
 8003a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003a3a:	4baf      	ldr	r3, [pc, #700]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a40:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	4aaa      	ldr	r2, [pc, #680]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003a54:	e003      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d055      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a86:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a8a:	d031      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003a8c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a90:	d82a      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a96:	d02d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003a98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a9c:	d824      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003aa2:	d029      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003aa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003aa8:	d81e      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aae:	d011      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003ab0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ab4:	d818      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d020      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003aba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003abe:	d113      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 fa10 	bl	8007eec <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003ad2:	e014      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ad8:	3330      	adds	r3, #48	@ 0x30
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 fa9e 	bl	800801c <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003ae6:	e00a      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003aee:	e006      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003af0:	bf00      	nop
 8003af2:	e004      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b06:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b18:	4a77      	ldr	r2, [pc, #476]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b20:	e003      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b44:	460b      	mov	r3, r1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	d03d      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b56:	d01b      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b5c:	d814      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b62:	d017      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b68:	d80e      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b78:	3330      	adds	r3, #48	@ 0x30
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fa4e 	bl	800801c <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b8e:	e004      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b90:	bf00      	nop
 8003b92:	e002      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b94:	bf00      	nop
 8003b96:	e000      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10d      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003ba2:	4b55      	ldr	r3, [pc, #340]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ba8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	4a50      	ldr	r2, [pc, #320]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bbc:	e003      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bc2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bdc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4313      	orrs	r3, r2
 8003be4:	d03d      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bf2:	d01b      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003bf4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bf8:	d814      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003bfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bfe:	d017      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003c00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c04:	d80e      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003c0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c0e:	d109      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c14:	3330      	adds	r3, #48	@ 0x30
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 fa00 	bl	800801c <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003c22:	e008      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c44:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c50:	4a29      	ldr	r2, [pc, #164]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d040      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003c90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c94:	d814      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c9a:	d017      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003c9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ca0:	d80e      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d014      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003caa:	d109      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cb0:	3330      	adds	r3, #48	@ 0x30
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f004 f9b2 	bl	800801c <RCCEx_PLL3_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cc6:	e004      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003cc8:	bf00      	nop
 8003cca:	e002      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d110      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ce0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cec:	4a02      	ldr	r2, [pc, #8]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cf4:	e006      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003cf6:	bf00      	nop
 8003cf8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d00:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	d03d      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d30:	d01b      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003d32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d36:	d814      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3c:	d017      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d42:	d80e      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d014      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d52:	3330      	adds	r3, #48	@ 0x30
 8003d54:	4618      	mov	r0, r3
 8003d56:	f004 f961 	bl	800801c <RCCEx_PLL3_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d68:	e004      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003d7c:	4bbe      	ldr	r3, [pc, #760]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d82:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d8e:	4aba      	ldr	r2, [pc, #744]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d90:	430b      	orrs	r3, r1
 8003d92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d96:	e003      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003dac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003db6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	d035      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dcc:	d015      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd2:	d80e      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003de2:	3330      	adds	r3, #48	@ 0x30
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 f919 	bl	800801c <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10d      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003e08:	4b9b      	ldr	r3, [pc, #620]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e0e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e1a:	4a97      	ldr	r2, [pc, #604]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e22:	e003      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	2100      	movs	r1, #0
 8003e36:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4a89      	ldr	r2, [pc, #548]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e56:	61d3      	str	r3, [r2, #28]
 8003e58:	4b87      	ldr	r3, [pc, #540]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e60:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003e64:	4a84      	ldr	r2, [pc, #528]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e66:	430b      	orrs	r3, r1
 8003e68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e80:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d055      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e92:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e96:	d031      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003e98:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e9c:	d82a      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea2:	d02d      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea8:	d824      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eae:	d029      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb4:	d81e      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eba:	d011      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec0:	d818      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d020      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eca:	d113      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 f80a 	bl	8007eec <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003ede:	e014      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ee4:	3330      	adds	r3, #48	@ 0x30
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 f898 	bl	800801c <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003efa:	e006      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003efc:	bf00      	nop
 8003efe:	e004      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f00:	bf00      	nop
 8003f02:	e002      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003f12:	4b59      	ldr	r3, [pc, #356]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f18:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f24:	4a54      	ldr	r2, [pc, #336]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f4c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d055      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f5e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f62:	d031      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003f64:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f68:	d82a      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f6e:	d02d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f74:	d824      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f7a:	d029      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003f7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f80:	d81e      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f86:	d011      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8c:	d818      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d020      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	d113      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 ffa4 	bl	8007eec <RCCEx_PLL2_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003faa:	e014      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fb0:	3330      	adds	r3, #48	@ 0x30
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 f832 	bl	800801c <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fc6:	e006      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e002      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003fde:	4b26      	ldr	r3, [pc, #152]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fe4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ff0:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ffe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	2100      	movs	r1, #0
 800400c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d057      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800402a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800402e:	d033      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004034:	d82c      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800403a:	d02f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800403c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004040:	d826      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004042:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004046:	d02b      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004048:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800404c:	d820      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800404e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004052:	d013      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004058:	d81a      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d022      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004062:	d115      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004068:	3308      	adds	r3, #8
 800406a:	4618      	mov	r0, r3
 800406c:	f003 ff3e 	bl	8007eec <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004076:	e016      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004078:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800407c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004080:	3330      	adds	r3, #48	@ 0x30
 8004082:	4618      	mov	r0, r3
 8004084:	f003 ffca 	bl	800801c <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800408e:	e00a      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004096:	e006      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004098:	bf00      	nop
 800409a:	e004      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800409c:	bf00      	nop
 800409e:	e002      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80040a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10d      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80040ae:	4bbb      	ldr	r3, [pc, #748]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80040b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040c0:	4ab6      	ldr	r2, [pc, #728]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040c2:	430b      	orrs	r3, r1
 80040c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040c8:	e003      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80040d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	2100      	movs	r1, #0
 80040dc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d055      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80040f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040fa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80040fe:	d031      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004100:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004104:	d82a      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800410a:	d02d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800410c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004110:	d824      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004112:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004116:	d029      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004118:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800411c:	d81e      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800411e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004122:	d011      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004124:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004128:	d818      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d020      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004132:	d113      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004138:	3308      	adds	r3, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f003 fed6 	bl	8007eec <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004146:	e014      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800414c:	3330      	adds	r3, #48	@ 0x30
 800414e:	4618      	mov	r0, r3
 8004150:	f003 ff64 	bl	800801c <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800415a:	e00a      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004162:	e006      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004164:	bf00      	nop
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004168:	bf00      	nop
 800416a:	e002      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800417a:	4b88      	ldr	r3, [pc, #544]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800417c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004180:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004188:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800418c:	4a83      	ldr	r2, [pc, #524]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800418e:	430b      	orrs	r3, r1
 8004190:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800419a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800419e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	2100      	movs	r1, #0
 80041a8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80041ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d055      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80041be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041ca:	d031      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80041cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041d0:	d82a      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041d6:	d02d      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80041d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041dc:	d824      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041e2:	d029      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80041e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041e8:	d81e      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ee:	d011      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80041f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041f4:	d818      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80041fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041fe:	d113      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004204:	3308      	adds	r3, #8
 8004206:	4618      	mov	r0, r3
 8004208:	f003 fe70 	bl	8007eec <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004212:	e014      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004218:	3330      	adds	r3, #48	@ 0x30
 800421a:	4618      	mov	r0, r3
 800421c:	f003 fefe 	bl	800801c <RCCEx_PLL3_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004226:	e00a      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800422e:	e006      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004230:	bf00      	nop
 8004232:	e004      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004234:	bf00      	nop
 8004236:	e002      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800423c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004246:	4b55      	ldr	r3, [pc, #340]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004248:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800424c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004250:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004258:	4a50      	ldr	r2, [pc, #320]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800425a:	430b      	orrs	r3, r1
 800425c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004266:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800426a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	2100      	movs	r1, #0
 8004274:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004280:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004284:	460b      	mov	r3, r1
 8004286:	4313      	orrs	r3, r2
 8004288:	d055      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800428a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800428e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004296:	d031      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800429c:	d82a      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a2:	d02d      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d824      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80042aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042ae:	d029      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80042b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042b4:	d81e      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80042b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ba:	d011      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80042bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c0:	d818      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d020      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80042c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ca:	d113      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042d0:	3308      	adds	r3, #8
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 fe0a 	bl	8007eec <RCCEx_PLL2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80042de:	e014      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042e4:	3330      	adds	r3, #48	@ 0x30
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fe98 	bl	800801c <RCCEx_PLL3_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80042f2:	e00a      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042fa:	e006      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042fc:	bf00      	nop
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004312:	4b22      	ldr	r3, [pc, #136]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004314:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004318:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800431c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004320:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004324:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004326:	430b      	orrs	r3, r1
 8004328:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004332:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800434c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d055      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004356:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800435a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800435e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004362:	d035      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004364:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004368:	d82e      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800436a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800436e:	d031      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004370:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004374:	d828      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800437a:	d01b      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800437c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004380:	d822      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438a:	d009      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800438c:	e01c      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438e:	4b03      	ldr	r3, [pc, #12]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	4a02      	ldr	r2, [pc, #8]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004398:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800439a:	e01c      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800439c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a4:	3308      	adds	r3, #8
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fda0 	bl	8007eec <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043b2:	e010      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043b8:	3330      	adds	r3, #48	@ 0x30
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 fe2e 	bl	800801c <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043c6:	e006      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80043d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80043de:	4bc3      	ldr	r3, [pc, #780]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80043e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043f0:	4abe      	ldr	r2, [pc, #760]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043f8:	e003      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800440e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004418:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800441c:	460b      	mov	r3, r1
 800441e:	4313      	orrs	r3, r2
 8004420:	d051      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004422:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004426:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800442a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800442e:	d033      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004434:	d82c      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004436:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800443a:	d02d      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800443c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004440:	d826      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004446:	d019      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444c:	d820      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004452:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004456:	d007      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004458:	e01a      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445a:	4ba4      	ldr	r3, [pc, #656]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	4aa3      	ldr	r2, [pc, #652]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004464:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004466:	e018      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800446c:	3308      	adds	r3, #8
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fd3c 	bl	8007eec <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800447a:	e00e      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800447c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004480:	3330      	adds	r3, #48	@ 0x30
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fdca 	bl	800801c <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80044a2:	4b92      	ldr	r3, [pc, #584]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044a8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80044b4:	4a8d      	ldr	r2, [pc, #564]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80044c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044d4:	2300      	movs	r3, #0
 80044d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d032      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80044e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d80f      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d211      	bcs.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d911      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d109      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044fe:	3308      	adds	r3, #8
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fcf3 	bl	8007eec <RCCEx_PLL2_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800450c:	e006      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004514:	e002      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800451a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004524:	4b71      	ldr	r3, [pc, #452]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800452a:	f023 0107 	bic.w	r1, r3, #7
 800452e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004532:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004536:	4a6d      	ldr	r2, [pc, #436]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004538:	430b      	orrs	r3, r1
 800453a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800453e:	e003      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004544:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	2100      	movs	r1, #0
 8004552:	6739      	str	r1, [r7, #112]	@ 0x70
 8004554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004558:	677b      	str	r3, [r7, #116]	@ 0x74
 800455a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d024      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004570:	2b08      	cmp	r3, #8
 8004572:	d005      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800458a:	4b58      	ldr	r3, [pc, #352]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800458c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004590:	f023 0108 	bic.w	r1, r3, #8
 8004594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800459c:	4a53      	ldr	r2, [pc, #332]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800459e:	430b      	orrs	r3, r1
 80045a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80045ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045bc:	2300      	movs	r3, #0
 80045be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f000 80b9 	beq.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80045cc:	4b48      	ldr	r3, [pc, #288]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	4a47      	ldr	r2, [pc, #284]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045d8:	f7fc ff26 	bl	8001428 <HAL_GetTick>
 80045dc:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045e0:	e00b      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fc ff21 	bl	8001428 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d903      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045f8:	e005      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045fa:	4b3d      	ldr	r3, [pc, #244]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ed      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8004606:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8093 	bne.w	8004736 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004610:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800461e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d023      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8004626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800462a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800462e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004632:	4293      	cmp	r3, r2
 8004634:	d01b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004636:	4b2d      	ldr	r3, [pc, #180]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800463c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004640:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004644:	4b29      	ldr	r3, [pc, #164]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464a:	4a28      	ldr	r2, [pc, #160]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004654:	4b25      	ldr	r3, [pc, #148]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800465a:	4a24      	ldr	r2, [pc, #144]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800465c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004660:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004664:	4a21      	ldr	r2, [pc, #132]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004666:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800466a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800466e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d019      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fc fed5 	bl	8001428 <HAL_GetTick>
 800467e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004682:	e00d      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fc fed0 	bl	8001428 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004694:	429a      	cmp	r2, r3
 8004696:	d903      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ea      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80046ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d13a      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80046b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80046be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c6:	d115      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80046c8:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80046d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80046e2:	4a02      	ldr	r2, [pc, #8]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	61d3      	str	r3, [r2, #28]
 80046e8:	e00a      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80046ea:	bf00      	nop
 80046ec:	44020c00 	.word	0x44020c00
 80046f0:	44020800 	.word	0x44020800
 80046f4:	4b9f      	ldr	r3, [pc, #636]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4a9e      	ldr	r2, [pc, #632]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046fe:	61d3      	str	r3, [r2, #28]
 8004700:	4b9c      	ldr	r3, [pc, #624]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004706:	4a9b      	ldr	r2, [pc, #620]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004710:	4b98      	ldr	r3, [pc, #608]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004712:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800471a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004722:	4a94      	ldr	r2, [pc, #592]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004724:	430b      	orrs	r3, r1
 8004726:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800472a:	e008      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004730:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800473a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800473e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800474a:	663b      	str	r3, [r7, #96]	@ 0x60
 800474c:	2300      	movs	r3, #0
 800474e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004750:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d035      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800475a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800475e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004762:	2b30      	cmp	r3, #48	@ 0x30
 8004764:	d014      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004766:	2b30      	cmp	r3, #48	@ 0x30
 8004768:	d80e      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800476a:	2b20      	cmp	r3, #32
 800476c:	d012      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800476e:	2b20      	cmp	r3, #32
 8004770:	d80a      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004776:	2b10      	cmp	r3, #16
 8004778:	d106      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800477a:	4b7e      	ldr	r3, [pc, #504]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	4a7d      	ldr	r2, [pc, #500]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004784:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004786:	e008      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800478e:	e004      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10d      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80047a2:	4b74      	ldr	r3, [pc, #464]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80047ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80047b4:	4a6f      	ldr	r2, [pc, #444]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80047d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047d4:	2300      	movs	r3, #0
 80047d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d033      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80047e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80047ee:	2b40      	cmp	r3, #64	@ 0x40
 80047f0:	d007      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80047f2:	e010      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4b5f      	ldr	r3, [pc, #380]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004800:	e00d      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004806:	3308      	adds	r3, #8
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fb6f 	bl	8007eec <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004814:	e003      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800481c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004826:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004828:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800482c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004830:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004834:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004838:	4a4e      	ldr	r2, [pc, #312]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800483a:	430b      	orrs	r3, r1
 800483c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004846:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800484a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004856:	653b      	str	r3, [r7, #80]	@ 0x50
 8004858:	2300      	movs	r3, #0
 800485a:	657b      	str	r3, [r7, #84]	@ 0x54
 800485c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004860:	460b      	mov	r3, r1
 8004862:	4313      	orrs	r3, r2
 8004864:	d033      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800486a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d007      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004876:	e010      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4b3e      	ldr	r3, [pc, #248]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	4a3d      	ldr	r2, [pc, #244]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004882:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004884:	e00d      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004886:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488a:	3308      	adds	r3, #8
 800488c:	4618      	mov	r0, r3
 800488e:	f003 fb2d 	bl	8007eec <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80048aa:	4b32      	ldr	r3, [pc, #200]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048b0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80048b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80048bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80048c4:	e003      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80048ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048dc:	2300      	movs	r3, #0
 80048de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048e4:	460b      	mov	r3, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d04a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80048ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d827      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004911 	.word	0x08004911
 8004900:	0800491f 	.word	0x0800491f
 8004904:	08004933 	.word	0x08004933
 8004908:	0800494f 	.word	0x0800494f
 800490c:	0800494f 	.word	0x0800494f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b18      	ldr	r3, [pc, #96]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	4a17      	ldr	r2, [pc, #92]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800491a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800491c:	e018      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800491e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004922:	3308      	adds	r3, #8
 8004924:	4618      	mov	r0, r3
 8004926:	f003 fae1 	bl	8007eec <RCCEx_PLL2_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004930:	e00e      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004936:	3330      	adds	r3, #48	@ 0x30
 8004938:	4618      	mov	r0, r3
 800493a:	f003 fb6f 	bl	800801c <RCCEx_PLL3_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004944:	e004      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800494e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004950:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800495a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800495e:	f023 0107 	bic.w	r1, r3, #7
 8004962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800496a:	4a02      	ldr	r2, [pc, #8]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800496c:	430b      	orrs	r3, r1
 800496e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004972:	e005      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004974:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800497c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800498c:	643b      	str	r3, [r7, #64]	@ 0x40
 800498e:	2300      	movs	r3, #0
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
 8004992:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	f000 8081 	beq.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800499e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d85f      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80049aa:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	08004a35 	.word	0x08004a35
 80049b4:	08004a6b 	.word	0x08004a6b
 80049b8:	08004a6b 	.word	0x08004a6b
 80049bc:	08004a6b 	.word	0x08004a6b
 80049c0:	08004a6b 	.word	0x08004a6b
 80049c4:	08004a6b 	.word	0x08004a6b
 80049c8:	08004a6b 	.word	0x08004a6b
 80049cc:	08004a6b 	.word	0x08004a6b
 80049d0:	08004a43 	.word	0x08004a43
 80049d4:	08004a6b 	.word	0x08004a6b
 80049d8:	08004a6b 	.word	0x08004a6b
 80049dc:	08004a6b 	.word	0x08004a6b
 80049e0:	08004a6b 	.word	0x08004a6b
 80049e4:	08004a6b 	.word	0x08004a6b
 80049e8:	08004a6b 	.word	0x08004a6b
 80049ec:	08004a6b 	.word	0x08004a6b
 80049f0:	08004a57 	.word	0x08004a57
 80049f4:	08004a6b 	.word	0x08004a6b
 80049f8:	08004a6b 	.word	0x08004a6b
 80049fc:	08004a6b 	.word	0x08004a6b
 8004a00:	08004a6b 	.word	0x08004a6b
 8004a04:	08004a6b 	.word	0x08004a6b
 8004a08:	08004a6b 	.word	0x08004a6b
 8004a0c:	08004a6b 	.word	0x08004a6b
 8004a10:	08004a73 	.word	0x08004a73
 8004a14:	08004a6b 	.word	0x08004a6b
 8004a18:	08004a6b 	.word	0x08004a6b
 8004a1c:	08004a6b 	.word	0x08004a6b
 8004a20:	08004a6b 	.word	0x08004a6b
 8004a24:	08004a6b 	.word	0x08004a6b
 8004a28:	08004a6b 	.word	0x08004a6b
 8004a2c:	08004a6b 	.word	0x08004a6b
 8004a30:	08004a73 	.word	0x08004a73
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4bab      	ldr	r3, [pc, #684]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	4aaa      	ldr	r2, [pc, #680]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a40:	e018      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a46:	3308      	adds	r3, #8
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f003 fa4f 	bl	8007eec <RCCEx_PLL2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a54:	e00e      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a5a:	3330      	adds	r3, #48	@ 0x30
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f003 fadd 	bl	800801c <RCCEx_PLL3_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a68:	e004      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004a7c:	4b99      	ldr	r3, [pc, #612]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a8e:	4a95      	ldr	r2, [pc, #596]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aae:	2300      	movs	r3, #0
 8004ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d04e      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac8:	d02e      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ace:	d827      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ad0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ad2:	d02b      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004ad4:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ad6:	d823      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ad8:	2b80      	cmp	r3, #128	@ 0x80
 8004ada:	d017      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004adc:	2b80      	cmp	r3, #128	@ 0x80
 8004ade:	d81f      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004ae4:	2b40      	cmp	r3, #64	@ 0x40
 8004ae6:	d007      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004ae8:	e01a      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aea:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	4a7d      	ldr	r2, [pc, #500]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004af6:	e01a      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004afc:	3308      	adds	r3, #8
 8004afe:	4618      	mov	r0, r3
 8004b00:	f003 f9f4 	bl	8007eec <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e010      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b10:	3330      	adds	r3, #48	@ 0x30
 8004b12:	4618      	mov	r0, r3
 8004b14:	f003 fa82 	bl	800801c <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004b1e:	e006      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004b36:	4b6b      	ldr	r3, [pc, #428]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b3c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b48:	4a66      	ldr	r2, [pc, #408]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b50:	e003      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b68:	2300      	movs	r3, #0
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b70:	460b      	mov	r3, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	d055      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004b76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b7e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b82:	d031      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004b84:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b88:	d82a      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b8e:	d02d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b94:	d824      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b9a:	d029      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004b9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ba0:	d81e      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba6:	d011      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bac:	d818      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d020      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb6:	d113      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f003 f994 	bl	8007eec <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004bca:	e014      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bd0:	3330      	adds	r3, #48	@ 0x30
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fa22 	bl	800801c <RCCEx_PLL3_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004be6:	e006      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004be8:	bf00      	nop
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004bec:	bf00      	nop
 8004bee:	e002      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004bf0:	bf00      	nop
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004bfe:	4b39      	ldr	r3, [pc, #228]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c04:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004c10:	4a34      	ldr	r2, [pc, #208]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004c22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	d058      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c46:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c4a:	d031      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004c4c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c50:	d82a      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c56:	d02d      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c5c:	d824      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c62:	d029      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004c64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c68:	d81e      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6e:	d011      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d818      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7e:	d113      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c84:	3308      	adds	r3, #8
 8004c86:	4618      	mov	r0, r3
 8004c88:	f003 f930 	bl	8007eec <RCCEx_PLL2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004c92:	e014      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c98:	3330      	adds	r3, #48	@ 0x30
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f003 f9be 	bl	800801c <RCCEx_PLL3_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cae:	e006      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d110      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004cc6:	4b07      	ldr	r3, [pc, #28]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ccc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cd8:	4902      	ldr	r1, [pc, #8]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004ce0:	e006      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004ce2:	bf00      	nop
 8004ce4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6239      	str	r1, [r7, #32]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d055      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d14:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d18:	d031      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004d1a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d1e:	d82a      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d24:	d02d      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d2a:	d824      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d2c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d30:	d029      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004d32:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d36:	d81e      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3c:	d011      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d42:	d818      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4c:	d113      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d52:	3308      	adds	r3, #8
 8004d54:	4618      	mov	r0, r3
 8004d56:	f003 f8c9 	bl	8007eec <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d60:	e014      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d66:	3330      	adds	r3, #48	@ 0x30
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f003 f957 	bl	800801c <RCCEx_PLL3_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d74:	e00a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004d94:	4b88      	ldr	r3, [pc, #544]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004da6:	4984      	ldr	r1, [pc, #528]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004dae:	e003      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004db4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	61b9      	str	r1, [r7, #24]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d03d      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d81c      	bhi.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e23 	.word	0x08004e23
 8004dec:	08004df9 	.word	0x08004df9
 8004df0:	08004e07 	.word	0x08004e07
 8004df4:	08004e23 	.word	0x08004e23
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df8:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	4a6e      	ldr	r2, [pc, #440]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e02:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004e04:	e00e      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f003 f86d 	bl	8007eec <RCCEx_PLL2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004e2c:	4b62      	ldr	r3, [pc, #392]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e3e:	495e      	ldr	r1, [pc, #376]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e4c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	2100      	movs	r1, #0
 8004e5a:	6139      	str	r1, [r7, #16]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d03a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e78:	d00e      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7e:	d815      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e88:	d110      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e94:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e96:	e00e      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 f824 	bl	8007eec <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10d      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ecc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ed0:	4939      	ldr	r1, [pc, #228]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004ed8:	e003      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ede:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	2100      	movs	r1, #0
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4313      	orrs	r3, r2
 8004efc:	d038      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f02:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f06:	2b30      	cmp	r3, #48	@ 0x30
 8004f08:	d01b      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004f0a:	2b30      	cmp	r3, #48	@ 0x30
 8004f0c:	d815      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d002      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d007      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004f16:	e010      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	4a26      	ldr	r2, [pc, #152]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f22:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f24:	e00e      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f2a:	3330      	adds	r3, #48	@ 0x30
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f003 f875 	bl	800801c <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004f38:	e004      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10d      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f52:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f5e:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6039      	str	r1, [r7, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f9a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004f9e:	4906      	ldr	r1, [pc, #24]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004fa6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb6:	bf00      	nop
 8004fb8:	44020c00 	.word	0x44020c00

08004fbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b08b      	sub	sp, #44	@ 0x2c
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fc4:	4bad      	ldr	r3, [pc, #692]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004fce:	4bab      	ldr	r3, [pc, #684]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fd8:	4ba8      	ldr	r3, [pc, #672]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	0a1b      	lsrs	r3, r3, #8
 8004fde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fe2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004fe4:	4ba5      	ldr	r3, [pc, #660]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fee:	4ba3      	ldr	r3, [pc, #652]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8126 	beq.w	800525e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d053      	beq.n	80050c0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d86f      	bhi.n	80050fe <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d003      	beq.n	800502c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d02b      	beq.n	8005082 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800502a:	e068      	b.n	80050fe <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800502c:	4b93      	ldr	r3, [pc, #588]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	08db      	lsrs	r3, r3, #3
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	4a92      	ldr	r2, [pc, #584]	@ (8005280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005060:	ed97 6a04 	vldr	s12, [r7, #16]
 8005064:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005284 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005080:	e068      	b.n	8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005288 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a04 	vldr	s12, [r7, #16]
 80050a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005284 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80050be:	e049      	b.n	8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800528c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80050e0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005284 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80050e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80050fc:	e02a      	b.n	8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050fe:	4b5f      	ldr	r3, [pc, #380]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	4a5d      	ldr	r2, [pc, #372]	@ (8005280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a04 	vldr	s12, [r7, #16]
 8005136:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005284 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005152:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005154:	4b49      	ldr	r3, [pc, #292]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005160:	d121      	bne.n	80051a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005162:	4b46      	ldr	r3, [pc, #280]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d017      	beq.n	800519e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800516e:	4b43      	ldr	r3, [pc, #268]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005172:	0a5b      	lsrs	r3, r3, #9
 8005174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005184:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005188:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800518c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005194:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e006      	b.n	80051ac <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e002      	b.n	80051ac <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051ac:	4b33      	ldr	r3, [pc, #204]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051b8:	d121      	bne.n	80051fe <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80051ba:	4b30      	ldr	r3, [pc, #192]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80051c6:	4b2d      	ldr	r3, [pc, #180]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80051d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80051e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80051e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ec:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	e002      	b.n	8005204 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005204:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005210:	d121      	bne.n	8005256 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005212:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d017      	beq.n	800524e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800521e:	4b17      	ldr	r3, [pc, #92]	@ (800527c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005222:	0e1b      	lsrs	r3, r3, #24
 8005224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005234:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005238:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800523c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005244:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800524c:	e010      	b.n	8005270 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	e00c      	b.n	8005270 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	e008      	b.n	8005270 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	372c      	adds	r7, #44	@ 0x2c
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	44020c00 	.word	0x44020c00
 8005280:	03d09000 	.word	0x03d09000
 8005284:	46000000 	.word	0x46000000
 8005288:	4a742400 	.word	0x4a742400
 800528c:	4bbebc20 	.word	0x4bbebc20

08005290 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005290:	b480      	push	{r7}
 8005292:	b08b      	sub	sp, #44	@ 0x2c
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005298:	4bad      	ldr	r3, [pc, #692]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800529a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80052a2:	4bab      	ldr	r3, [pc, #684]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80052ac:	4ba8      	ldr	r3, [pc, #672]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052b6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80052b8:	4ba5      	ldr	r3, [pc, #660]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80052c2:	4ba3      	ldr	r3, [pc, #652]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8126 	beq.w	8005532 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d053      	beq.n	8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d86f      	bhi.n	80053d2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d003      	beq.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d02b      	beq.n	8005356 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80052fe:	e068      	b.n	80053d2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005300:	4b93      	ldr	r3, [pc, #588]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	4a92      	ldr	r2, [pc, #584]	@ (8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
 8005310:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005334:	ed97 6a04 	vldr	s12, [r7, #16]
 8005338:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800533c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005354:	e068      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005360:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800555c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	ed97 6a04 	vldr	s12, [r7, #16]
 8005376:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005392:	e049      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80053b4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80053b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053d0:	e02a      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005406:	ed97 6a04 	vldr	s12, [r7, #16]
 800540a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005426:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005428:	4b49      	ldr	r3, [pc, #292]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005434:	d121      	bne.n	800547a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005436:	4b46      	ldr	r3, [pc, #280]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005442:	4b43      	ldr	r3, [pc, #268]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005446:	0a5b      	lsrs	r3, r3, #9
 8005448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005458:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800545c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005468:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005480:	4b33      	ldr	r3, [pc, #204]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548c:	d121      	bne.n	80054d2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800548e:	4b30      	ldr	r3, [pc, #192]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d017      	beq.n	80054ca <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800549a:	4b2d      	ldr	r3, [pc, #180]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054a4:	ee07 3a90 	vmov	s15, r3
 80054a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80054ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80054b4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	e006      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	e002      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e4:	d121      	bne.n	800552a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80054e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054f2:	4b17      	ldr	r3, [pc, #92]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f6:	0e1b      	lsrs	r3, r3, #24
 80054f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005508:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800550c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005518:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005520:	e010      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	e00c      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	372c      	adds	r7, #44	@ 0x2c
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	44020c00 	.word	0x44020c00
 8005554:	03d09000 	.word	0x03d09000
 8005558:	46000000 	.word	0x46000000
 800555c:	4a742400 	.word	0x4a742400
 8005560:	4bbebc20 	.word	0x4bbebc20

08005564 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005564:	b480      	push	{r7}
 8005566:	b08b      	sub	sp, #44	@ 0x2c
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800556c:	4bad      	ldr	r3, [pc, #692]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800556e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005576:	4bab      	ldr	r3, [pc, #684]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005580:	4ba8      	ldr	r3, [pc, #672]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800558c:	4ba5      	ldr	r3, [pc, #660]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005596:	4ba3      	ldr	r3, [pc, #652]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8126 	beq.w	8005806 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d053      	beq.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d86f      	bhi.n	80056a6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d003      	beq.n	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d02b      	beq.n	800562a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80055d2:	e068      	b.n	80056a6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055d4:	4b93      	ldr	r3, [pc, #588]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	4a92      	ldr	r2, [pc, #584]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005608:	ed97 6a04 	vldr	s12, [r7, #16]
 800560c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005624:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005628:	e068      	b.n	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005634:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a04 	vldr	s12, [r7, #16]
 800564a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005666:	e049      	b.n	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005684:	ed97 6a04 	vldr	s12, [r7, #16]
 8005688:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800568c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80056a4:	e02a      	b.n	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056b2:	fa22 f303 	lsr.w	r3, r2, r3
 80056b6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056da:	ed97 6a04 	vldr	s12, [r7, #16]
 80056de:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80056e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80056fa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056fc:	4b49      	ldr	r3, [pc, #292]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005708:	d121      	bne.n	800574e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800570a:	4b46      	ldr	r3, [pc, #280]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005716:	4b43      	ldr	r3, [pc, #268]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	0a5b      	lsrs	r3, r3, #9
 800571c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800572c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005730:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800573c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e006      	b.n	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005754:	4b33      	ldr	r3, [pc, #204]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800575c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005760:	d121      	bne.n	80057a6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005762:	4b30      	ldr	r3, [pc, #192]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d017      	beq.n	800579e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800576e:	4b2d      	ldr	r3, [pc, #180]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005784:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005788:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800578c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005794:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	e006      	b.n	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	e002      	b.n	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057b8:	d121      	bne.n	80057fe <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d017      	beq.n	80057f6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057c6:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	0e1b      	lsrs	r3, r3, #24
 80057cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80057d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80057e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ec:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80057f4:	e010      	b.n	8005818 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	e00c      	b.n	8005818 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	e008      	b.n	8005818 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	372c      	adds	r7, #44	@ 0x2c
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	44020c00 	.word	0x44020c00
 8005828:	03d09000 	.word	0x03d09000
 800582c:	46000000 	.word	0x46000000
 8005830:	4a742400 	.word	0x4a742400
 8005834:	4bbebc20 	.word	0x4bbebc20

08005838 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b08f      	sub	sp, #60	@ 0x3c
 800583c:	af00      	add	r7, sp, #0
 800583e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005846:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800584a:	4321      	orrs	r1, r4
 800584c:	d150      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800584e:	4b26      	ldr	r3, [pc, #152]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800585a:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800585c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d108      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586e:	d104      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
 8005876:	f002 bb2a 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800587a:	4b1b      	ldr	r3, [pc, #108]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800587c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005888:	d108      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d104      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005892:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	f002 bb19 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800589c:	4b12      	ldr	r3, [pc, #72]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058a8:	d119      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b0:	d115      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058be:	d30a      	bcc.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80058c0:	4b09      	ldr	r3, [pc, #36]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058ca:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80058d2:	f002 bafc 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80058da:	f002 baf8 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e2:	f002 baf4 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80058e6:	bf00      	nop
 80058e8:	44020c00 	.word	0x44020c00
 80058ec:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80058f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f4:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80058f8:	ea50 0104 	orrs.w	r1, r0, r4
 80058fc:	f001 8275 	beq.w	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005904:	2801      	cmp	r0, #1
 8005906:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800590a:	f082 82dd 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800590e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005912:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005916:	ea50 0104 	orrs.w	r1, r0, r4
 800591a:	f001 816c 	beq.w	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800591e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005922:	2801      	cmp	r0, #1
 8005924:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005928:	f082 82ce 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800592c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005930:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005934:	ea50 0104 	orrs.w	r1, r0, r4
 8005938:	f001 8602 	beq.w	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800593c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005940:	2801      	cmp	r0, #1
 8005942:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005946:	f082 82bf 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800594a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800594e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005952:	ea50 0104 	orrs.w	r1, r0, r4
 8005956:	f001 854c 	beq.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800595a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595e:	2801      	cmp	r0, #1
 8005960:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005964:	f082 82b0 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800596c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005970:	ea50 0104 	orrs.w	r1, r0, r4
 8005974:	f001 849e 	beq.w	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800597c:	2801      	cmp	r0, #1
 800597e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005982:	f082 82a1 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598a:	f1a1 0420 	sub.w	r4, r1, #32
 800598e:	ea50 0104 	orrs.w	r1, r0, r4
 8005992:	f001 83e8 	beq.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800599a:	2801      	cmp	r0, #1
 800599c:	f171 0120 	sbcs.w	r1, r1, #32
 80059a0:	f082 8292 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059a8:	f1a1 0410 	sub.w	r4, r1, #16
 80059ac:	ea50 0104 	orrs.w	r1, r0, r4
 80059b0:	f002 8256 	beq.w	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80059b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059b8:	2801      	cmp	r0, #1
 80059ba:	f171 0110 	sbcs.w	r1, r1, #16
 80059be:	f082 8283 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c6:	f1a1 0408 	sub.w	r4, r1, #8
 80059ca:	ea50 0104 	orrs.w	r1, r0, r4
 80059ce:	f002 81cc 	beq.w	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80059d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d6:	2801      	cmp	r0, #1
 80059d8:	f171 0108 	sbcs.w	r1, r1, #8
 80059dc:	f082 8274 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e4:	1f0c      	subs	r4, r1, #4
 80059e6:	ea50 0104 	orrs.w	r1, r0, r4
 80059ea:	f001 8648 	beq.w	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80059ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f2:	2801      	cmp	r0, #1
 80059f4:	f171 0104 	sbcs.w	r1, r1, #4
 80059f8:	f082 8266 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a00:	1e8c      	subs	r4, r1, #2
 8005a02:	ea50 0104 	orrs.w	r1, r0, r4
 8005a06:	f002 8143 	beq.w	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0e:	2801      	cmp	r0, #1
 8005a10:	f171 0102 	sbcs.w	r1, r1, #2
 8005a14:	f082 8258 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a1c:	1e4c      	subs	r4, r1, #1
 8005a1e:	ea50 0104 	orrs.w	r1, r0, r4
 8005a22:	f002 80ce 	beq.w	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a2a:	2801      	cmp	r0, #1
 8005a2c:	f171 0101 	sbcs.w	r1, r1, #1
 8005a30:	f082 824a 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a38:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005a3c:	4321      	orrs	r1, r4
 8005a3e:	f002 8059 	beq.w	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a46:	4cd9      	ldr	r4, [pc, #868]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a4e:	f082 823b 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a56:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005a5a:	4321      	orrs	r1, r4
 8005a5c:	f001 87d9 	beq.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a64:	4cd2      	ldr	r4, [pc, #840]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005a66:	42a0      	cmp	r0, r4
 8005a68:	f171 0100 	sbcs.w	r1, r1, #0
 8005a6c:	f082 822c 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a74:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005a78:	4321      	orrs	r1, r4
 8005a7a:	f001 8751 	beq.w	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a82:	4ccc      	ldr	r4, [pc, #816]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005a84:	42a0      	cmp	r0, r4
 8005a86:	f171 0100 	sbcs.w	r1, r1, #0
 8005a8a:	f082 821d 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a92:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005a96:	4321      	orrs	r1, r4
 8005a98:	f001 869a 	beq.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa0:	4cc5      	ldr	r4, [pc, #788]	@ (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005aa2:	42a0      	cmp	r0, r4
 8005aa4:	f171 0100 	sbcs.w	r1, r1, #0
 8005aa8:	f082 820e 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab0:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005ab4:	4321      	orrs	r1, r4
 8005ab6:	f001 8612 	beq.w	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abe:	4cbf      	ldr	r4, [pc, #764]	@ (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005ac0:	42a0      	cmp	r0, r4
 8005ac2:	f171 0100 	sbcs.w	r1, r1, #0
 8005ac6:	f082 81ff 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ace:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005ad2:	4321      	orrs	r1, r4
 8005ad4:	f002 817e 	beq.w	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005adc:	4cb8      	ldr	r4, [pc, #736]	@ (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005ade:	42a0      	cmp	r0, r4
 8005ae0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ae4:	f082 81f0 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aec:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005af0:	4321      	orrs	r1, r4
 8005af2:	f000 829e 	beq.w	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afa:	4cb2      	ldr	r4, [pc, #712]	@ (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	f171 0100 	sbcs.w	r1, r1, #0
 8005b02:	f082 81e1 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005b0e:	4321      	orrs	r1, r4
 8005b10:	f000 826d 	beq.w	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b18:	4cab      	ldr	r4, [pc, #684]	@ (8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b1a:	42a0      	cmp	r0, r4
 8005b1c:	f171 0100 	sbcs.w	r1, r1, #0
 8005b20:	f082 81d2 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b28:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005b2c:	4321      	orrs	r1, r4
 8005b2e:	f001 800d 	beq.w	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b36:	4ca5      	ldr	r4, [pc, #660]	@ (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b38:	42a0      	cmp	r0, r4
 8005b3a:	f171 0100 	sbcs.w	r1, r1, #0
 8005b3e:	f082 81c3 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b46:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005b4a:	4321      	orrs	r1, r4
 8005b4c:	f000 81d0 	beq.w	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b54:	4c9e      	ldr	r4, [pc, #632]	@ (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b56:	42a0      	cmp	r0, r4
 8005b58:	f171 0100 	sbcs.w	r1, r1, #0
 8005b5c:	f082 81b4 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b64:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005b68:	4321      	orrs	r1, r4
 8005b6a:	f000 8142 	beq.w	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b72:	4c98      	ldr	r4, [pc, #608]	@ (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	f171 0100 	sbcs.w	r1, r1, #0
 8005b7a:	f082 81a5 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b82:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005b86:	4321      	orrs	r1, r4
 8005b88:	f001 824e 	beq.w	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b90:	4c91      	ldr	r4, [pc, #580]	@ (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005b92:	42a0      	cmp	r0, r4
 8005b94:	f171 0100 	sbcs.w	r1, r1, #0
 8005b98:	f082 8196 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005ba4:	4321      	orrs	r1, r4
 8005ba6:	f001 8197 	beq.w	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bae:	4c8b      	ldr	r4, [pc, #556]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	f171 0100 	sbcs.w	r1, r1, #0
 8005bb6:	f082 8187 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbe:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005bc2:	4321      	orrs	r1, r4
 8005bc4:	f001 8154 	beq.w	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bcc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005bd0:	f171 0100 	sbcs.w	r1, r1, #0
 8005bd4:	f082 8178 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bdc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005be0:	4321      	orrs	r1, r4
 8005be2:	f001 80b7 	beq.w	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bea:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005bee:	42a0      	cmp	r0, r4
 8005bf0:	f171 0100 	sbcs.w	r1, r1, #0
 8005bf4:	f082 8168 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bfc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005c00:	4321      	orrs	r1, r4
 8005c02:	f001 8064 	beq.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c0a:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005c0e:	42a0      	cmp	r0, r4
 8005c10:	f171 0100 	sbcs.w	r1, r1, #0
 8005c14:	f082 8158 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005c20:	4321      	orrs	r1, r4
 8005c22:	f001 8011 	beq.w	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c2a:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005c2e:	42a0      	cmp	r0, r4
 8005c30:	f171 0100 	sbcs.w	r1, r1, #0
 8005c34:	f082 8148 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c3c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005c40:	4321      	orrs	r1, r4
 8005c42:	f000 871e 	beq.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4a:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005c4e:	42a0      	cmp	r0, r4
 8005c50:	f171 0100 	sbcs.w	r1, r1, #0
 8005c54:	f082 8138 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c5c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005c60:	4321      	orrs	r1, r4
 8005c62:	f000 86a8 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6a:	f640 0401 	movw	r4, #2049	@ 0x801
 8005c6e:	42a0      	cmp	r0, r4
 8005c70:	f171 0100 	sbcs.w	r1, r1, #0
 8005c74:	f082 8128 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005c80:	4321      	orrs	r1, r4
 8005c82:	f000 8632 	beq.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8a:	f240 4401 	movw	r4, #1025	@ 0x401
 8005c8e:	42a0      	cmp	r0, r4
 8005c90:	f171 0100 	sbcs.w	r1, r1, #0
 8005c94:	f082 8118 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c9c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005ca0:	4321      	orrs	r1, r4
 8005ca2:	f000 85b0 	beq.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005caa:	f240 2401 	movw	r4, #513	@ 0x201
 8005cae:	42a0      	cmp	r0, r4
 8005cb0:	f171 0100 	sbcs.w	r1, r1, #0
 8005cb4:	f082 8108 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cbc:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005cc0:	4321      	orrs	r1, r4
 8005cc2:	f000 8535 	beq.w	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cca:	f240 1401 	movw	r4, #257	@ 0x101
 8005cce:	42a0      	cmp	r0, r4
 8005cd0:	f171 0100 	sbcs.w	r1, r1, #0
 8005cd4:	f082 80f8 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cdc:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005ce0:	4321      	orrs	r1, r4
 8005ce2:	f000 84ba 	beq.w	800665a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cea:	2881      	cmp	r0, #129	@ 0x81
 8005cec:	f171 0100 	sbcs.w	r1, r1, #0
 8005cf0:	f082 80ea 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf8:	2821      	cmp	r0, #33	@ 0x21
 8005cfa:	f171 0100 	sbcs.w	r1, r1, #0
 8005cfe:	d26f      	bcs.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d04:	4301      	orrs	r1, r0
 8005d06:	f002 80df 	beq.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0e:	1e42      	subs	r2, r0, #1
 8005d10:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005d14:	2a20      	cmp	r2, #32
 8005d16:	f173 0100 	sbcs.w	r1, r3, #0
 8005d1a:	f082 80d5 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d1e:	2a1f      	cmp	r2, #31
 8005d20:	f202 80d2 	bhi.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d24:	a101      	add	r1, pc, #4	@ (adr r1, 8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005d26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	0800608d 	.word	0x0800608d
 8005d30:	08006159 	.word	0x08006159
 8005d34:	08007ec9 	.word	0x08007ec9
 8005d38:	08006219 	.word	0x08006219
 8005d3c:	08007ec9 	.word	0x08007ec9
 8005d40:	08007ec9 	.word	0x08007ec9
 8005d44:	08007ec9 	.word	0x08007ec9
 8005d48:	080062e9 	.word	0x080062e9
 8005d4c:	08007ec9 	.word	0x08007ec9
 8005d50:	08007ec9 	.word	0x08007ec9
 8005d54:	08007ec9 	.word	0x08007ec9
 8005d58:	08007ec9 	.word	0x08007ec9
 8005d5c:	08007ec9 	.word	0x08007ec9
 8005d60:	08007ec9 	.word	0x08007ec9
 8005d64:	08007ec9 	.word	0x08007ec9
 8005d68:	080063cb 	.word	0x080063cb
 8005d6c:	08007ec9 	.word	0x08007ec9
 8005d70:	08007ec9 	.word	0x08007ec9
 8005d74:	08007ec9 	.word	0x08007ec9
 8005d78:	08007ec9 	.word	0x08007ec9
 8005d7c:	08007ec9 	.word	0x08007ec9
 8005d80:	08007ec9 	.word	0x08007ec9
 8005d84:	08007ec9 	.word	0x08007ec9
 8005d88:	08007ec9 	.word	0x08007ec9
 8005d8c:	08007ec9 	.word	0x08007ec9
 8005d90:	08007ec9 	.word	0x08007ec9
 8005d94:	08007ec9 	.word	0x08007ec9
 8005d98:	08007ec9 	.word	0x08007ec9
 8005d9c:	08007ec9 	.word	0x08007ec9
 8005da0:	08007ec9 	.word	0x08007ec9
 8005da4:	08007ec9 	.word	0x08007ec9
 8005da8:	080064a1 	.word	0x080064a1
 8005dac:	80000001 	.word	0x80000001
 8005db0:	40000001 	.word	0x40000001
 8005db4:	20000001 	.word	0x20000001
 8005db8:	10000001 	.word	0x10000001
 8005dbc:	08000001 	.word	0x08000001
 8005dc0:	04000001 	.word	0x04000001
 8005dc4:	00800001 	.word	0x00800001
 8005dc8:	00400001 	.word	0x00400001
 8005dcc:	00200001 	.word	0x00200001
 8005dd0:	00100001 	.word	0x00100001
 8005dd4:	00080001 	.word	0x00080001
 8005dd8:	00040001 	.word	0x00040001
 8005ddc:	00020001 	.word	0x00020001
 8005de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005de8:	430b      	orrs	r3, r1
 8005dea:	f000 83c4 	beq.w	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005dee:	f002 b86b 	b.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005df2:	4ba1      	ldr	r3, [pc, #644]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005df8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e04:	d036      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e0c:	d86b      	bhi.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e14:	d02b      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e1c:	d863      	bhi.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e24:	d01b      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e2c:	d85b      	bhi.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e3a:	d008      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005e3c:	e053      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e3e:	f107 0320 	add.w	r3, r7, #32
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff f8ba 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e4c:	e04e      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4e:	f107 0314 	add.w	r3, r7, #20
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fa1c 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e5c:	e046      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fb7e 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e6c:	e03e      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005e6e:	4b83      	ldr	r3, [pc, #524]	@ (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e72:	e03b      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e74:	4b80      	ldr	r3, [pc, #512]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e80:	4b7d      	ldr	r3, [pc, #500]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d10c      	bne.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e92:	4b79      	ldr	r3, [pc, #484]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	4a78      	ldr	r2, [pc, #480]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea4:	e01e      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ea6:	4b74      	ldr	r3, [pc, #464]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ebc:	4b71      	ldr	r3, [pc, #452]	@ (8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec0:	e010      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ece:	d106      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ed6:	d102      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005ee2:	e003      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005ee4:	e002      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005eea:	bf00      	nop
          }
        }
        break;
 8005eec:	f001 bfef 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ef0:	4b61      	ldr	r3, [pc, #388]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ef6:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8005efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f02:	d036      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f0a:	d86b      	bhi.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005f12:	d02b      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005f1a:	d863      	bhi.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f22:	d01b      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f2a:	d85b      	bhi.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f38:	d008      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005f3a:	e053      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f3c:	f107 0320 	add.w	r3, r7, #32
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff f83b 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f4a:	e04e      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f99d 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f5a:	e046      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5c:	f107 0308 	add.w	r3, r7, #8
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff faff 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f6a:	e03e      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005f6c:	4b43      	ldr	r3, [pc, #268]	@ (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f70:	e03b      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f72:	4b41      	ldr	r3, [pc, #260]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f78:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f90:	4b39      	ldr	r3, [pc, #228]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	4a39      	ldr	r2, [pc, #228]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa2:	e01e      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fa4:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005fba:	4b32      	ldr	r3, [pc, #200]	@ (8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fbe:	e010      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fda:	e002      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005fe0:	e003      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005fe2:	e002      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fe8:	bf00      	nop
          }
        }
        break;
 8005fea:	f001 bf70 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005fee:	4b22      	ldr	r3, [pc, #136]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d108      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006000:	f107 0320 	add.w	r3, r7, #32
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe ffd9 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800600e:	f001 bf5e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	2b40      	cmp	r3, #64	@ 0x40
 8006016:	d108      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f937 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006026:	f001 bf52 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800602e:	f001 bf4e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006032:	4b11      	ldr	r3, [pc, #68]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	2b00      	cmp	r3, #0
 8006042:	d108      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006044:	f107 0320 	add.w	r3, r7, #32
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe ffb7 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006052:	f001 bf3c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	2b80      	cmp	r3, #128	@ 0x80
 800605a:	d108      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800605c:	f107 0314 	add.w	r3, r7, #20
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f915 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800606a:	f001 bf30 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006072:	f001 bf2c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006076:	bf00      	nop
 8006078:	44020c00 	.word	0x44020c00
 800607c:	00bb8000 	.word	0x00bb8000
 8006080:	03d09000 	.word	0x03d09000
 8006084:	003d0900 	.word	0x003d0900
 8006088:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800608c:	4b9d      	ldr	r3, [pc, #628]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800608e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800609e:	f7fc ffd7 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 80060a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80060a4:	f001 bf13 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80060a8:	4b96      	ldr	r3, [pc, #600]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b4:	d10a      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d107      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff f8e5 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ca:	e043      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80060cc:	4b8d      	ldr	r3, [pc, #564]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d8:	d10a      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d107      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fa3d 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ee:	e031      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80060f0:	4b84      	ldr	r3, [pc, #528]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d10c      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d109      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006102:	4b80      	ldr	r3, [pc, #512]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	08db      	lsrs	r3, r3, #3
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	4a7e      	ldr	r2, [pc, #504]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800610e:	fa22 f303 	lsr.w	r3, r2, r3
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
 8006114:	e01e      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006116:	4b7b      	ldr	r3, [pc, #492]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800611e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	2b04      	cmp	r3, #4
 8006128:	d102      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800612a:	4b78      	ldr	r3, [pc, #480]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
 800612e:	e011      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006130:	4b74      	ldr	r3, [pc, #464]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d106      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2b05      	cmp	r3, #5
 8006142:	d103      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006150:	f001 bebd 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006154:	f001 bebb 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006158:	4b6a      	ldr	r3, [pc, #424]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800615a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800615e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800616a:	f7fc ff5b 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800616e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006170:	f001 bead 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006174:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800617c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006180:	d10a      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	2b08      	cmp	r3, #8
 8006186:	d107      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f87f 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
 8006196:	e03d      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	2b10      	cmp	r3, #16
 800619c:	d108      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f9de 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ac:	f001 be8f 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80061b0:	4b54      	ldr	r3, [pc, #336]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d10c      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	2b18      	cmp	r3, #24
 80061c0:	d109      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061c2:	4b50      	ldr	r3, [pc, #320]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	08db      	lsrs	r3, r3, #3
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d4:	e01e      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80061d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e2:	d105      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d102      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80061ea:	4b48      	ldr	r3, [pc, #288]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80061ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ee:	e011      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80061f0:	4b44      	ldr	r3, [pc, #272]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d106      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b28      	cmp	r3, #40	@ 0x28
 8006202:	d103      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006210:	f001 be5d 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006214:	f001 be5b 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006218:	4b3a      	ldr	r3, [pc, #232]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800621a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800621e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006222:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	2b00      	cmp	r3, #0
 8006228:	d104      	bne.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800622a:	f7fc fefb 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800622e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006230:	f001 be4d 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006234:	4b33      	ldr	r3, [pc, #204]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800623c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006240:	d10a      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d107      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006248:	f107 0314 	add.w	r3, r7, #20
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff f81f 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	637b      	str	r3, [r7, #52]	@ 0x34
 8006256:	e045      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006258:	4b2a      	ldr	r3, [pc, #168]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	2b80      	cmp	r3, #128	@ 0x80
 800626a:	d107      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff f977 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	637b      	str	r3, [r7, #52]	@ 0x34
 800627a:	e033      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800627c:	4b21      	ldr	r3, [pc, #132]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d10c      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	2bc0      	cmp	r3, #192	@ 0xc0
 800628c:	d109      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800628e:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	4a1b      	ldr	r2, [pc, #108]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a0:	e020      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80062a2:	4b18      	ldr	r3, [pc, #96]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ae:	d106      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b6:	d102      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80062b8:	4b14      	ldr	r3, [pc, #80]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80062bc:	e012      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062be:	4b11      	ldr	r3, [pc, #68]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d107      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80062d2:	d103      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80062d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062da:	e003      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062e0:	f001 bdf5 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062e4:	f001 bdf3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062ee:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80062f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062fa:	f7fc fe93 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80062fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006300:	f001 bde5 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006304:	44020c00 	.word	0x44020c00
 8006308:	03d09000 	.word	0x03d09000
 800630c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006310:	4ba0      	ldr	r3, [pc, #640]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006318:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800631c:	d10b      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006324:	d107      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006326:	f107 0314 	add.w	r3, r7, #20
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe ffb0 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
 8006334:	e047      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006336:	4b97      	ldr	r3, [pc, #604]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800633e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006342:	d10b      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff f907 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
 800635a:	e034      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800635c:	4b8d      	ldr	r3, [pc, #564]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d10d      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800636e:	d109      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006370:	4b88      	ldr	r3, [pc, #544]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	08db      	lsrs	r3, r3, #3
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	4a87      	ldr	r2, [pc, #540]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
 8006380:	637b      	str	r3, [r7, #52]	@ 0x34
 8006382:	e020      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006384:	4b83      	ldr	r3, [pc, #524]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800638c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006390:	d106      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006398:	d102      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800639a:	4b80      	ldr	r3, [pc, #512]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800639c:	637b      	str	r3, [r7, #52]	@ 0x34
 800639e:	e012      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80063a0:	4b7c      	ldr	r3, [pc, #496]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d107      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80063b4:	d103      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80063bc:	e003      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063c2:	f001 bd84 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063c6:	f001 bd82 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80063ca:	4b72      	ldr	r3, [pc, #456]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80063d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063dc:	f7fc fe22 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80063e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80063e2:	f001 bd74 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80063e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063f2:	d10b      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fa:	d107      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063fc:	f107 0314 	add.w	r3, r7, #20
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe ff45 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
 800640a:	e047      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800640c:	4b61      	ldr	r3, [pc, #388]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006418:	d10b      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006420:	d107      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff f89c 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006430:	e034      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006432:	4b58      	ldr	r3, [pc, #352]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d10d      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006444:	d109      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006446:	4b53      	ldr	r3, [pc, #332]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	08db      	lsrs	r3, r3, #3
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	4a51      	ldr	r2, [pc, #324]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
 8006458:	e020      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800645a:	4b4e      	ldr	r3, [pc, #312]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006466:	d106      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800646e:	d102      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006470:	4b4a      	ldr	r3, [pc, #296]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006472:	637b      	str	r3, [r7, #52]	@ 0x34
 8006474:	e012      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006476:	4b47      	ldr	r3, [pc, #284]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d107      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800648a:	d103      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800648c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
 8006492:	e003      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006498:	f001 bd19 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800649c:	f001 bd17 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80064a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064a6:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064b2:	f7fc fdb7 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80064b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80064b8:	f001 bd09 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80064bc:	4b35      	ldr	r3, [pc, #212]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c8:	d10b      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d0:	d107      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d2:	f107 0314 	add.w	r3, r7, #20
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe feda 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e0:	e047      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80064e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ee:	d10b      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f6:	d107      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff f831 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
 8006506:	e034      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006508:	4b22      	ldr	r3, [pc, #136]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800651a:	d109      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800651c:	4b1d      	ldr	r3, [pc, #116]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
 800652e:	e020      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006530:	4b18      	ldr	r3, [pc, #96]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800653c:	d106      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006544:	d102      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006546:	4b15      	ldr	r3, [pc, #84]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006548:	637b      	str	r3, [r7, #52]	@ 0x34
 800654a:	e012      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800654c:	4b11      	ldr	r3, [pc, #68]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800654e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d107      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006560:	d103      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006566:	637b      	str	r3, [r7, #52]	@ 0x34
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800656e:	f001 bcae 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006572:	f001 bcac 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006576:	4b07      	ldr	r3, [pc, #28]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800657c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fc fd4c 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800658c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800658e:	f001 bc9e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006592:	bf00      	nop
 8006594:	44020c00 	.word	0x44020c00
 8006598:	03d09000 	.word	0x03d09000
 800659c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80065a0:	4ba0      	ldr	r3, [pc, #640]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ac:	d10b      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065b4:	d107      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b6:	f107 0314 	add.w	r3, r7, #20
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fe68 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c4:	e047      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80065c6:	4b97      	ldr	r3, [pc, #604]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d2:	d10b      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80065da:	d107      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065dc:	f107 0308 	add.w	r3, r7, #8
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe ffbf 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ea:	e034      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80065ec:	4b8d      	ldr	r3, [pc, #564]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d10d      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80065f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80065fe:	d109      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006600:	4b88      	ldr	r3, [pc, #544]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	08db      	lsrs	r3, r3, #3
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	4a87      	ldr	r2, [pc, #540]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	e020      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006614:	4b83      	ldr	r3, [pc, #524]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800661c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006620:	d106      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006628:	d102      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800662a:	4b80      	ldr	r3, [pc, #512]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
 800662e:	e012      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006630:	4b7c      	ldr	r3, [pc, #496]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	d107      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006644:	d103      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8006646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006652:	f001 bc3c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006656:	f001 bc3a 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800665a:	4b72      	ldr	r3, [pc, #456]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800665c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006660:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006664:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800666c:	f7fc fcda 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8006670:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006672:	f001 bc2c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006676:	4b6b      	ldr	r3, [pc, #428]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800667e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006682:	d10b      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800668a:	d107      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fdfd 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	e047      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800669c:	4b61      	ldr	r3, [pc, #388]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a8:	d10b      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b0:	d107      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe ff54 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c0:	e034      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80066c2:	4b58      	ldr	r3, [pc, #352]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d10d      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066d4:	d109      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066d6:	4b53      	ldr	r3, [pc, #332]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	4a51      	ldr	r2, [pc, #324]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80066e2:	fa22 f303 	lsr.w	r3, r2, r3
 80066e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e8:	e020      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80066ea:	4b4e      	ldr	r3, [pc, #312]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f6:	d106      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066fe:	d102      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006700:	4b4a      	ldr	r3, [pc, #296]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34
 8006704:	e012      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8006706:	4b47      	ldr	r3, [pc, #284]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b02      	cmp	r3, #2
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800671a:	d103      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800671c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
 8006722:	e003      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006728:	f001 bbd1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800672c:	f001 bbcf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006730:	4b3c      	ldr	r3, [pc, #240]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006736:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800673a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d104      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006742:	f7fc fc6f 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8006746:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006748:	f001 bbc1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800674c:	4b35      	ldr	r3, [pc, #212]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006758:	d10b      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006760:	d107      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006762:	f107 0314 	add.w	r3, r7, #20
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fd92 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006770:	e047      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006772:	4b2c      	ldr	r3, [pc, #176]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800677a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677e:	d10b      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006786:	d107      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006788:	f107 0308 	add.w	r3, r7, #8
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fee9 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	e034      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006798:	4b22      	ldr	r3, [pc, #136]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d10d      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067aa:	d109      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	08db      	lsrs	r3, r3, #3
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067be:	e020      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80067c0:	4b18      	ldr	r3, [pc, #96]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067cc:	d106      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067d4:	d102      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80067d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067da:	e012      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80067dc:	4b11      	ldr	r3, [pc, #68]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d107      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80067f0:	d103      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80067f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067fe:	f001 bb66 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006802:	f001 bb64 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8006806:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800680c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006810:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fc fc04 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800681c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800681e:	f001 bb56 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006822:	bf00      	nop
 8006824:	44020c00 	.word	0x44020c00
 8006828:	03d09000 	.word	0x03d09000
 800682c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006830:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800683c:	d10b      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006844:	d107      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006846:	f107 0314 	add.w	r3, r7, #20
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd20 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	637b      	str	r3, [r7, #52]	@ 0x34
 8006854:	e047      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006856:	4b98      	ldr	r3, [pc, #608]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800685e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006862:	d10b      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800686a:	d107      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800686c:	f107 0308 	add.w	r3, r7, #8
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fe77 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	e034      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800687c:	4b8e      	ldr	r3, [pc, #568]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d10d      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800688e:	d109      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006890:	4b89      	ldr	r3, [pc, #548]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	4a88      	ldr	r2, [pc, #544]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
 80068a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a2:	e020      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80068a4:	4b84      	ldr	r3, [pc, #528]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b0:	d106      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b8:	d102      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80068ba:	4b81      	ldr	r3, [pc, #516]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068be:	e012      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80068c0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d107      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80068d4:	d103      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
 80068dc:	e003      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068e2:	f001 baf4 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068e6:	f001 baf2 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80068ea:	4b73      	ldr	r3, [pc, #460]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fc fb92 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8006900:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006902:	f001 bae4 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006906:	4b6c      	ldr	r3, [pc, #432]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800690e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006912:	d10a      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	2b01      	cmp	r3, #1
 8006918:	d107      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691a:	f107 0314 	add.w	r3, r7, #20
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fcb6 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	e043      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800692a:	4b63      	ldr	r3, [pc, #396]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006936:	d10a      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	2b02      	cmp	r3, #2
 800693c:	d107      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800693e:	f107 0308 	add.w	r3, r7, #8
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fe0e 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	637b      	str	r3, [r7, #52]	@ 0x34
 800694c:	e031      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800694e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	2b03      	cmp	r3, #3
 800695e:	d109      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006960:	4b55      	ldr	r3, [pc, #340]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	08db      	lsrs	r3, r3, #3
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	4a54      	ldr	r2, [pc, #336]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
 8006972:	e01e      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006974:	4b50      	ldr	r3, [pc, #320]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d105      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b04      	cmp	r3, #4
 8006986:	d102      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006988:	4b4d      	ldr	r3, [pc, #308]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800698a:	637b      	str	r3, [r7, #52]	@ 0x34
 800698c:	e011      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800698e:	4b4a      	ldr	r3, [pc, #296]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d106      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	2b05      	cmp	r3, #5
 80069a0:	d103      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80069a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ae:	f001 ba8e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069b2:	f001 ba8c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80069b6:	4b40      	ldr	r3, [pc, #256]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80069bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069c8:	f7fc fb2c 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80069cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ce:	f001 ba7e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80069d2:	4b39      	ldr	r3, [pc, #228]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069de:	d10a      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d107      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fc50 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f4:	e043      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80069f6:	4b30      	ldr	r3, [pc, #192]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a02:	d10a      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d107      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fda8 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a18:	e031      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006a1a:	4b27      	ldr	r3, [pc, #156]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	2b30      	cmp	r3, #48	@ 0x30
 8006a2a:	d109      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a2c:	4b22      	ldr	r3, [pc, #136]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a21      	ldr	r2, [pc, #132]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3e:	e01e      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006a40:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a4c:	d105      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	2b40      	cmp	r3, #64	@ 0x40
 8006a52:	d102      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a58:	e011      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006a5a:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d106      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	2b50      	cmp	r3, #80	@ 0x50
 8006a6c:	d103      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	e003      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7a:	f001 ba28 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a7e:	f001 ba26 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a88:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a94:	f7fc faf2 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8006a98:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a9a:	f001 ba18 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa6:	f107 0314 	add.w	r3, r7, #20
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fbf0 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ab4:	f001 ba0b 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ab8:	44020c00 	.word	0x44020c00
 8006abc:	03d09000 	.word	0x03d09000
 8006ac0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aca:	d108      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe fd47 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ada:	f001 b9f8 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ade:	4ba4      	ldr	r3, [pc, #656]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d10d      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006af0:	d109      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006af2:	4b9f      	ldr	r3, [pc, #636]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	08db      	lsrs	r3, r3, #3
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	4a9d      	ldr	r2, [pc, #628]	@ (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006afe:	fa22 f303 	lsr.w	r3, r2, r3
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b04:	e020      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006b06:	4b9a      	ldr	r3, [pc, #616]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b12:	d106      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b1a:	d102      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006b1c:	4b96      	ldr	r3, [pc, #600]	@ (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b20:	e012      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b22:	4b93      	ldr	r3, [pc, #588]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d107      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b36:	d103      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	e003      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b44:	f001 b9c3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b48:	f001 b9c1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b4c:	4b88      	ldr	r3, [pc, #544]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006b5e:	f7fc fa45 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8006b62:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006b64:	f001 b9b3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d104      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fc f911 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8006b72:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b74:	f001 b9ab 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d108      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7e:	f107 0314 	add.w	r3, r7, #20
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fb84 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b8c:	f001 b99f 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b90:	4b77      	ldr	r3, [pc, #476]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b9c:	d105      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d102      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006ba4:	4b75      	ldr	r3, [pc, #468]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba8:	e023      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006baa:	4b71      	ldr	r3, [pc, #452]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d109      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	08db      	lsrs	r3, r3, #3
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bce:	e010      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006bd0:	4b67      	ldr	r3, [pc, #412]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bdc:	d105      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	d102      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006be4:	4b64      	ldr	r3, [pc, #400]	@ (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	e003      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bee:	f001 b96e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bf2:	f001 b96c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006bf6:	4b5e      	ldr	r3, [pc, #376]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006c02:	4b5b      	ldr	r3, [pc, #364]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1c:	e012      	b.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006c1e:	4b54      	ldr	r3, [pc, #336]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d103      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006c34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3a:	e003      	b.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006c40:	f001 b945 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c44:	f001 b943 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c48:	4b49      	ldr	r3, [pc, #292]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c5a:	f7fc f9e3 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8006c5e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c60:	f001 b935 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c6a:	d108      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c6c:	f107 0308 	add.w	r3, r7, #8
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fc77 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c7a:	f001 b928 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d10d      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c92:	4b37      	ldr	r3, [pc, #220]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	4a35      	ldr	r2, [pc, #212]	@ (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca4:	e011      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006ca6:	4b32      	ldr	r3, [pc, #200]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cba:	d102      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc0:	e003      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc6:	f001 b902 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cca:	f001 b900 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006cce:	4b28      	ldr	r3, [pc, #160]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cd4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006cd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fc f9a0 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ce6:	f001 b8f2 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cf0:	d108      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe fc34 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d00:	f001 b8e5 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006d04:	4b1a      	ldr	r3, [pc, #104]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d10d      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d16:	d109      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d18:	4b15      	ldr	r3, [pc, #84]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	08db      	lsrs	r3, r3, #3
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
 8006d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2a:	e011      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006d2c:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d38:	d106      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006d40:	d102      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d46:	e003      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4c:	f001 b8bf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d50:	f001 b8bd 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006d54:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d5a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d66:	f7fc f989 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8006d6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d6c:	f001 b8af 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d70:	44020c00 	.word	0x44020c00
 8006d74:	03d09000 	.word	0x03d09000
 8006d78:	003d0900 	.word	0x003d0900
 8006d7c:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d86:	d108      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d88:	f107 0308 	add.w	r3, r7, #8
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fbe9 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d96:	f001 b89a 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006d9a:	4b9f      	ldr	r3, [pc, #636]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d10d      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dac:	d109      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dae:	4b9a      	ldr	r3, [pc, #616]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	08db      	lsrs	r3, r3, #3
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	4a98      	ldr	r2, [pc, #608]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006dba:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc0:	e011      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006dc2:	4b95      	ldr	r3, [pc, #596]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dce:	d106      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dd6:	d102      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006dd8:	4b91      	ldr	r3, [pc, #580]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ddc:	e003      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006de2:	f001 b874 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006de6:	f001 b872 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006dea:	4b8b      	ldr	r3, [pc, #556]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006dec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006df0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006dfc:	f7fc f93e 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8006e00:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e02:	f001 b864 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e0c:	d108      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0e:	f107 0308 	add.w	r3, r7, #8
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fba6 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1c:	f001 b857 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006e20:	4b7d      	ldr	r3, [pc, #500]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d10d      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e32:	d109      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e34:	4b78      	ldr	r3, [pc, #480]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	4a77      	ldr	r2, [pc, #476]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e46:	e011      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006e48:	4b73      	ldr	r3, [pc, #460]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e54:	d106      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e5c:	d102      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006e5e:	4b70      	ldr	r3, [pc, #448]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e68:	f001 b831 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e6c:	f001 b82f 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006e70:	4b69      	ldr	r3, [pc, #420]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e76:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006e7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e82:	f7fc f8cf 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8006e86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e88:	f001 b821 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e92:	d108      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fb63 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ea2:	f001 b814 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eb8:	d10a      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006eba:	4b57      	ldr	r3, [pc, #348]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	4a55      	ldr	r2, [pc, #340]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ecc:	f000 bfff 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ed4:	f000 bffb 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ed8:	4b4f      	ldr	r3, [pc, #316]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eda:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ede:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006eea:	d056      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ef2:	f200 808b 	bhi.w	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efc:	d03e      	beq.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f04:	f200 8082 	bhi.w	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f0e:	d027      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f16:	d879      	bhi.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f1e:	d017      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f26:	d871      	bhi.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f34:	d004      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006f36:	e069      	b.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f38:	f7fc f8a0 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8006f3c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006f3e:	e068      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe f9a3 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f4e:	e060      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f50:	f107 0308 	add.w	r3, r7, #8
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fb05 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f5e:	e058      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f60:	4b2d      	ldr	r3, [pc, #180]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d103      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f72:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f74:	e04d      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f7a:	e04a      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f7c:	4b26      	ldr	r3, [pc, #152]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f8a:	d103      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006f8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f92:	e03e      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f98:	e03b      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fa0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d10c      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fb8:	4b17      	ldr	r3, [pc, #92]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	08db      	lsrs	r3, r3, #3
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	4a16      	ldr	r2, [pc, #88]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fca:	e01e      	b.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fcc:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd8:	d106      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe0:	d102      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe6:	e010      	b.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ff4:	d106      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ffc:	d102      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ffe:	4b09      	ldr	r3, [pc, #36]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
 8007002:	e002      	b.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007008:	e003      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800700a:	e002      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007010:	bf00      	nop
          }
        }
        break;
 8007012:	f000 bf5c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007016:	bf00      	nop
 8007018:	44020c00 	.word	0x44020c00
 800701c:	03d09000 	.word	0x03d09000
 8007020:	003d0900 	.word	0x003d0900
 8007024:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007028:	4b9e      	ldr	r3, [pc, #632]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800702a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800702e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007032:	633b      	str	r3, [r7, #48]	@ 0x30
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800703a:	d056      	beq.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007042:	f200 808b 	bhi.w	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800704c:	d03e      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007054:	f200 8082 	bhi.w	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800705e:	d027      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007066:	d879      	bhi.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706e:	d017      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007076:	d871      	bhi.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007084:	d004      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007086:	e069      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fb ffcc 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800708c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800708e:	e068      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007090:	f107 0314 	add.w	r3, r7, #20
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe f8fb 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800709e:	e060      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a0:	f107 0308 	add.w	r3, r7, #8
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fa5d 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ae:	e058      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070b0:	4b7c      	ldr	r3, [pc, #496]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d103      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070c4:	e04d      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ca:	e04a      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070cc:	4b75      	ldr	r3, [pc, #468]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070da:	d103      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80070dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070e2:	e03e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070e8:	e03b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070ea:	4b6e      	ldr	r3, [pc, #440]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80070f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070f6:	4b6b      	ldr	r3, [pc, #428]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d10c      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007108:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	4a65      	ldr	r2, [pc, #404]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
 800711a:	e01e      	b.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800711c:	4b61      	ldr	r3, [pc, #388]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007128:	d106      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007130:	d102      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007132:	4b5e      	ldr	r3, [pc, #376]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
 8007136:	e010      	b.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007138:	4b5a      	ldr	r3, [pc, #360]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007144:	d106      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714c:	d102      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800714e:	4b58      	ldr	r3, [pc, #352]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
 8007152:	e002      	b.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007158:	e003      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800715a:	e002      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007160:	bf00      	nop
          }
        }
        break;
 8007162:	f000 beb4 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007166:	4b4f      	ldr	r3, [pc, #316]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007168:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800716c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007170:	633b      	str	r3, [r7, #48]	@ 0x30
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007178:	d056      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007180:	f200 808b 	bhi.w	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800718a:	d03e      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007192:	f200 8082 	bhi.w	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800719c:	d027      	beq.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071a4:	d879      	bhi.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071ac:	d017      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071b4:	d871      	bhi.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c2:	d004      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80071c4:	e069      	b.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80071c6:	f7fb ff59 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 80071ca:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80071cc:	e068      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ce:	f107 0314 	add.w	r3, r7, #20
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe f85c 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071dc:	e060      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe f9be 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071ec:	e058      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071ee:	4b2d      	ldr	r3, [pc, #180]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d103      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80071fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007200:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007202:	e04d      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007208:	e04a      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800720a:	4b26      	ldr	r3, [pc, #152]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800720c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007218:	d103      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800721a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007220:	e03e      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007226:	e03b      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007228:	4b1e      	ldr	r3, [pc, #120]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800722a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800722e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007234:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b02      	cmp	r3, #2
 800723e:	d10c      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007246:	4b17      	ldr	r3, [pc, #92]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	08db      	lsrs	r3, r3, #3
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007252:	fa22 f303 	lsr.w	r3, r2, r3
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
 8007258:	e01e      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800725a:	4b12      	ldr	r3, [pc, #72]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007266:	d106      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726e:	d102      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007270:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
 8007274:	e010      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007282:	d106      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800728a:	d102      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800728c:	4b08      	ldr	r3, [pc, #32]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007290:	e002      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007296:	e003      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800729e:	bf00      	nop
          }
        }
        break;
 80072a0:	f000 be15 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072a4:	44020c00 	.word	0x44020c00
 80072a8:	03d09000 	.word	0x03d09000
 80072ac:	003d0900 	.word	0x003d0900
 80072b0:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80072b4:	4b9e      	ldr	r3, [pc, #632]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072ba:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80072be:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80072c6:	d056      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80072ce:	f200 808b 	bhi.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d8:	d03e      	beq.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e0:	f200 8082 	bhi.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072ea:	d027      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072f2:	d879      	bhi.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072fa:	d017      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007302:	d871      	bhi.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007310:	d004      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007312:	e069      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007314:	f7fb feb2 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8007318:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800731a:	e068      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800731c:	f107 0314 	add.w	r3, r7, #20
 8007320:	4618      	mov	r0, r3
 8007322:	f7fd ffb5 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800732a:	e060      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe f917 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800733a:	e058      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800733c:	4b7c      	ldr	r3, [pc, #496]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800733e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b02      	cmp	r3, #2
 8007348:	d103      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800734a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007350:	e04d      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007356:	e04a      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007358:	4b75      	ldr	r3, [pc, #468]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800735a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800735e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007366:	d103      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007368:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800736c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800736e:	e03e      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007374:	e03b      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007376:	4b6e      	ldr	r3, [pc, #440]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007382:	4b6b      	ldr	r3, [pc, #428]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d10c      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007394:	4b66      	ldr	r3, [pc, #408]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	4a65      	ldr	r2, [pc, #404]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a6:	e01e      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073a8:	4b61      	ldr	r3, [pc, #388]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073b4:	d106      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073be:	4b5e      	ldr	r3, [pc, #376]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	e010      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073c4:	4b5a      	ldr	r3, [pc, #360]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d0:	d106      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073d8:	d102      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073da:	4b58      	ldr	r3, [pc, #352]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073de:	e002      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80073e6:	e002      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073ec:	bf00      	nop
          }
        }
        break;
 80073ee:	f000 bd6e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80073f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073f8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80073fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007404:	d056      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800740c:	f200 808b 	bhi.w	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007416:	d03e      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800741e:	f200 8082 	bhi.w	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007428:	d027      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007430:	d879      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007438:	d017      	beq.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007440:	d871      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800744e:	d004      	beq.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007450:	e069      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007452:	f7fb fe13 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8007456:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007458:	e068      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745a:	f107 0314 	add.w	r3, r7, #20
 800745e:	4618      	mov	r0, r3
 8007460:	f7fd ff16 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007468:	e060      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe f878 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007478:	e058      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800747a:	4b2d      	ldr	r3, [pc, #180]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800747c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b02      	cmp	r3, #2
 8007486:	d103      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800748e:	e04d      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007494:	e04a      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007496:	4b26      	ldr	r3, [pc, #152]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a4:	d103      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80074a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074ac:	e03e      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074b2:	e03b      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d10c      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074d2:	4b17      	ldr	r3, [pc, #92]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	08db      	lsrs	r3, r3, #3
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80074de:	fa22 f303 	lsr.w	r3, r2, r3
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	e01e      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074e6:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f2:	d106      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fa:	d102      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80074fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80074fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007500:	e010      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007502:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800750a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800750e:	d106      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007516:	d102      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	e002      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007522:	e003      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007524:	e002      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800752a:	bf00      	nop
          }
        }
        break;
 800752c:	f000 bccf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007530:	44020c00 	.word	0x44020c00
 8007534:	03d09000 	.word	0x03d09000
 8007538:	003d0900 	.word	0x003d0900
 800753c:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007540:	4b9e      	ldr	r3, [pc, #632]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007542:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007546:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800754a:	633b      	str	r3, [r7, #48]	@ 0x30
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007552:	d056      	beq.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800755a:	f200 808b 	bhi.w	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007564:	d03e      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756c:	f200 8082 	bhi.w	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007576:	d027      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800757e:	d879      	bhi.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007586:	d017      	beq.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758e:	d871      	bhi.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800759c:	d004      	beq.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800759e:	e069      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80075a0:	f7fb fd6c 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 80075a4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80075a6:	e068      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a8:	f107 0314 	add.w	r3, r7, #20
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fd fe6f 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075b6:	e060      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b8:	f107 0308 	add.w	r3, r7, #8
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fd ffd1 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075c6:	e058      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075c8:	4b7c      	ldr	r3, [pc, #496]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d103      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80075d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075da:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075dc:	e04d      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075e2:	e04a      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80075e4:	4b75      	ldr	r3, [pc, #468]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f2:	d103      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80075f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075fa:	e03e      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007600:	e03b      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007602:	4b6e      	ldr	r3, [pc, #440]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007608:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800760c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800760e:	4b6b      	ldr	r3, [pc, #428]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b02      	cmp	r3, #2
 8007618:	d10c      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800761a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d109      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007620:	4b66      	ldr	r3, [pc, #408]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	4a65      	ldr	r2, [pc, #404]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
 8007630:	637b      	str	r3, [r7, #52]	@ 0x34
 8007632:	e01e      	b.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007634:	4b61      	ldr	r3, [pc, #388]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800763c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007640:	d106      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8007642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007648:	d102      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800764a:	4b5e      	ldr	r3, [pc, #376]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
 800764e:	e010      	b.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007650:	4b5a      	ldr	r3, [pc, #360]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800765c:	d106      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007664:	d102      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007666:	4b58      	ldr	r3, [pc, #352]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007670:	e003      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8007672:	e002      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007678:	bf00      	nop
          }
        }
        break;
 800767a:	f000 bc28 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800767e:	4b4f      	ldr	r3, [pc, #316]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007688:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800768a:	4b4c      	ldr	r3, [pc, #304]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007696:	d106      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800769e:	4b4a      	ldr	r3, [pc, #296]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80076a0:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80076a2:	f000 bc14 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ac:	d108      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ae:	f107 0320 	add.w	r3, r7, #32
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fd fc82 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076bc:	f000 bc07 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076c6:	d107      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd fddf 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076d6:	e3fa      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076dc:	e3f7      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80076de:	4b37      	ldr	r3, [pc, #220]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d861      	bhi.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80076f0:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	0800770d 	.word	0x0800770d
 80076fc:	0800771d 	.word	0x0800771d
 8007700:	0800772d 	.word	0x0800772d
 8007704:	0800773d 	.word	0x0800773d
 8007708:	08007743 	.word	0x08007743
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800770c:	f107 0320 	add.w	r3, r7, #32
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd fc53 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800771a:	e04e      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	4618      	mov	r0, r3
 8007722:	f7fd fdb5 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800772a:	e046      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800772c:	f107 0308 	add.w	r3, r7, #8
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd ff17 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800773a:	e03e      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800773c:	4b23      	ldr	r3, [pc, #140]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007740:	e03b      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007742:	4b1e      	ldr	r3, [pc, #120]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007748:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800774c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800774e:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d10c      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007760:	4b16      	ldr	r3, [pc, #88]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	08db      	lsrs	r3, r3, #3
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	4a15      	ldr	r2, [pc, #84]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
 8007772:	e01e      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007774:	4b11      	ldr	r3, [pc, #68]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800777c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007780:	d106      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007788:	d102      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800778a:	4b0e      	ldr	r3, [pc, #56]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800778c:	637b      	str	r3, [r7, #52]	@ 0x34
 800778e:	e010      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800779c:	d106      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800779e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a4:	d102      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077a6:	4b08      	ldr	r3, [pc, #32]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077aa:	e002      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80077b0:	e003      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80077b2:	e002      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077b8:	bf00      	nop
          }
        }
        break;
 80077ba:	e388      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077bc:	44020c00 	.word	0x44020c00
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	003d0900 	.word	0x003d0900
 80077c8:	017d7840 	.word	0x017d7840
 80077cc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80077d0:	4ba9      	ldr	r3, [pc, #676]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	2b20      	cmp	r3, #32
 80077e0:	f200 809a 	bhi.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80077e4:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007871 	.word	0x08007871
 80077f0:	08007919 	.word	0x08007919
 80077f4:	08007919 	.word	0x08007919
 80077f8:	08007919 	.word	0x08007919
 80077fc:	08007919 	.word	0x08007919
 8007800:	08007919 	.word	0x08007919
 8007804:	08007919 	.word	0x08007919
 8007808:	08007919 	.word	0x08007919
 800780c:	08007881 	.word	0x08007881
 8007810:	08007919 	.word	0x08007919
 8007814:	08007919 	.word	0x08007919
 8007818:	08007919 	.word	0x08007919
 800781c:	08007919 	.word	0x08007919
 8007820:	08007919 	.word	0x08007919
 8007824:	08007919 	.word	0x08007919
 8007828:	08007919 	.word	0x08007919
 800782c:	08007891 	.word	0x08007891
 8007830:	08007919 	.word	0x08007919
 8007834:	08007919 	.word	0x08007919
 8007838:	08007919 	.word	0x08007919
 800783c:	08007919 	.word	0x08007919
 8007840:	08007919 	.word	0x08007919
 8007844:	08007919 	.word	0x08007919
 8007848:	08007919 	.word	0x08007919
 800784c:	080078a1 	.word	0x080078a1
 8007850:	08007919 	.word	0x08007919
 8007854:	08007919 	.word	0x08007919
 8007858:	08007919 	.word	0x08007919
 800785c:	08007919 	.word	0x08007919
 8007860:	08007919 	.word	0x08007919
 8007864:	08007919 	.word	0x08007919
 8007868:	08007919 	.word	0x08007919
 800786c:	080078a7 	.word	0x080078a7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007870:	f107 0320 	add.w	r3, r7, #32
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd fba1 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800787e:	e04e      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007880:	f107 0314 	add.w	r3, r7, #20
 8007884:	4618      	mov	r0, r3
 8007886:	f7fd fd03 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800788e:	e046      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4618      	mov	r0, r3
 8007896:	f7fd fe65 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800789e:	e03e      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80078a0:	4b76      	ldr	r3, [pc, #472]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078a4:	e03b      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078a6:	4b74      	ldr	r3, [pc, #464]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078b2:	4b71      	ldr	r3, [pc, #452]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80078be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d6:	e01e      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078d8:	4b67      	ldr	r3, [pc, #412]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e4:	d106      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80078e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ec:	d102      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078ee:	4b65      	ldr	r3, [pc, #404]	@ (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80078f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f2:	e010      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078f4:	4b60      	ldr	r3, [pc, #384]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007900:	d106      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8007902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007908:	d102      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800790a:	4b5f      	ldr	r3, [pc, #380]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800790c:	637b      	str	r3, [r7, #52]	@ 0x34
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007914:	e003      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8007916:	e002      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800791c:	bf00      	nop
          }
        }
        break;
 800791e:	e2d6      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007920:	4b55      	ldr	r3, [pc, #340]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007926:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800792a:	633b      	str	r3, [r7, #48]	@ 0x30
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007932:	d031      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800793a:	d866      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007940:	d027      	beq.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	2bc0      	cmp	r3, #192	@ 0xc0
 8007946:	d860      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	2b80      	cmp	r3, #128	@ 0x80
 800794c:	d019      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	2b80      	cmp	r3, #128	@ 0x80
 8007952:	d85a      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	2b40      	cmp	r3, #64	@ 0x40
 800795e:	d008      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007960:	e053      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007962:	f107 0320 	add.w	r3, r7, #32
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd fb28 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007970:	e04e      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007972:	f107 0314 	add.w	r3, r7, #20
 8007976:	4618      	mov	r0, r3
 8007978:	f7fd fc8a 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007980:	e046      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4618      	mov	r0, r3
 8007988:	f7fd fdec 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007990:	e03e      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007992:	4b3a      	ldr	r3, [pc, #232]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007996:	e03b      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007998:	4b37      	ldr	r3, [pc, #220]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800799a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800799e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079a4:	4b34      	ldr	r3, [pc, #208]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d10c      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079b6:	4b30      	ldr	r3, [pc, #192]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	08db      	lsrs	r3, r3, #3
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	4a2f      	ldr	r2, [pc, #188]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80079c2:	fa22 f303 	lsr.w	r3, r2, r3
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c8:	e01e      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d6:	d106      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80079d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079de:	d102      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80079e0:	4b28      	ldr	r3, [pc, #160]	@ (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80079e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e4:	e010      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079e6:	4b24      	ldr	r3, [pc, #144]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079f2:	d106      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80079f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079fa:	d102      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079fc:	4b22      	ldr	r3, [pc, #136]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a06:	e003      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007a08:	e002      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a0e:	bf00      	nop
          }
        }
        break;
 8007a10:	e25d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007a12:	4b19      	ldr	r3, [pc, #100]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a18:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007a1c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fb fb14 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8007a28:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007a2a:	e250      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007a2c:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a38:	d10b      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a40:	d107      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a42:	f107 0314 	add.w	r3, r7, #20
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fd fc22 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a50:	e04f      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007a52:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a5e:	d115      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a66:	d111      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a68:	f107 0308 	add.w	r3, r7, #8
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd fd79 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a76:	e03c      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007a78:	44020c00 	.word	0x44020c00
 8007a7c:	00bb8000 	.word	0x00bb8000
 8007a80:	03d09000 	.word	0x03d09000
 8007a84:	003d0900 	.word	0x003d0900
 8007a88:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007a8c:	4b94      	ldr	r3, [pc, #592]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d10d      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007a9e:	d109      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	08db      	lsrs	r3, r3, #3
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	4a8e      	ldr	r2, [pc, #568]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab2:	e01e      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac0:	d106      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ac8:	d102      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007aca:	4b87      	ldr	r3, [pc, #540]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ace:	e010      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007ad0:	4b83      	ldr	r3, [pc, #524]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007adc:	d106      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ae4:	d102      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007ae6:	4b81      	ldr	r3, [pc, #516]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aea:	e002      	b.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007af0:	e1ed      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007af2:	e1ec      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007af4:	4b7a      	ldr	r3, [pc, #488]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007afa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007b06:	f7fb fab9 	bl	800307c <HAL_RCC_GetPCLK3Freq>
 8007b0a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b0c:	e1df      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007b0e:	4b74      	ldr	r3, [pc, #464]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b1a:	d10b      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b22:	d107      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b24:	f107 0314 	add.w	r3, r7, #20
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fd fbb1 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b32:	e045      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007b34:	4b6a      	ldr	r3, [pc, #424]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b40:	d10b      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b48:	d107      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fd08 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b58:	e032      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007b5a:	4b61      	ldr	r3, [pc, #388]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d10d      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b6c:	d109      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	08db      	lsrs	r3, r3, #3
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	4a5a      	ldr	r2, [pc, #360]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b80:	e01e      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007b82:	4b57      	ldr	r3, [pc, #348]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8e:	d106      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b96:	d102      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007b98:	4b53      	ldr	r3, [pc, #332]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b9c:	e010      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007b9e:	4b50      	ldr	r3, [pc, #320]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007baa:	d106      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007bb2:	d102      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb8:	e002      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bbe:	e186      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bc0:	e185      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007bc2:	4b47      	ldr	r3, [pc, #284]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bc8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007bcc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007bd4:	f7fb fa3c 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8007bd8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007bda:	e178      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007bdc:	4b40      	ldr	r3, [pc, #256]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007be8:	d10b      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf2:	f107 0314 	add.w	r3, r7, #20
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd fb4a 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c00:	e045      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007c02:	4b37      	ldr	r3, [pc, #220]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c0e:	d10b      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c16:	d107      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fd fca1 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c26:	e032      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007c28:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d10d      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007c3a:	d109      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c3c:	4b28      	ldr	r3, [pc, #160]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	08db      	lsrs	r3, r3, #3
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	4a27      	ldr	r2, [pc, #156]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c48:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4e:	e01e      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007c50:	4b23      	ldr	r3, [pc, #140]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c5c:	d106      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c64:	d102      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007c66:	4b20      	ldr	r3, [pc, #128]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6a:	e010      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c78:	d106      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007c80:	d102      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007c82:	4b1a      	ldr	r3, [pc, #104]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c86:	e002      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c8c:	e11f      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c8e:	e11e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007c90:	4b13      	ldr	r3, [pc, #76]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d85f      	bhi.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cb9 	.word	0x08007cb9
 8007cac:	08007cc1 	.word	0x08007cc1
 8007cb0:	08007cd1 	.word	0x08007cd1
 8007cb4:	08007cf1 	.word	0x08007cf1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007cb8:	f7fb f998 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8007cbc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007cbe:	e053      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc0:	f107 0320 	add.w	r3, r7, #32
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd f979 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cce:	e04b      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fd fadb 	bl	8005290 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cde:	e043      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007ce0:	44020c00 	.word	0x44020c00
 8007ce4:	03d09000 	.word	0x03d09000
 8007ce8:	003d0900 	.word	0x003d0900
 8007cec:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cf0:	4b79      	ldr	r3, [pc, #484]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cf6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cfc:	4b76      	ldr	r3, [pc, #472]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d10c      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d0e:	4b72      	ldr	r3, [pc, #456]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	08db      	lsrs	r3, r3, #3
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	4a70      	ldr	r2, [pc, #448]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d20:	e01e      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d22:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d38:	4b69      	ldr	r3, [pc, #420]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	e010      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d3e:	4b66      	ldr	r3, [pc, #408]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d54:	4b63      	ldr	r3, [pc, #396]	@ (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d58:	e002      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d5e:	e003      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007d60:	e002      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d66:	bf00      	nop
          }
        }
        break;
 8007d68:	e0b1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d70:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007d76:	4b58      	ldr	r3, [pc, #352]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d106      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d103      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d90:	e01f      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007d92:	4b51      	ldr	r3, [pc, #324]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007da0:	d106      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	2b40      	cmp	r3, #64	@ 0x40
 8007da6:	d103      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007da8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dae:	e010      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007db0:	4b49      	ldr	r3, [pc, #292]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	2b80      	cmp	r3, #128	@ 0x80
 8007dc2:	d103      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007dc4:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dca:	e002      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007dd0:	e07d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dd2:	e07c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007dd4:	4b40      	ldr	r3, [pc, #256]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dda:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007dde:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007de0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dec:	d105      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007df4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df8:	e031      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007dfa:	4b37      	ldr	r3, [pc, #220]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e06:	d10a      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d107      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e0e:	f107 0320 	add.w	r3, r7, #32
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fd f8d2 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1c:	e01f      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d103      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e38:	e011      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007e3a:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e48:	d106      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	2b30      	cmp	r3, #48	@ 0x30
 8007e4e:	d103      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007e50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e56:	e002      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007e5c:	e037      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e5e:	e036      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007e60:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	2b10      	cmp	r3, #16
 8007e70:	d107      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e72:	f107 0320 	add.w	r3, r7, #32
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fd f8a0 	bl	8004fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007e80:	e025      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007e82:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e8e:	d10a      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d107      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e96:	f107 0308 	add.w	r3, r7, #8
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fd fb62 	bl	8005564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea4:	e00f      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb2:	d105      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	2b30      	cmp	r3, #48	@ 0x30
 8007eb8:	d102      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007eba:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebe:	e002      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007ec4:	e003      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ec6:	e002      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ecc:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	373c      	adds	r7, #60	@ 0x3c
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}
 8007ed8:	44020c00 	.word	0x44020c00
 8007edc:	03d09000 	.word	0x03d09000
 8007ee0:	003d0900 	.word	0x003d0900
 8007ee4:	017d7840 	.word	0x017d7840
 8007ee8:	02dc6c00 	.word	0x02dc6c00

08007eec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007ef4:	4b48      	ldr	r3, [pc, #288]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a47      	ldr	r2, [pc, #284]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f00:	f7f9 fa92 	bl	8001428 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f06:	e008      	b.n	8007f1a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f08:	f7f9 fa8e 	bl	8001428 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e07a      	b.n	8008010 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007f26:	4b3c      	ldr	r3, [pc, #240]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6811      	ldr	r1, [r2, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6852      	ldr	r2, [r2, #4]
 8007f3a:	0212      	lsls	r2, r2, #8
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	4936      	ldr	r1, [pc, #216]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	025b      	lsls	r3, r3, #9
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f74:	4928      	ldr	r1, [pc, #160]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007f7a:	4b27      	ldr	r3, [pc, #156]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7e:	f023 020c 	bic.w	r2, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	4924      	ldr	r1, [pc, #144]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007f8c:	4b22      	ldr	r3, [pc, #136]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	f023 0220 	bic.w	r2, r3, #32
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	491f      	ldr	r1, [pc, #124]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa6:	491c      	ldr	r1, [pc, #112]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007fac:	4b1a      	ldr	r3, [pc, #104]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fb2:	f023 0310 	bic.w	r3, r3, #16
 8007fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007fb8:	4b17      	ldr	r3, [pc, #92]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6a12      	ldr	r2, [r2, #32]
 8007fc8:	00d2      	lsls	r2, r2, #3
 8007fca:	4913      	ldr	r1, [pc, #76]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007fd0:	4b11      	ldr	r3, [pc, #68]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd4:	4a10      	ldr	r2, [pc, #64]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fd6:	f043 0310 	orr.w	r3, r3, #16
 8007fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fe6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fe8:	f7f9 fa1e 	bl	8001428 <HAL_GetTick>
 8007fec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fee:	e008      	b.n	8008002 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ff0:	f7f9 fa1a 	bl	8001428 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e006      	b.n	8008010 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008002:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800800e:	2300      	movs	r3, #0

}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	44020c00 	.word	0x44020c00

0800801c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008024:	4b48      	ldr	r3, [pc, #288]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a47      	ldr	r2, [pc, #284]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008030:	f7f9 f9fa 	bl	8001428 <HAL_GetTick>
 8008034:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008036:	e008      	b.n	800804a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008038:	f7f9 f9f6 	bl	8001428 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e07a      	b.n	8008140 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800804a:	4b3f      	ldr	r3, [pc, #252]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008056:	4b3c      	ldr	r3, [pc, #240]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6852      	ldr	r2, [r2, #4]
 800806a:	0212      	lsls	r2, r2, #8
 800806c:	430a      	orrs	r2, r1
 800806e:	4936      	ldr	r1, [pc, #216]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008070:	4313      	orrs	r3, r2
 8008072:	630b      	str	r3, [r1, #48]	@ 0x30
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	3b01      	subs	r3, #1
 800807a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	3b01      	subs	r3, #1
 8008084:	025b      	lsls	r3, r3, #9
 8008086:	b29b      	uxth	r3, r3
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	3b01      	subs	r3, #1
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080a4:	4928      	ldr	r1, [pc, #160]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080aa:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	f023 020c 	bic.w	r2, r3, #12
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	4924      	ldr	r1, [pc, #144]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80080bc:	4b22      	ldr	r3, [pc, #136]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	f023 0220 	bic.w	r2, r3, #32
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	491f      	ldr	r1, [pc, #124]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d6:	491c      	ldr	r1, [pc, #112]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80080dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080e2:	f023 0310 	bic.w	r3, r3, #16
 80080e6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80080e8:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6a12      	ldr	r2, [r2, #32]
 80080f8:	00d2      	lsls	r2, r2, #3
 80080fa:	4913      	ldr	r1, [pc, #76]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008100:	4b11      	ldr	r3, [pc, #68]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008104:	4a10      	ldr	r2, [pc, #64]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008106:	f043 0310 	orr.w	r3, r3, #16
 800810a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800810c:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0d      	ldr	r2, [pc, #52]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008116:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008118:	f7f9 f986 	bl	8001428 <HAL_GetTick>
 800811c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800811e:	e008      	b.n	8008132 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008120:	f7f9 f982 	bl	8001428 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e006      	b.n	8008140 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008132:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	44020c00 	.word	0x44020c00

0800814c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e042      	b.n	80081e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008164:	2b00      	cmp	r3, #0
 8008166:	d106      	bne.n	8008176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7f8 fcc9 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2224      	movs	r2, #36	@ 0x24
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0201 	bic.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fe24 	bl	8008de4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fc33 	bl	8008a08 <UART_SetConfig>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e01b      	b.n	80081e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0201 	orr.w	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fea3 	bl	8008f28 <UART_CheckIdleState>
 80081e2:	4603      	mov	r3, r0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	@ 0x28
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008202:	2b20      	cmp	r3, #32
 8008204:	f040 808b 	bne.w	800831e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <HAL_UART_Transmit+0x28>
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e083      	b.n	8008320 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008222:	2b80      	cmp	r3, #128	@ 0x80
 8008224:	d107      	bne.n	8008236 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008234:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2221      	movs	r2, #33	@ 0x21
 8008242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008246:	f7f9 f8ef 	bl	8001428 <HAL_GetTick>
 800824a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008264:	d108      	bne.n	8008278 <HAL_UART_Transmit+0x8c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	e003      	b.n	8008280 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008280:	e030      	b.n	80082e4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	2180      	movs	r1, #128	@ 0x80
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fef5 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e03d      	b.n	8008320 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	3302      	adds	r3, #2
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	e007      	b.n	80082d2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3301      	adds	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1c8      	bne.n	8008282 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2200      	movs	r2, #0
 80082f8:	2140      	movs	r1, #64	@ 0x40
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 febe 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e006      	b.n	8008320 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	@ 0x28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800833c:	2b20      	cmp	r3, #32
 800833e:	d14b      	bne.n	80083d8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_UART_Receive_IT+0x24>
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e044      	b.n	80083da <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b40      	cmp	r3, #64	@ 0x40
 8008362:	d107      	bne.n	8008374 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008372:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a1a      	ldr	r2, [pc, #104]	@ (80083e4 <HAL_UART_Receive_IT+0xbc>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d024      	beq.n	80083c8 <HAL_UART_Receive_IT+0xa0>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a19      	ldr	r2, [pc, #100]	@ (80083e8 <HAL_UART_Receive_IT+0xc0>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d01f      	beq.n	80083c8 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d018      	beq.n	80083c8 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	613b      	str	r3, [r7, #16]
   return(result);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	623b      	str	r3, [r7, #32]
 80083b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	69f9      	ldr	r1, [r7, #28]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	461a      	mov	r2, r3
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 fec2 	bl	8009158 <UART_Start_Receive_IT>
 80083d4:	4603      	mov	r3, r0
 80083d6:	e000      	b.n	80083da <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3728      	adds	r7, #40	@ 0x28
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	44002400 	.word	0x44002400
 80083e8:	54002400 	.word	0x54002400

080083ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b0ae      	sub	sp, #184	@ 0xb8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008416:	f640 030f 	movw	r3, #2063	@ 0x80f
 800841a:	4013      	ands	r3, r2
 800841c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d11b      	bne.n	8008460 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d015      	beq.n	8008460 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 82ac 	beq.w	80089ae <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
      }
      return;
 800845e:	e2a6      	b.n	80089ae <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 80fd 	beq.w	8008664 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800846a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800846e:	4b7a      	ldr	r3, [pc, #488]	@ (8008658 <HAL_UART_IRQHandler+0x26c>)
 8008470:	4013      	ands	r3, r2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800847a:	4b78      	ldr	r3, [pc, #480]	@ (800865c <HAL_UART_IRQHandler+0x270>)
 800847c:	4013      	ands	r3, r2
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 80f0 	beq.w	8008664 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d011      	beq.n	80084b4 <HAL_UART_IRQHandler+0xc8>
 8008490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2201      	movs	r2, #1
 80084a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084aa:	f043 0201 	orr.w	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d011      	beq.n	80084e4 <HAL_UART_IRQHandler+0xf8>
 80084c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2202      	movs	r2, #2
 80084d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084da:	f043 0204 	orr.w	r2, r3, #4
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d011      	beq.n	8008514 <HAL_UART_IRQHandler+0x128>
 80084f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2204      	movs	r2, #4
 8008502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850a:	f043 0202 	orr.w	r2, r3, #2
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d017      	beq.n	8008550 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	d105      	bne.n	8008538 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800852c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008530:	4b49      	ldr	r3, [pc, #292]	@ (8008658 <HAL_UART_IRQHandler+0x26c>)
 8008532:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2208      	movs	r2, #8
 800853e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008546:	f043 0208 	orr.w	r2, r3, #8
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008558:	2b00      	cmp	r3, #0
 800855a:	d012      	beq.n	8008582 <HAL_UART_IRQHandler+0x196>
 800855c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008560:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00c      	beq.n	8008582 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8212 	beq.w	80089b2 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800858e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d013      	beq.n	80085c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800859a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d6:	2b40      	cmp	r3, #64	@ 0x40
 80085d8:	d005      	beq.n	80085e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80085de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d02e      	beq.n	8008644 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fed8 	bl	800939c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f6:	2b40      	cmp	r3, #64	@ 0x40
 80085f8:	d120      	bne.n	800863c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008600:	2b00      	cmp	r3, #0
 8008602:	d017      	beq.n	8008634 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860a:	4a15      	ldr	r2, [pc, #84]	@ (8008660 <HAL_UART_IRQHandler+0x274>)
 800860c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008614:	4618      	mov	r0, r3
 8008616:	f7f9 f943 	bl	80018a0 <HAL_DMA_Abort_IT>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d019      	beq.n	8008654 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800862e:	4610      	mov	r0, r2
 8008630:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008632:	e00f      	b.n	8008654 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f9d1 	bl	80089dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800863a:	e00b      	b.n	8008654 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f9cd 	bl	80089dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008642:	e007      	b.n	8008654 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9c9 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008652:	e1ae      	b.n	80089b2 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008654:	bf00      	nop
    return;
 8008656:	e1ac      	b.n	80089b2 <HAL_UART_IRQHandler+0x5c6>
 8008658:	10000001 	.word	0x10000001
 800865c:	04000120 	.word	0x04000120
 8008660:	08009469 	.word	0x08009469

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 8142 	bne.w	80088f2 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800866e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 813b 	beq.w	80088f2 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800867c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8134 	beq.w	80088f2 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2210      	movs	r2, #16
 8008690:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869c:	2b40      	cmp	r3, #64	@ 0x40
 800869e:	f040 80aa 	bne.w	80087f6 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ac:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80086b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8084 	beq.w	80087c2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086c0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d27c      	bcs.n	80087c2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80086ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086da:	2b81      	cmp	r3, #129	@ 0x81
 80086dc:	d060      	beq.n	80087a0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008704:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008708:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e2      	bne.n	80086de <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800872a:	f023 0301 	bic.w	r3, r3, #1
 800872e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800873c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800873e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008742:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800874a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e3      	bne.n	8008718 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800876c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800876e:	f023 0310 	bic.w	r3, r3, #16
 8008772:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008780:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008782:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008786:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800878e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e4      	bne.n	800875e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800879a:	4618      	mov	r0, r3
 800879c:	f7f9 f804 	bl	80017a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f918 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80087c0:	e0f9      	b.n	80089b6 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087c8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80087cc:	429a      	cmp	r2, r3
 80087ce:	f040 80f2 	bne.w	80089b6 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087da:	2b81      	cmp	r3, #129	@ 0x81
 80087dc:	f040 80eb 	bne.w	80089b6 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8fe 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
      return;
 80087f4:	e0df      	b.n	80089b6 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008802:	b29b      	uxth	r3, r3
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80d1 	beq.w	80089ba <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8008818:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80cc 	beq.w	80089ba <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008844:	647b      	str	r3, [r7, #68]	@ 0x44
 8008846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800884a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e4      	bne.n	8008822 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	623b      	str	r3, [r7, #32]
   return(result);
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800886e:	f023 0301 	bic.w	r3, r3, #1
 8008872:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008880:	633a      	str	r2, [r7, #48]	@ 0x30
 8008882:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e1      	bne.n	8008858 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f023 0310 	bic.w	r3, r3, #16
 80088bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80088ca:	61fb      	str	r3, [r7, #28]
 80088cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	69b9      	ldr	r1, [r7, #24]
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	617b      	str	r3, [r7, #20]
   return(result);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e4      	bne.n	80088a8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2202      	movs	r2, #2
 80088e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f880 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088f0:	e063      	b.n	80089ba <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00e      	beq.n	800891c <HAL_UART_IRQHandler+0x530>
 80088fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d008      	beq.n	800891c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fb21 	bl	8009f5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800891a:	e051      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800891c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008924:	2b00      	cmp	r3, #0
 8008926:	d014      	beq.n	8008952 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800892c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008930:	2b00      	cmp	r3, #0
 8008932:	d105      	bne.n	8008940 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008944:	2b00      	cmp	r3, #0
 8008946:	d03a      	beq.n	80089be <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	4798      	blx	r3
    }
    return;
 8008950:	e035      	b.n	80089be <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <HAL_UART_IRQHandler+0x586>
 800895e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fd92 	bl	8009494 <UART_EndTransmit_IT>
    return;
 8008970:	e026      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d009      	beq.n	8008992 <HAL_UART_IRQHandler+0x5a6>
 800897e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008982:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 fafa 	bl	8009f84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008990:	e016      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d010      	beq.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
 800899e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	da0c      	bge.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fae2 	bl	8009f70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ac:	e008      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
      return;
 80089ae:	bf00      	nop
 80089b0:	e006      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
    return;
 80089b2:	bf00      	nop
 80089b4:	e004      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
      return;
 80089b6:	bf00      	nop
 80089b8:	e002      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
      return;
 80089ba:	bf00      	nop
 80089bc:	e000      	b.n	80089c0 <HAL_UART_IRQHandler+0x5d4>
    return;
 80089be:	bf00      	nop
  }
}
 80089c0:	37b8      	adds	r7, #184	@ 0xb8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop

080089c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a0c:	b094      	sub	sp, #80	@ 0x50
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4b78      	ldr	r3, [pc, #480]	@ (8008c00 <UART_SetConfig+0x1f8>)
 8008a1e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4971      	ldr	r1, [pc, #452]	@ (8008c04 <UART_SetConfig+0x1fc>)
 8008a40:	4019      	ands	r1, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	68d9      	ldr	r1, [r3, #12]
 8008a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	ea40 0301 	orr.w	r3, r0, r1
 8008a62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	4b64      	ldr	r3, [pc, #400]	@ (8008c00 <UART_SetConfig+0x1f8>)
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d009      	beq.n	8008a88 <UART_SetConfig+0x80>
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b63      	ldr	r3, [pc, #396]	@ (8008c08 <UART_SetConfig+0x200>)
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d004      	beq.n	8008a88 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a80:	6a1a      	ldr	r2, [r3, #32]
 8008a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a84:	4313      	orrs	r3, r2
 8008a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008a92:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa6:	f023 000f 	bic.w	r0, r3, #15
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	ea40 0301 	orr.w	r3, r0, r1
 8008ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4b53      	ldr	r3, [pc, #332]	@ (8008c0c <UART_SetConfig+0x204>)
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d102      	bne.n	8008ac8 <UART_SetConfig+0xc0>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ac6:	e066      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b50      	ldr	r3, [pc, #320]	@ (8008c10 <UART_SetConfig+0x208>)
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d102      	bne.n	8008ad8 <UART_SetConfig+0xd0>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad6:	e05e      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b4d      	ldr	r3, [pc, #308]	@ (8008c14 <UART_SetConfig+0x20c>)
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d102      	bne.n	8008ae8 <UART_SetConfig+0xe0>
 8008ae2:	2304      	movs	r3, #4
 8008ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae6:	e056      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b4a      	ldr	r3, [pc, #296]	@ (8008c18 <UART_SetConfig+0x210>)
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d102      	bne.n	8008af8 <UART_SetConfig+0xf0>
 8008af2:	2308      	movs	r3, #8
 8008af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af6:	e04e      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	4b47      	ldr	r3, [pc, #284]	@ (8008c1c <UART_SetConfig+0x214>)
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d102      	bne.n	8008b08 <UART_SetConfig+0x100>
 8008b02:	2310      	movs	r3, #16
 8008b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b06:	e046      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	4b44      	ldr	r3, [pc, #272]	@ (8008c20 <UART_SetConfig+0x218>)
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d102      	bne.n	8008b18 <UART_SetConfig+0x110>
 8008b12:	2320      	movs	r3, #32
 8008b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b16:	e03e      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b41      	ldr	r3, [pc, #260]	@ (8008c24 <UART_SetConfig+0x21c>)
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d102      	bne.n	8008b28 <UART_SetConfig+0x120>
 8008b22:	2340      	movs	r3, #64	@ 0x40
 8008b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b26:	e036      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8008c28 <UART_SetConfig+0x220>)
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d102      	bne.n	8008b38 <UART_SetConfig+0x130>
 8008b32:	2380      	movs	r3, #128	@ 0x80
 8008b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b36:	e02e      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c2c <UART_SetConfig+0x224>)
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d103      	bne.n	8008b4a <UART_SetConfig+0x142>
 8008b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b48:	e025      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b38      	ldr	r3, [pc, #224]	@ (8008c30 <UART_SetConfig+0x228>)
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d103      	bne.n	8008b5c <UART_SetConfig+0x154>
 8008b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b5a:	e01c      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	4b34      	ldr	r3, [pc, #208]	@ (8008c34 <UART_SetConfig+0x22c>)
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d103      	bne.n	8008b6e <UART_SetConfig+0x166>
 8008b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b6c:	e013      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b31      	ldr	r3, [pc, #196]	@ (8008c38 <UART_SetConfig+0x230>)
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d103      	bne.n	8008b80 <UART_SetConfig+0x178>
 8008b78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b7e:	e00a      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b1e      	ldr	r3, [pc, #120]	@ (8008c00 <UART_SetConfig+0x1f8>)
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d103      	bne.n	8008b92 <UART_SetConfig+0x18a>
 8008b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b90:	e001      	b.n	8008b96 <UART_SetConfig+0x18e>
 8008b92:	2300      	movs	r3, #0
 8008b94:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b19      	ldr	r3, [pc, #100]	@ (8008c00 <UART_SetConfig+0x1f8>)
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d005      	beq.n	8008bac <UART_SetConfig+0x1a4>
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	4b18      	ldr	r3, [pc, #96]	@ (8008c08 <UART_SetConfig+0x200>)
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	f040 8094 	bne.w	8008cd4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bae:	2200      	movs	r2, #0
 8008bb0:	623b      	str	r3, [r7, #32]
 8008bb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bb8:	f7fc fe3e 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bbc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 80f7 	beq.w	8008db4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bca:	4a1c      	ldr	r2, [pc, #112]	@ (8008c3c <UART_SetConfig+0x234>)
 8008bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	4613      	mov	r3, r2
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	4413      	add	r3, r2
 8008be4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d305      	bcc.n	8008bf6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d924      	bls.n	8008c40 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bfc:	e069      	b.n	8008cd2 <UART_SetConfig+0x2ca>
 8008bfe:	bf00      	nop
 8008c00:	44002400 	.word	0x44002400
 8008c04:	cfff69f3 	.word	0xcfff69f3
 8008c08:	54002400 	.word	0x54002400
 8008c0c:	40013800 	.word	0x40013800
 8008c10:	40004400 	.word	0x40004400
 8008c14:	40004800 	.word	0x40004800
 8008c18:	40004c00 	.word	0x40004c00
 8008c1c:	40005000 	.word	0x40005000
 8008c20:	40006400 	.word	0x40006400
 8008c24:	40007800 	.word	0x40007800
 8008c28:	40007c00 	.word	0x40007c00
 8008c2c:	40008000 	.word	0x40008000
 8008c30:	40006800 	.word	0x40006800
 8008c34:	40006c00 	.word	0x40006c00
 8008c38:	40008400 	.word	0x40008400
 8008c3c:	0800a408 	.word	0x0800a408
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c42:	2200      	movs	r2, #0
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	61fa      	str	r2, [r7, #28]
 8008c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	4a64      	ldr	r2, [pc, #400]	@ (8008de0 <UART_SetConfig+0x3d8>)
 8008c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2200      	movs	r2, #0
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	617a      	str	r2, [r7, #20]
 8008c5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c62:	f7f7 fb13 	bl	800028c <__aeabi_uldivmod>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	020b      	lsls	r3, r1, #8
 8008c78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c7c:	0202      	lsls	r2, r0, #8
 8008c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c80:	6849      	ldr	r1, [r1, #4]
 8008c82:	0849      	lsrs	r1, r1, #1
 8008c84:	2000      	movs	r0, #0
 8008c86:	460c      	mov	r4, r1
 8008c88:	4605      	mov	r5, r0
 8008c8a:	eb12 0804 	adds.w	r8, r2, r4
 8008c8e:	eb43 0905 	adc.w	r9, r3, r5
 8008c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	60bb      	str	r3, [r7, #8]
 8008c9a:	60fa      	str	r2, [r7, #12]
 8008c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 faf2 	bl	800028c <__aeabi_uldivmod>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4613      	mov	r3, r2
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cb6:	d308      	bcc.n	8008cca <UART_SetConfig+0x2c2>
 8008cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cbe:	d204      	bcs.n	8008cca <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cc6:	60da      	str	r2, [r3, #12]
 8008cc8:	e003      	b.n	8008cd2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008cd0:	e070      	b.n	8008db4 <UART_SetConfig+0x3ac>
 8008cd2:	e06f      	b.n	8008db4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cdc:	d13c      	bne.n	8008d58 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	607a      	str	r2, [r7, #4]
 8008ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cea:	f7fc fda5 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 8008cee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d05e      	beq.n	8008db4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfa:	4a39      	ldr	r2, [pc, #228]	@ (8008de0 <UART_SetConfig+0x3d8>)
 8008cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d08:	005a      	lsls	r2, r3, #1
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	441a      	add	r2, r3
 8008d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d1e:	2b0f      	cmp	r3, #15
 8008d20:	d916      	bls.n	8008d50 <UART_SetConfig+0x348>
 8008d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d28:	d212      	bcs.n	8008d50 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f023 030f 	bic.w	r3, r3, #15
 8008d32:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008d42:	4313      	orrs	r3, r2
 8008d44:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	e031      	b.n	8008db4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d56:	e02d      	b.n	8008db4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	469a      	mov	sl, r3
 8008d5e:	4693      	mov	fp, r2
 8008d60:	4650      	mov	r0, sl
 8008d62:	4659      	mov	r1, fp
 8008d64:	f7fc fd68 	bl	8005838 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d68:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d021      	beq.n	8008db4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d74:	4a1a      	ldr	r2, [pc, #104]	@ (8008de0 <UART_SetConfig+0x3d8>)
 8008d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	085b      	lsrs	r3, r3, #1
 8008d88:	441a      	add	r2, r3
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d909      	bls.n	8008dae <UART_SetConfig+0x3a6>
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008da0:	d205      	bcs.n	8008dae <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60da      	str	r2, [r3, #12]
 8008dac:	e002      	b.n	8008db4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	2201      	movs	r2, #1
 8008db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	2200      	movs	r2, #0
 8008dce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3750      	adds	r7, #80	@ 0x50
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dde:	bf00      	nop
 8008de0:	0800a408 	.word	0x0800a408

08008de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01a      	beq.n	8008efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee2:	d10a      	bne.n	8008efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b098      	sub	sp, #96	@ 0x60
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f38:	f7f8 fa76 	bl	8001428 <HAL_GetTick>
 8008f3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b08      	cmp	r3, #8
 8008f4a:	d12f      	bne.n	8008fac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f54:	2200      	movs	r2, #0
 8008f56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f88e 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d022      	beq.n	8008fac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e063      	b.n	8009074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d149      	bne.n	800904e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f857 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d03c      	beq.n	800904e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e6      	bne.n	8008fd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	60fb      	str	r3, [r7, #12]
   return(result);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009026:	61fa      	str	r2, [r7, #28]
 8009028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	69b9      	ldr	r1, [r7, #24]
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	617b      	str	r3, [r7, #20]
   return(result);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e5      	bne.n	8009006 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2220      	movs	r2, #32
 800903e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e012      	b.n	8009074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3758      	adds	r7, #88	@ 0x58
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	4613      	mov	r3, r2
 800908a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908c:	e04f      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d04b      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009096:	f7f8 f9c7 	bl	8001428 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <UART_WaitOnFlagUntilTimeout+0x30>
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e04e      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d037      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b80      	cmp	r3, #128	@ 0x80
 80090c2:	d034      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d031      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d110      	bne.n	80090fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2208      	movs	r2, #8
 80090de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f95b 	bl	800939c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2208      	movs	r2, #8
 80090ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e029      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009108:	d111      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f941 	bl	800939c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e00f      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4013      	ands	r3, r2
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	bf0c      	ite	eq
 800913e:	2301      	moveq	r3, #1
 8009140:	2300      	movne	r3, #0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	429a      	cmp	r2, r3
 800914a:	d0a0      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009158:	b480      	push	{r7}
 800915a:	b0a3      	sub	sp, #140	@ 0x8c
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	88fa      	ldrh	r2, [r7, #6]
 8009178:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800918a:	d10e      	bne.n	80091aa <UART_Start_Receive_IT+0x52>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <UART_Start_Receive_IT+0x48>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800919a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800919e:	e02d      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	22ff      	movs	r2, #255	@ 0xff
 80091a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091a8:	e028      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10d      	bne.n	80091ce <UART_Start_Receive_IT+0x76>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <UART_Start_Receive_IT+0x6c>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	22ff      	movs	r2, #255	@ 0xff
 80091be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091c2:	e01b      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	227f      	movs	r2, #127	@ 0x7f
 80091c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091cc:	e016      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091d6:	d10d      	bne.n	80091f4 <UART_Start_Receive_IT+0x9c>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <UART_Start_Receive_IT+0x92>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	227f      	movs	r2, #127	@ 0x7f
 80091e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091e8:	e008      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	223f      	movs	r2, #63	@ 0x3f
 80091ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091f2:	e003      	b.n	80091fc <UART_Start_Receive_IT+0xa4>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2222      	movs	r2, #34	@ 0x22
 8009208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800921c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800921e:	f043 0301 	orr.w	r3, r3, #1
 8009222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009230:	673a      	str	r2, [r7, #112]	@ 0x70
 8009232:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009236:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800923e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e3      	bne.n	800920c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800924c:	d14f      	bne.n	80092ee <UART_Start_Receive_IT+0x196>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009254:	88fa      	ldrh	r2, [r7, #6]
 8009256:	429a      	cmp	r2, r3
 8009258:	d349      	bcc.n	80092ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009262:	d107      	bne.n	8009274 <UART_Start_Receive_IT+0x11c>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a47      	ldr	r2, [pc, #284]	@ (800938c <UART_Start_Receive_IT+0x234>)
 8009270:	675a      	str	r2, [r3, #116]	@ 0x74
 8009272:	e002      	b.n	800927a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4a46      	ldr	r2, [pc, #280]	@ (8009390 <UART_Start_Receive_IT+0x238>)
 8009278:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d01a      	beq.n	80092b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80092aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80092b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e4      	bne.n	8009282 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3308      	adds	r3, #8
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3308      	adds	r3, #8
 80092d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80092d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80092da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80092e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e5      	bne.n	80092b8 <UART_Start_Receive_IT+0x160>
 80092ec:	e046      	b.n	800937c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f6:	d107      	bne.n	8009308 <UART_Start_Receive_IT+0x1b0>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d103      	bne.n	8009308 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4a24      	ldr	r2, [pc, #144]	@ (8009394 <UART_Start_Receive_IT+0x23c>)
 8009304:	675a      	str	r2, [r3, #116]	@ 0x74
 8009306:	e002      	b.n	800930e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a23      	ldr	r2, [pc, #140]	@ (8009398 <UART_Start_Receive_IT+0x240>)
 800930c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d019      	beq.n	800934a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800932a:	677b      	str	r3, [r7, #116]	@ 0x74
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
 8009336:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800933a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e6      	bne.n	8009316 <UART_Start_Receive_IT+0x1be>
 8009348:	e018      	b.n	800937c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	613b      	str	r3, [r7, #16]
   return(result);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f043 0320 	orr.w	r3, r3, #32
 800935e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009368:	623b      	str	r3, [r7, #32]
 800936a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	69f9      	ldr	r1, [r7, #28]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	61bb      	str	r3, [r7, #24]
   return(result);
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	378c      	adds	r7, #140	@ 0x8c
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	08009be5 	.word	0x08009be5
 8009390:	08009875 	.word	0x08009875
 8009394:	080096b1 	.word	0x080096b1
 8009398:	080094ed 	.word	0x080094ed

0800939c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800939c:	b480      	push	{r7}
 800939e:	b095      	sub	sp, #84	@ 0x54
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80093c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e6      	bne.n	80093a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3308      	adds	r3, #8
 80093f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e3      	bne.n	80093d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d118      	bne.n	8009448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	60bb      	str	r3, [r7, #8]
   return(result);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f023 0310 	bic.w	r3, r3, #16
 800942a:	647b      	str	r3, [r7, #68]	@ 0x44
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009434:	61bb      	str	r3, [r7, #24]
 8009436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6979      	ldr	r1, [r7, #20]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	613b      	str	r3, [r7, #16]
   return(result);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800945c:	bf00      	nop
 800945e:	3754      	adds	r7, #84	@ 0x54
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff faa8 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094b0:	61fb      	str	r3, [r7, #28]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	61bb      	str	r3, [r7, #24]
 80094bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6979      	ldr	r1, [r7, #20]
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	613b      	str	r3, [r7, #16]
   return(result);
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e6      	bne.n	800949c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fa73 	bl	80089c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094e2:	bf00      	nop
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b09c      	sub	sp, #112	@ 0x70
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009504:	2b22      	cmp	r3, #34	@ 0x22
 8009506:	f040 80c3 	bne.w	8009690 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009510:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009514:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009518:	b2d9      	uxtb	r1, r3
 800951a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800951e:	b2da      	uxtb	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009524:	400a      	ands	r2, r1
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800953a:	b29b      	uxth	r3, r3
 800953c:	3b01      	subs	r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	f040 80a6 	bne.w	80096a0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009572:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009574:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009598:	f023 0301 	bic.w	r3, r3, #1
 800959c:	667b      	str	r3, [r7, #100]	@ 0x64
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80095a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e5      	bne.n	8009586 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a35      	ldr	r2, [pc, #212]	@ (80096a8 <UART_RxISR_8BIT+0x1bc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d024      	beq.n	8009622 <UART_RxISR_8BIT+0x136>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a33      	ldr	r2, [pc, #204]	@ (80096ac <UART_RxISR_8BIT+0x1c0>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d01f      	beq.n	8009622 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d018      	beq.n	8009622 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009604:	663b      	str	r3, [r7, #96]	@ 0x60
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800960e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009610:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e6      	bne.n	80095f0 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009626:	2b01      	cmp	r3, #1
 8009628:	d12e      	bne.n	8009688 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	60fb      	str	r3, [r7, #12]
   return(result);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f023 0310 	bic.w	r3, r3, #16
 8009644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800964e:	61fb      	str	r3, [r7, #28]
 8009650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	69b9      	ldr	r1, [r7, #24]
 8009654:	69fa      	ldr	r2, [r7, #28]
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	617b      	str	r3, [r7, #20]
   return(result);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e6      	bne.n	8009630 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b10      	cmp	r3, #16
 800966e:	d103      	bne.n	8009678 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2210      	movs	r2, #16
 8009676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff f9b5 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009686:	e00b      	b.n	80096a0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7f7 f9c5 	bl	8000a18 <HAL_UART_RxCpltCallback>
}
 800968e:	e007      	b.n	80096a0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0208 	orr.w	r2, r2, #8
 800969e:	619a      	str	r2, [r3, #24]
}
 80096a0:	bf00      	nop
 80096a2:	3770      	adds	r7, #112	@ 0x70
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	44002400 	.word	0x44002400
 80096ac:	54002400 	.word	0x54002400

080096b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b09c      	sub	sp, #112	@ 0x70
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096c8:	2b22      	cmp	r3, #34	@ 0x22
 80096ca:	f040 80c3 	bne.w	8009854 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80096de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80096e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80096e6:	4013      	ands	r3, r2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f2:	1c9a      	adds	r2, r3, #2
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096fe:	b29b      	uxth	r3, r3
 8009700:	3b01      	subs	r3, #1
 8009702:	b29a      	uxth	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 80a6 	bne.w	8009864 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800972c:	667b      	str	r3, [r7, #100]	@ 0x64
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009736:	657b      	str	r3, [r7, #84]	@ 0x54
 8009738:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800973c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e6      	bne.n	8009718 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975c:	f023 0301 	bic.w	r3, r3, #1
 8009760:	663b      	str	r3, [r7, #96]	@ 0x60
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800976a:	643a      	str	r2, [r7, #64]	@ 0x40
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e5      	bne.n	800974a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2220      	movs	r2, #32
 8009782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a35      	ldr	r2, [pc, #212]	@ (800986c <UART_RxISR_16BIT+0x1bc>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d024      	beq.n	80097e6 <UART_RxISR_16BIT+0x136>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a33      	ldr	r2, [pc, #204]	@ (8009870 <UART_RxISR_16BIT+0x1c0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d01f      	beq.n	80097e6 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d018      	beq.n	80097e6 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e6      	bne.n	80097b4 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d12e      	bne.n	800984c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	60bb      	str	r3, [r7, #8]
   return(result);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f023 0310 	bic.w	r3, r3, #16
 8009808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009812:	61bb      	str	r3, [r7, #24]
 8009814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	6979      	ldr	r1, [r7, #20]
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	613b      	str	r3, [r7, #16]
   return(result);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e6      	bne.n	80097f4 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b10      	cmp	r3, #16
 8009832:	d103      	bne.n	800983c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2210      	movs	r2, #16
 800983a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff f8d3 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800984a:	e00b      	b.n	8009864 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7f7 f8e3 	bl	8000a18 <HAL_UART_RxCpltCallback>
}
 8009852:	e007      	b.n	8009864 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0208 	orr.w	r2, r2, #8
 8009862:	619a      	str	r2, [r3, #24]
}
 8009864:	bf00      	nop
 8009866:	3770      	adds	r7, #112	@ 0x70
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	44002400 	.word	0x44002400
 8009870:	54002400 	.word	0x54002400

08009874 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b0ac      	sub	sp, #176	@ 0xb0
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009882:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098aa:	2b22      	cmp	r3, #34	@ 0x22
 80098ac:	f040 8188 	bne.w	8009bc0 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098b6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098ba:	e12b      	b.n	8009b14 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80098ca:	b2d9      	uxtb	r1, r3
 80098cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d6:	400a      	ands	r2, r1
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3b01      	subs	r3, #1
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d053      	beq.n	80099b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800990e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d011      	beq.n	800993e <UART_RxISR_8BIT_FIFOEN+0xca>
 800991a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800991e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2201      	movs	r2, #1
 800992c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009934:	f043 0201 	orr.w	r2, r3, #1
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800993e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d011      	beq.n	800996e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800994a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2202      	movs	r2, #2
 800995c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009964:	f043 0204 	orr.w	r2, r3, #4
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800996e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009972:	f003 0304 	and.w	r3, r3, #4
 8009976:	2b00      	cmp	r3, #0
 8009978:	d011      	beq.n	800999e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800997a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00b      	beq.n	800999e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2204      	movs	r2, #4
 800998c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009994:	f043 0202 	orr.w	r2, r3, #2
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff f817 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 80a8 	bne.w	8009b14 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80099d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099e8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80099ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80099f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e4      	bne.n	80099c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3308      	adds	r3, #8
 8009a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a22:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009a24:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009a28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e1      	bne.n	80099fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a62      	ldr	r2, [pc, #392]	@ (8009bd8 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d026      	beq.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a60      	ldr	r2, [pc, #384]	@ (8009bdc <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d021      	beq.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d01a      	beq.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e4      	bne.n	8009a6c <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d130      	bne.n	8009b0c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	f023 0310 	bic.w	r3, r3, #16
 8009ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ad4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ad8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e4      	bne.n	8009ab0 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	f003 0310 	and.w	r3, r3, #16
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d103      	bne.n	8009afc <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2210      	movs	r2, #16
 8009afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7fe ff73 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009b0a:	e00e      	b.n	8009b2a <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7f6 ff83 	bl	8000a18 <HAL_UART_RxCpltCallback>
        break;
 8009b12:	e00a      	b.n	8009b2a <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b14:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d006      	beq.n	8009b2a <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8009b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b20:	f003 0320 	and.w	r3, r3, #32
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f47f aec9 	bne.w	80098bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d049      	beq.n	8009bd0 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b42:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d242      	bcs.n	8009bd0 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e3      	bne.n	8009b4a <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a16      	ldr	r2, [pc, #88]	@ (8009be0 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009b86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f043 0320 	orr.w	r3, r3, #32
 8009b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6979      	ldr	r1, [r7, #20]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e4      	bne.n	8009b88 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bbe:	e007      	b.n	8009bd0 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699a      	ldr	r2, [r3, #24]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 0208 	orr.w	r2, r2, #8
 8009bce:	619a      	str	r2, [r3, #24]
}
 8009bd0:	bf00      	nop
 8009bd2:	37b0      	adds	r7, #176	@ 0xb0
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	44002400 	.word	0x44002400
 8009bdc:	54002400 	.word	0x54002400
 8009be0:	080094ed 	.word	0x080094ed

08009be4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b0ae      	sub	sp, #184	@ 0xb8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009bf2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c1a:	2b22      	cmp	r3, #34	@ 0x22
 8009c1c:	f040 818c 	bne.w	8009f38 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c26:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c2a:	e12f      	b.n	8009e8c <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c32:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c3e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009c42:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009c46:	4013      	ands	r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c54:	1c9a      	adds	r2, r3, #2
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d053      	beq.n	8009d2a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d011      	beq.n	8009cb2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca8:	f043 0201 	orr.w	r2, r3, #1
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d011      	beq.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd8:	f043 0204 	orr.w	r2, r3, #4
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00b      	beq.n	8009d12 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2204      	movs	r2, #4
 8009d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d08:	f043 0202 	orr.w	r2, r3, #2
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d006      	beq.n	8009d2a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fe fe5d 	bl	80089dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 80aa 	bne.w	8009e8c <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e2      	bne.n	8009d38 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3308      	adds	r3, #8
 8009d78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d88:	f023 0301 	bic.w	r3, r3, #1
 8009d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009da0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e1      	bne.n	8009d72 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a62      	ldr	r2, [pc, #392]	@ (8009f50 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d026      	beq.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x236>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a60      	ldr	r2, [pc, #384]	@ (8009f54 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d021      	beq.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01a      	beq.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009df4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009df8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e4      	bne.n	8009de4 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d130      	bne.n	8009e84 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e38:	f023 0310 	bic.w	r3, r3, #16
 8009e3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e4      	bne.n	8009e28 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b10      	cmp	r3, #16
 8009e6a:	d103      	bne.n	8009e74 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2210      	movs	r2, #16
 8009e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7fe fdb7 	bl	80089f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009e82:	e00e      	b.n	8009ea2 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7f6 fdc7 	bl	8000a18 <HAL_UART_RxCpltCallback>
        break;
 8009e8a:	e00a      	b.n	8009ea2 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e8c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <UART_RxISR_16BIT_FIFOEN+0x2be>
 8009e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f47f aec5 	bne.w	8009c2c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ea8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009eac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d049      	beq.n	8009f48 <UART_RxISR_16BIT_FIFOEN+0x364>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009eba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d242      	bcs.n	8009f48 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ee6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e3      	bne.n	8009ec2 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a16      	ldr	r2, [pc, #88]	@ (8009f58 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009efe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	e853 3f00 	ldrex	r3, [r3]
 8009f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f043 0320 	orr.w	r3, r3, #32
 8009f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	69b9      	ldr	r1, [r7, #24]
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e4      	bne.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f36:	e007      	b.n	8009f48 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0208 	orr.w	r2, r2, #8
 8009f46:	619a      	str	r2, [r3, #24]
}
 8009f48:	bf00      	nop
 8009f4a:	37b8      	adds	r7, #184	@ 0xb8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	44002400 	.word	0x44002400
 8009f54:	54002400 	.word	0x54002400
 8009f58:	080096b1 	.word	0x080096b1

08009f5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_UARTEx_DisableFifoMode+0x16>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e027      	b.n	8009ffe <HAL_UARTEx_DisableFifoMode+0x66>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2224      	movs	r2, #36	@ 0x24
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0201 	bic.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a01e:	2302      	movs	r3, #2
 800a020:	e02d      	b.n	800a07e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2224      	movs	r2, #36	@ 0x24
 800a02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0201 	bic.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f850 	bl	800a104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2220      	movs	r2, #32
 800a070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a09a:	2302      	movs	r3, #2
 800a09c:	e02d      	b.n	800a0fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2224      	movs	r2, #36	@ 0x24
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0201 	bic.w	r2, r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f812 	bl	800a104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a110:	2b00      	cmp	r3, #0
 800a112:	d108      	bne.n	800a126 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a124:	e031      	b.n	800a18a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a126:	2308      	movs	r3, #8
 800a128:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a12a:	2308      	movs	r3, #8
 800a12c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	0e5b      	lsrs	r3, r3, #25
 800a136:	b2db      	uxtb	r3, r3
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	0f5b      	lsrs	r3, r3, #29
 800a146:	b2db      	uxtb	r3, r3
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	7b3a      	ldrb	r2, [r7, #12]
 800a152:	4911      	ldr	r1, [pc, #68]	@ (800a198 <UARTEx_SetNbDataToProcess+0x94>)
 800a154:	5c8a      	ldrb	r2, [r1, r2]
 800a156:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a15a:	7b3a      	ldrb	r2, [r7, #12]
 800a15c:	490f      	ldr	r1, [pc, #60]	@ (800a19c <UARTEx_SetNbDataToProcess+0x98>)
 800a15e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a160:	fb93 f3f2 	sdiv	r3, r3, r2
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	7b7a      	ldrb	r2, [r7, #13]
 800a170:	4909      	ldr	r1, [pc, #36]	@ (800a198 <UARTEx_SetNbDataToProcess+0x94>)
 800a172:	5c8a      	ldrb	r2, [r1, r2]
 800a174:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a178:	7b7a      	ldrb	r2, [r7, #13]
 800a17a:	4908      	ldr	r1, [pc, #32]	@ (800a19c <UARTEx_SetNbDataToProcess+0x98>)
 800a17c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	0800a420 	.word	0x0800a420
 800a19c:	0800a428 	.word	0x0800a428

0800a1a0 <memset>:
 800a1a0:	4402      	add	r2, r0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d100      	bne.n	800a1aa <memset+0xa>
 800a1a8:	4770      	bx	lr
 800a1aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ae:	e7f9      	b.n	800a1a4 <memset+0x4>

0800a1b0 <__libc_init_array>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a1e8 <__libc_init_array+0x38>)
 800a1b4:	2600      	movs	r6, #0
 800a1b6:	4c0d      	ldr	r4, [pc, #52]	@ (800a1ec <__libc_init_array+0x3c>)
 800a1b8:	1b64      	subs	r4, r4, r5
 800a1ba:	10a4      	asrs	r4, r4, #2
 800a1bc:	42a6      	cmp	r6, r4
 800a1be:	d109      	bne.n	800a1d4 <__libc_init_array+0x24>
 800a1c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a1f0 <__libc_init_array+0x40>)
 800a1c2:	2600      	movs	r6, #0
 800a1c4:	4c0b      	ldr	r4, [pc, #44]	@ (800a1f4 <__libc_init_array+0x44>)
 800a1c6:	f000 f825 	bl	800a214 <_init>
 800a1ca:	1b64      	subs	r4, r4, r5
 800a1cc:	10a4      	asrs	r4, r4, #2
 800a1ce:	42a6      	cmp	r6, r4
 800a1d0:	d105      	bne.n	800a1de <__libc_init_array+0x2e>
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d8:	3601      	adds	r6, #1
 800a1da:	4798      	blx	r3
 800a1dc:	e7ee      	b.n	800a1bc <__libc_init_array+0xc>
 800a1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	4798      	blx	r3
 800a1e6:	e7f2      	b.n	800a1ce <__libc_init_array+0x1e>
 800a1e8:	0800a438 	.word	0x0800a438
 800a1ec:	0800a438 	.word	0x0800a438
 800a1f0:	0800a438 	.word	0x0800a438
 800a1f4:	0800a43c 	.word	0x0800a43c

0800a1f8 <memcpy>:
 800a1f8:	440a      	add	r2, r1
 800a1fa:	1e43      	subs	r3, r0, #1
 800a1fc:	4291      	cmp	r1, r2
 800a1fe:	d100      	bne.n	800a202 <memcpy+0xa>
 800a200:	4770      	bx	lr
 800a202:	b510      	push	{r4, lr}
 800a204:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a208:	4291      	cmp	r1, r2
 800a20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a20e:	d1f9      	bne.n	800a204 <memcpy+0xc>
 800a210:	bd10      	pop	{r4, pc}
	...

0800a214 <_init>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr

0800a220 <_fini>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	bf00      	nop
 800a224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a226:	bc08      	pop	{r3}
 800a228:	469e      	mov	lr, r3
 800a22a:	4770      	bx	lr
