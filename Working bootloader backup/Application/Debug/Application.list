
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0800c000  0800c000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008510  0800c24c  0800c24c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0801475c  0801475c  0000975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147cc  080147cc  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  080147cc  080147cc  000097cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147d4  080147d4  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147d4  080147d4  000097d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080147d8  080147d8  000097d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080147dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080147e8  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080147e8  0000a0c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f536  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd5  00000000  00000000  00019578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0001b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cb  00000000  00000000  0001bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030d13  00000000  00000000  0001c333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ece4  00000000  00000000  0004d046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00134423  00000000  00000000  0005bd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019014d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000298c  00000000  00000000  00190190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00192b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c24c <__do_global_dtors_aux>:
 800c24c:	b510      	push	{r4, lr}
 800c24e:	4c05      	ldr	r4, [pc, #20]	@ (800c264 <__do_global_dtors_aux+0x18>)
 800c250:	7823      	ldrb	r3, [r4, #0]
 800c252:	b933      	cbnz	r3, 800c262 <__do_global_dtors_aux+0x16>
 800c254:	4b04      	ldr	r3, [pc, #16]	@ (800c268 <__do_global_dtors_aux+0x1c>)
 800c256:	b113      	cbz	r3, 800c25e <__do_global_dtors_aux+0x12>
 800c258:	4804      	ldr	r0, [pc, #16]	@ (800c26c <__do_global_dtors_aux+0x20>)
 800c25a:	f3af 8000 	nop.w
 800c25e:	2301      	movs	r3, #1
 800c260:	7023      	strb	r3, [r4, #0]
 800c262:	bd10      	pop	{r4, pc}
 800c264:	2000000c 	.word	0x2000000c
 800c268:	00000000 	.word	0x00000000
 800c26c:	08014744 	.word	0x08014744

0800c270 <frame_dummy>:
 800c270:	b508      	push	{r3, lr}
 800c272:	4b03      	ldr	r3, [pc, #12]	@ (800c280 <frame_dummy+0x10>)
 800c274:	b11b      	cbz	r3, 800c27e <frame_dummy+0xe>
 800c276:	4903      	ldr	r1, [pc, #12]	@ (800c284 <frame_dummy+0x14>)
 800c278:	4803      	ldr	r0, [pc, #12]	@ (800c288 <frame_dummy+0x18>)
 800c27a:	f3af 8000 	nop.w
 800c27e:	bd08      	pop	{r3, pc}
 800c280:	00000000 	.word	0x00000000
 800c284:	20000010 	.word	0x20000010
 800c288:	08014744 	.word	0x08014744

0800c28c <__aeabi_uldivmod>:
 800c28c:	b953      	cbnz	r3, 800c2a4 <__aeabi_uldivmod+0x18>
 800c28e:	b94a      	cbnz	r2, 800c2a4 <__aeabi_uldivmod+0x18>
 800c290:	2900      	cmp	r1, #0
 800c292:	bf08      	it	eq
 800c294:	2800      	cmpeq	r0, #0
 800c296:	bf1c      	itt	ne
 800c298:	f04f 31ff 	movne.w	r1, #4294967295
 800c29c:	f04f 30ff 	movne.w	r0, #4294967295
 800c2a0:	f000 b97e 	b.w	800c5a0 <__aeabi_idiv0>
 800c2a4:	f1ad 0c08 	sub.w	ip, sp, #8
 800c2a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c2ac:	f000 f806 	bl	800c2bc <__udivmoddi4>
 800c2b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c2b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2b8:	b004      	add	sp, #16
 800c2ba:	4770      	bx	lr

0800c2bc <__udivmoddi4>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d14d      	bne.n	800c364 <__udivmoddi4+0xa8>
 800c2c8:	428a      	cmp	r2, r1
 800c2ca:	460f      	mov	r7, r1
 800c2cc:	4684      	mov	ip, r0
 800c2ce:	4696      	mov	lr, r2
 800c2d0:	fab2 f382 	clz	r3, r2
 800c2d4:	d960      	bls.n	800c398 <__udivmoddi4+0xdc>
 800c2d6:	b14b      	cbz	r3, 800c2ec <__udivmoddi4+0x30>
 800c2d8:	fa02 fe03 	lsl.w	lr, r2, r3
 800c2dc:	f1c3 0220 	rsb	r2, r3, #32
 800c2e0:	409f      	lsls	r7, r3
 800c2e2:	fa00 fc03 	lsl.w	ip, r0, r3
 800c2e6:	fa20 f202 	lsr.w	r2, r0, r2
 800c2ea:	4317      	orrs	r7, r2
 800c2ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800c2f0:	fa1f f48e 	uxth.w	r4, lr
 800c2f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800c2f8:	fbb7 f1f6 	udiv	r1, r7, r6
 800c2fc:	fb06 7711 	mls	r7, r6, r1, r7
 800c300:	fb01 f004 	mul.w	r0, r1, r4
 800c304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c308:	4290      	cmp	r0, r2
 800c30a:	d908      	bls.n	800c31e <__udivmoddi4+0x62>
 800c30c:	eb1e 0202 	adds.w	r2, lr, r2
 800c310:	f101 37ff 	add.w	r7, r1, #4294967295
 800c314:	d202      	bcs.n	800c31c <__udivmoddi4+0x60>
 800c316:	4290      	cmp	r0, r2
 800c318:	f200 812d 	bhi.w	800c576 <__udivmoddi4+0x2ba>
 800c31c:	4639      	mov	r1, r7
 800c31e:	1a12      	subs	r2, r2, r0
 800c320:	fa1f fc8c 	uxth.w	ip, ip
 800c324:	fbb2 f0f6 	udiv	r0, r2, r6
 800c328:	fb06 2210 	mls	r2, r6, r0, r2
 800c32c:	fb00 f404 	mul.w	r4, r0, r4
 800c330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800c334:	4564      	cmp	r4, ip
 800c336:	d908      	bls.n	800c34a <__udivmoddi4+0x8e>
 800c338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800c33c:	f100 32ff 	add.w	r2, r0, #4294967295
 800c340:	d202      	bcs.n	800c348 <__udivmoddi4+0x8c>
 800c342:	4564      	cmp	r4, ip
 800c344:	f200 811a 	bhi.w	800c57c <__udivmoddi4+0x2c0>
 800c348:	4610      	mov	r0, r2
 800c34a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800c34e:	ebac 0c04 	sub.w	ip, ip, r4
 800c352:	2100      	movs	r1, #0
 800c354:	b125      	cbz	r5, 800c360 <__udivmoddi4+0xa4>
 800c356:	fa2c f303 	lsr.w	r3, ip, r3
 800c35a:	2200      	movs	r2, #0
 800c35c:	e9c5 3200 	strd	r3, r2, [r5]
 800c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	428b      	cmp	r3, r1
 800c366:	d905      	bls.n	800c374 <__udivmoddi4+0xb8>
 800c368:	b10d      	cbz	r5, 800c36e <__udivmoddi4+0xb2>
 800c36a:	e9c5 0100 	strd	r0, r1, [r5]
 800c36e:	2100      	movs	r1, #0
 800c370:	4608      	mov	r0, r1
 800c372:	e7f5      	b.n	800c360 <__udivmoddi4+0xa4>
 800c374:	fab3 f183 	clz	r1, r3
 800c378:	2900      	cmp	r1, #0
 800c37a:	d14d      	bne.n	800c418 <__udivmoddi4+0x15c>
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	f0c0 80f2 	bcc.w	800c566 <__udivmoddi4+0x2aa>
 800c382:	4290      	cmp	r0, r2
 800c384:	f080 80ef 	bcs.w	800c566 <__udivmoddi4+0x2aa>
 800c388:	4606      	mov	r6, r0
 800c38a:	4623      	mov	r3, r4
 800c38c:	4608      	mov	r0, r1
 800c38e:	2d00      	cmp	r5, #0
 800c390:	d0e6      	beq.n	800c360 <__udivmoddi4+0xa4>
 800c392:	e9c5 6300 	strd	r6, r3, [r5]
 800c396:	e7e3      	b.n	800c360 <__udivmoddi4+0xa4>
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f040 80a2 	bne.w	800c4e2 <__udivmoddi4+0x226>
 800c39e:	1a8a      	subs	r2, r1, r2
 800c3a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800c3a4:	fa1f f68e 	uxth.w	r6, lr
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	fbb2 f4f7 	udiv	r4, r2, r7
 800c3ae:	fb07 2014 	mls	r0, r7, r4, r2
 800c3b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800c3b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c3ba:	fb06 f004 	mul.w	r0, r6, r4
 800c3be:	4290      	cmp	r0, r2
 800c3c0:	d90f      	bls.n	800c3e2 <__udivmoddi4+0x126>
 800c3c2:	eb1e 0202 	adds.w	r2, lr, r2
 800c3c6:	f104 38ff 	add.w	r8, r4, #4294967295
 800c3ca:	bf2c      	ite	cs
 800c3cc:	f04f 0901 	movcs.w	r9, #1
 800c3d0:	f04f 0900 	movcc.w	r9, #0
 800c3d4:	4290      	cmp	r0, r2
 800c3d6:	d903      	bls.n	800c3e0 <__udivmoddi4+0x124>
 800c3d8:	f1b9 0f00 	cmp.w	r9, #0
 800c3dc:	f000 80c8 	beq.w	800c570 <__udivmoddi4+0x2b4>
 800c3e0:	4644      	mov	r4, r8
 800c3e2:	1a12      	subs	r2, r2, r0
 800c3e4:	fa1f fc8c 	uxth.w	ip, ip
 800c3e8:	fbb2 f0f7 	udiv	r0, r2, r7
 800c3ec:	fb07 2210 	mls	r2, r7, r0, r2
 800c3f0:	fb00 f606 	mul.w	r6, r0, r6
 800c3f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800c3f8:	4566      	cmp	r6, ip
 800c3fa:	d908      	bls.n	800c40e <__udivmoddi4+0x152>
 800c3fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 800c400:	f100 32ff 	add.w	r2, r0, #4294967295
 800c404:	d202      	bcs.n	800c40c <__udivmoddi4+0x150>
 800c406:	4566      	cmp	r6, ip
 800c408:	f200 80bb 	bhi.w	800c582 <__udivmoddi4+0x2c6>
 800c40c:	4610      	mov	r0, r2
 800c40e:	ebac 0c06 	sub.w	ip, ip, r6
 800c412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800c416:	e79d      	b.n	800c354 <__udivmoddi4+0x98>
 800c418:	f1c1 0620 	rsb	r6, r1, #32
 800c41c:	408b      	lsls	r3, r1
 800c41e:	fa04 fe01 	lsl.w	lr, r4, r1
 800c422:	fa22 f706 	lsr.w	r7, r2, r6
 800c426:	fa20 fc06 	lsr.w	ip, r0, r6
 800c42a:	40f4      	lsrs	r4, r6
 800c42c:	408a      	lsls	r2, r1
 800c42e:	431f      	orrs	r7, r3
 800c430:	ea4e 030c 	orr.w	r3, lr, ip
 800c434:	fa00 fe01 	lsl.w	lr, r0, r1
 800c438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c43c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800c440:	fa1f fc87 	uxth.w	ip, r7
 800c444:	fbb4 f0f8 	udiv	r0, r4, r8
 800c448:	fb08 4410 	mls	r4, r8, r0, r4
 800c44c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c450:	fb00 f90c 	mul.w	r9, r0, ip
 800c454:	45a1      	cmp	r9, r4
 800c456:	d90e      	bls.n	800c476 <__udivmoddi4+0x1ba>
 800c458:	193c      	adds	r4, r7, r4
 800c45a:	f100 3aff 	add.w	sl, r0, #4294967295
 800c45e:	bf2c      	ite	cs
 800c460:	f04f 0b01 	movcs.w	fp, #1
 800c464:	f04f 0b00 	movcc.w	fp, #0
 800c468:	45a1      	cmp	r9, r4
 800c46a:	d903      	bls.n	800c474 <__udivmoddi4+0x1b8>
 800c46c:	f1bb 0f00 	cmp.w	fp, #0
 800c470:	f000 8093 	beq.w	800c59a <__udivmoddi4+0x2de>
 800c474:	4650      	mov	r0, sl
 800c476:	eba4 0409 	sub.w	r4, r4, r9
 800c47a:	fa1f f983 	uxth.w	r9, r3
 800c47e:	fbb4 f3f8 	udiv	r3, r4, r8
 800c482:	fb08 4413 	mls	r4, r8, r3, r4
 800c486:	fb03 fc0c 	mul.w	ip, r3, ip
 800c48a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c48e:	45a4      	cmp	ip, r4
 800c490:	d906      	bls.n	800c4a0 <__udivmoddi4+0x1e4>
 800c492:	193c      	adds	r4, r7, r4
 800c494:	f103 38ff 	add.w	r8, r3, #4294967295
 800c498:	d201      	bcs.n	800c49e <__udivmoddi4+0x1e2>
 800c49a:	45a4      	cmp	ip, r4
 800c49c:	d87a      	bhi.n	800c594 <__udivmoddi4+0x2d8>
 800c49e:	4643      	mov	r3, r8
 800c4a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800c4a4:	eba4 040c 	sub.w	r4, r4, ip
 800c4a8:	fba0 9802 	umull	r9, r8, r0, r2
 800c4ac:	4544      	cmp	r4, r8
 800c4ae:	46cc      	mov	ip, r9
 800c4b0:	4643      	mov	r3, r8
 800c4b2:	d302      	bcc.n	800c4ba <__udivmoddi4+0x1fe>
 800c4b4:	d106      	bne.n	800c4c4 <__udivmoddi4+0x208>
 800c4b6:	45ce      	cmp	lr, r9
 800c4b8:	d204      	bcs.n	800c4c4 <__udivmoddi4+0x208>
 800c4ba:	3801      	subs	r0, #1
 800c4bc:	ebb9 0c02 	subs.w	ip, r9, r2
 800c4c0:	eb68 0307 	sbc.w	r3, r8, r7
 800c4c4:	b15d      	cbz	r5, 800c4de <__udivmoddi4+0x222>
 800c4c6:	ebbe 020c 	subs.w	r2, lr, ip
 800c4ca:	eb64 0403 	sbc.w	r4, r4, r3
 800c4ce:	fa04 f606 	lsl.w	r6, r4, r6
 800c4d2:	fa22 f301 	lsr.w	r3, r2, r1
 800c4d6:	40cc      	lsrs	r4, r1
 800c4d8:	431e      	orrs	r6, r3
 800c4da:	e9c5 6400 	strd	r6, r4, [r5]
 800c4de:	2100      	movs	r1, #0
 800c4e0:	e73e      	b.n	800c360 <__udivmoddi4+0xa4>
 800c4e2:	fa02 fe03 	lsl.w	lr, r2, r3
 800c4e6:	f1c3 0120 	rsb	r1, r3, #32
 800c4ea:	fa04 f203 	lsl.w	r2, r4, r3
 800c4ee:	fa00 fc03 	lsl.w	ip, r0, r3
 800c4f2:	40cc      	lsrs	r4, r1
 800c4f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800c4f8:	fa20 f101 	lsr.w	r1, r0, r1
 800c4fc:	fa1f f68e 	uxth.w	r6, lr
 800c500:	fbb4 f0f7 	udiv	r0, r4, r7
 800c504:	430a      	orrs	r2, r1
 800c506:	fb07 4410 	mls	r4, r7, r0, r4
 800c50a:	0c11      	lsrs	r1, r2, #16
 800c50c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c510:	fb00 f406 	mul.w	r4, r0, r6
 800c514:	428c      	cmp	r4, r1
 800c516:	d90e      	bls.n	800c536 <__udivmoddi4+0x27a>
 800c518:	eb1e 0101 	adds.w	r1, lr, r1
 800c51c:	f100 38ff 	add.w	r8, r0, #4294967295
 800c520:	bf2c      	ite	cs
 800c522:	f04f 0901 	movcs.w	r9, #1
 800c526:	f04f 0900 	movcc.w	r9, #0
 800c52a:	428c      	cmp	r4, r1
 800c52c:	d902      	bls.n	800c534 <__udivmoddi4+0x278>
 800c52e:	f1b9 0f00 	cmp.w	r9, #0
 800c532:	d02c      	beq.n	800c58e <__udivmoddi4+0x2d2>
 800c534:	4640      	mov	r0, r8
 800c536:	1b09      	subs	r1, r1, r4
 800c538:	b292      	uxth	r2, r2
 800c53a:	fbb1 f4f7 	udiv	r4, r1, r7
 800c53e:	fb07 1114 	mls	r1, r7, r4, r1
 800c542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c546:	fb04 f106 	mul.w	r1, r4, r6
 800c54a:	4291      	cmp	r1, r2
 800c54c:	d907      	bls.n	800c55e <__udivmoddi4+0x2a2>
 800c54e:	eb1e 0202 	adds.w	r2, lr, r2
 800c552:	f104 38ff 	add.w	r8, r4, #4294967295
 800c556:	d201      	bcs.n	800c55c <__udivmoddi4+0x2a0>
 800c558:	4291      	cmp	r1, r2
 800c55a:	d815      	bhi.n	800c588 <__udivmoddi4+0x2cc>
 800c55c:	4644      	mov	r4, r8
 800c55e:	1a52      	subs	r2, r2, r1
 800c560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800c564:	e721      	b.n	800c3aa <__udivmoddi4+0xee>
 800c566:	1a86      	subs	r6, r0, r2
 800c568:	eb64 0303 	sbc.w	r3, r4, r3
 800c56c:	2001      	movs	r0, #1
 800c56e:	e70e      	b.n	800c38e <__udivmoddi4+0xd2>
 800c570:	3c02      	subs	r4, #2
 800c572:	4472      	add	r2, lr
 800c574:	e735      	b.n	800c3e2 <__udivmoddi4+0x126>
 800c576:	3902      	subs	r1, #2
 800c578:	4472      	add	r2, lr
 800c57a:	e6d0      	b.n	800c31e <__udivmoddi4+0x62>
 800c57c:	44f4      	add	ip, lr
 800c57e:	3802      	subs	r0, #2
 800c580:	e6e3      	b.n	800c34a <__udivmoddi4+0x8e>
 800c582:	44f4      	add	ip, lr
 800c584:	3802      	subs	r0, #2
 800c586:	e742      	b.n	800c40e <__udivmoddi4+0x152>
 800c588:	3c02      	subs	r4, #2
 800c58a:	4472      	add	r2, lr
 800c58c:	e7e7      	b.n	800c55e <__udivmoddi4+0x2a2>
 800c58e:	3802      	subs	r0, #2
 800c590:	4471      	add	r1, lr
 800c592:	e7d0      	b.n	800c536 <__udivmoddi4+0x27a>
 800c594:	3b02      	subs	r3, #2
 800c596:	443c      	add	r4, r7
 800c598:	e782      	b.n	800c4a0 <__udivmoddi4+0x1e4>
 800c59a:	3802      	subs	r0, #2
 800c59c:	443c      	add	r4, r7
 800c59e:	e76a      	b.n	800c476 <__udivmoddi4+0x1ba>

0800c5a0 <__aeabi_idiv0>:
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop

0800c5a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c5aa:	f000 fae5 	bl	800cb78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c5ae:	f000 f817 	bl	800c5e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c5b2:	f000 f8d1 	bl	800c758 <MX_GPIO_Init>
  MX_UART5_Init();
 800c5b6:	f000 f883 	bl	800c6c0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	char *c_char = "Application hbjhgjhgfgfgjhgjhis Running... \n\r";
 800c5ba:	4b07      	ldr	r3, [pc, #28]	@ (800c5d8 <main+0x34>)
 800c5bc:	607b      	str	r3, [r7, #4]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_UART_Transmit(&huart5,(uint8_t *)&c_char[0], strlen("Application hbjhgjhgfgfgjhgjhis Running... \n\r"), 1000);
 800c5be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c5c2:	222d      	movs	r2, #45	@ 0x2d
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	4805      	ldr	r0, [pc, #20]	@ (800c5dc <main+0x38>)
 800c5c8:	f006 ff74 	bl	80134b4 <HAL_UART_Transmit>
		HAL_Delay(100);
 800c5cc:	2064      	movs	r0, #100	@ 0x64
 800c5ce:	f000 fb91 	bl	800ccf4 <HAL_Delay>
		HAL_UART_Transmit(&huart5,(uint8_t *)&c_char[0], strlen("Application hbjhgjhgfgfgjhgjhis Running... \n\r"), 1000);
 800c5d2:	bf00      	nop
 800c5d4:	e7f3      	b.n	800c5be <main+0x1a>
 800c5d6:	bf00      	nop
 800c5d8:	0801475c 	.word	0x0801475c
 800c5dc:	20000028 	.word	0x20000028

0800c5e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b09c      	sub	sp, #112	@ 0x70
 800c5e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c5e6:	f107 0320 	add.w	r3, r7, #32
 800c5ea:	2250      	movs	r2, #80	@ 0x50
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f008 f87c 	bl	80146ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c5f4:	f107 0308 	add.w	r3, r7, #8
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	605a      	str	r2, [r3, #4]
 800c5fe:	609a      	str	r2, [r3, #8]
 800c600:	60da      	str	r2, [r3, #12]
 800c602:	611a      	str	r2, [r3, #16]
 800c604:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800c606:	4b2c      	ldr	r3, [pc, #176]	@ (800c6b8 <SystemClock_Config+0xd8>)
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	4a2b      	ldr	r2, [pc, #172]	@ (800c6b8 <SystemClock_Config+0xd8>)
 800c60c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800c610:	6113      	str	r3, [r2, #16]
 800c612:	4b29      	ldr	r3, [pc, #164]	@ (800c6b8 <SystemClock_Config+0xd8>)
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c61a:	607b      	str	r3, [r7, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c61e:	bf00      	nop
 800c620:	4b25      	ldr	r3, [pc, #148]	@ (800c6b8 <SystemClock_Config+0xd8>)
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	f003 0308 	and.w	r3, r3, #8
 800c628:	2b08      	cmp	r3, #8
 800c62a:	d1f9      	bne.n	800c620 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c636:	2302      	movs	r3, #2
 800c638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800c63a:	2303      	movs	r3, #3
 800c63c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c63e:	2304      	movs	r3, #4
 800c640:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 800c642:	2350      	movs	r3, #80	@ 0x50
 800c644:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c646:	2302      	movs	r3, #2
 800c648:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c64a:	2302      	movs	r3, #2
 800c64c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c64e:	2302      	movs	r3, #2
 800c650:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800c652:	2308      	movs	r3, #8
 800c654:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800c656:	2300      	movs	r3, #0
 800c658:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c65e:	f107 0320 	add.w	r3, r7, #32
 800c662:	4618      	mov	r0, r3
 800c664:	f000 ff0a 	bl	800d47c <HAL_RCC_OscConfig>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800c66e:	f000 f901 	bl	800c874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c672:	231f      	movs	r3, #31
 800c674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c676:	2303      	movs	r3, #3
 800c678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c67a:	2300      	movs	r3, #0
 800c67c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c67e:	2300      	movs	r3, #0
 800c680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c682:	2300      	movs	r3, #0
 800c684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800c686:	2300      	movs	r3, #0
 800c688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c68a:	f107 0308 	add.w	r3, r7, #8
 800c68e:	2105      	movs	r1, #5
 800c690:	4618      	mov	r0, r3
 800c692:	f001 fb2b 	bl	800dcec <HAL_RCC_ClockConfig>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800c69c:	f000 f8ea 	bl	800c874 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800c6a0:	4b06      	ldr	r3, [pc, #24]	@ (800c6bc <SystemClock_Config+0xdc>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800c6a8:	4a04      	ldr	r2, [pc, #16]	@ (800c6bc <SystemClock_Config+0xdc>)
 800c6aa:	f043 0320 	orr.w	r3, r3, #32
 800c6ae:	6013      	str	r3, [r2, #0]
}
 800c6b0:	bf00      	nop
 800c6b2:	3770      	adds	r7, #112	@ 0x70
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	44020800 	.word	0x44020800
 800c6bc:	40022000 	.word	0x40022000

0800c6c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800c6c4:	4b22      	ldr	r3, [pc, #136]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6c6:	4a23      	ldr	r2, [pc, #140]	@ (800c754 <MX_UART5_Init+0x94>)
 800c6c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800c6ca:	4b21      	ldr	r3, [pc, #132]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c6d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c6d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c6d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c6de:	4b1c      	ldr	r3, [pc, #112]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c6e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6e6:	220c      	movs	r2, #12
 800c6e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c6ea:	4b19      	ldr	r3, [pc, #100]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c6f0:	4b17      	ldr	r3, [pc, #92]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c6f6:	4b16      	ldr	r3, [pc, #88]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c6fc:	4b14      	ldr	r3, [pc, #80]	@ (800c750 <MX_UART5_Init+0x90>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c702:	4b13      	ldr	r3, [pc, #76]	@ (800c750 <MX_UART5_Init+0x90>)
 800c704:	2200      	movs	r2, #0
 800c706:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c708:	4811      	ldr	r0, [pc, #68]	@ (800c750 <MX_UART5_Init+0x90>)
 800c70a:	f006 fe83 	bl	8013414 <HAL_UART_Init>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800c714:	f000 f8ae 	bl	800c874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c718:	2100      	movs	r1, #0
 800c71a:	480d      	ldr	r0, [pc, #52]	@ (800c750 <MX_UART5_Init+0x90>)
 800c71c:	f007 ff1b 	bl	8014556 <HAL_UARTEx_SetTxFifoThreshold>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800c726:	f000 f8a5 	bl	800c874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c72a:	2100      	movs	r1, #0
 800c72c:	4808      	ldr	r0, [pc, #32]	@ (800c750 <MX_UART5_Init+0x90>)
 800c72e:	f007 ff50 	bl	80145d2 <HAL_UARTEx_SetRxFifoThreshold>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800c738:	f000 f89c 	bl	800c874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800c73c:	4804      	ldr	r0, [pc, #16]	@ (800c750 <MX_UART5_Init+0x90>)
 800c73e:	f007 fed1 	bl	80144e4 <HAL_UARTEx_DisableFifoMode>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800c748:	f000 f894 	bl	800c874 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800c74c:	bf00      	nop
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20000028 	.word	0x20000028
 800c754:	40005000 	.word	0x40005000

0800c758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	@ 0x28
 800c75c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c75e:	f107 0314 	add.w	r3, r7, #20
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	605a      	str	r2, [r3, #4]
 800c768:	609a      	str	r2, [r3, #8]
 800c76a:	60da      	str	r2, [r3, #12]
 800c76c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c76e:	4b3e      	ldr	r3, [pc, #248]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c774:	4a3c      	ldr	r2, [pc, #240]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c776:	f043 0310 	orr.w	r3, r3, #16
 800c77a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c77e:	4b3a      	ldr	r3, [pc, #232]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	613b      	str	r3, [r7, #16]
 800c78a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c78c:	4b36      	ldr	r3, [pc, #216]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c78e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c792:	4a35      	ldr	r2, [pc, #212]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c794:	f043 0304 	orr.w	r3, r3, #4
 800c798:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c79c:	4b32      	ldr	r3, [pc, #200]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7a2:	f003 0304 	and.w	r3, r3, #4
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c7aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c7ba:	4b2b      	ldr	r3, [pc, #172]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c4:	60bb      	str	r3, [r7, #8]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c7c8:	4b27      	ldr	r3, [pc, #156]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7ce:	4a26      	ldr	r2, [pc, #152]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7d0:	f043 0308 	orr.w	r3, r3, #8
 800c7d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c7d8:	4b23      	ldr	r3, [pc, #140]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7de:	f003 0308 	and.w	r3, r3, #8
 800c7e2:	607b      	str	r3, [r7, #4]
 800c7e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7e6:	4b20      	ldr	r3, [pc, #128]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7ec:	4a1e      	ldr	r2, [pc, #120]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7ee:	f043 0302 	orr.w	r3, r3, #2
 800c7f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c7f6:	4b1c      	ldr	r3, [pc, #112]	@ (800c868 <MX_GPIO_Init+0x110>)
 800c7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7fc:	f003 0302 	and.w	r3, r3, #2
 800c800:	603b      	str	r3, [r7, #0]
 800c802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800c804:	2200      	movs	r2, #0
 800c806:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c80a:	4818      	ldr	r0, [pc, #96]	@ (800c86c <MX_GPIO_Init+0x114>)
 800c80c:	f000 fe1e 	bl	800d44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_3_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin;
 800c810:	2310      	movs	r3, #16
 800c812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c814:	2300      	movs	r3, #0
 800c816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c818:	2300      	movs	r3, #0
 800c81a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 800c81c:	f107 0314 	add.w	r3, r7, #20
 800c820:	4619      	mov	r1, r3
 800c822:	4812      	ldr	r0, [pc, #72]	@ (800c86c <MX_GPIO_Init+0x114>)
 800c824:	f000 fcc0 	bl	800d1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800c828:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c82c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c82e:	2301      	movs	r3, #1
 800c830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c832:	2300      	movs	r3, #0
 800c834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c836:	2300      	movs	r3, #0
 800c838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800c83a:	f107 0314 	add.w	r3, r7, #20
 800c83e:	4619      	mov	r1, r3
 800c840:	480a      	ldr	r0, [pc, #40]	@ (800c86c <MX_GPIO_Init+0x114>)
 800c842:	f000 fcb1 	bl	800d1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_2_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin;
 800c846:	2308      	movs	r3, #8
 800c848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 800c852:	f107 0314 	add.w	r3, r7, #20
 800c856:	4619      	mov	r1, r3
 800c858:	4805      	ldr	r0, [pc, #20]	@ (800c870 <MX_GPIO_Init+0x118>)
 800c85a:	f000 fca5 	bl	800d1a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c85e:	bf00      	nop
 800c860:	3728      	adds	r7, #40	@ 0x28
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	44020c00 	.word	0x44020c00
 800c86c:	42021000 	.word	0x42021000
 800c870:	42020c00 	.word	0x42020c00

0800c874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c874:	b480      	push	{r7}
 800c876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c878:	b672      	cpsid	i
}
 800c87a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800c87c:	bf00      	nop
 800c87e:	e7fd      	b.n	800c87c <Error_Handler+0x8>

0800c880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c880:	b480      	push	{r7}
 800c882:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c884:	bf00      	nop
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
	...

0800c890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b0cc      	sub	sp, #304	@ 0x130
 800c894:	af00      	add	r7, sp, #0
 800c896:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c89a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c89e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8a0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	605a      	str	r2, [r3, #4]
 800c8aa:	609a      	str	r2, [r3, #8]
 800c8ac:	60da      	str	r2, [r3, #12]
 800c8ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c8b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800c8be:	461a      	mov	r2, r3
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	f007 ff13 	bl	80146ec <memset>
  if(huart->Instance==UART5)
 800c8c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a36      	ldr	r2, [pc, #216]	@ (800c9ac <HAL_UART_MspInit+0x11c>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d164      	bne.n	800c9a2 <HAL_UART_MspInit+0x112>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800c8d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8dc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800c8e0:	f04f 0210 	mov.w	r2, #16
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800c8ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c8f8:	f107 0310 	add.w	r3, r7, #16
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f001 fd37 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800c908:	f7ff ffb4 	bl	800c874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800c90c:	4b28      	ldr	r3, [pc, #160]	@ (800c9b0 <HAL_UART_MspInit+0x120>)
 800c90e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c912:	4a27      	ldr	r2, [pc, #156]	@ (800c9b0 <HAL_UART_MspInit+0x120>)
 800c914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c918:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800c91c:	4b24      	ldr	r3, [pc, #144]	@ (800c9b0 <HAL_UART_MspInit+0x120>)
 800c91e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c922:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800c926:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c92a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c934:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c938:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c93a:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b0 <HAL_UART_MspInit+0x120>)
 800c93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c940:	4a1b      	ldr	r2, [pc, #108]	@ (800c9b0 <HAL_UART_MspInit+0x120>)
 800c942:	f043 0302 	orr.w	r3, r3, #2
 800c946:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c94a:	4b19      	ldr	r3, [pc, #100]	@ (800c9b0 <HAL_UART_MspInit+0x120>)
 800c94c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c950:	f003 0202 	and.w	r2, r3, #2
 800c954:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c958:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c95c:	601a      	str	r2, [r3, #0]
 800c95e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c962:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c966:	681b      	ldr	r3, [r3, #0]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800c968:	2360      	movs	r3, #96	@ 0x60
 800c96a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c96e:	2302      	movs	r3, #2
 800c970:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c974:	2300      	movs	r3, #0
 800c976:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c97a:	2300      	movs	r3, #0
 800c97c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800c980:	230e      	movs	r3, #14
 800c982:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c986:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800c98a:	4619      	mov	r1, r3
 800c98c:	4809      	ldr	r0, [pc, #36]	@ (800c9b4 <HAL_UART_MspInit+0x124>)
 800c98e:	f000 fc0b 	bl	800d1a8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	203e      	movs	r0, #62	@ 0x3e
 800c998:	f000 fa88 	bl	800ceac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800c99c:	203e      	movs	r0, #62	@ 0x3e
 800c99e:	f000 fa9f 	bl	800cee0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800c9a2:	bf00      	nop
 800c9a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	40005000 	.word	0x40005000
 800c9b0:	44020c00 	.word	0x44020c00
 800c9b4:	42020400 	.word	0x42020400

0800c9b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	af00      	add	r7, sp, #0

	    // Send the message over UART (you can change huart1 to your actual UART handle)
	    HAL_UART_Transmit(&huart5, (uint8_t *)msg, len, HAL_MAX_DELAY);*/
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c9bc:	bf00      	nop
 800c9be:	e7fd      	b.n	800c9bc <NMI_Handler+0x4>

0800c9c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c9c4:	bf00      	nop
 800c9c6:	e7fd      	b.n	800c9c4 <HardFault_Handler+0x4>

0800c9c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c9cc:	bf00      	nop
 800c9ce:	e7fd      	b.n	800c9cc <MemManage_Handler+0x4>

0800c9d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c9d4:	bf00      	nop
 800c9d6:	e7fd      	b.n	800c9d4 <BusFault_Handler+0x4>

0800c9d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c9dc:	bf00      	nop
 800c9de:	e7fd      	b.n	800c9dc <UsageFault_Handler+0x4>

0800c9e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c9e4:	bf00      	nop
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c9f2:	bf00      	nop
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ca00:	bf00      	nop
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ca0e:	f000 f951 	bl	800ccb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ca12:	bf00      	nop
 800ca14:	bd80      	pop	{r7, pc}
	...

0800ca18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800ca1c:	4802      	ldr	r0, [pc, #8]	@ (800ca28 <UART5_IRQHandler+0x10>)
 800ca1e:	f006 fde7 	bl	80135f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20000028 	.word	0x20000028

0800ca2c <SystemInit>:
 * @param  None
 * @retval None
 */


void SystemInit(void) {
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
	uint32_t reg_opsr;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 800ca32:	4b34      	ldr	r3, [pc, #208]	@ (800cb04 <SystemInit+0xd8>)
 800ca34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca38:	4a32      	ldr	r2, [pc, #200]	@ (800cb04 <SystemInit+0xd8>)
 800ca3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ca3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR = RCC_CR_HSION;
 800ca42:	4b31      	ldr	r3, [pc, #196]	@ (800cb08 <SystemInit+0xdc>)
 800ca44:	2201      	movs	r2, #1
 800ca46:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 800ca48:	4b2f      	ldr	r3, [pc, #188]	@ (800cb08 <SystemInit+0xdc>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 800ca4e:	4b2e      	ldr	r3, [pc, #184]	@ (800cb08 <SystemInit+0xdc>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	621a      	str	r2, [r3, #32]

	/* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT
 800ca54:	4b2c      	ldr	r3, [pc, #176]	@ (800cb08 <SystemInit+0xdc>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	492b      	ldr	r1, [pc, #172]	@ (800cb08 <SystemInit+0xdc>)
 800ca5a:	4b2c      	ldr	r3, [pc, #176]	@ (800cb0c <SystemInit+0xe0>)
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	600b      	str	r3, [r1, #0]
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON |
			RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

	/* Reset PLLxCFGR register */
	RCC->PLL1CFGR = 0U;
 800ca60:	4b29      	ldr	r3, [pc, #164]	@ (800cb08 <SystemInit+0xdc>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL2CFGR = 0U;
 800ca66:	4b28      	ldr	r3, [pc, #160]	@ (800cb08 <SystemInit+0xdc>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
	RCC->PLL3CFGR = 0U;
 800ca6c:	4b26      	ldr	r3, [pc, #152]	@ (800cb08 <SystemInit+0xdc>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280U;
 800ca72:	4b25      	ldr	r3, [pc, #148]	@ (800cb08 <SystemInit+0xdc>)
 800ca74:	4a26      	ldr	r2, [pc, #152]	@ (800cb10 <SystemInit+0xe4>)
 800ca76:	635a      	str	r2, [r3, #52]	@ 0x34
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000U;
 800ca78:	4b23      	ldr	r3, [pc, #140]	@ (800cb08 <SystemInit+0xdc>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	639a      	str	r2, [r3, #56]	@ 0x38
	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280U;
 800ca7e:	4b22      	ldr	r3, [pc, #136]	@ (800cb08 <SystemInit+0xdc>)
 800ca80:	4a23      	ldr	r2, [pc, #140]	@ (800cb10 <SystemInit+0xe4>)
 800ca82:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL2FRACR register */
	RCC->PLL2FRACR = 0x00000000U;
 800ca84:	4b20      	ldr	r3, [pc, #128]	@ (800cb08 <SystemInit+0xdc>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280U;
 800ca8a:	4b1f      	ldr	r3, [pc, #124]	@ (800cb08 <SystemInit+0xdc>)
 800ca8c:	4a20      	ldr	r2, [pc, #128]	@ (800cb10 <SystemInit+0xe4>)
 800ca8e:	645a      	str	r2, [r3, #68]	@ 0x44
	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000U;
 800ca90:	4b1d      	ldr	r3, [pc, #116]	@ (800cb08 <SystemInit+0xdc>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 800ca96:	4b1c      	ldr	r3, [pc, #112]	@ (800cb08 <SystemInit+0xdc>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cb08 <SystemInit+0xdc>)
 800ca9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800caa0:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 800caa2:	4b19      	ldr	r3, [pc, #100]	@ (800cb08 <SystemInit+0xdc>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	651a      	str	r2, [r3, #80]	@ 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800caa8:	4b16      	ldr	r3, [pc, #88]	@ (800cb04 <SystemInit+0xd8>)
 800caaa:	4a1a      	ldr	r2, [pc, #104]	@ (800cb14 <SystemInit+0xe8>)
 800caac:	609a      	str	r2, [r3, #8]
//#define FLASH_APP_START_ADDRESS 0x0800C000
//    SCB->VTOR = FLASH_APP_START_ADDRESS; /* Set Vector Table Offset for the application */


	/* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
	reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800caae:	4b1a      	ldr	r3, [pc, #104]	@ (800cb18 <SystemInit+0xec>)
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800cab6:	607b      	str	r3, [r7, #4]
	if ((reg_opsr == FLASH_OPSR_CODE_OP)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800cabe:	d003      	beq.n	800cac8 <SystemInit+0x9c>
			|| (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1))) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800cac6:	d117      	bne.n	800caf8 <SystemInit+0xcc>
		/* Check FLASH Option Control Register access */
		if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U) {
 800cac8:	4b13      	ldr	r3, [pc, #76]	@ (800cb18 <SystemInit+0xec>)
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d005      	beq.n	800cae0 <SystemInit+0xb4>
			/* Authorizes the Option Byte registers programming */
			FLASH->OPTKEYR = 0x08192A3BU;
 800cad4:	4b10      	ldr	r3, [pc, #64]	@ (800cb18 <SystemInit+0xec>)
 800cad6:	4a11      	ldr	r2, [pc, #68]	@ (800cb1c <SystemInit+0xf0>)
 800cad8:	60da      	str	r2, [r3, #12]
			FLASH->OPTKEYR = 0x4C5D6E7FU;
 800cada:	4b0f      	ldr	r3, [pc, #60]	@ (800cb18 <SystemInit+0xec>)
 800cadc:	4a10      	ldr	r2, [pc, #64]	@ (800cb20 <SystemInit+0xf4>)
 800cade:	60da      	str	r2, [r3, #12]
		}
		/* Launch the option bytes change operation */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800cae0:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <SystemInit+0xec>)
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	4a0c      	ldr	r2, [pc, #48]	@ (800cb18 <SystemInit+0xec>)
 800cae6:	f043 0302 	orr.w	r3, r3, #2
 800caea:	61d3      	str	r3, [r2, #28]

		/* Lock the FLASH Option Control Register access */
		FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800caec:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <SystemInit+0xec>)
 800caee:	69db      	ldr	r3, [r3, #28]
 800caf0:	4a09      	ldr	r2, [pc, #36]	@ (800cb18 <SystemInit+0xec>)
 800caf2:	f043 0301 	orr.w	r3, r3, #1
 800caf6:	61d3      	str	r3, [r2, #28]
	}
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	e000ed00 	.word	0xe000ed00
 800cb08:	44020c00 	.word	0x44020c00
 800cb0c:	eae2eae3 	.word	0xeae2eae3
 800cb10:	01010280 	.word	0x01010280
 800cb14:	0800c000 	.word	0x0800c000
 800cb18:	40022000 	.word	0x40022000
 800cb1c:	08192a3b 	.word	0x08192a3b
 800cb20:	4c5d6e7f 	.word	0x4c5d6e7f

0800cb24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800cb24:	480d      	ldr	r0, [pc, #52]	@ (800cb5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800cb26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800cb28:	f7ff ff80 	bl	800ca2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800cb2c:	480c      	ldr	r0, [pc, #48]	@ (800cb60 <LoopForever+0x6>)
  ldr r1, =_edata
 800cb2e:	490d      	ldr	r1, [pc, #52]	@ (800cb64 <LoopForever+0xa>)
  ldr r2, =_sidata
 800cb30:	4a0d      	ldr	r2, [pc, #52]	@ (800cb68 <LoopForever+0xe>)
  movs r3, #0
 800cb32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cb34:	e002      	b.n	800cb3c <LoopCopyDataInit>

0800cb36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cb36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cb38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cb3a:	3304      	adds	r3, #4

0800cb3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cb3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cb3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cb40:	d3f9      	bcc.n	800cb36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cb42:	4a0a      	ldr	r2, [pc, #40]	@ (800cb6c <LoopForever+0x12>)
  ldr r4, =_ebss
 800cb44:	4c0a      	ldr	r4, [pc, #40]	@ (800cb70 <LoopForever+0x16>)
  movs r3, #0
 800cb46:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cb48:	e001      	b.n	800cb4e <LoopFillZerobss>

0800cb4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cb4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cb4c:	3204      	adds	r2, #4

0800cb4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cb4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cb50:	d3fb      	bcc.n	800cb4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800cb52:	f007 fdd3 	bl	80146fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800cb56:	f7ff fd25 	bl	800c5a4 <main>

0800cb5a <LoopForever>:


LoopForever:
    b LoopForever
 800cb5a:	e7fe      	b.n	800cb5a <LoopForever>
  ldr   r0, =_estack
 800cb5c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800cb60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cb64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800cb68:	080147dc 	.word	0x080147dc
  ldr r2, =_sbss
 800cb6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800cb70:	200000c0 	.word	0x200000c0

0800cb74 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800cb74:	e7fe      	b.n	800cb74 <ADC1_IRQHandler>
	...

0800cb78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb7c:	2003      	movs	r0, #3
 800cb7e:	f000 f98a 	bl	800ce96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cb82:	f001 fa6b 	bl	800e05c <HAL_RCC_GetSysClockFreq>
 800cb86:	4602      	mov	r2, r0
 800cb88:	4b0c      	ldr	r3, [pc, #48]	@ (800cbbc <HAL_Init+0x44>)
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	490b      	ldr	r1, [pc, #44]	@ (800cbc0 <HAL_Init+0x48>)
 800cb92:	5ccb      	ldrb	r3, [r1, r3]
 800cb94:	fa22 f303 	lsr.w	r3, r2, r3
 800cb98:	4a0a      	ldr	r2, [pc, #40]	@ (800cbc4 <HAL_Init+0x4c>)
 800cb9a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800cb9c:	2004      	movs	r0, #4
 800cb9e:	f000 f9cf 	bl	800cf40 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cba2:	200f      	movs	r0, #15
 800cba4:	f000 f810 	bl	800cbc8 <HAL_InitTick>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e002      	b.n	800cbb8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800cbb2:	f7ff fe65 	bl	800c880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	44020c00 	.word	0x44020c00
 800cbc0:	0801478c 	.word	0x0801478c
 800cbc4:	20000000 	.word	0x20000000

0800cbc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800cbd4:	4b33      	ldr	r3, [pc, #204]	@ (800cca4 <HAL_InitTick+0xdc>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e05c      	b.n	800cc9a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800cbe0:	4b31      	ldr	r3, [pc, #196]	@ (800cca8 <HAL_InitTick+0xe0>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 0304 	and.w	r3, r3, #4
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	d10c      	bne.n	800cc06 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800cbec:	4b2f      	ldr	r3, [pc, #188]	@ (800ccac <HAL_InitTick+0xe4>)
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	4b2c      	ldr	r3, [pc, #176]	@ (800cca4 <HAL_InitTick+0xdc>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cbfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e037      	b.n	800cc76 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800cc06:	f000 f9f3 	bl	800cff0 <HAL_SYSTICK_GetCLKSourceConfig>
 800cc0a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d023      	beq.n	800cc5a <HAL_InitTick+0x92>
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d82d      	bhi.n	800cc74 <HAL_InitTick+0xac>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <HAL_InitTick+0x5e>
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d00d      	beq.n	800cc40 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800cc24:	e026      	b.n	800cc74 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800cc26:	4b21      	ldr	r3, [pc, #132]	@ (800ccac <HAL_InitTick+0xe4>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	4b1e      	ldr	r3, [pc, #120]	@ (800cca4 <HAL_InitTick+0xdc>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800cc34:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc3c:	60fb      	str	r3, [r7, #12]
        break;
 800cc3e:	e01a      	b.n	800cc76 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800cc40:	4b18      	ldr	r3, [pc, #96]	@ (800cca4 <HAL_InitTick+0xdc>)
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	461a      	mov	r2, r3
 800cc46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cc4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc4e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800cc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc56:	60fb      	str	r3, [r7, #12]
        break;
 800cc58:	e00d      	b.n	800cc76 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800cc5a:	4b12      	ldr	r3, [pc, #72]	@ (800cca4 <HAL_InitTick+0xdc>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cc64:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800cc6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc70:	60fb      	str	r3, [r7, #12]
        break;
 800cc72:	e000      	b.n	800cc76 <HAL_InitTick+0xae>
        break;
 800cc74:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f000 f940 	bl	800cefc <HAL_SYSTICK_Config>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e009      	b.n	800cc9a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cc86:	2200      	movs	r2, #0
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8e:	f000 f90d 	bl	800ceac <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800cc92:	4a07      	ldr	r2, [pc, #28]	@ (800ccb0 <HAL_InitTick+0xe8>)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20000008 	.word	0x20000008
 800cca8:	e000e010 	.word	0xe000e010
 800ccac:	20000000 	.word	0x20000000
 800ccb0:	20000004 	.word	0x20000004

0800ccb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ccb8:	4b06      	ldr	r3, [pc, #24]	@ (800ccd4 <HAL_IncTick+0x20>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4b06      	ldr	r3, [pc, #24]	@ (800ccd8 <HAL_IncTick+0x24>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	4a04      	ldr	r2, [pc, #16]	@ (800ccd8 <HAL_IncTick+0x24>)
 800ccc6:	6013      	str	r3, [r2, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20000008 	.word	0x20000008
 800ccd8:	200000bc 	.word	0x200000bc

0800ccdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
  return uwTick;
 800cce0:	4b03      	ldr	r3, [pc, #12]	@ (800ccf0 <HAL_GetTick+0x14>)
 800cce2:	681b      	ldr	r3, [r3, #0]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	200000bc 	.word	0x200000bc

0800ccf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ccfc:	f7ff ffee 	bl	800ccdc <HAL_GetTick>
 800cd00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0c:	d005      	beq.n	800cd1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cd0e:	4b0a      	ldr	r3, [pc, #40]	@ (800cd38 <HAL_Delay+0x44>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	461a      	mov	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4413      	add	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cd1a:	bf00      	nop
 800cd1c:	f7ff ffde 	bl	800ccdc <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d8f7      	bhi.n	800cd1c <HAL_Delay+0x28>
  {
  }
}
 800cd2c:	bf00      	nop
 800cd2e:	bf00      	nop
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20000008 	.word	0x20000008

0800cd3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f003 0307 	and.w	r3, r3, #7
 800cd4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd80 <__NVIC_SetPriorityGrouping+0x44>)
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cd58:	4013      	ands	r3, r2
 800cd5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cd64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cd68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cd6e:	4a04      	ldr	r2, [pc, #16]	@ (800cd80 <__NVIC_SetPriorityGrouping+0x44>)
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	60d3      	str	r3, [r2, #12]
}
 800cd74:	bf00      	nop
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	e000ed00 	.word	0xe000ed00

0800cd84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cd84:	b480      	push	{r7}
 800cd86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cd88:	4b04      	ldr	r3, [pc, #16]	@ (800cd9c <__NVIC_GetPriorityGrouping+0x18>)
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	0a1b      	lsrs	r3, r3, #8
 800cd8e:	f003 0307 	and.w	r3, r3, #7
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	e000ed00 	.word	0xe000ed00

0800cda0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cdaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	db0b      	blt.n	800cdca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	f003 021f 	and.w	r2, r3, #31
 800cdb8:	4907      	ldr	r1, [pc, #28]	@ (800cdd8 <__NVIC_EnableIRQ+0x38>)
 800cdba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdbe:	095b      	lsrs	r3, r3, #5
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	fa00 f202 	lsl.w	r2, r0, r2
 800cdc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	e000e100 	.word	0xe000e100

0800cddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	6039      	str	r1, [r7, #0]
 800cde6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cde8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	db0a      	blt.n	800ce06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	490c      	ldr	r1, [pc, #48]	@ (800ce28 <__NVIC_SetPriority+0x4c>)
 800cdf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfa:	0112      	lsls	r2, r2, #4
 800cdfc:	b2d2      	uxtb	r2, r2
 800cdfe:	440b      	add	r3, r1
 800ce00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ce04:	e00a      	b.n	800ce1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	4908      	ldr	r1, [pc, #32]	@ (800ce2c <__NVIC_SetPriority+0x50>)
 800ce0c:	88fb      	ldrh	r3, [r7, #6]
 800ce0e:	f003 030f 	and.w	r3, r3, #15
 800ce12:	3b04      	subs	r3, #4
 800ce14:	0112      	lsls	r2, r2, #4
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	440b      	add	r3, r1
 800ce1a:	761a      	strb	r2, [r3, #24]
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	e000e100 	.word	0xe000e100
 800ce2c:	e000ed00 	.word	0xe000ed00

0800ce30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b089      	sub	sp, #36	@ 0x24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	f1c3 0307 	rsb	r3, r3, #7
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	bf28      	it	cs
 800ce4e:	2304      	movcs	r3, #4
 800ce50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	3304      	adds	r3, #4
 800ce56:	2b06      	cmp	r3, #6
 800ce58:	d902      	bls.n	800ce60 <NVIC_EncodePriority+0x30>
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	3b03      	subs	r3, #3
 800ce5e:	e000      	b.n	800ce62 <NVIC_EncodePriority+0x32>
 800ce60:	2300      	movs	r3, #0
 800ce62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce64:	f04f 32ff 	mov.w	r2, #4294967295
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6e:	43da      	mvns	r2, r3
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	401a      	ands	r2, r3
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ce78:	f04f 31ff 	mov.w	r1, #4294967295
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce82:	43d9      	mvns	r1, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce88:	4313      	orrs	r3, r2
         );
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3724      	adds	r7, #36	@ 0x24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff ff4c 	bl	800cd3c <__NVIC_SetPriorityGrouping>
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ceba:	f7ff ff63 	bl	800cd84 <__NVIC_GetPriorityGrouping>
 800cebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	68b9      	ldr	r1, [r7, #8]
 800cec4:	6978      	ldr	r0, [r7, #20]
 800cec6:	f7ff ffb3 	bl	800ce30 <NVIC_EncodePriority>
 800ceca:	4602      	mov	r2, r0
 800cecc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ced0:	4611      	mov	r1, r2
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff ff82 	bl	800cddc <__NVIC_SetPriority>
}
 800ced8:	bf00      	nop
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ceea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff ff56 	bl	800cda0 <__NVIC_EnableIRQ>
}
 800cef4:	bf00      	nop
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3b01      	subs	r3, #1
 800cf08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf0c:	d301      	bcc.n	800cf12 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e00d      	b.n	800cf2e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800cf12:	4a0a      	ldr	r2, [pc, #40]	@ (800cf3c <HAL_SYSTICK_Config+0x40>)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800cf1a:	4b08      	ldr	r3, [pc, #32]	@ (800cf3c <HAL_SYSTICK_Config+0x40>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800cf20:	4b06      	ldr	r3, [pc, #24]	@ (800cf3c <HAL_SYSTICK_Config+0x40>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a05      	ldr	r2, [pc, #20]	@ (800cf3c <HAL_SYSTICK_Config+0x40>)
 800cf26:	f043 0303 	orr.w	r3, r3, #3
 800cf2a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	e000e010 	.word	0xe000e010

0800cf40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	d844      	bhi.n	800cfd8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800cf4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf54 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cf77 	.word	0x0800cf77
 800cf58:	0800cf95 	.word	0x0800cf95
 800cf5c:	0800cfb7 	.word	0x0800cfb7
 800cf60:	0800cfd9 	.word	0x0800cfd9
 800cf64:	0800cf69 	.word	0x0800cf69
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800cf68:	4b1f      	ldr	r3, [pc, #124]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a1e      	ldr	r2, [pc, #120]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cf6e:	f043 0304 	orr.w	r3, r3, #4
 800cf72:	6013      	str	r3, [r2, #0]
      break;
 800cf74:	e031      	b.n	800cfda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800cf76:	4b1c      	ldr	r3, [pc, #112]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a1b      	ldr	r2, [pc, #108]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cf7c:	f023 0304 	bic.w	r3, r3, #4
 800cf80:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800cf82:	4b1a      	ldr	r3, [pc, #104]	@ (800cfec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cf84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf88:	4a18      	ldr	r2, [pc, #96]	@ (800cfec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cf8a:	f023 030c 	bic.w	r3, r3, #12
 800cf8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800cf92:	e022      	b.n	800cfda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800cf94:	4b14      	ldr	r3, [pc, #80]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a13      	ldr	r2, [pc, #76]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cf9a:	f023 0304 	bic.w	r3, r3, #4
 800cf9e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800cfa0:	4b12      	ldr	r3, [pc, #72]	@ (800cfec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cfa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cfa6:	f023 030c 	bic.w	r3, r3, #12
 800cfaa:	4a10      	ldr	r2, [pc, #64]	@ (800cfec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cfac:	f043 0304 	orr.w	r3, r3, #4
 800cfb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800cfb4:	e011      	b.n	800cfda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800cfb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a0b      	ldr	r2, [pc, #44]	@ (800cfe8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800cfbc:	f023 0304 	bic.w	r3, r3, #4
 800cfc0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800cfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800cfec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cfc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cfc8:	f023 030c 	bic.w	r3, r3, #12
 800cfcc:	4a07      	ldr	r2, [pc, #28]	@ (800cfec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800cfce:	f043 0308 	orr.w	r3, r3, #8
 800cfd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800cfd6:	e000      	b.n	800cfda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800cfd8:	bf00      	nop
  }
}
 800cfda:	bf00      	nop
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	e000e010 	.word	0xe000e010
 800cfec:	44020c00 	.word	0x44020c00

0800cff0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800cff6:	4b17      	ldr	r3, [pc, #92]	@ (800d054 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0304 	and.w	r3, r3, #4
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800d002:	2304      	movs	r3, #4
 800d004:	607b      	str	r3, [r7, #4]
 800d006:	e01e      	b.n	800d046 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800d008:	4b13      	ldr	r3, [pc, #76]	@ (800d058 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800d00a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d00e:	f003 030c 	and.w	r3, r3, #12
 800d012:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	2b08      	cmp	r3, #8
 800d018:	d00f      	beq.n	800d03a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b08      	cmp	r3, #8
 800d01e:	d80f      	bhi.n	800d040 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d003      	beq.n	800d034 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800d02c:	e008      	b.n	800d040 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800d02e:	2300      	movs	r3, #0
 800d030:	607b      	str	r3, [r7, #4]
        break;
 800d032:	e008      	b.n	800d046 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800d034:	2301      	movs	r3, #1
 800d036:	607b      	str	r3, [r7, #4]
        break;
 800d038:	e005      	b.n	800d046 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800d03a:	2302      	movs	r3, #2
 800d03c:	607b      	str	r3, [r7, #4]
        break;
 800d03e:	e002      	b.n	800d046 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800d040:	2300      	movs	r3, #0
 800d042:	607b      	str	r3, [r7, #4]
        break;
 800d044:	bf00      	nop
    }
  }
  return systick_source;
 800d046:	687b      	ldr	r3, [r7, #4]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	e000e010 	.word	0xe000e010
 800d058:	44020c00 	.word	0x44020c00

0800d05c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800d064:	f7ff fe3a 	bl	800ccdc <HAL_GetTick>
 800d068:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e06b      	b.n	800d14c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d008      	beq.n	800d092 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2220      	movs	r2, #32
 800d084:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	e05c      	b.n	800d14c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	695a      	ldr	r2, [r3, #20]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f042 0204 	orr.w	r2, r2, #4
 800d0a0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2205      	movs	r2, #5
 800d0a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800d0aa:	e020      	b.n	800d0ee <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800d0ac:	f7ff fe16 	bl	800ccdc <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	2b05      	cmp	r3, #5
 800d0b8:	d919      	bls.n	800d0ee <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0be:	f043 0210 	orr.w	r2, r3, #16
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0de:	2201      	movs	r2, #1
 800d0e0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e02e      	b.n	800d14c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0d7      	beq.n	800d0ac <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	695a      	ldr	r2, [r3, #20]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f042 0202 	orr.w	r2, r2, #2
 800d10a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2204      	movs	r2, #4
 800d110:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800d11c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d007      	beq.n	800d142 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d136:	2201      	movs	r2, #1
 800d138:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e019      	b.n	800d19a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d004      	beq.n	800d17c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2220      	movs	r2, #32
 800d176:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	e00e      	b.n	800d19a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2204      	movs	r2, #4
 800d180:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	695b      	ldr	r3, [r3, #20]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	6812      	ldr	r2, [r2, #0]
 800d18e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d192:	f043 0304 	orr.w	r3, r3, #4
 800d196:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
	...

0800d1a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b087      	sub	sp, #28
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800d1b6:	e136      	b.n	800d426 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	2101      	movs	r1, #1
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 8128 	beq.w	800d420 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d003      	beq.n	800d1e0 <HAL_GPIO_Init+0x38>
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	2b12      	cmp	r3, #18
 800d1de:	d125      	bne.n	800d22c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	08da      	lsrs	r2, r3, #3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3208      	adds	r2, #8
 800d1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f003 0307 	and.w	r3, r3, #7
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	220f      	movs	r2, #15
 800d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fc:	43db      	mvns	r3, r3
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	4013      	ands	r3, r2
 800d202:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	f003 020f 	and.w	r2, r3, #15
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	fa02 f303 	lsl.w	r3, r2, r3
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	08da      	lsrs	r2, r3, #3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3208      	adds	r2, #8
 800d226:	6979      	ldr	r1, [r7, #20]
 800d228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	2203      	movs	r2, #3
 800d238:	fa02 f303 	lsl.w	r3, r2, r3
 800d23c:	43db      	mvns	r3, r3
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	4013      	ands	r3, r2
 800d242:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	f003 0203 	and.w	r2, r3, #3
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	fa02 f303 	lsl.w	r3, r2, r3
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	4313      	orrs	r3, r2
 800d258:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d00b      	beq.n	800d280 <HAL_GPIO_Init+0xd8>
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d007      	beq.n	800d280 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d274:	2b11      	cmp	r3, #17
 800d276:	d003      	beq.n	800d280 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	2b12      	cmp	r3, #18
 800d27e:	d130      	bne.n	800d2e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	2203      	movs	r2, #3
 800d28c:	fa02 f303 	lsl.w	r3, r2, r3
 800d290:	43db      	mvns	r3, r3
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	4013      	ands	r3, r2
 800d296:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d2be:	43db      	mvns	r3, r3
 800d2c0:	697a      	ldr	r2, [r7, #20]
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	091b      	lsrs	r3, r3, #4
 800d2cc:	f003 0201 	and.w	r2, r3, #1
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d6:	697a      	ldr	r2, [r7, #20]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	d017      	beq.n	800d31a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	2203      	movs	r2, #3
 800d2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fa:	43db      	mvns	r3, r3
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	4013      	ands	r3, r2
 800d300:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	689a      	ldr	r2, [r3, #8]
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	fa02 f303 	lsl.w	r3, r2, r3
 800d30e:	697a      	ldr	r2, [r7, #20]
 800d310:	4313      	orrs	r3, r2
 800d312:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d322:	2b00      	cmp	r3, #0
 800d324:	d07c      	beq.n	800d420 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800d326:	4a47      	ldr	r2, [pc, #284]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	089b      	lsrs	r3, r3, #2
 800d32c:	3318      	adds	r3, #24
 800d32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d332:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	f003 0303 	and.w	r3, r3, #3
 800d33a:	00db      	lsls	r3, r3, #3
 800d33c:	220f      	movs	r2, #15
 800d33e:	fa02 f303 	lsl.w	r3, r2, r3
 800d342:	43db      	mvns	r3, r3
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	4013      	ands	r3, r2
 800d348:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	0a9a      	lsrs	r2, r3, #10
 800d34e:	4b3e      	ldr	r3, [pc, #248]	@ (800d448 <HAL_GPIO_Init+0x2a0>)
 800d350:	4013      	ands	r3, r2
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	f002 0203 	and.w	r2, r2, #3
 800d358:	00d2      	lsls	r2, r2, #3
 800d35a:	4093      	lsls	r3, r2
 800d35c:	697a      	ldr	r2, [r7, #20]
 800d35e:	4313      	orrs	r3, r2
 800d360:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800d362:	4938      	ldr	r1, [pc, #224]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	089b      	lsrs	r3, r3, #2
 800d368:	3318      	adds	r3, #24
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800d370:	4b34      	ldr	r3, [pc, #208]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	43db      	mvns	r3, r3
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	4013      	ands	r3, r2
 800d37e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800d38c:	697a      	ldr	r2, [r7, #20]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	4313      	orrs	r3, r2
 800d392:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800d394:	4a2b      	ldr	r2, [pc, #172]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800d39a:	4b2a      	ldr	r3, [pc, #168]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	43db      	mvns	r3, r3
 800d3a4:	697a      	ldr	r2, [r7, #20]
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800d3be:	4a21      	ldr	r2, [pc, #132]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800d3c4:	4b1f      	ldr	r3, [pc, #124]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	43db      	mvns	r3, r3
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d003      	beq.n	800d3ea <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800d3ea:	4a16      	ldr	r2, [pc, #88]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800d3f2:	4b14      	ldr	r3, [pc, #80]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	43db      	mvns	r3, r3
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	4013      	ands	r3, r2
 800d402:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d003      	beq.n	800d418 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	4313      	orrs	r3, r2
 800d416:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800d418:	4a0a      	ldr	r2, [pc, #40]	@ (800d444 <HAL_GPIO_Init+0x29c>)
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	3301      	adds	r3, #1
 800d424:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	fa22 f303 	lsr.w	r3, r2, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	f47f aec1 	bne.w	800d1b8 <HAL_GPIO_Init+0x10>
  }
}
 800d436:	bf00      	nop
 800d438:	bf00      	nop
 800d43a:	371c      	adds	r7, #28
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	44022000 	.word	0x44022000
 800d448:	002f7f7f 	.word	0x002f7f7f

0800d44c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	807b      	strh	r3, [r7, #2]
 800d458:	4613      	mov	r3, r2
 800d45a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d45c:	787b      	ldrb	r3, [r7, #1]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d462:	887a      	ldrh	r2, [r7, #2]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d468:	e002      	b.n	800d470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d46a:	887a      	ldrh	r2, [r7, #2]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d102      	bne.n	800d490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	f000 bc28 	b.w	800dce0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d490:	4b94      	ldr	r3, [pc, #592]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	f003 0318 	and.w	r3, r3, #24
 800d498:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800d49a:	4b92      	ldr	r3, [pc, #584]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d49e:	f003 0303 	and.w	r3, r3, #3
 800d4a2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d05b      	beq.n	800d568 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	2b08      	cmp	r3, #8
 800d4b4:	d005      	beq.n	800d4c2 <HAL_RCC_OscConfig+0x46>
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	2b18      	cmp	r3, #24
 800d4ba:	d114      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d111      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	f000 bc08 	b.w	800dce0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800d4d0:	4b84      	ldr	r3, [pc, #528]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a1b      	ldr	r3, [r3, #32]
 800d4dc:	041b      	lsls	r3, r3, #16
 800d4de:	4981      	ldr	r1, [pc, #516]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800d4e4:	e040      	b.n	800d568 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	69db      	ldr	r3, [r3, #28]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d023      	beq.n	800d536 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d4ee:	4b7d      	ldr	r3, [pc, #500]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a7c      	ldr	r2, [pc, #496]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d4f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4fa:	f7ff fbef 	bl	800ccdc <HAL_GetTick>
 800d4fe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800d500:	e008      	b.n	800d514 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800d502:	f7ff fbeb 	bl	800ccdc <HAL_GetTick>
 800d506:	4602      	mov	r2, r0
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d901      	bls.n	800d514 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	e3e5      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800d514:	4b73      	ldr	r3, [pc, #460]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d0f0      	beq.n	800d502 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800d520:	4b70      	ldr	r3, [pc, #448]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	041b      	lsls	r3, r3, #16
 800d52e:	496d      	ldr	r1, [pc, #436]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d530:	4313      	orrs	r3, r2
 800d532:	618b      	str	r3, [r1, #24]
 800d534:	e018      	b.n	800d568 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d536:	4b6b      	ldr	r3, [pc, #428]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a6a      	ldr	r2, [pc, #424]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d53c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d542:	f7ff fbcb 	bl	800ccdc <HAL_GetTick>
 800d546:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800d548:	e008      	b.n	800d55c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800d54a:	f7ff fbc7 	bl	800ccdc <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	2b02      	cmp	r3, #2
 800d556:	d901      	bls.n	800d55c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e3c1      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800d55c:	4b61      	ldr	r3, [pc, #388]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1f0      	bne.n	800d54a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 80a0 	beq.w	800d6b6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	2b10      	cmp	r3, #16
 800d57a:	d005      	beq.n	800d588 <HAL_RCC_OscConfig+0x10c>
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	2b18      	cmp	r3, #24
 800d580:	d109      	bne.n	800d596 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b03      	cmp	r3, #3
 800d586:	d106      	bne.n	800d596 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f040 8092 	bne.w	800d6b6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e3a4      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d59e:	d106      	bne.n	800d5ae <HAL_RCC_OscConfig+0x132>
 800d5a0:	4b50      	ldr	r3, [pc, #320]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a4f      	ldr	r2, [pc, #316]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	e058      	b.n	800d660 <HAL_RCC_OscConfig+0x1e4>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d112      	bne.n	800d5dc <HAL_RCC_OscConfig+0x160>
 800d5b6:	4b4b      	ldr	r3, [pc, #300]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a4a      	ldr	r2, [pc, #296]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d5c0:	6013      	str	r3, [r2, #0]
 800d5c2:	4b48      	ldr	r3, [pc, #288]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a47      	ldr	r2, [pc, #284]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5cc:	6013      	str	r3, [r2, #0]
 800d5ce:	4b45      	ldr	r3, [pc, #276]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a44      	ldr	r2, [pc, #272]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d5d8:	6013      	str	r3, [r2, #0]
 800d5da:	e041      	b.n	800d660 <HAL_RCC_OscConfig+0x1e4>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d5e4:	d112      	bne.n	800d60c <HAL_RCC_OscConfig+0x190>
 800d5e6:	4b3f      	ldr	r3, [pc, #252]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a3e      	ldr	r2, [pc, #248]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d5f0:	6013      	str	r3, [r2, #0]
 800d5f2:	4b3c      	ldr	r3, [pc, #240]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a3b      	ldr	r2, [pc, #236]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d5f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5fc:	6013      	str	r3, [r2, #0]
 800d5fe:	4b39      	ldr	r3, [pc, #228]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a38      	ldr	r2, [pc, #224]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d608:	6013      	str	r3, [r2, #0]
 800d60a:	e029      	b.n	800d660 <HAL_RCC_OscConfig+0x1e4>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800d614:	d112      	bne.n	800d63c <HAL_RCC_OscConfig+0x1c0>
 800d616:	4b33      	ldr	r3, [pc, #204]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a32      	ldr	r2, [pc, #200]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d61c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d620:	6013      	str	r3, [r2, #0]
 800d622:	4b30      	ldr	r3, [pc, #192]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a2f      	ldr	r2, [pc, #188]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d62c:	6013      	str	r3, [r2, #0]
 800d62e:	4b2d      	ldr	r3, [pc, #180]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a2c      	ldr	r2, [pc, #176]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d638:	6013      	str	r3, [r2, #0]
 800d63a:	e011      	b.n	800d660 <HAL_RCC_OscConfig+0x1e4>
 800d63c:	4b29      	ldr	r3, [pc, #164]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a28      	ldr	r2, [pc, #160]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d646:	6013      	str	r3, [r2, #0]
 800d648:	4b26      	ldr	r3, [pc, #152]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a25      	ldr	r2, [pc, #148]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d64e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	4b23      	ldr	r3, [pc, #140]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a22      	ldr	r2, [pc, #136]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d65a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d65e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d013      	beq.n	800d690 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d668:	f7ff fb38 	bl	800ccdc <HAL_GetTick>
 800d66c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d66e:	e008      	b.n	800d682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800d670:	f7ff fb34 	bl	800ccdc <HAL_GetTick>
 800d674:	4602      	mov	r2, r0
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	2b64      	cmp	r3, #100	@ 0x64
 800d67c:	d901      	bls.n	800d682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e32e      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d682:	4b18      	ldr	r3, [pc, #96]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0f0      	beq.n	800d670 <HAL_RCC_OscConfig+0x1f4>
 800d68e:	e012      	b.n	800d6b6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d690:	f7ff fb24 	bl	800ccdc <HAL_GetTick>
 800d694:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d696:	e008      	b.n	800d6aa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800d698:	f7ff fb20 	bl	800ccdc <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	2b64      	cmp	r3, #100	@ 0x64
 800d6a4:	d901      	bls.n	800d6aa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e31a      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e4 <HAL_RCC_OscConfig+0x268>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1f0      	bne.n	800d698 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 809a 	beq.w	800d7f8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d005      	beq.n	800d6d6 <HAL_RCC_OscConfig+0x25a>
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	2b18      	cmp	r3, #24
 800d6ce:	d149      	bne.n	800d764 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d146      	bne.n	800d764 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e2fe      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
 800d6e2:	bf00      	nop
 800d6e4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d11c      	bne.n	800d728 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800d6ee:	4b9a      	ldr	r3, [pc, #616]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 0218 	and.w	r2, r3, #24
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d014      	beq.n	800d728 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800d6fe:	4b96      	ldr	r3, [pc, #600]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f023 0218 	bic.w	r2, r3, #24
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	4993      	ldr	r1, [pc, #588]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d70c:	4313      	orrs	r3, r2
 800d70e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800d710:	f000 fdd0 	bl	800e2b4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d714:	4b91      	ldr	r3, [pc, #580]	@ (800d95c <HAL_RCC_OscConfig+0x4e0>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff fa55 	bl	800cbc8 <HAL_InitTick>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d001      	beq.n	800d728 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	e2db      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d728:	f7ff fad8 	bl	800ccdc <HAL_GetTick>
 800d72c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d72e:	e008      	b.n	800d742 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800d730:	f7ff fad4 	bl	800ccdc <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d901      	bls.n	800d742 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e2ce      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d742:	4b85      	ldr	r3, [pc, #532]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 0302 	and.w	r3, r3, #2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0f0      	beq.n	800d730 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800d74e:	4b82      	ldr	r3, [pc, #520]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	695b      	ldr	r3, [r3, #20]
 800d75a:	041b      	lsls	r3, r3, #16
 800d75c:	497e      	ldr	r1, [pc, #504]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d75e:	4313      	orrs	r3, r2
 800d760:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800d762:	e049      	b.n	800d7f8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d02c      	beq.n	800d7c6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800d76c:	4b7a      	ldr	r3, [pc, #488]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f023 0218 	bic.w	r2, r3, #24
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	4977      	ldr	r1, [pc, #476]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d77a:	4313      	orrs	r3, r2
 800d77c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800d77e:	4b76      	ldr	r3, [pc, #472]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a75      	ldr	r2, [pc, #468]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d784:	f043 0301 	orr.w	r3, r3, #1
 800d788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d78a:	f7ff faa7 	bl	800ccdc <HAL_GetTick>
 800d78e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d790:	e008      	b.n	800d7a4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800d792:	f7ff faa3 	bl	800ccdc <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d901      	bls.n	800d7a4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e29d      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7a4:	4b6c      	ldr	r3, [pc, #432]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 0302 	and.w	r3, r3, #2
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d0f0      	beq.n	800d792 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800d7b0:	4b69      	ldr	r3, [pc, #420]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	041b      	lsls	r3, r3, #16
 800d7be:	4966      	ldr	r1, [pc, #408]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	610b      	str	r3, [r1, #16]
 800d7c4:	e018      	b.n	800d7f8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7c6:	4b64      	ldr	r3, [pc, #400]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a63      	ldr	r2, [pc, #396]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d7cc:	f023 0301 	bic.w	r3, r3, #1
 800d7d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7d2:	f7ff fa83 	bl	800ccdc <HAL_GetTick>
 800d7d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d7d8:	e008      	b.n	800d7ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800d7da:	f7ff fa7f 	bl	800ccdc <HAL_GetTick>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d901      	bls.n	800d7ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	e279      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d7ec:	4b5a      	ldr	r3, [pc, #360]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1f0      	bne.n	800d7da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f003 0308 	and.w	r3, r3, #8
 800d800:	2b00      	cmp	r3, #0
 800d802:	d03c      	beq.n	800d87e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d01c      	beq.n	800d846 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d80c:	4b52      	ldr	r3, [pc, #328]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d80e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d812:	4a51      	ldr	r2, [pc, #324]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d814:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d818:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d81c:	f7ff fa5e 	bl	800ccdc <HAL_GetTick>
 800d820:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800d822:	e008      	b.n	800d836 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800d824:	f7ff fa5a 	bl	800ccdc <HAL_GetTick>
 800d828:	4602      	mov	r2, r0
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d901      	bls.n	800d836 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e254      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800d836:	4b48      	ldr	r3, [pc, #288]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d83c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d0ef      	beq.n	800d824 <HAL_RCC_OscConfig+0x3a8>
 800d844:	e01b      	b.n	800d87e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d846:	4b44      	ldr	r3, [pc, #272]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d84c:	4a42      	ldr	r2, [pc, #264]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d84e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d852:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d856:	f7ff fa41 	bl	800ccdc <HAL_GetTick>
 800d85a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d85c:	e008      	b.n	800d870 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800d85e:	f7ff fa3d 	bl	800ccdc <HAL_GetTick>
 800d862:	4602      	mov	r2, r0
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d901      	bls.n	800d870 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800d86c:	2303      	movs	r3, #3
 800d86e:	e237      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d870:	4b39      	ldr	r3, [pc, #228]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1ef      	bne.n	800d85e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f003 0304 	and.w	r3, r3, #4
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 80d2 	beq.w	800da30 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800d88c:	4b34      	ldr	r3, [pc, #208]	@ (800d960 <HAL_RCC_OscConfig+0x4e4>)
 800d88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d118      	bne.n	800d8ca <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800d898:	4b31      	ldr	r3, [pc, #196]	@ (800d960 <HAL_RCC_OscConfig+0x4e4>)
 800d89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d89c:	4a30      	ldr	r2, [pc, #192]	@ (800d960 <HAL_RCC_OscConfig+0x4e4>)
 800d89e:	f043 0301 	orr.w	r3, r3, #1
 800d8a2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8a4:	f7ff fa1a 	bl	800ccdc <HAL_GetTick>
 800d8a8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800d8aa:	e008      	b.n	800d8be <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8ac:	f7ff fa16 	bl	800ccdc <HAL_GetTick>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d901      	bls.n	800d8be <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e210      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800d8be:	4b28      	ldr	r3, [pc, #160]	@ (800d960 <HAL_RCC_OscConfig+0x4e4>)
 800d8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0f0      	beq.n	800d8ac <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d108      	bne.n	800d8e4 <HAL_RCC_OscConfig+0x468>
 800d8d2:	4b21      	ldr	r3, [pc, #132]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d8d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8d8:	4a1f      	ldr	r2, [pc, #124]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d8da:	f043 0301 	orr.w	r3, r3, #1
 800d8de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d8e2:	e074      	b.n	800d9ce <HAL_RCC_OscConfig+0x552>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d118      	bne.n	800d91e <HAL_RCC_OscConfig+0x4a2>
 800d8ec:	4b1a      	ldr	r3, [pc, #104]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d8ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8f2:	4a19      	ldr	r2, [pc, #100]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d8f4:	f023 0301 	bic.w	r3, r3, #1
 800d8f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d8fc:	4b16      	ldr	r3, [pc, #88]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d8fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d902:	4a15      	ldr	r2, [pc, #84]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d908:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d90c:	4b12      	ldr	r3, [pc, #72]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d90e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d912:	4a11      	ldr	r2, [pc, #68]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d914:	f023 0304 	bic.w	r3, r3, #4
 800d918:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d91c:	e057      	b.n	800d9ce <HAL_RCC_OscConfig+0x552>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	2b05      	cmp	r3, #5
 800d924:	d11e      	bne.n	800d964 <HAL_RCC_OscConfig+0x4e8>
 800d926:	4b0c      	ldr	r3, [pc, #48]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d92c:	4a0a      	ldr	r2, [pc, #40]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d92e:	f043 0304 	orr.w	r3, r3, #4
 800d932:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d936:	4b08      	ldr	r3, [pc, #32]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d93c:	4a06      	ldr	r2, [pc, #24]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d93e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d942:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d946:	4b04      	ldr	r3, [pc, #16]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d94c:	4a02      	ldr	r2, [pc, #8]	@ (800d958 <HAL_RCC_OscConfig+0x4dc>)
 800d94e:	f043 0301 	orr.w	r3, r3, #1
 800d952:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d956:	e03a      	b.n	800d9ce <HAL_RCC_OscConfig+0x552>
 800d958:	44020c00 	.word	0x44020c00
 800d95c:	20000004 	.word	0x20000004
 800d960:	44020800 	.word	0x44020800
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	2b85      	cmp	r3, #133	@ 0x85
 800d96a:	d118      	bne.n	800d99e <HAL_RCC_OscConfig+0x522>
 800d96c:	4ba2      	ldr	r3, [pc, #648]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d96e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d972:	4aa1      	ldr	r2, [pc, #644]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d974:	f043 0304 	orr.w	r3, r3, #4
 800d978:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d97c:	4b9e      	ldr	r3, [pc, #632]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d97e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d982:	4a9d      	ldr	r2, [pc, #628]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d988:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d98c:	4b9a      	ldr	r3, [pc, #616]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d98e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d992:	4a99      	ldr	r2, [pc, #612]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d994:	f043 0301 	orr.w	r3, r3, #1
 800d998:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d99c:	e017      	b.n	800d9ce <HAL_RCC_OscConfig+0x552>
 800d99e:	4b96      	ldr	r3, [pc, #600]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9a4:	4a94      	ldr	r2, [pc, #592]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9a6:	f023 0301 	bic.w	r3, r3, #1
 800d9aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d9ae:	4b92      	ldr	r3, [pc, #584]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9b4:	4a90      	ldr	r2, [pc, #576]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9b6:	f023 0304 	bic.w	r3, r3, #4
 800d9ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d9be:	4b8e      	ldr	r3, [pc, #568]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9c4:	4a8c      	ldr	r2, [pc, #560]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d016      	beq.n	800da04 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9d6:	f7ff f981 	bl	800ccdc <HAL_GetTick>
 800d9da:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d9dc:	e00a      	b.n	800d9f4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9de:	f7ff f97d 	bl	800ccdc <HAL_GetTick>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d901      	bls.n	800d9f4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e175      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d9f4:	4b80      	ldr	r3, [pc, #512]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800d9f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9fa:	f003 0302 	and.w	r3, r3, #2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d0ed      	beq.n	800d9de <HAL_RCC_OscConfig+0x562>
 800da02:	e015      	b.n	800da30 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da04:	f7ff f96a 	bl	800ccdc <HAL_GetTick>
 800da08:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da0a:	e00a      	b.n	800da22 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da0c:	f7ff f966 	bl	800ccdc <HAL_GetTick>
 800da10:	4602      	mov	r2, r0
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d901      	bls.n	800da22 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800da1e:	2303      	movs	r3, #3
 800da20:	e15e      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da22:	4b75      	ldr	r3, [pc, #468]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800da24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1ed      	bne.n	800da0c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f003 0320 	and.w	r3, r3, #32
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d036      	beq.n	800daaa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da40:	2b00      	cmp	r3, #0
 800da42:	d019      	beq.n	800da78 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da44:	4b6c      	ldr	r3, [pc, #432]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a6b      	ldr	r2, [pc, #428]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800da4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800da4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da50:	f7ff f944 	bl	800ccdc <HAL_GetTick>
 800da54:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800da56:	e008      	b.n	800da6a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800da58:	f7ff f940 	bl	800ccdc <HAL_GetTick>
 800da5c:	4602      	mov	r2, r0
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	2b02      	cmp	r3, #2
 800da64:	d901      	bls.n	800da6a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800da66:	2303      	movs	r3, #3
 800da68:	e13a      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800da6a:	4b63      	ldr	r3, [pc, #396]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0f0      	beq.n	800da58 <HAL_RCC_OscConfig+0x5dc>
 800da76:	e018      	b.n	800daaa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800da78:	4b5f      	ldr	r3, [pc, #380]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a5e      	ldr	r2, [pc, #376]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800da7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da84:	f7ff f92a 	bl	800ccdc <HAL_GetTick>
 800da88:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800da8a:	e008      	b.n	800da9e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800da8c:	f7ff f926 	bl	800ccdc <HAL_GetTick>
 800da90:	4602      	mov	r2, r0
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	2b02      	cmp	r3, #2
 800da98:	d901      	bls.n	800da9e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e120      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800da9e:	4b56      	ldr	r3, [pc, #344]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1f0      	bne.n	800da8c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 8115 	beq.w	800dcde <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	2b18      	cmp	r3, #24
 800dab8:	f000 80af 	beq.w	800dc1a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	f040 8086 	bne.w	800dbd2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800dac6:	4b4c      	ldr	r3, [pc, #304]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a4b      	ldr	r2, [pc, #300]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dacc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dad2:	f7ff f903 	bl	800ccdc <HAL_GetTick>
 800dad6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800dad8:	e008      	b.n	800daec <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800dada:	f7ff f8ff 	bl	800ccdc <HAL_GetTick>
 800dade:	4602      	mov	r2, r0
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d901      	bls.n	800daec <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800dae8:	2303      	movs	r3, #3
 800daea:	e0f9      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800daec:	4b42      	ldr	r3, [pc, #264]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1f0      	bne.n	800dada <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800daf8:	4b3f      	ldr	r3, [pc, #252]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800db00:	f023 0303 	bic.w	r3, r3, #3
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db0c:	0212      	lsls	r2, r2, #8
 800db0e:	430a      	orrs	r2, r1
 800db10:	4939      	ldr	r1, [pc, #228]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db12:	4313      	orrs	r3, r2
 800db14:	628b      	str	r3, [r1, #40]	@ 0x28
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db1a:	3b01      	subs	r3, #1
 800db1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db24:	3b01      	subs	r3, #1
 800db26:	025b      	lsls	r3, r3, #9
 800db28:	b29b      	uxth	r3, r3
 800db2a:	431a      	orrs	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db30:	3b01      	subs	r3, #1
 800db32:	041b      	lsls	r3, r3, #16
 800db34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db3e:	3b01      	subs	r3, #1
 800db40:	061b      	lsls	r3, r3, #24
 800db42:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db46:	492c      	ldr	r1, [pc, #176]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db48:	4313      	orrs	r3, r2
 800db4a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800db4c:	4b2a      	ldr	r3, [pc, #168]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db50:	4a29      	ldr	r2, [pc, #164]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db52:	f023 0310 	bic.w	r3, r3, #16
 800db56:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db5c:	4a26      	ldr	r2, [pc, #152]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800db62:	4b25      	ldr	r3, [pc, #148]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db66:	4a24      	ldr	r2, [pc, #144]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db68:	f043 0310 	orr.w	r3, r3, #16
 800db6c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800db6e:	4b22      	ldr	r3, [pc, #136]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db72:	f023 020c 	bic.w	r2, r3, #12
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db7a:	491f      	ldr	r1, [pc, #124]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db7c:	4313      	orrs	r3, r2
 800db7e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800db80:	4b1d      	ldr	r3, [pc, #116]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db84:	f023 0220 	bic.w	r2, r3, #32
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db8c:	491a      	ldr	r1, [pc, #104]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db8e:	4313      	orrs	r3, r2
 800db90:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db92:	4b19      	ldr	r3, [pc, #100]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db96:	4a18      	ldr	r2, [pc, #96]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800db98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db9c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800db9e:	4b16      	ldr	r3, [pc, #88]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a15      	ldr	r2, [pc, #84]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dba4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbaa:	f7ff f897 	bl	800ccdc <HAL_GetTick>
 800dbae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800dbb0:	e008      	b.n	800dbc4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800dbb2:	f7ff f893 	bl	800ccdc <HAL_GetTick>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d901      	bls.n	800dbc4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	e08d      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800dbc4:	4b0c      	ldr	r3, [pc, #48]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0f0      	beq.n	800dbb2 <HAL_RCC_OscConfig+0x736>
 800dbd0:	e085      	b.n	800dcde <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800dbd2:	4b09      	ldr	r3, [pc, #36]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a08      	ldr	r2, [pc, #32]	@ (800dbf8 <HAL_RCC_OscConfig+0x77c>)
 800dbd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbde:	f7ff f87d 	bl	800ccdc <HAL_GetTick>
 800dbe2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800dbe4:	e00a      	b.n	800dbfc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800dbe6:	f7ff f879 	bl	800ccdc <HAL_GetTick>
 800dbea:	4602      	mov	r2, r0
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d903      	bls.n	800dbfc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	e073      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
 800dbf8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800dbfc:	4b3a      	ldr	r3, [pc, #232]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1ee      	bne.n	800dbe6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800dc08:	4b37      	ldr	r3, [pc, #220]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0c:	4a36      	ldr	r2, [pc, #216]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dc0e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800dc12:	f023 0303 	bic.w	r3, r3, #3
 800dc16:	6293      	str	r3, [r2, #40]	@ 0x28
 800dc18:	e061      	b.n	800dcde <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800dc1a:	4b33      	ldr	r3, [pc, #204]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dc20:	4b31      	ldr	r3, [pc, #196]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dc22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc24:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d031      	beq.n	800dc92 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f003 0203 	and.w	r2, r3, #3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d12a      	bne.n	800dc92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	0a1b      	lsrs	r3, r3, #8
 800dc40:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d122      	bne.n	800dc92 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc56:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d11a      	bne.n	800dc92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	0a5b      	lsrs	r3, r3, #9
 800dc60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc68:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d111      	bne.n	800dc92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	0c1b      	lsrs	r3, r3, #16
 800dc72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc7a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d108      	bne.n	800dc92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	0e1b      	lsrs	r3, r3, #24
 800dc84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc8c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d001      	beq.n	800dc96 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e024      	b.n	800dce0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800dc96:	4b14      	ldr	r3, [pc, #80]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc9a:	08db      	lsrs	r3, r3, #3
 800dc9c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d01a      	beq.n	800dcde <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800dca8:	4b0f      	ldr	r3, [pc, #60]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dcaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcac:	4a0e      	ldr	r2, [pc, #56]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dcae:	f023 0310 	bic.w	r3, r3, #16
 800dcb2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcb4:	f7ff f812 	bl	800ccdc <HAL_GetTick>
 800dcb8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800dcba:	bf00      	nop
 800dcbc:	f7ff f80e 	bl	800ccdc <HAL_GetTick>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d0f9      	beq.n	800dcbc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dccc:	4a06      	ldr	r2, [pc, #24]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800dcd2:	4b05      	ldr	r3, [pc, #20]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd6:	4a04      	ldr	r2, [pc, #16]	@ (800dce8 <HAL_RCC_OscConfig+0x86c>)
 800dcd8:	f043 0310 	orr.w	r3, r3, #16
 800dcdc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3720      	adds	r7, #32
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	44020c00 	.word	0x44020c00

0800dcec <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d101      	bne.n	800dd00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e19e      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dd00:	4b83      	ldr	r3, [pc, #524]	@ (800df10 <HAL_RCC_ClockConfig+0x224>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f003 030f 	and.w	r3, r3, #15
 800dd08:	683a      	ldr	r2, [r7, #0]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d910      	bls.n	800dd30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd0e:	4b80      	ldr	r3, [pc, #512]	@ (800df10 <HAL_RCC_ClockConfig+0x224>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f023 020f 	bic.w	r2, r3, #15
 800dd16:	497e      	ldr	r1, [pc, #504]	@ (800df10 <HAL_RCC_ClockConfig+0x224>)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd1e:	4b7c      	ldr	r3, [pc, #496]	@ (800df10 <HAL_RCC_ClockConfig+0x224>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 030f 	and.w	r3, r3, #15
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d001      	beq.n	800dd30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e186      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f003 0310 	and.w	r3, r3, #16
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d012      	beq.n	800dd62 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	695a      	ldr	r2, [r3, #20]
 800dd40:	4b74      	ldr	r3, [pc, #464]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	0a1b      	lsrs	r3, r3, #8
 800dd46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d909      	bls.n	800dd62 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800dd4e:	4b71      	ldr	r3, [pc, #452]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	021b      	lsls	r3, r3, #8
 800dd5c:	496d      	ldr	r1, [pc, #436]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f003 0308 	and.w	r3, r3, #8
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d012      	beq.n	800dd94 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	4b68      	ldr	r3, [pc, #416]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	091b      	lsrs	r3, r3, #4
 800dd78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d909      	bls.n	800dd94 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800dd80:	4b64      	ldr	r3, [pc, #400]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dd82:	6a1b      	ldr	r3, [r3, #32]
 800dd84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	691b      	ldr	r3, [r3, #16]
 800dd8c:	011b      	lsls	r3, r3, #4
 800dd8e:	4961      	ldr	r1, [pc, #388]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dd90:	4313      	orrs	r3, r2
 800dd92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 0304 	and.w	r3, r3, #4
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d010      	beq.n	800ddc2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68da      	ldr	r2, [r3, #12]
 800dda4:	4b5b      	ldr	r3, [pc, #364]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d908      	bls.n	800ddc2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800ddb0:	4b58      	ldr	r3, [pc, #352]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800ddb2:	6a1b      	ldr	r3, [r3, #32]
 800ddb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	4955      	ldr	r1, [pc, #340]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f003 0302 	and.w	r3, r3, #2
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d010      	beq.n	800ddf0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	689a      	ldr	r2, [r3, #8]
 800ddd2:	4b50      	ldr	r3, [pc, #320]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	f003 030f 	and.w	r3, r3, #15
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d908      	bls.n	800ddf0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800ddde:	4b4d      	ldr	r3, [pc, #308]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	f023 020f 	bic.w	r2, r3, #15
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	494a      	ldr	r1, [pc, #296]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800ddec:	4313      	orrs	r3, r2
 800ddee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 8093 	beq.w	800df24 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	2b03      	cmp	r3, #3
 800de04:	d107      	bne.n	800de16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800de06:	4b43      	ldr	r3, [pc, #268]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d121      	bne.n	800de56 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e113      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d107      	bne.n	800de2e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800de1e:	4b3d      	ldr	r3, [pc, #244]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de26:	2b00      	cmp	r3, #0
 800de28:	d115      	bne.n	800de56 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e107      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	2b01      	cmp	r3, #1
 800de34:	d107      	bne.n	800de46 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800de36:	4b37      	ldr	r3, [pc, #220]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d109      	bne.n	800de56 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	e0fb      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800de46:	4b33      	ldr	r3, [pc, #204]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 0302 	and.w	r3, r3, #2
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e0f3      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800de56:	4b2f      	ldr	r3, [pc, #188]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de58:	69db      	ldr	r3, [r3, #28]
 800de5a:	f023 0203 	bic.w	r2, r3, #3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	492c      	ldr	r1, [pc, #176]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de64:	4313      	orrs	r3, r2
 800de66:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de68:	f7fe ff38 	bl	800ccdc <HAL_GetTick>
 800de6c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	2b03      	cmp	r3, #3
 800de74:	d112      	bne.n	800de9c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800de76:	e00a      	b.n	800de8e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800de78:	f7fe ff30 	bl	800ccdc <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de86:	4293      	cmp	r3, r2
 800de88:	d901      	bls.n	800de8e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800de8a:	2303      	movs	r3, #3
 800de8c:	e0d7      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800de8e:	4b21      	ldr	r3, [pc, #132]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800de90:	69db      	ldr	r3, [r3, #28]
 800de92:	f003 0318 	and.w	r3, r3, #24
 800de96:	2b18      	cmp	r3, #24
 800de98:	d1ee      	bne.n	800de78 <HAL_RCC_ClockConfig+0x18c>
 800de9a:	e043      	b.n	800df24 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d112      	bne.n	800deca <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800dea4:	e00a      	b.n	800debc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800dea6:	f7fe ff19 	bl	800ccdc <HAL_GetTick>
 800deaa:	4602      	mov	r2, r0
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d901      	bls.n	800debc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800deb8:	2303      	movs	r3, #3
 800deba:	e0c0      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800debc:	4b15      	ldr	r3, [pc, #84]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	f003 0318 	and.w	r3, r3, #24
 800dec4:	2b10      	cmp	r3, #16
 800dec6:	d1ee      	bne.n	800dea6 <HAL_RCC_ClockConfig+0x1ba>
 800dec8:	e02c      	b.n	800df24 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d122      	bne.n	800df18 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800ded2:	e00a      	b.n	800deea <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800ded4:	f7fe ff02 	bl	800ccdc <HAL_GetTick>
 800ded8:	4602      	mov	r2, r0
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d901      	bls.n	800deea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e0a9      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800deea:	4b0a      	ldr	r3, [pc, #40]	@ (800df14 <HAL_RCC_ClockConfig+0x228>)
 800deec:	69db      	ldr	r3, [r3, #28]
 800deee:	f003 0318 	and.w	r3, r3, #24
 800def2:	2b08      	cmp	r3, #8
 800def4:	d1ee      	bne.n	800ded4 <HAL_RCC_ClockConfig+0x1e8>
 800def6:	e015      	b.n	800df24 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800def8:	f7fe fef0 	bl	800ccdc <HAL_GetTick>
 800defc:	4602      	mov	r2, r0
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df06:	4293      	cmp	r3, r2
 800df08:	d906      	bls.n	800df18 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e097      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
 800df0e:	bf00      	nop
 800df10:	40022000 	.word	0x40022000
 800df14:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800df18:	4b4b      	ldr	r3, [pc, #300]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800df1a:	69db      	ldr	r3, [r3, #28]
 800df1c:	f003 0318 	and.w	r3, r3, #24
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1e9      	bne.n	800def8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f003 0302 	and.w	r3, r3, #2
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d010      	beq.n	800df52 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	689a      	ldr	r2, [r3, #8]
 800df34:	4b44      	ldr	r3, [pc, #272]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800df36:	6a1b      	ldr	r3, [r3, #32]
 800df38:	f003 030f 	and.w	r3, r3, #15
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d208      	bcs.n	800df52 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800df40:	4b41      	ldr	r3, [pc, #260]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	f023 020f 	bic.w	r2, r3, #15
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	493e      	ldr	r1, [pc, #248]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800df4e:	4313      	orrs	r3, r2
 800df50:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800df52:	4b3e      	ldr	r3, [pc, #248]	@ (800e04c <HAL_RCC_ClockConfig+0x360>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 030f 	and.w	r3, r3, #15
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d210      	bcs.n	800df82 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df60:	4b3a      	ldr	r3, [pc, #232]	@ (800e04c <HAL_RCC_ClockConfig+0x360>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f023 020f 	bic.w	r2, r3, #15
 800df68:	4938      	ldr	r1, [pc, #224]	@ (800e04c <HAL_RCC_ClockConfig+0x360>)
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df70:	4b36      	ldr	r3, [pc, #216]	@ (800e04c <HAL_RCC_ClockConfig+0x360>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d001      	beq.n	800df82 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e05d      	b.n	800e03e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0304 	and.w	r3, r3, #4
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d010      	beq.n	800dfb0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	68da      	ldr	r2, [r3, #12]
 800df92:	4b2d      	ldr	r3, [pc, #180]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800df94:	6a1b      	ldr	r3, [r3, #32]
 800df96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d208      	bcs.n	800dfb0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800df9e:	4b2a      	ldr	r3, [pc, #168]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	4927      	ldr	r1, [pc, #156]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800dfac:	4313      	orrs	r3, r2
 800dfae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 0308 	and.w	r3, r3, #8
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d012      	beq.n	800dfe2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	691a      	ldr	r2, [r3, #16]
 800dfc0:	4b21      	ldr	r3, [pc, #132]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	091b      	lsrs	r3, r3, #4
 800dfc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d209      	bcs.n	800dfe2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800dfce:	4b1e      	ldr	r3, [pc, #120]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	011b      	lsls	r3, r3, #4
 800dfdc:	491a      	ldr	r1, [pc, #104]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f003 0310 	and.w	r3, r3, #16
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d012      	beq.n	800e014 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	695a      	ldr	r2, [r3, #20]
 800dff2:	4b15      	ldr	r3, [pc, #84]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800dff4:	6a1b      	ldr	r3, [r3, #32]
 800dff6:	0a1b      	lsrs	r3, r3, #8
 800dff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d209      	bcs.n	800e014 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800e000:	4b11      	ldr	r3, [pc, #68]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800e002:	6a1b      	ldr	r3, [r3, #32]
 800e004:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	021b      	lsls	r3, r3, #8
 800e00e:	490e      	ldr	r1, [pc, #56]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800e010:	4313      	orrs	r3, r2
 800e012:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800e014:	f000 f822 	bl	800e05c <HAL_RCC_GetSysClockFreq>
 800e018:	4602      	mov	r2, r0
 800e01a:	4b0b      	ldr	r3, [pc, #44]	@ (800e048 <HAL_RCC_ClockConfig+0x35c>)
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	f003 030f 	and.w	r3, r3, #15
 800e022:	490b      	ldr	r1, [pc, #44]	@ (800e050 <HAL_RCC_ClockConfig+0x364>)
 800e024:	5ccb      	ldrb	r3, [r1, r3]
 800e026:	fa22 f303 	lsr.w	r3, r2, r3
 800e02a:	4a0a      	ldr	r2, [pc, #40]	@ (800e054 <HAL_RCC_ClockConfig+0x368>)
 800e02c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e02e:	4b0a      	ldr	r3, [pc, #40]	@ (800e058 <HAL_RCC_ClockConfig+0x36c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4618      	mov	r0, r3
 800e034:	f7fe fdc8 	bl	800cbc8 <HAL_InitTick>
 800e038:	4603      	mov	r3, r0
 800e03a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800e03c:	7afb      	ldrb	r3, [r7, #11]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	44020c00 	.word	0x44020c00
 800e04c:	40022000 	.word	0x40022000
 800e050:	0801478c 	.word	0x0801478c
 800e054:	20000000 	.word	0x20000000
 800e058:	20000004 	.word	0x20000004

0800e05c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b089      	sub	sp, #36	@ 0x24
 800e060:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800e062:	4b8c      	ldr	r3, [pc, #560]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e064:	69db      	ldr	r3, [r3, #28]
 800e066:	f003 0318 	and.w	r3, r3, #24
 800e06a:	2b08      	cmp	r3, #8
 800e06c:	d102      	bne.n	800e074 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800e06e:	4b8a      	ldr	r3, [pc, #552]	@ (800e298 <HAL_RCC_GetSysClockFreq+0x23c>)
 800e070:	61fb      	str	r3, [r7, #28]
 800e072:	e107      	b.n	800e284 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e074:	4b87      	ldr	r3, [pc, #540]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	f003 0318 	and.w	r3, r3, #24
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d112      	bne.n	800e0a6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800e080:	4b84      	ldr	r3, [pc, #528]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f003 0320 	and.w	r3, r3, #32
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d009      	beq.n	800e0a0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e08c:	4b81      	ldr	r3, [pc, #516]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	08db      	lsrs	r3, r3, #3
 800e092:	f003 0303 	and.w	r3, r3, #3
 800e096:	4a81      	ldr	r2, [pc, #516]	@ (800e29c <HAL_RCC_GetSysClockFreq+0x240>)
 800e098:	fa22 f303 	lsr.w	r3, r2, r3
 800e09c:	61fb      	str	r3, [r7, #28]
 800e09e:	e0f1      	b.n	800e284 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800e0a0:	4b7e      	ldr	r3, [pc, #504]	@ (800e29c <HAL_RCC_GetSysClockFreq+0x240>)
 800e0a2:	61fb      	str	r3, [r7, #28]
 800e0a4:	e0ee      	b.n	800e284 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e0a6:	4b7b      	ldr	r3, [pc, #492]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e0a8:	69db      	ldr	r3, [r3, #28]
 800e0aa:	f003 0318 	and.w	r3, r3, #24
 800e0ae:	2b10      	cmp	r3, #16
 800e0b0:	d102      	bne.n	800e0b8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e0b2:	4b7b      	ldr	r3, [pc, #492]	@ (800e2a0 <HAL_RCC_GetSysClockFreq+0x244>)
 800e0b4:	61fb      	str	r3, [r7, #28]
 800e0b6:	e0e5      	b.n	800e284 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e0b8:	4b76      	ldr	r3, [pc, #472]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e0ba:	69db      	ldr	r3, [r3, #28]
 800e0bc:	f003 0318 	and.w	r3, r3, #24
 800e0c0:	2b18      	cmp	r3, #24
 800e0c2:	f040 80dd 	bne.w	800e280 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e0c6:	4b73      	ldr	r3, [pc, #460]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ca:	f003 0303 	and.w	r3, r3, #3
 800e0ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800e0d0:	4b70      	ldr	r3, [pc, #448]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0d4:	0a1b      	lsrs	r3, r3, #8
 800e0d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e0dc:	4b6d      	ldr	r3, [pc, #436]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0e0:	091b      	lsrs	r3, r3, #4
 800e0e2:	f003 0301 	and.w	r3, r3, #1
 800e0e6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800e0e8:	4b6a      	ldr	r3, [pc, #424]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800e0ec:	08db      	lsrs	r3, r3, #3
 800e0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	fb02 f303 	mul.w	r3, r2, r3
 800e0f8:	ee07 3a90 	vmov	s15, r3
 800e0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e100:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 80b7 	beq.w	800e27a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d003      	beq.n	800e11a <HAL_RCC_GetSysClockFreq+0xbe>
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	2b03      	cmp	r3, #3
 800e116:	d056      	beq.n	800e1c6 <HAL_RCC_GetSysClockFreq+0x16a>
 800e118:	e077      	b.n	800e20a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800e11a:	4b5e      	ldr	r3, [pc, #376]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f003 0320 	and.w	r3, r3, #32
 800e122:	2b00      	cmp	r3, #0
 800e124:	d02d      	beq.n	800e182 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e126:	4b5b      	ldr	r3, [pc, #364]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	08db      	lsrs	r3, r3, #3
 800e12c:	f003 0303 	and.w	r3, r3, #3
 800e130:	4a5a      	ldr	r2, [pc, #360]	@ (800e29c <HAL_RCC_GetSysClockFreq+0x240>)
 800e132:	fa22 f303 	lsr.w	r3, r2, r3
 800e136:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	ee07 3a90 	vmov	s15, r3
 800e13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	ee07 3a90 	vmov	s15, r3
 800e148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e14c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e150:	4b50      	ldr	r3, [pc, #320]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e158:	ee07 3a90 	vmov	s15, r3
 800e15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800e160:	ed97 6a02 	vldr	s12, [r7, #8]
 800e164:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800e2a4 <HAL_RCC_GetSysClockFreq+0x248>
 800e168:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800e170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e174:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e17c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800e180:	e065      	b.n	800e24e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	ee07 3a90 	vmov	s15, r3
 800e188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e18c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800e2a8 <HAL_RCC_GetSysClockFreq+0x24c>
 800e190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e194:	4b3f      	ldr	r3, [pc, #252]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19c:	ee07 3a90 	vmov	s15, r3
 800e1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1a4:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1a8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e2a4 <HAL_RCC_GetSysClockFreq+0x248>
 800e1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800e1c4:	e043      	b.n	800e24e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	ee07 3a90 	vmov	s15, r3
 800e1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800e2ac <HAL_RCC_GetSysClockFreq+0x250>
 800e1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1d8:	4b2e      	ldr	r3, [pc, #184]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e0:	ee07 3a90 	vmov	s15, r3
 800e1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1e8:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1ec:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800e2a4 <HAL_RCC_GetSysClockFreq+0x248>
 800e1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e204:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800e208:	e021      	b.n	800e24e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	ee07 3a90 	vmov	s15, r3
 800e210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e214:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e2b0 <HAL_RCC_GetSysClockFreq+0x254>
 800e218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e21c:	4b1d      	ldr	r3, [pc, #116]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e224:	ee07 3a90 	vmov	s15, r3
 800e228:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e22c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e230:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800e2a4 <HAL_RCC_GetSysClockFreq+0x248>
 800e234:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e238:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e23c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e240:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e248:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800e24c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800e24e:	4b11      	ldr	r3, [pc, #68]	@ (800e294 <HAL_RCC_GetSysClockFreq+0x238>)
 800e250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e252:	0a5b      	lsrs	r3, r3, #9
 800e254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e258:	3301      	adds	r3, #1
 800e25a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	ee07 3a90 	vmov	s15, r3
 800e262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e266:	edd7 6a06 	vldr	s13, [r7, #24]
 800e26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e272:	ee17 3a90 	vmov	r3, s15
 800e276:	61fb      	str	r3, [r7, #28]
 800e278:	e004      	b.n	800e284 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
 800e27e:	e001      	b.n	800e284 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800e280:	4b06      	ldr	r3, [pc, #24]	@ (800e29c <HAL_RCC_GetSysClockFreq+0x240>)
 800e282:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800e284:	69fb      	ldr	r3, [r7, #28]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3724      	adds	r7, #36	@ 0x24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	44020c00 	.word	0x44020c00
 800e298:	003d0900 	.word	0x003d0900
 800e29c:	03d09000 	.word	0x03d09000
 800e2a0:	017d7840 	.word	0x017d7840
 800e2a4:	46000000 	.word	0x46000000
 800e2a8:	4c742400 	.word	0x4c742400
 800e2ac:	4bbebc20 	.word	0x4bbebc20
 800e2b0:	4a742400 	.word	0x4a742400

0800e2b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800e2b8:	f7ff fed0 	bl	800e05c <HAL_RCC_GetSysClockFreq>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	4b08      	ldr	r3, [pc, #32]	@ (800e2e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800e2c2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800e2c6:	4907      	ldr	r1, [pc, #28]	@ (800e2e4 <HAL_RCC_GetHCLKFreq+0x30>)
 800e2c8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800e2ca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800e2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800e2d2:	4a05      	ldr	r2, [pc, #20]	@ (800e2e8 <HAL_RCC_GetHCLKFreq+0x34>)
 800e2d4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800e2d6:	4b04      	ldr	r3, [pc, #16]	@ (800e2e8 <HAL_RCC_GetHCLKFreq+0x34>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	44020c00 	.word	0x44020c00
 800e2e4:	0801478c 	.word	0x0801478c
 800e2e8:	20000000 	.word	0x20000000

0800e2ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800e2f0:	f7ff ffe0 	bl	800e2b4 <HAL_RCC_GetHCLKFreq>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	4b06      	ldr	r3, [pc, #24]	@ (800e310 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	091b      	lsrs	r3, r3, #4
 800e2fc:	f003 0307 	and.w	r3, r3, #7
 800e300:	4904      	ldr	r1, [pc, #16]	@ (800e314 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e302:	5ccb      	ldrb	r3, [r1, r3]
 800e304:	f003 031f 	and.w	r3, r3, #31
 800e308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	44020c00 	.word	0x44020c00
 800e314:	0801479c 	.word	0x0801479c

0800e318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800e31c:	f7ff ffca 	bl	800e2b4 <HAL_RCC_GetHCLKFreq>
 800e320:	4602      	mov	r2, r0
 800e322:	4b06      	ldr	r3, [pc, #24]	@ (800e33c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	0a1b      	lsrs	r3, r3, #8
 800e328:	f003 0307 	and.w	r3, r3, #7
 800e32c:	4904      	ldr	r1, [pc, #16]	@ (800e340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e32e:	5ccb      	ldrb	r3, [r1, r3]
 800e330:	f003 031f 	and.w	r3, r3, #31
 800e334:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e338:	4618      	mov	r0, r3
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	44020c00 	.word	0x44020c00
 800e340:	0801479c 	.word	0x0801479c

0800e344 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800e348:	f7ff ffb4 	bl	800e2b4 <HAL_RCC_GetHCLKFreq>
 800e34c:	4602      	mov	r2, r0
 800e34e:	4b06      	ldr	r3, [pc, #24]	@ (800e368 <HAL_RCC_GetPCLK3Freq+0x24>)
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	0b1b      	lsrs	r3, r3, #12
 800e354:	f003 0307 	and.w	r3, r3, #7
 800e358:	4904      	ldr	r1, [pc, #16]	@ (800e36c <HAL_RCC_GetPCLK3Freq+0x28>)
 800e35a:	5ccb      	ldrb	r3, [r1, r3]
 800e35c:	f003 031f 	and.w	r3, r3, #31
 800e360:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e364:	4618      	mov	r0, r3
 800e366:	bd80      	pop	{r7, pc}
 800e368:	44020c00 	.word	0x44020c00
 800e36c:	0801479c 	.word	0x0801479c

0800e370 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800e370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e374:	b0d8      	sub	sp, #352	@ 0x160
 800e376:	af00      	add	r7, sp, #0
 800e378:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e37c:	2300      	movs	r3, #0
 800e37e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e382:	2300      	movs	r3, #0
 800e384:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e388:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800e394:	2500      	movs	r5, #0
 800e396:	ea54 0305 	orrs.w	r3, r4, r5
 800e39a:	d00b      	beq.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800e39c:	4bcd      	ldr	r3, [pc, #820]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e39e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e3a2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800e3a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3ac:	4ac9      	ldr	r2, [pc, #804]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e3ae:	430b      	orrs	r3, r1
 800e3b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e3b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3bc:	f002 0801 	and.w	r8, r2, #1
 800e3c0:	f04f 0900 	mov.w	r9, #0
 800e3c4:	ea58 0309 	orrs.w	r3, r8, r9
 800e3c8:	d042      	beq.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800e3ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3d0:	2b05      	cmp	r3, #5
 800e3d2:	d823      	bhi.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0xac>
 800e3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3dc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800e3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3da:	bf00      	nop
 800e3dc:	0800e425 	.word	0x0800e425
 800e3e0:	0800e3f5 	.word	0x0800e3f5
 800e3e4:	0800e409 	.word	0x0800e409
 800e3e8:	0800e425 	.word	0x0800e425
 800e3ec:	0800e425 	.word	0x0800e425
 800e3f0:	0800e425 	.word	0x0800e425
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e3f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f004 feda 	bl	80131b4 <RCCEx_PLL2_Config>
 800e400:	4603      	mov	r3, r0
 800e402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800e406:	e00e      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e40c:	3330      	adds	r3, #48	@ 0x30
 800e40e:	4618      	mov	r0, r3
 800e410:	f004 ff68 	bl	80132e4 <RCCEx_PLL3_Config>
 800e414:	4603      	mov	r3, r0
 800e416:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800e41a:	e004      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e41c:	2301      	movs	r3, #1
 800e41e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e422:	e000      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800e424:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e426:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10c      	bne.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800e42e:	4ba9      	ldr	r3, [pc, #676]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e434:	f023 0107 	bic.w	r1, r3, #7
 800e438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e43c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e43e:	4aa5      	ldr	r2, [pc, #660]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e440:	430b      	orrs	r3, r1
 800e442:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e446:	e003      	b.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e448:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e44c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	f002 0a02 	and.w	sl, r2, #2
 800e45c:	f04f 0b00 	mov.w	fp, #0
 800e460:	ea5a 030b 	orrs.w	r3, sl, fp
 800e464:	f000 8088 	beq.w	800e578 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800e468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e46c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e46e:	2b28      	cmp	r3, #40	@ 0x28
 800e470:	d868      	bhi.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800e472:	a201      	add	r2, pc, #4	@ (adr r2, 800e478 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800e474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e478:	0800e54d 	.word	0x0800e54d
 800e47c:	0800e545 	.word	0x0800e545
 800e480:	0800e545 	.word	0x0800e545
 800e484:	0800e545 	.word	0x0800e545
 800e488:	0800e545 	.word	0x0800e545
 800e48c:	0800e545 	.word	0x0800e545
 800e490:	0800e545 	.word	0x0800e545
 800e494:	0800e545 	.word	0x0800e545
 800e498:	0800e51d 	.word	0x0800e51d
 800e49c:	0800e545 	.word	0x0800e545
 800e4a0:	0800e545 	.word	0x0800e545
 800e4a4:	0800e545 	.word	0x0800e545
 800e4a8:	0800e545 	.word	0x0800e545
 800e4ac:	0800e545 	.word	0x0800e545
 800e4b0:	0800e545 	.word	0x0800e545
 800e4b4:	0800e545 	.word	0x0800e545
 800e4b8:	0800e531 	.word	0x0800e531
 800e4bc:	0800e545 	.word	0x0800e545
 800e4c0:	0800e545 	.word	0x0800e545
 800e4c4:	0800e545 	.word	0x0800e545
 800e4c8:	0800e545 	.word	0x0800e545
 800e4cc:	0800e545 	.word	0x0800e545
 800e4d0:	0800e545 	.word	0x0800e545
 800e4d4:	0800e545 	.word	0x0800e545
 800e4d8:	0800e54d 	.word	0x0800e54d
 800e4dc:	0800e545 	.word	0x0800e545
 800e4e0:	0800e545 	.word	0x0800e545
 800e4e4:	0800e545 	.word	0x0800e545
 800e4e8:	0800e545 	.word	0x0800e545
 800e4ec:	0800e545 	.word	0x0800e545
 800e4f0:	0800e545 	.word	0x0800e545
 800e4f4:	0800e545 	.word	0x0800e545
 800e4f8:	0800e54d 	.word	0x0800e54d
 800e4fc:	0800e545 	.word	0x0800e545
 800e500:	0800e545 	.word	0x0800e545
 800e504:	0800e545 	.word	0x0800e545
 800e508:	0800e545 	.word	0x0800e545
 800e50c:	0800e545 	.word	0x0800e545
 800e510:	0800e545 	.word	0x0800e545
 800e514:	0800e545 	.word	0x0800e545
 800e518:	0800e54d 	.word	0x0800e54d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e51c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e520:	3308      	adds	r3, #8
 800e522:	4618      	mov	r0, r3
 800e524:	f004 fe46 	bl	80131b4 <RCCEx_PLL2_Config>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800e52e:	e00e      	b.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e530:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e534:	3330      	adds	r3, #48	@ 0x30
 800e536:	4618      	mov	r0, r3
 800e538:	f004 fed4 	bl	80132e4 <RCCEx_PLL3_Config>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800e542:	e004      	b.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e544:	2301      	movs	r3, #1
 800e546:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e54a:	e000      	b.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800e54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e54e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10c      	bne.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800e556:	4b5f      	ldr	r3, [pc, #380]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e55c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e566:	4a5b      	ldr	r2, [pc, #364]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e568:	430b      	orrs	r3, r1
 800e56a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e56e:	e003      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e570:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e574:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f002 0304 	and.w	r3, r2, #4
 800e584:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800e588:	2300      	movs	r3, #0
 800e58a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e58e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800e592:	460b      	mov	r3, r1
 800e594:	4313      	orrs	r3, r2
 800e596:	d04e      	beq.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800e598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e59c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e59e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800e5a2:	d02c      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800e5a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800e5a8:	d825      	bhi.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800e5aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5ae:	d028      	beq.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e5b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5b4:	d81f      	bhi.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800e5b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5b8:	d025      	beq.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800e5ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5bc:	d81b      	bhi.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800e5be:	2b80      	cmp	r3, #128	@ 0x80
 800e5c0:	d00f      	beq.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800e5c2:	2b80      	cmp	r3, #128	@ 0x80
 800e5c4:	d817      	bhi.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d01f      	beq.n	800e60a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800e5ca:	2b40      	cmp	r3, #64	@ 0x40
 800e5cc:	d113      	bne.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e5ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5d2:	3308      	adds	r3, #8
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f004 fded 	bl	80131b4 <RCCEx_PLL2_Config>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800e5e0:	e014      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e5e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5e6:	3330      	adds	r3, #48	@ 0x30
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f004 fe7b 	bl	80132e4 <RCCEx_PLL3_Config>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800e5f4:	e00a      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e5fc:	e006      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800e5fe:	bf00      	nop
 800e600:	e004      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800e602:	bf00      	nop
 800e604:	e002      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800e606:	bf00      	nop
 800e608:	e000      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800e60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e60c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10c      	bne.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800e614:	4b2f      	ldr	r3, [pc, #188]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e61a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e61e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e624:	4a2b      	ldr	r2, [pc, #172]	@ (800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e626:	430b      	orrs	r3, r1
 800e628:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e62c:	e003      	b.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e62e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e632:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63e:	f002 0308 	and.w	r3, r2, #8
 800e642:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800e646:	2300      	movs	r3, #0
 800e648:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800e64c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800e650:	460b      	mov	r3, r1
 800e652:	4313      	orrs	r3, r2
 800e654:	d056      	beq.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800e656:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e65a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e65c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e660:	d031      	beq.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800e662:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e666:	d82a      	bhi.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e66c:	d02d      	beq.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800e66e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e672:	d824      	bhi.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e674:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e678:	d029      	beq.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800e67a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e67e:	d81e      	bhi.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e684:	d011      	beq.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800e686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e68a:	d818      	bhi.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d023      	beq.n	800e6d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800e690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e694:	d113      	bne.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e69a:	3308      	adds	r3, #8
 800e69c:	4618      	mov	r0, r3
 800e69e:	f004 fd89 	bl	80131b4 <RCCEx_PLL2_Config>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800e6a8:	e017      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e6aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e6ae:	3330      	adds	r3, #48	@ 0x30
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f004 fe17 	bl	80132e4 <RCCEx_PLL3_Config>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800e6bc:	e00d      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e6c4:	e009      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800e6c6:	bf00      	nop
 800e6c8:	e007      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800e6ca:	bf00      	nop
 800e6cc:	e005      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800e6ce:	bf00      	nop
 800e6d0:	e003      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800e6d2:	bf00      	nop
 800e6d4:	44020c00 	.word	0x44020c00
        break;
 800e6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10c      	bne.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800e6e2:	4bbb      	ldr	r3, [pc, #748]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e6e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e6e8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800e6ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e6f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e6f2:	4ab7      	ldr	r2, [pc, #732]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e6f4:	430b      	orrs	r3, r1
 800e6f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e6fa:	e003      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e700:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f002 0310 	and.w	r3, r2, #16
 800e710:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800e714:	2300      	movs	r3, #0
 800e716:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e71a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800e71e:	460b      	mov	r3, r1
 800e720:	4313      	orrs	r3, r2
 800e722:	d053      	beq.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800e724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e72a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e72e:	d031      	beq.n	800e794 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800e730:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e734:	d82a      	bhi.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e73a:	d02d      	beq.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e73c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e740:	d824      	bhi.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e742:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e746:	d029      	beq.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800e748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e74c:	d81e      	bhi.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e74e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e752:	d011      	beq.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e758:	d818      	bhi.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d020      	beq.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800e75e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e762:	d113      	bne.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e768:	3308      	adds	r3, #8
 800e76a:	4618      	mov	r0, r3
 800e76c:	f004 fd22 	bl	80131b4 <RCCEx_PLL2_Config>
 800e770:	4603      	mov	r3, r0
 800e772:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800e776:	e014      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e778:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e77c:	3330      	adds	r3, #48	@ 0x30
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 fdb0 	bl	80132e4 <RCCEx_PLL3_Config>
 800e784:	4603      	mov	r3, r0
 800e786:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800e78a:	e00a      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e792:	e006      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800e794:	bf00      	nop
 800e796:	e004      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800e798:	bf00      	nop
 800e79a:	e002      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800e79c:	bf00      	nop
 800e79e:	e000      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800e7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10c      	bne.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800e7aa:	4b89      	ldr	r3, [pc, #548]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e7ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e7b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e7b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ba:	4a85      	ldr	r2, [pc, #532]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e7bc:	430b      	orrs	r3, r1
 800e7be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e7c2:	e003      	b.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e7c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e7cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	f002 0320 	and.w	r3, r2, #32
 800e7d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e7e2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	d053      	beq.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800e7ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7f2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e7f6:	d031      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800e7f8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e7fc:	d82a      	bhi.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800e7fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e802:	d02d      	beq.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800e804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e808:	d824      	bhi.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800e80a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e80e:	d029      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800e810:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e814:	d81e      	bhi.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800e816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e81a:	d011      	beq.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e81c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e820:	d818      	bhi.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800e822:	2b00      	cmp	r3, #0
 800e824:	d020      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800e826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e82a:	d113      	bne.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e82c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e830:	3308      	adds	r3, #8
 800e832:	4618      	mov	r0, r3
 800e834:	f004 fcbe 	bl	80131b4 <RCCEx_PLL2_Config>
 800e838:	4603      	mov	r3, r0
 800e83a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800e83e:	e014      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e844:	3330      	adds	r3, #48	@ 0x30
 800e846:	4618      	mov	r0, r3
 800e848:	f004 fd4c 	bl	80132e4 <RCCEx_PLL3_Config>
 800e84c:	4603      	mov	r3, r0
 800e84e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800e852:	e00a      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e854:	2301      	movs	r3, #1
 800e856:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e85a:	e006      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800e85c:	bf00      	nop
 800e85e:	e004      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800e860:	bf00      	nop
 800e862:	e002      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800e864:	bf00      	nop
 800e866:	e000      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800e868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e86a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10c      	bne.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800e872:	4b57      	ldr	r3, [pc, #348]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e878:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800e87c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e882:	4a53      	ldr	r2, [pc, #332]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e884:	430b      	orrs	r3, r1
 800e886:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e88a:	e003      	b.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e88c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e890:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e8a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800e8aa:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	d053      	beq.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800e8b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800e8be:	d031      	beq.n	800e924 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800e8c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800e8c4:	d82a      	bhi.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800e8c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8ca:	d02d      	beq.n	800e928 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800e8cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8d0:	d824      	bhi.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800e8d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e8d6:	d029      	beq.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800e8d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e8dc:	d81e      	bhi.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800e8de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e8e2:	d011      	beq.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e8e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e8e8:	d818      	bhi.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d020      	beq.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e8ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e8f2:	d113      	bne.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e8f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f004 fc5a 	bl	80131b4 <RCCEx_PLL2_Config>
 800e900:	4603      	mov	r3, r0
 800e902:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800e906:	e014      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e90c:	3330      	adds	r3, #48	@ 0x30
 800e90e:	4618      	mov	r0, r3
 800e910:	f004 fce8 	bl	80132e4 <RCCEx_PLL3_Config>
 800e914:	4603      	mov	r3, r0
 800e916:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800e91a:	e00a      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e922:	e006      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800e924:	bf00      	nop
 800e926:	e004      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800e928:	bf00      	nop
 800e92a:	e002      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800e92c:	bf00      	nop
 800e92e:	e000      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800e930:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e932:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10c      	bne.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800e93a:	4b25      	ldr	r3, [pc, #148]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e93c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e940:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800e944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e94a:	4a21      	ldr	r2, [pc, #132]	@ (800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800e94c:	430b      	orrs	r3, r1
 800e94e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e952:	e003      	b.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e954:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e958:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e95c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e968:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800e96c:	2300      	movs	r3, #0
 800e96e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e972:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800e976:	460b      	mov	r3, r1
 800e978:	4313      	orrs	r3, r2
 800e97a:	d055      	beq.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800e97c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e982:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e986:	d033      	beq.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800e988:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e98c:	d82c      	bhi.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800e98e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e992:	d02f      	beq.n	800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800e994:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e998:	d826      	bhi.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800e99a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e99e:	d02b      	beq.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800e9a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e9a4:	d820      	bhi.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800e9a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e9aa:	d013      	beq.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e9ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e9b0:	d81a      	bhi.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d022      	beq.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800e9b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e9ba:	d115      	bne.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e9bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e9c0:	3308      	adds	r3, #8
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f004 fbf6 	bl	80131b4 <RCCEx_PLL2_Config>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800e9ce:	e016      	b.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800e9d0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e9d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e9d8:	3330      	adds	r3, #48	@ 0x30
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f004 fc82 	bl	80132e4 <RCCEx_PLL3_Config>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800e9e6:	e00a      	b.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e9ee:	e006      	b.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800e9f0:	bf00      	nop
 800e9f2:	e004      	b.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800e9f4:	bf00      	nop
 800e9f6:	e002      	b.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800e9f8:	bf00      	nop
 800e9fa:	e000      	b.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800e9fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10c      	bne.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800ea06:	4bbb      	ldr	r3, [pc, #748]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ea08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ea0c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ea10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ea14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea16:	4ab7      	ldr	r2, [pc, #732]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ea18:	430b      	orrs	r3, r1
 800ea1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ea1e:	e003      	b.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ea24:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800ea28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800ea34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800ea3e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800ea42:	460b      	mov	r3, r1
 800ea44:	4313      	orrs	r3, r2
 800ea46:	d053      	beq.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800ea48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ea4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea4e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ea52:	d031      	beq.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800ea54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ea58:	d82a      	bhi.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ea5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea5e:	d02d      	beq.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800ea60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea64:	d824      	bhi.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ea66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ea6a:	d029      	beq.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800ea6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ea70:	d81e      	bhi.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ea72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea76:	d011      	beq.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800ea78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea7c:	d818      	bhi.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d020      	beq.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800ea82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea86:	d113      	bne.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ea88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f004 fb90 	bl	80131b4 <RCCEx_PLL2_Config>
 800ea94:	4603      	mov	r3, r0
 800ea96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800ea9a:	e014      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ea9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eaa0:	3330      	adds	r3, #48	@ 0x30
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f004 fc1e 	bl	80132e4 <RCCEx_PLL3_Config>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800eaae:	e00a      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eab0:	2301      	movs	r3, #1
 800eab2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800eab6:	e006      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800eab8:	bf00      	nop
 800eaba:	e004      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800eabc:	bf00      	nop
 800eabe:	e002      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800eac0:	bf00      	nop
 800eac2:	e000      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800eac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eac6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10c      	bne.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800eace:	4b89      	ldr	r3, [pc, #548]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ead0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ead4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ead8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eadc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eade:	4a85      	ldr	r2, [pc, #532]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800eae0:	430b      	orrs	r3, r1
 800eae2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800eae6:	e003      	b.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eae8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800eaec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800eaf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800eafc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800eb00:	2300      	movs	r3, #0
 800eb02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800eb06:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	d055      	beq.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800eb10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb18:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800eb1c:	d031      	beq.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800eb1e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800eb22:	d82a      	bhi.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800eb24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb28:	d02d      	beq.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800eb2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb2e:	d824      	bhi.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800eb30:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800eb34:	d029      	beq.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800eb36:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800eb3a:	d81e      	bhi.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800eb3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb40:	d011      	beq.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800eb42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb46:	d818      	bhi.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d020      	beq.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800eb4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb50:	d113      	bne.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800eb52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eb56:	3308      	adds	r3, #8
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f004 fb2b 	bl	80131b4 <RCCEx_PLL2_Config>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800eb64:	e014      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800eb66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eb6a:	3330      	adds	r3, #48	@ 0x30
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f004 fbb9 	bl	80132e4 <RCCEx_PLL3_Config>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800eb78:	e00a      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800eb80:	e006      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800eb82:	bf00      	nop
 800eb84:	e004      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800eb86:	bf00      	nop
 800eb88:	e002      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800eb8a:	bf00      	nop
 800eb8c:	e000      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800eb8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10d      	bne.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800eb98:	4b56      	ldr	r3, [pc, #344]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800eb9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800eb9e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800eba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebaa:	4a52      	ldr	r2, [pc, #328]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ebac:	430b      	orrs	r3, r1
 800ebae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ebb2:	e003      	b.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ebb8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800ebbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ebc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ebcc:	2300      	movs	r3, #0
 800ebce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ebd2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	d044      	beq.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800ebdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ebe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe4:	2b05      	cmp	r3, #5
 800ebe6:	d823      	bhi.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800ebe8:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800ebea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebee:	bf00      	nop
 800ebf0:	0800ec39 	.word	0x0800ec39
 800ebf4:	0800ec09 	.word	0x0800ec09
 800ebf8:	0800ec1d 	.word	0x0800ec1d
 800ebfc:	0800ec39 	.word	0x0800ec39
 800ec00:	0800ec39 	.word	0x0800ec39
 800ec04:	0800ec39 	.word	0x0800ec39
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ec08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f004 fad0 	bl	80131b4 <RCCEx_PLL2_Config>
 800ec14:	4603      	mov	r3, r0
 800ec16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800ec1a:	e00e      	b.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ec1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ec20:	3330      	adds	r3, #48	@ 0x30
 800ec22:	4618      	mov	r0, r3
 800ec24:	f004 fb5e 	bl	80132e4 <RCCEx_PLL3_Config>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800ec2e:	e004      	b.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ec36:	e000      	b.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800ec38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10d      	bne.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800ec42:	4b2c      	ldr	r3, [pc, #176]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ec44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ec48:	f023 0107 	bic.w	r1, r3, #7
 800ec4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ec50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec54:	4a27      	ldr	r2, [pc, #156]	@ (800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ec56:	430b      	orrs	r3, r1
 800ec58:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ec5c:	e003      	b.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ec62:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800ec66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ec6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ec72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ec76:	2300      	movs	r3, #0
 800ec78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ec7c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ec80:	460b      	mov	r3, r1
 800ec82:	4313      	orrs	r3, r2
 800ec84:	d04f      	beq.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800ec86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ec8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec8e:	2b50      	cmp	r3, #80	@ 0x50
 800ec90:	d029      	beq.n	800ece6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800ec92:	2b50      	cmp	r3, #80	@ 0x50
 800ec94:	d823      	bhi.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ec96:	2b40      	cmp	r3, #64	@ 0x40
 800ec98:	d027      	beq.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800ec9a:	2b40      	cmp	r3, #64	@ 0x40
 800ec9c:	d81f      	bhi.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ec9e:	2b30      	cmp	r3, #48	@ 0x30
 800eca0:	d025      	beq.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800eca2:	2b30      	cmp	r3, #48	@ 0x30
 800eca4:	d81b      	bhi.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800eca6:	2b20      	cmp	r3, #32
 800eca8:	d00f      	beq.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800ecaa:	2b20      	cmp	r3, #32
 800ecac:	d817      	bhi.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d022      	beq.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800ecb2:	2b10      	cmp	r3, #16
 800ecb4:	d113      	bne.n	800ecde <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ecb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ecba:	3308      	adds	r3, #8
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f004 fa79 	bl	80131b4 <RCCEx_PLL2_Config>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800ecc8:	e017      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ecca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ecce:	3330      	adds	r3, #48	@ 0x30
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f004 fb07 	bl	80132e4 <RCCEx_PLL3_Config>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800ecdc:	e00d      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ece4:	e009      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800ece6:	bf00      	nop
 800ece8:	e007      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800ecea:	bf00      	nop
 800ecec:	e005      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800ecee:	bf00      	nop
 800ecf0:	e003      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800ecf2:	bf00      	nop
 800ecf4:	44020c00 	.word	0x44020c00
        break;
 800ecf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10d      	bne.n	800ed1e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800ed02:	4baf      	ldr	r3, [pc, #700]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ed04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ed08:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800ed0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ed10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed14:	4aaa      	ldr	r2, [pc, #680]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ed16:	430b      	orrs	r3, r1
 800ed18:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ed1c:	e003      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ed22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ed26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ed32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ed36:	2300      	movs	r3, #0
 800ed38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ed40:	460b      	mov	r3, r1
 800ed42:	4313      	orrs	r3, r2
 800ed44:	d055      	beq.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800ed46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ed4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed4e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ed52:	d031      	beq.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800ed54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ed58:	d82a      	bhi.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800ed5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ed5e:	d02d      	beq.n	800edbc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800ed60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ed64:	d824      	bhi.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800ed66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ed6a:	d029      	beq.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800ed6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ed70:	d81e      	bhi.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800ed72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed76:	d011      	beq.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800ed78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed7c:	d818      	bhi.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d020      	beq.n	800edc4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800ed82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed86:	d113      	bne.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ed88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ed8c:	3308      	adds	r3, #8
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f004 fa10 	bl	80131b4 <RCCEx_PLL2_Config>
 800ed94:	4603      	mov	r3, r0
 800ed96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800ed9a:	e014      	b.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ed9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eda0:	3330      	adds	r3, #48	@ 0x30
 800eda2:	4618      	mov	r0, r3
 800eda4:	f004 fa9e 	bl	80132e4 <RCCEx_PLL3_Config>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800edae:	e00a      	b.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800edb6:	e006      	b.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800edb8:	bf00      	nop
 800edba:	e004      	b.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800edbc:	bf00      	nop
 800edbe:	e002      	b.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800edc0:	bf00      	nop
 800edc2:	e000      	b.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800edc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10d      	bne.n	800edea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800edce:	4b7c      	ldr	r3, [pc, #496]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800edd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800edd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800edd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ede0:	4a77      	ldr	r2, [pc, #476]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ede2:	430b      	orrs	r3, r1
 800ede4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ede8:	e003      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800edee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800edf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800edf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800edfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ee02:	2300      	movs	r3, #0
 800ee04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ee08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	d03d      	beq.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800ee12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee1e:	d01b      	beq.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800ee20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee24:	d814      	bhi.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800ee26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee2a:	d017      	beq.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800ee2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee30:	d80e      	bhi.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d014      	beq.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800ee36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee3a:	d109      	bne.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ee3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee40:	3330      	adds	r3, #48	@ 0x30
 800ee42:	4618      	mov	r0, r3
 800ee44:	f004 fa4e 	bl	80132e4 <RCCEx_PLL3_Config>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800ee4e:	e008      	b.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ee56:	e004      	b.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ee58:	bf00      	nop
 800ee5a:	e002      	b.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ee5c:	bf00      	nop
 800ee5e:	e000      	b.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ee60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10d      	bne.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800ee6a:	4b55      	ldr	r3, [pc, #340]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ee6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ee70:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ee74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee7c:	4a50      	ldr	r2, [pc, #320]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ee7e:	430b      	orrs	r3, r1
 800ee80:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ee84:	e003      	b.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ee8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ee8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee96:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ee9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eea4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800eea8:	460b      	mov	r3, r1
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	d03d      	beq.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800eeae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eeb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eeb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800eeba:	d01b      	beq.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800eebc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800eec0:	d814      	bhi.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800eec2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eec6:	d017      	beq.n	800eef8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800eec8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800eecc:	d80e      	bhi.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d014      	beq.n	800eefc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800eed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eed6:	d109      	bne.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800eed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eedc:	3330      	adds	r3, #48	@ 0x30
 800eede:	4618      	mov	r0, r3
 800eee0:	f004 fa00 	bl	80132e4 <RCCEx_PLL3_Config>
 800eee4:	4603      	mov	r3, r0
 800eee6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800eeea:	e008      	b.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eeec:	2301      	movs	r3, #1
 800eeee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800eef2:	e004      	b.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800eef4:	bf00      	nop
 800eef6:	e002      	b.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800eef8:	bf00      	nop
 800eefa:	e000      	b.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800eefc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eefe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10d      	bne.n	800ef22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800ef06:	4b2e      	ldr	r3, [pc, #184]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ef08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ef0c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800ef10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef18:	4a29      	ldr	r2, [pc, #164]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ef1a:	430b      	orrs	r3, r1
 800ef1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ef20:	e003      	b.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ef26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ef2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef32:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ef36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ef40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ef44:	460b      	mov	r3, r1
 800ef46:	4313      	orrs	r3, r2
 800ef48:	d040      	beq.n	800efcc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800ef4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ef52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ef56:	d01b      	beq.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800ef58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ef5c:	d814      	bhi.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800ef5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef62:	d017      	beq.n	800ef94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ef64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef68:	d80e      	bhi.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d014      	beq.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ef6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ef72:	d109      	bne.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ef74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ef78:	3330      	adds	r3, #48	@ 0x30
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f004 f9b2 	bl	80132e4 <RCCEx_PLL3_Config>
 800ef80:	4603      	mov	r3, r0
 800ef82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800ef86:	e008      	b.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ef8e:	e004      	b.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800ef90:	bf00      	nop
 800ef92:	e002      	b.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800ef94:	bf00      	nop
 800ef96:	e000      	b.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800ef98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d110      	bne.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800efa2:	4b07      	ldr	r3, [pc, #28]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800efa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800efa8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800efac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800efb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800efb4:	4a02      	ldr	r2, [pc, #8]	@ (800efc0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800efb6:	430b      	orrs	r3, r1
 800efb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800efbc:	e006      	b.n	800efcc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800efbe:	bf00      	nop
 800efc0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efc4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800efc8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800efcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	2100      	movs	r1, #0
 800efd6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800efda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800efde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800efe2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800efe6:	460b      	mov	r3, r1
 800efe8:	4313      	orrs	r3, r2
 800efea:	d03d      	beq.n	800f068 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800efec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800eff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eff4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800eff8:	d01b      	beq.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800effa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800effe:	d814      	bhi.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800f000:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f004:	d017      	beq.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800f006:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f00a:	d80e      	bhi.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d014      	beq.n	800f03a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800f010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f014:	d109      	bne.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f01a:	3330      	adds	r3, #48	@ 0x30
 800f01c:	4618      	mov	r0, r3
 800f01e:	f004 f961 	bl	80132e4 <RCCEx_PLL3_Config>
 800f022:	4603      	mov	r3, r0
 800f024:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800f028:	e008      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f030:	e004      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800f032:	bf00      	nop
 800f034:	e002      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800f036:	bf00      	nop
 800f038:	e000      	b.n	800f03c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800f03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f03c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f040:	2b00      	cmp	r3, #0
 800f042:	d10d      	bne.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800f044:	4bbe      	ldr	r3, [pc, #760]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f046:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f04a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f04e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f056:	4aba      	ldr	r2, [pc, #744]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f058:	430b      	orrs	r3, r1
 800f05a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800f05e:	e003      	b.n	800f068 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f060:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f064:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800f068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f078:	2300      	movs	r3, #0
 800f07a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f07e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800f082:	460b      	mov	r3, r1
 800f084:	4313      	orrs	r3, r2
 800f086:	d035      	beq.n	800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800f088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f08c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f094:	d015      	beq.n	800f0c2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800f096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f09a:	d80e      	bhi.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d012      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800f0a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f0a4:	d109      	bne.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f0a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f0aa:	3330      	adds	r3, #48	@ 0x30
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f004 f919 	bl	80132e4 <RCCEx_PLL3_Config>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800f0b8:	e006      	b.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f0c0:	e002      	b.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800f0c2:	bf00      	nop
 800f0c4:	e000      	b.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800f0c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d10d      	bne.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800f0d0:	4b9b      	ldr	r3, [pc, #620]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f0d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f0d6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800f0da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f0de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0e2:	4a97      	ldr	r2, [pc, #604]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f0e4:	430b      	orrs	r3, r1
 800f0e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800f0ea:	e003      	b.n	800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f0f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f0f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800f102:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f106:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f10a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f10e:	460b      	mov	r3, r1
 800f110:	4313      	orrs	r3, r2
 800f112:	d00e      	beq.n	800f132 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800f114:	4b8a      	ldr	r3, [pc, #552]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f116:	69db      	ldr	r3, [r3, #28]
 800f118:	4a89      	ldr	r2, [pc, #548]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f11a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f11e:	61d3      	str	r3, [r2, #28]
 800f120:	4b87      	ldr	r3, [pc, #540]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f122:	69d9      	ldr	r1, [r3, #28]
 800f124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f128:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800f12c:	4a84      	ldr	r2, [pc, #528]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f12e:	430b      	orrs	r3, r1
 800f130:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f13e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f142:	2300      	movs	r3, #0
 800f144:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f148:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f14c:	460b      	mov	r3, r1
 800f14e:	4313      	orrs	r3, r2
 800f150:	d055      	beq.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800f152:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f15a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800f15e:	d031      	beq.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800f160:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800f164:	d82a      	bhi.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800f166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f16a:	d02d      	beq.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800f16c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f170:	d824      	bhi.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800f172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f176:	d029      	beq.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800f178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f17c:	d81e      	bhi.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800f17e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f182:	d011      	beq.n	800f1a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800f184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f188:	d818      	bhi.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d020      	beq.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800f18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f192:	d113      	bne.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f198:	3308      	adds	r3, #8
 800f19a:	4618      	mov	r0, r3
 800f19c:	f004 f80a 	bl	80131b4 <RCCEx_PLL2_Config>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800f1a6:	e014      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f1a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f1ac:	3330      	adds	r3, #48	@ 0x30
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f004 f898 	bl	80132e4 <RCCEx_PLL3_Config>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800f1ba:	e00a      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f1c2:	e006      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800f1c4:	bf00      	nop
 800f1c6:	e004      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800f1c8:	bf00      	nop
 800f1ca:	e002      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800f1cc:	bf00      	nop
 800f1ce:	e000      	b.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800f1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10d      	bne.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800f1da:	4b59      	ldr	r3, [pc, #356]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f1dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f1e0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800f1e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f1e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f1ec:	4a54      	ldr	r2, [pc, #336]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f1ee:	430b      	orrs	r3, r1
 800f1f0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f1f4:	e003      	b.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f1fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f1fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f20a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f20e:	2300      	movs	r3, #0
 800f210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f214:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800f218:	460b      	mov	r3, r1
 800f21a:	4313      	orrs	r3, r2
 800f21c:	d055      	beq.n	800f2ca <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800f21e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f226:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f22a:	d031      	beq.n	800f290 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800f22c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f230:	d82a      	bhi.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800f232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f236:	d02d      	beq.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800f238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f23c:	d824      	bhi.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800f23e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f242:	d029      	beq.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800f244:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f248:	d81e      	bhi.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800f24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f24e:	d011      	beq.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800f250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f254:	d818      	bhi.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800f256:	2b00      	cmp	r3, #0
 800f258:	d020      	beq.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800f25a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f25e:	d113      	bne.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f260:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f264:	3308      	adds	r3, #8
 800f266:	4618      	mov	r0, r3
 800f268:	f003 ffa4 	bl	80131b4 <RCCEx_PLL2_Config>
 800f26c:	4603      	mov	r3, r0
 800f26e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800f272:	e014      	b.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f274:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f278:	3330      	adds	r3, #48	@ 0x30
 800f27a:	4618      	mov	r0, r3
 800f27c:	f004 f832 	bl	80132e4 <RCCEx_PLL3_Config>
 800f280:	4603      	mov	r3, r0
 800f282:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800f286:	e00a      	b.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f288:	2301      	movs	r3, #1
 800f28a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f28e:	e006      	b.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800f290:	bf00      	nop
 800f292:	e004      	b.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800f294:	bf00      	nop
 800f296:	e002      	b.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800f298:	bf00      	nop
 800f29a:	e000      	b.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800f29c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f29e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10d      	bne.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800f2a6:	4b26      	ldr	r3, [pc, #152]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f2a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f2ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800f2b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f2b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f2b8:	4a21      	ldr	r2, [pc, #132]	@ (800f340 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f2c0:	e003      	b.n	800f2ca <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f2c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800f2ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800f2d8:	f003 0320 	and.w	r3, r3, #32
 800f2dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f2e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	d057      	beq.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800f2ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f2ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f2f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f2f6:	d033      	beq.n	800f360 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800f2f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f2fc:	d82c      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800f2fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f302:	d02f      	beq.n	800f364 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800f304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f308:	d826      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800f30a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f30e:	d02b      	beq.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800f310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f314:	d820      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800f316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f31a:	d013      	beq.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f31c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f320:	d81a      	bhi.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800f322:	2b00      	cmp	r3, #0
 800f324:	d022      	beq.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800f326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f32a:	d115      	bne.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f32c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f330:	3308      	adds	r3, #8
 800f332:	4618      	mov	r0, r3
 800f334:	f003 ff3e 	bl	80131b4 <RCCEx_PLL2_Config>
 800f338:	4603      	mov	r3, r0
 800f33a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800f33e:	e016      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800f340:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f348:	3330      	adds	r3, #48	@ 0x30
 800f34a:	4618      	mov	r0, r3
 800f34c:	f003 ffca 	bl	80132e4 <RCCEx_PLL3_Config>
 800f350:	4603      	mov	r3, r0
 800f352:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800f356:	e00a      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f35e:	e006      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800f360:	bf00      	nop
 800f362:	e004      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800f364:	bf00      	nop
 800f366:	e002      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800f368:	bf00      	nop
 800f36a:	e000      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800f36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f36e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10d      	bne.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800f376:	4bbb      	ldr	r3, [pc, #748]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f378:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f37c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800f380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f388:	4ab6      	ldr	r2, [pc, #728]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f38a:	430b      	orrs	r3, r1
 800f38c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f390:	e003      	b.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f392:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f396:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800f39a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800f3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f3b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	d055      	beq.n	800f466 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800f3ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f3be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f3c2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800f3c6:	d031      	beq.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800f3c8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800f3cc:	d82a      	bhi.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800f3ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f3d2:	d02d      	beq.n	800f430 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800f3d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f3d8:	d824      	bhi.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800f3da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f3de:	d029      	beq.n	800f434 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800f3e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f3e4:	d81e      	bhi.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800f3e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f3ea:	d011      	beq.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800f3ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f3f0:	d818      	bhi.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d020      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800f3f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3fa:	d113      	bne.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f3fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f400:	3308      	adds	r3, #8
 800f402:	4618      	mov	r0, r3
 800f404:	f003 fed6 	bl	80131b4 <RCCEx_PLL2_Config>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800f40e:	e014      	b.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f414:	3330      	adds	r3, #48	@ 0x30
 800f416:	4618      	mov	r0, r3
 800f418:	f003 ff64 	bl	80132e4 <RCCEx_PLL3_Config>
 800f41c:	4603      	mov	r3, r0
 800f41e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800f422:	e00a      	b.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f42a:	e006      	b.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800f42c:	bf00      	nop
 800f42e:	e004      	b.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800f430:	bf00      	nop
 800f432:	e002      	b.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800f434:	bf00      	nop
 800f436:	e000      	b.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800f438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f43a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d10d      	bne.n	800f45e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800f442:	4b88      	ldr	r3, [pc, #544]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f444:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f448:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800f44c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f454:	4a83      	ldr	r2, [pc, #524]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f456:	430b      	orrs	r3, r1
 800f458:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f45c:	e003      	b.n	800f466 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f45e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f462:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800f466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	2100      	movs	r1, #0
 800f470:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800f474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f478:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f47c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f480:	460b      	mov	r3, r1
 800f482:	4313      	orrs	r3, r2
 800f484:	d055      	beq.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800f486:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f48a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f48e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f492:	d031      	beq.n	800f4f8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800f494:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f498:	d82a      	bhi.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800f49a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f49e:	d02d      	beq.n	800f4fc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800f4a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f4a4:	d824      	bhi.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800f4a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f4aa:	d029      	beq.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800f4ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f4b0:	d81e      	bhi.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800f4b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f4b6:	d011      	beq.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800f4b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f4bc:	d818      	bhi.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d020      	beq.n	800f504 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800f4c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4c6:	d113      	bne.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f4c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f4cc:	3308      	adds	r3, #8
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f003 fe70 	bl	80131b4 <RCCEx_PLL2_Config>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800f4da:	e014      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f4dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f4e0:	3330      	adds	r3, #48	@ 0x30
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f003 fefe 	bl	80132e4 <RCCEx_PLL3_Config>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800f4ee:	e00a      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f4f6:	e006      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800f4f8:	bf00      	nop
 800f4fa:	e004      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800f4fc:	bf00      	nop
 800f4fe:	e002      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800f500:	bf00      	nop
 800f502:	e000      	b.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800f504:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10d      	bne.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800f50e:	4b55      	ldr	r3, [pc, #340]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f510:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f514:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800f518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f51c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f520:	4a50      	ldr	r2, [pc, #320]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f522:	430b      	orrs	r3, r1
 800f524:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f528:	e003      	b.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f52a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f52e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800f532:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	2100      	movs	r1, #0
 800f53c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800f540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f548:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f54c:	460b      	mov	r3, r1
 800f54e:	4313      	orrs	r3, r2
 800f550:	d055      	beq.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800f552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f556:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f55a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f55e:	d031      	beq.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800f560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f564:	d82a      	bhi.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800f566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f56a:	d02d      	beq.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800f56c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f570:	d824      	bhi.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800f572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f576:	d029      	beq.n	800f5cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800f578:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f57c:	d81e      	bhi.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800f57e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f582:	d011      	beq.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800f584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f588:	d818      	bhi.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d020      	beq.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800f58e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f592:	d113      	bne.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f598:	3308      	adds	r3, #8
 800f59a:	4618      	mov	r0, r3
 800f59c:	f003 fe0a 	bl	80131b4 <RCCEx_PLL2_Config>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800f5a6:	e014      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f5a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f5ac:	3330      	adds	r3, #48	@ 0x30
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f003 fe98 	bl	80132e4 <RCCEx_PLL3_Config>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800f5ba:	e00a      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5bc:	2301      	movs	r3, #1
 800f5be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f5c2:	e006      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800f5c4:	bf00      	nop
 800f5c6:	e004      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800f5c8:	bf00      	nop
 800f5ca:	e002      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800f5cc:	bf00      	nop
 800f5ce:	e000      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800f5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10d      	bne.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800f5da:	4b22      	ldr	r3, [pc, #136]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f5dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f5e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f5e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f5e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f5ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f5ee:	430b      	orrs	r3, r1
 800f5f0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800f5f4:	e003      	b.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f5fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f5fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f606:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f60a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f60e:	2300      	movs	r3, #0
 800f610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f614:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f618:	460b      	mov	r3, r1
 800f61a:	4313      	orrs	r3, r2
 800f61c:	d055      	beq.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800f61e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f62a:	d035      	beq.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800f62c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f630:	d82e      	bhi.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800f632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f636:	d031      	beq.n	800f69c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800f638:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f63c:	d828      	bhi.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800f63e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f642:	d01b      	beq.n	800f67c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800f644:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f648:	d822      	bhi.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d003      	beq.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800f64e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f652:	d009      	beq.n	800f668 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800f654:	e01c      	b.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f656:	4b03      	ldr	r3, [pc, #12]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f65a:	4a02      	ldr	r2, [pc, #8]	@ (800f664 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800f65c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f660:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f662:	e01c      	b.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800f664:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f66c:	3308      	adds	r3, #8
 800f66e:	4618      	mov	r0, r3
 800f670:	f003 fda0 	bl	80131b4 <RCCEx_PLL2_Config>
 800f674:	4603      	mov	r3, r0
 800f676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f67a:	e010      	b.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f67c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f680:	3330      	adds	r3, #48	@ 0x30
 800f682:	4618      	mov	r0, r3
 800f684:	f003 fe2e 	bl	80132e4 <RCCEx_PLL3_Config>
 800f688:	4603      	mov	r3, r0
 800f68a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f68e:	e006      	b.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f696:	e002      	b.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800f698:	bf00      	nop
 800f69a:	e000      	b.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800f69c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f69e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d10d      	bne.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800f6a6:	4bc3      	ldr	r3, [pc, #780]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f6a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f6ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800f6b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f6b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f6b8:	4abe      	ldr	r2, [pc, #760]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f6ba:	430b      	orrs	r3, r1
 800f6bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800f6c0:	e003      	b.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f6c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800f6ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f6d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f6e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	d051      	beq.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800f6ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f6ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f6f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f6f6:	d033      	beq.n	800f760 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800f6f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f6fc:	d82c      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800f6fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800f702:	d02d      	beq.n	800f760 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800f704:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800f708:	d826      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800f70a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f70e:	d019      	beq.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800f710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f714:	d820      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800f716:	2b00      	cmp	r3, #0
 800f718:	d003      	beq.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800f71a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f71e:	d007      	beq.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800f720:	e01a      	b.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f722:	4ba4      	ldr	r3, [pc, #656]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f726:	4aa3      	ldr	r2, [pc, #652]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f72c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800f72e:	e018      	b.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f734:	3308      	adds	r3, #8
 800f736:	4618      	mov	r0, r3
 800f738:	f003 fd3c 	bl	80131b4 <RCCEx_PLL2_Config>
 800f73c:	4603      	mov	r3, r0
 800f73e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800f742:	e00e      	b.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800f744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f748:	3330      	adds	r3, #48	@ 0x30
 800f74a:	4618      	mov	r0, r3
 800f74c:	f003 fdca 	bl	80132e4 <RCCEx_PLL3_Config>
 800f750:	4603      	mov	r3, r0
 800f752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800f756:	e004      	b.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f758:	2301      	movs	r3, #1
 800f75a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f75e:	e000      	b.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800f760:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f762:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f766:	2b00      	cmp	r3, #0
 800f768:	d10d      	bne.n	800f786 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800f76a:	4b92      	ldr	r3, [pc, #584]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f76c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f770:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800f774:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f778:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f77c:	4a8d      	ldr	r2, [pc, #564]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f77e:	430b      	orrs	r3, r1
 800f780:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800f784:	e003      	b.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f786:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f78a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800f78e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f796:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f79a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f79c:	2300      	movs	r3, #0
 800f79e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f7a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	d032      	beq.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800f7aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	d80f      	bhi.n	800f7d6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d211      	bcs.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d911      	bls.n	800f7e2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	d109      	bne.n	800f7d6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800f7c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7c6:	3308      	adds	r3, #8
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f003 fcf3 	bl	80131b4 <RCCEx_PLL2_Config>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f7d4:	e006      	b.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f7dc:	e002      	b.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800f7de:	bf00      	nop
 800f7e0:	e000      	b.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800f7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10d      	bne.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800f7ec:	4b71      	ldr	r3, [pc, #452]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f7ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f7f2:	f023 0107 	bic.w	r1, r3, #7
 800f7f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f7fe:	4a6d      	ldr	r2, [pc, #436]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f800:	430b      	orrs	r3, r1
 800f802:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800f806:	e003      	b.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f808:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f80c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800f810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	2100      	movs	r1, #0
 800f81a:	6739      	str	r1, [r7, #112]	@ 0x70
 800f81c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f820:	677b      	str	r3, [r7, #116]	@ 0x74
 800f822:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f826:	460b      	mov	r3, r1
 800f828:	4313      	orrs	r3, r2
 800f82a:	d024      	beq.n	800f876 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800f82c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f834:	2b00      	cmp	r3, #0
 800f836:	d005      	beq.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800f838:	2b08      	cmp	r3, #8
 800f83a:	d005      	beq.n	800f848 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f83c:	2301      	movs	r3, #1
 800f83e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f842:	e002      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800f844:	bf00      	nop
 800f846:	e000      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800f848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f84a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10d      	bne.n	800f86e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800f852:	4b58      	ldr	r3, [pc, #352]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f858:	f023 0108 	bic.w	r1, r3, #8
 800f85c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f864:	4a53      	ldr	r2, [pc, #332]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f866:	430b      	orrs	r3, r1
 800f868:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800f86c:	e003      	b.n	800f876 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f86e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f872:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800f882:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f884:	2300      	movs	r3, #0
 800f886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f888:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f88c:	460b      	mov	r3, r1
 800f88e:	4313      	orrs	r3, r2
 800f890:	f000 80b9 	beq.w	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800f894:	4b48      	ldr	r3, [pc, #288]	@ (800f9b8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800f896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f898:	4a47      	ldr	r2, [pc, #284]	@ (800f9b8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800f89a:	f043 0301 	orr.w	r3, r3, #1
 800f89e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f8a0:	f7fd fa1c 	bl	800ccdc <HAL_GetTick>
 800f8a4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800f8a8:	e00b      	b.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f8aa:	f7fd fa17 	bl	800ccdc <HAL_GetTick>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	d903      	bls.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800f8ba:	2303      	movs	r3, #3
 800f8bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800f8c0:	e005      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800f8c2:	4b3d      	ldr	r3, [pc, #244]	@ (800f9b8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800f8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c6:	f003 0301 	and.w	r3, r3, #1
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d0ed      	beq.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800f8ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f040 8093 	bne.w	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f8d8:	4b36      	ldr	r3, [pc, #216]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f8da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f8de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f8e2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800f8e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d023      	beq.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800f8ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f8f2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800f8f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d01b      	beq.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f8fe:	4b2d      	ldr	r3, [pc, #180]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f908:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f90c:	4b29      	ldr	r3, [pc, #164]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f90e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f912:	4a28      	ldr	r2, [pc, #160]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f918:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f91c:	4b25      	ldr	r3, [pc, #148]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f91e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f922:	4a24      	ldr	r2, [pc, #144]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f928:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f92c:	4a21      	ldr	r2, [pc, #132]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f92e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800f932:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f936:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800f93a:	f003 0301 	and.w	r3, r3, #1
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d019      	beq.n	800f976 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f942:	f7fd f9cb 	bl	800ccdc <HAL_GetTick>
 800f946:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f94a:	e00d      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f94c:	f7fd f9c6 	bl	800ccdc <HAL_GetTick>
 800f950:	4602      	mov	r2, r0
 800f952:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800f956:	1ad2      	subs	r2, r2, r3
 800f958:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d903      	bls.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800f960:	2303      	movs	r3, #3
 800f962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800f966:	e006      	b.n	800f976 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f968:	4b12      	ldr	r3, [pc, #72]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f96a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f96e:	f003 0302 	and.w	r3, r3, #2
 800f972:	2b00      	cmp	r3, #0
 800f974:	d0ea      	beq.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800f976:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d13a      	bne.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800f97e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f982:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800f986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f98a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f98e:	d115      	bne.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800f990:	4b08      	ldr	r3, [pc, #32]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f992:	69db      	ldr	r3, [r3, #28]
 800f994:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800f998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f99c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800f9a0:	091b      	lsrs	r3, r3, #4
 800f9a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f9a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800f9aa:	4a02      	ldr	r2, [pc, #8]	@ (800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800f9ac:	430b      	orrs	r3, r1
 800f9ae:	61d3      	str	r3, [r2, #28]
 800f9b0:	e00a      	b.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800f9b2:	bf00      	nop
 800f9b4:	44020c00 	.word	0x44020c00
 800f9b8:	44020800 	.word	0x44020800
 800f9bc:	4b9f      	ldr	r3, [pc, #636]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800f9be:	69db      	ldr	r3, [r3, #28]
 800f9c0:	4a9e      	ldr	r2, [pc, #632]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800f9c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f9c6:	61d3      	str	r3, [r2, #28]
 800f9c8:	4b9c      	ldr	r3, [pc, #624]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800f9ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f9ce:	4a9b      	ldr	r2, [pc, #620]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800f9d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f9d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800f9d8:	4b98      	ldr	r3, [pc, #608]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800f9da:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800f9de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f9e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800f9e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f9ea:	4a94      	ldr	r2, [pc, #592]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800f9ec:	430b      	orrs	r3, r1
 800f9ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800f9f2:	e008      	b.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f9f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800f9f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800f9fc:	e003      	b.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fa02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fa06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800fa12:	663b      	str	r3, [r7, #96]	@ 0x60
 800fa14:	2300      	movs	r3, #0
 800fa16:	667b      	str	r3, [r7, #100]	@ 0x64
 800fa18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	d035      	beq.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800fa22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fa2a:	2b30      	cmp	r3, #48	@ 0x30
 800fa2c:	d014      	beq.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800fa2e:	2b30      	cmp	r3, #48	@ 0x30
 800fa30:	d80e      	bhi.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800fa32:	2b20      	cmp	r3, #32
 800fa34:	d012      	beq.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800fa36:	2b20      	cmp	r3, #32
 800fa38:	d80a      	bhi.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d010      	beq.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800fa3e:	2b10      	cmp	r3, #16
 800fa40:	d106      	bne.n	800fa50 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa42:	4b7e      	ldr	r3, [pc, #504]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa46:	4a7d      	ldr	r2, [pc, #500]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fa48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa4c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800fa4e:	e008      	b.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fa56:	e004      	b.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800fa58:	bf00      	nop
 800fa5a:	e002      	b.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800fa5c:	bf00      	nop
 800fa5e:	e000      	b.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800fa60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d10d      	bne.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800fa6a:	4b74      	ldr	r3, [pc, #464]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fa6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fa70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800fa74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa78:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fa7c:	4a6f      	ldr	r2, [pc, #444]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fa7e:	430b      	orrs	r3, r1
 800fa80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fa84:	e003      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fa8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800fa8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800fa9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800faa0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800faa4:	460b      	mov	r3, r1
 800faa6:	4313      	orrs	r3, r2
 800faa8:	d033      	beq.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800faaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800faae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d002      	beq.n	800fabc <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800fab6:	2b40      	cmp	r3, #64	@ 0x40
 800fab8:	d007      	beq.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800faba:	e010      	b.n	800fade <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fabc:	4b5f      	ldr	r3, [pc, #380]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fac0:	4a5e      	ldr	r2, [pc, #376]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fac6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800fac8:	e00d      	b.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800faca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800face:	3308      	adds	r3, #8
 800fad0:	4618      	mov	r0, r3
 800fad2:	f003 fb6f 	bl	80131b4 <RCCEx_PLL2_Config>
 800fad6:	4603      	mov	r3, r0
 800fad8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800fadc:	e003      	b.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800fade:	2301      	movs	r3, #1
 800fae0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fae6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800faea:	2b00      	cmp	r3, #0
 800faec:	d10d      	bne.n	800fb0a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800faee:	4b53      	ldr	r3, [pc, #332]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800faf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800faf4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800faf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fafc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fb00:	4a4e      	ldr	r2, [pc, #312]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fb02:	430b      	orrs	r3, r1
 800fb04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fb08:	e003      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fb0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800fb12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800fb1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb20:	2300      	movs	r3, #0
 800fb22:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb24:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800fb28:	460b      	mov	r3, r1
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	d033      	beq.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800fb2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb32:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d002      	beq.n	800fb40 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800fb3a:	2b80      	cmp	r3, #128	@ 0x80
 800fb3c:	d007      	beq.n	800fb4e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800fb3e:	e010      	b.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb40:	4b3e      	ldr	r3, [pc, #248]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb44:	4a3d      	ldr	r2, [pc, #244]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fb46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fb4a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800fb4c:	e00d      	b.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fb4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb52:	3308      	adds	r3, #8
 800fb54:	4618      	mov	r0, r3
 800fb56:	f003 fb2d 	bl	80131b4 <RCCEx_PLL2_Config>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800fb60:	e003      	b.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fb68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d10d      	bne.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800fb72:	4b32      	ldr	r3, [pc, #200]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fb74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fb78:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800fb7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800fb84:	4a2d      	ldr	r2, [pc, #180]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fb86:	430b      	orrs	r3, r1
 800fb88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fb8c:	e003      	b.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fb92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800fb96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800fba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fba4:	2300      	movs	r3, #0
 800fba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fba8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fbac:	460b      	mov	r3, r1
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	d04a      	beq.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800fbb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fbb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fbba:	2b04      	cmp	r3, #4
 800fbbc:	d827      	bhi.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800fbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800fbc4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800fbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc4:	0800fbd9 	.word	0x0800fbd9
 800fbc8:	0800fbe7 	.word	0x0800fbe7
 800fbcc:	0800fbfb 	.word	0x0800fbfb
 800fbd0:	0800fc17 	.word	0x0800fc17
 800fbd4:	0800fc17 	.word	0x0800fc17
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbd8:	4b18      	ldr	r3, [pc, #96]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fbda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbdc:	4a17      	ldr	r2, [pc, #92]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fbde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fbe2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800fbe4:	e018      	b.n	800fc18 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fbe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fbea:	3308      	adds	r3, #8
 800fbec:	4618      	mov	r0, r3
 800fbee:	f003 fae1 	bl	80131b4 <RCCEx_PLL2_Config>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800fbf8:	e00e      	b.n	800fc18 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fbfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fbfe:	3330      	adds	r3, #48	@ 0x30
 800fc00:	4618      	mov	r0, r3
 800fc02:	f003 fb6f 	bl	80132e4 <RCCEx_PLL3_Config>
 800fc06:	4603      	mov	r3, r0
 800fc08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800fc0c:	e004      	b.n	800fc18 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fc14:	e000      	b.n	800fc18 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800fc16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10f      	bne.n	800fc40 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800fc20:	4b06      	ldr	r3, [pc, #24]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fc22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc26:	f023 0107 	bic.w	r1, r3, #7
 800fc2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc32:	4a02      	ldr	r2, [pc, #8]	@ (800fc3c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800fc34:	430b      	orrs	r3, r1
 800fc36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fc3a:	e005      	b.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800fc3c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fc44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800fc48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800fc54:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc56:	2300      	movs	r3, #0
 800fc58:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4313      	orrs	r3, r2
 800fc62:	f000 8081 	beq.w	800fd68 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800fc66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fc6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc6e:	2b20      	cmp	r3, #32
 800fc70:	d85f      	bhi.n	800fd32 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800fc72:	a201      	add	r2, pc, #4	@ (adr r2, 800fc78 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800fc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc78:	0800fcfd 	.word	0x0800fcfd
 800fc7c:	0800fd33 	.word	0x0800fd33
 800fc80:	0800fd33 	.word	0x0800fd33
 800fc84:	0800fd33 	.word	0x0800fd33
 800fc88:	0800fd33 	.word	0x0800fd33
 800fc8c:	0800fd33 	.word	0x0800fd33
 800fc90:	0800fd33 	.word	0x0800fd33
 800fc94:	0800fd33 	.word	0x0800fd33
 800fc98:	0800fd0b 	.word	0x0800fd0b
 800fc9c:	0800fd33 	.word	0x0800fd33
 800fca0:	0800fd33 	.word	0x0800fd33
 800fca4:	0800fd33 	.word	0x0800fd33
 800fca8:	0800fd33 	.word	0x0800fd33
 800fcac:	0800fd33 	.word	0x0800fd33
 800fcb0:	0800fd33 	.word	0x0800fd33
 800fcb4:	0800fd33 	.word	0x0800fd33
 800fcb8:	0800fd1f 	.word	0x0800fd1f
 800fcbc:	0800fd33 	.word	0x0800fd33
 800fcc0:	0800fd33 	.word	0x0800fd33
 800fcc4:	0800fd33 	.word	0x0800fd33
 800fcc8:	0800fd33 	.word	0x0800fd33
 800fccc:	0800fd33 	.word	0x0800fd33
 800fcd0:	0800fd33 	.word	0x0800fd33
 800fcd4:	0800fd33 	.word	0x0800fd33
 800fcd8:	0800fd3b 	.word	0x0800fd3b
 800fcdc:	0800fd33 	.word	0x0800fd33
 800fce0:	0800fd33 	.word	0x0800fd33
 800fce4:	0800fd33 	.word	0x0800fd33
 800fce8:	0800fd33 	.word	0x0800fd33
 800fcec:	0800fd33 	.word	0x0800fd33
 800fcf0:	0800fd33 	.word	0x0800fd33
 800fcf4:	0800fd33 	.word	0x0800fd33
 800fcf8:	0800fd3b 	.word	0x0800fd3b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcfc:	4bab      	ldr	r3, [pc, #684]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd00:	4aaa      	ldr	r2, [pc, #680]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fd02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800fd08:	e018      	b.n	800fd3c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fd0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd0e:	3308      	adds	r3, #8
 800fd10:	4618      	mov	r0, r3
 800fd12:	f003 fa4f 	bl	80131b4 <RCCEx_PLL2_Config>
 800fd16:	4603      	mov	r3, r0
 800fd18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800fd1c:	e00e      	b.n	800fd3c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fd1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd22:	3330      	adds	r3, #48	@ 0x30
 800fd24:	4618      	mov	r0, r3
 800fd26:	f003 fadd 	bl	80132e4 <RCCEx_PLL3_Config>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800fd30:	e004      	b.n	800fd3c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fd38:	e000      	b.n	800fd3c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800fd3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10d      	bne.n	800fd60 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800fd44:	4b99      	ldr	r3, [pc, #612]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fd46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fd4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800fd4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fd56:	4a95      	ldr	r2, [pc, #596]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fd58:	430b      	orrs	r3, r1
 800fd5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fd5e:	e003      	b.n	800fd68 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fd64:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800fd68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800fd74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd76:	2300      	movs	r3, #0
 800fd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4313      	orrs	r3, r2
 800fd82:	d04e      	beq.n	800fe22 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800fd84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fd88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fd8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd90:	d02e      	beq.n	800fdf0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800fd92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd96:	d827      	bhi.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800fd98:	2bc0      	cmp	r3, #192	@ 0xc0
 800fd9a:	d02b      	beq.n	800fdf4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800fd9c:	2bc0      	cmp	r3, #192	@ 0xc0
 800fd9e:	d823      	bhi.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800fda0:	2b80      	cmp	r3, #128	@ 0x80
 800fda2:	d017      	beq.n	800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800fda4:	2b80      	cmp	r3, #128	@ 0x80
 800fda6:	d81f      	bhi.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800fdac:	2b40      	cmp	r3, #64	@ 0x40
 800fdae:	d007      	beq.n	800fdc0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800fdb0:	e01a      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fdb2:	4b7e      	ldr	r3, [pc, #504]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fdb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb6:	4a7d      	ldr	r2, [pc, #500]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fdb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fdbc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800fdbe:	e01a      	b.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fdc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fdc4:	3308      	adds	r3, #8
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f003 f9f4 	bl	80131b4 <RCCEx_PLL2_Config>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800fdd2:	e010      	b.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fdd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fdd8:	3330      	adds	r3, #48	@ 0x30
 800fdda:	4618      	mov	r0, r3
 800fddc:	f003 fa82 	bl	80132e4 <RCCEx_PLL3_Config>
 800fde0:	4603      	mov	r3, r0
 800fde2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800fde6:	e006      	b.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fde8:	2301      	movs	r3, #1
 800fdea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800fdee:	e002      	b.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800fdf0:	bf00      	nop
 800fdf2:	e000      	b.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800fdf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fdf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10d      	bne.n	800fe1a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800fdfe:	4b6b      	ldr	r3, [pc, #428]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fe00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fe04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800fe08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fe10:	4a66      	ldr	r2, [pc, #408]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fe12:	430b      	orrs	r3, r1
 800fe14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fe18:	e003      	b.n	800fe22 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fe1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800fe22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800fe2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe30:	2300      	movs	r3, #0
 800fe32:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800fe38:	460b      	mov	r3, r1
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	d055      	beq.n	800feea <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800fe3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800fe46:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800fe4a:	d031      	beq.n	800feb0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800fe4c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800fe50:	d82a      	bhi.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800fe52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe56:	d02d      	beq.n	800feb4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800fe58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe5c:	d824      	bhi.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800fe5e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fe62:	d029      	beq.n	800feb8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800fe64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fe68:	d81e      	bhi.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800fe6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe6e:	d011      	beq.n	800fe94 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800fe70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe74:	d818      	bhi.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d020      	beq.n	800febc <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800fe7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe7e:	d113      	bne.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800fe80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe84:	3308      	adds	r3, #8
 800fe86:	4618      	mov	r0, r3
 800fe88:	f003 f994 	bl	80131b4 <RCCEx_PLL2_Config>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800fe92:	e014      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800fe94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fe98:	3330      	adds	r3, #48	@ 0x30
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f003 fa22 	bl	80132e4 <RCCEx_PLL3_Config>
 800fea0:	4603      	mov	r3, r0
 800fea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800fea6:	e00a      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fea8:	2301      	movs	r3, #1
 800feaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800feae:	e006      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800feb0:	bf00      	nop
 800feb2:	e004      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800feb4:	bf00      	nop
 800feb6:	e002      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800feb8:	bf00      	nop
 800feba:	e000      	b.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800febc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800febe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d10d      	bne.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800fec6:	4b39      	ldr	r3, [pc, #228]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800fec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fecc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800fed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800fed4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800fed8:	4a34      	ldr	r2, [pc, #208]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800feda:	430b      	orrs	r3, r1
 800fedc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fee0:	e003      	b.n	800feea <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fee2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800fee6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800feea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800feee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800fef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fef8:	2300      	movs	r3, #0
 800fefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fefc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ff00:	460b      	mov	r3, r1
 800ff02:	4313      	orrs	r3, r2
 800ff04:	d058      	beq.n	800ffb8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800ff06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ff0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ff12:	d031      	beq.n	800ff78 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800ff14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ff18:	d82a      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800ff1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff1e:	d02d      	beq.n	800ff7c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800ff20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff24:	d824      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800ff26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ff2a:	d029      	beq.n	800ff80 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800ff2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ff30:	d81e      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800ff32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ff36:	d011      	beq.n	800ff5c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800ff38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ff3c:	d818      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d020      	beq.n	800ff84 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800ff42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff46:	d113      	bne.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ff48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff4c:	3308      	adds	r3, #8
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f003 f930 	bl	80131b4 <RCCEx_PLL2_Config>
 800ff54:	4603      	mov	r3, r0
 800ff56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800ff5a:	e014      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ff5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff60:	3330      	adds	r3, #48	@ 0x30
 800ff62:	4618      	mov	r0, r3
 800ff64:	f003 f9be 	bl	80132e4 <RCCEx_PLL3_Config>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800ff6e:	e00a      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff70:	2301      	movs	r3, #1
 800ff72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ff76:	e006      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ff78:	bf00      	nop
 800ff7a:	e004      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ff7c:	bf00      	nop
 800ff7e:	e002      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ff80:	bf00      	nop
 800ff82:	e000      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ff84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d110      	bne.n	800ffb0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800ff8e:	4b07      	ldr	r3, [pc, #28]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ff90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ff94:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800ff98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ff9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ffa0:	4902      	ldr	r1, [pc, #8]	@ (800ffac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800ffa8:	e006      	b.n	800ffb8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800ffaa:	bf00      	nop
 800ffac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ffb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ffb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ffbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	6239      	str	r1, [r7, #32]
 800ffc4:	f003 0301 	and.w	r3, r3, #1
 800ffc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ffce:	460b      	mov	r3, r1
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	d055      	beq.n	8010080 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800ffd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ffd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ffdc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ffe0:	d031      	beq.n	8010046 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800ffe2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ffe6:	d82a      	bhi.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ffe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ffec:	d02d      	beq.n	801004a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800ffee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fff2:	d824      	bhi.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800fff4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800fff8:	d029      	beq.n	801004e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800fffa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800fffe:	d81e      	bhi.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8010000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010004:	d011      	beq.n	801002a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8010006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801000a:	d818      	bhi.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 801000c:	2b00      	cmp	r3, #0
 801000e:	d020      	beq.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8010010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010014:	d113      	bne.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801001a:	3308      	adds	r3, #8
 801001c:	4618      	mov	r0, r3
 801001e:	f003 f8c9 	bl	80131b4 <RCCEx_PLL2_Config>
 8010022:	4603      	mov	r3, r0
 8010024:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010028:	e014      	b.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801002a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801002e:	3330      	adds	r3, #48	@ 0x30
 8010030:	4618      	mov	r0, r3
 8010032:	f003 f957 	bl	80132e4 <RCCEx_PLL3_Config>
 8010036:	4603      	mov	r3, r0
 8010038:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801003c:	e00a      	b.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010044:	e006      	b.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8010046:	bf00      	nop
 8010048:	e004      	b.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 801004a:	bf00      	nop
 801004c:	e002      	b.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 801004e:	bf00      	nop
 8010050:	e000      	b.n	8010054 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8010052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010054:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010058:	2b00      	cmp	r3, #0
 801005a:	d10d      	bne.n	8010078 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 801005c:	4b88      	ldr	r3, [pc, #544]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801005e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010062:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8010066:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801006a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801006e:	4984      	ldr	r1, [pc, #528]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010070:	4313      	orrs	r3, r2
 8010072:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8010076:	e003      	b.n	8010080 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010078:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801007c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8010080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	2100      	movs	r1, #0
 801008a:	61b9      	str	r1, [r7, #24]
 801008c:	f003 0302 	and.w	r3, r3, #2
 8010090:	61fb      	str	r3, [r7, #28]
 8010092:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010096:	460b      	mov	r3, r1
 8010098:	4313      	orrs	r3, r2
 801009a:	d03d      	beq.n	8010118 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 801009c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80100a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	d81c      	bhi.n	80100e2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80100a8:	a201      	add	r2, pc, #4	@ (adr r2, 80100b0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80100aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ae:	bf00      	nop
 80100b0:	080100eb 	.word	0x080100eb
 80100b4:	080100c1 	.word	0x080100c1
 80100b8:	080100cf 	.word	0x080100cf
 80100bc:	080100eb 	.word	0x080100eb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100c0:	4b6f      	ldr	r3, [pc, #444]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80100c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100c4:	4a6e      	ldr	r2, [pc, #440]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80100c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80100ca:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80100cc:	e00e      	b.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80100ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80100d2:	3308      	adds	r3, #8
 80100d4:	4618      	mov	r0, r3
 80100d6:	f003 f86d 	bl	80131b4 <RCCEx_PLL2_Config>
 80100da:	4603      	mov	r3, r0
 80100dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80100e0:	e004      	b.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100e2:	2301      	movs	r3, #1
 80100e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80100e8:	e000      	b.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80100ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d10d      	bne.n	8010110 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80100f4:	4b62      	ldr	r3, [pc, #392]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80100f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80100fa:	f023 0203 	bic.w	r2, r3, #3
 80100fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010102:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010106:	495e      	ldr	r1, [pc, #376]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010108:	4313      	orrs	r3, r2
 801010a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 801010e:	e003      	b.n	8010118 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010110:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010114:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	2100      	movs	r1, #0
 8010122:	6139      	str	r1, [r7, #16]
 8010124:	f003 0304 	and.w	r3, r3, #4
 8010128:	617b      	str	r3, [r7, #20]
 801012a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801012e:	460b      	mov	r3, r1
 8010130:	4313      	orrs	r3, r2
 8010132:	d03a      	beq.n	80101aa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8010134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010138:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801013c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010140:	d00e      	beq.n	8010160 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8010142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010146:	d815      	bhi.n	8010174 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8010148:	2b00      	cmp	r3, #0
 801014a:	d017      	beq.n	801017c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 801014c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010150:	d110      	bne.n	8010174 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010152:	4b4b      	ldr	r3, [pc, #300]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010156:	4a4a      	ldr	r2, [pc, #296]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801015c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801015e:	e00e      	b.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8010160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010164:	3308      	adds	r3, #8
 8010166:	4618      	mov	r0, r3
 8010168:	f003 f824 	bl	80131b4 <RCCEx_PLL2_Config>
 801016c:	4603      	mov	r3, r0
 801016e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8010172:	e004      	b.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8010174:	2301      	movs	r3, #1
 8010176:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801017a:	e000      	b.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 801017c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801017e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10d      	bne.n	80101a2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8010186:	4b3e      	ldr	r3, [pc, #248]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801018c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010194:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010198:	4939      	ldr	r1, [pc, #228]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801019a:	4313      	orrs	r3, r2
 801019c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80101a0:	e003      	b.n	80101aa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80101a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80101aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	2100      	movs	r1, #0
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	f003 0310 	and.w	r3, r3, #16
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80101c0:	460b      	mov	r3, r1
 80101c2:	4313      	orrs	r3, r2
 80101c4:	d038      	beq.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80101c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80101ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80101ce:	2b30      	cmp	r3, #48	@ 0x30
 80101d0:	d01b      	beq.n	801020a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80101d2:	2b30      	cmp	r3, #48	@ 0x30
 80101d4:	d815      	bhi.n	8010202 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80101d6:	2b10      	cmp	r3, #16
 80101d8:	d002      	beq.n	80101e0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80101da:	2b20      	cmp	r3, #32
 80101dc:	d007      	beq.n	80101ee <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80101de:	e010      	b.n	8010202 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101e0:	4b27      	ldr	r3, [pc, #156]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80101e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101e4:	4a26      	ldr	r2, [pc, #152]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80101e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80101ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80101ec:	e00e      	b.n	801020c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80101ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80101f2:	3330      	adds	r3, #48	@ 0x30
 80101f4:	4618      	mov	r0, r3
 80101f6:	f003 f875 	bl	80132e4 <RCCEx_PLL3_Config>
 80101fa:	4603      	mov	r3, r0
 80101fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8010200:	e004      	b.n	801020c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8010208:	e000      	b.n	801020c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 801020a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801020c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10d      	bne.n	8010230 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8010214:	4b1a      	ldr	r3, [pc, #104]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010216:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801021a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801021e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010222:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8010226:	4916      	ldr	r1, [pc, #88]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010228:	4313      	orrs	r3, r2
 801022a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 801022e:	e003      	b.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010230:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8010234:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010240:	2100      	movs	r1, #0
 8010242:	6039      	str	r1, [r7, #0]
 8010244:	f003 0308 	and.w	r3, r3, #8
 8010248:	607b      	str	r3, [r7, #4]
 801024a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801024e:	460b      	mov	r3, r1
 8010250:	4313      	orrs	r3, r2
 8010252:	d00c      	beq.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8010254:	4b0a      	ldr	r3, [pc, #40]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801025a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801025e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010262:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8010266:	4906      	ldr	r1, [pc, #24]	@ (8010280 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8010268:	4313      	orrs	r3, r2
 801026a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 801026e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8010272:	4618      	mov	r0, r3
 8010274:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8010278:	46bd      	mov	sp, r7
 801027a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801027e:	bf00      	nop
 8010280:	44020c00 	.word	0x44020c00

08010284 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8010284:	b480      	push	{r7}
 8010286:	b08b      	sub	sp, #44	@ 0x2c
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 801028c:	4bad      	ldr	r3, [pc, #692]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 801028e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010294:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8010296:	4bab      	ldr	r3, [pc, #684]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801029a:	f003 0303 	and.w	r3, r3, #3
 801029e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80102a0:	4ba8      	ldr	r3, [pc, #672]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80102a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102a4:	0a1b      	lsrs	r3, r3, #8
 80102a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80102aa:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80102ac:	4ba5      	ldr	r3, [pc, #660]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80102ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102b0:	f003 0310 	and.w	r3, r3, #16
 80102b4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80102b6:	4ba3      	ldr	r3, [pc, #652]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80102b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ba:	08db      	lsrs	r3, r3, #3
 80102bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102c0:	697a      	ldr	r2, [r7, #20]
 80102c2:	fb02 f303 	mul.w	r3, r2, r3
 80102c6:	ee07 3a90 	vmov	s15, r3
 80102ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ce:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 8126 	beq.w	8010526 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	2b03      	cmp	r3, #3
 80102de:	d053      	beq.n	8010388 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	2b03      	cmp	r3, #3
 80102e4:	d86f      	bhi.n	80103c6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d003      	beq.n	80102f4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	d02b      	beq.n	801034a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80102f2:	e068      	b.n	80103c6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80102f4:	4b93      	ldr	r3, [pc, #588]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	08db      	lsrs	r3, r3, #3
 80102fa:	f003 0303 	and.w	r3, r3, #3
 80102fe:	4a92      	ldr	r2, [pc, #584]	@ (8010548 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8010300:	fa22 f303 	lsr.w	r3, r2, r3
 8010304:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	ee07 3a90 	vmov	s15, r3
 801030c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	ee07 3a90 	vmov	s15, r3
 8010316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801031a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801031e:	6a3b      	ldr	r3, [r7, #32]
 8010320:	ee07 3a90 	vmov	s15, r3
 8010324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010328:	ed97 6a04 	vldr	s12, [r7, #16]
 801032c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 801054c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8010330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801033c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010344:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8010348:	e068      	b.n	801041c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	ee07 3a90 	vmov	s15, r3
 8010350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010354:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8010550 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8010358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801035c:	6a3b      	ldr	r3, [r7, #32]
 801035e:	ee07 3a90 	vmov	s15, r3
 8010362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010366:	ed97 6a04 	vldr	s12, [r7, #16]
 801036a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801054c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 801036e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801037a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801037e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010382:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8010386:	e049      	b.n	801041c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	ee07 3a90 	vmov	s15, r3
 801038e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010392:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8010554 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8010396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801039a:	6a3b      	ldr	r3, [r7, #32]
 801039c:	ee07 3a90 	vmov	s15, r3
 80103a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80103a8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 801054c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80103ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80103b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80103c4:	e02a      	b.n	801041c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80103c6:	4b5f      	ldr	r3, [pc, #380]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	08db      	lsrs	r3, r3, #3
 80103cc:	f003 0303 	and.w	r3, r3, #3
 80103d0:	4a5d      	ldr	r2, [pc, #372]	@ (8010548 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80103d2:	fa22 f303 	lsr.w	r3, r2, r3
 80103d6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	ee07 3a90 	vmov	s15, r3
 80103de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	ee07 3a90 	vmov	s15, r3
 80103e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	ee07 3a90 	vmov	s15, r3
 80103f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80103fe:	eddf 5a53 	vldr	s11, [pc, #332]	@ 801054c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8010402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801040a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801040e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010416:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 801041a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801041c:	4b49      	ldr	r3, [pc, #292]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010428:	d121      	bne.n	801046e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 801042a:	4b46      	ldr	r3, [pc, #280]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 801042c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801042e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010432:	2b00      	cmp	r3, #0
 8010434:	d017      	beq.n	8010466 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8010436:	4b43      	ldr	r3, [pc, #268]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801043a:	0a5b      	lsrs	r3, r3, #9
 801043c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010440:	ee07 3a90 	vmov	s15, r3
 8010444:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8010448:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801044c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8010450:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801045c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	601a      	str	r2, [r3, #0]
 8010464:	e006      	b.n	8010474 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2200      	movs	r2, #0
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	e002      	b.n	8010474 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2200      	movs	r2, #0
 8010472:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010474:	4b33      	ldr	r3, [pc, #204]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801047c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010480:	d121      	bne.n	80104c6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8010482:	4b30      	ldr	r3, [pc, #192]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801048a:	2b00      	cmp	r3, #0
 801048c:	d017      	beq.n	80104be <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801048e:	4b2d      	ldr	r3, [pc, #180]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8010490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010492:	0c1b      	lsrs	r3, r3, #16
 8010494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010498:	ee07 3a90 	vmov	s15, r3
 801049c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80104a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80104a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80104a8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80104ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80104b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80104b4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	605a      	str	r2, [r3, #4]
 80104bc:	e006      	b.n	80104cc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	605a      	str	r2, [r3, #4]
 80104c4:	e002      	b.n	80104cc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104cc:	4b1d      	ldr	r3, [pc, #116]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80104d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80104d8:	d121      	bne.n	801051e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80104da:	4b1a      	ldr	r3, [pc, #104]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80104dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d017      	beq.n	8010516 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80104e6:	4b17      	ldr	r3, [pc, #92]	@ (8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80104e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104ea:	0e1b      	lsrs	r3, r3, #24
 80104ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104f0:	ee07 3a90 	vmov	s15, r3
 80104f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80104f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80104fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8010500:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801050c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010514:	e010      	b.n	8010538 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	609a      	str	r2, [r3, #8]
}
 801051c:	e00c      	b.n	8010538 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	609a      	str	r2, [r3, #8]
}
 8010524:	e008      	b.n	8010538 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2200      	movs	r2, #0
 8010536:	609a      	str	r2, [r3, #8]
}
 8010538:	bf00      	nop
 801053a:	372c      	adds	r7, #44	@ 0x2c
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	44020c00 	.word	0x44020c00
 8010548:	03d09000 	.word	0x03d09000
 801054c:	46000000 	.word	0x46000000
 8010550:	4a742400 	.word	0x4a742400
 8010554:	4bbebc20 	.word	0x4bbebc20

08010558 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8010558:	b480      	push	{r7}
 801055a:	b08b      	sub	sp, #44	@ 0x2c
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8010560:	4bad      	ldr	r3, [pc, #692]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8010562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010568:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 801056a:	4bab      	ldr	r3, [pc, #684]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801056c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801056e:	f003 0303 	and.w	r3, r3, #3
 8010572:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8010574:	4ba8      	ldr	r3, [pc, #672]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8010576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010578:	0a1b      	lsrs	r3, r3, #8
 801057a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801057e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8010580:	4ba5      	ldr	r3, [pc, #660]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8010582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010584:	f003 0310 	and.w	r3, r3, #16
 8010588:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 801058a:	4ba3      	ldr	r3, [pc, #652]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801058c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801058e:	08db      	lsrs	r3, r3, #3
 8010590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010594:	697a      	ldr	r2, [r7, #20]
 8010596:	fb02 f303 	mul.w	r3, r2, r3
 801059a:	ee07 3a90 	vmov	s15, r3
 801059e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105a2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 8126 	beq.w	80107fa <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	d053      	beq.n	801065c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b03      	cmp	r3, #3
 80105b8:	d86f      	bhi.n	801069a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d003      	beq.n	80105c8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	2b02      	cmp	r3, #2
 80105c4:	d02b      	beq.n	801061e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80105c6:	e068      	b.n	801069a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80105c8:	4b93      	ldr	r3, [pc, #588]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	08db      	lsrs	r3, r3, #3
 80105ce:	f003 0303 	and.w	r3, r3, #3
 80105d2:	4a92      	ldr	r2, [pc, #584]	@ (801081c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80105d4:	fa22 f303 	lsr.w	r3, r2, r3
 80105d8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	ee07 3a90 	vmov	s15, r3
 80105e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	ee07 3a90 	vmov	s15, r3
 80105ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80105f2:	6a3b      	ldr	r3, [r7, #32]
 80105f4:	ee07 3a90 	vmov	s15, r3
 80105f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80105fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8010600:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8010820 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8010604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801060c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010618:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 801061c:	e068      	b.n	80106f0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	ee07 3a90 	vmov	s15, r3
 8010624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010628:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8010824 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 801062c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	ee07 3a90 	vmov	s15, r3
 8010636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801063a:	ed97 6a04 	vldr	s12, [r7, #16]
 801063e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010820 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8010642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801064a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801064e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010656:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 801065a:	e049      	b.n	80106f0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	ee07 3a90 	vmov	s15, r3
 8010662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010666:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8010828 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 801066a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801066e:	6a3b      	ldr	r3, [r7, #32]
 8010670:	ee07 3a90 	vmov	s15, r3
 8010674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010678:	ed97 6a04 	vldr	s12, [r7, #16]
 801067c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8010820 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8010680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801068c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010694:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8010698:	e02a      	b.n	80106f0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801069a:	4b5f      	ldr	r3, [pc, #380]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	08db      	lsrs	r3, r3, #3
 80106a0:	f003 0303 	and.w	r3, r3, #3
 80106a4:	4a5d      	ldr	r2, [pc, #372]	@ (801081c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80106a6:	fa22 f303 	lsr.w	r3, r2, r3
 80106aa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	ee07 3a90 	vmov	s15, r3
 80106b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	ee07 3a90 	vmov	s15, r3
 80106bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80106c4:	6a3b      	ldr	r3, [r7, #32]
 80106c6:	ee07 3a90 	vmov	s15, r3
 80106ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80106d2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8010820 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80106d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80106da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80106ee:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106f0:	4b49      	ldr	r3, [pc, #292]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80106fc:	d121      	bne.n	8010742 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80106fe:	4b46      	ldr	r3, [pc, #280]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8010700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010706:	2b00      	cmp	r3, #0
 8010708:	d017      	beq.n	801073a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801070a:	4b43      	ldr	r3, [pc, #268]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801070c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801070e:	0a5b      	lsrs	r3, r3, #9
 8010710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010714:	ee07 3a90 	vmov	s15, r3
 8010718:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 801071c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010720:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8010724:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801072c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010730:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	601a      	str	r2, [r3, #0]
 8010738:	e006      	b.n	8010748 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2200      	movs	r2, #0
 801073e:	601a      	str	r2, [r3, #0]
 8010740:	e002      	b.n	8010748 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010748:	4b33      	ldr	r3, [pc, #204]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010754:	d121      	bne.n	801079a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8010756:	4b30      	ldr	r3, [pc, #192]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8010758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801075e:	2b00      	cmp	r3, #0
 8010760:	d017      	beq.n	8010792 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8010762:	4b2d      	ldr	r3, [pc, #180]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8010764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010766:	0c1b      	lsrs	r3, r3, #16
 8010768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801076c:	ee07 3a90 	vmov	s15, r3
 8010770:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8010774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010778:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 801077c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010788:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	605a      	str	r2, [r3, #4]
 8010790:	e006      	b.n	80107a0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	605a      	str	r2, [r3, #4]
 8010798:	e002      	b.n	80107a0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80107a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80107ac:	d121      	bne.n	80107f2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80107ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80107b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d017      	beq.n	80107ea <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80107ba:	4b17      	ldr	r3, [pc, #92]	@ (8010818 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80107bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107be:	0e1b      	lsrs	r3, r3, #24
 80107c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107c4:	ee07 3a90 	vmov	s15, r3
 80107c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80107cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80107d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80107d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80107d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107e0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80107e8:	e010      	b.n	801080c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	609a      	str	r2, [r3, #8]
}
 80107f0:	e00c      	b.n	801080c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	609a      	str	r2, [r3, #8]
}
 80107f8:	e008      	b.n	801080c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2200      	movs	r2, #0
 8010804:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	609a      	str	r2, [r3, #8]
}
 801080c:	bf00      	nop
 801080e:	372c      	adds	r7, #44	@ 0x2c
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr
 8010818:	44020c00 	.word	0x44020c00
 801081c:	03d09000 	.word	0x03d09000
 8010820:	46000000 	.word	0x46000000
 8010824:	4a742400 	.word	0x4a742400
 8010828:	4bbebc20 	.word	0x4bbebc20

0801082c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 801082c:	b480      	push	{r7}
 801082e:	b08b      	sub	sp, #44	@ 0x2c
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8010834:	4bad      	ldr	r3, [pc, #692]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801083c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 801083e:	4bab      	ldr	r3, [pc, #684]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010842:	f003 0303 	and.w	r3, r3, #3
 8010846:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8010848:	4ba8      	ldr	r3, [pc, #672]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801084c:	0a1b      	lsrs	r3, r3, #8
 801084e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010852:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8010854:	4ba5      	ldr	r3, [pc, #660]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010858:	f003 0310 	and.w	r3, r3, #16
 801085c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 801085e:	4ba3      	ldr	r3, [pc, #652]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010862:	08db      	lsrs	r3, r3, #3
 8010864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	fb02 f303 	mul.w	r3, r2, r3
 801086e:	ee07 3a90 	vmov	s15, r3
 8010872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010876:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	2b00      	cmp	r3, #0
 801087e:	f000 8126 	beq.w	8010ace <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8010882:	69fb      	ldr	r3, [r7, #28]
 8010884:	2b03      	cmp	r3, #3
 8010886:	d053      	beq.n	8010930 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	2b03      	cmp	r3, #3
 801088c:	d86f      	bhi.n	801096e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	2b01      	cmp	r3, #1
 8010892:	d003      	beq.n	801089c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	2b02      	cmp	r3, #2
 8010898:	d02b      	beq.n	80108f2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 801089a:	e068      	b.n	801096e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801089c:	4b93      	ldr	r3, [pc, #588]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	08db      	lsrs	r3, r3, #3
 80108a2:	f003 0303 	and.w	r3, r3, #3
 80108a6:	4a92      	ldr	r2, [pc, #584]	@ (8010af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80108a8:	fa22 f303 	lsr.w	r3, r2, r3
 80108ac:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	ee07 3a90 	vmov	s15, r3
 80108b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	ee07 3a90 	vmov	s15, r3
 80108be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108c6:	6a3b      	ldr	r3, [r7, #32]
 80108c8:	ee07 3a90 	vmov	s15, r3
 80108cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80108d4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8010af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80108d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80108e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80108f0:	e068      	b.n	80109c4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	ee07 3a90 	vmov	s15, r3
 80108f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108fc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8010af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8010900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	ee07 3a90 	vmov	s15, r3
 801090a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801090e:	ed97 6a04 	vldr	s12, [r7, #16]
 8010912:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8010916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801091a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801091e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010926:	ee67 7a27 	vmul.f32	s15, s14, s15
 801092a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 801092e:	e049      	b.n	80109c4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	ee07 3a90 	vmov	s15, r3
 8010936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801093a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8010afc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 801093e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	ee07 3a90 	vmov	s15, r3
 8010948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801094c:	ed97 6a04 	vldr	s12, [r7, #16]
 8010950:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8010af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8010954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801095c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010968:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 801096c:	e02a      	b.n	80109c4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801096e:	4b5f      	ldr	r3, [pc, #380]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	08db      	lsrs	r3, r3, #3
 8010974:	f003 0303 	and.w	r3, r3, #3
 8010978:	4a5d      	ldr	r2, [pc, #372]	@ (8010af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 801097a:	fa22 f303 	lsr.w	r3, r2, r3
 801097e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	ee07 3a90 	vmov	s15, r3
 8010986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	ee07 3a90 	vmov	s15, r3
 8010990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010998:	6a3b      	ldr	r3, [r7, #32]
 801099a:	ee07 3a90 	vmov	s15, r3
 801099e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80109a6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8010af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80109aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80109c2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80109c4:	4b49      	ldr	r3, [pc, #292]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80109cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80109d0:	d121      	bne.n	8010a16 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80109d2:	4b46      	ldr	r3, [pc, #280]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80109d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d017      	beq.n	8010a0e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80109de:	4b43      	ldr	r3, [pc, #268]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80109e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109e2:	0a5b      	lsrs	r3, r3, #9
 80109e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109e8:	ee07 3a90 	vmov	s15, r3
 80109ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80109f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80109f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80109f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80109fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a04:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	601a      	str	r2, [r3, #0]
 8010a0c:	e006      	b.n	8010a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	e002      	b.n	8010a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a1c:	4b33      	ldr	r3, [pc, #204]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a28:	d121      	bne.n	8010a6e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8010a2a:	4b30      	ldr	r3, [pc, #192]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d017      	beq.n	8010a66 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8010a36:	4b2d      	ldr	r3, [pc, #180]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a3a:	0c1b      	lsrs	r3, r3, #16
 8010a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a40:	ee07 3a90 	vmov	s15, r3
 8010a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8010a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8010a50:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a5c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	605a      	str	r2, [r3, #4]
 8010a64:	e006      	b.n	8010a74 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	605a      	str	r2, [r3, #4]
 8010a6c:	e002      	b.n	8010a74 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a74:	4b1d      	ldr	r3, [pc, #116]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a80:	d121      	bne.n	8010ac6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8010a82:	4b1a      	ldr	r3, [pc, #104]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d017      	beq.n	8010abe <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8010a8e:	4b17      	ldr	r3, [pc, #92]	@ (8010aec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8010a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a92:	0e1b      	lsrs	r3, r3, #24
 8010a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a98:	ee07 3a90 	vmov	s15, r3
 8010a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8010aa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8010aa8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ab4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8010abc:	e010      	b.n	8010ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	609a      	str	r2, [r3, #8]
}
 8010ac4:	e00c      	b.n	8010ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	609a      	str	r2, [r3, #8]
}
 8010acc:	e008      	b.n	8010ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	609a      	str	r2, [r3, #8]
}
 8010ae0:	bf00      	nop
 8010ae2:	372c      	adds	r7, #44	@ 0x2c
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr
 8010aec:	44020c00 	.word	0x44020c00
 8010af0:	03d09000 	.word	0x03d09000
 8010af4:	46000000 	.word	0x46000000
 8010af8:	4a742400 	.word	0x4a742400
 8010afc:	4bbebc20 	.word	0x4bbebc20

08010b00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010b00:	b590      	push	{r4, r7, lr}
 8010b02:	b08f      	sub	sp, #60	@ 0x3c
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8010b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b0e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8010b12:	4321      	orrs	r1, r4
 8010b14:	d150      	bne.n	8010bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8010b16:	4b26      	ldr	r3, [pc, #152]	@ (8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8010b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010b20:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8010b22:	4b23      	ldr	r3, [pc, #140]	@ (8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8010b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010b28:	f003 0302 	and.w	r3, r3, #2
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d108      	bne.n	8010b42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8010b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b36:	d104      	bne.n	8010b42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8010b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b3e:	f002 bb2a 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8010b42:	4b1b      	ldr	r3, [pc, #108]	@ (8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8010b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010b50:	d108      	bne.n	8010b64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8010b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b58:	d104      	bne.n	8010b64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8010b5a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b60:	f002 bb19 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8010b64:	4b12      	ldr	r3, [pc, #72]	@ (8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b70:	d119      	bne.n	8010ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8010b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010b78:	d115      	bne.n	8010ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8010b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8010b7c:	69db      	ldr	r3, [r3, #28]
 8010b7e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8010b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b86:	d30a      	bcc.n	8010b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8010b88:	4b09      	ldr	r3, [pc, #36]	@ (8010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8010b8a:	69db      	ldr	r3, [r3, #28]
 8010b8c:	0a1b      	lsrs	r3, r3, #8
 8010b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b92:	4a08      	ldr	r2, [pc, #32]	@ (8010bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8010b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8010b9a:	f002 bafc 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8010ba2:	f002 baf8 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010baa:	f002 baf4 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010bae:	bf00      	nop
 8010bb0:	44020c00 	.word	0x44020c00
 8010bb4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8010bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010bbc:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8010bc0:	ea50 0104 	orrs.w	r1, r0, r4
 8010bc4:	f001 8275 	beq.w	80120b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8010bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010bcc:	2801      	cmp	r0, #1
 8010bce:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8010bd2:	f082 82dd 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010bda:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8010bde:	ea50 0104 	orrs.w	r1, r0, r4
 8010be2:	f001 816c 	beq.w	8011ebe <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8010be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010bea:	2801      	cmp	r0, #1
 8010bec:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8010bf0:	f082 82ce 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010bf8:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8010bfc:	ea50 0104 	orrs.w	r1, r0, r4
 8010c00:	f001 8602 	beq.w	8012808 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8010c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c08:	2801      	cmp	r0, #1
 8010c0a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8010c0e:	f082 82bf 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c16:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8010c1a:	ea50 0104 	orrs.w	r1, r0, r4
 8010c1e:	f001 854c 	beq.w	80126ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8010c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c26:	2801      	cmp	r0, #1
 8010c28:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8010c2c:	f082 82b0 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c34:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8010c38:	ea50 0104 	orrs.w	r1, r0, r4
 8010c3c:	f001 849e 	beq.w	801257c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8010c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c44:	2801      	cmp	r0, #1
 8010c46:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8010c4a:	f082 82a1 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c52:	f1a1 0420 	sub.w	r4, r1, #32
 8010c56:	ea50 0104 	orrs.w	r1, r0, r4
 8010c5a:	f001 83e8 	beq.w	801242e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8010c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c62:	2801      	cmp	r0, #1
 8010c64:	f171 0120 	sbcs.w	r1, r1, #32
 8010c68:	f082 8292 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c70:	f1a1 0410 	sub.w	r4, r1, #16
 8010c74:	ea50 0104 	orrs.w	r1, r0, r4
 8010c78:	f002 8256 	beq.w	8013128 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8010c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c80:	2801      	cmp	r0, #1
 8010c82:	f171 0110 	sbcs.w	r1, r1, #16
 8010c86:	f082 8283 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010c8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c8e:	f1a1 0408 	sub.w	r4, r1, #8
 8010c92:	ea50 0104 	orrs.w	r1, r0, r4
 8010c96:	f002 81cc 	beq.w	8013032 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8010c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c9e:	2801      	cmp	r0, #1
 8010ca0:	f171 0108 	sbcs.w	r1, r1, #8
 8010ca4:	f082 8274 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010cac:	1f0c      	subs	r4, r1, #4
 8010cae:	ea50 0104 	orrs.w	r1, r0, r4
 8010cb2:	f001 8648 	beq.w	8012946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8010cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010cba:	2801      	cmp	r0, #1
 8010cbc:	f171 0104 	sbcs.w	r1, r1, #4
 8010cc0:	f082 8266 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010cc8:	1e8c      	subs	r4, r1, #2
 8010cca:	ea50 0104 	orrs.w	r1, r0, r4
 8010cce:	f002 8143 	beq.w	8012f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8010cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010cd6:	2801      	cmp	r0, #1
 8010cd8:	f171 0102 	sbcs.w	r1, r1, #2
 8010cdc:	f082 8258 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ce4:	1e4c      	subs	r4, r1, #1
 8010ce6:	ea50 0104 	orrs.w	r1, r0, r4
 8010cea:	f002 80ce 	beq.w	8012e8a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8010cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010cf2:	2801      	cmp	r0, #1
 8010cf4:	f171 0101 	sbcs.w	r1, r1, #1
 8010cf8:	f082 824a 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d00:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8010d04:	4321      	orrs	r1, r4
 8010d06:	f002 8059 	beq.w	8012dbc <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8010d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d0e:	4cd9      	ldr	r4, [pc, #868]	@ (8011074 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8010d10:	42a0      	cmp	r0, r4
 8010d12:	f171 0100 	sbcs.w	r1, r1, #0
 8010d16:	f082 823b 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d1e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8010d22:	4321      	orrs	r1, r4
 8010d24:	f001 87d9 	beq.w	8012cda <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8010d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d2c:	4cd2      	ldr	r4, [pc, #840]	@ (8011078 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8010d2e:	42a0      	cmp	r0, r4
 8010d30:	f171 0100 	sbcs.w	r1, r1, #0
 8010d34:	f082 822c 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d3c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8010d40:	4321      	orrs	r1, r4
 8010d42:	f001 8751 	beq.w	8012be8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8010d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d4a:	4ccc      	ldr	r4, [pc, #816]	@ (801107c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8010d4c:	42a0      	cmp	r0, r4
 8010d4e:	f171 0100 	sbcs.w	r1, r1, #0
 8010d52:	f082 821d 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d5a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8010d5e:	4321      	orrs	r1, r4
 8010d60:	f001 869a 	beq.w	8012a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8010d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d68:	4cc5      	ldr	r4, [pc, #788]	@ (8011080 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8010d6a:	42a0      	cmp	r0, r4
 8010d6c:	f171 0100 	sbcs.w	r1, r1, #0
 8010d70:	f082 820e 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d78:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8010d7c:	4321      	orrs	r1, r4
 8010d7e:	f001 8612 	beq.w	80129a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8010d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d86:	4cbf      	ldr	r4, [pc, #764]	@ (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8010d88:	42a0      	cmp	r0, r4
 8010d8a:	f171 0100 	sbcs.w	r1, r1, #0
 8010d8e:	f082 81ff 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d96:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8010d9a:	4321      	orrs	r1, r4
 8010d9c:	f002 817e 	beq.w	801309c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8010da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010da4:	4cb8      	ldr	r4, [pc, #736]	@ (8011088 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8010da6:	42a0      	cmp	r0, r4
 8010da8:	f171 0100 	sbcs.w	r1, r1, #0
 8010dac:	f082 81f0 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010db4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8010db8:	4321      	orrs	r1, r4
 8010dba:	f000 829e 	beq.w	80112fa <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8010dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010dc2:	4cb2      	ldr	r4, [pc, #712]	@ (801108c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8010dc4:	42a0      	cmp	r0, r4
 8010dc6:	f171 0100 	sbcs.w	r1, r1, #0
 8010dca:	f082 81e1 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010dd2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8010dd6:	4321      	orrs	r1, r4
 8010dd8:	f000 826d 	beq.w	80112b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8010ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010de0:	4cab      	ldr	r4, [pc, #684]	@ (8011090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8010de2:	42a0      	cmp	r0, r4
 8010de4:	f171 0100 	sbcs.w	r1, r1, #0
 8010de8:	f082 81d2 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010df0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8010df4:	4321      	orrs	r1, r4
 8010df6:	f001 800d 	beq.w	8011e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8010dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010dfe:	4ca5      	ldr	r4, [pc, #660]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8010e00:	42a0      	cmp	r0, r4
 8010e02:	f171 0100 	sbcs.w	r1, r1, #0
 8010e06:	f082 81c3 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e0e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8010e12:	4321      	orrs	r1, r4
 8010e14:	f000 81d0 	beq.w	80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8010e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e1c:	4c9e      	ldr	r4, [pc, #632]	@ (8011098 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8010e1e:	42a0      	cmp	r0, r4
 8010e20:	f171 0100 	sbcs.w	r1, r1, #0
 8010e24:	f082 81b4 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e2c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8010e30:	4321      	orrs	r1, r4
 8010e32:	f000 8142 	beq.w	80110ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8010e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e3a:	4c98      	ldr	r4, [pc, #608]	@ (801109c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8010e3c:	42a0      	cmp	r0, r4
 8010e3e:	f171 0100 	sbcs.w	r1, r1, #0
 8010e42:	f082 81a5 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010e46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e4a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8010e4e:	4321      	orrs	r1, r4
 8010e50:	f001 824e 	beq.w	80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8010e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e58:	4c91      	ldr	r4, [pc, #580]	@ (80110a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8010e5a:	42a0      	cmp	r0, r4
 8010e5c:	f171 0100 	sbcs.w	r1, r1, #0
 8010e60:	f082 8196 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e68:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8010e6c:	4321      	orrs	r1, r4
 8010e6e:	f001 8197 	beq.w	80121a0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8010e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e76:	4c8b      	ldr	r4, [pc, #556]	@ (80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8010e78:	42a0      	cmp	r0, r4
 8010e7a:	f171 0100 	sbcs.w	r1, r1, #0
 8010e7e:	f082 8187 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e86:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8010e8a:	4321      	orrs	r1, r4
 8010e8c:	f001 8154 	beq.w	8012138 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8010e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e94:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8010e98:	f171 0100 	sbcs.w	r1, r1, #0
 8010e9c:	f082 8178 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ea4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8010ea8:	4321      	orrs	r1, r4
 8010eaa:	f001 80b7 	beq.w	801201c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8010eae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010eb2:	f248 0401 	movw	r4, #32769	@ 0x8001
 8010eb6:	42a0      	cmp	r0, r4
 8010eb8:	f171 0100 	sbcs.w	r1, r1, #0
 8010ebc:	f082 8168 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ec4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8010ec8:	4321      	orrs	r1, r4
 8010eca:	f001 8064 	beq.w	8011f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8010ece:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ed2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8010ed6:	42a0      	cmp	r0, r4
 8010ed8:	f171 0100 	sbcs.w	r1, r1, #0
 8010edc:	f082 8158 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ee4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8010ee8:	4321      	orrs	r1, r4
 8010eea:	f001 8011 	beq.w	8011f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8010eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ef2:	f242 0401 	movw	r4, #8193	@ 0x2001
 8010ef6:	42a0      	cmp	r0, r4
 8010ef8:	f171 0100 	sbcs.w	r1, r1, #0
 8010efc:	f082 8148 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f04:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8010f08:	4321      	orrs	r1, r4
 8010f0a:	f000 871e 	beq.w	8011d4a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8010f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f12:	f241 0401 	movw	r4, #4097	@ 0x1001
 8010f16:	42a0      	cmp	r0, r4
 8010f18:	f171 0100 	sbcs.w	r1, r1, #0
 8010f1c:	f082 8138 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f24:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8010f28:	4321      	orrs	r1, r4
 8010f2a:	f000 86a8 	beq.w	8011c7e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8010f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f32:	f640 0401 	movw	r4, #2049	@ 0x801
 8010f36:	42a0      	cmp	r0, r4
 8010f38:	f171 0100 	sbcs.w	r1, r1, #0
 8010f3c:	f082 8128 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f44:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8010f48:	4321      	orrs	r1, r4
 8010f4a:	f000 8632 	beq.w	8011bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8010f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f52:	f240 4401 	movw	r4, #1025	@ 0x401
 8010f56:	42a0      	cmp	r0, r4
 8010f58:	f171 0100 	sbcs.w	r1, r1, #0
 8010f5c:	f082 8118 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f64:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8010f68:	4321      	orrs	r1, r4
 8010f6a:	f000 85b0 	beq.w	8011ace <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8010f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f72:	f240 2401 	movw	r4, #513	@ 0x201
 8010f76:	42a0      	cmp	r0, r4
 8010f78:	f171 0100 	sbcs.w	r1, r1, #0
 8010f7c:	f082 8108 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f84:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8010f88:	4321      	orrs	r1, r4
 8010f8a:	f000 8535 	beq.w	80119f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8010f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010f92:	f240 1401 	movw	r4, #257	@ 0x101
 8010f96:	42a0      	cmp	r0, r4
 8010f98:	f171 0100 	sbcs.w	r1, r1, #0
 8010f9c:	f082 80f8 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010fa4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8010fa8:	4321      	orrs	r1, r4
 8010faa:	f000 84ba 	beq.w	8011922 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8010fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010fb2:	2881      	cmp	r0, #129	@ 0x81
 8010fb4:	f171 0100 	sbcs.w	r1, r1, #0
 8010fb8:	f082 80ea 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010fc0:	2821      	cmp	r0, #33	@ 0x21
 8010fc2:	f171 0100 	sbcs.w	r1, r1, #0
 8010fc6:	d26f      	bcs.n	80110a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010fcc:	4301      	orrs	r1, r0
 8010fce:	f002 80df 	beq.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010fd6:	1e42      	subs	r2, r0, #1
 8010fd8:	f141 33ff 	adc.w	r3, r1, #4294967295
 8010fdc:	2a20      	cmp	r2, #32
 8010fde:	f173 0100 	sbcs.w	r1, r3, #0
 8010fe2:	f082 80d5 	bcs.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010fe6:	2a1f      	cmp	r2, #31
 8010fe8:	f202 80d2 	bhi.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8010fec:	a101      	add	r1, pc, #4	@ (adr r1, 8010ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8010fee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010ff2:	bf00      	nop
 8010ff4:	08011355 	.word	0x08011355
 8010ff8:	08011421 	.word	0x08011421
 8010ffc:	08013191 	.word	0x08013191
 8011000:	080114e1 	.word	0x080114e1
 8011004:	08013191 	.word	0x08013191
 8011008:	08013191 	.word	0x08013191
 801100c:	08013191 	.word	0x08013191
 8011010:	080115b1 	.word	0x080115b1
 8011014:	08013191 	.word	0x08013191
 8011018:	08013191 	.word	0x08013191
 801101c:	08013191 	.word	0x08013191
 8011020:	08013191 	.word	0x08013191
 8011024:	08013191 	.word	0x08013191
 8011028:	08013191 	.word	0x08013191
 801102c:	08013191 	.word	0x08013191
 8011030:	08011693 	.word	0x08011693
 8011034:	08013191 	.word	0x08013191
 8011038:	08013191 	.word	0x08013191
 801103c:	08013191 	.word	0x08013191
 8011040:	08013191 	.word	0x08013191
 8011044:	08013191 	.word	0x08013191
 8011048:	08013191 	.word	0x08013191
 801104c:	08013191 	.word	0x08013191
 8011050:	08013191 	.word	0x08013191
 8011054:	08013191 	.word	0x08013191
 8011058:	08013191 	.word	0x08013191
 801105c:	08013191 	.word	0x08013191
 8011060:	08013191 	.word	0x08013191
 8011064:	08013191 	.word	0x08013191
 8011068:	08013191 	.word	0x08013191
 801106c:	08013191 	.word	0x08013191
 8011070:	08011769 	.word	0x08011769
 8011074:	80000001 	.word	0x80000001
 8011078:	40000001 	.word	0x40000001
 801107c:	20000001 	.word	0x20000001
 8011080:	10000001 	.word	0x10000001
 8011084:	08000001 	.word	0x08000001
 8011088:	04000001 	.word	0x04000001
 801108c:	00800001 	.word	0x00800001
 8011090:	00400001 	.word	0x00400001
 8011094:	00200001 	.word	0x00200001
 8011098:	00100001 	.word	0x00100001
 801109c:	00080001 	.word	0x00080001
 80110a0:	00040001 	.word	0x00040001
 80110a4:	00020001 	.word	0x00020001
 80110a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110ac:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80110b0:	430b      	orrs	r3, r1
 80110b2:	f000 83c4 	beq.w	801183e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80110b6:	f002 b86b 	b.w	8013190 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80110ba:	4ba1      	ldr	r3, [pc, #644]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80110bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80110c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80110c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80110c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80110cc:	d036      	beq.n	801113c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80110ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80110d4:	d86b      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80110d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80110dc:	d02b      	beq.n	8011136 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80110de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80110e4:	d863      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80110e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110ec:	d01b      	beq.n	8011126 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80110ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110f4:	d85b      	bhi.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80110f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d004      	beq.n	8011106 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80110fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011102:	d008      	beq.n	8011116 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8011104:	e053      	b.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011106:	f107 0320 	add.w	r3, r7, #32
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff f8ba 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011112:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011114:	e04e      	b.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011116:	f107 0314 	add.w	r3, r7, #20
 801111a:	4618      	mov	r0, r3
 801111c:	f7ff fa1c 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011124:	e046      	b.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011126:	f107 0308 	add.w	r3, r7, #8
 801112a:	4618      	mov	r0, r3
 801112c:	f7ff fb7e 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011134:	e03e      	b.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011136:	4b83      	ldr	r3, [pc, #524]	@ (8011344 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8011138:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801113a:	e03b      	b.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801113c:	4b80      	ldr	r3, [pc, #512]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801113e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011142:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011146:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011148:	4b7d      	ldr	r3, [pc, #500]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f003 0302 	and.w	r3, r3, #2
 8011150:	2b02      	cmp	r3, #2
 8011152:	d10c      	bne.n	801116e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	2b00      	cmp	r3, #0
 8011158:	d109      	bne.n	801116e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801115a:	4b79      	ldr	r3, [pc, #484]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	08db      	lsrs	r3, r3, #3
 8011160:	f003 0303 	and.w	r3, r3, #3
 8011164:	4a78      	ldr	r2, [pc, #480]	@ (8011348 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8011166:	fa22 f303 	lsr.w	r3, r2, r3
 801116a:	637b      	str	r3, [r7, #52]	@ 0x34
 801116c:	e01e      	b.n	80111ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801116e:	4b74      	ldr	r3, [pc, #464]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801117a:	d106      	bne.n	801118a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011182:	d102      	bne.n	801118a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011184:	4b71      	ldr	r3, [pc, #452]	@ (801134c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8011186:	637b      	str	r3, [r7, #52]	@ 0x34
 8011188:	e010      	b.n	80111ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801118a:	4b6d      	ldr	r3, [pc, #436]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011196:	d106      	bne.n	80111a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8011198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801119e:	d102      	bne.n	80111a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80111a0:	4b6b      	ldr	r3, [pc, #428]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80111a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80111a4:	e002      	b.n	80111ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80111a6:	2300      	movs	r3, #0
 80111a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80111aa:	e003      	b.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80111ac:	e002      	b.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80111ae:	2300      	movs	r3, #0
 80111b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80111b2:	bf00      	nop
          }
        }
        break;
 80111b4:	f001 bfef 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80111b8:	4b61      	ldr	r3, [pc, #388]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80111ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80111be:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80111c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80111c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80111ca:	d036      	beq.n	801123a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80111cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80111d2:	d86b      	bhi.n	80112ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80111d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80111da:	d02b      	beq.n	8011234 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80111dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80111e2:	d863      	bhi.n	80112ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80111e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80111ea:	d01b      	beq.n	8011224 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80111ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80111f2:	d85b      	bhi.n	80112ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80111f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d004      	beq.n	8011204 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80111fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8011200:	d008      	beq.n	8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8011202:	e053      	b.n	80112ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011204:	f107 0320 	add.w	r3, r7, #32
 8011208:	4618      	mov	r0, r3
 801120a:	f7ff f83b 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 801120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011210:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011212:	e04e      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011214:	f107 0314 	add.w	r3, r7, #20
 8011218:	4618      	mov	r0, r3
 801121a:	f7ff f99d 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011222:	e046      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011224:	f107 0308 	add.w	r3, r7, #8
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff faff 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011232:	e03e      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011234:	4b43      	ldr	r3, [pc, #268]	@ (8011344 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8011236:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011238:	e03b      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801123a:	4b41      	ldr	r3, [pc, #260]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011240:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011244:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011246:	4b3e      	ldr	r3, [pc, #248]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f003 0302 	and.w	r3, r3, #2
 801124e:	2b02      	cmp	r3, #2
 8011250:	d10c      	bne.n	801126c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8011252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011254:	2b00      	cmp	r3, #0
 8011256:	d109      	bne.n	801126c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011258:	4b39      	ldr	r3, [pc, #228]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	08db      	lsrs	r3, r3, #3
 801125e:	f003 0303 	and.w	r3, r3, #3
 8011262:	4a39      	ldr	r2, [pc, #228]	@ (8011348 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8011264:	fa22 f303 	lsr.w	r3, r2, r3
 8011268:	637b      	str	r3, [r7, #52]	@ 0x34
 801126a:	e01e      	b.n	80112aa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801126c:	4b34      	ldr	r3, [pc, #208]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011278:	d106      	bne.n	8011288 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801127a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801127c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011280:	d102      	bne.n	8011288 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011282:	4b32      	ldr	r3, [pc, #200]	@ (801134c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8011284:	637b      	str	r3, [r7, #52]	@ 0x34
 8011286:	e010      	b.n	80112aa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011288:	4b2d      	ldr	r3, [pc, #180]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011294:	d106      	bne.n	80112a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8011296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801129c:	d102      	bne.n	80112a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801129e:	4b2c      	ldr	r3, [pc, #176]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80112a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80112a2:	e002      	b.n	80112aa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80112a4:	2300      	movs	r3, #0
 80112a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80112a8:	e003      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80112aa:	e002      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80112ac:	2300      	movs	r3, #0
 80112ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80112b0:	bf00      	nop
          }
        }
        break;
 80112b2:	f001 bf70 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80112b6:	4b22      	ldr	r3, [pc, #136]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80112b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80112bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112c0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80112c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d108      	bne.n	80112da <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80112c8:	f107 0320 	add.w	r3, r7, #32
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fe ffd9 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80112d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80112d6:	f001 bf5e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80112da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112dc:	2b40      	cmp	r3, #64	@ 0x40
 80112de:	d108      	bne.n	80112f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112e0:	f107 0314 	add.w	r3, r7, #20
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7ff f937 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80112ee:	f001 bf52 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80112f2:	2300      	movs	r3, #0
 80112f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80112f6:	f001 bf4e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80112fa:	4b11      	ldr	r3, [pc, #68]	@ (8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80112fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011304:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8011306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011308:	2b00      	cmp	r3, #0
 801130a:	d108      	bne.n	801131e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801130c:	f107 0320 	add.w	r3, r7, #32
 8011310:	4618      	mov	r0, r3
 8011312:	f7fe ffb7 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011318:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801131a:	f001 bf3c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 801131e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011320:	2b80      	cmp	r3, #128	@ 0x80
 8011322:	d108      	bne.n	8011336 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011324:	f107 0314 	add.w	r3, r7, #20
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff f915 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011332:	f001 bf30 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8011336:	2300      	movs	r3, #0
 8011338:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801133a:	f001 bf2c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801133e:	bf00      	nop
 8011340:	44020c00 	.word	0x44020c00
 8011344:	00bb8000 	.word	0x00bb8000
 8011348:	03d09000 	.word	0x03d09000
 801134c:	003d0900 	.word	0x003d0900
 8011350:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8011354:	4b9d      	ldr	r3, [pc, #628]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801135a:	f003 0307 	and.w	r3, r3, #7
 801135e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8011360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011362:	2b00      	cmp	r3, #0
 8011364:	d104      	bne.n	8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8011366:	f7fc ffd7 	bl	800e318 <HAL_RCC_GetPCLK2Freq>
 801136a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 801136c:	f001 bf13 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8011370:	4b96      	ldr	r3, [pc, #600]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801137c:	d10a      	bne.n	8011394 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 801137e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011380:	2b01      	cmp	r3, #1
 8011382:	d107      	bne.n	8011394 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011384:	f107 0314 	add.w	r3, r7, #20
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff f8e5 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	637b      	str	r3, [r7, #52]	@ 0x34
 8011392:	e043      	b.n	801141c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8011394:	4b8d      	ldr	r3, [pc, #564]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801139c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80113a0:	d10a      	bne.n	80113b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80113a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113a4:	2b02      	cmp	r3, #2
 80113a6:	d107      	bne.n	80113b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113a8:	f107 0308 	add.w	r3, r7, #8
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7ff fa3d 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80113b6:	e031      	b.n	801141c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80113b8:	4b84      	ldr	r3, [pc, #528]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0302 	and.w	r3, r3, #2
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d10c      	bne.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80113c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c6:	2b03      	cmp	r3, #3
 80113c8:	d109      	bne.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80113ca:	4b80      	ldr	r3, [pc, #512]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	08db      	lsrs	r3, r3, #3
 80113d0:	f003 0303 	and.w	r3, r3, #3
 80113d4:	4a7e      	ldr	r2, [pc, #504]	@ (80115d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80113d6:	fa22 f303 	lsr.w	r3, r2, r3
 80113da:	637b      	str	r3, [r7, #52]	@ 0x34
 80113dc:	e01e      	b.n	801141c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80113de:	4b7b      	ldr	r3, [pc, #492]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80113e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113ea:	d105      	bne.n	80113f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80113ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d102      	bne.n	80113f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80113f2:	4b78      	ldr	r3, [pc, #480]	@ (80115d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80113f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80113f6:	e011      	b.n	801141c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80113f8:	4b74      	ldr	r3, [pc, #464]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80113fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80113fe:	f003 0302 	and.w	r3, r3, #2
 8011402:	2b02      	cmp	r3, #2
 8011404:	d106      	bne.n	8011414 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8011406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011408:	2b05      	cmp	r3, #5
 801140a:	d103      	bne.n	8011414 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 801140c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011410:	637b      	str	r3, [r7, #52]	@ 0x34
 8011412:	e003      	b.n	801141c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8011414:	2300      	movs	r3, #0
 8011416:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011418:	f001 bebd 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801141c:	f001 bebb 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8011420:	4b6a      	ldr	r3, [pc, #424]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011422:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801142a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 801142c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801142e:	2b00      	cmp	r3, #0
 8011430:	d104      	bne.n	801143c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011432:	f7fc ff5b 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011436:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8011438:	f001 bead 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 801143c:	4b63      	ldr	r3, [pc, #396]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011448:	d10a      	bne.n	8011460 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 801144a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801144c:	2b08      	cmp	r3, #8
 801144e:	d107      	bne.n	8011460 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011450:	f107 0314 	add.w	r3, r7, #20
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff f87f 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	637b      	str	r3, [r7, #52]	@ 0x34
 801145e:	e03d      	b.n	80114dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8011460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011462:	2b10      	cmp	r3, #16
 8011464:	d108      	bne.n	8011478 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011466:	f107 0308 	add.w	r3, r7, #8
 801146a:	4618      	mov	r0, r3
 801146c:	f7ff f9de 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011474:	f001 be8f 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8011478:	4b54      	ldr	r3, [pc, #336]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f003 0302 	and.w	r3, r3, #2
 8011480:	2b02      	cmp	r3, #2
 8011482:	d10c      	bne.n	801149e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8011484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011486:	2b18      	cmp	r3, #24
 8011488:	d109      	bne.n	801149e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801148a:	4b50      	ldr	r3, [pc, #320]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	08db      	lsrs	r3, r3, #3
 8011490:	f003 0303 	and.w	r3, r3, #3
 8011494:	4a4e      	ldr	r2, [pc, #312]	@ (80115d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8011496:	fa22 f303 	lsr.w	r3, r2, r3
 801149a:	637b      	str	r3, [r7, #52]	@ 0x34
 801149c:	e01e      	b.n	80114dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 801149e:	4b4b      	ldr	r3, [pc, #300]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80114a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114aa:	d105      	bne.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80114ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ae:	2b20      	cmp	r3, #32
 80114b0:	d102      	bne.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80114b2:	4b48      	ldr	r3, [pc, #288]	@ (80115d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80114b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80114b6:	e011      	b.n	80114dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80114b8:	4b44      	ldr	r3, [pc, #272]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80114ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80114be:	f003 0302 	and.w	r3, r3, #2
 80114c2:	2b02      	cmp	r3, #2
 80114c4:	d106      	bne.n	80114d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80114c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c8:	2b28      	cmp	r3, #40	@ 0x28
 80114ca:	d103      	bne.n	80114d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80114cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80114d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80114d2:	e003      	b.n	80114dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80114d4:	2300      	movs	r3, #0
 80114d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80114d8:	f001 be5d 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80114dc:	f001 be5b 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80114e0:	4b3a      	ldr	r3, [pc, #232]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80114e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80114e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80114ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80114ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d104      	bne.n	80114fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80114f2:	f7fc fefb 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 80114f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80114f8:	f001 be4d 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80114fc:	4b33      	ldr	r3, [pc, #204]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011508:	d10a      	bne.n	8011520 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 801150a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801150c:	2b40      	cmp	r3, #64	@ 0x40
 801150e:	d107      	bne.n	8011520 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011510:	f107 0314 	add.w	r3, r7, #20
 8011514:	4618      	mov	r0, r3
 8011516:	f7ff f81f 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	637b      	str	r3, [r7, #52]	@ 0x34
 801151e:	e045      	b.n	80115ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8011520:	4b2a      	ldr	r3, [pc, #168]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801152c:	d10a      	bne.n	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 801152e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011530:	2b80      	cmp	r3, #128	@ 0x80
 8011532:	d107      	bne.n	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011534:	f107 0308 	add.w	r3, r7, #8
 8011538:	4618      	mov	r0, r3
 801153a:	f7ff f977 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	637b      	str	r3, [r7, #52]	@ 0x34
 8011542:	e033      	b.n	80115ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8011544:	4b21      	ldr	r3, [pc, #132]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f003 0302 	and.w	r3, r3, #2
 801154c:	2b02      	cmp	r3, #2
 801154e:	d10c      	bne.n	801156a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8011550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011552:	2bc0      	cmp	r3, #192	@ 0xc0
 8011554:	d109      	bne.n	801156a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011556:	4b1d      	ldr	r3, [pc, #116]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	08db      	lsrs	r3, r3, #3
 801155c:	f003 0303 	and.w	r3, r3, #3
 8011560:	4a1b      	ldr	r2, [pc, #108]	@ (80115d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8011562:	fa22 f303 	lsr.w	r3, r2, r3
 8011566:	637b      	str	r3, [r7, #52]	@ 0x34
 8011568:	e020      	b.n	80115ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 801156a:	4b18      	ldr	r3, [pc, #96]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011576:	d106      	bne.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8011578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801157a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801157e:	d102      	bne.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8011580:	4b14      	ldr	r3, [pc, #80]	@ (80115d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8011582:	637b      	str	r3, [r7, #52]	@ 0x34
 8011584:	e012      	b.n	80115ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8011586:	4b11      	ldr	r3, [pc, #68]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8011588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801158c:	f003 0302 	and.w	r3, r3, #2
 8011590:	2b02      	cmp	r3, #2
 8011592:	d107      	bne.n	80115a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8011594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011596:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 801159a:	d103      	bne.n	80115a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 801159c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80115a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80115a2:	e003      	b.n	80115ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80115a4:	2300      	movs	r3, #0
 80115a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80115a8:	f001 bdf5 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80115ac:	f001 bdf3 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80115b0:	4b06      	ldr	r3, [pc, #24]	@ (80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80115b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80115b6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80115ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80115bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d10a      	bne.n	80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80115c2:	f7fc fe93 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 80115c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80115c8:	f001 bde5 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80115cc:	44020c00 	.word	0x44020c00
 80115d0:	03d09000 	.word	0x03d09000
 80115d4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80115d8:	4ba0      	ldr	r3, [pc, #640]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80115e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80115e4:	d10b      	bne.n	80115fe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80115e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115ec:	d107      	bne.n	80115fe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115ee:	f107 0314 	add.w	r3, r7, #20
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fe ffb0 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80115fc:	e047      	b.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80115fe:	4b97      	ldr	r3, [pc, #604]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801160a:	d10b      	bne.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 801160c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801160e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011612:	d107      	bne.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011614:	f107 0308 	add.w	r3, r7, #8
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff f907 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	637b      	str	r3, [r7, #52]	@ 0x34
 8011622:	e034      	b.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8011624:	4b8d      	ldr	r3, [pc, #564]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f003 0302 	and.w	r3, r3, #2
 801162c:	2b02      	cmp	r3, #2
 801162e:	d10d      	bne.n	801164c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8011630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011632:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011636:	d109      	bne.n	801164c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011638:	4b88      	ldr	r3, [pc, #544]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	08db      	lsrs	r3, r3, #3
 801163e:	f003 0303 	and.w	r3, r3, #3
 8011642:	4a87      	ldr	r2, [pc, #540]	@ (8011860 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8011644:	fa22 f303 	lsr.w	r3, r2, r3
 8011648:	637b      	str	r3, [r7, #52]	@ 0x34
 801164a:	e020      	b.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 801164c:	4b83      	ldr	r3, [pc, #524]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011658:	d106      	bne.n	8011668 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 801165a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801165c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011660:	d102      	bne.n	8011668 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8011662:	4b80      	ldr	r3, [pc, #512]	@ (8011864 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8011664:	637b      	str	r3, [r7, #52]	@ 0x34
 8011666:	e012      	b.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8011668:	4b7c      	ldr	r3, [pc, #496]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801166a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801166e:	f003 0302 	and.w	r3, r3, #2
 8011672:	2b02      	cmp	r3, #2
 8011674:	d107      	bne.n	8011686 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8011676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011678:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 801167c:	d103      	bne.n	8011686 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 801167e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011682:	637b      	str	r3, [r7, #52]	@ 0x34
 8011684:	e003      	b.n	801168e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8011686:	2300      	movs	r3, #0
 8011688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801168a:	f001 bd84 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801168e:	f001 bd82 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8011692:	4b72      	ldr	r3, [pc, #456]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011698:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801169c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 801169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d104      	bne.n	80116ae <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80116a4:	f7fc fe22 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 80116a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80116aa:	f001 bd74 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80116ae:	4b6b      	ldr	r3, [pc, #428]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80116b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80116ba:	d10b      	bne.n	80116d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80116bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80116c2:	d107      	bne.n	80116d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116c4:	f107 0314 	add.w	r3, r7, #20
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fe ff45 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80116d2:	e047      	b.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80116d4:	4b61      	ldr	r3, [pc, #388]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80116dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116e0:	d10b      	bne.n	80116fa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80116e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116e8:	d107      	bne.n	80116fa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116ea:	f107 0308 	add.w	r3, r7, #8
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff f89c 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80116f8:	e034      	b.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80116fa:	4b58      	ldr	r3, [pc, #352]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f003 0302 	and.w	r3, r3, #2
 8011702:	2b02      	cmp	r3, #2
 8011704:	d10d      	bne.n	8011722 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8011706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801170c:	d109      	bne.n	8011722 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801170e:	4b53      	ldr	r3, [pc, #332]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	08db      	lsrs	r3, r3, #3
 8011714:	f003 0303 	and.w	r3, r3, #3
 8011718:	4a51      	ldr	r2, [pc, #324]	@ (8011860 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 801171a:	fa22 f303 	lsr.w	r3, r2, r3
 801171e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011720:	e020      	b.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8011722:	4b4e      	ldr	r3, [pc, #312]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801172a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801172e:	d106      	bne.n	801173e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8011730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011736:	d102      	bne.n	801173e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8011738:	4b4a      	ldr	r3, [pc, #296]	@ (8011864 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 801173a:	637b      	str	r3, [r7, #52]	@ 0x34
 801173c:	e012      	b.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 801173e:	4b47      	ldr	r3, [pc, #284]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011744:	f003 0302 	and.w	r3, r3, #2
 8011748:	2b02      	cmp	r3, #2
 801174a:	d107      	bne.n	801175c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 801174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8011752:	d103      	bne.n	801175c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8011754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011758:	637b      	str	r3, [r7, #52]	@ 0x34
 801175a:	e003      	b.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 801175c:	2300      	movs	r3, #0
 801175e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011760:	f001 bd19 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011764:	f001 bd17 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8011768:	4b3c      	ldr	r3, [pc, #240]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 801176a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801176e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8011772:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8011774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011776:	2b00      	cmp	r3, #0
 8011778:	d104      	bne.n	8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801177a:	f7fc fdb7 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 801177e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8011780:	f001 bd09 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8011784:	4b35      	ldr	r3, [pc, #212]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801178c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011790:	d10b      	bne.n	80117aa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8011792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011798:	d107      	bne.n	80117aa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801179a:	f107 0314 	add.w	r3, r7, #20
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fe feda 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80117a4:	69bb      	ldr	r3, [r7, #24]
 80117a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80117a8:	e047      	b.n	801183a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80117aa:	4b2c      	ldr	r3, [pc, #176]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80117b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80117b6:	d10b      	bne.n	80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80117b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117be:	d107      	bne.n	80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117c0:	f107 0308 	add.w	r3, r7, #8
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7ff f831 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80117ce:	e034      	b.n	801183a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80117d0:	4b22      	ldr	r3, [pc, #136]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f003 0302 	and.w	r3, r3, #2
 80117d8:	2b02      	cmp	r3, #2
 80117da:	d10d      	bne.n	80117f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80117dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117de:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80117e2:	d109      	bne.n	80117f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80117e4:	4b1d      	ldr	r3, [pc, #116]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	08db      	lsrs	r3, r3, #3
 80117ea:	f003 0303 	and.w	r3, r3, #3
 80117ee:	4a1c      	ldr	r2, [pc, #112]	@ (8011860 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80117f0:	fa22 f303 	lsr.w	r3, r2, r3
 80117f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80117f6:	e020      	b.n	801183a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80117f8:	4b18      	ldr	r3, [pc, #96]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011804:	d106      	bne.n	8011814 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8011806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801180c:	d102      	bne.n	8011814 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 801180e:	4b15      	ldr	r3, [pc, #84]	@ (8011864 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8011810:	637b      	str	r3, [r7, #52]	@ 0x34
 8011812:	e012      	b.n	801183a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8011814:	4b11      	ldr	r3, [pc, #68]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801181a:	f003 0302 	and.w	r3, r3, #2
 801181e:	2b02      	cmp	r3, #2
 8011820:	d107      	bne.n	8011832 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8011822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011824:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8011828:	d103      	bne.n	8011832 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 801182a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801182e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011830:	e003      	b.n	801183a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8011832:	2300      	movs	r3, #0
 8011834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011836:	f001 bcae 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801183a:	f001 bcac 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 801183e:	4b07      	ldr	r3, [pc, #28]	@ (801185c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8011840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011844:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8011848:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 801184a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801184c:	2b00      	cmp	r3, #0
 801184e:	d10b      	bne.n	8011868 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011850:	f7fc fd4c 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011854:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8011856:	f001 bc9e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801185a:	bf00      	nop
 801185c:	44020c00 	.word	0x44020c00
 8011860:	03d09000 	.word	0x03d09000
 8011864:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8011868:	4ba0      	ldr	r3, [pc, #640]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011874:	d10b      	bne.n	801188e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8011876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011878:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801187c:	d107      	bne.n	801188e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801187e:	f107 0314 	add.w	r3, r7, #20
 8011882:	4618      	mov	r0, r3
 8011884:	f7fe fe68 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	637b      	str	r3, [r7, #52]	@ 0x34
 801188c:	e047      	b.n	801191e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 801188e:	4b97      	ldr	r3, [pc, #604]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801189a:	d10b      	bne.n	80118b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 801189c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801189e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80118a2:	d107      	bne.n	80118b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118a4:	f107 0308 	add.w	r3, r7, #8
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fe ffbf 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80118b2:	e034      	b.n	801191e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80118b4:	4b8d      	ldr	r3, [pc, #564]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f003 0302 	and.w	r3, r3, #2
 80118bc:	2b02      	cmp	r3, #2
 80118be:	d10d      	bne.n	80118dc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80118c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80118c6:	d109      	bne.n	80118dc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80118c8:	4b88      	ldr	r3, [pc, #544]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	08db      	lsrs	r3, r3, #3
 80118ce:	f003 0303 	and.w	r3, r3, #3
 80118d2:	4a87      	ldr	r2, [pc, #540]	@ (8011af0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80118d4:	fa22 f303 	lsr.w	r3, r2, r3
 80118d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80118da:	e020      	b.n	801191e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80118dc:	4b83      	ldr	r3, [pc, #524]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118e8:	d106      	bne.n	80118f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80118ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80118f0:	d102      	bne.n	80118f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80118f2:	4b80      	ldr	r3, [pc, #512]	@ (8011af4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80118f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80118f6:	e012      	b.n	801191e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80118f8:	4b7c      	ldr	r3, [pc, #496]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80118fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80118fe:	f003 0302 	and.w	r3, r3, #2
 8011902:	2b02      	cmp	r3, #2
 8011904:	d107      	bne.n	8011916 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8011906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011908:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 801190c:	d103      	bne.n	8011916 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 801190e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011912:	637b      	str	r3, [r7, #52]	@ 0x34
 8011914:	e003      	b.n	801191e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8011916:	2300      	movs	r3, #0
 8011918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801191a:	f001 bc3c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801191e:	f001 bc3a 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8011922:	4b72      	ldr	r3, [pc, #456]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011928:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801192c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 801192e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011930:	2b00      	cmp	r3, #0
 8011932:	d104      	bne.n	801193e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011934:	f7fc fcda 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011938:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 801193a:	f001 bc2c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 801193e:	4b6b      	ldr	r3, [pc, #428]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011946:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801194a:	d10b      	bne.n	8011964 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 801194c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011952:	d107      	bne.n	8011964 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011954:	f107 0314 	add.w	r3, r7, #20
 8011958:	4618      	mov	r0, r3
 801195a:	f7fe fdfd 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	637b      	str	r3, [r7, #52]	@ 0x34
 8011962:	e047      	b.n	80119f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8011964:	4b61      	ldr	r3, [pc, #388]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801196c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011970:	d10b      	bne.n	801198a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8011972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011974:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011978:	d107      	bne.n	801198a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801197a:	f107 0308 	add.w	r3, r7, #8
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe ff54 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	637b      	str	r3, [r7, #52]	@ 0x34
 8011988:	e034      	b.n	80119f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 801198a:	4b58      	ldr	r3, [pc, #352]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f003 0302 	and.w	r3, r3, #2
 8011992:	2b02      	cmp	r3, #2
 8011994:	d10d      	bne.n	80119b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8011996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011998:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801199c:	d109      	bne.n	80119b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801199e:	4b53      	ldr	r3, [pc, #332]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	08db      	lsrs	r3, r3, #3
 80119a4:	f003 0303 	and.w	r3, r3, #3
 80119a8:	4a51      	ldr	r2, [pc, #324]	@ (8011af0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80119aa:	fa22 f303 	lsr.w	r3, r2, r3
 80119ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80119b0:	e020      	b.n	80119f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80119b2:	4b4e      	ldr	r3, [pc, #312]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80119ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119be:	d106      	bne.n	80119ce <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80119c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80119c6:	d102      	bne.n	80119ce <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80119c8:	4b4a      	ldr	r3, [pc, #296]	@ (8011af4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80119ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80119cc:	e012      	b.n	80119f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80119ce:	4b47      	ldr	r3, [pc, #284]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80119d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80119d4:	f003 0302 	and.w	r3, r3, #2
 80119d8:	2b02      	cmp	r3, #2
 80119da:	d107      	bne.n	80119ec <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80119dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119de:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80119e2:	d103      	bne.n	80119ec <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80119e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80119e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80119ea:	e003      	b.n	80119f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80119ec:	2300      	movs	r3, #0
 80119ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80119f0:	f001 bbd1 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80119f4:	f001 bbcf 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80119f8:	4b3c      	ldr	r3, [pc, #240]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80119fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80119fe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8011a02:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d104      	bne.n	8011a14 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011a0a:	f7fc fc6f 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011a0e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8011a10:	f001 bbc1 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8011a14:	4b35      	ldr	r3, [pc, #212]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011a20:	d10b      	bne.n	8011a3a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8011a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a28:	d107      	bne.n	8011a3a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a2a:	f107 0314 	add.w	r3, r7, #20
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fe fd92 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a38:	e047      	b.n	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8011a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011a46:	d10b      	bne.n	8011a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8011a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011a4e:	d107      	bne.n	8011a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a50:	f107 0308 	add.w	r3, r7, #8
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe fee9 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a5e:	e034      	b.n	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8011a60:	4b22      	ldr	r3, [pc, #136]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f003 0302 	and.w	r3, r3, #2
 8011a68:	2b02      	cmp	r3, #2
 8011a6a:	d10d      	bne.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8011a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011a72:	d109      	bne.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011a74:	4b1d      	ldr	r3, [pc, #116]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	08db      	lsrs	r3, r3, #3
 8011a7a:	f003 0303 	and.w	r3, r3, #3
 8011a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8011af0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8011a80:	fa22 f303 	lsr.w	r3, r2, r3
 8011a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a86:	e020      	b.n	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8011a88:	4b18      	ldr	r3, [pc, #96]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a94:	d106      	bne.n	8011aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8011a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011a9c:	d102      	bne.n	8011aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8011a9e:	4b15      	ldr	r3, [pc, #84]	@ (8011af4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8011aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011aa2:	e012      	b.n	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8011aa4:	4b11      	ldr	r3, [pc, #68]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011aaa:	f003 0302 	and.w	r3, r3, #2
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d107      	bne.n	8011ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011ab8:	d103      	bne.n	8011ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8011aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ac0:	e003      	b.n	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011ac6:	f001 bb66 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011aca:	f001 bb64 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8011ace:	4b07      	ldr	r3, [pc, #28]	@ (8011aec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8011ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011ad4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8011ad8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8011ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d10b      	bne.n	8011af8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011ae0:	f7fc fc04 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011ae4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8011ae6:	f001 bb56 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011aea:	bf00      	nop
 8011aec:	44020c00 	.word	0x44020c00
 8011af0:	03d09000 	.word	0x03d09000
 8011af4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8011af8:	4ba1      	ldr	r3, [pc, #644]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011b00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011b04:	d10b      	bne.n	8011b1e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8011b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011b0c:	d107      	bne.n	8011b1e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b0e:	f107 0314 	add.w	r3, r7, #20
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fe fd20 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b1c:	e047      	b.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8011b1e:	4b98      	ldr	r3, [pc, #608]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011b2a:	d10b      	bne.n	8011b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8011b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b32:	d107      	bne.n	8011b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b34:	f107 0308 	add.w	r3, r7, #8
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7fe fe77 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b42:	e034      	b.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8011b44:	4b8e      	ldr	r3, [pc, #568]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f003 0302 	and.w	r3, r3, #2
 8011b4c:	2b02      	cmp	r3, #2
 8011b4e:	d10d      	bne.n	8011b6c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8011b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b52:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8011b56:	d109      	bne.n	8011b6c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011b58:	4b89      	ldr	r3, [pc, #548]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	08db      	lsrs	r3, r3, #3
 8011b5e:	f003 0303 	and.w	r3, r3, #3
 8011b62:	4a88      	ldr	r2, [pc, #544]	@ (8011d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8011b64:	fa22 f303 	lsr.w	r3, r2, r3
 8011b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b6a:	e020      	b.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8011b6c:	4b84      	ldr	r3, [pc, #528]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b78:	d106      	bne.n	8011b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8011b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011b80:	d102      	bne.n	8011b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8011b82:	4b81      	ldr	r3, [pc, #516]	@ (8011d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8011b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b86:	e012      	b.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8011b88:	4b7d      	ldr	r3, [pc, #500]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011b8e:	f003 0302 	and.w	r3, r3, #2
 8011b92:	2b02      	cmp	r3, #2
 8011b94:	d107      	bne.n	8011ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8011b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b98:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8011b9c:	d103      	bne.n	8011ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8011b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ba4:	e003      	b.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011baa:	f001 baf4 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011bae:	f001 baf2 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8011bb2:	4b73      	ldr	r3, [pc, #460]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011bb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011bb8:	f003 0307 	and.w	r3, r3, #7
 8011bbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8011bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d104      	bne.n	8011bce <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011bc4:	f7fc fb92 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011bc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8011bca:	f001 bae4 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8011bce:	4b6c      	ldr	r3, [pc, #432]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011bda:	d10a      	bne.n	8011bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8011bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d107      	bne.n	8011bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011be2:	f107 0314 	add.w	r3, r7, #20
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fe fcb6 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bf0:	e043      	b.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8011bf2:	4b63      	ldr	r3, [pc, #396]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011bfe:	d10a      	bne.n	8011c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8011c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c02:	2b02      	cmp	r3, #2
 8011c04:	d107      	bne.n	8011c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c06:	f107 0308 	add.w	r3, r7, #8
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe fe0e 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c14:	e031      	b.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8011c16:	4b5a      	ldr	r3, [pc, #360]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f003 0302 	and.w	r3, r3, #2
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d10c      	bne.n	8011c3c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8011c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c24:	2b03      	cmp	r3, #3
 8011c26:	d109      	bne.n	8011c3c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011c28:	4b55      	ldr	r3, [pc, #340]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	08db      	lsrs	r3, r3, #3
 8011c2e:	f003 0303 	and.w	r3, r3, #3
 8011c32:	4a54      	ldr	r2, [pc, #336]	@ (8011d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8011c34:	fa22 f303 	lsr.w	r3, r2, r3
 8011c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c3a:	e01e      	b.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8011c3c:	4b50      	ldr	r3, [pc, #320]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c48:	d105      	bne.n	8011c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8011c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c4c:	2b04      	cmp	r3, #4
 8011c4e:	d102      	bne.n	8011c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8011c50:	4b4d      	ldr	r3, [pc, #308]	@ (8011d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8011c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c54:	e011      	b.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8011c56:	4b4a      	ldr	r3, [pc, #296]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011c5c:	f003 0302 	and.w	r3, r3, #2
 8011c60:	2b02      	cmp	r3, #2
 8011c62:	d106      	bne.n	8011c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8011c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c66:	2b05      	cmp	r3, #5
 8011c68:	d103      	bne.n	8011c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8011c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c70:	e003      	b.n	8011c7a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8011c72:	2300      	movs	r3, #0
 8011c74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011c76:	f001 ba8e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011c7a:	f001 ba8c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8011c7e:	4b40      	ldr	r3, [pc, #256]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011c80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c88:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8011c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d104      	bne.n	8011c9a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011c90:	f7fc fb2c 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011c94:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8011c96:	f001 ba7e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8011c9a:	4b39      	ldr	r3, [pc, #228]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011ca6:	d10a      	bne.n	8011cbe <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8011ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011caa:	2b10      	cmp	r3, #16
 8011cac:	d107      	bne.n	8011cbe <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cae:	f107 0314 	add.w	r3, r7, #20
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fe fc50 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cbc:	e043      	b.n	8011d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8011cbe:	4b30      	ldr	r3, [pc, #192]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011cca:	d10a      	bne.n	8011ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8011ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cce:	2b20      	cmp	r3, #32
 8011cd0:	d107      	bne.n	8011ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cd2:	f107 0308 	add.w	r3, r7, #8
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fe fda8 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ce0:	e031      	b.n	8011d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8011ce2:	4b27      	ldr	r3, [pc, #156]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f003 0302 	and.w	r3, r3, #2
 8011cea:	2b02      	cmp	r3, #2
 8011cec:	d10c      	bne.n	8011d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8011cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cf0:	2b30      	cmp	r3, #48	@ 0x30
 8011cf2:	d109      	bne.n	8011d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011cf4:	4b22      	ldr	r3, [pc, #136]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	08db      	lsrs	r3, r3, #3
 8011cfa:	f003 0303 	and.w	r3, r3, #3
 8011cfe:	4a21      	ldr	r2, [pc, #132]	@ (8011d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8011d00:	fa22 f303 	lsr.w	r3, r2, r3
 8011d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d06:	e01e      	b.n	8011d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8011d08:	4b1d      	ldr	r3, [pc, #116]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d14:	d105      	bne.n	8011d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8011d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d18:	2b40      	cmp	r3, #64	@ 0x40
 8011d1a:	d102      	bne.n	8011d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8011d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8011d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8011d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d20:	e011      	b.n	8011d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8011d22:	4b17      	ldr	r3, [pc, #92]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011d28:	f003 0302 	and.w	r3, r3, #2
 8011d2c:	2b02      	cmp	r3, #2
 8011d2e:	d106      	bne.n	8011d3e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8011d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d32:	2b50      	cmp	r3, #80	@ 0x50
 8011d34:	d103      	bne.n	8011d3e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8011d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d3c:	e003      	b.n	8011d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011d42:	f001 ba28 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011d46:	f001 ba26 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8011d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d50:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8011d54:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8011d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d104      	bne.n	8011d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8011d5c:	f7fc faf2 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 8011d60:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8011d62:	f001 ba18 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8011d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011d6c:	d10e      	bne.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d6e:	f107 0314 	add.w	r3, r7, #20
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7fe fbf0 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011d7c:	f001 ba0b 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011d80:	44020c00 	.word	0x44020c00
 8011d84:	03d09000 	.word	0x03d09000
 8011d88:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8011d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011d92:	d108      	bne.n	8011da6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d94:	f107 0308 	add.w	r3, r7, #8
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7fe fd47 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011da2:	f001 b9f8 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8011da6:	4ba4      	ldr	r3, [pc, #656]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f003 0302 	and.w	r3, r3, #2
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d10d      	bne.n	8011dce <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8011db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011db8:	d109      	bne.n	8011dce <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011dba:	4b9f      	ldr	r3, [pc, #636]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	08db      	lsrs	r3, r3, #3
 8011dc0:	f003 0303 	and.w	r3, r3, #3
 8011dc4:	4a9d      	ldr	r2, [pc, #628]	@ (801203c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8011dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8011dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8011dcc:	e020      	b.n	8011e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8011dce:	4b9a      	ldr	r3, [pc, #616]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dda:	d106      	bne.n	8011dea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8011ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011de2:	d102      	bne.n	8011dea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8011de4:	4b96      	ldr	r3, [pc, #600]	@ (8012040 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8011de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8011de8:	e012      	b.n	8011e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8011dea:	4b93      	ldr	r3, [pc, #588]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011df0:	f003 0302 	and.w	r3, r3, #2
 8011df4:	2b02      	cmp	r3, #2
 8011df6:	d107      	bne.n	8011e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8011df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dfa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011dfe:	d103      	bne.n	8011e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8011e00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e06:	e003      	b.n	8011e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8011e08:	2300      	movs	r3, #0
 8011e0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011e0c:	f001 b9c3 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011e10:	f001 b9c1 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8011e14:	4b88      	ldr	r3, [pc, #544]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011e1a:	f003 0307 	and.w	r3, r3, #7
 8011e1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8011e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d104      	bne.n	8011e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8011e26:	f7fc fa45 	bl	800e2b4 <HAL_RCC_GetHCLKFreq>
 8011e2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8011e2c:	f001 b9b3 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8011e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d104      	bne.n	8011e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8011e36:	f7fc f911 	bl	800e05c <HAL_RCC_GetSysClockFreq>
 8011e3a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8011e3c:	f001 b9ab 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8011e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d108      	bne.n	8011e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e46:	f107 0314 	add.w	r3, r7, #20
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fe fb84 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011e54:	f001 b99f 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8011e58:	4b77      	ldr	r3, [pc, #476]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011e64:	d105      	bne.n	8011e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8011e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e68:	2b03      	cmp	r3, #3
 8011e6a:	d102      	bne.n	8011e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8011e6c:	4b75      	ldr	r3, [pc, #468]	@ (8012044 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8011e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e70:	e023      	b.n	8011eba <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8011e72:	4b71      	ldr	r3, [pc, #452]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f003 0302 	and.w	r3, r3, #2
 8011e7a:	2b02      	cmp	r3, #2
 8011e7c:	d10c      	bne.n	8011e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e80:	2b04      	cmp	r3, #4
 8011e82:	d109      	bne.n	8011e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011e84:	4b6c      	ldr	r3, [pc, #432]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	08db      	lsrs	r3, r3, #3
 8011e8a:	f003 0303 	and.w	r3, r3, #3
 8011e8e:	4a6b      	ldr	r2, [pc, #428]	@ (801203c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8011e90:	fa22 f303 	lsr.w	r3, r2, r3
 8011e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e96:	e010      	b.n	8011eba <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8011e98:	4b67      	ldr	r3, [pc, #412]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ea4:	d105      	bne.n	8011eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8011ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea8:	2b05      	cmp	r3, #5
 8011eaa:	d102      	bne.n	8011eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8011eac:	4b64      	ldr	r3, [pc, #400]	@ (8012040 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8011eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eb0:	e003      	b.n	8011eba <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011eb6:	f001 b96e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011eba:	f001 b96c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8011ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011ec4:	f003 0308 	and.w	r3, r3, #8
 8011ec8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8011eca:	4b5b      	ldr	r3, [pc, #364]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011ed0:	f003 0302 	and.w	r3, r3, #2
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d106      	bne.n	8011ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d103      	bne.n	8011ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8011ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ee4:	e012      	b.n	8011f0c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8011ee6:	4b54      	ldr	r3, [pc, #336]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011ef4:	d106      	bne.n	8011f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8011ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef8:	2b08      	cmp	r3, #8
 8011efa:	d103      	bne.n	8011f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8011efc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8011f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f02:	e003      	b.n	8011f0c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8011f04:	2300      	movs	r3, #0
 8011f06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8011f08:	f001 b945 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011f0c:	f001 b943 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8011f10:	4b49      	ldr	r3, [pc, #292]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011f12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011f16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011f1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d104      	bne.n	8011f2c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011f22:	f7fc f9e3 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011f26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8011f28:	f001 b935 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8011f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f32:	d108      	bne.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011f34:	f107 0308 	add.w	r3, r7, #8
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fe fc77 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011f42:	f001 b928 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8011f46:	4b3c      	ldr	r3, [pc, #240]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f003 0302 	and.w	r3, r3, #2
 8011f4e:	2b02      	cmp	r3, #2
 8011f50:	d10d      	bne.n	8011f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8011f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011f58:	d109      	bne.n	8011f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011f5a:	4b37      	ldr	r3, [pc, #220]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	08db      	lsrs	r3, r3, #3
 8011f60:	f003 0303 	and.w	r3, r3, #3
 8011f64:	4a35      	ldr	r2, [pc, #212]	@ (801203c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8011f66:	fa22 f303 	lsr.w	r3, r2, r3
 8011f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f6c:	e011      	b.n	8011f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8011f6e:	4b32      	ldr	r3, [pc, #200]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f7a:	d106      	bne.n	8011f8a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011f82:	d102      	bne.n	8011f8a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8011f84:	4b2e      	ldr	r3, [pc, #184]	@ (8012040 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8011f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f88:	e003      	b.n	8011f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011f8e:	f001 b902 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011f92:	f001 b900 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8011f96:	4b28      	ldr	r3, [pc, #160]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011f98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011f9c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8011fa0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8011fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d104      	bne.n	8011fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8011fa8:	f7fc f9a0 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8011fac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8011fae:	f001 b8f2 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8011fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011fb8:	d108      	bne.n	8011fcc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011fba:	f107 0308 	add.w	r3, r7, #8
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe fc34 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011fc8:	f001 b8e5 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8011fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f003 0302 	and.w	r3, r3, #2
 8011fd4:	2b02      	cmp	r3, #2
 8011fd6:	d10d      	bne.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8011fde:	d109      	bne.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011fe0:	4b15      	ldr	r3, [pc, #84]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	08db      	lsrs	r3, r3, #3
 8011fe6:	f003 0303 	and.w	r3, r3, #3
 8011fea:	4a14      	ldr	r2, [pc, #80]	@ (801203c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8011fec:	fa22 f303 	lsr.w	r3, r2, r3
 8011ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ff2:	e011      	b.n	8012018 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8011ff4:	4b10      	ldr	r3, [pc, #64]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012000:	d106      	bne.n	8012010 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8012002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012004:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8012008:	d102      	bne.n	8012010 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 801200a:	4b0d      	ldr	r3, [pc, #52]	@ (8012040 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 801200c:	637b      	str	r3, [r7, #52]	@ 0x34
 801200e:	e003      	b.n	8012018 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8012010:	2300      	movs	r3, #0
 8012012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012014:	f001 b8bf 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012018:	f001 b8bd 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801201c:	4b06      	ldr	r3, [pc, #24]	@ (8012038 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801201e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012022:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8012026:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8012028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801202a:	2b00      	cmp	r3, #0
 801202c:	d10c      	bne.n	8012048 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801202e:	f7fc f989 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 8012032:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8012034:	f001 b8af 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012038:	44020c00 	.word	0x44020c00
 801203c:	03d09000 	.word	0x03d09000
 8012040:	003d0900 	.word	0x003d0900
 8012044:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8012048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801204a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801204e:	d108      	bne.n	8012062 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012050:	f107 0308 	add.w	r3, r7, #8
 8012054:	4618      	mov	r0, r3
 8012056:	f7fe fbe9 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801205e:	f001 b89a 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8012062:	4b9f      	ldr	r3, [pc, #636]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f003 0302 	and.w	r3, r3, #2
 801206a:	2b02      	cmp	r3, #2
 801206c:	d10d      	bne.n	801208a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 801206e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012074:	d109      	bne.n	801208a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012076:	4b9a      	ldr	r3, [pc, #616]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	08db      	lsrs	r3, r3, #3
 801207c:	f003 0303 	and.w	r3, r3, #3
 8012080:	4a98      	ldr	r2, [pc, #608]	@ (80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8012082:	fa22 f303 	lsr.w	r3, r2, r3
 8012086:	637b      	str	r3, [r7, #52]	@ 0x34
 8012088:	e011      	b.n	80120ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 801208a:	4b95      	ldr	r3, [pc, #596]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012096:	d106      	bne.n	80120a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8012098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801209a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801209e:	d102      	bne.n	80120a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80120a0:	4b91      	ldr	r3, [pc, #580]	@ (80122e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80120a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80120a4:	e003      	b.n	80120ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80120a6:	2300      	movs	r3, #0
 80120a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80120aa:	f001 b874 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80120ae:	f001 b872 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80120b2:	4b8b      	ldr	r3, [pc, #556]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80120b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80120b8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80120bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80120be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d104      	bne.n	80120ce <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80120c4:	f7fc f93e 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 80120c8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80120ca:	f001 b864 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80120ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80120d4:	d108      	bne.n	80120e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120d6:	f107 0308 	add.w	r3, r7, #8
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fe fba6 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80120e4:	f001 b857 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80120e8:	4b7d      	ldr	r3, [pc, #500]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f003 0302 	and.w	r3, r3, #2
 80120f0:	2b02      	cmp	r3, #2
 80120f2:	d10d      	bne.n	8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80120f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80120fa:	d109      	bne.n	8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80120fc:	4b78      	ldr	r3, [pc, #480]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	08db      	lsrs	r3, r3, #3
 8012102:	f003 0303 	and.w	r3, r3, #3
 8012106:	4a77      	ldr	r2, [pc, #476]	@ (80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8012108:	fa22 f303 	lsr.w	r3, r2, r3
 801210c:	637b      	str	r3, [r7, #52]	@ 0x34
 801210e:	e011      	b.n	8012134 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8012110:	4b73      	ldr	r3, [pc, #460]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801211c:	d106      	bne.n	801212c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 801211e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012120:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8012124:	d102      	bne.n	801212c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8012126:	4b70      	ldr	r3, [pc, #448]	@ (80122e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8012128:	637b      	str	r3, [r7, #52]	@ 0x34
 801212a:	e003      	b.n	8012134 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 801212c:	2300      	movs	r3, #0
 801212e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012130:	f001 b831 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012134:	f001 b82f 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8012138:	4b69      	ldr	r3, [pc, #420]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801213a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801213e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8012142:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8012144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012146:	2b00      	cmp	r3, #0
 8012148:	d104      	bne.n	8012154 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801214a:	f7fc f8cf 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 801214e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8012150:	f001 b821 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8012154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801215a:	d108      	bne.n	801216e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801215c:	f107 0308 	add.w	r3, r7, #8
 8012160:	4618      	mov	r0, r3
 8012162:	f7fe fb63 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801216a:	f001 b814 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 801216e:	4b5c      	ldr	r3, [pc, #368]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f003 0302 	and.w	r3, r3, #2
 8012176:	2b02      	cmp	r3, #2
 8012178:	d10e      	bne.n	8012198 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 801217a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801217c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012180:	d10a      	bne.n	8012198 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012182:	4b57      	ldr	r3, [pc, #348]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	08db      	lsrs	r3, r3, #3
 8012188:	f003 0303 	and.w	r3, r3, #3
 801218c:	4a55      	ldr	r2, [pc, #340]	@ (80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 801218e:	fa22 f303 	lsr.w	r3, r2, r3
 8012192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012194:	f000 bfff 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8012198:	2300      	movs	r3, #0
 801219a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801219c:	f000 bffb 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80121a0:	4b4f      	ldr	r3, [pc, #316]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80121a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80121a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80121aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80121ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80121b2:	d056      	beq.n	8012262 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80121b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80121ba:	f200 808b 	bhi.w	80122d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80121be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121c4:	d03e      	beq.n	8012244 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80121c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121cc:	f200 8082 	bhi.w	80122d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80121d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80121d6:	d027      	beq.n	8012228 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80121d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80121de:	d879      	bhi.n	80122d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80121e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121e6:	d017      	beq.n	8012218 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80121e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121ee:	d871      	bhi.n	80122d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80121f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d004      	beq.n	8012200 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80121f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80121fc:	d004      	beq.n	8012208 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80121fe:	e069      	b.n	80122d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8012200:	f7fc f8a0 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 8012204:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012206:	e068      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012208:	f107 0314 	add.w	r3, r7, #20
 801220c:	4618      	mov	r0, r3
 801220e:	f7fe f9a3 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012216:	e060      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012218:	f107 0308 	add.w	r3, r7, #8
 801221c:	4618      	mov	r0, r3
 801221e:	f7fe fb05 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012226:	e058      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012228:	4b2d      	ldr	r3, [pc, #180]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801222a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801222e:	f003 0302 	and.w	r3, r3, #2
 8012232:	2b02      	cmp	r3, #2
 8012234:	d103      	bne.n	801223e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8012236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801223a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801223c:	e04d      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012242:	e04a      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8012244:	4b26      	ldr	r3, [pc, #152]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801224a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801224e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012252:	d103      	bne.n	801225c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8012254:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8012258:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801225a:	e03e      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801225c:	2300      	movs	r3, #0
 801225e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012260:	e03b      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012262:	4b1f      	ldr	r3, [pc, #124]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012268:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801226c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801226e:	4b1c      	ldr	r3, [pc, #112]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	2b02      	cmp	r3, #2
 8012278:	d10c      	bne.n	8012294 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 801227a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801227c:	2b00      	cmp	r3, #0
 801227e:	d109      	bne.n	8012294 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012280:	4b17      	ldr	r3, [pc, #92]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	08db      	lsrs	r3, r3, #3
 8012286:	f003 0303 	and.w	r3, r3, #3
 801228a:	4a16      	ldr	r2, [pc, #88]	@ (80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 801228c:	fa22 f303 	lsr.w	r3, r2, r3
 8012290:	637b      	str	r3, [r7, #52]	@ 0x34
 8012292:	e01e      	b.n	80122d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012294:	4b12      	ldr	r3, [pc, #72]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801229c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122a0:	d106      	bne.n	80122b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80122a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122a8:	d102      	bne.n	80122b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80122aa:	4b0f      	ldr	r3, [pc, #60]	@ (80122e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80122ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80122ae:	e010      	b.n	80122d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80122b0:	4b0b      	ldr	r3, [pc, #44]	@ (80122e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80122b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80122bc:	d106      	bne.n	80122cc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80122be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80122c4:	d102      	bne.n	80122cc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80122c6:	4b09      	ldr	r3, [pc, #36]	@ (80122ec <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80122c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80122ca:	e002      	b.n	80122d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80122cc:	2300      	movs	r3, #0
 80122ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80122d0:	e003      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80122d2:	e002      	b.n	80122da <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80122d4:	2300      	movs	r3, #0
 80122d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80122d8:	bf00      	nop
          }
        }
        break;
 80122da:	f000 bf5c 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80122de:	bf00      	nop
 80122e0:	44020c00 	.word	0x44020c00
 80122e4:	03d09000 	.word	0x03d09000
 80122e8:	003d0900 	.word	0x003d0900
 80122ec:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80122f0:	4b9e      	ldr	r3, [pc, #632]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80122f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80122f6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80122fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80122fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8012302:	d056      	beq.n	80123b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8012304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012306:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801230a:	f200 808b 	bhi.w	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 801230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012314:	d03e      	beq.n	8012394 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8012316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801231c:	f200 8082 	bhi.w	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012322:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012326:	d027      	beq.n	8012378 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8012328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801232a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801232e:	d879      	bhi.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012336:	d017      	beq.n	8012368 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8012338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801233a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801233e:	d871      	bhi.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8012340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012342:	2b00      	cmp	r3, #0
 8012344:	d004      	beq.n	8012350 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8012346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801234c:	d004      	beq.n	8012358 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 801234e:	e069      	b.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8012350:	f7fb ffcc 	bl	800e2ec <HAL_RCC_GetPCLK1Freq>
 8012354:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012356:	e068      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012358:	f107 0314 	add.w	r3, r7, #20
 801235c:	4618      	mov	r0, r3
 801235e:	f7fe f8fb 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012366:	e060      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012368:	f107 0308 	add.w	r3, r7, #8
 801236c:	4618      	mov	r0, r3
 801236e:	f7fe fa5d 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012376:	e058      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012378:	4b7c      	ldr	r3, [pc, #496]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 801237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801237e:	f003 0302 	and.w	r3, r3, #2
 8012382:	2b02      	cmp	r3, #2
 8012384:	d103      	bne.n	801238e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8012386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801238a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801238c:	e04d      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012392:	e04a      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8012394:	4b75      	ldr	r3, [pc, #468]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801239a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801239e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80123a2:	d103      	bne.n	80123ac <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80123a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80123a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80123aa:	e03e      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80123ac:	2300      	movs	r3, #0
 80123ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80123b0:	e03b      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80123b2:	4b6e      	ldr	r3, [pc, #440]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80123b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80123b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80123bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80123be:	4b6b      	ldr	r3, [pc, #428]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f003 0302 	and.w	r3, r3, #2
 80123c6:	2b02      	cmp	r3, #2
 80123c8:	d10c      	bne.n	80123e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80123ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d109      	bne.n	80123e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80123d0:	4b66      	ldr	r3, [pc, #408]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	08db      	lsrs	r3, r3, #3
 80123d6:	f003 0303 	and.w	r3, r3, #3
 80123da:	4a65      	ldr	r2, [pc, #404]	@ (8012570 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80123dc:	fa22 f303 	lsr.w	r3, r2, r3
 80123e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80123e2:	e01e      	b.n	8012422 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80123e4:	4b61      	ldr	r3, [pc, #388]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80123ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123f0:	d106      	bne.n	8012400 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80123f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123f8:	d102      	bne.n	8012400 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80123fa:	4b5e      	ldr	r3, [pc, #376]	@ (8012574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80123fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80123fe:	e010      	b.n	8012422 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012400:	4b5a      	ldr	r3, [pc, #360]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801240c:	d106      	bne.n	801241c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 801240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012414:	d102      	bne.n	801241c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012416:	4b58      	ldr	r3, [pc, #352]	@ (8012578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8012418:	637b      	str	r3, [r7, #52]	@ 0x34
 801241a:	e002      	b.n	8012422 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012420:	e003      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8012422:	e002      	b.n	801242a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8012424:	2300      	movs	r3, #0
 8012426:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012428:	bf00      	nop
          }
        }
        break;
 801242a:	f000 beb4 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 801242e:	4b4f      	ldr	r3, [pc, #316]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012430:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012434:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012438:	633b      	str	r3, [r7, #48]	@ 0x30
 801243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012440:	d056      	beq.n	80124f0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8012442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012448:	f200 808b 	bhi.w	8012562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 801244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801244e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012452:	d03e      	beq.n	80124d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8012454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012456:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801245a:	f200 8082 	bhi.w	8012562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 801245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012460:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012464:	d027      	beq.n	80124b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8012466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012468:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801246c:	d879      	bhi.n	8012562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 801246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012474:	d017      	beq.n	80124a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8012476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801247c:	d871      	bhi.n	8012562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 801247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012480:	2b00      	cmp	r3, #0
 8012482:	d004      	beq.n	801248e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8012484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801248a:	d004      	beq.n	8012496 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 801248c:	e069      	b.n	8012562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 801248e:	f7fb ff59 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 8012492:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012494:	e068      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012496:	f107 0314 	add.w	r3, r7, #20
 801249a:	4618      	mov	r0, r3
 801249c:	f7fe f85c 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80124a4:	e060      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80124a6:	f107 0308 	add.w	r3, r7, #8
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fe f9be 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80124b4:	e058      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80124b6:	4b2d      	ldr	r3, [pc, #180]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80124b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80124bc:	f003 0302 	and.w	r3, r3, #2
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d103      	bne.n	80124cc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80124c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80124c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80124ca:	e04d      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80124cc:	2300      	movs	r3, #0
 80124ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80124d0:	e04a      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80124d2:	4b26      	ldr	r3, [pc, #152]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80124d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80124d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80124dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80124e0:	d103      	bne.n	80124ea <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80124e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80124e6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80124e8:	e03e      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80124ee:	e03b      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80124f0:	4b1e      	ldr	r3, [pc, #120]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80124f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80124f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80124fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80124fc:	4b1b      	ldr	r3, [pc, #108]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f003 0302 	and.w	r3, r3, #2
 8012504:	2b02      	cmp	r3, #2
 8012506:	d10c      	bne.n	8012522 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8012508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250a:	2b00      	cmp	r3, #0
 801250c:	d109      	bne.n	8012522 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801250e:	4b17      	ldr	r3, [pc, #92]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	08db      	lsrs	r3, r3, #3
 8012514:	f003 0303 	and.w	r3, r3, #3
 8012518:	4a15      	ldr	r2, [pc, #84]	@ (8012570 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 801251a:	fa22 f303 	lsr.w	r3, r2, r3
 801251e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012520:	e01e      	b.n	8012560 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012522:	4b12      	ldr	r3, [pc, #72]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801252a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801252e:	d106      	bne.n	801253e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8012530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012536:	d102      	bne.n	801253e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012538:	4b0e      	ldr	r3, [pc, #56]	@ (8012574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 801253a:	637b      	str	r3, [r7, #52]	@ 0x34
 801253c:	e010      	b.n	8012560 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801253e:	4b0b      	ldr	r3, [pc, #44]	@ (801256c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801254a:	d106      	bne.n	801255a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 801254c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801254e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012552:	d102      	bne.n	801255a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012554:	4b08      	ldr	r3, [pc, #32]	@ (8012578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8012556:	637b      	str	r3, [r7, #52]	@ 0x34
 8012558:	e002      	b.n	8012560 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 801255e:	e003      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8012560:	e002      	b.n	8012568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8012562:	2300      	movs	r3, #0
 8012564:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012566:	bf00      	nop
          }
        }
        break;
 8012568:	f000 be15 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801256c:	44020c00 	.word	0x44020c00
 8012570:	03d09000 	.word	0x03d09000
 8012574:	003d0900 	.word	0x003d0900
 8012578:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 801257c:	4b9e      	ldr	r3, [pc, #632]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801257e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012582:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8012586:	633b      	str	r3, [r7, #48]	@ 0x30
 8012588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801258a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 801258e:	d056      	beq.n	801263e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8012590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012592:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8012596:	f200 808b 	bhi.w	80126b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 801259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801259c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80125a0:	d03e      	beq.n	8012620 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80125a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80125a8:	f200 8082 	bhi.w	80126b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80125ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80125b2:	d027      	beq.n	8012604 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80125b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80125ba:	d879      	bhi.n	80126b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80125bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80125c2:	d017      	beq.n	80125f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80125c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80125ca:	d871      	bhi.n	80126b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80125cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d004      	beq.n	80125dc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80125d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80125d8:	d004      	beq.n	80125e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80125da:	e069      	b.n	80126b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80125dc:	f7fb feb2 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 80125e0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80125e2:	e068      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80125e4:	f107 0314 	add.w	r3, r7, #20
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fd ffb5 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80125f2:	e060      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80125f4:	f107 0308 	add.w	r3, r7, #8
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fe f917 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012602:	e058      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012604:	4b7c      	ldr	r3, [pc, #496]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8012606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801260a:	f003 0302 	and.w	r3, r3, #2
 801260e:	2b02      	cmp	r3, #2
 8012610:	d103      	bne.n	801261a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8012612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012616:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012618:	e04d      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 801261a:	2300      	movs	r3, #0
 801261c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801261e:	e04a      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8012620:	4b75      	ldr	r3, [pc, #468]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8012622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801262a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801262e:	d103      	bne.n	8012638 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8012630:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8012634:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012636:	e03e      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8012638:	2300      	movs	r3, #0
 801263a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801263c:	e03b      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801263e:	4b6e      	ldr	r3, [pc, #440]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8012640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012644:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012648:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801264a:	4b6b      	ldr	r3, [pc, #428]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	f003 0302 	and.w	r3, r3, #2
 8012652:	2b02      	cmp	r3, #2
 8012654:	d10c      	bne.n	8012670 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8012656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012658:	2b00      	cmp	r3, #0
 801265a:	d109      	bne.n	8012670 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801265c:	4b66      	ldr	r3, [pc, #408]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	08db      	lsrs	r3, r3, #3
 8012662:	f003 0303 	and.w	r3, r3, #3
 8012666:	4a65      	ldr	r2, [pc, #404]	@ (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8012668:	fa22 f303 	lsr.w	r3, r2, r3
 801266c:	637b      	str	r3, [r7, #52]	@ 0x34
 801266e:	e01e      	b.n	80126ae <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012670:	4b61      	ldr	r3, [pc, #388]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801267c:	d106      	bne.n	801268c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 801267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012684:	d102      	bne.n	801268c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012686:	4b5e      	ldr	r3, [pc, #376]	@ (8012800 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8012688:	637b      	str	r3, [r7, #52]	@ 0x34
 801268a:	e010      	b.n	80126ae <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801268c:	4b5a      	ldr	r3, [pc, #360]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012698:	d106      	bne.n	80126a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 801269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801269c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80126a0:	d102      	bne.n	80126a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80126a2:	4b58      	ldr	r3, [pc, #352]	@ (8012804 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80126a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80126a6:	e002      	b.n	80126ae <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80126a8:	2300      	movs	r3, #0
 80126aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80126ac:	e003      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80126ae:	e002      	b.n	80126b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80126b0:	2300      	movs	r3, #0
 80126b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80126b4:	bf00      	nop
          }
        }
        break;
 80126b6:	f000 bd6e 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80126ba:	4b4f      	ldr	r3, [pc, #316]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80126bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80126c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80126c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80126c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80126cc:	d056      	beq.n	801277c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80126ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80126d4:	f200 808b 	bhi.w	80127ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80126d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80126de:	d03e      	beq.n	801275e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80126e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80126e6:	f200 8082 	bhi.w	80127ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80126ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80126f0:	d027      	beq.n	8012742 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80126f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80126f8:	d879      	bhi.n	80127ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80126fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012700:	d017      	beq.n	8012732 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8012702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012708:	d871      	bhi.n	80127ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 801270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801270c:	2b00      	cmp	r3, #0
 801270e:	d004      	beq.n	801271a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8012710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012716:	d004      	beq.n	8012722 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8012718:	e069      	b.n	80127ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 801271a:	f7fb fe13 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 801271e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012720:	e068      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012722:	f107 0314 	add.w	r3, r7, #20
 8012726:	4618      	mov	r0, r3
 8012728:	f7fd ff16 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012730:	e060      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012732:	f107 0308 	add.w	r3, r7, #8
 8012736:	4618      	mov	r0, r3
 8012738:	f7fe f878 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012740:	e058      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012742:	4b2d      	ldr	r3, [pc, #180]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8012744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012748:	f003 0302 	and.w	r3, r3, #2
 801274c:	2b02      	cmp	r3, #2
 801274e:	d103      	bne.n	8012758 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8012750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012754:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012756:	e04d      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8012758:	2300      	movs	r3, #0
 801275a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801275c:	e04a      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 801275e:	4b26      	ldr	r3, [pc, #152]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8012760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801276c:	d103      	bne.n	8012776 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 801276e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8012772:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8012774:	e03e      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8012776:	2300      	movs	r3, #0
 8012778:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801277a:	e03b      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801277c:	4b1e      	ldr	r3, [pc, #120]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801277e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012782:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012786:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012788:	4b1b      	ldr	r3, [pc, #108]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f003 0302 	and.w	r3, r3, #2
 8012790:	2b02      	cmp	r3, #2
 8012792:	d10c      	bne.n	80127ae <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8012794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012796:	2b00      	cmp	r3, #0
 8012798:	d109      	bne.n	80127ae <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801279a:	4b17      	ldr	r3, [pc, #92]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	08db      	lsrs	r3, r3, #3
 80127a0:	f003 0303 	and.w	r3, r3, #3
 80127a4:	4a15      	ldr	r2, [pc, #84]	@ (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80127a6:	fa22 f303 	lsr.w	r3, r2, r3
 80127aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80127ac:	e01e      	b.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80127ae:	4b12      	ldr	r3, [pc, #72]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80127b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127ba:	d106      	bne.n	80127ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80127bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127c2:	d102      	bne.n	80127ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80127c4:	4b0e      	ldr	r3, [pc, #56]	@ (8012800 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80127c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80127c8:	e010      	b.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80127ca:	4b0b      	ldr	r3, [pc, #44]	@ (80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80127d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80127d6:	d106      	bne.n	80127e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80127d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80127de:	d102      	bne.n	80127e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80127e0:	4b08      	ldr	r3, [pc, #32]	@ (8012804 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80127e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80127e4:	e002      	b.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80127ea:	e003      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80127ec:	e002      	b.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80127ee:	2300      	movs	r3, #0
 80127f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80127f2:	bf00      	nop
          }
        }
        break;
 80127f4:	f000 bccf 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80127f8:	44020c00 	.word	0x44020c00
 80127fc:	03d09000 	.word	0x03d09000
 8012800:	003d0900 	.word	0x003d0900
 8012804:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8012808:	4b9e      	ldr	r3, [pc, #632]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801280a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801280e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8012812:	633b      	str	r3, [r7, #48]	@ 0x30
 8012814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801281a:	d056      	beq.n	80128ca <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 801281c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801281e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012822:	f200 808b 	bhi.w	801293c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8012826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801282c:	d03e      	beq.n	80128ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 801282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012834:	f200 8082 	bhi.w	801293c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8012838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801283a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801283e:	d027      	beq.n	8012890 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8012840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012846:	d879      	bhi.n	801293c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8012848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801284a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801284e:	d017      	beq.n	8012880 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8012850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012856:	d871      	bhi.n	801293c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8012858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801285a:	2b00      	cmp	r3, #0
 801285c:	d004      	beq.n	8012868 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 801285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012864:	d004      	beq.n	8012870 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8012866:	e069      	b.n	801293c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8012868:	f7fb fd6c 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 801286c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 801286e:	e068      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012870:	f107 0314 	add.w	r3, r7, #20
 8012874:	4618      	mov	r0, r3
 8012876:	f7fd fe6f 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801287e:	e060      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012880:	f107 0308 	add.w	r3, r7, #8
 8012884:	4618      	mov	r0, r3
 8012886:	f7fd ffd1 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801288e:	e058      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012890:	4b7c      	ldr	r3, [pc, #496]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012896:	f003 0302 	and.w	r3, r3, #2
 801289a:	2b02      	cmp	r3, #2
 801289c:	d103      	bne.n	80128a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 801289e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80128a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80128a4:	e04d      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80128aa:	e04a      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80128ac:	4b75      	ldr	r3, [pc, #468]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80128ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80128b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80128b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80128ba:	d103      	bne.n	80128c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80128bc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80128c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80128c2:	e03e      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80128c4:	2300      	movs	r3, #0
 80128c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80128c8:	e03b      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80128ca:	4b6e      	ldr	r3, [pc, #440]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80128cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80128d0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80128d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80128d6:	4b6b      	ldr	r3, [pc, #428]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f003 0302 	and.w	r3, r3, #2
 80128de:	2b02      	cmp	r3, #2
 80128e0:	d10c      	bne.n	80128fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80128e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d109      	bne.n	80128fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80128e8:	4b66      	ldr	r3, [pc, #408]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	08db      	lsrs	r3, r3, #3
 80128ee:	f003 0303 	and.w	r3, r3, #3
 80128f2:	4a65      	ldr	r2, [pc, #404]	@ (8012a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80128f4:	fa22 f303 	lsr.w	r3, r2, r3
 80128f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80128fa:	e01e      	b.n	801293a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80128fc:	4b61      	ldr	r3, [pc, #388]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012908:	d106      	bne.n	8012918 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 801290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801290c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012910:	d102      	bne.n	8012918 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012912:	4b5e      	ldr	r3, [pc, #376]	@ (8012a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8012914:	637b      	str	r3, [r7, #52]	@ 0x34
 8012916:	e010      	b.n	801293a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012918:	4b5a      	ldr	r3, [pc, #360]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012924:	d106      	bne.n	8012934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8012926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801292c:	d102      	bne.n	8012934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801292e:	4b58      	ldr	r3, [pc, #352]	@ (8012a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8012930:	637b      	str	r3, [r7, #52]	@ 0x34
 8012932:	e002      	b.n	801293a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012938:	e003      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 801293a:	e002      	b.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 801293c:	2300      	movs	r3, #0
 801293e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012940:	bf00      	nop
          }
        }
        break;
 8012942:	f000 bc28 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8012946:	4b4f      	ldr	r3, [pc, #316]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801294c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012950:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8012952:	4b4c      	ldr	r3, [pc, #304]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801295a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801295e:	d106      	bne.n	801296e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8012960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012962:	2b00      	cmp	r3, #0
 8012964:	d103      	bne.n	801296e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8012966:	4b4a      	ldr	r3, [pc, #296]	@ (8012a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8012968:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 801296a:	f000 bc14 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 801296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012974:	d108      	bne.n	8012988 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012976:	f107 0320 	add.w	r3, r7, #32
 801297a:	4618      	mov	r0, r3
 801297c:	f7fd fc82 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012984:	f000 bc07 	b.w	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8012988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801298a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801298e:	d107      	bne.n	80129a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012990:	f107 0314 	add.w	r3, r7, #20
 8012994:	4618      	mov	r0, r3
 8012996:	f7fd fddf 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801299e:	e3fa      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80129a0:	2300      	movs	r3, #0
 80129a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80129a4:	e3f7      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80129a6:	4b37      	ldr	r3, [pc, #220]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80129a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80129ac:	f003 0307 	and.w	r3, r3, #7
 80129b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80129b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b4:	2b04      	cmp	r3, #4
 80129b6:	d861      	bhi.n	8012a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80129b8:	a201      	add	r2, pc, #4	@ (adr r2, 80129c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80129ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129be:	bf00      	nop
 80129c0:	080129d5 	.word	0x080129d5
 80129c4:	080129e5 	.word	0x080129e5
 80129c8:	080129f5 	.word	0x080129f5
 80129cc:	08012a05 	.word	0x08012a05
 80129d0:	08012a0b 	.word	0x08012a0b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80129d4:	f107 0320 	add.w	r3, r7, #32
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fd fc53 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80129de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80129e2:	e04e      	b.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80129e4:	f107 0314 	add.w	r3, r7, #20
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7fd fdb5 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80129f2:	e046      	b.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80129f4:	f107 0308 	add.w	r3, r7, #8
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7fd ff17 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012a02:	e03e      	b.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8012a04:	4b23      	ldr	r3, [pc, #140]	@ (8012a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8012a06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012a08:	e03b      	b.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012a10:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012a16:	4b1b      	ldr	r3, [pc, #108]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f003 0302 	and.w	r3, r3, #2
 8012a1e:	2b02      	cmp	r3, #2
 8012a20:	d10c      	bne.n	8012a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8012a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d109      	bne.n	8012a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012a28:	4b16      	ldr	r3, [pc, #88]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	08db      	lsrs	r3, r3, #3
 8012a2e:	f003 0303 	and.w	r3, r3, #3
 8012a32:	4a15      	ldr	r2, [pc, #84]	@ (8012a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8012a34:	fa22 f303 	lsr.w	r3, r2, r3
 8012a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a3a:	e01e      	b.n	8012a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012a3c:	4b11      	ldr	r3, [pc, #68]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a48:	d106      	bne.n	8012a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8012a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a50:	d102      	bne.n	8012a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012a52:	4b0e      	ldr	r3, [pc, #56]	@ (8012a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8012a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a56:	e010      	b.n	8012a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012a58:	4b0a      	ldr	r3, [pc, #40]	@ (8012a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a64:	d106      	bne.n	8012a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8012a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012a6c:	d102      	bne.n	8012a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012a6e:	4b08      	ldr	r3, [pc, #32]	@ (8012a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8012a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a72:	e002      	b.n	8012a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8012a74:	2300      	movs	r3, #0
 8012a76:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012a78:	e003      	b.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8012a7a:	e002      	b.n	8012a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012a80:	bf00      	nop
          }
        }
        break;
 8012a82:	e388      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012a84:	44020c00 	.word	0x44020c00
 8012a88:	03d09000 	.word	0x03d09000
 8012a8c:	003d0900 	.word	0x003d0900
 8012a90:	017d7840 	.word	0x017d7840
 8012a94:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8012a98:	4ba9      	ldr	r3, [pc, #676]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8012aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa6:	2b20      	cmp	r3, #32
 8012aa8:	f200 809a 	bhi.w	8012be0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8012aac:	a201      	add	r2, pc, #4	@ (adr r2, 8012ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8012aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab2:	bf00      	nop
 8012ab4:	08012b39 	.word	0x08012b39
 8012ab8:	08012be1 	.word	0x08012be1
 8012abc:	08012be1 	.word	0x08012be1
 8012ac0:	08012be1 	.word	0x08012be1
 8012ac4:	08012be1 	.word	0x08012be1
 8012ac8:	08012be1 	.word	0x08012be1
 8012acc:	08012be1 	.word	0x08012be1
 8012ad0:	08012be1 	.word	0x08012be1
 8012ad4:	08012b49 	.word	0x08012b49
 8012ad8:	08012be1 	.word	0x08012be1
 8012adc:	08012be1 	.word	0x08012be1
 8012ae0:	08012be1 	.word	0x08012be1
 8012ae4:	08012be1 	.word	0x08012be1
 8012ae8:	08012be1 	.word	0x08012be1
 8012aec:	08012be1 	.word	0x08012be1
 8012af0:	08012be1 	.word	0x08012be1
 8012af4:	08012b59 	.word	0x08012b59
 8012af8:	08012be1 	.word	0x08012be1
 8012afc:	08012be1 	.word	0x08012be1
 8012b00:	08012be1 	.word	0x08012be1
 8012b04:	08012be1 	.word	0x08012be1
 8012b08:	08012be1 	.word	0x08012be1
 8012b0c:	08012be1 	.word	0x08012be1
 8012b10:	08012be1 	.word	0x08012be1
 8012b14:	08012b69 	.word	0x08012b69
 8012b18:	08012be1 	.word	0x08012be1
 8012b1c:	08012be1 	.word	0x08012be1
 8012b20:	08012be1 	.word	0x08012be1
 8012b24:	08012be1 	.word	0x08012be1
 8012b28:	08012be1 	.word	0x08012be1
 8012b2c:	08012be1 	.word	0x08012be1
 8012b30:	08012be1 	.word	0x08012be1
 8012b34:	08012b6f 	.word	0x08012b6f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012b38:	f107 0320 	add.w	r3, r7, #32
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fd fba1 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8012b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012b46:	e04e      	b.n	8012be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012b48:	f107 0314 	add.w	r3, r7, #20
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fd fd03 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012b56:	e046      	b.n	8012be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b58:	f107 0308 	add.w	r3, r7, #8
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7fd fe65 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012b66:	e03e      	b.n	8012be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8012b68:	4b76      	ldr	r3, [pc, #472]	@ (8012d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8012b6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012b6c:	e03b      	b.n	8012be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012b6e:	4b74      	ldr	r3, [pc, #464]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012b74:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012b78:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012b7a:	4b71      	ldr	r3, [pc, #452]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f003 0302 	and.w	r3, r3, #2
 8012b82:	2b02      	cmp	r3, #2
 8012b84:	d10c      	bne.n	8012ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8012b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d109      	bne.n	8012ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	08db      	lsrs	r3, r3, #3
 8012b92:	f003 0303 	and.w	r3, r3, #3
 8012b96:	4a6c      	ldr	r2, [pc, #432]	@ (8012d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8012b98:	fa22 f303 	lsr.w	r3, r2, r3
 8012b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b9e:	e01e      	b.n	8012bde <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012ba0:	4b67      	ldr	r3, [pc, #412]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012bac:	d106      	bne.n	8012bbc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8012bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bb4:	d102      	bne.n	8012bbc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012bb6:	4b65      	ldr	r3, [pc, #404]	@ (8012d4c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8012bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8012bba:	e010      	b.n	8012bde <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012bbc:	4b60      	ldr	r3, [pc, #384]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bc8:	d106      	bne.n	8012bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8012bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012bd0:	d102      	bne.n	8012bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8012d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8012bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8012bd6:	e002      	b.n	8012bde <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012bdc:	e003      	b.n	8012be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8012bde:	e002      	b.n	8012be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8012be0:	2300      	movs	r3, #0
 8012be2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012be4:	bf00      	nop
          }
        }
        break;
 8012be6:	e2d6      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8012be8:	4b55      	ldr	r3, [pc, #340]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012bee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8012bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bfa:	d031      	beq.n	8012c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c02:	d866      	bhi.n	8012cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8012c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8012c08:	d027      	beq.n	8012c5a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8012c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8012c0e:	d860      	bhi.n	8012cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8012c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c12:	2b80      	cmp	r3, #128	@ 0x80
 8012c14:	d019      	beq.n	8012c4a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8012c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c18:	2b80      	cmp	r3, #128	@ 0x80
 8012c1a:	d85a      	bhi.n	8012cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d003      	beq.n	8012c2a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8012c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c24:	2b40      	cmp	r3, #64	@ 0x40
 8012c26:	d008      	beq.n	8012c3a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8012c28:	e053      	b.n	8012cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012c2a:	f107 0320 	add.w	r3, r7, #32
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fd fb28 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8012c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012c38:	e04e      	b.n	8012cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c3a:	f107 0314 	add.w	r3, r7, #20
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fd fc8a 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012c48:	e046      	b.n	8012cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c4a:	f107 0308 	add.w	r3, r7, #8
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7fd fdec 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012c58:	e03e      	b.n	8012cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8012c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8012d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8012c5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012c5e:	e03b      	b.n	8012cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012c60:	4b37      	ldr	r3, [pc, #220]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012c66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012c6c:	4b34      	ldr	r3, [pc, #208]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f003 0302 	and.w	r3, r3, #2
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d10c      	bne.n	8012c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8012c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d109      	bne.n	8012c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012c7e:	4b30      	ldr	r3, [pc, #192]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	08db      	lsrs	r3, r3, #3
 8012c84:	f003 0303 	and.w	r3, r3, #3
 8012c88:	4a2f      	ldr	r2, [pc, #188]	@ (8012d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8012c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8012c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012c90:	e01e      	b.n	8012cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012c92:	4b2b      	ldr	r3, [pc, #172]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c9e:	d106      	bne.n	8012cae <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8012ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ca6:	d102      	bne.n	8012cae <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8012ca8:	4b28      	ldr	r3, [pc, #160]	@ (8012d4c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8012caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8012cac:	e010      	b.n	8012cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012cae:	4b24      	ldr	r3, [pc, #144]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012cba:	d106      	bne.n	8012cca <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8012cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012cc2:	d102      	bne.n	8012cca <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8012cc4:	4b22      	ldr	r3, [pc, #136]	@ (8012d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8012cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8012cc8:	e002      	b.n	8012cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8012cce:	e003      	b.n	8012cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8012cd0:	e002      	b.n	8012cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012cd6:	bf00      	nop
          }
        }
        break;
 8012cd8:	e25d      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8012cda:	4b19      	ldr	r3, [pc, #100]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012ce0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8012ce4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8012ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d103      	bne.n	8012cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8012cec:	f7fb fb14 	bl	800e318 <HAL_RCC_GetPCLK2Freq>
 8012cf0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8012cf2:	e250      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8012cf4:	4b12      	ldr	r3, [pc, #72]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012d00:	d10b      	bne.n	8012d1a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8012d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d08:	d107      	bne.n	8012d1a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012d0a:	f107 0314 	add.w	r3, r7, #20
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7fd fc22 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d18:	e04f      	b.n	8012dba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8012d1a:	4b09      	ldr	r3, [pc, #36]	@ (8012d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d26:	d115      	bne.n	8012d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8012d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012d2e:	d111      	bne.n	8012d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012d30:	f107 0308 	add.w	r3, r7, #8
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fd fd79 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d3e:	e03c      	b.n	8012dba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8012d40:	44020c00 	.word	0x44020c00
 8012d44:	00bb8000 	.word	0x00bb8000
 8012d48:	03d09000 	.word	0x03d09000
 8012d4c:	003d0900 	.word	0x003d0900
 8012d50:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8012d54:	4b94      	ldr	r3, [pc, #592]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f003 0302 	and.w	r3, r3, #2
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	d10d      	bne.n	8012d7c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8012d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012d66:	d109      	bne.n	8012d7c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012d68:	4b8f      	ldr	r3, [pc, #572]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	08db      	lsrs	r3, r3, #3
 8012d6e:	f003 0303 	and.w	r3, r3, #3
 8012d72:	4a8e      	ldr	r2, [pc, #568]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8012d74:	fa22 f303 	lsr.w	r3, r2, r3
 8012d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d7a:	e01e      	b.n	8012dba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8012d7c:	4b8a      	ldr	r3, [pc, #552]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d88:	d106      	bne.n	8012d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012d90:	d102      	bne.n	8012d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8012d92:	4b87      	ldr	r3, [pc, #540]	@ (8012fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8012d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d96:	e010      	b.n	8012dba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8012d98:	4b83      	ldr	r3, [pc, #524]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012da0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012da4:	d106      	bne.n	8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8012da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012da8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8012dac:	d102      	bne.n	8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8012dae:	4b81      	ldr	r3, [pc, #516]	@ (8012fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8012db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8012db2:	e002      	b.n	8012dba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8012db4:	2300      	movs	r3, #0
 8012db6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012db8:	e1ed      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012dba:	e1ec      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8012dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012dc2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012dc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d103      	bne.n	8012dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8012dce:	f7fb fab9 	bl	800e344 <HAL_RCC_GetPCLK3Freq>
 8012dd2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8012dd4:	e1df      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8012dd6:	4b74      	ldr	r3, [pc, #464]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012de2:	d10b      	bne.n	8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8012de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012dea:	d107      	bne.n	8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dec:	f107 0314 	add.w	r3, r7, #20
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7fd fbb1 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012df6:	69bb      	ldr	r3, [r7, #24]
 8012df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dfa:	e045      	b.n	8012e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8012dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e08:	d10b      	bne.n	8012e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012e10:	d107      	bne.n	8012e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e12:	f107 0308 	add.w	r3, r7, #8
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fd fd08 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e20:	e032      	b.n	8012e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8012e22:	4b61      	ldr	r3, [pc, #388]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f003 0302 	and.w	r3, r3, #2
 8012e2a:	2b02      	cmp	r3, #2
 8012e2c:	d10d      	bne.n	8012e4a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8012e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012e34:	d109      	bne.n	8012e4a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012e36:	4b5c      	ldr	r3, [pc, #368]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	08db      	lsrs	r3, r3, #3
 8012e3c:	f003 0303 	and.w	r3, r3, #3
 8012e40:	4a5a      	ldr	r2, [pc, #360]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8012e42:	fa22 f303 	lsr.w	r3, r2, r3
 8012e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e48:	e01e      	b.n	8012e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8012e4a:	4b57      	ldr	r3, [pc, #348]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e56:	d106      	bne.n	8012e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8012e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012e5e:	d102      	bne.n	8012e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8012e60:	4b53      	ldr	r3, [pc, #332]	@ (8012fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8012e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e64:	e010      	b.n	8012e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8012e66:	4b50      	ldr	r3, [pc, #320]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e72:	d106      	bne.n	8012e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8012e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e76:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8012e7a:	d102      	bne.n	8012e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8012e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8012fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8012e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e80:	e002      	b.n	8012e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8012e82:	2300      	movs	r3, #0
 8012e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012e86:	e186      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012e88:	e185      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8012e8a:	4b47      	ldr	r3, [pc, #284]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012e90:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8012e94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8012e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d103      	bne.n	8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8012e9c:	f7fb fa3c 	bl	800e318 <HAL_RCC_GetPCLK2Freq>
 8012ea0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8012ea2:	e178      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8012ea4:	4b40      	ldr	r3, [pc, #256]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012eb0:	d10b      	bne.n	8012eca <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8012eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012eb8:	d107      	bne.n	8012eca <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012eba:	f107 0314 	add.w	r3, r7, #20
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fd fb4a 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ec8:	e045      	b.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8012eca:	4b37      	ldr	r3, [pc, #220]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012ed6:	d10b      	bne.n	8012ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8012ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ede:	d107      	bne.n	8012ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ee0:	f107 0308 	add.w	r3, r7, #8
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7fd fca1 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8012eee:	e032      	b.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8012ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f003 0302 	and.w	r3, r3, #2
 8012ef8:	2b02      	cmp	r3, #2
 8012efa:	d10d      	bne.n	8012f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8012efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012efe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8012f02:	d109      	bne.n	8012f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012f04:	4b28      	ldr	r3, [pc, #160]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	08db      	lsrs	r3, r3, #3
 8012f0a:	f003 0303 	and.w	r3, r3, #3
 8012f0e:	4a27      	ldr	r2, [pc, #156]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8012f10:	fa22 f303 	lsr.w	r3, r2, r3
 8012f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f16:	e01e      	b.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8012f18:	4b23      	ldr	r3, [pc, #140]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f24:	d106      	bne.n	8012f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8012f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f2c:	d102      	bne.n	8012f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8012f2e:	4b20      	ldr	r3, [pc, #128]	@ (8012fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8012f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f32:	e010      	b.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8012f34:	4b1c      	ldr	r3, [pc, #112]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f40:	d106      	bne.n	8012f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8012f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f44:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8012f48:	d102      	bne.n	8012f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8012f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8012fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8012f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f4e:	e002      	b.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8012f50:	2300      	movs	r3, #0
 8012f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8012f54:	e11f      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8012f56:	e11e      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8012f58:	4b13      	ldr	r3, [pc, #76]	@ (8012fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8012f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012f5e:	f003 0303 	and.w	r3, r3, #3
 8012f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d85f      	bhi.n	801302a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8012f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8012f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f70:	08012f81 	.word	0x08012f81
 8012f74:	08012f89 	.word	0x08012f89
 8012f78:	08012f99 	.word	0x08012f99
 8012f7c:	08012fb9 	.word	0x08012fb9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8012f80:	f7fb f998 	bl	800e2b4 <HAL_RCC_GetHCLKFreq>
 8012f84:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8012f86:	e053      	b.n	8013030 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012f88:	f107 0320 	add.w	r3, r7, #32
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fd f979 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8012f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012f96:	e04b      	b.n	8013030 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f98:	f107 0314 	add.w	r3, r7, #20
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fd fadb 	bl	8010558 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8012fa6:	e043      	b.n	8013030 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8012fa8:	44020c00 	.word	0x44020c00
 8012fac:	03d09000 	.word	0x03d09000
 8012fb0:	003d0900 	.word	0x003d0900
 8012fb4:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012fb8:	4b79      	ldr	r3, [pc, #484]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8012fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8012fbe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8012fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012fc4:	4b76      	ldr	r3, [pc, #472]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f003 0302 	and.w	r3, r3, #2
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	d10c      	bne.n	8012fea <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8012fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d109      	bne.n	8012fea <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8012fd6:	4b72      	ldr	r3, [pc, #456]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	08db      	lsrs	r3, r3, #3
 8012fdc:	f003 0303 	and.w	r3, r3, #3
 8012fe0:	4a70      	ldr	r2, [pc, #448]	@ (80131a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8012fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8012fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8012fe8:	e01e      	b.n	8013028 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012fea:	4b6d      	ldr	r3, [pc, #436]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ff6:	d106      	bne.n	8013006 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8012ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ffe:	d102      	bne.n	8013006 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8013000:	4b69      	ldr	r3, [pc, #420]	@ (80131a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8013002:	637b      	str	r3, [r7, #52]	@ 0x34
 8013004:	e010      	b.n	8013028 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013006:	4b66      	ldr	r3, [pc, #408]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801300e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013012:	d106      	bne.n	8013022 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8013014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801301a:	d102      	bne.n	8013022 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801301c:	4b63      	ldr	r3, [pc, #396]	@ (80131ac <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 801301e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013020:	e002      	b.n	8013028 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8013022:	2300      	movs	r3, #0
 8013024:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8013026:	e003      	b.n	8013030 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8013028:	e002      	b.n	8013030 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 801302a:	2300      	movs	r3, #0
 801302c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801302e:	bf00      	nop
          }
        }
        break;
 8013030:	e0b1      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8013032:	4b5b      	ldr	r3, [pc, #364]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013038:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801303c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 801303e:	4b58      	ldr	r3, [pc, #352]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013044:	f003 0302 	and.w	r3, r3, #2
 8013048:	2b02      	cmp	r3, #2
 801304a:	d106      	bne.n	801305a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 801304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801304e:	2b00      	cmp	r3, #0
 8013050:	d103      	bne.n	801305a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8013052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013056:	637b      	str	r3, [r7, #52]	@ 0x34
 8013058:	e01f      	b.n	801309a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 801305a:	4b51      	ldr	r3, [pc, #324]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801305c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013068:	d106      	bne.n	8013078 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 801306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801306c:	2b40      	cmp	r3, #64	@ 0x40
 801306e:	d103      	bne.n	8013078 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8013070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8013074:	637b      	str	r3, [r7, #52]	@ 0x34
 8013076:	e010      	b.n	801309a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8013078:	4b49      	ldr	r3, [pc, #292]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013084:	d106      	bne.n	8013094 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8013086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013088:	2b80      	cmp	r3, #128	@ 0x80
 801308a:	d103      	bne.n	8013094 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 801308c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8013090:	637b      	str	r3, [r7, #52]	@ 0x34
 8013092:	e002      	b.n	801309a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8013094:	2300      	movs	r3, #0
 8013096:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8013098:	e07d      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801309a:	e07c      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801309c:	4b40      	ldr	r3, [pc, #256]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801309e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80130a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80130a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80130a8:	4b3d      	ldr	r3, [pc, #244]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80130b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80130b4:	d105      	bne.n	80130c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80130b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d102      	bne.n	80130c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80130bc:	4b3c      	ldr	r3, [pc, #240]	@ (80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80130be:	637b      	str	r3, [r7, #52]	@ 0x34
 80130c0:	e031      	b.n	8013126 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80130c2:	4b37      	ldr	r3, [pc, #220]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80130ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80130ce:	d10a      	bne.n	80130e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80130d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130d2:	2b10      	cmp	r3, #16
 80130d4:	d107      	bne.n	80130e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80130d6:	f107 0320 	add.w	r3, r7, #32
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fd f8d2 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80130e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80130e4:	e01f      	b.n	8013126 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80130e6:	4b2e      	ldr	r3, [pc, #184]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80130e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130ec:	f003 0302 	and.w	r3, r3, #2
 80130f0:	2b02      	cmp	r3, #2
 80130f2:	d106      	bne.n	8013102 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80130f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130f6:	2b20      	cmp	r3, #32
 80130f8:	d103      	bne.n	8013102 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80130fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80130fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8013100:	e011      	b.n	8013126 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8013102:	4b27      	ldr	r3, [pc, #156]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801310c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013110:	d106      	bne.n	8013120 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8013112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013114:	2b30      	cmp	r3, #48	@ 0x30
 8013116:	d103      	bne.n	8013120 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8013118:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801311c:	637b      	str	r3, [r7, #52]	@ 0x34
 801311e:	e002      	b.n	8013126 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8013120:	2300      	movs	r3, #0
 8013122:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8013124:	e037      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8013126:	e036      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8013128:	4b1d      	ldr	r3, [pc, #116]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801312a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801312e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8013132:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8013134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013136:	2b10      	cmp	r3, #16
 8013138:	d107      	bne.n	801314a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801313a:	f107 0320 	add.w	r3, r7, #32
 801313e:	4618      	mov	r0, r3
 8013140:	f7fd f8a0 	bl	8010284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013146:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8013148:	e025      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 801314a:	4b15      	ldr	r3, [pc, #84]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013156:	d10a      	bne.n	801316e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8013158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801315a:	2b20      	cmp	r3, #32
 801315c:	d107      	bne.n	801316e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801315e:	f107 0308 	add.w	r3, r7, #8
 8013162:	4618      	mov	r0, r3
 8013164:	f7fd fb62 	bl	801082c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	637b      	str	r3, [r7, #52]	@ 0x34
 801316c:	e00f      	b.n	801318e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 801316e:	4b0c      	ldr	r3, [pc, #48]	@ (80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801317a:	d105      	bne.n	8013188 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 801317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801317e:	2b30      	cmp	r3, #48	@ 0x30
 8013180:	d102      	bne.n	8013188 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8013182:	4b0b      	ldr	r3, [pc, #44]	@ (80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8013184:	637b      	str	r3, [r7, #52]	@ 0x34
 8013186:	e002      	b.n	801318e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8013188:	2300      	movs	r3, #0
 801318a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 801318c:	e003      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801318e:	e002      	b.n	8013196 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8013190:	2300      	movs	r3, #0
 8013192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013194:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8013196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013198:	4618      	mov	r0, r3
 801319a:	373c      	adds	r7, #60	@ 0x3c
 801319c:	46bd      	mov	sp, r7
 801319e:	bd90      	pop	{r4, r7, pc}
 80131a0:	44020c00 	.word	0x44020c00
 80131a4:	03d09000 	.word	0x03d09000
 80131a8:	003d0900 	.word	0x003d0900
 80131ac:	017d7840 	.word	0x017d7840
 80131b0:	02dc6c00 	.word	0x02dc6c00

080131b4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80131bc:	4b48      	ldr	r3, [pc, #288]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4a47      	ldr	r2, [pc, #284]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80131c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80131c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80131c8:	f7f9 fd88 	bl	800ccdc <HAL_GetTick>
 80131cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80131ce:	e008      	b.n	80131e2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80131d0:	f7f9 fd84 	bl	800ccdc <HAL_GetTick>
 80131d4:	4602      	mov	r2, r0
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	2b02      	cmp	r3, #2
 80131dc:	d901      	bls.n	80131e2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80131de:	2303      	movs	r3, #3
 80131e0:	e07a      	b.n	80132d8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80131e2:	4b3f      	ldr	r3, [pc, #252]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d1f0      	bne.n	80131d0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80131ee:	4b3c      	ldr	r3, [pc, #240]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80131f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80131f6:	f023 0303 	bic.w	r3, r3, #3
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	6811      	ldr	r1, [r2, #0]
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	6852      	ldr	r2, [r2, #4]
 8013202:	0212      	lsls	r2, r2, #8
 8013204:	430a      	orrs	r2, r1
 8013206:	4936      	ldr	r1, [pc, #216]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013208:	4313      	orrs	r3, r2
 801320a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	689b      	ldr	r3, [r3, #8]
 8013210:	3b01      	subs	r3, #1
 8013212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	3b01      	subs	r3, #1
 801321c:	025b      	lsls	r3, r3, #9
 801321e:	b29b      	uxth	r3, r3
 8013220:	431a      	orrs	r2, r3
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	3b01      	subs	r3, #1
 8013228:	041b      	lsls	r3, r3, #16
 801322a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801322e:	431a      	orrs	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	695b      	ldr	r3, [r3, #20]
 8013234:	3b01      	subs	r3, #1
 8013236:	061b      	lsls	r3, r3, #24
 8013238:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801323c:	4928      	ldr	r1, [pc, #160]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 801323e:	4313      	orrs	r3, r2
 8013240:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8013242:	4b27      	ldr	r3, [pc, #156]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013246:	f023 020c 	bic.w	r2, r3, #12
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	699b      	ldr	r3, [r3, #24]
 801324e:	4924      	ldr	r1, [pc, #144]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013250:	4313      	orrs	r3, r2
 8013252:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8013254:	4b22      	ldr	r3, [pc, #136]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013258:	f023 0220 	bic.w	r2, r3, #32
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	69db      	ldr	r3, [r3, #28]
 8013260:	491f      	ldr	r1, [pc, #124]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013262:	4313      	orrs	r3, r2
 8013264:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8013266:	4b1e      	ldr	r3, [pc, #120]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801326e:	491c      	ldr	r1, [pc, #112]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013270:	4313      	orrs	r3, r2
 8013272:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8013274:	4b1a      	ldr	r3, [pc, #104]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013278:	4a19      	ldr	r2, [pc, #100]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 801327a:	f023 0310 	bic.w	r3, r3, #16
 801327e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8013280:	4b17      	ldr	r3, [pc, #92]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013284:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013288:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	6a12      	ldr	r2, [r2, #32]
 8013290:	00d2      	lsls	r2, r2, #3
 8013292:	4913      	ldr	r1, [pc, #76]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 8013294:	4313      	orrs	r3, r2
 8013296:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8013298:	4b11      	ldr	r3, [pc, #68]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 801329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801329c:	4a10      	ldr	r2, [pc, #64]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 801329e:	f043 0310 	orr.w	r3, r3, #16
 80132a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80132a4:	4b0e      	ldr	r3, [pc, #56]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	4a0d      	ldr	r2, [pc, #52]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80132aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80132ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80132b0:	f7f9 fd14 	bl	800ccdc <HAL_GetTick>
 80132b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80132b6:	e008      	b.n	80132ca <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80132b8:	f7f9 fd10 	bl	800ccdc <HAL_GetTick>
 80132bc:	4602      	mov	r2, r0
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d901      	bls.n	80132ca <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80132c6:	2303      	movs	r3, #3
 80132c8:	e006      	b.n	80132d8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80132ca:	4b05      	ldr	r3, [pc, #20]	@ (80132e0 <RCCEx_PLL2_Config+0x12c>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d0f0      	beq.n	80132b8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80132d6:	2300      	movs	r3, #0

}
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	44020c00 	.word	0x44020c00

080132e4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80132ec:	4b48      	ldr	r3, [pc, #288]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a47      	ldr	r2, [pc, #284]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80132f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80132f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80132f8:	f7f9 fcf0 	bl	800ccdc <HAL_GetTick>
 80132fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80132fe:	e008      	b.n	8013312 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013300:	f7f9 fcec 	bl	800ccdc <HAL_GetTick>
 8013304:	4602      	mov	r2, r0
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	1ad3      	subs	r3, r2, r3
 801330a:	2b02      	cmp	r3, #2
 801330c:	d901      	bls.n	8013312 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801330e:	2303      	movs	r3, #3
 8013310:	e07a      	b.n	8013408 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013312:	4b3f      	ldr	r3, [pc, #252]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1f0      	bne.n	8013300 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 801331e:	4b3c      	ldr	r3, [pc, #240]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013322:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013326:	f023 0303 	bic.w	r3, r3, #3
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	6811      	ldr	r1, [r2, #0]
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	6852      	ldr	r2, [r2, #4]
 8013332:	0212      	lsls	r2, r2, #8
 8013334:	430a      	orrs	r2, r1
 8013336:	4936      	ldr	r1, [pc, #216]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013338:	4313      	orrs	r3, r2
 801333a:	630b      	str	r3, [r1, #48]	@ 0x30
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	689b      	ldr	r3, [r3, #8]
 8013340:	3b01      	subs	r3, #1
 8013342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	3b01      	subs	r3, #1
 801334c:	025b      	lsls	r3, r3, #9
 801334e:	b29b      	uxth	r3, r3
 8013350:	431a      	orrs	r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	691b      	ldr	r3, [r3, #16]
 8013356:	3b01      	subs	r3, #1
 8013358:	041b      	lsls	r3, r3, #16
 801335a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801335e:	431a      	orrs	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	695b      	ldr	r3, [r3, #20]
 8013364:	3b01      	subs	r3, #1
 8013366:	061b      	lsls	r3, r3, #24
 8013368:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801336c:	4928      	ldr	r1, [pc, #160]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 801336e:	4313      	orrs	r3, r2
 8013370:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013372:	4b27      	ldr	r3, [pc, #156]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013376:	f023 020c 	bic.w	r2, r3, #12
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	699b      	ldr	r3, [r3, #24]
 801337e:	4924      	ldr	r1, [pc, #144]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013380:	4313      	orrs	r3, r2
 8013382:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8013384:	4b22      	ldr	r3, [pc, #136]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013388:	f023 0220 	bic.w	r2, r3, #32
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	69db      	ldr	r3, [r3, #28]
 8013390:	491f      	ldr	r1, [pc, #124]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013392:	4313      	orrs	r3, r2
 8013394:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8013396:	4b1e      	ldr	r3, [pc, #120]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 8013398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801339e:	491c      	ldr	r1, [pc, #112]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133a0:	4313      	orrs	r3, r2
 80133a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80133a4:	4b1a      	ldr	r3, [pc, #104]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133a8:	4a19      	ldr	r2, [pc, #100]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133aa:	f023 0310 	bic.w	r3, r3, #16
 80133ae:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80133b0:	4b17      	ldr	r3, [pc, #92]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80133b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	6a12      	ldr	r2, [r2, #32]
 80133c0:	00d2      	lsls	r2, r2, #3
 80133c2:	4913      	ldr	r1, [pc, #76]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133c4:	4313      	orrs	r3, r2
 80133c6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80133c8:	4b11      	ldr	r3, [pc, #68]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133cc:	4a10      	ldr	r2, [pc, #64]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133ce:	f043 0310 	orr.w	r3, r3, #16
 80133d2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80133d4:	4b0e      	ldr	r3, [pc, #56]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4a0d      	ldr	r2, [pc, #52]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80133de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80133e0:	f7f9 fc7c 	bl	800ccdc <HAL_GetTick>
 80133e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80133e6:	e008      	b.n	80133fa <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80133e8:	f7f9 fc78 	bl	800ccdc <HAL_GetTick>
 80133ec:	4602      	mov	r2, r0
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	1ad3      	subs	r3, r2, r3
 80133f2:	2b02      	cmp	r3, #2
 80133f4:	d901      	bls.n	80133fa <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80133f6:	2303      	movs	r3, #3
 80133f8:	e006      	b.n	8013408 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80133fa:	4b05      	ldr	r3, [pc, #20]	@ (8013410 <RCCEx_PLL3_Config+0x12c>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013402:	2b00      	cmp	r3, #0
 8013404:	d0f0      	beq.n	80133e8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8013406:	2300      	movs	r3, #0
}
 8013408:	4618      	mov	r0, r3
 801340a:	3710      	adds	r7, #16
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	44020c00 	.word	0x44020c00

08013414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d101      	bne.n	8013426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013422:	2301      	movs	r3, #1
 8013424:	e042      	b.n	80134ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801342c:	2b00      	cmp	r3, #0
 801342e:	d106      	bne.n	801343e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2200      	movs	r2, #0
 8013434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f7f9 fa29 	bl	800c890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2224      	movs	r2, #36	@ 0x24
 8013442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f022 0201 	bic.w	r2, r2, #1
 8013454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801345a:	2b00      	cmp	r3, #0
 801345c:	d002      	beq.n	8013464 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f000 fdc2 	bl	8013fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f000 fbd1 	bl	8013c0c <UART_SetConfig>
 801346a:	4603      	mov	r3, r0
 801346c:	2b01      	cmp	r3, #1
 801346e:	d101      	bne.n	8013474 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013470:	2301      	movs	r3, #1
 8013472:	e01b      	b.n	80134ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	685a      	ldr	r2, [r3, #4]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	689a      	ldr	r2, [r3, #8]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 0201 	orr.w	r2, r2, #1
 80134a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f000 fe41 	bl	801412c <UART_CheckIdleState>
 80134aa:	4603      	mov	r3, r0
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b08a      	sub	sp, #40	@ 0x28
 80134b8:	af02      	add	r7, sp, #8
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	603b      	str	r3, [r7, #0]
 80134c0:	4613      	mov	r3, r2
 80134c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134ca:	2b20      	cmp	r3, #32
 80134cc:	f040 808b 	bne.w	80135e6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d002      	beq.n	80134dc <HAL_UART_Transmit+0x28>
 80134d6:	88fb      	ldrh	r3, [r7, #6]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d101      	bne.n	80134e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80134dc:	2301      	movs	r3, #1
 80134de:	e083      	b.n	80135e8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80134ea:	2b80      	cmp	r3, #128	@ 0x80
 80134ec:	d107      	bne.n	80134fe <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	689a      	ldr	r2, [r3, #8]
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80134fc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2200      	movs	r2, #0
 8013502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2221      	movs	r2, #33	@ 0x21
 801350a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801350e:	f7f9 fbe5 	bl	800ccdc <HAL_GetTick>
 8013512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	88fa      	ldrh	r2, [r7, #6]
 8013518:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	88fa      	ldrh	r2, [r7, #6]
 8013520:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	689b      	ldr	r3, [r3, #8]
 8013528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801352c:	d108      	bne.n	8013540 <HAL_UART_Transmit+0x8c>
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	691b      	ldr	r3, [r3, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d104      	bne.n	8013540 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8013536:	2300      	movs	r3, #0
 8013538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	61bb      	str	r3, [r7, #24]
 801353e:	e003      	b.n	8013548 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013544:	2300      	movs	r3, #0
 8013546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013548:	e030      	b.n	80135ac <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	2200      	movs	r2, #0
 8013552:	2180      	movs	r1, #128	@ 0x80
 8013554:	68f8      	ldr	r0, [r7, #12]
 8013556:	f000 fe93 	bl	8014280 <UART_WaitOnFlagUntilTimeout>
 801355a:	4603      	mov	r3, r0
 801355c:	2b00      	cmp	r3, #0
 801355e:	d005      	beq.n	801356c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2220      	movs	r2, #32
 8013564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8013568:	2303      	movs	r3, #3
 801356a:	e03d      	b.n	80135e8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d10b      	bne.n	801358a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	881b      	ldrh	r3, [r3, #0]
 8013576:	461a      	mov	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013580:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013582:	69bb      	ldr	r3, [r7, #24]
 8013584:	3302      	adds	r3, #2
 8013586:	61bb      	str	r3, [r7, #24]
 8013588:	e007      	b.n	801359a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	781a      	ldrb	r2, [r3, #0]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	3301      	adds	r3, #1
 8013598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	3b01      	subs	r3, #1
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1c8      	bne.n	801354a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	9300      	str	r3, [sp, #0]
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	2200      	movs	r2, #0
 80135c0:	2140      	movs	r1, #64	@ 0x40
 80135c2:	68f8      	ldr	r0, [r7, #12]
 80135c4:	f000 fe5c 	bl	8014280 <UART_WaitOnFlagUntilTimeout>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d005      	beq.n	80135da <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2220      	movs	r2, #32
 80135d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80135d6:	2303      	movs	r3, #3
 80135d8:	e006      	b.n	80135e8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2220      	movs	r2, #32
 80135de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80135e2:	2300      	movs	r3, #0
 80135e4:	e000      	b.n	80135e8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80135e6:	2302      	movs	r3, #2
  }
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3720      	adds	r7, #32
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b0ae      	sub	sp, #184	@ 0xb8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	69db      	ldr	r3, [r3, #28]
 80135fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801361a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801361e:	4013      	ands	r3, r2
 8013620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8013624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013628:	2b00      	cmp	r3, #0
 801362a:	d11b      	bne.n	8013664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801362c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013630:	f003 0320 	and.w	r3, r3, #32
 8013634:	2b00      	cmp	r3, #0
 8013636:	d015      	beq.n	8013664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801363c:	f003 0320 	and.w	r3, r3, #32
 8013640:	2b00      	cmp	r3, #0
 8013642:	d105      	bne.n	8013650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801364c:	2b00      	cmp	r3, #0
 801364e:	d009      	beq.n	8013664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013654:	2b00      	cmp	r3, #0
 8013656:	f000 82ac 	beq.w	8013bb2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	4798      	blx	r3
      }
      return;
 8013662:	e2a6      	b.n	8013bb2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013668:	2b00      	cmp	r3, #0
 801366a:	f000 80fd 	beq.w	8013868 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801366e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013672:	4b7a      	ldr	r3, [pc, #488]	@ (801385c <HAL_UART_IRQHandler+0x26c>)
 8013674:	4013      	ands	r3, r2
 8013676:	2b00      	cmp	r3, #0
 8013678:	d106      	bne.n	8013688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801367a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801367e:	4b78      	ldr	r3, [pc, #480]	@ (8013860 <HAL_UART_IRQHandler+0x270>)
 8013680:	4013      	ands	r3, r2
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 80f0 	beq.w	8013868 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801368c:	f003 0301 	and.w	r3, r3, #1
 8013690:	2b00      	cmp	r3, #0
 8013692:	d011      	beq.n	80136b8 <HAL_UART_IRQHandler+0xc8>
 8013694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00b      	beq.n	80136b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	2201      	movs	r2, #1
 80136a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80136ae:	f043 0201 	orr.w	r2, r3, #1
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80136b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80136bc:	f003 0302 	and.w	r3, r3, #2
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d011      	beq.n	80136e8 <HAL_UART_IRQHandler+0xf8>
 80136c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136c8:	f003 0301 	and.w	r3, r3, #1
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d00b      	beq.n	80136e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2202      	movs	r2, #2
 80136d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80136de:	f043 0204 	orr.w	r2, r3, #4
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80136e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80136ec:	f003 0304 	and.w	r3, r3, #4
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d011      	beq.n	8013718 <HAL_UART_IRQHandler+0x128>
 80136f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136f8:	f003 0301 	and.w	r3, r3, #1
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d00b      	beq.n	8013718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	2204      	movs	r2, #4
 8013706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801370e:	f043 0202 	orr.w	r2, r3, #2
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013718:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801371c:	f003 0308 	and.w	r3, r3, #8
 8013720:	2b00      	cmp	r3, #0
 8013722:	d017      	beq.n	8013754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013728:	f003 0320 	and.w	r3, r3, #32
 801372c:	2b00      	cmp	r3, #0
 801372e:	d105      	bne.n	801373c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013730:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013734:	4b49      	ldr	r3, [pc, #292]	@ (801385c <HAL_UART_IRQHandler+0x26c>)
 8013736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00b      	beq.n	8013754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2208      	movs	r2, #8
 8013742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801374a:	f043 0208 	orr.w	r2, r3, #8
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801375c:	2b00      	cmp	r3, #0
 801375e:	d012      	beq.n	8013786 <HAL_UART_IRQHandler+0x196>
 8013760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013768:	2b00      	cmp	r3, #0
 801376a:	d00c      	beq.n	8013786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801377c:	f043 0220 	orr.w	r2, r3, #32
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801378c:	2b00      	cmp	r3, #0
 801378e:	f000 8212 	beq.w	8013bb6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013796:	f003 0320 	and.w	r3, r3, #32
 801379a:	2b00      	cmp	r3, #0
 801379c:	d013      	beq.n	80137c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801379e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80137a2:	f003 0320 	and.w	r3, r3, #32
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d105      	bne.n	80137b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80137aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80137ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d007      	beq.n	80137c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d003      	beq.n	80137c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80137cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137da:	2b40      	cmp	r3, #64	@ 0x40
 80137dc:	d005      	beq.n	80137ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80137de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80137e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d02e      	beq.n	8013848 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f000 fdb5 	bl	801435a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	689b      	ldr	r3, [r3, #8]
 80137f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137fa:	2b40      	cmp	r3, #64	@ 0x40
 80137fc:	d120      	bne.n	8013840 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013804:	2b00      	cmp	r3, #0
 8013806:	d017      	beq.n	8013838 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801380e:	4a15      	ldr	r2, [pc, #84]	@ (8013864 <HAL_UART_IRQHandler+0x274>)
 8013810:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013818:	4618      	mov	r0, r3
 801381a:	f7f9 fc9b 	bl	800d154 <HAL_DMA_Abort_IT>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d019      	beq.n	8013858 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801382a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013832:	4610      	mov	r0, r2
 8013834:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013836:	e00f      	b.n	8013858 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f000 f9d1 	bl	8013be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801383e:	e00b      	b.n	8013858 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f000 f9cd 	bl	8013be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013846:	e007      	b.n	8013858 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 f9c9 	bl	8013be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8013856:	e1ae      	b.n	8013bb6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013858:	bf00      	nop
    return;
 801385a:	e1ac      	b.n	8013bb6 <HAL_UART_IRQHandler+0x5c6>
 801385c:	10000001 	.word	0x10000001
 8013860:	04000120 	.word	0x04000120
 8013864:	08014427 	.word	0x08014427

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801386c:	2b01      	cmp	r3, #1
 801386e:	f040 8142 	bne.w	8013af6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013876:	f003 0310 	and.w	r3, r3, #16
 801387a:	2b00      	cmp	r3, #0
 801387c:	f000 813b 	beq.w	8013af6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013884:	f003 0310 	and.w	r3, r3, #16
 8013888:	2b00      	cmp	r3, #0
 801388a:	f000 8134 	beq.w	8013af6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2210      	movs	r2, #16
 8013894:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	689b      	ldr	r3, [r3, #8]
 801389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80138a0:	2b40      	cmp	r3, #64	@ 0x40
 80138a2:	f040 80aa 	bne.w	80139fa <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80138b0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80138b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 8084 	beq.w	80139c6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80138c4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d27c      	bcs.n	80139c6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80138d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138de:	2b81      	cmp	r3, #129	@ 0x81
 80138e0:	d060      	beq.n	80139a4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80138ea:	e853 3f00 	ldrex	r3, [r3]
 80138ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80138f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80138f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	461a      	mov	r2, r3
 8013900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013908:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801390a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801390c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013910:	e841 2300 	strex	r3, r2, [r1]
 8013914:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8013916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013918:	2b00      	cmp	r3, #0
 801391a:	d1e2      	bne.n	80138e2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	3308      	adds	r3, #8
 8013922:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013926:	e853 3f00 	ldrex	r3, [r3]
 801392a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801392c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801392e:	f023 0301 	bic.w	r3, r3, #1
 8013932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	3308      	adds	r3, #8
 801393c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013940:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013942:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013944:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013946:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013948:	e841 2300 	strex	r3, r2, [r1]
 801394c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801394e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013950:	2b00      	cmp	r3, #0
 8013952:	d1e3      	bne.n	801391c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2220      	movs	r2, #32
 8013958:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2200      	movs	r2, #0
 8013960:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801396a:	e853 3f00 	ldrex	r3, [r3]
 801396e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013972:	f023 0310 	bic.w	r3, r3, #16
 8013976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	461a      	mov	r2, r3
 8013980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013984:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013986:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801398a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801398c:	e841 2300 	strex	r3, r2, [r1]
 8013990:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013994:	2b00      	cmp	r3, #0
 8013996:	d1e4      	bne.n	8013962 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f9 fb5c 	bl	800d05c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2202      	movs	r2, #2
 80139a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	4619      	mov	r1, r3
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f000 f918 	bl	8013bf4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80139c4:	e0f9      	b.n	8013bba <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80139cc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80139d0:	429a      	cmp	r2, r3
 80139d2:	f040 80f2 	bne.w	8013bba <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80139dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139de:	2b81      	cmp	r3, #129	@ 0x81
 80139e0:	f040 80eb 	bne.w	8013bba <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2202      	movs	r2, #2
 80139e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80139f0:	4619      	mov	r1, r3
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f000 f8fe 	bl	8013bf4 <HAL_UARTEx_RxEventCallback>
      return;
 80139f8:	e0df      	b.n	8013bba <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	1ad3      	subs	r3, r2, r3
 8013a0a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	f000 80d1 	beq.w	8013bbe <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8013a1c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	f000 80cc 	beq.w	8013bbe <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2e:	e853 3f00 	ldrex	r3, [r3]
 8013a32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	461a      	mov	r2, r3
 8013a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013a50:	e841 2300 	strex	r3, r2, [r1]
 8013a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d1e4      	bne.n	8013a26 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	3308      	adds	r3, #8
 8013a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a66:	e853 3f00 	ldrex	r3, [r3]
 8013a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8013a6c:	6a3b      	ldr	r3, [r7, #32]
 8013a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013a72:	f023 0301 	bic.w	r3, r3, #1
 8013a76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	3308      	adds	r3, #8
 8013a80:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013a84:	633a      	str	r2, [r7, #48]	@ 0x30
 8013a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a8c:	e841 2300 	strex	r3, r2, [r1]
 8013a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d1e1      	bne.n	8013a5c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2220      	movs	r2, #32
 8013a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	e853 3f00 	ldrex	r3, [r3]
 8013ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f023 0310 	bic.w	r3, r3, #16
 8013ac0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	461a      	mov	r2, r3
 8013aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013ace:	61fb      	str	r3, [r7, #28]
 8013ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ad2:	69b9      	ldr	r1, [r7, #24]
 8013ad4:	69fa      	ldr	r2, [r7, #28]
 8013ad6:	e841 2300 	strex	r3, r2, [r1]
 8013ada:	617b      	str	r3, [r7, #20]
   return(result);
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d1e4      	bne.n	8013aac <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2202      	movs	r2, #2
 8013ae6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013ae8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8013aec:	4619      	mov	r1, r3
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f000 f880 	bl	8013bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013af4:	e063      	b.n	8013bbe <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00e      	beq.n	8013b20 <HAL_UART_IRQHandler+0x530>
 8013b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d008      	beq.n	8013b20 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8013b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 fcc5 	bl	80144a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013b1e:	e051      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d014      	beq.n	8013b56 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d105      	bne.n	8013b44 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d008      	beq.n	8013b56 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d03a      	beq.n	8013bc2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	4798      	blx	r3
    }
    return;
 8013b54:	e035      	b.n	8013bc2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d009      	beq.n	8013b76 <HAL_UART_IRQHandler+0x586>
 8013b62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d003      	beq.n	8013b76 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 fc6f 	bl	8014452 <UART_EndTransmit_IT>
    return;
 8013b74:	e026      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013b76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d009      	beq.n	8013b96 <HAL_UART_IRQHandler+0x5a6>
 8013b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013b86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d003      	beq.n	8013b96 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fc9e 	bl	80144d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013b94:	e016      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d010      	beq.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
 8013ba2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	da0c      	bge.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f000 fc86 	bl	80144bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013bb0:	e008      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8013bb2:	bf00      	nop
 8013bb4:	e006      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8013bb6:	bf00      	nop
 8013bb8:	e004      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8013bba:	bf00      	nop
 8013bbc:	e002      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8013bbe:	bf00      	nop
 8013bc0:	e000      	b.n	8013bc4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8013bc2:	bf00      	nop
  }
}
 8013bc4:	37b8      	adds	r7, #184	@ 0xb8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop

08013bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013bcc:	b480      	push	{r7}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013bd4:	bf00      	nop
 8013bd6:	370c      	adds	r7, #12
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013be0:	b480      	push	{r7}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013be8:	bf00      	nop
 8013bea:	370c      	adds	r7, #12
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b083      	sub	sp, #12
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013c00:	bf00      	nop
 8013c02:	370c      	adds	r7, #12
 8013c04:	46bd      	mov	sp, r7
 8013c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0a:	4770      	bx	lr

08013c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c10:	b094      	sub	sp, #80	@ 0x50
 8013c12:	af00      	add	r7, sp, #0
 8013c14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013c16:	2300      	movs	r3, #0
 8013c18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8013c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	4b78      	ldr	r3, [pc, #480]	@ (8013e04 <UART_SetConfig+0x1f8>)
 8013c22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c26:	689a      	ldr	r2, [r3, #8]
 8013c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c2a:	691b      	ldr	r3, [r3, #16]
 8013c2c:	431a      	orrs	r2, r3
 8013c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c30:	695b      	ldr	r3, [r3, #20]
 8013c32:	431a      	orrs	r2, r3
 8013c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c36:	69db      	ldr	r3, [r3, #28]
 8013c38:	4313      	orrs	r3, r2
 8013c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	4971      	ldr	r1, [pc, #452]	@ (8013e08 <UART_SetConfig+0x1fc>)
 8013c44:	4019      	ands	r1, r3
 8013c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c4c:	430b      	orrs	r3, r1
 8013c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8013c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c5c:	68d9      	ldr	r1, [r3, #12]
 8013c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c60:	681a      	ldr	r2, [r3, #0]
 8013c62:	ea40 0301 	orr.w	r3, r0, r1
 8013c66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c6a:	699b      	ldr	r3, [r3, #24]
 8013c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	4b64      	ldr	r3, [pc, #400]	@ (8013e04 <UART_SetConfig+0x1f8>)
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d009      	beq.n	8013c8c <UART_SetConfig+0x80>
 8013c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	4b63      	ldr	r3, [pc, #396]	@ (8013e0c <UART_SetConfig+0x200>)
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d004      	beq.n	8013c8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c84:	6a1a      	ldr	r2, [r3, #32]
 8013c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8013c96:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8013c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ca0:	430b      	orrs	r3, r1
 8013ca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013caa:	f023 000f 	bic.w	r0, r3, #15
 8013cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	ea40 0301 	orr.w	r3, r0, r1
 8013cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	4b53      	ldr	r3, [pc, #332]	@ (8013e10 <UART_SetConfig+0x204>)
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d102      	bne.n	8013ccc <UART_SetConfig+0xc0>
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cca:	e066      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	4b50      	ldr	r3, [pc, #320]	@ (8013e14 <UART_SetConfig+0x208>)
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	d102      	bne.n	8013cdc <UART_SetConfig+0xd0>
 8013cd6:	2302      	movs	r3, #2
 8013cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cda:	e05e      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cde:	681a      	ldr	r2, [r3, #0]
 8013ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8013e18 <UART_SetConfig+0x20c>)
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d102      	bne.n	8013cec <UART_SetConfig+0xe0>
 8013ce6:	2304      	movs	r3, #4
 8013ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cea:	e056      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cee:	681a      	ldr	r2, [r3, #0]
 8013cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8013e1c <UART_SetConfig+0x210>)
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d102      	bne.n	8013cfc <UART_SetConfig+0xf0>
 8013cf6:	2308      	movs	r3, #8
 8013cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cfa:	e04e      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	4b47      	ldr	r3, [pc, #284]	@ (8013e20 <UART_SetConfig+0x214>)
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d102      	bne.n	8013d0c <UART_SetConfig+0x100>
 8013d06:	2310      	movs	r3, #16
 8013d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d0a:	e046      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	4b44      	ldr	r3, [pc, #272]	@ (8013e24 <UART_SetConfig+0x218>)
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d102      	bne.n	8013d1c <UART_SetConfig+0x110>
 8013d16:	2320      	movs	r3, #32
 8013d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d1a:	e03e      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	4b41      	ldr	r3, [pc, #260]	@ (8013e28 <UART_SetConfig+0x21c>)
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d102      	bne.n	8013d2c <UART_SetConfig+0x120>
 8013d26:	2340      	movs	r3, #64	@ 0x40
 8013d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d2a:	e036      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	4b3e      	ldr	r3, [pc, #248]	@ (8013e2c <UART_SetConfig+0x220>)
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d102      	bne.n	8013d3c <UART_SetConfig+0x130>
 8013d36:	2380      	movs	r3, #128	@ 0x80
 8013d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d3a:	e02e      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	4b3b      	ldr	r3, [pc, #236]	@ (8013e30 <UART_SetConfig+0x224>)
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d103      	bne.n	8013d4e <UART_SetConfig+0x142>
 8013d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d4c:	e025      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	4b38      	ldr	r3, [pc, #224]	@ (8013e34 <UART_SetConfig+0x228>)
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d103      	bne.n	8013d60 <UART_SetConfig+0x154>
 8013d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d5e:	e01c      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	4b34      	ldr	r3, [pc, #208]	@ (8013e38 <UART_SetConfig+0x22c>)
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d103      	bne.n	8013d72 <UART_SetConfig+0x166>
 8013d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d70:	e013      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	4b31      	ldr	r3, [pc, #196]	@ (8013e3c <UART_SetConfig+0x230>)
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d103      	bne.n	8013d84 <UART_SetConfig+0x178>
 8013d7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d82:	e00a      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	4b1e      	ldr	r3, [pc, #120]	@ (8013e04 <UART_SetConfig+0x1f8>)
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d103      	bne.n	8013d96 <UART_SetConfig+0x18a>
 8013d8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d94:	e001      	b.n	8013d9a <UART_SetConfig+0x18e>
 8013d96:	2300      	movs	r3, #0
 8013d98:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	4b19      	ldr	r3, [pc, #100]	@ (8013e04 <UART_SetConfig+0x1f8>)
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d005      	beq.n	8013db0 <UART_SetConfig+0x1a4>
 8013da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	4b18      	ldr	r3, [pc, #96]	@ (8013e0c <UART_SetConfig+0x200>)
 8013daa:	429a      	cmp	r2, r3
 8013dac:	f040 8094 	bne.w	8013ed8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013db2:	2200      	movs	r2, #0
 8013db4:	623b      	str	r3, [r7, #32]
 8013db6:	627a      	str	r2, [r7, #36]	@ 0x24
 8013db8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013dbc:	f7fc fea0 	bl	8010b00 <HAL_RCCEx_GetPeriphCLKFreq>
 8013dc0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8013dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f000 80f7 	beq.w	8013fb8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dce:	4a1c      	ldr	r2, [pc, #112]	@ (8013e40 <UART_SetConfig+0x234>)
 8013dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ddc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013de0:	685a      	ldr	r2, [r3, #4]
 8013de2:	4613      	mov	r3, r2
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d305      	bcc.n	8013dfa <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d924      	bls.n	8013e44 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013e00:	e069      	b.n	8013ed6 <UART_SetConfig+0x2ca>
 8013e02:	bf00      	nop
 8013e04:	44002400 	.word	0x44002400
 8013e08:	cfff69f3 	.word	0xcfff69f3
 8013e0c:	54002400 	.word	0x54002400
 8013e10:	40013800 	.word	0x40013800
 8013e14:	40004400 	.word	0x40004400
 8013e18:	40004800 	.word	0x40004800
 8013e1c:	40004c00 	.word	0x40004c00
 8013e20:	40005000 	.word	0x40005000
 8013e24:	40006400 	.word	0x40006400
 8013e28:	40007800 	.word	0x40007800
 8013e2c:	40007c00 	.word	0x40007c00
 8013e30:	40008000 	.word	0x40008000
 8013e34:	40006800 	.word	0x40006800
 8013e38:	40006c00 	.word	0x40006c00
 8013e3c:	40008400 	.word	0x40008400
 8013e40:	080147a4 	.word	0x080147a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e46:	2200      	movs	r2, #0
 8013e48:	61bb      	str	r3, [r7, #24]
 8013e4a:	61fa      	str	r2, [r7, #28]
 8013e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e50:	4a64      	ldr	r2, [pc, #400]	@ (8013fe4 <UART_SetConfig+0x3d8>)
 8013e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	2200      	movs	r2, #0
 8013e5a:	613b      	str	r3, [r7, #16]
 8013e5c:	617a      	str	r2, [r7, #20]
 8013e5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013e62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013e66:	f7f8 fa11 	bl	800c28c <__aeabi_uldivmod>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	4610      	mov	r0, r2
 8013e70:	4619      	mov	r1, r3
 8013e72:	f04f 0200 	mov.w	r2, #0
 8013e76:	f04f 0300 	mov.w	r3, #0
 8013e7a:	020b      	lsls	r3, r1, #8
 8013e7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013e80:	0202      	lsls	r2, r0, #8
 8013e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013e84:	6849      	ldr	r1, [r1, #4]
 8013e86:	0849      	lsrs	r1, r1, #1
 8013e88:	2000      	movs	r0, #0
 8013e8a:	460c      	mov	r4, r1
 8013e8c:	4605      	mov	r5, r0
 8013e8e:	eb12 0804 	adds.w	r8, r2, r4
 8013e92:	eb43 0905 	adc.w	r9, r3, r5
 8013e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	60bb      	str	r3, [r7, #8]
 8013e9e:	60fa      	str	r2, [r7, #12]
 8013ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013ea4:	4640      	mov	r0, r8
 8013ea6:	4649      	mov	r1, r9
 8013ea8:	f7f8 f9f0 	bl	800c28c <__aeabi_uldivmod>
 8013eac:	4602      	mov	r2, r0
 8013eae:	460b      	mov	r3, r1
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013eba:	d308      	bcc.n	8013ece <UART_SetConfig+0x2c2>
 8013ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013ec2:	d204      	bcs.n	8013ece <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8013ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013eca:	60da      	str	r2, [r3, #12]
 8013ecc:	e003      	b.n	8013ed6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8013ece:	2301      	movs	r3, #1
 8013ed0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8013ed4:	e070      	b.n	8013fb8 <UART_SetConfig+0x3ac>
 8013ed6:	e06f      	b.n	8013fb8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eda:	69db      	ldr	r3, [r3, #28]
 8013edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013ee0:	d13c      	bne.n	8013f5c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	603b      	str	r3, [r7, #0]
 8013ee8:	607a      	str	r2, [r7, #4]
 8013eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013eee:	f7fc fe07 	bl	8010b00 <HAL_RCCEx_GetPeriphCLKFreq>
 8013ef2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d05e      	beq.n	8013fb8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013efe:	4a39      	ldr	r2, [pc, #228]	@ (8013fe4 <UART_SetConfig+0x3d8>)
 8013f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f04:	461a      	mov	r2, r3
 8013f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f0c:	005a      	lsls	r2, r3, #1
 8013f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	085b      	lsrs	r3, r3, #1
 8013f14:	441a      	add	r2, r3
 8013f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f22:	2b0f      	cmp	r3, #15
 8013f24:	d916      	bls.n	8013f54 <UART_SetConfig+0x348>
 8013f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f2c:	d212      	bcs.n	8013f54 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	f023 030f 	bic.w	r3, r3, #15
 8013f36:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f3a:	085b      	lsrs	r3, r3, #1
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	f003 0307 	and.w	r3, r3, #7
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013f46:	4313      	orrs	r3, r2
 8013f48:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8013f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013f50:	60da      	str	r2, [r3, #12]
 8013f52:	e031      	b.n	8013fb8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8013f54:	2301      	movs	r3, #1
 8013f56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013f5a:	e02d      	b.n	8013fb8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f5e:	2200      	movs	r2, #0
 8013f60:	469a      	mov	sl, r3
 8013f62:	4693      	mov	fp, r2
 8013f64:	4650      	mov	r0, sl
 8013f66:	4659      	mov	r1, fp
 8013f68:	f7fc fdca 	bl	8010b00 <HAL_RCCEx_GetPeriphCLKFreq>
 8013f6c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8013f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d021      	beq.n	8013fb8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f78:	4a1a      	ldr	r2, [pc, #104]	@ (8013fe4 <UART_SetConfig+0x3d8>)
 8013f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f7e:	461a      	mov	r2, r3
 8013f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f82:	fbb3 f2f2 	udiv	r2, r3, r2
 8013f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	085b      	lsrs	r3, r3, #1
 8013f8c:	441a      	add	r2, r3
 8013f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f9a:	2b0f      	cmp	r3, #15
 8013f9c:	d909      	bls.n	8013fb2 <UART_SetConfig+0x3a6>
 8013f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fa4:	d205      	bcs.n	8013fb2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fa8:	b29a      	uxth	r2, r3
 8013faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	60da      	str	r2, [r3, #12]
 8013fb0:	e002      	b.n	8013fb8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fba:	2201      	movs	r2, #1
 8013fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fca:	2200      	movs	r2, #0
 8013fcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3750      	adds	r7, #80	@ 0x50
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013fe2:	bf00      	nop
 8013fe4:	080147a4 	.word	0x080147a4

08013fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ff4:	f003 0308 	and.w	r3, r3, #8
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00a      	beq.n	8014012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	430a      	orrs	r2, r1
 8014010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014016:	f003 0301 	and.w	r3, r3, #1
 801401a:	2b00      	cmp	r3, #0
 801401c:	d00a      	beq.n	8014034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	430a      	orrs	r2, r1
 8014032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014038:	f003 0302 	and.w	r3, r3, #2
 801403c:	2b00      	cmp	r3, #0
 801403e:	d00a      	beq.n	8014056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	430a      	orrs	r2, r1
 8014054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801405a:	f003 0304 	and.w	r3, r3, #4
 801405e:	2b00      	cmp	r3, #0
 8014060:	d00a      	beq.n	8014078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	430a      	orrs	r2, r1
 8014076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801407c:	f003 0310 	and.w	r3, r3, #16
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00a      	beq.n	801409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	689b      	ldr	r3, [r3, #8]
 801408a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	430a      	orrs	r2, r1
 8014098:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801409e:	f003 0320 	and.w	r3, r3, #32
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d00a      	beq.n	80140bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	689b      	ldr	r3, [r3, #8]
 80140ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	430a      	orrs	r2, r1
 80140ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d01a      	beq.n	80140fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	430a      	orrs	r2, r1
 80140dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80140e6:	d10a      	bne.n	80140fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	430a      	orrs	r2, r1
 80140fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014106:	2b00      	cmp	r3, #0
 8014108:	d00a      	beq.n	8014120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	430a      	orrs	r2, r1
 801411e:	605a      	str	r2, [r3, #4]
  }
}
 8014120:	bf00      	nop
 8014122:	370c      	adds	r7, #12
 8014124:	46bd      	mov	sp, r7
 8014126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412a:	4770      	bx	lr

0801412c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b098      	sub	sp, #96	@ 0x60
 8014130:	af02      	add	r7, sp, #8
 8014132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2200      	movs	r2, #0
 8014138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801413c:	f7f8 fdce 	bl	800ccdc <HAL_GetTick>
 8014140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	f003 0308 	and.w	r3, r3, #8
 801414c:	2b08      	cmp	r3, #8
 801414e:	d12f      	bne.n	80141b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014154:	9300      	str	r3, [sp, #0]
 8014156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014158:	2200      	movs	r2, #0
 801415a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 f88e 	bl	8014280 <UART_WaitOnFlagUntilTimeout>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d022      	beq.n	80141b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014172:	e853 3f00 	ldrex	r3, [r3]
 8014176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801417a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801417e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	461a      	mov	r2, r3
 8014186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014188:	647b      	str	r3, [r7, #68]	@ 0x44
 801418a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801418c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801418e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014190:	e841 2300 	strex	r3, r2, [r1]
 8014194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014198:	2b00      	cmp	r3, #0
 801419a:	d1e6      	bne.n	801416a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2220      	movs	r2, #32
 80141a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2200      	movs	r2, #0
 80141a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80141ac:	2303      	movs	r3, #3
 80141ae:	e063      	b.n	8014278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f003 0304 	and.w	r3, r3, #4
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	d149      	bne.n	8014252 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80141be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c6:	2200      	movs	r2, #0
 80141c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 f857 	bl	8014280 <UART_WaitOnFlagUntilTimeout>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d03c      	beq.n	8014252 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e0:	e853 3f00 	ldrex	r3, [r3]
 80141e4:	623b      	str	r3, [r7, #32]
   return(result);
 80141e6:	6a3b      	ldr	r3, [r7, #32]
 80141e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80141ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	461a      	mov	r2, r3
 80141f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80141f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80141fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141fe:	e841 2300 	strex	r3, r2, [r1]
 8014202:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014206:	2b00      	cmp	r3, #0
 8014208:	d1e6      	bne.n	80141d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	3308      	adds	r3, #8
 8014210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	e853 3f00 	ldrex	r3, [r3]
 8014218:	60fb      	str	r3, [r7, #12]
   return(result);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f023 0301 	bic.w	r3, r3, #1
 8014220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	3308      	adds	r3, #8
 8014228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801422a:	61fa      	str	r2, [r7, #28]
 801422c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801422e:	69b9      	ldr	r1, [r7, #24]
 8014230:	69fa      	ldr	r2, [r7, #28]
 8014232:	e841 2300 	strex	r3, r2, [r1]
 8014236:	617b      	str	r3, [r7, #20]
   return(result);
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d1e5      	bne.n	801420a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2220      	movs	r2, #32
 8014242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2200      	movs	r2, #0
 801424a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801424e:	2303      	movs	r3, #3
 8014250:	e012      	b.n	8014278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2220      	movs	r2, #32
 8014256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2220      	movs	r2, #32
 801425e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2200      	movs	r2, #0
 8014266:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2200      	movs	r2, #0
 801426c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2200      	movs	r2, #0
 8014272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014276:	2300      	movs	r3, #0
}
 8014278:	4618      	mov	r0, r3
 801427a:	3758      	adds	r7, #88	@ 0x58
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	4613      	mov	r3, r2
 801428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014290:	e04f      	b.n	8014332 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014298:	d04b      	beq.n	8014332 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801429a:	f7f8 fd1f 	bl	800ccdc <HAL_GetTick>
 801429e:	4602      	mov	r2, r0
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	1ad3      	subs	r3, r2, r3
 80142a4:	69ba      	ldr	r2, [r7, #24]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d302      	bcc.n	80142b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d101      	bne.n	80142b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80142b0:	2303      	movs	r3, #3
 80142b2:	e04e      	b.n	8014352 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f003 0304 	and.w	r3, r3, #4
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d037      	beq.n	8014332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	2b80      	cmp	r3, #128	@ 0x80
 80142c6:	d034      	beq.n	8014332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	2b40      	cmp	r3, #64	@ 0x40
 80142cc:	d031      	beq.n	8014332 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	69db      	ldr	r3, [r3, #28]
 80142d4:	f003 0308 	and.w	r3, r3, #8
 80142d8:	2b08      	cmp	r3, #8
 80142da:	d110      	bne.n	80142fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2208      	movs	r2, #8
 80142e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f000 f838 	bl	801435a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	2208      	movs	r2, #8
 80142ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	2200      	movs	r2, #0
 80142f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80142fa:	2301      	movs	r3, #1
 80142fc:	e029      	b.n	8014352 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	69db      	ldr	r3, [r3, #28]
 8014304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801430c:	d111      	bne.n	8014332 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	f000 f81e 	bl	801435a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2220      	movs	r2, #32
 8014322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2200      	movs	r2, #0
 801432a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801432e:	2303      	movs	r3, #3
 8014330:	e00f      	b.n	8014352 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	69da      	ldr	r2, [r3, #28]
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	4013      	ands	r3, r2
 801433c:	68ba      	ldr	r2, [r7, #8]
 801433e:	429a      	cmp	r2, r3
 8014340:	bf0c      	ite	eq
 8014342:	2301      	moveq	r3, #1
 8014344:	2300      	movne	r3, #0
 8014346:	b2db      	uxtb	r3, r3
 8014348:	461a      	mov	r2, r3
 801434a:	79fb      	ldrb	r3, [r7, #7]
 801434c:	429a      	cmp	r2, r3
 801434e:	d0a0      	beq.n	8014292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	3710      	adds	r7, #16
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801435a:	b480      	push	{r7}
 801435c:	b095      	sub	sp, #84	@ 0x54
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801436a:	e853 3f00 	ldrex	r3, [r3]
 801436e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	461a      	mov	r2, r3
 801437e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014380:	643b      	str	r3, [r7, #64]	@ 0x40
 8014382:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014388:	e841 2300 	strex	r3, r2, [r1]
 801438c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014390:	2b00      	cmp	r3, #0
 8014392:	d1e6      	bne.n	8014362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	3308      	adds	r3, #8
 801439a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801439c:	6a3b      	ldr	r3, [r7, #32]
 801439e:	e853 3f00 	ldrex	r3, [r3]
 80143a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80143aa:	f023 0301 	bic.w	r3, r3, #1
 80143ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	3308      	adds	r3, #8
 80143b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80143b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80143ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80143be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143c0:	e841 2300 	strex	r3, r2, [r1]
 80143c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80143c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1e3      	bne.n	8014394 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143d0:	2b01      	cmp	r3, #1
 80143d2:	d118      	bne.n	8014406 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	e853 3f00 	ldrex	r3, [r3]
 80143e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	f023 0310 	bic.w	r3, r3, #16
 80143e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	461a      	mov	r2, r3
 80143f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80143f2:	61bb      	str	r3, [r7, #24]
 80143f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143f6:	6979      	ldr	r1, [r7, #20]
 80143f8:	69ba      	ldr	r2, [r7, #24]
 80143fa:	e841 2300 	strex	r3, r2, [r1]
 80143fe:	613b      	str	r3, [r7, #16]
   return(result);
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d1e6      	bne.n	80143d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2220      	movs	r2, #32
 801440a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2200      	movs	r2, #0
 8014418:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801441a:	bf00      	nop
 801441c:	3754      	adds	r7, #84	@ 0x54
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr

08014426 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014426:	b580      	push	{r7, lr}
 8014428:	b084      	sub	sp, #16
 801442a:	af00      	add	r7, sp, #0
 801442c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2200      	movs	r2, #0
 8014438:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2200      	movs	r2, #0
 8014440:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014444:	68f8      	ldr	r0, [r7, #12]
 8014446:	f7ff fbcb 	bl	8013be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801444a:	bf00      	nop
 801444c:	3710      	adds	r7, #16
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}

08014452 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014452:	b580      	push	{r7, lr}
 8014454:	b088      	sub	sp, #32
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	e853 3f00 	ldrex	r3, [r3]
 8014466:	60bb      	str	r3, [r7, #8]
   return(result);
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801446e:	61fb      	str	r3, [r7, #28]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	461a      	mov	r2, r3
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	61bb      	str	r3, [r7, #24]
 801447a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801447c:	6979      	ldr	r1, [r7, #20]
 801447e:	69ba      	ldr	r2, [r7, #24]
 8014480:	e841 2300 	strex	r3, r2, [r1]
 8014484:	613b      	str	r3, [r7, #16]
   return(result);
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d1e6      	bne.n	801445a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2220      	movs	r2, #32
 8014490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2200      	movs	r2, #0
 8014498:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7ff fb96 	bl	8013bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80144a0:	bf00      	nop
 80144a2:	3720      	adds	r7, #32
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}

080144a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b083      	sub	sp, #12
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80144b0:	bf00      	nop
 80144b2:	370c      	adds	r7, #12
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr

080144bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80144bc:	b480      	push	{r7}
 80144be:	b083      	sub	sp, #12
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80144c4:	bf00      	nop
 80144c6:	370c      	adds	r7, #12
 80144c8:	46bd      	mov	sp, r7
 80144ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ce:	4770      	bx	lr

080144d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b083      	sub	sp, #12
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80144d8:	bf00      	nop
 80144da:	370c      	adds	r7, #12
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr

080144e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b085      	sub	sp, #20
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d101      	bne.n	80144fa <HAL_UARTEx_DisableFifoMode+0x16>
 80144f6:	2302      	movs	r3, #2
 80144f8:	e027      	b.n	801454a <HAL_UARTEx_DisableFifoMode+0x66>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2201      	movs	r2, #1
 80144fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2224      	movs	r2, #36	@ 0x24
 8014506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f022 0201 	bic.w	r2, r2, #1
 8014520:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8014528:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	68fa      	ldr	r2, [r7, #12]
 8014536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2220      	movs	r2, #32
 801453c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2200      	movs	r2, #0
 8014544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3714      	adds	r7, #20
 801454e:	46bd      	mov	sp, r7
 8014550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014554:	4770      	bx	lr

08014556 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b084      	sub	sp, #16
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014566:	2b01      	cmp	r3, #1
 8014568:	d101      	bne.n	801456e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801456a:	2302      	movs	r3, #2
 801456c:	e02d      	b.n	80145ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2201      	movs	r2, #1
 8014572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2224      	movs	r2, #36	@ 0x24
 801457a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	f022 0201 	bic.w	r2, r2, #1
 8014594:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	689b      	ldr	r3, [r3, #8]
 801459c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	683a      	ldr	r2, [r7, #0]
 80145a6:	430a      	orrs	r2, r1
 80145a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f000 f850 	bl	8014650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	68fa      	ldr	r2, [r7, #12]
 80145b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2220      	movs	r2, #32
 80145bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2200      	movs	r2, #0
 80145c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3710      	adds	r7, #16
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}

080145d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b084      	sub	sp, #16
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d101      	bne.n	80145ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80145e6:	2302      	movs	r3, #2
 80145e8:	e02d      	b.n	8014646 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2201      	movs	r2, #1
 80145ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2224      	movs	r2, #36	@ 0x24
 80145f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f022 0201 	bic.w	r2, r2, #1
 8014610:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	683a      	ldr	r2, [r7, #0]
 8014622:	430a      	orrs	r2, r1
 8014624:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 f812 	bl	8014650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	68fa      	ldr	r2, [r7, #12]
 8014632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2220      	movs	r2, #32
 8014638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014644:	2300      	movs	r3, #0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014650:	b480      	push	{r7}
 8014652:	b085      	sub	sp, #20
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801465c:	2b00      	cmp	r3, #0
 801465e:	d108      	bne.n	8014672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2201      	movs	r2, #1
 8014664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2201      	movs	r2, #1
 801466c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014670:	e031      	b.n	80146d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014672:	2308      	movs	r3, #8
 8014674:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014676:	2308      	movs	r3, #8
 8014678:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	689b      	ldr	r3, [r3, #8]
 8014680:	0e5b      	lsrs	r3, r3, #25
 8014682:	b2db      	uxtb	r3, r3
 8014684:	f003 0307 	and.w	r3, r3, #7
 8014688:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	0f5b      	lsrs	r3, r3, #29
 8014692:	b2db      	uxtb	r3, r3
 8014694:	f003 0307 	and.w	r3, r3, #7
 8014698:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801469a:	7bbb      	ldrb	r3, [r7, #14]
 801469c:	7b3a      	ldrb	r2, [r7, #12]
 801469e:	4911      	ldr	r1, [pc, #68]	@ (80146e4 <UARTEx_SetNbDataToProcess+0x94>)
 80146a0:	5c8a      	ldrb	r2, [r1, r2]
 80146a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80146a6:	7b3a      	ldrb	r2, [r7, #12]
 80146a8:	490f      	ldr	r1, [pc, #60]	@ (80146e8 <UARTEx_SetNbDataToProcess+0x98>)
 80146aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80146ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80146b8:	7bfb      	ldrb	r3, [r7, #15]
 80146ba:	7b7a      	ldrb	r2, [r7, #13]
 80146bc:	4909      	ldr	r1, [pc, #36]	@ (80146e4 <UARTEx_SetNbDataToProcess+0x94>)
 80146be:	5c8a      	ldrb	r2, [r1, r2]
 80146c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80146c4:	7b7a      	ldrb	r2, [r7, #13]
 80146c6:	4908      	ldr	r1, [pc, #32]	@ (80146e8 <UARTEx_SetNbDataToProcess+0x98>)
 80146c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80146ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80146d6:	bf00      	nop
 80146d8:	3714      	adds	r7, #20
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr
 80146e2:	bf00      	nop
 80146e4:	080147bc 	.word	0x080147bc
 80146e8:	080147c4 	.word	0x080147c4

080146ec <memset>:
 80146ec:	4402      	add	r2, r0
 80146ee:	4603      	mov	r3, r0
 80146f0:	4293      	cmp	r3, r2
 80146f2:	d100      	bne.n	80146f6 <memset+0xa>
 80146f4:	4770      	bx	lr
 80146f6:	f803 1b01 	strb.w	r1, [r3], #1
 80146fa:	e7f9      	b.n	80146f0 <memset+0x4>

080146fc <__libc_init_array>:
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	4d0d      	ldr	r5, [pc, #52]	@ (8014734 <__libc_init_array+0x38>)
 8014700:	2600      	movs	r6, #0
 8014702:	4c0d      	ldr	r4, [pc, #52]	@ (8014738 <__libc_init_array+0x3c>)
 8014704:	1b64      	subs	r4, r4, r5
 8014706:	10a4      	asrs	r4, r4, #2
 8014708:	42a6      	cmp	r6, r4
 801470a:	d109      	bne.n	8014720 <__libc_init_array+0x24>
 801470c:	4d0b      	ldr	r5, [pc, #44]	@ (801473c <__libc_init_array+0x40>)
 801470e:	2600      	movs	r6, #0
 8014710:	4c0b      	ldr	r4, [pc, #44]	@ (8014740 <__libc_init_array+0x44>)
 8014712:	f000 f817 	bl	8014744 <_init>
 8014716:	1b64      	subs	r4, r4, r5
 8014718:	10a4      	asrs	r4, r4, #2
 801471a:	42a6      	cmp	r6, r4
 801471c:	d105      	bne.n	801472a <__libc_init_array+0x2e>
 801471e:	bd70      	pop	{r4, r5, r6, pc}
 8014720:	f855 3b04 	ldr.w	r3, [r5], #4
 8014724:	3601      	adds	r6, #1
 8014726:	4798      	blx	r3
 8014728:	e7ee      	b.n	8014708 <__libc_init_array+0xc>
 801472a:	f855 3b04 	ldr.w	r3, [r5], #4
 801472e:	3601      	adds	r6, #1
 8014730:	4798      	blx	r3
 8014732:	e7f2      	b.n	801471a <__libc_init_array+0x1e>
 8014734:	080147d4 	.word	0x080147d4
 8014738:	080147d4 	.word	0x080147d4
 801473c:	080147d4 	.word	0x080147d4
 8014740:	080147d8 	.word	0x080147d8

08014744 <_init>:
 8014744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014746:	bf00      	nop
 8014748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801474a:	bc08      	pop	{r3}
 801474c:	469e      	mov	lr, r3
 801474e:	4770      	bx	lr

08014750 <_fini>:
 8014750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014752:	bf00      	nop
 8014754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014756:	bc08      	pop	{r3}
 8014758:	469e      	mov	lr, r3
 801475a:	4770      	bx	lr
